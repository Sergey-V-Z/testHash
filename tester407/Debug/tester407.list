
tester407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000016d4  08009488  08009488  00019488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab5c  0800ab5c  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  0800ab5c  0800ab5c  0001ab5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab64  0800ab64  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab64  0800ab64  0001ab64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ab68  0800ab68  0001ab68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800ab6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020084  2**0
                  CONTENTS
 10 .bss          0000480c  20000084  20000084  00020084  2**2
                  ALLOC
 11 ._user_heap_stack 00006000  20004890  20004890  00020084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f476  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f27  00000000  00000000  0003f52a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015e8  00000000  00000000  00043458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001480  00000000  00000000  00044a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026ee1  00000000  00000000  00045ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ad78  00000000  00000000  0006cda1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9942  00000000  00000000  00087b19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0016145b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006034  00000000  00000000  001614b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009470 	.word	0x08009470

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	08009470 	.word	0x08009470

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <_ZN9RV_BUTTONC1EP12GPIO_TypeDeftbb>:
#include "RV_BUTTON.h"

//создание экземпляра класса кнопки, порт, вывод, type (HIGH_PULL / LOW_PULL) и направление dir (NORM_OPEN / NORM_CLOSE)
RV_BUTTON::RV_BUTTON(GPIO_TypeDef *port, uint16_t pin, bool type, bool dir) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af00      	add	r7, sp, #0
 800056e:	60f8      	str	r0, [r7, #12]
 8000570:	60b9      	str	r1, [r7, #8]
 8000572:	4611      	mov	r1, r2
 8000574:	461a      	mov	r2, r3
 8000576:	460b      	mov	r3, r1
 8000578:	80fb      	strh	r3, [r7, #6]
 800057a:	4613      	mov	r3, r2
 800057c:	717b      	strb	r3, [r7, #5]
	_PORT = port;
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	68ba      	ldr	r2, [r7, #8]
 8000582:	605a      	str	r2, [r3, #4]
	_PIN = pin;
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	88fa      	ldrh	r2, [r7, #6]
 8000588:	811a      	strh	r2, [r3, #8]
	RV_BUTTON::init();
 800058a:	68f8      	ldr	r0, [r7, #12]
 800058c:	f000 f80d 	bl	80005aa <_ZN9RV_BUTTON4initEv>
	RV_BUTTON::setType(type);
 8000590:	797b      	ldrb	r3, [r7, #5]
 8000592:	4619      	mov	r1, r3
 8000594:	68f8      	ldr	r0, [r7, #12]
 8000596:	f000 f82e 	bl	80005f6 <_ZN9RV_BUTTON7setTypeEb>
	_inv_state = dir;
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	7e3a      	ldrb	r2, [r7, #24]
 800059e:	761a      	strb	r2, [r3, #24]
}
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	4618      	mov	r0, r3
 80005a4:	3710      	adds	r7, #16
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}

080005aa <_ZN9RV_BUTTON4initEv>:
//инициализация
void RV_BUTTON::init() {
 80005aa:	b580      	push	{r7, lr}
 80005ac:	b082      	sub	sp, #8
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	6078      	str	r0, [r7, #4]
	_mode = false;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	2200      	movs	r2, #0
 80005b6:	765a      	strb	r2, [r3, #25]
	btn_timer = 0;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2200      	movs	r2, #0
 80005bc:	615a      	str	r2, [r3, #20]
	btn_counter = 0;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	2200      	movs	r2, #0
 80005c2:	741a      	strb	r2, [r3, #16]
	last_counter = 0;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2200      	movs	r2, #0
 80005c8:	745a      	strb	r2, [r3, #17]
	_debounce = 120;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	2278      	movs	r2, #120	; 0x78
 80005ce:	815a      	strh	r2, [r3, #10]
	_timeout = 500;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005d6:	819a      	strh	r2, [r3, #12]
	_step_timeout = 400;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80005de:	81da      	strh	r2, [r3, #14]
	_inv_state = NORM_OPEN;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2200      	movs	r2, #0
 80005e4:	761a      	strb	r2, [r3, #24]
	RV_BUTTON::setType(HIGH_PULL);
 80005e6:	2100      	movs	r1, #0
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f000 f804 	bl	80005f6 <_ZN9RV_BUTTON7setTypeEb>
}
 80005ee:	bf00      	nop
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}

080005f6 <_ZN9RV_BUTTON7setTypeEb>:
//установка таймаута между инкрементами (по умолчанию 400 мс)
void RV_BUTTON::setStepTimeout(uint16_t step_timeout) {
	_step_timeout = step_timeout;
}
//установка типа кнопки (HIGH_PULL / LOW_PULL)
void RV_BUTTON::setType(bool type) {
 80005f6:	b480      	push	{r7}
 80005f8:	b083      	sub	sp, #12
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	6078      	str	r0, [r7, #4]
 80005fe:	460b      	mov	r3, r1
 8000600:	70fb      	strb	r3, [r7, #3]
	_type = type;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	78fa      	ldrb	r2, [r7, #3]
 8000606:	769a      	strb	r2, [r3, #26]
}
 8000608:	bf00      	nop
 800060a:	370c      	adds	r7, #12
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr

08000614 <_ZN9RV_BUTTON7isClickEv>:
	}
	else
		return false;
}
//возвращает true при клике. Сбрасывается после вызова
bool RV_BUTTON::isClick() {	
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
	if (flags.isOne_f) {
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	785b      	ldrb	r3, [r3, #1]
 8000620:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000624:	b2db      	uxtb	r3, r3
 8000626:	2b00      	cmp	r3, #0
 8000628:	d006      	beq.n	8000638 <_ZN9RV_BUTTON7isClickEv+0x24>
		flags.isOne_f = false;
 800062a:	687a      	ldr	r2, [r7, #4]
 800062c:	7853      	ldrb	r3, [r2, #1]
 800062e:	f36f 0341 	bfc	r3, #1, #1
 8000632:	7053      	strb	r3, [r2, #1]
		return true;
 8000634:	2301      	movs	r3, #1
 8000636:	e000      	b.n	800063a <_ZN9RV_BUTTON7isClickEv+0x26>
	}
	else
		return false;
 8000638:	2300      	movs	r3, #0
}
 800063a:	4618      	mov	r0, r3
 800063c:	370c      	adds	r7, #12
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr

08000646 <_ZN9RV_BUTTON4tickEv>:
	_mode = true;
	flags.btn_state = state ^ _inv_state;
	_mode = false;
}
//опрос кнопки
void RV_BUTTON::tick() {	
 8000646:	b580      	push	{r7, lr}
 8000648:	b082      	sub	sp, #8
 800064a:	af00      	add	r7, sp, #0
 800064c:	6078      	str	r0, [r7, #4]
	if (!_mode) flags.btn_state = !HAL_GPIO_ReadPin(_PORT, _PIN) ^ (_inv_state ^ _type);
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	7e5b      	ldrb	r3, [r3, #25]
 8000652:	f083 0301 	eor.w	r3, r3, #1
 8000656:	b2db      	uxtb	r3, r3
 8000658:	2b00      	cmp	r3, #0
 800065a:	d01e      	beq.n	800069a <_ZN9RV_BUTTON4tickEv+0x54>
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	685a      	ldr	r2, [r3, #4]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	891b      	ldrh	r3, [r3, #8]
 8000664:	4619      	mov	r1, r3
 8000666:	4610      	mov	r0, r2
 8000668:	f002 f9d8 	bl	8002a1c <HAL_GPIO_ReadPin>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	bf0c      	ite	eq
 8000672:	2301      	moveq	r3, #1
 8000674:	2300      	movne	r3, #0
 8000676:	b2db      	uxtb	r3, r3
 8000678:	4619      	mov	r1, r3
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	7e1a      	ldrb	r2, [r3, #24]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	7e9b      	ldrb	r3, [r3, #26]
 8000682:	4053      	eors	r3, r2
 8000684:	b2db      	uxtb	r3, r3
 8000686:	4299      	cmp	r1, r3
 8000688:	bf14      	ite	ne
 800068a:	2301      	movne	r3, #1
 800068c:	2300      	moveq	r3, #0
 800068e:	b2d9      	uxtb	r1, r3
 8000690:	687a      	ldr	r2, [r7, #4]
 8000692:	7813      	ldrb	r3, [r2, #0]
 8000694:	f361 0300 	bfi	r3, r1, #0, #1
 8000698:	7013      	strb	r3, [r2, #0]
	
  if (flags.btn_state && !flags.btn_flag && (HAL_GetTick() - btn_timer >= _debounce)) {
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d015      	beq.n	80006d4 <_ZN9RV_BUTTON4tickEv+0x8e>
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	f083 0301 	eor.w	r3, r3, #1
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d00b      	beq.n	80006d4 <_ZN9RV_BUTTON4tickEv+0x8e>
 80006bc:	f001 fe54 	bl	8002368 <HAL_GetTick>
 80006c0:	4602      	mov	r2, r0
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	695b      	ldr	r3, [r3, #20]
 80006c6:	1ad3      	subs	r3, r2, r3
 80006c8:	687a      	ldr	r2, [r7, #4]
 80006ca:	8952      	ldrh	r2, [r2, #10]
 80006cc:	4293      	cmp	r3, r2
 80006ce:	d301      	bcc.n	80006d4 <_ZN9RV_BUTTON4tickEv+0x8e>
 80006d0:	2301      	movs	r3, #1
 80006d2:	e000      	b.n	80006d6 <_ZN9RV_BUTTON4tickEv+0x90>
 80006d4:	2300      	movs	r3, #0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d019      	beq.n	800070e <_ZN9RV_BUTTON4tickEv+0xc8>
    flags.btn_flag = true;
 80006da:	687a      	ldr	r2, [r7, #4]
 80006dc:	7813      	ldrb	r3, [r2, #0]
 80006de:	f043 0302 	orr.w	r3, r3, #2
 80006e2:	7013      	strb	r3, [r2, #0]
    btn_counter++;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	7c1b      	ldrb	r3, [r3, #16]
 80006e8:	3301      	adds	r3, #1
 80006ea:	b2da      	uxtb	r2, r3
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	741a      	strb	r2, [r3, #16]
    btn_timer = HAL_GetTick();
 80006f0:	f001 fe3a 	bl	8002368 <HAL_GetTick>
 80006f4:	4602      	mov	r2, r0
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	615a      	str	r2, [r3, #20]
    flags.isPress_f = true;
 80006fa:	687a      	ldr	r2, [r7, #4]
 80006fc:	7813      	ldrb	r3, [r2, #0]
 80006fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000702:	7013      	strb	r3, [r2, #0]
		flags.oneClick_f = true;
 8000704:	687a      	ldr	r2, [r7, #4]
 8000706:	7853      	ldrb	r3, [r2, #1]
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	7053      	strb	r3, [r2, #1]
  }
  if (!flags.btn_state && flags.btn_flag) {
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000716:	b2db      	uxtb	r3, r3
 8000718:	f083 0301 	eor.w	r3, r3, #1
 800071c:	b2db      	uxtb	r3, r3
 800071e:	2b00      	cmp	r3, #0
 8000720:	d030      	beq.n	8000784 <_ZN9RV_BUTTON4tickEv+0x13e>
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800072a:	b2db      	uxtb	r3, r3
 800072c:	2b00      	cmp	r3, #0
 800072e:	d029      	beq.n	8000784 <_ZN9RV_BUTTON4tickEv+0x13e>
    flags.btn_flag = false;
 8000730:	687a      	ldr	r2, [r7, #4]
 8000732:	7813      	ldrb	r3, [r2, #0]
 8000734:	f36f 0341 	bfc	r3, #1, #1
 8000738:	7013      	strb	r3, [r2, #0]
    flags.hold_flag = false;
 800073a:	687a      	ldr	r2, [r7, #4]
 800073c:	7813      	ldrb	r3, [r2, #0]
 800073e:	f36f 0382 	bfc	r3, #2, #1
 8000742:	7013      	strb	r3, [r2, #0]
    flags.isRelease_f = true;
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	7813      	ldrb	r3, [r2, #0]
 8000748:	f043 0320 	orr.w	r3, r3, #32
 800074c:	7013      	strb	r3, [r2, #0]
		btn_timer = HAL_GetTick();
 800074e:	f001 fe0b 	bl	8002368 <HAL_GetTick>
 8000752:	4602      	mov	r2, r0
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	615a      	str	r2, [r3, #20]
		flags.step_flag = false;
 8000758:	687a      	ldr	r2, [r7, #4]
 800075a:	7813      	ldrb	r3, [r2, #0]
 800075c:	f36f 13c7 	bfc	r3, #7, #1
 8000760:	7013      	strb	r3, [r2, #0]
		if (flags.oneClick_f) {
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	785b      	ldrb	r3, [r3, #1]
 8000766:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800076a:	b2db      	uxtb	r3, r3
 800076c:	2b00      	cmp	r3, #0
 800076e:	d009      	beq.n	8000784 <_ZN9RV_BUTTON4tickEv+0x13e>
			flags.oneClick_f = false;
 8000770:	687a      	ldr	r2, [r7, #4]
 8000772:	7853      	ldrb	r3, [r2, #1]
 8000774:	f36f 0300 	bfc	r3, #0, #1
 8000778:	7053      	strb	r3, [r2, #1]
			flags.isOne_f = true;
 800077a:	687a      	ldr	r2, [r7, #4]
 800077c:	7853      	ldrb	r3, [r2, #1]
 800077e:	f043 0302 	orr.w	r3, r3, #2
 8000782:	7053      	strb	r3, [r2, #1]
		}
  }
  if (flags.btn_flag && flags.btn_state && (HAL_GetTick() - btn_timer >= _timeout) && !flags.hold_flag) {
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800078c:	b2db      	uxtb	r3, r3
 800078e:	2b00      	cmp	r3, #0
 8000790:	d01c      	beq.n	80007cc <_ZN9RV_BUTTON4tickEv+0x186>
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800079a:	b2db      	uxtb	r3, r3
 800079c:	2b00      	cmp	r3, #0
 800079e:	d015      	beq.n	80007cc <_ZN9RV_BUTTON4tickEv+0x186>
 80007a0:	f001 fde2 	bl	8002368 <HAL_GetTick>
 80007a4:	4602      	mov	r2, r0
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	695b      	ldr	r3, [r3, #20]
 80007aa:	1ad3      	subs	r3, r2, r3
 80007ac:	687a      	ldr	r2, [r7, #4]
 80007ae:	8992      	ldrh	r2, [r2, #12]
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d30b      	bcc.n	80007cc <_ZN9RV_BUTTON4tickEv+0x186>
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	f083 0301 	eor.w	r3, r3, #1
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <_ZN9RV_BUTTON4tickEv+0x186>
 80007c8:	2301      	movs	r3, #1
 80007ca:	e000      	b.n	80007ce <_ZN9RV_BUTTON4tickEv+0x188>
 80007cc:	2300      	movs	r3, #0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d01b      	beq.n	800080a <_ZN9RV_BUTTON4tickEv+0x1c4>
    flags.hold_flag = true;
 80007d2:	687a      	ldr	r2, [r7, #4]
 80007d4:	7813      	ldrb	r3, [r2, #0]
 80007d6:	f043 0304 	orr.w	r3, r3, #4
 80007da:	7013      	strb	r3, [r2, #0]
    btn_counter = 0;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2200      	movs	r2, #0
 80007e0:	741a      	strb	r2, [r3, #16]
    flags.isHolded_f = true;
 80007e2:	687a      	ldr	r2, [r7, #4]
 80007e4:	7813      	ldrb	r3, [r2, #0]
 80007e6:	f043 0310 	orr.w	r3, r3, #16
 80007ea:	7013      	strb	r3, [r2, #0]
		flags.step_flag = true;
 80007ec:	687a      	ldr	r2, [r7, #4]
 80007ee:	7813      	ldrb	r3, [r2, #0]
 80007f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f4:	7013      	strb	r3, [r2, #0]
		flags.oneClick_f = false;
 80007f6:	687a      	ldr	r2, [r7, #4]
 80007f8:	7853      	ldrb	r3, [r2, #1]
 80007fa:	f36f 0300 	bfc	r3, #0, #1
 80007fe:	7053      	strb	r3, [r2, #1]
		btn_timer = HAL_GetTick();
 8000800:	f001 fdb2 	bl	8002368 <HAL_GetTick>
 8000804:	4602      	mov	r2, r0
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	615a      	str	r2, [r3, #20]
  }
  
  if ((HAL_GetTick() - btn_timer >= _timeout) && (btn_counter != 0)) {    
 800080a:	f001 fdad 	bl	8002368 <HAL_GetTick>
 800080e:	4602      	mov	r2, r0
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	695b      	ldr	r3, [r3, #20]
 8000814:	1ad3      	subs	r3, r2, r3
 8000816:	687a      	ldr	r2, [r7, #4]
 8000818:	8992      	ldrh	r2, [r2, #12]
 800081a:	4293      	cmp	r3, r2
 800081c:	d305      	bcc.n	800082a <_ZN9RV_BUTTON4tickEv+0x1e4>
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	7c1b      	ldrb	r3, [r3, #16]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <_ZN9RV_BUTTON4tickEv+0x1e4>
 8000826:	2301      	movs	r3, #1
 8000828:	e000      	b.n	800082c <_ZN9RV_BUTTON4tickEv+0x1e6>
 800082a:	2300      	movs	r3, #0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d00b      	beq.n	8000848 <_ZN9RV_BUTTON4tickEv+0x202>
    last_counter = btn_counter;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	7c1a      	ldrb	r2, [r3, #16]
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	745a      	strb	r2, [r3, #17]
    btn_counter = 0;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2200      	movs	r2, #0
 800083c:	741a      	strb	r2, [r3, #16]
		flags.counter_flag = true;
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	7813      	ldrb	r3, [r2, #0]
 8000842:	f043 0308 	orr.w	r3, r3, #8
 8000846:	7013      	strb	r3, [r2, #0]
  }
}
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8000850:	b480      	push	{r7}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0
 8000856:	60f8      	str	r0, [r7, #12]
 8000858:	60b9      	str	r1, [r7, #8]
 800085a:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	4a07      	ldr	r2, [pc, #28]	; (800087c <vApplicationGetIdleTaskMemory+0x2c>)
 8000860:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	4a06      	ldr	r2, [pc, #24]	; (8000880 <vApplicationGetIdleTaskMemory+0x30>)
 8000866:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	2280      	movs	r2, #128	; 0x80
 800086c:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 800086e:	bf00      	nop
 8000870:	3714      	adds	r7, #20
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	200002dc 	.word	0x200002dc
 8000880:	20000390 	.word	0x20000390

08000884 <_Z16MX_FREERTOS_Initv>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000884:	b5b0      	push	{r4, r5, r7, lr}
 8000886:	b09c      	sub	sp, #112	; 0x70
 8000888:	af00      	add	r7, sp, #0
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of testTask */
  osThreadDef(testTask, TestTask, osPriorityNormal, 0, 256);
 800088a:	4b27      	ldr	r3, [pc, #156]	; (8000928 <_Z16MX_FREERTOS_Initv+0xa4>)
 800088c:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000890:	461d      	mov	r5, r3
 8000892:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000894:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000896:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800089a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  testTaskHandle = osThreadCreate(osThread(testTask), NULL);
 800089e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008a2:	2100      	movs	r1, #0
 80008a4:	4618      	mov	r0, r3
 80008a6:	f006 febe 	bl	8007626 <osThreadCreate>
 80008aa:	4603      	mov	r3, r0
 80008ac:	4a1f      	ldr	r2, [pc, #124]	; (800092c <_Z16MX_FREERTOS_Initv+0xa8>)
 80008ae:	6013      	str	r3, [r2, #0]

  /* definition and creation of lcdTask */
  osThreadDef(lcdTask, LCDTask, osPriorityNormal, 0, 256);
 80008b0:	4b1f      	ldr	r3, [pc, #124]	; (8000930 <_Z16MX_FREERTOS_Initv+0xac>)
 80008b2:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80008b6:	461d      	mov	r5, r3
 80008b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  lcdTaskHandle = osThreadCreate(osThread(lcdTask), NULL);
 80008c4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f006 feab 	bl	8007626 <osThreadCreate>
 80008d0:	4603      	mov	r3, r0
 80008d2:	4a18      	ldr	r2, [pc, #96]	; (8000934 <_Z16MX_FREERTOS_Initv+0xb0>)
 80008d4:	6013      	str	r3, [r2, #0]

  /* definition and creation of I2C_Task */
  osThreadDef(I2C_Task, i2c_Task, osPriorityNormal, 0, 256);
 80008d6:	4b18      	ldr	r3, [pc, #96]	; (8000938 <_Z16MX_FREERTOS_Initv+0xb4>)
 80008d8:	f107 041c 	add.w	r4, r7, #28
 80008dc:	461d      	mov	r5, r3
 80008de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  I2C_TaskHandle = osThreadCreate(osThread(I2C_Task), NULL);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	2100      	movs	r1, #0
 80008f0:	4618      	mov	r0, r3
 80008f2:	f006 fe98 	bl	8007626 <osThreadCreate>
 80008f6:	4603      	mov	r3, r0
 80008f8:	4a10      	ldr	r2, [pc, #64]	; (800093c <_Z16MX_FREERTOS_Initv+0xb8>)
 80008fa:	6013      	str	r3, [r2, #0]

  /* definition and creation of buttonTask */
  osThreadDef(buttonTask, ButtonTask, osPriorityNormal, 0, 128);
 80008fc:	4b10      	ldr	r3, [pc, #64]	; (8000940 <_Z16MX_FREERTOS_Initv+0xbc>)
 80008fe:	463c      	mov	r4, r7
 8000900:	461d      	mov	r5, r3
 8000902:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000904:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000906:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800090a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  buttonTaskHandle = osThreadCreate(osThread(buttonTask), NULL);
 800090e:	463b      	mov	r3, r7
 8000910:	2100      	movs	r1, #0
 8000912:	4618      	mov	r0, r3
 8000914:	f006 fe87 	bl	8007626 <osThreadCreate>
 8000918:	4603      	mov	r3, r0
 800091a:	4a0a      	ldr	r2, [pc, #40]	; (8000944 <_Z16MX_FREERTOS_Initv+0xc0>)
 800091c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800091e:	bf00      	nop
 8000920:	3770      	adds	r7, #112	; 0x70
 8000922:	46bd      	mov	sp, r7
 8000924:	bdb0      	pop	{r4, r5, r7, pc}
 8000926:	bf00      	nop
 8000928:	080094b4 	.word	0x080094b4
 800092c:	200002cc 	.word	0x200002cc
 8000930:	080094d0 	.word	0x080094d0
 8000934:	200002d0 	.word	0x200002d0
 8000938:	080094ec 	.word	0x080094ec
 800093c:	200002d4 	.word	0x200002d4
 8000940:	08009508 	.word	0x08009508
 8000944:	200002d8 	.word	0x200002d8

08000948 <_Z8TestTaskPKv>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_TestTask */
void TestTask(void const * argument)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b088      	sub	sp, #32
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TestTask */

	uint32_t timeOutUART = 50;
 8000950:	2332      	movs	r3, #50	; 0x32
 8000952:	61fb      	str	r3, [r7, #28]
	uint8_t snum[5];
	//команды uart
	uint8_t cmdASIC[7] = { 0x55, 0xAA, 0x52, 0x05, 0x00, 0x00, 0x0A };
 8000954:	4a92      	ldr	r2, [pc, #584]	; (8000ba0 <_Z8TestTaskPKv+0x258>)
 8000956:	f107 030c 	add.w	r3, r7, #12
 800095a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800095e:	6018      	str	r0, [r3, #0]
 8000960:	3304      	adds	r3, #4
 8000962:	8019      	strh	r1, [r3, #0]
 8000964:	3302      	adds	r3, #2
 8000966:	0c0a      	lsrs	r2, r1, #16
 8000968:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(RST_ASIC_GPIO_Port, RST_ASIC_Pin, GPIO_PIN_RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000970:	488c      	ldr	r0, [pc, #560]	; (8000ba4 <_Z8TestTaskPKv+0x25c>)
 8000972:	f002 f86b 	bl	8002a4c <HAL_GPIO_WritePin>


	/* Infinite loop */
	for (;;) {
		if (start && ready) {
 8000976:	4b8c      	ldr	r3, [pc, #560]	; (8000ba8 <_Z8TestTaskPKv+0x260>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	2b00      	cmp	r3, #0
 800097c:	f000 810b 	beq.w	8000b96 <_Z8TestTaskPKv+0x24e>
 8000980:	4b8a      	ldr	r3, [pc, #552]	; (8000bac <_Z8TestTaskPKv+0x264>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	2b00      	cmp	r3, #0
 8000986:	f000 8106 	beq.w	8000b96 <_Z8TestTaskPKv+0x24e>
			counter_bytes = 0;
 800098a:	4b89      	ldr	r3, [pc, #548]	; (8000bb0 <_Z8TestTaskPKv+0x268>)
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(RST_ASIC_GPIO_Port, RST_ASIC_Pin, GPIO_PIN_RESET);
 8000990:	2200      	movs	r2, #0
 8000992:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000996:	4883      	ldr	r0, [pc, #524]	; (8000ba4 <_Z8TestTaskPKv+0x25c>)
 8000998:	f002 f858 	bl	8002a4c <HAL_GPIO_WritePin>
			osDelay(4);
 800099c:	2004      	movs	r0, #4
 800099e:	f006 fe8e 	bl	80076be <osDelay>
			HAL_GPIO_WritePin(RST_ASIC_GPIO_Port, RST_ASIC_Pin, GPIO_PIN_SET);
 80009a2:	2201      	movs	r2, #1
 80009a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009a8:	487e      	ldr	r0, [pc, #504]	; (8000ba4 <_Z8TestTaskPKv+0x25c>)
 80009aa:	f002 f84f 	bl	8002a4c <HAL_GPIO_WritePin>
			osDelay(1200);
 80009ae:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80009b2:	f006 fe84 	bl	80076be <osDelay>


			if(start == 1 ){
 80009b6:	4b7c      	ldr	r3, [pc, #496]	; (8000ba8 <_Z8TestTaskPKv+0x260>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d17d      	bne.n	8000aba <_Z8TestTaskPKv+0x172>
				//цикл опроса
				while (start) {
 80009be:	4b7a      	ldr	r3, [pc, #488]	; (8000ba8 <_Z8TestTaskPKv+0x260>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	f000 80e7 	beq.w	8000b96 <_Z8TestTaskPKv+0x24e>

					//сброс асиков
					HAL_GPIO_WritePin(RST_ASIC_GPIO_Port, RST_ASIC_Pin, GPIO_PIN_RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009ce:	4875      	ldr	r0, [pc, #468]	; (8000ba4 <_Z8TestTaskPKv+0x25c>)
 80009d0:	f002 f83c 	bl	8002a4c <HAL_GPIO_WritePin>
					osDelay(500);
 80009d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009d8:	f006 fe71 	bl	80076be <osDelay>
					HAL_GPIO_WritePin(RST_ASIC_GPIO_Port, RST_ASIC_Pin, GPIO_PIN_SET);
 80009dc:	2201      	movs	r2, #1
 80009de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009e2:	4870      	ldr	r0, [pc, #448]	; (8000ba4 <_Z8TestTaskPKv+0x25c>)
 80009e4:	f002 f832 	bl	8002a4c <HAL_GPIO_WritePin>
					osDelay(500);
 80009e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009ec:	f006 fe67 	bl	80076be <osDelay>

					status_uart = HAL_UART_Receive_IT(&huart6, readASIC, 1);
 80009f0:	2201      	movs	r2, #1
 80009f2:	4970      	ldr	r1, [pc, #448]	; (8000bb4 <_Z8TestTaskPKv+0x26c>)
 80009f4:	4870      	ldr	r0, [pc, #448]	; (8000bb8 <_Z8TestTaskPKv+0x270>)
 80009f6:	f005 fe6c 	bl	80066d2 <HAL_UART_Receive_IT>
 80009fa:	4603      	mov	r3, r0
 80009fc:	461a      	mov	r2, r3
 80009fe:	4b6f      	ldr	r3, [pc, #444]	; (8000bbc <_Z8TestTaskPKv+0x274>)
 8000a00:	701a      	strb	r2, [r3, #0]
					status_uart = HAL_UART_Transmit(&huart1, cmdASIC, 7, 20);
 8000a02:	f107 010c 	add.w	r1, r7, #12
 8000a06:	2314      	movs	r3, #20
 8000a08:	2207      	movs	r2, #7
 8000a0a:	486d      	ldr	r0, [pc, #436]	; (8000bc0 <_Z8TestTaskPKv+0x278>)
 8000a0c:	f005 fdcf 	bl	80065ae <HAL_UART_Transmit>
 8000a10:	4603      	mov	r3, r0
 8000a12:	461a      	mov	r2, r3
 8000a14:	4b69      	ldr	r3, [pc, #420]	; (8000bbc <_Z8TestTaskPKv+0x274>)
 8000a16:	701a      	strb	r2, [r3, #0]

					//запускаем таймер
					status_uartTIM = 1;
 8000a18:	4b6a      	ldr	r3, [pc, #424]	; (8000bc4 <_Z8TestTaskPKv+0x27c>)
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	701a      	strb	r2, [r3, #0]
					// ожидать таймаута по уарту
					while(uartTIM < timeOutUART){
 8000a1e:	4b6a      	ldr	r3, [pc, #424]	; (8000bc8 <_Z8TestTaskPKv+0x280>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	69fa      	ldr	r2, [r7, #28]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d903      	bls.n	8000a30 <_Z8TestTaskPKv+0xe8>
						osDelay(1);
 8000a28:	2001      	movs	r0, #1
 8000a2a:	f006 fe48 	bl	80076be <osDelay>
					while(uartTIM < timeOutUART){
 8000a2e:	e7f6      	b.n	8000a1e <_Z8TestTaskPKv+0xd6>
					}
					uartTIM = 0;
 8000a30:	4b65      	ldr	r3, [pc, #404]	; (8000bc8 <_Z8TestTaskPKv+0x280>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
					status_uartTIM = 0;
 8000a36:	4b63      	ldr	r3, [pc, #396]	; (8000bc4 <_Z8TestTaskPKv+0x27c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	701a      	strb	r2, [r3, #0]

					// все данные пришли отключаем уарт
					HAL_UART_AbortReceive(&huart6);
 8000a3c:	485e      	ldr	r0, [pc, #376]	; (8000bb8 <_Z8TestTaskPKv+0x270>)
 8000a3e:	f005 fe78 	bl	8006732 <HAL_UART_AbortReceive>

					//проверить пришедшие данные сравненией с шаблоном

					//посчитать количесво асиков

					pre_count_ASIC = counter_bytes / 9;
 8000a42:	4b5b      	ldr	r3, [pc, #364]	; (8000bb0 <_Z8TestTaskPKv+0x268>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4a61      	ldr	r2, [pc, #388]	; (8000bcc <_Z8TestTaskPKv+0x284>)
 8000a48:	fba2 2303 	umull	r2, r3, r2, r3
 8000a4c:	085b      	lsrs	r3, r3, #1
 8000a4e:	4a60      	ldr	r2, [pc, #384]	; (8000bd0 <_Z8TestTaskPKv+0x288>)
 8000a50:	6013      	str	r3, [r2, #0]
					if(!start){
 8000a52:	4b55      	ldr	r3, [pc, #340]	; (8000ba8 <_Z8TestTaskPKv+0x260>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d102      	bne.n	8000a60 <_Z8TestTaskPKv+0x118>
						pre_count_ASIC = 0;
 8000a5a:	4b5d      	ldr	r3, [pc, #372]	; (8000bd0 <_Z8TestTaskPKv+0x288>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
					}
					//itoa(pre_count_ASIC, (char*)snum, 10);
					sprintf((char*)snum, "%-2d", (int)pre_count_ASIC);
 8000a60:	4b5b      	ldr	r3, [pc, #364]	; (8000bd0 <_Z8TestTaskPKv+0x288>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	461a      	mov	r2, r3
 8000a66:	f107 0314 	add.w	r3, r7, #20
 8000a6a:	495a      	ldr	r1, [pc, #360]	; (8000bd4 <_Z8TestTaskPKv+0x28c>)
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f008 f965 	bl	8008d3c <siprintf>

					//ssd1306_Fill(Black); //чистим экран
				    ssd1306_SetCursor(2, 28);
 8000a72:	211c      	movs	r1, #28
 8000a74:	2002      	movs	r0, #2
 8000a76:	f001 f937 	bl	8001ce8 <ssd1306_SetCursor>
				    ssd1306_WriteString((char*)snum, Font_11x18, White);
 8000a7a:	4a57      	ldr	r2, [pc, #348]	; (8000bd8 <_Z8TestTaskPKv+0x290>)
 8000a7c:	f107 0014 	add.w	r0, r7, #20
 8000a80:	2301      	movs	r3, #1
 8000a82:	ca06      	ldmia	r2, {r1, r2}
 8000a84:	f001 f90a 	bl	8001c9c <ssd1306_WriteString>
				    //ssd1306_UpdateScreen();

					counter_bytes = 0;
 8000a88:	4b49      	ldr	r3, [pc, #292]	; (8000bb0 <_Z8TestTaskPKv+0x268>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
					memset(readASIC, 0, sizeof readASIC);
 8000a8e:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000a92:	2100      	movs	r1, #0
 8000a94:	4847      	ldr	r0, [pc, #284]	; (8000bb4 <_Z8TestTaskPKv+0x26c>)
 8000a96:	f008 f875 	bl	8008b84 <memset>

					//включить индикатор готовности данных
					ssd1306_DrawCircle(50, 56, 2, White);
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	2202      	movs	r2, #2
 8000a9e:	2138      	movs	r1, #56	; 0x38
 8000aa0:	2032      	movs	r0, #50	; 0x32
 8000aa2:	f001 f939 	bl	8001d18 <ssd1306_DrawCircle>
					osDelay(200);
 8000aa6:	20c8      	movs	r0, #200	; 0xc8
 8000aa8:	f006 fe09 	bl	80076be <osDelay>
					//выключить индикатор
					ssd1306_DrawCircle(50, 56, 2, Black);
 8000aac:	2300      	movs	r3, #0
 8000aae:	2202      	movs	r2, #2
 8000ab0:	2138      	movs	r1, #56	; 0x38
 8000ab2:	2032      	movs	r0, #50	; 0x32
 8000ab4:	f001 f930 	bl	8001d18 <ssd1306_DrawCircle>
				while (start) {
 8000ab8:	e781      	b.n	80009be <_Z8TestTaskPKv+0x76>

				}

			}else if(start == 2){
 8000aba:	4b3b      	ldr	r3, [pc, #236]	; (8000ba8 <_Z8TestTaskPKv+0x260>)
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	2b02      	cmp	r3, #2
 8000ac0:	d169      	bne.n	8000b96 <_Z8TestTaskPKv+0x24e>
				status_uart = HAL_UART_Receive_IT(&huart6, readASIC, 1);
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	493b      	ldr	r1, [pc, #236]	; (8000bb4 <_Z8TestTaskPKv+0x26c>)
 8000ac6:	483c      	ldr	r0, [pc, #240]	; (8000bb8 <_Z8TestTaskPKv+0x270>)
 8000ac8:	f005 fe03 	bl	80066d2 <HAL_UART_Receive_IT>
 8000acc:	4603      	mov	r3, r0
 8000ace:	461a      	mov	r2, r3
 8000ad0:	4b3a      	ldr	r3, [pc, #232]	; (8000bbc <_Z8TestTaskPKv+0x274>)
 8000ad2:	701a      	strb	r2, [r3, #0]
				//цикл опроса
				while (start) {
 8000ad4:	4b34      	ldr	r3, [pc, #208]	; (8000ba8 <_Z8TestTaskPKv+0x260>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d05c      	beq.n	8000b96 <_Z8TestTaskPKv+0x24e>


					status_uart = HAL_UART_Transmit(&huart1, cmdASIC, 7, 20);
 8000adc:	f107 010c 	add.w	r1, r7, #12
 8000ae0:	2314      	movs	r3, #20
 8000ae2:	2207      	movs	r2, #7
 8000ae4:	4836      	ldr	r0, [pc, #216]	; (8000bc0 <_Z8TestTaskPKv+0x278>)
 8000ae6:	f005 fd62 	bl	80065ae <HAL_UART_Transmit>
 8000aea:	4603      	mov	r3, r0
 8000aec:	461a      	mov	r2, r3
 8000aee:	4b33      	ldr	r3, [pc, #204]	; (8000bbc <_Z8TestTaskPKv+0x274>)
 8000af0:	701a      	strb	r2, [r3, #0]

					//запускаем таймер
					uartTIM = 0;
 8000af2:	4b35      	ldr	r3, [pc, #212]	; (8000bc8 <_Z8TestTaskPKv+0x280>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
					status_uartTIM = 1;
 8000af8:	4b32      	ldr	r3, [pc, #200]	; (8000bc4 <_Z8TestTaskPKv+0x27c>)
 8000afa:	2201      	movs	r2, #1
 8000afc:	701a      	strb	r2, [r3, #0]
					// ожидать таймаута по уарту
					while(uartTIM < timeOutUART){
 8000afe:	4b32      	ldr	r3, [pc, #200]	; (8000bc8 <_Z8TestTaskPKv+0x280>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	69fa      	ldr	r2, [r7, #28]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d903      	bls.n	8000b10 <_Z8TestTaskPKv+0x1c8>
						osDelay(1);
 8000b08:	2001      	movs	r0, #1
 8000b0a:	f006 fdd8 	bl	80076be <osDelay>
					while(uartTIM < timeOutUART){
 8000b0e:	e7f6      	b.n	8000afe <_Z8TestTaskPKv+0x1b6>
					}
					uartTIM = 0;
 8000b10:	4b2d      	ldr	r3, [pc, #180]	; (8000bc8 <_Z8TestTaskPKv+0x280>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
					status_uartTIM = 0;
 8000b16:	4b2b      	ldr	r3, [pc, #172]	; (8000bc4 <_Z8TestTaskPKv+0x27c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	701a      	strb	r2, [r3, #0]

					//проверить пришедшие данные сравненией с шаблоном

					//посчитать количесво асиков

					pre_count_ASIC = counter_bytes / 9;
 8000b1c:	4b24      	ldr	r3, [pc, #144]	; (8000bb0 <_Z8TestTaskPKv+0x268>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a2a      	ldr	r2, [pc, #168]	; (8000bcc <_Z8TestTaskPKv+0x284>)
 8000b22:	fba2 2303 	umull	r2, r3, r2, r3
 8000b26:	085b      	lsrs	r3, r3, #1
 8000b28:	4a29      	ldr	r2, [pc, #164]	; (8000bd0 <_Z8TestTaskPKv+0x288>)
 8000b2a:	6013      	str	r3, [r2, #0]
					if(!start){
 8000b2c:	4b1e      	ldr	r3, [pc, #120]	; (8000ba8 <_Z8TestTaskPKv+0x260>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d102      	bne.n	8000b3a <_Z8TestTaskPKv+0x1f2>
						pre_count_ASIC = 0;
 8000b34:	4b26      	ldr	r3, [pc, #152]	; (8000bd0 <_Z8TestTaskPKv+0x288>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
					}
					sprintf((char*)snum, "%-2d", (int)pre_count_ASIC);
 8000b3a:	4b25      	ldr	r3, [pc, #148]	; (8000bd0 <_Z8TestTaskPKv+0x288>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	461a      	mov	r2, r3
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	4923      	ldr	r1, [pc, #140]	; (8000bd4 <_Z8TestTaskPKv+0x28c>)
 8000b46:	4618      	mov	r0, r3
 8000b48:	f008 f8f8 	bl	8008d3c <siprintf>

				    ssd1306_SetCursor(2, 28);
 8000b4c:	211c      	movs	r1, #28
 8000b4e:	2002      	movs	r0, #2
 8000b50:	f001 f8ca 	bl	8001ce8 <ssd1306_SetCursor>
				    ssd1306_WriteString((char*)snum, Font_11x18, White);
 8000b54:	4a20      	ldr	r2, [pc, #128]	; (8000bd8 <_Z8TestTaskPKv+0x290>)
 8000b56:	f107 0014 	add.w	r0, r7, #20
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	ca06      	ldmia	r2, {r1, r2}
 8000b5e:	f001 f89d 	bl	8001c9c <ssd1306_WriteString>

					counter_bytes = 0;
 8000b62:	4b13      	ldr	r3, [pc, #76]	; (8000bb0 <_Z8TestTaskPKv+0x268>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
					memset(readASIC, 0, sizeof readASIC);
 8000b68:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	4811      	ldr	r0, [pc, #68]	; (8000bb4 <_Z8TestTaskPKv+0x26c>)
 8000b70:	f008 f808 	bl	8008b84 <memset>

					//включить индикатор готовности данных
					ssd1306_DrawCircle(50, 56, 2, White);
 8000b74:	2301      	movs	r3, #1
 8000b76:	2202      	movs	r2, #2
 8000b78:	2138      	movs	r1, #56	; 0x38
 8000b7a:	2032      	movs	r0, #50	; 0x32
 8000b7c:	f001 f8cc 	bl	8001d18 <ssd1306_DrawCircle>
					osDelay(300);
 8000b80:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b84:	f006 fd9b 	bl	80076be <osDelay>
					//выключить индикатор
					ssd1306_DrawCircle(50, 56, 2, Black);
 8000b88:	2300      	movs	r3, #0
 8000b8a:	2202      	movs	r2, #2
 8000b8c:	2138      	movs	r1, #56	; 0x38
 8000b8e:	2032      	movs	r0, #50	; 0x32
 8000b90:	f001 f8c2 	bl	8001d18 <ssd1306_DrawCircle>
				while (start) {
 8000b94:	e79e      	b.n	8000ad4 <_Z8TestTaskPKv+0x18c>

			}


	}
	osDelay(1);
 8000b96:	2001      	movs	r0, #1
 8000b98:	f006 fd91 	bl	80076be <osDelay>
		if (start && ready) {
 8000b9c:	e6eb      	b.n	8000976 <_Z8TestTaskPKv+0x2e>
 8000b9e:	bf00      	nop
 8000ba0:	0800952c 	.word	0x0800952c
 8000ba4:	40020000 	.word	0x40020000
 8000ba8:	200002c8 	.word	0x200002c8
 8000bac:	200002c9 	.word	0x200002c9
 8000bb0:	200000a8 	.word	0x200000a8
 8000bb4:	200000ac 	.word	0x200000ac
 8000bb8:	20004838 	.word	0x20004838
 8000bbc:	200000a1 	.word	0x200000a1
 8000bc0:	200047f4 	.word	0x200047f4
 8000bc4:	20000594 	.word	0x20000594
 8000bc8:	20000590 	.word	0x20000590
 8000bcc:	38e38e39 	.word	0x38e38e39
 8000bd0:	200000a4 	.word	0x200000a4
 8000bd4:	08009524 	.word	0x08009524
 8000bd8:	20000008 	.word	0x20000008

08000bdc <_Z7LCDTaskPKv>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_LCDTask */
void LCDTask(void const * argument)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LCDTask */


	uint8_t blink = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	73fb      	strb	r3, [r7, #15]

	ssd1306_Init();
 8000be8:	f000 fec4 	bl	8001974 <ssd1306_Init>


	//ssd1306_TestAll();
    ssd1306_SetCursor(2, 0);
 8000bec:	2100      	movs	r1, #0
 8000bee:	2002      	movs	r0, #2
 8000bf0:	f001 f87a 	bl	8001ce8 <ssd1306_SetCursor>
    ssd1306_WriteString((char*) "Tester hash v1", Font_7x10, White);
 8000bf4:	4a16      	ldr	r2, [pc, #88]	; (8000c50 <_Z7LCDTaskPKv+0x74>)
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	ca06      	ldmia	r2, {r1, r2}
 8000bfa:	4816      	ldr	r0, [pc, #88]	; (8000c54 <_Z7LCDTaskPKv+0x78>)
 8000bfc:	f001 f84e 	bl	8001c9c <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8000c00:	f000 ff46 	bl	8001a90 <ssd1306_UpdateScreen>

/* Infinite loop */
for (;;) {


	if(counterRefresh >= 500){
 8000c04:	4b14      	ldr	r3, [pc, #80]	; (8000c58 <_Z7LCDTaskPKv+0x7c>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000c0c:	d319      	bcc.n	8000c42 <_Z7LCDTaskPKv+0x66>
		//ssd1306_SetCursor(100, 56);
		if (blink == 0) {
 8000c0e:	7bfb      	ldrb	r3, [r7, #15]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d10b      	bne.n	8000c2c <_Z7LCDTaskPKv+0x50>
			ssd1306_DrawCircle(100, 56, 4, White);
 8000c14:	2301      	movs	r3, #1
 8000c16:	2204      	movs	r2, #4
 8000c18:	2138      	movs	r1, #56	; 0x38
 8000c1a:	2064      	movs	r0, #100	; 0x64
 8000c1c:	f001 f87c 	bl	8001d18 <ssd1306_DrawCircle>
			//ssd1306_UpdateScreen();
			blink = 1;
 8000c20:	2301      	movs	r3, #1
 8000c22:	73fb      	strb	r3, [r7, #15]
			counterRefresh = 0;
 8000c24:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <_Z7LCDTaskPKv+0x7c>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	e00a      	b.n	8000c42 <_Z7LCDTaskPKv+0x66>
		}else {
			ssd1306_DrawCircle(100, 56, 4, Black);
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	2204      	movs	r2, #4
 8000c30:	2138      	movs	r1, #56	; 0x38
 8000c32:	2064      	movs	r0, #100	; 0x64
 8000c34:	f001 f870 	bl	8001d18 <ssd1306_DrawCircle>
			//ssd1306_UpdateScreen();
			blink = 0;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	73fb      	strb	r3, [r7, #15]
			counterRefresh = 0;
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <_Z7LCDTaskPKv+0x7c>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
		}

	}


	ssd1306_UpdateScreen();
 8000c42:	f000 ff25 	bl	8001a90 <ssd1306_UpdateScreen>

	osDelay(84);
 8000c46:	2054      	movs	r0, #84	; 0x54
 8000c48:	f006 fd39 	bl	80076be <osDelay>
	if(counterRefresh >= 500){
 8000c4c:	e7da      	b.n	8000c04 <_Z7LCDTaskPKv+0x28>
 8000c4e:	bf00      	nop
 8000c50:	20000000 	.word	0x20000000
 8000c54:	08009534 	.word	0x08009534
 8000c58:	20000598 	.word	0x20000598

08000c5c <_Z8i2c_TaskPKv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_i2c_Task */
void i2c_Task(void const * argument)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b09a      	sub	sp, #104	; 0x68
 8000c60:	af02      	add	r7, sp, #8
 8000c62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN i2c_Task */

	//команды i2c
	uint16_t addr = 0x20;
 8000c64:	2320      	movs	r3, #32
 8000c66:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	addr = addr<<1;
 8000c6a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a


	uint8_t cmdStart_1[6] = { 0x55, 0xAA, 0x04, 0x07, 0x00, 0x0B };
 8000c74:	4aa6      	ldr	r2, [pc, #664]	; (8000f10 <_Z8i2c_TaskPKv+0x2b4>)
 8000c76:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c7e:	6018      	str	r0, [r3, #0]
 8000c80:	3304      	adds	r3, #4
 8000c82:	8019      	strh	r1, [r3, #0]
	uint8_t cmdRead_1[2] = { 0x00 };// 0x07 0x01
 8000c84:	2300      	movs	r3, #0
 8000c86:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	uint8_t cmdStart_2[6] = { 0x55, 0xAA, 0x04, 0x06, 0x00, 0x0A };
 8000c8a:	4aa2      	ldr	r2, [pc, #648]	; (8000f14 <_Z8i2c_TaskPKv+0x2b8>)
 8000c8c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c94:	6018      	str	r0, [r3, #0]
 8000c96:	3304      	adds	r3, #4
 8000c98:	8019      	strh	r1, [r3, #0]
	uint8_t cmdRead_2[2] = { 0x00 };// 0x06 0x01
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

	uint8_t cmdStart_3[9] = { 0x55, 0xAA, 0x07, 0x10, 0x19, 0x00, 0x00, 0x00, 0x30 };
 8000ca0:	4a9d      	ldr	r2, [pc, #628]	; (8000f18 <_Z8i2c_TaskPKv+0x2bc>)
 8000ca2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ca6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ca8:	c303      	stmia	r3!, {r0, r1}
 8000caa:	701a      	strb	r2, [r3, #0]
	uint8_t cmdRead_3[2] = { 0x00 };// 0x10 0x01
 8000cac:	2300      	movs	r3, #0
 8000cae:	86bb      	strh	r3, [r7, #52]	; 0x34

	uint8_t cmdStart_4[7] = { 0x55, 0xAA, 0x05, 0x15, 0x01, 0x00, 0x1B };
 8000cb0:	4a9a      	ldr	r2, [pc, #616]	; (8000f1c <_Z8i2c_TaskPKv+0x2c0>)
 8000cb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cb6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cba:	6018      	str	r0, [r3, #0]
 8000cbc:	3304      	adds	r3, #4
 8000cbe:	8019      	strh	r1, [r3, #0]
 8000cc0:	3302      	adds	r3, #2
 8000cc2:	0c0a      	lsrs	r2, r1, #16
 8000cc4:	701a      	strb	r2, [r3, #0]
	uint8_t cmdRead_4[2] = { 0x00 };// 0x15 0x01
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	853b      	strh	r3, [r7, #40]	; 0x28

	uint8_t cmdStop[7] = { 0x55, 0xAA, 0x05, 0x15, 0x00, 0x00, 0x1A };
 8000cca:	4a95      	ldr	r2, [pc, #596]	; (8000f20 <_Z8i2c_TaskPKv+0x2c4>)
 8000ccc:	f107 0320 	add.w	r3, r7, #32
 8000cd0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cd4:	6018      	str	r0, [r3, #0]
 8000cd6:	3304      	adds	r3, #4
 8000cd8:	8019      	strh	r1, [r3, #0]
 8000cda:	3302      	adds	r3, #2
 8000cdc:	0c0a      	lsrs	r2, r1, #16
 8000cde:	701a      	strb	r2, [r3, #0]
	uint8_t cmdRead_stop[2] = { 0x00 };// 0x15 0x01
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	83bb      	strh	r3, [r7, #28]

	uint8_t cmdRefresh[6] = { 0x55, 0xAA, 0x04, 0x16, 0x00, 0x1A };
 8000ce4:	4a8f      	ldr	r2, [pc, #572]	; (8000f24 <_Z8i2c_TaskPKv+0x2c8>)
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cee:	6018      	str	r0, [r3, #0]
 8000cf0:	3304      	adds	r3, #4
 8000cf2:	8019      	strh	r1, [r3, #0]
	uint8_t cmdRead_Refresh[6] = { 0x00 };// 0x06 0x16 0x01 0x00 0x00 0x1D
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	823b      	strh	r3, [r7, #16]


	HAL_GPIO_WritePin(A0_GPIO_Port, A0_Pin, GPIO_PIN_RESET);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2102      	movs	r1, #2
 8000d00:	4889      	ldr	r0, [pc, #548]	; (8000f28 <_Z8i2c_TaskPKv+0x2cc>)
 8000d02:	f001 fea3 	bl	8002a4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, GPIO_PIN_RESET);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2101      	movs	r1, #1
 8000d0a:	4887      	ldr	r0, [pc, #540]	; (8000f28 <_Z8i2c_TaskPKv+0x2cc>)
 8000d0c:	f001 fe9e 	bl	8002a4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, GPIO_PIN_RESET);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2104      	movs	r1, #4
 8000d14:	4884      	ldr	r0, [pc, #528]	; (8000f28 <_Z8i2c_TaskPKv+0x2cc>)
 8000d16:	f001 fe99 	bl	8002a4c <HAL_GPIO_WritePin>


  /* Infinite loop */
  for(;;)
  {
	  plug = HAL_GPIO_ReadPin(PLUG_GPIO_Port, PLUG_Pin);
 8000d1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d1e:	4883      	ldr	r0, [pc, #524]	; (8000f2c <_Z8i2c_TaskPKv+0x2d0>)
 8000d20:	f001 fe7c 	bl	8002a1c <HAL_GPIO_ReadPin>
 8000d24:	4603      	mov	r3, r0
 8000d26:	461a      	mov	r2, r3
 8000d28:	4b81      	ldr	r3, [pc, #516]	; (8000f30 <_Z8i2c_TaskPKv+0x2d4>)
 8000d2a:	701a      	strb	r2, [r3, #0]

	  if (start && plug) {
 8000d2c:	4b81      	ldr	r3, [pc, #516]	; (8000f34 <_Z8i2c_TaskPKv+0x2d8>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	f000 823d 	beq.w	80011b0 <_Z8i2c_TaskPKv+0x554>
 8000d36:	4b7e      	ldr	r3, [pc, #504]	; (8000f30 <_Z8i2c_TaskPKv+0x2d4>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	f000 8238 	beq.w	80011b0 <_Z8i2c_TaskPKv+0x554>
					status_i2c = HAL_I2C_Master_Transmit(&hi2c1, addr, cmdStart_1, 6, 20);
 8000d40:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8000d44:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000d48:	2314      	movs	r3, #20
 8000d4a:	9300      	str	r3, [sp, #0]
 8000d4c:	2306      	movs	r3, #6
 8000d4e:	487a      	ldr	r0, [pc, #488]	; (8000f38 <_Z8i2c_TaskPKv+0x2dc>)
 8000d50:	f001 ffda 	bl	8002d08 <HAL_I2C_Master_Transmit>
 8000d54:	4603      	mov	r3, r0
 8000d56:	461a      	mov	r2, r3
 8000d58:	4b78      	ldr	r3, [pc, #480]	; (8000f3c <_Z8i2c_TaskPKv+0x2e0>)
 8000d5a:	701a      	strb	r2, [r3, #0]
					osDelay(410);
 8000d5c:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8000d60:	f006 fcad 	bl	80076be <osDelay>
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_1[0], 1, 20);
 8000d64:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000d68:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000d6c:	2314      	movs	r3, #20
 8000d6e:	9300      	str	r3, [sp, #0]
 8000d70:	2301      	movs	r3, #1
 8000d72:	4871      	ldr	r0, [pc, #452]	; (8000f38 <_Z8i2c_TaskPKv+0x2dc>)
 8000d74:	f002 f8c6 	bl	8002f04 <HAL_I2C_Master_Receive>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	4b6f      	ldr	r3, [pc, #444]	; (8000f3c <_Z8i2c_TaskPKv+0x2e0>)
 8000d7e:	701a      	strb	r2, [r3, #0]
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_1[1], 1, 20);
 8000d80:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000d84:	1c5a      	adds	r2, r3, #1
 8000d86:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000d8a:	2314      	movs	r3, #20
 8000d8c:	9300      	str	r3, [sp, #0]
 8000d8e:	2301      	movs	r3, #1
 8000d90:	4869      	ldr	r0, [pc, #420]	; (8000f38 <_Z8i2c_TaskPKv+0x2dc>)
 8000d92:	f002 f8b7 	bl	8002f04 <HAL_I2C_Master_Receive>
 8000d96:	4603      	mov	r3, r0
 8000d98:	461a      	mov	r2, r3
 8000d9a:	4b68      	ldr	r3, [pc, #416]	; (8000f3c <_Z8i2c_TaskPKv+0x2e0>)
 8000d9c:	701a      	strb	r2, [r3, #0]
					//проверить ответ
					if (cmdRead_1[0] != 0x07 && cmdRead_1[1] != 0x01) {
 8000d9e:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000da2:	2b07      	cmp	r3, #7
 8000da4:	d017      	beq.n	8000dd6 <_Z8i2c_TaskPKv+0x17a>
 8000da6:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d013      	beq.n	8000dd6 <_Z8i2c_TaskPKv+0x17a>
						start = 0;
 8000dae:	4b61      	ldr	r3, [pc, #388]	; (8000f34 <_Z8i2c_TaskPKv+0x2d8>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	701a      	strb	r2, [r3, #0]
						ready = 0;
 8000db4:	4b62      	ldr	r3, [pc, #392]	; (8000f40 <_Z8i2c_TaskPKv+0x2e4>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	701a      	strb	r2, [r3, #0]
						ssd1306_Fill(Black); //чистим экран
 8000dba:	2000      	movs	r0, #0
 8000dbc:	f000 fe44 	bl	8001a48 <ssd1306_Fill>
					    ssd1306_SetCursor(2, 0);
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	2002      	movs	r0, #2
 8000dc4:	f000 ff90 	bl	8001ce8 <ssd1306_SetCursor>
					    ssd1306_WriteString((char*) "error1", Font_7x10, White);
 8000dc8:	4a5e      	ldr	r2, [pc, #376]	; (8000f44 <_Z8i2c_TaskPKv+0x2e8>)
 8000dca:	2301      	movs	r3, #1
 8000dcc:	ca06      	ldmia	r2, {r1, r2}
 8000dce:	485e      	ldr	r0, [pc, #376]	; (8000f48 <_Z8i2c_TaskPKv+0x2ec>)
 8000dd0:	f000 ff64 	bl	8001c9c <ssd1306_WriteString>
					    //ssd1306_UpdateScreen();
						continue;
 8000dd4:	e1ef      	b.n	80011b6 <_Z8i2c_TaskPKv+0x55a>
					}
					osDelay(710);
 8000dd6:	f240 20c6 	movw	r0, #710	; 0x2c6
 8000dda:	f006 fc70 	bl	80076be <osDelay>

					status_i2c = HAL_I2C_Master_Transmit(&hi2c1, addr, cmdStart_2, 6, 20);
 8000dde:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000de2:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000de6:	2314      	movs	r3, #20
 8000de8:	9300      	str	r3, [sp, #0]
 8000dea:	2306      	movs	r3, #6
 8000dec:	4852      	ldr	r0, [pc, #328]	; (8000f38 <_Z8i2c_TaskPKv+0x2dc>)
 8000dee:	f001 ff8b 	bl	8002d08 <HAL_I2C_Master_Transmit>
 8000df2:	4603      	mov	r3, r0
 8000df4:	461a      	mov	r2, r3
 8000df6:	4b51      	ldr	r3, [pc, #324]	; (8000f3c <_Z8i2c_TaskPKv+0x2e0>)
 8000df8:	701a      	strb	r2, [r3, #0]
					osDelay(110);
 8000dfa:	206e      	movs	r0, #110	; 0x6e
 8000dfc:	f006 fc5f 	bl	80076be <osDelay>
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_2[0], 1, 20);
 8000e00:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000e04:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000e08:	2314      	movs	r3, #20
 8000e0a:	9300      	str	r3, [sp, #0]
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	484a      	ldr	r0, [pc, #296]	; (8000f38 <_Z8i2c_TaskPKv+0x2dc>)
 8000e10:	f002 f878 	bl	8002f04 <HAL_I2C_Master_Receive>
 8000e14:	4603      	mov	r3, r0
 8000e16:	461a      	mov	r2, r3
 8000e18:	4b48      	ldr	r3, [pc, #288]	; (8000f3c <_Z8i2c_TaskPKv+0x2e0>)
 8000e1a:	701a      	strb	r2, [r3, #0]
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_2[1], 1, 20);
 8000e1c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000e20:	1c5a      	adds	r2, r3, #1
 8000e22:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000e26:	2314      	movs	r3, #20
 8000e28:	9300      	str	r3, [sp, #0]
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	4842      	ldr	r0, [pc, #264]	; (8000f38 <_Z8i2c_TaskPKv+0x2dc>)
 8000e2e:	f002 f869 	bl	8002f04 <HAL_I2C_Master_Receive>
 8000e32:	4603      	mov	r3, r0
 8000e34:	461a      	mov	r2, r3
 8000e36:	4b41      	ldr	r3, [pc, #260]	; (8000f3c <_Z8i2c_TaskPKv+0x2e0>)
 8000e38:	701a      	strb	r2, [r3, #0]
					//проверить ответ
					if (cmdRead_2[0] != 0x06 && cmdRead_2[1] != 0x01) {
 8000e3a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000e3e:	2b06      	cmp	r3, #6
 8000e40:	d017      	beq.n	8000e72 <_Z8i2c_TaskPKv+0x216>
 8000e42:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d013      	beq.n	8000e72 <_Z8i2c_TaskPKv+0x216>
						start = 0;
 8000e4a:	4b3a      	ldr	r3, [pc, #232]	; (8000f34 <_Z8i2c_TaskPKv+0x2d8>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	701a      	strb	r2, [r3, #0]
						ready = 0;
 8000e50:	4b3b      	ldr	r3, [pc, #236]	; (8000f40 <_Z8i2c_TaskPKv+0x2e4>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	701a      	strb	r2, [r3, #0]
						ssd1306_Fill(Black); //чистим экран
 8000e56:	2000      	movs	r0, #0
 8000e58:	f000 fdf6 	bl	8001a48 <ssd1306_Fill>
					    ssd1306_SetCursor(2, 0);
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	2002      	movs	r0, #2
 8000e60:	f000 ff42 	bl	8001ce8 <ssd1306_SetCursor>
					    ssd1306_WriteString((char*) "error2", Font_7x10, White);
 8000e64:	4a37      	ldr	r2, [pc, #220]	; (8000f44 <_Z8i2c_TaskPKv+0x2e8>)
 8000e66:	2301      	movs	r3, #1
 8000e68:	ca06      	ldmia	r2, {r1, r2}
 8000e6a:	4838      	ldr	r0, [pc, #224]	; (8000f4c <_Z8i2c_TaskPKv+0x2f0>)
 8000e6c:	f000 ff16 	bl	8001c9c <ssd1306_WriteString>
					    //ssd1306_UpdateScreen();
						continue;
 8000e70:	e1a1      	b.n	80011b6 <_Z8i2c_TaskPKv+0x55a>
					}
					osDelay(2200);
 8000e72:	f640 0098 	movw	r0, #2200	; 0x898
 8000e76:	f006 fc22 	bl	80076be <osDelay>

					status_i2c = HAL_I2C_Master_Transmit(&hi2c1, addr, cmdStart_3, 9, 20);
 8000e7a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000e7e:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000e82:	2314      	movs	r3, #20
 8000e84:	9300      	str	r3, [sp, #0]
 8000e86:	2309      	movs	r3, #9
 8000e88:	482b      	ldr	r0, [pc, #172]	; (8000f38 <_Z8i2c_TaskPKv+0x2dc>)
 8000e8a:	f001 ff3d 	bl	8002d08 <HAL_I2C_Master_Transmit>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	461a      	mov	r2, r3
 8000e92:	4b2a      	ldr	r3, [pc, #168]	; (8000f3c <_Z8i2c_TaskPKv+0x2e0>)
 8000e94:	701a      	strb	r2, [r3, #0]
					osDelay(110);
 8000e96:	206e      	movs	r0, #110	; 0x6e
 8000e98:	f006 fc11 	bl	80076be <osDelay>
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_3[0], 1, 20);
 8000e9c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000ea0:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000ea4:	2314      	movs	r3, #20
 8000ea6:	9300      	str	r3, [sp, #0]
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	4823      	ldr	r0, [pc, #140]	; (8000f38 <_Z8i2c_TaskPKv+0x2dc>)
 8000eac:	f002 f82a 	bl	8002f04 <HAL_I2C_Master_Receive>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	4b21      	ldr	r3, [pc, #132]	; (8000f3c <_Z8i2c_TaskPKv+0x2e0>)
 8000eb6:	701a      	strb	r2, [r3, #0]
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_3[1], 1, 20);
 8000eb8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ebc:	1c5a      	adds	r2, r3, #1
 8000ebe:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000ec2:	2314      	movs	r3, #20
 8000ec4:	9300      	str	r3, [sp, #0]
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	481b      	ldr	r0, [pc, #108]	; (8000f38 <_Z8i2c_TaskPKv+0x2dc>)
 8000eca:	f002 f81b 	bl	8002f04 <HAL_I2C_Master_Receive>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	4b1a      	ldr	r3, [pc, #104]	; (8000f3c <_Z8i2c_TaskPKv+0x2e0>)
 8000ed4:	701a      	strb	r2, [r3, #0]
					//проверить ответ
					if (cmdRead_3[0] != 0x10 && cmdRead_3[1] != 0x01) {
 8000ed6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000eda:	2b10      	cmp	r3, #16
 8000edc:	d03a      	beq.n	8000f54 <_Z8i2c_TaskPKv+0x2f8>
 8000ede:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d036      	beq.n	8000f54 <_Z8i2c_TaskPKv+0x2f8>
						start = 0;
 8000ee6:	4b13      	ldr	r3, [pc, #76]	; (8000f34 <_Z8i2c_TaskPKv+0x2d8>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	701a      	strb	r2, [r3, #0]
						ready = 0;
 8000eec:	4b14      	ldr	r3, [pc, #80]	; (8000f40 <_Z8i2c_TaskPKv+0x2e4>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	701a      	strb	r2, [r3, #0]
						ssd1306_Fill(Black); //чистим экран
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f000 fda8 	bl	8001a48 <ssd1306_Fill>
					    ssd1306_SetCursor(2, 0);
 8000ef8:	2100      	movs	r1, #0
 8000efa:	2002      	movs	r0, #2
 8000efc:	f000 fef4 	bl	8001ce8 <ssd1306_SetCursor>
					    ssd1306_WriteString((char*) "error3", Font_7x10, White);
 8000f00:	4a10      	ldr	r2, [pc, #64]	; (8000f44 <_Z8i2c_TaskPKv+0x2e8>)
 8000f02:	2301      	movs	r3, #1
 8000f04:	ca06      	ldmia	r2, {r1, r2}
 8000f06:	4812      	ldr	r0, [pc, #72]	; (8000f50 <_Z8i2c_TaskPKv+0x2f4>)
 8000f08:	f000 fec8 	bl	8001c9c <ssd1306_WriteString>
					    //ssd1306_UpdateScreen();
						continue;
 8000f0c:	e153      	b.n	80011b6 <_Z8i2c_TaskPKv+0x55a>
 8000f0e:	bf00      	nop
 8000f10:	08009564 	.word	0x08009564
 8000f14:	0800956c 	.word	0x0800956c
 8000f18:	08009574 	.word	0x08009574
 8000f1c:	08009580 	.word	0x08009580
 8000f20:	08009588 	.word	0x08009588
 8000f24:	08009590 	.word	0x08009590
 8000f28:	40020c00 	.word	0x40020c00
 8000f2c:	40020800 	.word	0x40020800
 8000f30:	200002ca 	.word	0x200002ca
 8000f34:	200002c8 	.word	0x200002c8
 8000f38:	20004758 	.word	0x20004758
 8000f3c:	200000a0 	.word	0x200000a0
 8000f40:	200002c9 	.word	0x200002c9
 8000f44:	20000000 	.word	0x20000000
 8000f48:	08009544 	.word	0x08009544
 8000f4c:	0800954c 	.word	0x0800954c
 8000f50:	08009554 	.word	0x08009554
					}
					osDelay(710);
 8000f54:	f240 20c6 	movw	r0, #710	; 0x2c6
 8000f58:	f006 fbb1 	bl	80076be <osDelay>

					status_i2c = HAL_I2C_Master_Transmit(&hi2c1, addr, cmdStart_4, 7, 20);
 8000f5c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000f60:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000f64:	2314      	movs	r3, #20
 8000f66:	9300      	str	r3, [sp, #0]
 8000f68:	2307      	movs	r3, #7
 8000f6a:	4893      	ldr	r0, [pc, #588]	; (80011b8 <_Z8i2c_TaskPKv+0x55c>)
 8000f6c:	f001 fecc 	bl	8002d08 <HAL_I2C_Master_Transmit>
 8000f70:	4603      	mov	r3, r0
 8000f72:	461a      	mov	r2, r3
 8000f74:	4b91      	ldr	r3, [pc, #580]	; (80011bc <_Z8i2c_TaskPKv+0x560>)
 8000f76:	701a      	strb	r2, [r3, #0]
					osDelay(30);
 8000f78:	201e      	movs	r0, #30
 8000f7a:	f006 fba0 	bl	80076be <osDelay>
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_4[0], 1, 20);
 8000f7e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000f82:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000f86:	2314      	movs	r3, #20
 8000f88:	9300      	str	r3, [sp, #0]
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	488a      	ldr	r0, [pc, #552]	; (80011b8 <_Z8i2c_TaskPKv+0x55c>)
 8000f8e:	f001 ffb9 	bl	8002f04 <HAL_I2C_Master_Receive>
 8000f92:	4603      	mov	r3, r0
 8000f94:	461a      	mov	r2, r3
 8000f96:	4b89      	ldr	r3, [pc, #548]	; (80011bc <_Z8i2c_TaskPKv+0x560>)
 8000f98:	701a      	strb	r2, [r3, #0]
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_4[1], 1, 20);
 8000f9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f9e:	1c5a      	adds	r2, r3, #1
 8000fa0:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000fa4:	2314      	movs	r3, #20
 8000fa6:	9300      	str	r3, [sp, #0]
 8000fa8:	2301      	movs	r3, #1
 8000faa:	4883      	ldr	r0, [pc, #524]	; (80011b8 <_Z8i2c_TaskPKv+0x55c>)
 8000fac:	f001 ffaa 	bl	8002f04 <HAL_I2C_Master_Receive>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	4b81      	ldr	r3, [pc, #516]	; (80011bc <_Z8i2c_TaskPKv+0x560>)
 8000fb6:	701a      	strb	r2, [r3, #0]
					//проверить ответ
					if (cmdRead_4[0] != 0x15 && cmdRead_4[1] != 0x01) {
 8000fb8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000fbc:	2b15      	cmp	r3, #21
 8000fbe:	d017      	beq.n	8000ff0 <_Z8i2c_TaskPKv+0x394>
 8000fc0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d013      	beq.n	8000ff0 <_Z8i2c_TaskPKv+0x394>
						start = 0;
 8000fc8:	4b7d      	ldr	r3, [pc, #500]	; (80011c0 <_Z8i2c_TaskPKv+0x564>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	701a      	strb	r2, [r3, #0]
						ready = 0;
 8000fce:	4b7d      	ldr	r3, [pc, #500]	; (80011c4 <_Z8i2c_TaskPKv+0x568>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	701a      	strb	r2, [r3, #0]
						ssd1306_Fill(Black); //чистим экран
 8000fd4:	2000      	movs	r0, #0
 8000fd6:	f000 fd37 	bl	8001a48 <ssd1306_Fill>
					    ssd1306_SetCursor(2, 0);
 8000fda:	2100      	movs	r1, #0
 8000fdc:	2002      	movs	r0, #2
 8000fde:	f000 fe83 	bl	8001ce8 <ssd1306_SetCursor>
					    ssd1306_WriteString((char*) "error4", Font_7x10, White);
 8000fe2:	4a79      	ldr	r2, [pc, #484]	; (80011c8 <_Z8i2c_TaskPKv+0x56c>)
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	ca06      	ldmia	r2, {r1, r2}
 8000fe8:	4878      	ldr	r0, [pc, #480]	; (80011cc <_Z8i2c_TaskPKv+0x570>)
 8000fea:	f000 fe57 	bl	8001c9c <ssd1306_WriteString>
					    //ssd1306_UpdateScreen();
						continue;
 8000fee:	e0e2      	b.n	80011b6 <_Z8i2c_TaskPKv+0x55a>
					}


					osDelay(500);
 8000ff0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ff4:	f006 fb63 	bl	80076be <osDelay>
					//выдать флаг готовности питания
					ready = 1;
 8000ff8:	4b72      	ldr	r3, [pc, #456]	; (80011c4 <_Z8i2c_TaskPKv+0x568>)
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	701a      	strb	r2, [r3, #0]

					osDelay(3000);
 8000ffe:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001002:	f006 fb5c 	bl	80076be <osDelay>
					//обновляем пик
					status_i2c = HAL_I2C_Master_Transmit(&hi2c1, addr, cmdRefresh, 6, 20);
 8001006:	f107 0214 	add.w	r2, r7, #20
 800100a:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 800100e:	2314      	movs	r3, #20
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	2306      	movs	r3, #6
 8001014:	4868      	ldr	r0, [pc, #416]	; (80011b8 <_Z8i2c_TaskPKv+0x55c>)
 8001016:	f001 fe77 	bl	8002d08 <HAL_I2C_Master_Transmit>
 800101a:	4603      	mov	r3, r0
 800101c:	461a      	mov	r2, r3
 800101e:	4b67      	ldr	r3, [pc, #412]	; (80011bc <_Z8i2c_TaskPKv+0x560>)
 8001020:	701a      	strb	r2, [r3, #0]
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, cmdRead_Refresh, 6, 20);
 8001022:	f107 020c 	add.w	r2, r7, #12
 8001026:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 800102a:	2314      	movs	r3, #20
 800102c:	9300      	str	r3, [sp, #0]
 800102e:	2306      	movs	r3, #6
 8001030:	4861      	ldr	r0, [pc, #388]	; (80011b8 <_Z8i2c_TaskPKv+0x55c>)
 8001032:	f001 ff67 	bl	8002f04 <HAL_I2C_Master_Receive>
 8001036:	4603      	mov	r3, r0
 8001038:	461a      	mov	r2, r3
 800103a:	4b60      	ldr	r3, [pc, #384]	; (80011bc <_Z8i2c_TaskPKv+0x560>)
 800103c:	701a      	strb	r2, [r3, #0]

					// запустить цикл обновления до остановки пользователем
					while(start){
 800103e:	4b60      	ldr	r3, [pc, #384]	; (80011c0 <_Z8i2c_TaskPKv+0x564>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	f000 8083 	beq.w	800114e <_Z8i2c_TaskPKv+0x4f2>
							//обновляем пик
							status_i2c = HAL_I2C_Master_Transmit(&hi2c1, addr, cmdRefresh, 6, 20);
 8001048:	f107 0214 	add.w	r2, r7, #20
 800104c:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8001050:	2314      	movs	r3, #20
 8001052:	9300      	str	r3, [sp, #0]
 8001054:	2306      	movs	r3, #6
 8001056:	4858      	ldr	r0, [pc, #352]	; (80011b8 <_Z8i2c_TaskPKv+0x55c>)
 8001058:	f001 fe56 	bl	8002d08 <HAL_I2C_Master_Transmit>
 800105c:	4603      	mov	r3, r0
 800105e:	461a      	mov	r2, r3
 8001060:	4b56      	ldr	r3, [pc, #344]	; (80011bc <_Z8i2c_TaskPKv+0x560>)
 8001062:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 8001064:	200a      	movs	r0, #10
 8001066:	f006 fb2a 	bl	80076be <osDelay>
							status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_Refresh[0], 1, 20);
 800106a:	f107 020c 	add.w	r2, r7, #12
 800106e:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8001072:	2314      	movs	r3, #20
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	2301      	movs	r3, #1
 8001078:	484f      	ldr	r0, [pc, #316]	; (80011b8 <_Z8i2c_TaskPKv+0x55c>)
 800107a:	f001 ff43 	bl	8002f04 <HAL_I2C_Master_Receive>
 800107e:	4603      	mov	r3, r0
 8001080:	461a      	mov	r2, r3
 8001082:	4b4e      	ldr	r3, [pc, #312]	; (80011bc <_Z8i2c_TaskPKv+0x560>)
 8001084:	701a      	strb	r2, [r3, #0]
							status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_Refresh[1], 1, 20);
 8001086:	f107 030c 	add.w	r3, r7, #12
 800108a:	1c5a      	adds	r2, r3, #1
 800108c:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8001090:	2314      	movs	r3, #20
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	2301      	movs	r3, #1
 8001096:	4848      	ldr	r0, [pc, #288]	; (80011b8 <_Z8i2c_TaskPKv+0x55c>)
 8001098:	f001 ff34 	bl	8002f04 <HAL_I2C_Master_Receive>
 800109c:	4603      	mov	r3, r0
 800109e:	461a      	mov	r2, r3
 80010a0:	4b46      	ldr	r3, [pc, #280]	; (80011bc <_Z8i2c_TaskPKv+0x560>)
 80010a2:	701a      	strb	r2, [r3, #0]
							status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_Refresh[2], 1, 20);
 80010a4:	f107 030c 	add.w	r3, r7, #12
 80010a8:	1c9a      	adds	r2, r3, #2
 80010aa:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 80010ae:	2314      	movs	r3, #20
 80010b0:	9300      	str	r3, [sp, #0]
 80010b2:	2301      	movs	r3, #1
 80010b4:	4840      	ldr	r0, [pc, #256]	; (80011b8 <_Z8i2c_TaskPKv+0x55c>)
 80010b6:	f001 ff25 	bl	8002f04 <HAL_I2C_Master_Receive>
 80010ba:	4603      	mov	r3, r0
 80010bc:	461a      	mov	r2, r3
 80010be:	4b3f      	ldr	r3, [pc, #252]	; (80011bc <_Z8i2c_TaskPKv+0x560>)
 80010c0:	701a      	strb	r2, [r3, #0]
							status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_Refresh[3], 1, 20);
 80010c2:	f107 030c 	add.w	r3, r7, #12
 80010c6:	1cda      	adds	r2, r3, #3
 80010c8:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 80010cc:	2314      	movs	r3, #20
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	2301      	movs	r3, #1
 80010d2:	4839      	ldr	r0, [pc, #228]	; (80011b8 <_Z8i2c_TaskPKv+0x55c>)
 80010d4:	f001 ff16 	bl	8002f04 <HAL_I2C_Master_Receive>
 80010d8:	4603      	mov	r3, r0
 80010da:	461a      	mov	r2, r3
 80010dc:	4b37      	ldr	r3, [pc, #220]	; (80011bc <_Z8i2c_TaskPKv+0x560>)
 80010de:	701a      	strb	r2, [r3, #0]
							status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_Refresh[4], 1, 20);
 80010e0:	f107 030c 	add.w	r3, r7, #12
 80010e4:	1d1a      	adds	r2, r3, #4
 80010e6:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 80010ea:	2314      	movs	r3, #20
 80010ec:	9300      	str	r3, [sp, #0]
 80010ee:	2301      	movs	r3, #1
 80010f0:	4831      	ldr	r0, [pc, #196]	; (80011b8 <_Z8i2c_TaskPKv+0x55c>)
 80010f2:	f001 ff07 	bl	8002f04 <HAL_I2C_Master_Receive>
 80010f6:	4603      	mov	r3, r0
 80010f8:	461a      	mov	r2, r3
 80010fa:	4b30      	ldr	r3, [pc, #192]	; (80011bc <_Z8i2c_TaskPKv+0x560>)
 80010fc:	701a      	strb	r2, [r3, #0]
							status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_Refresh[5], 1, 20);
 80010fe:	f107 030c 	add.w	r3, r7, #12
 8001102:	1d5a      	adds	r2, r3, #5
 8001104:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8001108:	2314      	movs	r3, #20
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	2301      	movs	r3, #1
 800110e:	482a      	ldr	r0, [pc, #168]	; (80011b8 <_Z8i2c_TaskPKv+0x55c>)
 8001110:	f001 fef8 	bl	8002f04 <HAL_I2C_Master_Receive>
 8001114:	4603      	mov	r3, r0
 8001116:	461a      	mov	r2, r3
 8001118:	4b28      	ldr	r3, [pc, #160]	; (80011bc <_Z8i2c_TaskPKv+0x560>)
 800111a:	701a      	strb	r2, [r3, #0]

							//ожидаем 10 секунд и обновляем пик если за это время был останов то выходим из цикла
							for (int var = 0; var < 10000; ++var) {
 800111c:	2300      	movs	r3, #0
 800111e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001120:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001122:	f242 720f 	movw	r2, #9999	; 0x270f
 8001126:	4293      	cmp	r3, r2
 8001128:	dc0b      	bgt.n	8001142 <_Z8i2c_TaskPKv+0x4e6>
								if(!start){
 800112a:	4b25      	ldr	r3, [pc, #148]	; (80011c0 <_Z8i2c_TaskPKv+0x564>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d006      	beq.n	8001140 <_Z8i2c_TaskPKv+0x4e4>
									break;
								}
								osDelay(1);
 8001132:	2001      	movs	r0, #1
 8001134:	f006 fac3 	bl	80076be <osDelay>
							for (int var = 0; var < 10000; ++var) {
 8001138:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800113a:	3301      	adds	r3, #1
 800113c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800113e:	e7ef      	b.n	8001120 <_Z8i2c_TaskPKv+0x4c4>
									break;
 8001140:	bf00      	nop
							}

							if(!start){
 8001142:	4b1f      	ldr	r3, [pc, #124]	; (80011c0 <_Z8i2c_TaskPKv+0x564>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d000      	beq.n	800114c <_Z8i2c_TaskPKv+0x4f0>
					while(start){
 800114a:	e778      	b.n	800103e <_Z8i2c_TaskPKv+0x3e2>
									break;
 800114c:	bf00      	nop
							}

					}

					// выключение питания
					status_i2c = HAL_I2C_Master_Transmit(&hi2c1, addr, cmdStop, 7, 20);
 800114e:	f107 0220 	add.w	r2, r7, #32
 8001152:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8001156:	2314      	movs	r3, #20
 8001158:	9300      	str	r3, [sp, #0]
 800115a:	2307      	movs	r3, #7
 800115c:	4816      	ldr	r0, [pc, #88]	; (80011b8 <_Z8i2c_TaskPKv+0x55c>)
 800115e:	f001 fdd3 	bl	8002d08 <HAL_I2C_Master_Transmit>
 8001162:	4603      	mov	r3, r0
 8001164:	461a      	mov	r2, r3
 8001166:	4b15      	ldr	r3, [pc, #84]	; (80011bc <_Z8i2c_TaskPKv+0x560>)
 8001168:	701a      	strb	r2, [r3, #0]
					osDelay(20);
 800116a:	2014      	movs	r0, #20
 800116c:	f006 faa7 	bl	80076be <osDelay>
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_stop[0], 1, 20);
 8001170:	f107 021c 	add.w	r2, r7, #28
 8001174:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8001178:	2314      	movs	r3, #20
 800117a:	9300      	str	r3, [sp, #0]
 800117c:	2301      	movs	r3, #1
 800117e:	480e      	ldr	r0, [pc, #56]	; (80011b8 <_Z8i2c_TaskPKv+0x55c>)
 8001180:	f001 fec0 	bl	8002f04 <HAL_I2C_Master_Receive>
 8001184:	4603      	mov	r3, r0
 8001186:	461a      	mov	r2, r3
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <_Z8i2c_TaskPKv+0x560>)
 800118a:	701a      	strb	r2, [r3, #0]
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_stop[1], 1, 20);
 800118c:	f107 031c 	add.w	r3, r7, #28
 8001190:	1c5a      	adds	r2, r3, #1
 8001192:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8001196:	2314      	movs	r3, #20
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	2301      	movs	r3, #1
 800119c:	4806      	ldr	r0, [pc, #24]	; (80011b8 <_Z8i2c_TaskPKv+0x55c>)
 800119e:	f001 feb1 	bl	8002f04 <HAL_I2C_Master_Receive>
 80011a2:	4603      	mov	r3, r0
 80011a4:	461a      	mov	r2, r3
 80011a6:	4b05      	ldr	r3, [pc, #20]	; (80011bc <_Z8i2c_TaskPKv+0x560>)
 80011a8:	701a      	strb	r2, [r3, #0]
					//выдать флаг отключения питания
					ready = 0;
 80011aa:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <_Z8i2c_TaskPKv+0x568>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	701a      	strb	r2, [r3, #0]
	  }

	  osDelay(1);
 80011b0:	2001      	movs	r0, #1
 80011b2:	f006 fa84 	bl	80076be <osDelay>
  }
 80011b6:	e5b0      	b.n	8000d1a <_Z8i2c_TaskPKv+0xbe>
 80011b8:	20004758 	.word	0x20004758
 80011bc:	200000a0 	.word	0x200000a0
 80011c0:	200002c8 	.word	0x200002c8
 80011c4:	200002c9 	.word	0x200002c9
 80011c8:	20000000 	.word	0x20000000
 80011cc:	0800955c 	.word	0x0800955c

080011d0 <_Z10ButtonTaskPKv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ButtonTask */
void ButtonTask(void const * argument)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b09c      	sub	sp, #112	; 0x70
 80011d4:	af02      	add	r7, sp, #8
 80011d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ButtonTask */

	RV_BUTTON button1(B1_GPIO_Port, B1_Pin, HIGH_PULL, NORM_OPEN);
 80011d8:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80011dc:	2300      	movs	r3, #0
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	2300      	movs	r3, #0
 80011e2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011e6:	496f      	ldr	r1, [pc, #444]	; (80013a4 <_Z10ButtonTaskPKv+0x1d4>)
 80011e8:	f7ff f9be 	bl	8000568 <_ZN9RV_BUTTONC1EP12GPIO_TypeDeftbb>
	RV_BUTTON button2(B2_GPIO_Port, B2_Pin, HIGH_PULL, NORM_OPEN);
 80011ec:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80011f0:	2300      	movs	r3, #0
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	2300      	movs	r3, #0
 80011f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011fa:	496b      	ldr	r1, [pc, #428]	; (80013a8 <_Z10ButtonTaskPKv+0x1d8>)
 80011fc:	f7ff f9b4 	bl	8000568 <_ZN9RV_BUTTONC1EP12GPIO_TypeDeftbb>
	RV_BUTTON button3(B3_GPIO_Port, B3_Pin, HIGH_PULL, NORM_OPEN);
 8001200:	f107 0014 	add.w	r0, r7, #20
 8001204:	2300      	movs	r3, #0
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	2300      	movs	r3, #0
 800120a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800120e:	4966      	ldr	r1, [pc, #408]	; (80013a8 <_Z10ButtonTaskPKv+0x1d8>)
 8001210:	f7ff f9aa 	bl	8000568 <_ZN9RV_BUTTONC1EP12GPIO_TypeDeftbb>
	uint8_t snum[5];

	button1.isClick();
 8001214:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff f9fb 	bl	8000614 <_ZN9RV_BUTTON7isClickEv>
	button2.isClick();
 800121e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff f9f6 	bl	8000614 <_ZN9RV_BUTTON7isClickEv>
	button3.isClick();
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff f9f1 	bl	8000614 <_ZN9RV_BUTTON7isClickEv>

  /* Infinite loop */
  for(;;)
  {
	button1.tick();
 8001232:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff fa05 	bl	8000646 <_ZN9RV_BUTTON4tickEv>
	button2.tick();
 800123c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff fa00 	bl	8000646 <_ZN9RV_BUTTON4tickEv>
	button3.tick();
 8001246:	f107 0314 	add.w	r3, r7, #20
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff f9fb 	bl	8000646 <_ZN9RV_BUTTON4tickEv>

	if (button1.isClick() ){
 8001250:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff f9dd 	bl	8000614 <_ZN9RV_BUTTON7isClickEv>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d04a      	beq.n	80012f6 <_Z10ButtonTaskPKv+0x126>
		if (start == 0 && plug == GPIO_PIN_SET) {
 8001260:	4b52      	ldr	r3, [pc, #328]	; (80013ac <_Z10ButtonTaskPKv+0x1dc>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d111      	bne.n	800128c <_Z10ButtonTaskPKv+0xbc>
 8001268:	4b51      	ldr	r3, [pc, #324]	; (80013b0 <_Z10ButtonTaskPKv+0x1e0>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d10d      	bne.n	800128c <_Z10ButtonTaskPKv+0xbc>
			start = 1;
 8001270:	4b4e      	ldr	r3, [pc, #312]	; (80013ac <_Z10ButtonTaskPKv+0x1dc>)
 8001272:	2201      	movs	r2, #1
 8001274:	701a      	strb	r2, [r3, #0]
			ssd1306_SetCursor(2, 0);
 8001276:	2100      	movs	r1, #0
 8001278:	2002      	movs	r0, #2
 800127a:	f000 fd35 	bl	8001ce8 <ssd1306_SetCursor>
			ssd1306_WriteString((char*) "Test started   ", Font_7x10, White);
 800127e:	4a4d      	ldr	r2, [pc, #308]	; (80013b4 <_Z10ButtonTaskPKv+0x1e4>)
 8001280:	2301      	movs	r3, #1
 8001282:	ca06      	ldmia	r2, {r1, r2}
 8001284:	484c      	ldr	r0, [pc, #304]	; (80013b8 <_Z10ButtonTaskPKv+0x1e8>)
 8001286:	f000 fd09 	bl	8001c9c <ssd1306_WriteString>
 800128a:	e034      	b.n	80012f6 <_Z10ButtonTaskPKv+0x126>

		}else if(start >= 1 && plug == GPIO_PIN_SET){
 800128c:	4b47      	ldr	r3, [pc, #284]	; (80013ac <_Z10ButtonTaskPKv+0x1dc>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d023      	beq.n	80012dc <_Z10ButtonTaskPKv+0x10c>
 8001294:	4b46      	ldr	r3, [pc, #280]	; (80013b0 <_Z10ButtonTaskPKv+0x1e0>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d11f      	bne.n	80012dc <_Z10ButtonTaskPKv+0x10c>
			start = 0;
 800129c:	4b43      	ldr	r3, [pc, #268]	; (80013ac <_Z10ButtonTaskPKv+0x1dc>)
 800129e:	2200      	movs	r2, #0
 80012a0:	701a      	strb	r2, [r3, #0]
			ssd1306_SetCursor(2, 0);
 80012a2:	2100      	movs	r1, #0
 80012a4:	2002      	movs	r0, #2
 80012a6:	f000 fd1f 	bl	8001ce8 <ssd1306_SetCursor>
			ssd1306_WriteString((char*) "Test stoped     ", Font_7x10, White);
 80012aa:	4a42      	ldr	r2, [pc, #264]	; (80013b4 <_Z10ButtonTaskPKv+0x1e4>)
 80012ac:	2301      	movs	r3, #1
 80012ae:	ca06      	ldmia	r2, {r1, r2}
 80012b0:	4842      	ldr	r0, [pc, #264]	; (80013bc <_Z10ButtonTaskPKv+0x1ec>)
 80012b2:	f000 fcf3 	bl	8001c9c <ssd1306_WriteString>

			sprintf((char*)snum, "%-2d", 0);
 80012b6:	f107 030c 	add.w	r3, r7, #12
 80012ba:	2200      	movs	r2, #0
 80012bc:	4940      	ldr	r1, [pc, #256]	; (80013c0 <_Z10ButtonTaskPKv+0x1f0>)
 80012be:	4618      	mov	r0, r3
 80012c0:	f007 fd3c 	bl	8008d3c <siprintf>
		    ssd1306_SetCursor(2, 28);
 80012c4:	211c      	movs	r1, #28
 80012c6:	2002      	movs	r0, #2
 80012c8:	f000 fd0e 	bl	8001ce8 <ssd1306_SetCursor>
		    ssd1306_WriteString((char*)snum, Font_11x18, White);
 80012cc:	4a3d      	ldr	r2, [pc, #244]	; (80013c4 <_Z10ButtonTaskPKv+0x1f4>)
 80012ce:	f107 000c 	add.w	r0, r7, #12
 80012d2:	2301      	movs	r3, #1
 80012d4:	ca06      	ldmia	r2, {r1, r2}
 80012d6:	f000 fce1 	bl	8001c9c <ssd1306_WriteString>
 80012da:	e00c      	b.n	80012f6 <_Z10ButtonTaskPKv+0x126>

		}else {
			start = 0;
 80012dc:	4b33      	ldr	r3, [pc, #204]	; (80013ac <_Z10ButtonTaskPKv+0x1dc>)
 80012de:	2200      	movs	r2, #0
 80012e0:	701a      	strb	r2, [r3, #0]
			ssd1306_SetCursor(2, 0);
 80012e2:	2100      	movs	r1, #0
 80012e4:	2002      	movs	r0, #2
 80012e6:	f000 fcff 	bl	8001ce8 <ssd1306_SetCursor>
			ssd1306_WriteString((char*) "No plug        ", Font_7x10, White);
 80012ea:	4a32      	ldr	r2, [pc, #200]	; (80013b4 <_Z10ButtonTaskPKv+0x1e4>)
 80012ec:	2301      	movs	r3, #1
 80012ee:	ca06      	ldmia	r2, {r1, r2}
 80012f0:	4835      	ldr	r0, [pc, #212]	; (80013c8 <_Z10ButtonTaskPKv+0x1f8>)
 80012f2:	f000 fcd3 	bl	8001c9c <ssd1306_WriteString>
		}

	}
	if (button2.isClick() ){
 80012f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff f98a 	bl	8000614 <_ZN9RV_BUTTON7isClickEv>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d04a      	beq.n	800139c <_Z10ButtonTaskPKv+0x1cc>
		if (start == 0 && plug == GPIO_PIN_SET) {
 8001306:	4b29      	ldr	r3, [pc, #164]	; (80013ac <_Z10ButtonTaskPKv+0x1dc>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d111      	bne.n	8001332 <_Z10ButtonTaskPKv+0x162>
 800130e:	4b28      	ldr	r3, [pc, #160]	; (80013b0 <_Z10ButtonTaskPKv+0x1e0>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d10d      	bne.n	8001332 <_Z10ButtonTaskPKv+0x162>
			start = 2;
 8001316:	4b25      	ldr	r3, [pc, #148]	; (80013ac <_Z10ButtonTaskPKv+0x1dc>)
 8001318:	2202      	movs	r2, #2
 800131a:	701a      	strb	r2, [r3, #0]
			ssd1306_SetCursor(2, 0);
 800131c:	2100      	movs	r1, #0
 800131e:	2002      	movs	r0, #2
 8001320:	f000 fce2 	bl	8001ce8 <ssd1306_SetCursor>
			ssd1306_WriteString((char*) "Test2 started   ", Font_7x10, White);
 8001324:	4a23      	ldr	r2, [pc, #140]	; (80013b4 <_Z10ButtonTaskPKv+0x1e4>)
 8001326:	2301      	movs	r3, #1
 8001328:	ca06      	ldmia	r2, {r1, r2}
 800132a:	4828      	ldr	r0, [pc, #160]	; (80013cc <_Z10ButtonTaskPKv+0x1fc>)
 800132c:	f000 fcb6 	bl	8001c9c <ssd1306_WriteString>
 8001330:	e034      	b.n	800139c <_Z10ButtonTaskPKv+0x1cc>

		}else if(start >= 1 && plug == GPIO_PIN_SET){
 8001332:	4b1e      	ldr	r3, [pc, #120]	; (80013ac <_Z10ButtonTaskPKv+0x1dc>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d023      	beq.n	8001382 <_Z10ButtonTaskPKv+0x1b2>
 800133a:	4b1d      	ldr	r3, [pc, #116]	; (80013b0 <_Z10ButtonTaskPKv+0x1e0>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2b01      	cmp	r3, #1
 8001340:	d11f      	bne.n	8001382 <_Z10ButtonTaskPKv+0x1b2>
			start = 0;
 8001342:	4b1a      	ldr	r3, [pc, #104]	; (80013ac <_Z10ButtonTaskPKv+0x1dc>)
 8001344:	2200      	movs	r2, #0
 8001346:	701a      	strb	r2, [r3, #0]
			ssd1306_SetCursor(2, 0);
 8001348:	2100      	movs	r1, #0
 800134a:	2002      	movs	r0, #2
 800134c:	f000 fccc 	bl	8001ce8 <ssd1306_SetCursor>
			ssd1306_WriteString((char*) "Test stoped     ", Font_7x10, White);
 8001350:	4a18      	ldr	r2, [pc, #96]	; (80013b4 <_Z10ButtonTaskPKv+0x1e4>)
 8001352:	2301      	movs	r3, #1
 8001354:	ca06      	ldmia	r2, {r1, r2}
 8001356:	4819      	ldr	r0, [pc, #100]	; (80013bc <_Z10ButtonTaskPKv+0x1ec>)
 8001358:	f000 fca0 	bl	8001c9c <ssd1306_WriteString>

			sprintf((char*)snum, "%-2d", 0);
 800135c:	f107 030c 	add.w	r3, r7, #12
 8001360:	2200      	movs	r2, #0
 8001362:	4917      	ldr	r1, [pc, #92]	; (80013c0 <_Z10ButtonTaskPKv+0x1f0>)
 8001364:	4618      	mov	r0, r3
 8001366:	f007 fce9 	bl	8008d3c <siprintf>
		    ssd1306_SetCursor(2, 28);
 800136a:	211c      	movs	r1, #28
 800136c:	2002      	movs	r0, #2
 800136e:	f000 fcbb 	bl	8001ce8 <ssd1306_SetCursor>
		    ssd1306_WriteString((char*)snum, Font_11x18, White);
 8001372:	4a14      	ldr	r2, [pc, #80]	; (80013c4 <_Z10ButtonTaskPKv+0x1f4>)
 8001374:	f107 000c 	add.w	r0, r7, #12
 8001378:	2301      	movs	r3, #1
 800137a:	ca06      	ldmia	r2, {r1, r2}
 800137c:	f000 fc8e 	bl	8001c9c <ssd1306_WriteString>
 8001380:	e00c      	b.n	800139c <_Z10ButtonTaskPKv+0x1cc>

		}else {
			start = 0;
 8001382:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <_Z10ButtonTaskPKv+0x1dc>)
 8001384:	2200      	movs	r2, #0
 8001386:	701a      	strb	r2, [r3, #0]
			ssd1306_SetCursor(2, 0);
 8001388:	2100      	movs	r1, #0
 800138a:	2002      	movs	r0, #2
 800138c:	f000 fcac 	bl	8001ce8 <ssd1306_SetCursor>
			ssd1306_WriteString((char*) "No plug        ", Font_7x10, White);
 8001390:	4a08      	ldr	r2, [pc, #32]	; (80013b4 <_Z10ButtonTaskPKv+0x1e4>)
 8001392:	2301      	movs	r3, #1
 8001394:	ca06      	ldmia	r2, {r1, r2}
 8001396:	480c      	ldr	r0, [pc, #48]	; (80013c8 <_Z10ButtonTaskPKv+0x1f8>)
 8001398:	f000 fc80 	bl	8001c9c <ssd1306_WriteString>
		}

	}
    osDelay(1);
 800139c:	2001      	movs	r0, #1
 800139e:	f006 f98e 	bl	80076be <osDelay>
	button1.tick();
 80013a2:	e746      	b.n	8001232 <_Z10ButtonTaskPKv+0x62>
 80013a4:	40020000 	.word	0x40020000
 80013a8:	40020800 	.word	0x40020800
 80013ac:	200002c8 	.word	0x200002c8
 80013b0:	200002ca 	.word	0x200002ca
 80013b4:	20000000 	.word	0x20000000
 80013b8:	08009598 	.word	0x08009598
 80013bc:	080095a8 	.word	0x080095a8
 80013c0:	08009524 	.word	0x08009524
 80013c4:	20000008 	.word	0x20000008
 80013c8:	080095bc 	.word	0x080095bc
 80013cc:	080095cc 	.word	0x080095cc

080013d0 <HAL_UART_RxCpltCallback>:
  /* USER CODE END ButtonTask */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]

	status_uart = HAL_UART_Receive_IT(&huart6, &readASIC[counter_bytes], 1);
 80013d8:	4b0c      	ldr	r3, [pc, #48]	; (800140c <HAL_UART_RxCpltCallback+0x3c>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a0c      	ldr	r2, [pc, #48]	; (8001410 <HAL_UART_RxCpltCallback+0x40>)
 80013de:	4413      	add	r3, r2
 80013e0:	2201      	movs	r2, #1
 80013e2:	4619      	mov	r1, r3
 80013e4:	480b      	ldr	r0, [pc, #44]	; (8001414 <HAL_UART_RxCpltCallback+0x44>)
 80013e6:	f005 f974 	bl	80066d2 <HAL_UART_Receive_IT>
 80013ea:	4603      	mov	r3, r0
 80013ec:	461a      	mov	r2, r3
 80013ee:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <HAL_UART_RxCpltCallback+0x48>)
 80013f0:	701a      	strb	r2, [r3, #0]
	counter_bytes++;
 80013f2:	4b06      	ldr	r3, [pc, #24]	; (800140c <HAL_UART_RxCpltCallback+0x3c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	3301      	adds	r3, #1
 80013f8:	4a04      	ldr	r2, [pc, #16]	; (800140c <HAL_UART_RxCpltCallback+0x3c>)
 80013fa:	6013      	str	r3, [r2, #0]
	uartTIM = 0; //сбрасываем таймер до тех пор пока не придут все данные
 80013fc:	4b07      	ldr	r3, [pc, #28]	; (800141c <HAL_UART_RxCpltCallback+0x4c>)
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	200000a8 	.word	0x200000a8
 8001410:	200000ac 	.word	0x200000ac
 8001414:	20004838 	.word	0x20004838
 8001418:	200000a1 	.word	0x200000a1
 800141c:	20000590 	.word	0x20000590

08001420 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08a      	sub	sp, #40	; 0x28
 8001424:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001426:	f107 0314 	add.w	r3, r7, #20
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
 8001432:	60da      	str	r2, [r3, #12]
 8001434:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	613b      	str	r3, [r7, #16]
 800143a:	4b4b      	ldr	r3, [pc, #300]	; (8001568 <MX_GPIO_Init+0x148>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	4a4a      	ldr	r2, [pc, #296]	; (8001568 <MX_GPIO_Init+0x148>)
 8001440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001444:	6313      	str	r3, [r2, #48]	; 0x30
 8001446:	4b48      	ldr	r3, [pc, #288]	; (8001568 <MX_GPIO_Init+0x148>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800144e:	613b      	str	r3, [r7, #16]
 8001450:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	4b44      	ldr	r3, [pc, #272]	; (8001568 <MX_GPIO_Init+0x148>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	4a43      	ldr	r2, [pc, #268]	; (8001568 <MX_GPIO_Init+0x148>)
 800145c:	f043 0304 	orr.w	r3, r3, #4
 8001460:	6313      	str	r3, [r2, #48]	; 0x30
 8001462:	4b41      	ldr	r3, [pc, #260]	; (8001568 <MX_GPIO_Init+0x148>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	f003 0304 	and.w	r3, r3, #4
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	60bb      	str	r3, [r7, #8]
 8001472:	4b3d      	ldr	r3, [pc, #244]	; (8001568 <MX_GPIO_Init+0x148>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	4a3c      	ldr	r2, [pc, #240]	; (8001568 <MX_GPIO_Init+0x148>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	6313      	str	r3, [r2, #48]	; 0x30
 800147e:	4b3a      	ldr	r3, [pc, #232]	; (8001568 <MX_GPIO_Init+0x148>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	60bb      	str	r3, [r7, #8]
 8001488:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	607b      	str	r3, [r7, #4]
 800148e:	4b36      	ldr	r3, [pc, #216]	; (8001568 <MX_GPIO_Init+0x148>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	4a35      	ldr	r2, [pc, #212]	; (8001568 <MX_GPIO_Init+0x148>)
 8001494:	f043 0308 	orr.w	r3, r3, #8
 8001498:	6313      	str	r3, [r2, #48]	; 0x30
 800149a:	4b33      	ldr	r3, [pc, #204]	; (8001568 <MX_GPIO_Init+0x148>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	f003 0308 	and.w	r3, r3, #8
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	603b      	str	r3, [r7, #0]
 80014aa:	4b2f      	ldr	r3, [pc, #188]	; (8001568 <MX_GPIO_Init+0x148>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	4a2e      	ldr	r2, [pc, #184]	; (8001568 <MX_GPIO_Init+0x148>)
 80014b0:	f043 0302 	orr.w	r3, r3, #2
 80014b4:	6313      	str	r3, [r2, #48]	; 0x30
 80014b6:	4b2c      	ldr	r3, [pc, #176]	; (8001568 <MX_GPIO_Init+0x148>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	603b      	str	r3, [r7, #0]
 80014c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_ASIC_GPIO_Port, RST_ASIC_Pin, GPIO_PIN_SET);
 80014c2:	2201      	movs	r2, #1
 80014c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014c8:	4828      	ldr	r0, [pc, #160]	; (800156c <MX_GPIO_Init+0x14c>)
 80014ca:	f001 fabf 	bl	8002a4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, A1_Pin|A0_Pin|A2_Pin, GPIO_PIN_SET);
 80014ce:	2201      	movs	r2, #1
 80014d0:	2107      	movs	r1, #7
 80014d2:	4827      	ldr	r0, [pc, #156]	; (8001570 <MX_GPIO_Init+0x150>)
 80014d4:	f001 faba 	bl	8002a4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RST_ASIC_Pin;
 80014d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80014dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014de:	2301      	movs	r3, #1
 80014e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e6:	2300      	movs	r3, #0
 80014e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RST_ASIC_GPIO_Port, &GPIO_InitStruct);
 80014ea:	f107 0314 	add.w	r3, r7, #20
 80014ee:	4619      	mov	r1, r3
 80014f0:	481e      	ldr	r0, [pc, #120]	; (800156c <MX_GPIO_Init+0x14c>)
 80014f2:	f001 f8f7 	bl	80026e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001500:	2301      	movs	r3, #1
 8001502:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	4619      	mov	r1, r3
 800150a:	4818      	ldr	r0, [pc, #96]	; (800156c <MX_GPIO_Init+0x14c>)
 800150c:	f001 f8ea 	bl	80026e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8001510:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001514:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001516:	2300      	movs	r3, #0
 8001518:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800151a:	2301      	movs	r3, #1
 800151c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800151e:	f107 0314 	add.w	r3, r7, #20
 8001522:	4619      	mov	r1, r3
 8001524:	4813      	ldr	r0, [pc, #76]	; (8001574 <MX_GPIO_Init+0x154>)
 8001526:	f001 f8dd 	bl	80026e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PLUG_Pin;
 800152a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800152e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001530:	2300      	movs	r3, #0
 8001532:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001534:	2302      	movs	r3, #2
 8001536:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PLUG_GPIO_Port, &GPIO_InitStruct);
 8001538:	f107 0314 	add.w	r3, r7, #20
 800153c:	4619      	mov	r1, r3
 800153e:	480d      	ldr	r0, [pc, #52]	; (8001574 <MX_GPIO_Init+0x154>)
 8001540:	f001 f8d0 	bl	80026e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = A1_Pin|A0_Pin|A2_Pin;
 8001544:	2307      	movs	r3, #7
 8001546:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001548:	2301      	movs	r3, #1
 800154a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001550:	2300      	movs	r3, #0
 8001552:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001554:	f107 0314 	add.w	r3, r7, #20
 8001558:	4619      	mov	r1, r3
 800155a:	4805      	ldr	r0, [pc, #20]	; (8001570 <MX_GPIO_Init+0x150>)
 800155c:	f001 f8c2 	bl	80026e4 <HAL_GPIO_Init>

}
 8001560:	bf00      	nop
 8001562:	3728      	adds	r7, #40	; 0x28
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40023800 	.word	0x40023800
 800156c:	40020000 	.word	0x40020000
 8001570:	40020c00 	.word	0x40020c00
 8001574:	40020800 	.word	0x40020800

08001578 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800157c:	4b13      	ldr	r3, [pc, #76]	; (80015cc <MX_I2C1_Init+0x54>)
 800157e:	4a14      	ldr	r2, [pc, #80]	; (80015d0 <MX_I2C1_Init+0x58>)
 8001580:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 35000;
 8001582:	4b12      	ldr	r3, [pc, #72]	; (80015cc <MX_I2C1_Init+0x54>)
 8001584:	f648 02b8 	movw	r2, #35000	; 0x88b8
 8001588:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800158a:	4b10      	ldr	r3, [pc, #64]	; (80015cc <MX_I2C1_Init+0x54>)
 800158c:	2200      	movs	r2, #0
 800158e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001590:	4b0e      	ldr	r3, [pc, #56]	; (80015cc <MX_I2C1_Init+0x54>)
 8001592:	2200      	movs	r2, #0
 8001594:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001596:	4b0d      	ldr	r3, [pc, #52]	; (80015cc <MX_I2C1_Init+0x54>)
 8001598:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800159c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800159e:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <MX_I2C1_Init+0x54>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015a4:	4b09      	ldr	r3, [pc, #36]	; (80015cc <MX_I2C1_Init+0x54>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015aa:	4b08      	ldr	r3, [pc, #32]	; (80015cc <MX_I2C1_Init+0x54>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <MX_I2C1_Init+0x54>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015b6:	4805      	ldr	r0, [pc, #20]	; (80015cc <MX_I2C1_Init+0x54>)
 80015b8:	f001 fa62 	bl	8002a80 <HAL_I2C_Init>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 80015c2:	f000 f999 	bl	80018f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20004758 	.word	0x20004758
 80015d0:	40005400 	.word	0x40005400

080015d4 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80015d8:	4b12      	ldr	r3, [pc, #72]	; (8001624 <MX_I2C3_Init+0x50>)
 80015da:	4a13      	ldr	r2, [pc, #76]	; (8001628 <MX_I2C3_Init+0x54>)
 80015dc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 80015de:	4b11      	ldr	r3, [pc, #68]	; (8001624 <MX_I2C3_Init+0x50>)
 80015e0:	4a12      	ldr	r2, [pc, #72]	; (800162c <MX_I2C3_Init+0x58>)
 80015e2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015e4:	4b0f      	ldr	r3, [pc, #60]	; (8001624 <MX_I2C3_Init+0x50>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80015ea:	4b0e      	ldr	r3, [pc, #56]	; (8001624 <MX_I2C3_Init+0x50>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015f0:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <MX_I2C3_Init+0x50>)
 80015f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015f6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015f8:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <MX_I2C3_Init+0x50>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80015fe:	4b09      	ldr	r3, [pc, #36]	; (8001624 <MX_I2C3_Init+0x50>)
 8001600:	2200      	movs	r2, #0
 8001602:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001604:	4b07      	ldr	r3, [pc, #28]	; (8001624 <MX_I2C3_Init+0x50>)
 8001606:	2200      	movs	r2, #0
 8001608:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800160a:	4b06      	ldr	r3, [pc, #24]	; (8001624 <MX_I2C3_Init+0x50>)
 800160c:	2200      	movs	r2, #0
 800160e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001610:	4804      	ldr	r0, [pc, #16]	; (8001624 <MX_I2C3_Init+0x50>)
 8001612:	f001 fa35 	bl	8002a80 <HAL_I2C_Init>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800161c:	f000 f96c 	bl	80018f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001620:	bf00      	nop
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20004704 	.word	0x20004704
 8001628:	40005c00 	.word	0x40005c00
 800162c:	00061a80 	.word	0x00061a80

08001630 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b08c      	sub	sp, #48	; 0x30
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001638:	f107 031c 	add.w	r3, r7, #28
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
 8001646:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a4a      	ldr	r2, [pc, #296]	; (8001778 <HAL_I2C_MspInit+0x148>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d12c      	bne.n	80016ac <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	61bb      	str	r3, [r7, #24]
 8001656:	4b49      	ldr	r3, [pc, #292]	; (800177c <HAL_I2C_MspInit+0x14c>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	4a48      	ldr	r2, [pc, #288]	; (800177c <HAL_I2C_MspInit+0x14c>)
 800165c:	f043 0302 	orr.w	r3, r3, #2
 8001660:	6313      	str	r3, [r2, #48]	; 0x30
 8001662:	4b46      	ldr	r3, [pc, #280]	; (800177c <HAL_I2C_MspInit+0x14c>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	61bb      	str	r3, [r7, #24]
 800166c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800166e:	23c0      	movs	r3, #192	; 0xc0
 8001670:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001672:	2312      	movs	r3, #18
 8001674:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167a:	2303      	movs	r3, #3
 800167c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800167e:	2304      	movs	r3, #4
 8001680:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001682:	f107 031c 	add.w	r3, r7, #28
 8001686:	4619      	mov	r1, r3
 8001688:	483d      	ldr	r0, [pc, #244]	; (8001780 <HAL_I2C_MspInit+0x150>)
 800168a:	f001 f82b 	bl	80026e4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	617b      	str	r3, [r7, #20]
 8001692:	4b3a      	ldr	r3, [pc, #232]	; (800177c <HAL_I2C_MspInit+0x14c>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	4a39      	ldr	r2, [pc, #228]	; (800177c <HAL_I2C_MspInit+0x14c>)
 8001698:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800169c:	6413      	str	r3, [r2, #64]	; 0x40
 800169e:	4b37      	ldr	r3, [pc, #220]	; (800177c <HAL_I2C_MspInit+0x14c>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016a6:	617b      	str	r3, [r7, #20]
 80016a8:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80016aa:	e060      	b.n	800176e <HAL_I2C_MspInit+0x13e>
  else if(i2cHandle->Instance==I2C3)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a34      	ldr	r2, [pc, #208]	; (8001784 <HAL_I2C_MspInit+0x154>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d15b      	bne.n	800176e <HAL_I2C_MspInit+0x13e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	613b      	str	r3, [r7, #16]
 80016ba:	4b30      	ldr	r3, [pc, #192]	; (800177c <HAL_I2C_MspInit+0x14c>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	4a2f      	ldr	r2, [pc, #188]	; (800177c <HAL_I2C_MspInit+0x14c>)
 80016c0:	f043 0304 	orr.w	r3, r3, #4
 80016c4:	6313      	str	r3, [r2, #48]	; 0x30
 80016c6:	4b2d      	ldr	r3, [pc, #180]	; (800177c <HAL_I2C_MspInit+0x14c>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	f003 0304 	and.w	r3, r3, #4
 80016ce:	613b      	str	r3, [r7, #16]
 80016d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	4b29      	ldr	r3, [pc, #164]	; (800177c <HAL_I2C_MspInit+0x14c>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	4a28      	ldr	r2, [pc, #160]	; (800177c <HAL_I2C_MspInit+0x14c>)
 80016dc:	f043 0301 	orr.w	r3, r3, #1
 80016e0:	6313      	str	r3, [r2, #48]	; 0x30
 80016e2:	4b26      	ldr	r3, [pc, #152]	; (800177c <HAL_I2C_MspInit+0x14c>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016f4:	2312      	movs	r3, #18
 80016f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016fc:	2303      	movs	r3, #3
 80016fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001700:	2304      	movs	r3, #4
 8001702:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001704:	f107 031c 	add.w	r3, r7, #28
 8001708:	4619      	mov	r1, r3
 800170a:	481f      	ldr	r0, [pc, #124]	; (8001788 <HAL_I2C_MspInit+0x158>)
 800170c:	f000 ffea 	bl	80026e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001710:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001714:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001716:	2312      	movs	r3, #18
 8001718:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171e:	2303      	movs	r3, #3
 8001720:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001722:	2304      	movs	r3, #4
 8001724:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001726:	f107 031c 	add.w	r3, r7, #28
 800172a:	4619      	mov	r1, r3
 800172c:	4817      	ldr	r0, [pc, #92]	; (800178c <HAL_I2C_MspInit+0x15c>)
 800172e:	f000 ffd9 	bl	80026e4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	60bb      	str	r3, [r7, #8]
 8001736:	4b11      	ldr	r3, [pc, #68]	; (800177c <HAL_I2C_MspInit+0x14c>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	4a10      	ldr	r2, [pc, #64]	; (800177c <HAL_I2C_MspInit+0x14c>)
 800173c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001740:	6413      	str	r3, [r2, #64]	; 0x40
 8001742:	4b0e      	ldr	r3, [pc, #56]	; (800177c <HAL_I2C_MspInit+0x14c>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800174a:	60bb      	str	r3, [r7, #8]
 800174c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 5, 0);
 800174e:	2200      	movs	r2, #0
 8001750:	2105      	movs	r1, #5
 8001752:	2048      	movs	r0, #72	; 0x48
 8001754:	f000 fef0 	bl	8002538 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8001758:	2048      	movs	r0, #72	; 0x48
 800175a:	f000 ff09 	bl	8002570 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 5, 0);
 800175e:	2200      	movs	r2, #0
 8001760:	2105      	movs	r1, #5
 8001762:	2049      	movs	r0, #73	; 0x49
 8001764:	f000 fee8 	bl	8002538 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8001768:	2049      	movs	r0, #73	; 0x49
 800176a:	f000 ff01 	bl	8002570 <HAL_NVIC_EnableIRQ>
}
 800176e:	bf00      	nop
 8001770:	3730      	adds	r7, #48	; 0x30
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40005400 	.word	0x40005400
 800177c:	40023800 	.word	0x40023800
 8001780:	40020400 	.word	0x40020400
 8001784:	40005c00 	.word	0x40005c00
 8001788:	40020800 	.word	0x40020800
 800178c:	40020000 	.word	0x40020000

08001790 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001794:	f000 fdb2 	bl	80022fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001798:	f000 f810 	bl	80017bc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800179c:	f7ff fe40 	bl	8001420 <MX_GPIO_Init>
  MX_I2C1_Init();
 80017a0:	f7ff feea 	bl	8001578 <MX_I2C1_Init>
  MX_I2C3_Init();
 80017a4:	f7ff ff16 	bl	80015d4 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 80017a8:	f000 fc9c 	bl	80020e4 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80017ac:	f000 fcc4 	bl	8002138 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80017b0:	f7ff f868 	bl	8000884 <_Z16MX_FREERTOS_Initv>
  /* Start scheduler */
  osKernelStart();
 80017b4:	f005 ff30 	bl	8007618 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80017b8:	e7fe      	b.n	80017b8 <main+0x28>
	...

080017bc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b094      	sub	sp, #80	; 0x50
 80017c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017c2:	f107 0320 	add.w	r3, r7, #32
 80017c6:	2230      	movs	r2, #48	; 0x30
 80017c8:	2100      	movs	r1, #0
 80017ca:	4618      	mov	r0, r3
 80017cc:	f007 f9da 	bl	8008b84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017d0:	f107 030c 	add.w	r3, r7, #12
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	609a      	str	r2, [r3, #8]
 80017dc:	60da      	str	r2, [r3, #12]
 80017de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017e0:	2300      	movs	r3, #0
 80017e2:	60bb      	str	r3, [r7, #8]
 80017e4:	4b2d      	ldr	r3, [pc, #180]	; (800189c <_Z18SystemClock_Configv+0xe0>)
 80017e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e8:	4a2c      	ldr	r2, [pc, #176]	; (800189c <_Z18SystemClock_Configv+0xe0>)
 80017ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ee:	6413      	str	r3, [r2, #64]	; 0x40
 80017f0:	4b2a      	ldr	r3, [pc, #168]	; (800189c <_Z18SystemClock_Configv+0xe0>)
 80017f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f8:	60bb      	str	r3, [r7, #8]
 80017fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017fc:	2300      	movs	r3, #0
 80017fe:	607b      	str	r3, [r7, #4]
 8001800:	4b27      	ldr	r3, [pc, #156]	; (80018a0 <_Z18SystemClock_Configv+0xe4>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a26      	ldr	r2, [pc, #152]	; (80018a0 <_Z18SystemClock_Configv+0xe4>)
 8001806:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800180a:	6013      	str	r3, [r2, #0]
 800180c:	4b24      	ldr	r3, [pc, #144]	; (80018a0 <_Z18SystemClock_Configv+0xe4>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001814:	607b      	str	r3, [r7, #4]
 8001816:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001818:	2301      	movs	r3, #1
 800181a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800181c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001820:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001822:	2302      	movs	r3, #2
 8001824:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001826:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800182a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800182c:	2304      	movs	r3, #4
 800182e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001830:	23a8      	movs	r3, #168	; 0xa8
 8001832:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001834:	2302      	movs	r3, #2
 8001836:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001838:	2304      	movs	r3, #4
 800183a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800183c:	f107 0320 	add.w	r3, r7, #32
 8001840:	4618      	mov	r0, r3
 8001842:	f003 ff13 	bl	800566c <HAL_RCC_OscConfig>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	bf14      	ite	ne
 800184c:	2301      	movne	r3, #1
 800184e:	2300      	moveq	r3, #0
 8001850:	b2db      	uxtb	r3, r3
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8001856:	f000 f84f 	bl	80018f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800185a:	230f      	movs	r3, #15
 800185c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800185e:	2302      	movs	r3, #2
 8001860:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001862:	2300      	movs	r3, #0
 8001864:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001866:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800186a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800186c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001870:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001872:	f107 030c 	add.w	r3, r7, #12
 8001876:	2105      	movs	r1, #5
 8001878:	4618      	mov	r0, r3
 800187a:	f004 f96f 	bl	8005b5c <HAL_RCC_ClockConfig>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	bf14      	ite	ne
 8001884:	2301      	movne	r3, #1
 8001886:	2300      	moveq	r3, #0
 8001888:	b2db      	uxtb	r3, r3
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 800188e:	f000 f833 	bl	80018f8 <Error_Handler>
  }
}
 8001892:	bf00      	nop
 8001894:	3750      	adds	r7, #80	; 0x50
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40023800 	.word	0x40023800
 80018a0:	40007000 	.word	0x40007000

080018a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	  if (htim->Instance == TIM7) {
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a0d      	ldr	r2, [pc, #52]	; (80018e8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d10d      	bne.n	80018d2 <HAL_TIM_PeriodElapsedCallback+0x2e>
	    if (status_uartTIM) {
 80018b6:	4b0d      	ldr	r3, [pc, #52]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0x48>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d004      	beq.n	80018c8 <HAL_TIM_PeriodElapsedCallback+0x24>
	    	uartTIM++;
 80018be:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	3301      	adds	r3, #1
 80018c4:	4a0a      	ldr	r2, [pc, #40]	; (80018f0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80018c6:	6013      	str	r3, [r2, #0]
		}
	    counterRefresh ++;
 80018c8:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	3301      	adds	r3, #1
 80018ce:	4a09      	ldr	r2, [pc, #36]	; (80018f4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80018d0:	6013      	str	r3, [r2, #0]

	  }

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a04      	ldr	r2, [pc, #16]	; (80018e8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d101      	bne.n	80018e0 <HAL_TIM_PeriodElapsedCallback+0x3c>
    HAL_IncTick();
 80018dc:	f000 fd30 	bl	8002340 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80018e0:	bf00      	nop
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40001400 	.word	0x40001400
 80018ec:	20000594 	.word	0x20000594
 80018f0:	20000590 	.word	0x20000590
 80018f4:	20000598 	.word	0x20000598

080018f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018fc:	b672      	cpsid	i
}
 80018fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001900:	e7fe      	b.n	8001900 <Error_Handler+0x8>

08001902 <ssd1306_Reset>:
#include <string.h>  // For memcpy


#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001902:	b480      	push	{r7}
 8001904:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001906:	bf00      	nop
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af04      	add	r7, sp, #16
 8001916:	4603      	mov	r3, r0
 8001918:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800191a:	f04f 33ff 	mov.w	r3, #4294967295
 800191e:	9302      	str	r3, [sp, #8]
 8001920:	2301      	movs	r3, #1
 8001922:	9301      	str	r3, [sp, #4]
 8001924:	1dfb      	adds	r3, r7, #7
 8001926:	9300      	str	r3, [sp, #0]
 8001928:	2301      	movs	r3, #1
 800192a:	2200      	movs	r2, #0
 800192c:	2178      	movs	r1, #120	; 0x78
 800192e:	4803      	ldr	r0, [pc, #12]	; (800193c <ssd1306_WriteCommand+0x2c>)
 8001930:	f001 fd0e 	bl	8003350 <HAL_I2C_Mem_Write>
}
 8001934:	bf00      	nop
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20004704 	.word	0x20004704

08001940 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af04      	add	r7, sp, #16
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	b29b      	uxth	r3, r3
 800194e:	f04f 32ff 	mov.w	r2, #4294967295
 8001952:	9202      	str	r2, [sp, #8]
 8001954:	9301      	str	r3, [sp, #4]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	2301      	movs	r3, #1
 800195c:	2240      	movs	r2, #64	; 0x40
 800195e:	2178      	movs	r1, #120	; 0x78
 8001960:	4803      	ldr	r0, [pc, #12]	; (8001970 <ssd1306_WriteData+0x30>)
 8001962:	f001 fcf5 	bl	8003350 <HAL_I2C_Mem_Write>
}
 8001966:	bf00      	nop
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	20004704 	.word	0x20004704

08001974 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001978:	f7ff ffc3 	bl	8001902 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800197c:	2064      	movs	r0, #100	; 0x64
 800197e:	f000 fcff 	bl	8002380 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001982:	2000      	movs	r0, #0
 8001984:	f000 fa62 	bl	8001e4c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001988:	2020      	movs	r0, #32
 800198a:	f7ff ffc1 	bl	8001910 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800198e:	2000      	movs	r0, #0
 8001990:	f7ff ffbe 	bl	8001910 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001994:	20b0      	movs	r0, #176	; 0xb0
 8001996:	f7ff ffbb 	bl	8001910 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800199a:	20c8      	movs	r0, #200	; 0xc8
 800199c:	f7ff ffb8 	bl	8001910 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80019a0:	2000      	movs	r0, #0
 80019a2:	f7ff ffb5 	bl	8001910 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80019a6:	2010      	movs	r0, #16
 80019a8:	f7ff ffb2 	bl	8001910 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80019ac:	2040      	movs	r0, #64	; 0x40
 80019ae:	f7ff ffaf 	bl	8001910 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80019b2:	20ff      	movs	r0, #255	; 0xff
 80019b4:	f000 fa37 	bl	8001e26 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80019b8:	20a1      	movs	r0, #161	; 0xa1
 80019ba:	f7ff ffa9 	bl	8001910 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80019be:	20a6      	movs	r0, #166	; 0xa6
 80019c0:	f7ff ffa6 	bl	8001910 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80019c4:	20a8      	movs	r0, #168	; 0xa8
 80019c6:	f7ff ffa3 	bl	8001910 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80019ca:	203f      	movs	r0, #63	; 0x3f
 80019cc:	f7ff ffa0 	bl	8001910 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80019d0:	20a4      	movs	r0, #164	; 0xa4
 80019d2:	f7ff ff9d 	bl	8001910 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80019d6:	20d3      	movs	r0, #211	; 0xd3
 80019d8:	f7ff ff9a 	bl	8001910 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80019dc:	2000      	movs	r0, #0
 80019de:	f7ff ff97 	bl	8001910 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80019e2:	20d5      	movs	r0, #213	; 0xd5
 80019e4:	f7ff ff94 	bl	8001910 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80019e8:	20f0      	movs	r0, #240	; 0xf0
 80019ea:	f7ff ff91 	bl	8001910 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80019ee:	20d9      	movs	r0, #217	; 0xd9
 80019f0:	f7ff ff8e 	bl	8001910 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80019f4:	2022      	movs	r0, #34	; 0x22
 80019f6:	f7ff ff8b 	bl	8001910 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80019fa:	20da      	movs	r0, #218	; 0xda
 80019fc:	f7ff ff88 	bl	8001910 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001a00:	2012      	movs	r0, #18
 8001a02:	f7ff ff85 	bl	8001910 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001a06:	20db      	movs	r0, #219	; 0xdb
 8001a08:	f7ff ff82 	bl	8001910 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001a0c:	2020      	movs	r0, #32
 8001a0e:	f7ff ff7f 	bl	8001910 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001a12:	208d      	movs	r0, #141	; 0x8d
 8001a14:	f7ff ff7c 	bl	8001910 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001a18:	2014      	movs	r0, #20
 8001a1a:	f7ff ff79 	bl	8001910 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001a1e:	2001      	movs	r0, #1
 8001a20:	f000 fa14 	bl	8001e4c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001a24:	2000      	movs	r0, #0
 8001a26:	f000 f80f 	bl	8001a48 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001a2a:	f000 f831 	bl	8001a90 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001a2e:	4b05      	ldr	r3, [pc, #20]	; (8001a44 <ssd1306_Init+0xd0>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001a34:	4b03      	ldr	r3, [pc, #12]	; (8001a44 <ssd1306_Init+0xd0>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001a3a:	4b02      	ldr	r3, [pc, #8]	; (8001a44 <ssd1306_Init+0xd0>)
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	711a      	strb	r2, [r3, #4]
}
 8001a40:	bf00      	nop
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	2000099c 	.word	0x2000099c

08001a48 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    taskENTER_CRITICAL();
 8001a52:	f006 fd77 	bl	8008544 <vPortEnterCritical>
    {
		for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001a56:	2300      	movs	r3, #0
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	e00d      	b.n	8001a78 <ssd1306_Fill+0x30>
			SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001a5c:	79fb      	ldrb	r3, [r7, #7]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <ssd1306_Fill+0x1e>
 8001a62:	2100      	movs	r1, #0
 8001a64:	e000      	b.n	8001a68 <ssd1306_Fill+0x20>
 8001a66:	21ff      	movs	r1, #255	; 0xff
 8001a68:	4a08      	ldr	r2, [pc, #32]	; (8001a8c <ssd1306_Fill+0x44>)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	460a      	mov	r2, r1
 8001a70:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	3301      	adds	r3, #1
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a7e:	d3ed      	bcc.n	8001a5c <ssd1306_Fill+0x14>
		}
    }
    taskEXIT_CRITICAL();
 8001a80:	f006 fd90 	bl	80085a4 <vPortExitCritical>

}
 8001a84:	bf00      	nop
 8001a86:	3710      	adds	r7, #16
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	2000059c 	.word	0x2000059c

08001a90 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
	//osMutexWait(mutex_OLEDHandle, 0);
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001a96:	2300      	movs	r3, #0
 8001a98:	71fb      	strb	r3, [r7, #7]
 8001a9a:	e016      	b.n	8001aca <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001a9c:	79fb      	ldrb	r3, [r7, #7]
 8001a9e:	3b50      	subs	r3, #80	; 0x50
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff ff34 	bl	8001910 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8001aa8:	2000      	movs	r0, #0
 8001aaa:	f7ff ff31 	bl	8001910 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8001aae:	2010      	movs	r0, #16
 8001ab0:	f7ff ff2e 	bl	8001910 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001ab4:	79fb      	ldrb	r3, [r7, #7]
 8001ab6:	01db      	lsls	r3, r3, #7
 8001ab8:	4a08      	ldr	r2, [pc, #32]	; (8001adc <ssd1306_UpdateScreen+0x4c>)
 8001aba:	4413      	add	r3, r2
 8001abc:	2180      	movs	r1, #128	; 0x80
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff ff3e 	bl	8001940 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001ac4:	79fb      	ldrb	r3, [r7, #7]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	71fb      	strb	r3, [r7, #7]
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	2b07      	cmp	r3, #7
 8001ace:	d9e5      	bls.n	8001a9c <ssd1306_UpdateScreen+0xc>
    }
    //osMutexRelease(mutex_OLEDHandle);
}
 8001ad0:	bf00      	nop
 8001ad2:	bf00      	nop
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	2000059c 	.word	0x2000059c

08001ae0 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	71fb      	strb	r3, [r7, #7]
 8001aea:	460b      	mov	r3, r1
 8001aec:	71bb      	strb	r3, [r7, #6]
 8001aee:	4613      	mov	r3, r2
 8001af0:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	db41      	blt.n	8001b7e <ssd1306_DrawPixel+0x9e>
 8001afa:	79bb      	ldrb	r3, [r7, #6]
 8001afc:	2b3f      	cmp	r3, #63	; 0x3f
 8001afe:	d83e      	bhi.n	8001b7e <ssd1306_DrawPixel+0x9e>
        // Don't write outside the buffer
        return;
    }
   
    taskENTER_CRITICAL();
 8001b00:	f006 fd20 	bl	8008544 <vPortEnterCritical>
    {
	   // Draw in the right color
		if(color == White) {
 8001b04:	797b      	ldrb	r3, [r7, #5]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d11a      	bne.n	8001b40 <ssd1306_DrawPixel+0x60>
			SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001b0a:	79fa      	ldrb	r2, [r7, #7]
 8001b0c:	79bb      	ldrb	r3, [r7, #6]
 8001b0e:	08db      	lsrs	r3, r3, #3
 8001b10:	b2d8      	uxtb	r0, r3
 8001b12:	4603      	mov	r3, r0
 8001b14:	01db      	lsls	r3, r3, #7
 8001b16:	4413      	add	r3, r2
 8001b18:	4a1b      	ldr	r2, [pc, #108]	; (8001b88 <ssd1306_DrawPixel+0xa8>)
 8001b1a:	5cd3      	ldrb	r3, [r2, r3]
 8001b1c:	b25a      	sxtb	r2, r3
 8001b1e:	79bb      	ldrb	r3, [r7, #6]
 8001b20:	f003 0307 	and.w	r3, r3, #7
 8001b24:	2101      	movs	r1, #1
 8001b26:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2a:	b25b      	sxtb	r3, r3
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	b259      	sxtb	r1, r3
 8001b30:	79fa      	ldrb	r2, [r7, #7]
 8001b32:	4603      	mov	r3, r0
 8001b34:	01db      	lsls	r3, r3, #7
 8001b36:	4413      	add	r3, r2
 8001b38:	b2c9      	uxtb	r1, r1
 8001b3a:	4a13      	ldr	r2, [pc, #76]	; (8001b88 <ssd1306_DrawPixel+0xa8>)
 8001b3c:	54d1      	strb	r1, [r2, r3]
 8001b3e:	e01b      	b.n	8001b78 <ssd1306_DrawPixel+0x98>
		} else {
			SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001b40:	79fa      	ldrb	r2, [r7, #7]
 8001b42:	79bb      	ldrb	r3, [r7, #6]
 8001b44:	08db      	lsrs	r3, r3, #3
 8001b46:	b2d8      	uxtb	r0, r3
 8001b48:	4603      	mov	r3, r0
 8001b4a:	01db      	lsls	r3, r3, #7
 8001b4c:	4413      	add	r3, r2
 8001b4e:	4a0e      	ldr	r2, [pc, #56]	; (8001b88 <ssd1306_DrawPixel+0xa8>)
 8001b50:	5cd3      	ldrb	r3, [r2, r3]
 8001b52:	b25a      	sxtb	r2, r3
 8001b54:	79bb      	ldrb	r3, [r7, #6]
 8001b56:	f003 0307 	and.w	r3, r3, #7
 8001b5a:	2101      	movs	r1, #1
 8001b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b60:	b25b      	sxtb	r3, r3
 8001b62:	43db      	mvns	r3, r3
 8001b64:	b25b      	sxtb	r3, r3
 8001b66:	4013      	ands	r3, r2
 8001b68:	b259      	sxtb	r1, r3
 8001b6a:	79fa      	ldrb	r2, [r7, #7]
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	01db      	lsls	r3, r3, #7
 8001b70:	4413      	add	r3, r2
 8001b72:	b2c9      	uxtb	r1, r1
 8001b74:	4a04      	ldr	r2, [pc, #16]	; (8001b88 <ssd1306_DrawPixel+0xa8>)
 8001b76:	54d1      	strb	r1, [r2, r3]
		}
    }
    taskEXIT_CRITICAL();
 8001b78:	f006 fd14 	bl	80085a4 <vPortExitCritical>
 8001b7c:	e000      	b.n	8001b80 <ssd1306_DrawPixel+0xa0>
        return;
 8001b7e:	bf00      	nop

}
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	2000059c 	.word	0x2000059c

08001b8c <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001b8c:	b590      	push	{r4, r7, lr}
 8001b8e:	b089      	sub	sp, #36	; 0x24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4604      	mov	r4, r0
 8001b94:	1d38      	adds	r0, r7, #4
 8001b96:	e880 0006 	stmia.w	r0, {r1, r2}
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	4623      	mov	r3, r4
 8001b9e:	73fb      	strb	r3, [r7, #15]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001ba4:	7bfb      	ldrb	r3, [r7, #15]
 8001ba6:	2b1f      	cmp	r3, #31
 8001ba8:	d902      	bls.n	8001bb0 <ssd1306_WriteChar+0x24>
 8001baa:	7bfb      	ldrb	r3, [r7, #15]
 8001bac:	2b7e      	cmp	r3, #126	; 0x7e
 8001bae:	d901      	bls.n	8001bb4 <ssd1306_WriteChar+0x28>
        return 0;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	e06d      	b.n	8001c90 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001bb4:	4b38      	ldr	r3, [pc, #224]	; (8001c98 <ssd1306_WriteChar+0x10c>)
 8001bb6:	881b      	ldrh	r3, [r3, #0]
 8001bb8:	461a      	mov	r2, r3
 8001bba:	793b      	ldrb	r3, [r7, #4]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	2b80      	cmp	r3, #128	; 0x80
 8001bc0:	dc06      	bgt.n	8001bd0 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001bc2:	4b35      	ldr	r3, [pc, #212]	; (8001c98 <ssd1306_WriteChar+0x10c>)
 8001bc4:	885b      	ldrh	r3, [r3, #2]
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	797b      	ldrb	r3, [r7, #5]
 8001bca:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001bcc:	2b40      	cmp	r3, #64	; 0x40
 8001bce:	dd01      	ble.n	8001bd4 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	e05d      	b.n	8001c90 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	61fb      	str	r3, [r7, #28]
 8001bd8:	e04c      	b.n	8001c74 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001bda:	68ba      	ldr	r2, [r7, #8]
 8001bdc:	7bfb      	ldrb	r3, [r7, #15]
 8001bde:	3b20      	subs	r3, #32
 8001be0:	7979      	ldrb	r1, [r7, #5]
 8001be2:	fb01 f303 	mul.w	r3, r1, r3
 8001be6:	4619      	mov	r1, r3
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	440b      	add	r3, r1
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	4413      	add	r3, r2
 8001bf0:	881b      	ldrh	r3, [r3, #0]
 8001bf2:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	61bb      	str	r3, [r7, #24]
 8001bf8:	e034      	b.n	8001c64 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001bfa:	697a      	ldr	r2, [r7, #20]
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d012      	beq.n	8001c30 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001c0a:	4b23      	ldr	r3, [pc, #140]	; (8001c98 <ssd1306_WriteChar+0x10c>)
 8001c0c:	881b      	ldrh	r3, [r3, #0]
 8001c0e:	b2da      	uxtb	r2, r3
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	4413      	add	r3, r2
 8001c16:	b2d8      	uxtb	r0, r3
 8001c18:	4b1f      	ldr	r3, [pc, #124]	; (8001c98 <ssd1306_WriteChar+0x10c>)
 8001c1a:	885b      	ldrh	r3, [r3, #2]
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	4413      	add	r3, r2
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	7bba      	ldrb	r2, [r7, #14]
 8001c28:	4619      	mov	r1, r3
 8001c2a:	f7ff ff59 	bl	8001ae0 <ssd1306_DrawPixel>
 8001c2e:	e016      	b.n	8001c5e <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001c30:	4b19      	ldr	r3, [pc, #100]	; (8001c98 <ssd1306_WriteChar+0x10c>)
 8001c32:	881b      	ldrh	r3, [r3, #0]
 8001c34:	b2da      	uxtb	r2, r3
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	4413      	add	r3, r2
 8001c3c:	b2d8      	uxtb	r0, r3
 8001c3e:	4b16      	ldr	r3, [pc, #88]	; (8001c98 <ssd1306_WriteChar+0x10c>)
 8001c40:	885b      	ldrh	r3, [r3, #2]
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	4413      	add	r3, r2
 8001c4a:	b2d9      	uxtb	r1, r3
 8001c4c:	7bbb      	ldrb	r3, [r7, #14]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	bf0c      	ite	eq
 8001c52:	2301      	moveq	r3, #1
 8001c54:	2300      	movne	r3, #0
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	461a      	mov	r2, r3
 8001c5a:	f7ff ff41 	bl	8001ae0 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	3301      	adds	r3, #1
 8001c62:	61bb      	str	r3, [r7, #24]
 8001c64:	793b      	ldrb	r3, [r7, #4]
 8001c66:	461a      	mov	r2, r3
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d3c5      	bcc.n	8001bfa <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	3301      	adds	r3, #1
 8001c72:	61fb      	str	r3, [r7, #28]
 8001c74:	797b      	ldrb	r3, [r7, #5]
 8001c76:	461a      	mov	r2, r3
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d3ad      	bcc.n	8001bda <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001c7e:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <ssd1306_WriteChar+0x10c>)
 8001c80:	881a      	ldrh	r2, [r3, #0]
 8001c82:	793b      	ldrb	r3, [r7, #4]
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	4413      	add	r3, r2
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	4b03      	ldr	r3, [pc, #12]	; (8001c98 <ssd1306_WriteChar+0x10c>)
 8001c8c:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3724      	adds	r7, #36	; 0x24
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd90      	pop	{r4, r7, pc}
 8001c98:	2000099c 	.word	0x2000099c

08001c9c <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	1d38      	adds	r0, r7, #4
 8001ca6:	e880 0006 	stmia.w	r0, {r1, r2}
 8001caa:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8001cac:	e012      	b.n	8001cd4 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	7818      	ldrb	r0, [r3, #0]
 8001cb2:	78fb      	ldrb	r3, [r7, #3]
 8001cb4:	1d3a      	adds	r2, r7, #4
 8001cb6:	ca06      	ldmia	r2, {r1, r2}
 8001cb8:	f7ff ff68 	bl	8001b8c <ssd1306_WriteChar>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d002      	beq.n	8001cce <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	e008      	b.n	8001ce0 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d1e8      	bne.n	8001cae <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	781b      	ldrb	r3, [r3, #0]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3710      	adds	r7, #16
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	460a      	mov	r2, r1
 8001cf2:	71fb      	strb	r3, [r7, #7]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001cf8:	79fb      	ldrb	r3, [r7, #7]
 8001cfa:	b29a      	uxth	r2, r3
 8001cfc:	4b05      	ldr	r3, [pc, #20]	; (8001d14 <ssd1306_SetCursor+0x2c>)
 8001cfe:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001d00:	79bb      	ldrb	r3, [r7, #6]
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	4b03      	ldr	r3, [pc, #12]	; (8001d14 <ssd1306_SetCursor+0x2c>)
 8001d06:	805a      	strh	r2, [r3, #2]
}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	2000099c 	.word	0x2000099c

08001d18 <ssd1306_DrawCircle>:
    }
    
    return;
}
//Draw circle by Bresenhem's algorithm
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 8001d18:	b590      	push	{r4, r7, lr}
 8001d1a:	b087      	sub	sp, #28
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	4604      	mov	r4, r0
 8001d20:	4608      	mov	r0, r1
 8001d22:	4611      	mov	r1, r2
 8001d24:	461a      	mov	r2, r3
 8001d26:	4623      	mov	r3, r4
 8001d28:	71fb      	strb	r3, [r7, #7]
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	71bb      	strb	r3, [r7, #6]
 8001d2e:	460b      	mov	r3, r1
 8001d30:	717b      	strb	r3, [r7, #5]
 8001d32:	4613      	mov	r3, r2
 8001d34:	713b      	strb	r3, [r7, #4]
  int32_t x = -par_r;
 8001d36:	797b      	ldrb	r3, [r7, #5]
 8001d38:	425b      	negs	r3, r3
 8001d3a:	617b      	str	r3, [r7, #20]
  int32_t y = 0;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	613b      	str	r3, [r7, #16]
  int32_t err = 2 - 2 * par_r;
 8001d40:	797b      	ldrb	r3, [r7, #5]
 8001d42:	f1c3 0301 	rsb	r3, r3, #1
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	60fb      	str	r3, [r7, #12]
  int32_t e2;

  if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 8001d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	db65      	blt.n	8001e1e <ssd1306_DrawCircle+0x106>
 8001d52:	79bb      	ldrb	r3, [r7, #6]
 8001d54:	2b3f      	cmp	r3, #63	; 0x3f
 8001d56:	d862      	bhi.n	8001e1e <ssd1306_DrawCircle+0x106>
    return;
  }

    do {
      ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	79fa      	ldrb	r2, [r7, #7]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	b2d8      	uxtb	r0, r3
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	b2da      	uxtb	r2, r3
 8001d66:	79bb      	ldrb	r3, [r7, #6]
 8001d68:	4413      	add	r3, r2
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	793a      	ldrb	r2, [r7, #4]
 8001d6e:	4619      	mov	r1, r3
 8001d70:	f7ff feb6 	bl	8001ae0 <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	b2da      	uxtb	r2, r3
 8001d78:	79fb      	ldrb	r3, [r7, #7]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	b2d8      	uxtb	r0, r3
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	b2da      	uxtb	r2, r3
 8001d82:	79bb      	ldrb	r3, [r7, #6]
 8001d84:	4413      	add	r3, r2
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	793a      	ldrb	r2, [r7, #4]
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	f7ff fea8 	bl	8001ae0 <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	b2da      	uxtb	r2, r3
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	4413      	add	r3, r2
 8001d98:	b2d8      	uxtb	r0, r3
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	79ba      	ldrb	r2, [r7, #6]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	793a      	ldrb	r2, [r7, #4]
 8001da6:	4619      	mov	r1, r3
 8001da8:	f7ff fe9a 	bl	8001ae0 <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	79fa      	ldrb	r2, [r7, #7]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	b2d8      	uxtb	r0, r3
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	79ba      	ldrb	r2, [r7, #6]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	793a      	ldrb	r2, [r7, #4]
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	f7ff fe8c 	bl	8001ae0 <ssd1306_DrawPixel>
        e2 = err;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	60bb      	str	r3, [r7, #8]
        if (e2 <= y) {
 8001dcc:	68ba      	ldr	r2, [r7, #8]
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	dc13      	bgt.n	8001dfc <ssd1306_DrawCircle+0xe4>
            y++;
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	3301      	adds	r3, #1
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	4413      	add	r3, r2
 8001de4:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	425b      	negs	r3, r3
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d105      	bne.n	8001dfc <ssd1306_DrawCircle+0xe4>
 8001df0:	68ba      	ldr	r2, [r7, #8]
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	dc01      	bgt.n	8001dfc <ssd1306_DrawCircle+0xe4>
              e2 = 0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          /*nothing to do*/
        }
        if(e2 > x) {
 8001dfc:	68ba      	ldr	r2, [r7, #8]
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	dd08      	ble.n	8001e16 <ssd1306_DrawCircle+0xfe>
          x++;
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	3301      	adds	r3, #1
 8001e08:	617b      	str	r3, [r7, #20]
          err = err + (x * 2 + 1);
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	3301      	adds	r3, #1
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	4413      	add	r3, r2
 8001e14:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          /*nothing to do*/
        }
    } while(x <= 0);
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	dd9d      	ble.n	8001d58 <ssd1306_DrawCircle+0x40>

    return;
 8001e1c:	e000      	b.n	8001e20 <ssd1306_DrawCircle+0x108>
    return;
 8001e1e:	bf00      	nop
}
 8001e20:	371c      	adds	r7, #28
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd90      	pop	{r4, r7, pc}

08001e26 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b084      	sub	sp, #16
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001e30:	2381      	movs	r3, #129	; 0x81
 8001e32:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001e34:	7bfb      	ldrb	r3, [r7, #15]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7ff fd6a 	bl	8001910 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001e3c:	79fb      	ldrb	r3, [r7, #7]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff fd66 	bl	8001910 <ssd1306_WriteCommand>
}
 8001e44:	bf00      	nop
 8001e46:	3710      	adds	r7, #16
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001e56:	79fb      	ldrb	r3, [r7, #7]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d005      	beq.n	8001e68 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001e5c:	23af      	movs	r3, #175	; 0xaf
 8001e5e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001e60:	4b08      	ldr	r3, [pc, #32]	; (8001e84 <ssd1306_SetDisplayOn+0x38>)
 8001e62:	2201      	movs	r2, #1
 8001e64:	715a      	strb	r2, [r3, #5]
 8001e66:	e004      	b.n	8001e72 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001e68:	23ae      	movs	r3, #174	; 0xae
 8001e6a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001e6c:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <ssd1306_SetDisplayOn+0x38>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001e72:	7bfb      	ldrb	r3, [r7, #15]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff fd4b 	bl	8001910 <ssd1306_WriteCommand>
}
 8001e7a:	bf00      	nop
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	2000099c 	.word	0x2000099c

08001e88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	607b      	str	r3, [r7, #4]
 8001e92:	4b12      	ldr	r3, [pc, #72]	; (8001edc <HAL_MspInit+0x54>)
 8001e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e96:	4a11      	ldr	r2, [pc, #68]	; (8001edc <HAL_MspInit+0x54>)
 8001e98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e9e:	4b0f      	ldr	r3, [pc, #60]	; (8001edc <HAL_MspInit+0x54>)
 8001ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ea6:	607b      	str	r3, [r7, #4]
 8001ea8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	603b      	str	r3, [r7, #0]
 8001eae:	4b0b      	ldr	r3, [pc, #44]	; (8001edc <HAL_MspInit+0x54>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	4a0a      	ldr	r2, [pc, #40]	; (8001edc <HAL_MspInit+0x54>)
 8001eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eba:	4b08      	ldr	r3, [pc, #32]	; (8001edc <HAL_MspInit+0x54>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec2:	603b      	str	r3, [r7, #0]
 8001ec4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	210f      	movs	r1, #15
 8001eca:	f06f 0001 	mvn.w	r0, #1
 8001ece:	f000 fb33 	bl	8002538 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40023800 	.word	0x40023800

08001ee0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b08c      	sub	sp, #48	; 0x30
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001eec:	2300      	movs	r3, #0
 8001eee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	6879      	ldr	r1, [r7, #4]
 8001ef4:	2037      	movs	r0, #55	; 0x37
 8001ef6:	f000 fb1f 	bl	8002538 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001efa:	2037      	movs	r0, #55	; 0x37
 8001efc:	f000 fb38 	bl	8002570 <HAL_NVIC_EnableIRQ>

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001f00:	2300      	movs	r3, #0
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	4b1f      	ldr	r3, [pc, #124]	; (8001f84 <HAL_InitTick+0xa4>)
 8001f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f08:	4a1e      	ldr	r2, [pc, #120]	; (8001f84 <HAL_InitTick+0xa4>)
 8001f0a:	f043 0320 	orr.w	r3, r3, #32
 8001f0e:	6413      	str	r3, [r2, #64]	; 0x40
 8001f10:	4b1c      	ldr	r3, [pc, #112]	; (8001f84 <HAL_InitTick+0xa4>)
 8001f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f14:	f003 0320 	and.w	r3, r3, #32
 8001f18:	60fb      	str	r3, [r7, #12]
 8001f1a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f1c:	f107 0210 	add.w	r2, r7, #16
 8001f20:	f107 0314 	add.w	r3, r7, #20
 8001f24:	4611      	mov	r1, r2
 8001f26:	4618      	mov	r0, r3
 8001f28:	f004 f814 	bl	8005f54 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001f2c:	f003 ffea 	bl	8005f04 <HAL_RCC_GetPCLK1Freq>
 8001f30:	4603      	mov	r3, r0
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f38:	4a13      	ldr	r2, [pc, #76]	; (8001f88 <HAL_InitTick+0xa8>)
 8001f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f3e:	0c9b      	lsrs	r3, r3, #18
 8001f40:	3b01      	subs	r3, #1
 8001f42:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001f44:	4b11      	ldr	r3, [pc, #68]	; (8001f8c <HAL_InitTick+0xac>)
 8001f46:	4a12      	ldr	r2, [pc, #72]	; (8001f90 <HAL_InitTick+0xb0>)
 8001f48:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001f4a:	4b10      	ldr	r3, [pc, #64]	; (8001f8c <HAL_InitTick+0xac>)
 8001f4c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f50:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001f52:	4a0e      	ldr	r2, [pc, #56]	; (8001f8c <HAL_InitTick+0xac>)
 8001f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f56:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001f58:	4b0c      	ldr	r3, [pc, #48]	; (8001f8c <HAL_InitTick+0xac>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f5e:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <HAL_InitTick+0xac>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8001f64:	4809      	ldr	r0, [pc, #36]	; (8001f8c <HAL_InitTick+0xac>)
 8001f66:	f004 f827 	bl	8005fb8 <HAL_TIM_Base_Init>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d104      	bne.n	8001f7a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8001f70:	4806      	ldr	r0, [pc, #24]	; (8001f8c <HAL_InitTick+0xac>)
 8001f72:	f004 f87b 	bl	800606c <HAL_TIM_Base_Start_IT>
 8001f76:	4603      	mov	r3, r0
 8001f78:	e000      	b.n	8001f7c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3730      	adds	r7, #48	; 0x30
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	40023800 	.word	0x40023800
 8001f88:	431bde83 	.word	0x431bde83
 8001f8c:	200047ac 	.word	0x200047ac
 8001f90:	40001400 	.word	0x40001400

08001f94 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001f98:	f3bf 8f4f 	dsb	sy
}
 8001f9c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001f9e:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <__NVIC_SystemReset+0x24>)
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001fa6:	4904      	ldr	r1, [pc, #16]	; (8001fb8 <__NVIC_SystemReset+0x24>)
 8001fa8:	4b04      	ldr	r3, [pc, #16]	; (8001fbc <__NVIC_SystemReset+0x28>)
 8001faa:	4313      	orrs	r3, r2
 8001fac:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001fae:	f3bf 8f4f 	dsb	sy
}
 8001fb2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001fb4:	bf00      	nop
 8001fb6:	e7fd      	b.n	8001fb4 <__NVIC_SystemReset+0x20>
 8001fb8:	e000ed00 	.word	0xe000ed00
 8001fbc:	05fa0004 	.word	0x05fa0004

08001fc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fc4:	e7fe      	b.n	8001fc4 <NMI_Handler+0x4>

08001fc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  NVIC_SystemReset();
 8001fca:	f7ff ffe3 	bl	8001f94 <__NVIC_SystemReset>

08001fce <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fd2:	e7fe      	b.n	8001fd2 <MemManage_Handler+0x4>

08001fd4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fd8:	e7fe      	b.n	8001fd8 <BusFault_Handler+0x4>

08001fda <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fde:	e7fe      	b.n	8001fde <UsageFault_Handler+0x4>

08001fe0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fe4:	bf00      	nop
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
	...

08001ff0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ff4:	4802      	ldr	r0, [pc, #8]	; (8002000 <USART1_IRQHandler+0x10>)
 8001ff6:	f004 fc3f 	bl	8006878 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	200047f4 	.word	0x200047f4

08002004 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002008:	4802      	ldr	r0, [pc, #8]	; (8002014 <TIM7_IRQHandler+0x10>)
 800200a:	f004 f89f 	bl	800614c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	200047ac 	.word	0x200047ac

08002018 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800201c:	4802      	ldr	r0, [pc, #8]	; (8002028 <USART6_IRQHandler+0x10>)
 800201e:	f004 fc2b 	bl	8006878 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	20004838 	.word	0x20004838

0800202c <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8002030:	4802      	ldr	r0, [pc, #8]	; (800203c <I2C3_EV_IRQHandler+0x10>)
 8002032:	f001 fa87 	bl	8003544 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8002036:	bf00      	nop
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	20004704 	.word	0x20004704

08002040 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8002044:	4802      	ldr	r0, [pc, #8]	; (8002050 <I2C3_ER_IRQHandler+0x10>)
 8002046:	f001 fbee 	bl	8003826 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 800204a:	bf00      	nop
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20004704 	.word	0x20004704

08002054 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800205c:	4a14      	ldr	r2, [pc, #80]	; (80020b0 <_sbrk+0x5c>)
 800205e:	4b15      	ldr	r3, [pc, #84]	; (80020b4 <_sbrk+0x60>)
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002068:	4b13      	ldr	r3, [pc, #76]	; (80020b8 <_sbrk+0x64>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d102      	bne.n	8002076 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002070:	4b11      	ldr	r3, [pc, #68]	; (80020b8 <_sbrk+0x64>)
 8002072:	4a12      	ldr	r2, [pc, #72]	; (80020bc <_sbrk+0x68>)
 8002074:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002076:	4b10      	ldr	r3, [pc, #64]	; (80020b8 <_sbrk+0x64>)
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4413      	add	r3, r2
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	429a      	cmp	r2, r3
 8002082:	d207      	bcs.n	8002094 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002084:	f006 fd2a 	bl	8008adc <__errno>
 8002088:	4603      	mov	r3, r0
 800208a:	220c      	movs	r2, #12
 800208c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800208e:	f04f 33ff 	mov.w	r3, #4294967295
 8002092:	e009      	b.n	80020a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002094:	4b08      	ldr	r3, [pc, #32]	; (80020b8 <_sbrk+0x64>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800209a:	4b07      	ldr	r3, [pc, #28]	; (80020b8 <_sbrk+0x64>)
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4413      	add	r3, r2
 80020a2:	4a05      	ldr	r2, [pc, #20]	; (80020b8 <_sbrk+0x64>)
 80020a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020a6:	68fb      	ldr	r3, [r7, #12]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3718      	adds	r7, #24
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	20020000 	.word	0x20020000
 80020b4:	00004000 	.word	0x00004000
 80020b8:	200009a4 	.word	0x200009a4
 80020bc:	20004890 	.word	0x20004890

080020c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020c4:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <SystemInit+0x20>)
 80020c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ca:	4a05      	ldr	r2, [pc, #20]	; (80020e0 <SystemInit+0x20>)
 80020cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020d4:	bf00      	nop
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	e000ed00 	.word	0xe000ed00

080020e4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80020e8:	4b11      	ldr	r3, [pc, #68]	; (8002130 <MX_USART1_UART_Init+0x4c>)
 80020ea:	4a12      	ldr	r2, [pc, #72]	; (8002134 <MX_USART1_UART_Init+0x50>)
 80020ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80020ee:	4b10      	ldr	r3, [pc, #64]	; (8002130 <MX_USART1_UART_Init+0x4c>)
 80020f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020f6:	4b0e      	ldr	r3, [pc, #56]	; (8002130 <MX_USART1_UART_Init+0x4c>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80020fc:	4b0c      	ldr	r3, [pc, #48]	; (8002130 <MX_USART1_UART_Init+0x4c>)
 80020fe:	2200      	movs	r2, #0
 8002100:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002102:	4b0b      	ldr	r3, [pc, #44]	; (8002130 <MX_USART1_UART_Init+0x4c>)
 8002104:	2200      	movs	r2, #0
 8002106:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002108:	4b09      	ldr	r3, [pc, #36]	; (8002130 <MX_USART1_UART_Init+0x4c>)
 800210a:	220c      	movs	r2, #12
 800210c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800210e:	4b08      	ldr	r3, [pc, #32]	; (8002130 <MX_USART1_UART_Init+0x4c>)
 8002110:	2200      	movs	r2, #0
 8002112:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002114:	4b06      	ldr	r3, [pc, #24]	; (8002130 <MX_USART1_UART_Init+0x4c>)
 8002116:	2200      	movs	r2, #0
 8002118:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800211a:	4805      	ldr	r0, [pc, #20]	; (8002130 <MX_USART1_UART_Init+0x4c>)
 800211c:	f004 f9fa 	bl	8006514 <HAL_UART_Init>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002126:	f7ff fbe7 	bl	80018f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800212a:	bf00      	nop
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	200047f4 	.word	0x200047f4
 8002134:	40011000 	.word	0x40011000

08002138 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800213c:	4b11      	ldr	r3, [pc, #68]	; (8002184 <MX_USART6_UART_Init+0x4c>)
 800213e:	4a12      	ldr	r2, [pc, #72]	; (8002188 <MX_USART6_UART_Init+0x50>)
 8002140:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002142:	4b10      	ldr	r3, [pc, #64]	; (8002184 <MX_USART6_UART_Init+0x4c>)
 8002144:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002148:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800214a:	4b0e      	ldr	r3, [pc, #56]	; (8002184 <MX_USART6_UART_Init+0x4c>)
 800214c:	2200      	movs	r2, #0
 800214e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002150:	4b0c      	ldr	r3, [pc, #48]	; (8002184 <MX_USART6_UART_Init+0x4c>)
 8002152:	2200      	movs	r2, #0
 8002154:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002156:	4b0b      	ldr	r3, [pc, #44]	; (8002184 <MX_USART6_UART_Init+0x4c>)
 8002158:	2200      	movs	r2, #0
 800215a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800215c:	4b09      	ldr	r3, [pc, #36]	; (8002184 <MX_USART6_UART_Init+0x4c>)
 800215e:	220c      	movs	r2, #12
 8002160:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002162:	4b08      	ldr	r3, [pc, #32]	; (8002184 <MX_USART6_UART_Init+0x4c>)
 8002164:	2200      	movs	r2, #0
 8002166:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002168:	4b06      	ldr	r3, [pc, #24]	; (8002184 <MX_USART6_UART_Init+0x4c>)
 800216a:	2200      	movs	r2, #0
 800216c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800216e:	4805      	ldr	r0, [pc, #20]	; (8002184 <MX_USART6_UART_Init+0x4c>)
 8002170:	f004 f9d0 	bl	8006514 <HAL_UART_Init>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800217a:	f7ff fbbd 	bl	80018f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800217e:	bf00      	nop
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	20004838 	.word	0x20004838
 8002188:	40011400 	.word	0x40011400

0800218c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b08c      	sub	sp, #48	; 0x30
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002194:	f107 031c 	add.w	r3, r7, #28
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	605a      	str	r2, [r3, #4]
 800219e:	609a      	str	r2, [r3, #8]
 80021a0:	60da      	str	r2, [r3, #12]
 80021a2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a3a      	ldr	r2, [pc, #232]	; (8002294 <HAL_UART_MspInit+0x108>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d135      	bne.n	800221a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	61bb      	str	r3, [r7, #24]
 80021b2:	4b39      	ldr	r3, [pc, #228]	; (8002298 <HAL_UART_MspInit+0x10c>)
 80021b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b6:	4a38      	ldr	r2, [pc, #224]	; (8002298 <HAL_UART_MspInit+0x10c>)
 80021b8:	f043 0310 	orr.w	r3, r3, #16
 80021bc:	6453      	str	r3, [r2, #68]	; 0x44
 80021be:	4b36      	ldr	r3, [pc, #216]	; (8002298 <HAL_UART_MspInit+0x10c>)
 80021c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c2:	f003 0310 	and.w	r3, r3, #16
 80021c6:	61bb      	str	r3, [r7, #24]
 80021c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	617b      	str	r3, [r7, #20]
 80021ce:	4b32      	ldr	r3, [pc, #200]	; (8002298 <HAL_UART_MspInit+0x10c>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	4a31      	ldr	r2, [pc, #196]	; (8002298 <HAL_UART_MspInit+0x10c>)
 80021d4:	f043 0301 	orr.w	r3, r3, #1
 80021d8:	6313      	str	r3, [r2, #48]	; 0x30
 80021da:	4b2f      	ldr	r3, [pc, #188]	; (8002298 <HAL_UART_MspInit+0x10c>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	617b      	str	r3, [r7, #20]
 80021e4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80021e6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80021ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ec:	2302      	movs	r3, #2
 80021ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f0:	2300      	movs	r3, #0
 80021f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f4:	2303      	movs	r3, #3
 80021f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021f8:	2307      	movs	r3, #7
 80021fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021fc:	f107 031c 	add.w	r3, r7, #28
 8002200:	4619      	mov	r1, r3
 8002202:	4826      	ldr	r0, [pc, #152]	; (800229c <HAL_UART_MspInit+0x110>)
 8002204:	f000 fa6e 	bl	80026e4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002208:	2200      	movs	r2, #0
 800220a:	2105      	movs	r1, #5
 800220c:	2025      	movs	r0, #37	; 0x25
 800220e:	f000 f993 	bl	8002538 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002212:	2025      	movs	r0, #37	; 0x25
 8002214:	f000 f9ac 	bl	8002570 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002218:	e038      	b.n	800228c <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART6)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a20      	ldr	r2, [pc, #128]	; (80022a0 <HAL_UART_MspInit+0x114>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d133      	bne.n	800228c <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002224:	2300      	movs	r3, #0
 8002226:	613b      	str	r3, [r7, #16]
 8002228:	4b1b      	ldr	r3, [pc, #108]	; (8002298 <HAL_UART_MspInit+0x10c>)
 800222a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222c:	4a1a      	ldr	r2, [pc, #104]	; (8002298 <HAL_UART_MspInit+0x10c>)
 800222e:	f043 0320 	orr.w	r3, r3, #32
 8002232:	6453      	str	r3, [r2, #68]	; 0x44
 8002234:	4b18      	ldr	r3, [pc, #96]	; (8002298 <HAL_UART_MspInit+0x10c>)
 8002236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002238:	f003 0320 	and.w	r3, r3, #32
 800223c:	613b      	str	r3, [r7, #16]
 800223e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002240:	2300      	movs	r3, #0
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	4b14      	ldr	r3, [pc, #80]	; (8002298 <HAL_UART_MspInit+0x10c>)
 8002246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002248:	4a13      	ldr	r2, [pc, #76]	; (8002298 <HAL_UART_MspInit+0x10c>)
 800224a:	f043 0304 	orr.w	r3, r3, #4
 800224e:	6313      	str	r3, [r2, #48]	; 0x30
 8002250:	4b11      	ldr	r3, [pc, #68]	; (8002298 <HAL_UART_MspInit+0x10c>)
 8002252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002254:	f003 0304 	and.w	r3, r3, #4
 8002258:	60fb      	str	r3, [r7, #12]
 800225a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800225c:	23c0      	movs	r3, #192	; 0xc0
 800225e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002260:	2302      	movs	r3, #2
 8002262:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002264:	2300      	movs	r3, #0
 8002266:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002268:	2303      	movs	r3, #3
 800226a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800226c:	2308      	movs	r3, #8
 800226e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002270:	f107 031c 	add.w	r3, r7, #28
 8002274:	4619      	mov	r1, r3
 8002276:	480b      	ldr	r0, [pc, #44]	; (80022a4 <HAL_UART_MspInit+0x118>)
 8002278:	f000 fa34 	bl	80026e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 800227c:	2200      	movs	r2, #0
 800227e:	2105      	movs	r1, #5
 8002280:	2047      	movs	r0, #71	; 0x47
 8002282:	f000 f959 	bl	8002538 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002286:	2047      	movs	r0, #71	; 0x47
 8002288:	f000 f972 	bl	8002570 <HAL_NVIC_EnableIRQ>
}
 800228c:	bf00      	nop
 800228e:	3730      	adds	r7, #48	; 0x30
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40011000 	.word	0x40011000
 8002298:	40023800 	.word	0x40023800
 800229c:	40020000 	.word	0x40020000
 80022a0:	40011400 	.word	0x40011400
 80022a4:	40020800 	.word	0x40020800

080022a8 <Reset_Handler>:
 80022a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022e0 <LoopFillZerobss+0x12>
 80022ac:	480d      	ldr	r0, [pc, #52]	; (80022e4 <LoopFillZerobss+0x16>)
 80022ae:	490e      	ldr	r1, [pc, #56]	; (80022e8 <LoopFillZerobss+0x1a>)
 80022b0:	4a0e      	ldr	r2, [pc, #56]	; (80022ec <LoopFillZerobss+0x1e>)
 80022b2:	2300      	movs	r3, #0
 80022b4:	e002      	b.n	80022bc <LoopCopyDataInit>

080022b6 <CopyDataInit>:
 80022b6:	58d4      	ldr	r4, [r2, r3]
 80022b8:	50c4      	str	r4, [r0, r3]
 80022ba:	3304      	adds	r3, #4

080022bc <LoopCopyDataInit>:
 80022bc:	18c4      	adds	r4, r0, r3
 80022be:	428c      	cmp	r4, r1
 80022c0:	d3f9      	bcc.n	80022b6 <CopyDataInit>
 80022c2:	4a0b      	ldr	r2, [pc, #44]	; (80022f0 <LoopFillZerobss+0x22>)
 80022c4:	4c0b      	ldr	r4, [pc, #44]	; (80022f4 <LoopFillZerobss+0x26>)
 80022c6:	2300      	movs	r3, #0
 80022c8:	e001      	b.n	80022ce <LoopFillZerobss>

080022ca <FillZerobss>:
 80022ca:	6013      	str	r3, [r2, #0]
 80022cc:	3204      	adds	r2, #4

080022ce <LoopFillZerobss>:
 80022ce:	42a2      	cmp	r2, r4
 80022d0:	d3fb      	bcc.n	80022ca <FillZerobss>
 80022d2:	f7ff fef5 	bl	80020c0 <SystemInit>
 80022d6:	f006 fc07 	bl	8008ae8 <__libc_init_array>
 80022da:	f7ff fa59 	bl	8001790 <main>
 80022de:	4770      	bx	lr
 80022e0:	20020000 	.word	0x20020000
 80022e4:	20000000 	.word	0x20000000
 80022e8:	20000084 	.word	0x20000084
 80022ec:	0800ab6c 	.word	0x0800ab6c
 80022f0:	20000084 	.word	0x20000084
 80022f4:	20004890 	.word	0x20004890

080022f8 <ADC_IRQHandler>:
 80022f8:	e7fe      	b.n	80022f8 <ADC_IRQHandler>
	...

080022fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002300:	4b0e      	ldr	r3, [pc, #56]	; (800233c <HAL_Init+0x40>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a0d      	ldr	r2, [pc, #52]	; (800233c <HAL_Init+0x40>)
 8002306:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800230a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800230c:	4b0b      	ldr	r3, [pc, #44]	; (800233c <HAL_Init+0x40>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a0a      	ldr	r2, [pc, #40]	; (800233c <HAL_Init+0x40>)
 8002312:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002316:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002318:	4b08      	ldr	r3, [pc, #32]	; (800233c <HAL_Init+0x40>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a07      	ldr	r2, [pc, #28]	; (800233c <HAL_Init+0x40>)
 800231e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002322:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002324:	2003      	movs	r0, #3
 8002326:	f000 f8fc 	bl	8002522 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800232a:	200f      	movs	r0, #15
 800232c:	f7ff fdd8 	bl	8001ee0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002330:	f7ff fdaa 	bl	8001e88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40023c00 	.word	0x40023c00

08002340 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002344:	4b06      	ldr	r3, [pc, #24]	; (8002360 <HAL_IncTick+0x20>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	461a      	mov	r2, r3
 800234a:	4b06      	ldr	r3, [pc, #24]	; (8002364 <HAL_IncTick+0x24>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4413      	add	r3, r2
 8002350:	4a04      	ldr	r2, [pc, #16]	; (8002364 <HAL_IncTick+0x24>)
 8002352:	6013      	str	r3, [r2, #0]
}
 8002354:	bf00      	nop
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	20000018 	.word	0x20000018
 8002364:	2000487c 	.word	0x2000487c

08002368 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  return uwTick;
 800236c:	4b03      	ldr	r3, [pc, #12]	; (800237c <HAL_GetTick+0x14>)
 800236e:	681b      	ldr	r3, [r3, #0]
}
 8002370:	4618      	mov	r0, r3
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	2000487c 	.word	0x2000487c

08002380 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002388:	f7ff ffee 	bl	8002368 <HAL_GetTick>
 800238c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002398:	d005      	beq.n	80023a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800239a:	4b0a      	ldr	r3, [pc, #40]	; (80023c4 <HAL_Delay+0x44>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	461a      	mov	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	4413      	add	r3, r2
 80023a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023a6:	bf00      	nop
 80023a8:	f7ff ffde 	bl	8002368 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d8f7      	bhi.n	80023a8 <HAL_Delay+0x28>
  {
  }
}
 80023b8:	bf00      	nop
 80023ba:	bf00      	nop
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	20000018 	.word	0x20000018

080023c8 <__NVIC_SetPriorityGrouping>:
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f003 0307 	and.w	r3, r3, #7
 80023d6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023d8:	4b0c      	ldr	r3, [pc, #48]	; (800240c <__NVIC_SetPriorityGrouping+0x44>)
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023de:	68ba      	ldr	r2, [r7, #8]
 80023e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023e4:	4013      	ands	r3, r2
 80023e6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023fa:	4a04      	ldr	r2, [pc, #16]	; (800240c <__NVIC_SetPriorityGrouping+0x44>)
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	60d3      	str	r3, [r2, #12]
}
 8002400:	bf00      	nop
 8002402:	3714      	adds	r7, #20
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr
 800240c:	e000ed00 	.word	0xe000ed00

08002410 <__NVIC_GetPriorityGrouping>:
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002414:	4b04      	ldr	r3, [pc, #16]	; (8002428 <__NVIC_GetPriorityGrouping+0x18>)
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	0a1b      	lsrs	r3, r3, #8
 800241a:	f003 0307 	and.w	r3, r3, #7
}
 800241e:	4618      	mov	r0, r3
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	e000ed00 	.word	0xe000ed00

0800242c <__NVIC_EnableIRQ>:
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	4603      	mov	r3, r0
 8002434:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243a:	2b00      	cmp	r3, #0
 800243c:	db0b      	blt.n	8002456 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800243e:	79fb      	ldrb	r3, [r7, #7]
 8002440:	f003 021f 	and.w	r2, r3, #31
 8002444:	4907      	ldr	r1, [pc, #28]	; (8002464 <__NVIC_EnableIRQ+0x38>)
 8002446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244a:	095b      	lsrs	r3, r3, #5
 800244c:	2001      	movs	r0, #1
 800244e:	fa00 f202 	lsl.w	r2, r0, r2
 8002452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002456:	bf00      	nop
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	e000e100 	.word	0xe000e100

08002468 <__NVIC_SetPriority>:
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	4603      	mov	r3, r0
 8002470:	6039      	str	r1, [r7, #0]
 8002472:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002478:	2b00      	cmp	r3, #0
 800247a:	db0a      	blt.n	8002492 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	b2da      	uxtb	r2, r3
 8002480:	490c      	ldr	r1, [pc, #48]	; (80024b4 <__NVIC_SetPriority+0x4c>)
 8002482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002486:	0112      	lsls	r2, r2, #4
 8002488:	b2d2      	uxtb	r2, r2
 800248a:	440b      	add	r3, r1
 800248c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002490:	e00a      	b.n	80024a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	b2da      	uxtb	r2, r3
 8002496:	4908      	ldr	r1, [pc, #32]	; (80024b8 <__NVIC_SetPriority+0x50>)
 8002498:	79fb      	ldrb	r3, [r7, #7]
 800249a:	f003 030f 	and.w	r3, r3, #15
 800249e:	3b04      	subs	r3, #4
 80024a0:	0112      	lsls	r2, r2, #4
 80024a2:	b2d2      	uxtb	r2, r2
 80024a4:	440b      	add	r3, r1
 80024a6:	761a      	strb	r2, [r3, #24]
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr
 80024b4:	e000e100 	.word	0xe000e100
 80024b8:	e000ed00 	.word	0xe000ed00

080024bc <NVIC_EncodePriority>:
{
 80024bc:	b480      	push	{r7}
 80024be:	b089      	sub	sp, #36	; 0x24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	f1c3 0307 	rsb	r3, r3, #7
 80024d6:	2b04      	cmp	r3, #4
 80024d8:	bf28      	it	cs
 80024da:	2304      	movcs	r3, #4
 80024dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	3304      	adds	r3, #4
 80024e2:	2b06      	cmp	r3, #6
 80024e4:	d902      	bls.n	80024ec <NVIC_EncodePriority+0x30>
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	3b03      	subs	r3, #3
 80024ea:	e000      	b.n	80024ee <NVIC_EncodePriority+0x32>
 80024ec:	2300      	movs	r3, #0
 80024ee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024f0:	f04f 32ff 	mov.w	r2, #4294967295
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	fa02 f303 	lsl.w	r3, r2, r3
 80024fa:	43da      	mvns	r2, r3
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	401a      	ands	r2, r3
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002504:	f04f 31ff 	mov.w	r1, #4294967295
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	fa01 f303 	lsl.w	r3, r1, r3
 800250e:	43d9      	mvns	r1, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002514:	4313      	orrs	r3, r2
}
 8002516:	4618      	mov	r0, r3
 8002518:	3724      	adds	r7, #36	; 0x24
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr

08002522 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b082      	sub	sp, #8
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f7ff ff4c 	bl	80023c8 <__NVIC_SetPriorityGrouping>
}
 8002530:	bf00      	nop
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af00      	add	r7, sp, #0
 800253e:	4603      	mov	r3, r0
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
 8002544:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002546:	2300      	movs	r3, #0
 8002548:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800254a:	f7ff ff61 	bl	8002410 <__NVIC_GetPriorityGrouping>
 800254e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	68b9      	ldr	r1, [r7, #8]
 8002554:	6978      	ldr	r0, [r7, #20]
 8002556:	f7ff ffb1 	bl	80024bc <NVIC_EncodePriority>
 800255a:	4602      	mov	r2, r0
 800255c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002560:	4611      	mov	r1, r2
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff ff80 	bl	8002468 <__NVIC_SetPriority>
}
 8002568:	bf00      	nop
 800256a:	3718      	adds	r7, #24
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	4603      	mov	r3, r0
 8002578:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800257a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257e:	4618      	mov	r0, r3
 8002580:	f7ff ff54 	bl	800242c <__NVIC_EnableIRQ>
}
 8002584:	bf00      	nop
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002598:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800259a:	f7ff fee5 	bl	8002368 <HAL_GetTick>
 800259e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d008      	beq.n	80025be <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2280      	movs	r2, #128	; 0x80
 80025b0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e052      	b.n	8002664 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f022 0216 	bic.w	r2, r2, #22
 80025cc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	695a      	ldr	r2, [r3, #20]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025dc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d103      	bne.n	80025ee <HAL_DMA_Abort+0x62>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d007      	beq.n	80025fe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 0208 	bic.w	r2, r2, #8
 80025fc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 0201 	bic.w	r2, r2, #1
 800260c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800260e:	e013      	b.n	8002638 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002610:	f7ff feaa 	bl	8002368 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b05      	cmp	r3, #5
 800261c:	d90c      	bls.n	8002638 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2220      	movs	r2, #32
 8002622:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2203      	movs	r2, #3
 8002628:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e015      	b.n	8002664 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1e4      	bne.n	8002610 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800264a:	223f      	movs	r2, #63	; 0x3f
 800264c:	409a      	lsls	r2, r3
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2201      	movs	r2, #1
 8002656:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d004      	beq.n	800268a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2280      	movs	r2, #128	; 0x80
 8002684:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e00c      	b.n	80026a4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2205      	movs	r2, #5
 800268e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f022 0201 	bic.w	r2, r2, #1
 80026a0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026be:	b2db      	uxtb	r3, r3
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80026d8:	4618      	mov	r0, r3
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b089      	sub	sp, #36	; 0x24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026ee:	2300      	movs	r3, #0
 80026f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026f2:	2300      	movs	r3, #0
 80026f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026f6:	2300      	movs	r3, #0
 80026f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026fa:	2300      	movs	r3, #0
 80026fc:	61fb      	str	r3, [r7, #28]
 80026fe:	e16b      	b.n	80029d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002700:	2201      	movs	r2, #1
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	4013      	ands	r3, r2
 8002712:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	429a      	cmp	r2, r3
 800271a:	f040 815a 	bne.w	80029d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f003 0303 	and.w	r3, r3, #3
 8002726:	2b01      	cmp	r3, #1
 8002728:	d005      	beq.n	8002736 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002732:	2b02      	cmp	r3, #2
 8002734:	d130      	bne.n	8002798 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	2203      	movs	r2, #3
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	43db      	mvns	r3, r3
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	4013      	ands	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	68da      	ldr	r2, [r3, #12]
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	fa02 f303 	lsl.w	r3, r2, r3
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	4313      	orrs	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800276c:	2201      	movs	r2, #1
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	43db      	mvns	r3, r3
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	4013      	ands	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	091b      	lsrs	r3, r3, #4
 8002782:	f003 0201 	and.w	r2, r3, #1
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	4313      	orrs	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f003 0303 	and.w	r3, r3, #3
 80027a0:	2b03      	cmp	r3, #3
 80027a2:	d017      	beq.n	80027d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	2203      	movs	r2, #3
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	43db      	mvns	r3, r3
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4013      	ands	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	689a      	ldr	r2, [r3, #8]
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f003 0303 	and.w	r3, r3, #3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d123      	bne.n	8002828 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	08da      	lsrs	r2, r3, #3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	3208      	adds	r2, #8
 80027e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	f003 0307 	and.w	r3, r3, #7
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	220f      	movs	r2, #15
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	43db      	mvns	r3, r3
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	4013      	ands	r3, r2
 8002802:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	691a      	ldr	r2, [r3, #16]
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	4313      	orrs	r3, r2
 8002818:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	08da      	lsrs	r2, r3, #3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	3208      	adds	r2, #8
 8002822:	69b9      	ldr	r1, [r7, #24]
 8002824:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	2203      	movs	r2, #3
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	43db      	mvns	r3, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4013      	ands	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f003 0203 	and.w	r2, r3, #3
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4313      	orrs	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002864:	2b00      	cmp	r3, #0
 8002866:	f000 80b4 	beq.w	80029d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800286a:	2300      	movs	r3, #0
 800286c:	60fb      	str	r3, [r7, #12]
 800286e:	4b60      	ldr	r3, [pc, #384]	; (80029f0 <HAL_GPIO_Init+0x30c>)
 8002870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002872:	4a5f      	ldr	r2, [pc, #380]	; (80029f0 <HAL_GPIO_Init+0x30c>)
 8002874:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002878:	6453      	str	r3, [r2, #68]	; 0x44
 800287a:	4b5d      	ldr	r3, [pc, #372]	; (80029f0 <HAL_GPIO_Init+0x30c>)
 800287c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002886:	4a5b      	ldr	r2, [pc, #364]	; (80029f4 <HAL_GPIO_Init+0x310>)
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	089b      	lsrs	r3, r3, #2
 800288c:	3302      	adds	r3, #2
 800288e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002892:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	f003 0303 	and.w	r3, r3, #3
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	220f      	movs	r2, #15
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	43db      	mvns	r3, r3
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	4013      	ands	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a52      	ldr	r2, [pc, #328]	; (80029f8 <HAL_GPIO_Init+0x314>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d02b      	beq.n	800290a <HAL_GPIO_Init+0x226>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a51      	ldr	r2, [pc, #324]	; (80029fc <HAL_GPIO_Init+0x318>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d025      	beq.n	8002906 <HAL_GPIO_Init+0x222>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a50      	ldr	r2, [pc, #320]	; (8002a00 <HAL_GPIO_Init+0x31c>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d01f      	beq.n	8002902 <HAL_GPIO_Init+0x21e>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a4f      	ldr	r2, [pc, #316]	; (8002a04 <HAL_GPIO_Init+0x320>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d019      	beq.n	80028fe <HAL_GPIO_Init+0x21a>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a4e      	ldr	r2, [pc, #312]	; (8002a08 <HAL_GPIO_Init+0x324>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d013      	beq.n	80028fa <HAL_GPIO_Init+0x216>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a4d      	ldr	r2, [pc, #308]	; (8002a0c <HAL_GPIO_Init+0x328>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d00d      	beq.n	80028f6 <HAL_GPIO_Init+0x212>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a4c      	ldr	r2, [pc, #304]	; (8002a10 <HAL_GPIO_Init+0x32c>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d007      	beq.n	80028f2 <HAL_GPIO_Init+0x20e>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a4b      	ldr	r2, [pc, #300]	; (8002a14 <HAL_GPIO_Init+0x330>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d101      	bne.n	80028ee <HAL_GPIO_Init+0x20a>
 80028ea:	2307      	movs	r3, #7
 80028ec:	e00e      	b.n	800290c <HAL_GPIO_Init+0x228>
 80028ee:	2308      	movs	r3, #8
 80028f0:	e00c      	b.n	800290c <HAL_GPIO_Init+0x228>
 80028f2:	2306      	movs	r3, #6
 80028f4:	e00a      	b.n	800290c <HAL_GPIO_Init+0x228>
 80028f6:	2305      	movs	r3, #5
 80028f8:	e008      	b.n	800290c <HAL_GPIO_Init+0x228>
 80028fa:	2304      	movs	r3, #4
 80028fc:	e006      	b.n	800290c <HAL_GPIO_Init+0x228>
 80028fe:	2303      	movs	r3, #3
 8002900:	e004      	b.n	800290c <HAL_GPIO_Init+0x228>
 8002902:	2302      	movs	r3, #2
 8002904:	e002      	b.n	800290c <HAL_GPIO_Init+0x228>
 8002906:	2301      	movs	r3, #1
 8002908:	e000      	b.n	800290c <HAL_GPIO_Init+0x228>
 800290a:	2300      	movs	r3, #0
 800290c:	69fa      	ldr	r2, [r7, #28]
 800290e:	f002 0203 	and.w	r2, r2, #3
 8002912:	0092      	lsls	r2, r2, #2
 8002914:	4093      	lsls	r3, r2
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	4313      	orrs	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800291c:	4935      	ldr	r1, [pc, #212]	; (80029f4 <HAL_GPIO_Init+0x310>)
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	089b      	lsrs	r3, r3, #2
 8002922:	3302      	adds	r3, #2
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800292a:	4b3b      	ldr	r3, [pc, #236]	; (8002a18 <HAL_GPIO_Init+0x334>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	43db      	mvns	r3, r3
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	4013      	ands	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	4313      	orrs	r3, r2
 800294c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800294e:	4a32      	ldr	r2, [pc, #200]	; (8002a18 <HAL_GPIO_Init+0x334>)
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002954:	4b30      	ldr	r3, [pc, #192]	; (8002a18 <HAL_GPIO_Init+0x334>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	43db      	mvns	r3, r3
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	4013      	ands	r3, r2
 8002962:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d003      	beq.n	8002978 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	4313      	orrs	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002978:	4a27      	ldr	r2, [pc, #156]	; (8002a18 <HAL_GPIO_Init+0x334>)
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800297e:	4b26      	ldr	r3, [pc, #152]	; (8002a18 <HAL_GPIO_Init+0x334>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	43db      	mvns	r3, r3
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4013      	ands	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	4313      	orrs	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029a2:	4a1d      	ldr	r2, [pc, #116]	; (8002a18 <HAL_GPIO_Init+0x334>)
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029a8:	4b1b      	ldr	r3, [pc, #108]	; (8002a18 <HAL_GPIO_Init+0x334>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	43db      	mvns	r3, r3
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	4013      	ands	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d003      	beq.n	80029cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029cc:	4a12      	ldr	r2, [pc, #72]	; (8002a18 <HAL_GPIO_Init+0x334>)
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	3301      	adds	r3, #1
 80029d6:	61fb      	str	r3, [r7, #28]
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	2b0f      	cmp	r3, #15
 80029dc:	f67f ae90 	bls.w	8002700 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029e0:	bf00      	nop
 80029e2:	bf00      	nop
 80029e4:	3724      	adds	r7, #36	; 0x24
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	40023800 	.word	0x40023800
 80029f4:	40013800 	.word	0x40013800
 80029f8:	40020000 	.word	0x40020000
 80029fc:	40020400 	.word	0x40020400
 8002a00:	40020800 	.word	0x40020800
 8002a04:	40020c00 	.word	0x40020c00
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	40021400 	.word	0x40021400
 8002a10:	40021800 	.word	0x40021800
 8002a14:	40021c00 	.word	0x40021c00
 8002a18:	40013c00 	.word	0x40013c00

08002a1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	460b      	mov	r3, r1
 8002a26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	691a      	ldr	r2, [r3, #16]
 8002a2c:	887b      	ldrh	r3, [r7, #2]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d002      	beq.n	8002a3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a34:	2301      	movs	r3, #1
 8002a36:	73fb      	strb	r3, [r7, #15]
 8002a38:	e001      	b.n	8002a3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3714      	adds	r7, #20
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	460b      	mov	r3, r1
 8002a56:	807b      	strh	r3, [r7, #2]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a5c:	787b      	ldrb	r3, [r7, #1]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a62:	887a      	ldrh	r2, [r7, #2]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a68:	e003      	b.n	8002a72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a6a:	887b      	ldrh	r3, [r7, #2]
 8002a6c:	041a      	lsls	r2, r3, #16
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	619a      	str	r2, [r3, #24]
}
 8002a72:	bf00      	nop
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
	...

08002a80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e12b      	b.n	8002cea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d106      	bne.n	8002aac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f7fe fdc2 	bl	8001630 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2224      	movs	r2, #36	; 0x24
 8002ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 0201 	bic.w	r2, r2, #1
 8002ac2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ad2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ae2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ae4:	f003 fa0e 	bl	8005f04 <HAL_RCC_GetPCLK1Freq>
 8002ae8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	4a81      	ldr	r2, [pc, #516]	; (8002cf4 <HAL_I2C_Init+0x274>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d807      	bhi.n	8002b04 <HAL_I2C_Init+0x84>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	4a80      	ldr	r2, [pc, #512]	; (8002cf8 <HAL_I2C_Init+0x278>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	bf94      	ite	ls
 8002afc:	2301      	movls	r3, #1
 8002afe:	2300      	movhi	r3, #0
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	e006      	b.n	8002b12 <HAL_I2C_Init+0x92>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	4a7d      	ldr	r2, [pc, #500]	; (8002cfc <HAL_I2C_Init+0x27c>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	bf94      	ite	ls
 8002b0c:	2301      	movls	r3, #1
 8002b0e:	2300      	movhi	r3, #0
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e0e7      	b.n	8002cea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	4a78      	ldr	r2, [pc, #480]	; (8002d00 <HAL_I2C_Init+0x280>)
 8002b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b22:	0c9b      	lsrs	r3, r3, #18
 8002b24:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68ba      	ldr	r2, [r7, #8]
 8002b36:	430a      	orrs	r2, r1
 8002b38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
 8002b40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	4a6a      	ldr	r2, [pc, #424]	; (8002cf4 <HAL_I2C_Init+0x274>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d802      	bhi.n	8002b54 <HAL_I2C_Init+0xd4>
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	3301      	adds	r3, #1
 8002b52:	e009      	b.n	8002b68 <HAL_I2C_Init+0xe8>
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b5a:	fb02 f303 	mul.w	r3, r2, r3
 8002b5e:	4a69      	ldr	r2, [pc, #420]	; (8002d04 <HAL_I2C_Init+0x284>)
 8002b60:	fba2 2303 	umull	r2, r3, r2, r3
 8002b64:	099b      	lsrs	r3, r3, #6
 8002b66:	3301      	adds	r3, #1
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	6812      	ldr	r2, [r2, #0]
 8002b6c:	430b      	orrs	r3, r1
 8002b6e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b7a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	495c      	ldr	r1, [pc, #368]	; (8002cf4 <HAL_I2C_Init+0x274>)
 8002b84:	428b      	cmp	r3, r1
 8002b86:	d819      	bhi.n	8002bbc <HAL_I2C_Init+0x13c>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	1e59      	subs	r1, r3, #1
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b96:	1c59      	adds	r1, r3, #1
 8002b98:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002b9c:	400b      	ands	r3, r1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00a      	beq.n	8002bb8 <HAL_I2C_Init+0x138>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	1e59      	subs	r1, r3, #1
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bb6:	e051      	b.n	8002c5c <HAL_I2C_Init+0x1dc>
 8002bb8:	2304      	movs	r3, #4
 8002bba:	e04f      	b.n	8002c5c <HAL_I2C_Init+0x1dc>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d111      	bne.n	8002be8 <HAL_I2C_Init+0x168>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	1e58      	subs	r0, r3, #1
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6859      	ldr	r1, [r3, #4]
 8002bcc:	460b      	mov	r3, r1
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	440b      	add	r3, r1
 8002bd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	bf0c      	ite	eq
 8002be0:	2301      	moveq	r3, #1
 8002be2:	2300      	movne	r3, #0
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	e012      	b.n	8002c0e <HAL_I2C_Init+0x18e>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	1e58      	subs	r0, r3, #1
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6859      	ldr	r1, [r3, #4]
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	440b      	add	r3, r1
 8002bf6:	0099      	lsls	r1, r3, #2
 8002bf8:	440b      	add	r3, r1
 8002bfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bfe:	3301      	adds	r3, #1
 8002c00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	bf0c      	ite	eq
 8002c08:	2301      	moveq	r3, #1
 8002c0a:	2300      	movne	r3, #0
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <HAL_I2C_Init+0x196>
 8002c12:	2301      	movs	r3, #1
 8002c14:	e022      	b.n	8002c5c <HAL_I2C_Init+0x1dc>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d10e      	bne.n	8002c3c <HAL_I2C_Init+0x1bc>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	1e58      	subs	r0, r3, #1
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6859      	ldr	r1, [r3, #4]
 8002c26:	460b      	mov	r3, r1
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	440b      	add	r3, r1
 8002c2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c30:	3301      	adds	r3, #1
 8002c32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c3a:	e00f      	b.n	8002c5c <HAL_I2C_Init+0x1dc>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	1e58      	subs	r0, r3, #1
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6859      	ldr	r1, [r3, #4]
 8002c44:	460b      	mov	r3, r1
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	440b      	add	r3, r1
 8002c4a:	0099      	lsls	r1, r3, #2
 8002c4c:	440b      	add	r3, r1
 8002c4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c52:	3301      	adds	r3, #1
 8002c54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c5c:	6879      	ldr	r1, [r7, #4]
 8002c5e:	6809      	ldr	r1, [r1, #0]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	69da      	ldr	r2, [r3, #28]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a1b      	ldr	r3, [r3, #32]
 8002c76:	431a      	orrs	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002c8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	6911      	ldr	r1, [r2, #16]
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	68d2      	ldr	r2, [r2, #12]
 8002c96:	4311      	orrs	r1, r2
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	6812      	ldr	r2, [r2, #0]
 8002c9c:	430b      	orrs	r3, r1
 8002c9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	695a      	ldr	r2, [r3, #20]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f042 0201 	orr.w	r2, r2, #1
 8002cca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2220      	movs	r2, #32
 8002cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	000186a0 	.word	0x000186a0
 8002cf8:	001e847f 	.word	0x001e847f
 8002cfc:	003d08ff 	.word	0x003d08ff
 8002d00:	431bde83 	.word	0x431bde83
 8002d04:	10624dd3 	.word	0x10624dd3

08002d08 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b088      	sub	sp, #32
 8002d0c:	af02      	add	r7, sp, #8
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	607a      	str	r2, [r7, #4]
 8002d12:	461a      	mov	r2, r3
 8002d14:	460b      	mov	r3, r1
 8002d16:	817b      	strh	r3, [r7, #10]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d1c:	f7ff fb24 	bl	8002368 <HAL_GetTick>
 8002d20:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b20      	cmp	r3, #32
 8002d2c:	f040 80e0 	bne.w	8002ef0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	9300      	str	r3, [sp, #0]
 8002d34:	2319      	movs	r3, #25
 8002d36:	2201      	movs	r2, #1
 8002d38:	4970      	ldr	r1, [pc, #448]	; (8002efc <HAL_I2C_Master_Transmit+0x1f4>)
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f002 fa6c 	bl	8005218 <I2C_WaitOnFlagUntilTimeout>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002d46:	2302      	movs	r3, #2
 8002d48:	e0d3      	b.n	8002ef2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d101      	bne.n	8002d58 <HAL_I2C_Master_Transmit+0x50>
 8002d54:	2302      	movs	r3, #2
 8002d56:	e0cc      	b.n	8002ef2 <HAL_I2C_Master_Transmit+0x1ea>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d007      	beq.n	8002d7e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f042 0201 	orr.w	r2, r2, #1
 8002d7c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d8c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2221      	movs	r2, #33	; 0x21
 8002d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2210      	movs	r2, #16
 8002d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2200      	movs	r2, #0
 8002da2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	893a      	ldrh	r2, [r7, #8]
 8002dae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db4:	b29a      	uxth	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	4a50      	ldr	r2, [pc, #320]	; (8002f00 <HAL_I2C_Master_Transmit+0x1f8>)
 8002dbe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002dc0:	8979      	ldrh	r1, [r7, #10]
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	6a3a      	ldr	r2, [r7, #32]
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f001 ff98 	bl	8004cfc <I2C_MasterRequestWrite>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e08d      	b.n	8002ef2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	613b      	str	r3, [r7, #16]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	695b      	ldr	r3, [r3, #20]
 8002de0:	613b      	str	r3, [r7, #16]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	613b      	str	r3, [r7, #16]
 8002dea:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002dec:	e066      	b.n	8002ebc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dee:	697a      	ldr	r2, [r7, #20]
 8002df0:	6a39      	ldr	r1, [r7, #32]
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	f002 fae6 	bl	80053c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00d      	beq.n	8002e1a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	2b04      	cmp	r3, #4
 8002e04:	d107      	bne.n	8002e16 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e14:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e06b      	b.n	8002ef2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1e:	781a      	ldrb	r2, [r3, #0]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2a:	1c5a      	adds	r2, r3, #1
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	3b01      	subs	r3, #1
 8002e38:	b29a      	uxth	r2, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e42:	3b01      	subs	r3, #1
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	695b      	ldr	r3, [r3, #20]
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	2b04      	cmp	r3, #4
 8002e56:	d11b      	bne.n	8002e90 <HAL_I2C_Master_Transmit+0x188>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d017      	beq.n	8002e90 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e64:	781a      	ldrb	r2, [r3, #0]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e70:	1c5a      	adds	r2, r3, #1
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	6a39      	ldr	r1, [r7, #32]
 8002e94:	68f8      	ldr	r0, [r7, #12]
 8002e96:	f002 fad6 	bl	8005446 <I2C_WaitOnBTFFlagUntilTimeout>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00d      	beq.n	8002ebc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea4:	2b04      	cmp	r3, #4
 8002ea6:	d107      	bne.n	8002eb8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eb6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e01a      	b.n	8002ef2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d194      	bne.n	8002dee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ed2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002eec:	2300      	movs	r3, #0
 8002eee:	e000      	b.n	8002ef2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002ef0:	2302      	movs	r3, #2
  }
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3718      	adds	r7, #24
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	00100002 	.word	0x00100002
 8002f00:	ffff0000 	.word	0xffff0000

08002f04 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b08c      	sub	sp, #48	; 0x30
 8002f08:	af02      	add	r7, sp, #8
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	607a      	str	r2, [r7, #4]
 8002f0e:	461a      	mov	r2, r3
 8002f10:	460b      	mov	r3, r1
 8002f12:	817b      	strh	r3, [r7, #10]
 8002f14:	4613      	mov	r3, r2
 8002f16:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f18:	f7ff fa26 	bl	8002368 <HAL_GetTick>
 8002f1c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b20      	cmp	r3, #32
 8002f28:	f040 820b 	bne.w	8003342 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2e:	9300      	str	r3, [sp, #0]
 8002f30:	2319      	movs	r3, #25
 8002f32:	2201      	movs	r2, #1
 8002f34:	497c      	ldr	r1, [pc, #496]	; (8003128 <HAL_I2C_Master_Receive+0x224>)
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f002 f96e 	bl	8005218 <I2C_WaitOnFlagUntilTimeout>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002f42:	2302      	movs	r3, #2
 8002f44:	e1fe      	b.n	8003344 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d101      	bne.n	8002f54 <HAL_I2C_Master_Receive+0x50>
 8002f50:	2302      	movs	r3, #2
 8002f52:	e1f7      	b.n	8003344 <HAL_I2C_Master_Receive+0x440>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d007      	beq.n	8002f7a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f042 0201 	orr.w	r2, r2, #1
 8002f78:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f88:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2222      	movs	r2, #34	; 0x22
 8002f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2210      	movs	r2, #16
 8002f96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	893a      	ldrh	r2, [r7, #8]
 8002faa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb0:	b29a      	uxth	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	4a5c      	ldr	r2, [pc, #368]	; (800312c <HAL_I2C_Master_Receive+0x228>)
 8002fba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002fbc:	8979      	ldrh	r1, [r7, #10]
 8002fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f001 ff1c 	bl	8004e00 <I2C_MasterRequestRead>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e1b8      	b.n	8003344 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d113      	bne.n	8003002 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fda:	2300      	movs	r3, #0
 8002fdc:	623b      	str	r3, [r7, #32]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	695b      	ldr	r3, [r3, #20]
 8002fe4:	623b      	str	r3, [r7, #32]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	623b      	str	r3, [r7, #32]
 8002fee:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ffe:	601a      	str	r2, [r3, #0]
 8003000:	e18c      	b.n	800331c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003006:	2b01      	cmp	r3, #1
 8003008:	d11b      	bne.n	8003042 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003018:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800301a:	2300      	movs	r3, #0
 800301c:	61fb      	str	r3, [r7, #28]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	695b      	ldr	r3, [r3, #20]
 8003024:	61fb      	str	r3, [r7, #28]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	61fb      	str	r3, [r7, #28]
 800302e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800303e:	601a      	str	r2, [r3, #0]
 8003040:	e16c      	b.n	800331c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003046:	2b02      	cmp	r3, #2
 8003048:	d11b      	bne.n	8003082 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003058:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003068:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800306a:	2300      	movs	r3, #0
 800306c:	61bb      	str	r3, [r7, #24]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	695b      	ldr	r3, [r3, #20]
 8003074:	61bb      	str	r3, [r7, #24]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	61bb      	str	r3, [r7, #24]
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	e14c      	b.n	800331c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003090:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003092:	2300      	movs	r3, #0
 8003094:	617b      	str	r3, [r7, #20]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	695b      	ldr	r3, [r3, #20]
 800309c:	617b      	str	r3, [r7, #20]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	617b      	str	r3, [r7, #20]
 80030a6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80030a8:	e138      	b.n	800331c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ae:	2b03      	cmp	r3, #3
 80030b0:	f200 80f1 	bhi.w	8003296 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d123      	bne.n	8003104 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f002 fa33 	bl	800552c <I2C_WaitOnRXNEFlagUntilTimeout>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e139      	b.n	8003344 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	691a      	ldr	r2, [r3, #16]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030da:	b2d2      	uxtb	r2, r2
 80030dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e2:	1c5a      	adds	r2, r3, #1
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ec:	3b01      	subs	r3, #1
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	3b01      	subs	r3, #1
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003102:	e10b      	b.n	800331c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003108:	2b02      	cmp	r3, #2
 800310a:	d14e      	bne.n	80031aa <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800310c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310e:	9300      	str	r3, [sp, #0]
 8003110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003112:	2200      	movs	r2, #0
 8003114:	4906      	ldr	r1, [pc, #24]	; (8003130 <HAL_I2C_Master_Receive+0x22c>)
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f002 f87e 	bl	8005218 <I2C_WaitOnFlagUntilTimeout>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d008      	beq.n	8003134 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e10e      	b.n	8003344 <HAL_I2C_Master_Receive+0x440>
 8003126:	bf00      	nop
 8003128:	00100002 	.word	0x00100002
 800312c:	ffff0000 	.word	0xffff0000
 8003130:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003142:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	691a      	ldr	r2, [r3, #16]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314e:	b2d2      	uxtb	r2, r2
 8003150:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003156:	1c5a      	adds	r2, r3, #1
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003160:	3b01      	subs	r3, #1
 8003162:	b29a      	uxth	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800316c:	b29b      	uxth	r3, r3
 800316e:	3b01      	subs	r3, #1
 8003170:	b29a      	uxth	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	691a      	ldr	r2, [r3, #16]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	b2d2      	uxtb	r2, r2
 8003182:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003188:	1c5a      	adds	r2, r3, #1
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003192:	3b01      	subs	r3, #1
 8003194:	b29a      	uxth	r2, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800319e:	b29b      	uxth	r3, r3
 80031a0:	3b01      	subs	r3, #1
 80031a2:	b29a      	uxth	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80031a8:	e0b8      	b.n	800331c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ac:	9300      	str	r3, [sp, #0]
 80031ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b0:	2200      	movs	r2, #0
 80031b2:	4966      	ldr	r1, [pc, #408]	; (800334c <HAL_I2C_Master_Receive+0x448>)
 80031b4:	68f8      	ldr	r0, [r7, #12]
 80031b6:	f002 f82f 	bl	8005218 <I2C_WaitOnFlagUntilTimeout>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d001      	beq.n	80031c4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e0bf      	b.n	8003344 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	691a      	ldr	r2, [r3, #16]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031de:	b2d2      	uxtb	r2, r2
 80031e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e6:	1c5a      	adds	r2, r3, #1
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f0:	3b01      	subs	r3, #1
 80031f2:	b29a      	uxth	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	3b01      	subs	r3, #1
 8003200:	b29a      	uxth	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003208:	9300      	str	r3, [sp, #0]
 800320a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800320c:	2200      	movs	r2, #0
 800320e:	494f      	ldr	r1, [pc, #316]	; (800334c <HAL_I2C_Master_Receive+0x448>)
 8003210:	68f8      	ldr	r0, [r7, #12]
 8003212:	f002 f801 	bl	8005218 <I2C_WaitOnFlagUntilTimeout>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d001      	beq.n	8003220 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e091      	b.n	8003344 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800322e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	691a      	ldr	r2, [r3, #16]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323a:	b2d2      	uxtb	r2, r2
 800323c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003242:	1c5a      	adds	r2, r3, #1
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800324c:	3b01      	subs	r3, #1
 800324e:	b29a      	uxth	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003258:	b29b      	uxth	r3, r3
 800325a:	3b01      	subs	r3, #1
 800325c:	b29a      	uxth	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	691a      	ldr	r2, [r3, #16]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326c:	b2d2      	uxtb	r2, r2
 800326e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003274:	1c5a      	adds	r2, r3, #1
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800327e:	3b01      	subs	r3, #1
 8003280:	b29a      	uxth	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800328a:	b29b      	uxth	r3, r3
 800328c:	3b01      	subs	r3, #1
 800328e:	b29a      	uxth	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003294:	e042      	b.n	800331c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003298:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800329a:	68f8      	ldr	r0, [r7, #12]
 800329c:	f002 f946 	bl	800552c <I2C_WaitOnRXNEFlagUntilTimeout>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d001      	beq.n	80032aa <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e04c      	b.n	8003344 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	691a      	ldr	r2, [r3, #16]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b4:	b2d2      	uxtb	r2, r2
 80032b6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032bc:	1c5a      	adds	r2, r3, #1
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c6:	3b01      	subs	r3, #1
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	3b01      	subs	r3, #1
 80032d6:	b29a      	uxth	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	f003 0304 	and.w	r3, r3, #4
 80032e6:	2b04      	cmp	r3, #4
 80032e8:	d118      	bne.n	800331c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	691a      	ldr	r2, [r3, #16]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f4:	b2d2      	uxtb	r2, r2
 80032f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fc:	1c5a      	adds	r2, r3, #1
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003306:	3b01      	subs	r3, #1
 8003308:	b29a      	uxth	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003312:	b29b      	uxth	r3, r3
 8003314:	3b01      	subs	r3, #1
 8003316:	b29a      	uxth	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003320:	2b00      	cmp	r3, #0
 8003322:	f47f aec2 	bne.w	80030aa <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2220      	movs	r2, #32
 800332a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800333e:	2300      	movs	r3, #0
 8003340:	e000      	b.n	8003344 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003342:	2302      	movs	r3, #2
  }
}
 8003344:	4618      	mov	r0, r3
 8003346:	3728      	adds	r7, #40	; 0x28
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	00010004 	.word	0x00010004

08003350 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b088      	sub	sp, #32
 8003354:	af02      	add	r7, sp, #8
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	4608      	mov	r0, r1
 800335a:	4611      	mov	r1, r2
 800335c:	461a      	mov	r2, r3
 800335e:	4603      	mov	r3, r0
 8003360:	817b      	strh	r3, [r7, #10]
 8003362:	460b      	mov	r3, r1
 8003364:	813b      	strh	r3, [r7, #8]
 8003366:	4613      	mov	r3, r2
 8003368:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800336a:	f7fe fffd 	bl	8002368 <HAL_GetTick>
 800336e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2b20      	cmp	r3, #32
 800337a:	f040 80d9 	bne.w	8003530 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	9300      	str	r3, [sp, #0]
 8003382:	2319      	movs	r3, #25
 8003384:	2201      	movs	r2, #1
 8003386:	496d      	ldr	r1, [pc, #436]	; (800353c <HAL_I2C_Mem_Write+0x1ec>)
 8003388:	68f8      	ldr	r0, [r7, #12]
 800338a:	f001 ff45 	bl	8005218 <I2C_WaitOnFlagUntilTimeout>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d001      	beq.n	8003398 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003394:	2302      	movs	r3, #2
 8003396:	e0cc      	b.n	8003532 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d101      	bne.n	80033a6 <HAL_I2C_Mem_Write+0x56>
 80033a2:	2302      	movs	r3, #2
 80033a4:	e0c5      	b.n	8003532 <HAL_I2C_Mem_Write+0x1e2>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0301 	and.w	r3, r3, #1
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d007      	beq.n	80033cc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f042 0201 	orr.w	r2, r2, #1
 80033ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2221      	movs	r2, #33	; 0x21
 80033e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2240      	movs	r2, #64	; 0x40
 80033e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6a3a      	ldr	r2, [r7, #32]
 80033f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80033fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003402:	b29a      	uxth	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	4a4d      	ldr	r2, [pc, #308]	; (8003540 <HAL_I2C_Mem_Write+0x1f0>)
 800340c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800340e:	88f8      	ldrh	r0, [r7, #6]
 8003410:	893a      	ldrh	r2, [r7, #8]
 8003412:	8979      	ldrh	r1, [r7, #10]
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	9301      	str	r3, [sp, #4]
 8003418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800341a:	9300      	str	r3, [sp, #0]
 800341c:	4603      	mov	r3, r0
 800341e:	68f8      	ldr	r0, [r7, #12]
 8003420:	f001 fdbc 	bl	8004f9c <I2C_RequestMemoryWrite>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d052      	beq.n	80034d0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e081      	b.n	8003532 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800342e:	697a      	ldr	r2, [r7, #20]
 8003430:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003432:	68f8      	ldr	r0, [r7, #12]
 8003434:	f001 ffc6 	bl	80053c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00d      	beq.n	800345a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003442:	2b04      	cmp	r3, #4
 8003444:	d107      	bne.n	8003456 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003454:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e06b      	b.n	8003532 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345e:	781a      	ldrb	r2, [r3, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346a:	1c5a      	adds	r2, r3, #1
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003474:	3b01      	subs	r3, #1
 8003476:	b29a      	uxth	r2, r3
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003480:	b29b      	uxth	r3, r3
 8003482:	3b01      	subs	r3, #1
 8003484:	b29a      	uxth	r2, r3
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	695b      	ldr	r3, [r3, #20]
 8003490:	f003 0304 	and.w	r3, r3, #4
 8003494:	2b04      	cmp	r3, #4
 8003496:	d11b      	bne.n	80034d0 <HAL_I2C_Mem_Write+0x180>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800349c:	2b00      	cmp	r3, #0
 800349e:	d017      	beq.n	80034d0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a4:	781a      	ldrb	r2, [r3, #0]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b0:	1c5a      	adds	r2, r3, #1
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ba:	3b01      	subs	r3, #1
 80034bc:	b29a      	uxth	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	3b01      	subs	r3, #1
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1aa      	bne.n	800342e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034d8:	697a      	ldr	r2, [r7, #20]
 80034da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034dc:	68f8      	ldr	r0, [r7, #12]
 80034de:	f001 ffb2 	bl	8005446 <I2C_WaitOnBTFFlagUntilTimeout>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d00d      	beq.n	8003504 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ec:	2b04      	cmp	r3, #4
 80034ee:	d107      	bne.n	8003500 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034fe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e016      	b.n	8003532 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003512:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2220      	movs	r2, #32
 8003518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800352c:	2300      	movs	r3, #0
 800352e:	e000      	b.n	8003532 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003530:	2302      	movs	r3, #2
  }
}
 8003532:	4618      	mov	r0, r3
 8003534:	3718      	adds	r7, #24
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	00100002 	.word	0x00100002
 8003540:	ffff0000 	.word	0xffff0000

08003544 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b088      	sub	sp, #32
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800354c:	2300      	movs	r3, #0
 800354e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003564:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800356c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800356e:	7bfb      	ldrb	r3, [r7, #15]
 8003570:	2b10      	cmp	r3, #16
 8003572:	d003      	beq.n	800357c <HAL_I2C_EV_IRQHandler+0x38>
 8003574:	7bfb      	ldrb	r3, [r7, #15]
 8003576:	2b40      	cmp	r3, #64	; 0x40
 8003578:	f040 80c1 	bne.w	80036fe <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10d      	bne.n	80035b2 <HAL_I2C_EV_IRQHandler+0x6e>
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800359c:	d003      	beq.n	80035a6 <HAL_I2C_EV_IRQHandler+0x62>
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80035a4:	d101      	bne.n	80035aa <HAL_I2C_EV_IRQHandler+0x66>
 80035a6:	2301      	movs	r3, #1
 80035a8:	e000      	b.n	80035ac <HAL_I2C_EV_IRQHandler+0x68>
 80035aa:	2300      	movs	r3, #0
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	f000 8132 	beq.w	8003816 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	f003 0301 	and.w	r3, r3, #1
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00c      	beq.n	80035d6 <HAL_I2C_EV_IRQHandler+0x92>
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	0a5b      	lsrs	r3, r3, #9
 80035c0:	f003 0301 	and.w	r3, r3, #1
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d006      	beq.n	80035d6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f002 f834 	bl	8005636 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 fd79 	bl	80040c6 <I2C_Master_SB>
 80035d4:	e092      	b.n	80036fc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	08db      	lsrs	r3, r3, #3
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d009      	beq.n	80035f6 <HAL_I2C_EV_IRQHandler+0xb2>
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	0a5b      	lsrs	r3, r3, #9
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d003      	beq.n	80035f6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 fdef 	bl	80041d2 <I2C_Master_ADD10>
 80035f4:	e082      	b.n	80036fc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	085b      	lsrs	r3, r3, #1
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d009      	beq.n	8003616 <HAL_I2C_EV_IRQHandler+0xd2>
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	0a5b      	lsrs	r3, r3, #9
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b00      	cmp	r3, #0
 800360c:	d003      	beq.n	8003616 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 fe09 	bl	8004226 <I2C_Master_ADDR>
 8003614:	e072      	b.n	80036fc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	089b      	lsrs	r3, r3, #2
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	2b00      	cmp	r3, #0
 8003620:	d03b      	beq.n	800369a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800362c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003630:	f000 80f3 	beq.w	800381a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	09db      	lsrs	r3, r3, #7
 8003638:	f003 0301 	and.w	r3, r3, #1
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00f      	beq.n	8003660 <HAL_I2C_EV_IRQHandler+0x11c>
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	0a9b      	lsrs	r3, r3, #10
 8003644:	f003 0301 	and.w	r3, r3, #1
 8003648:	2b00      	cmp	r3, #0
 800364a:	d009      	beq.n	8003660 <HAL_I2C_EV_IRQHandler+0x11c>
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	089b      	lsrs	r3, r3, #2
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	2b00      	cmp	r3, #0
 8003656:	d103      	bne.n	8003660 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f000 f9f3 	bl	8003a44 <I2C_MasterTransmit_TXE>
 800365e:	e04d      	b.n	80036fc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	089b      	lsrs	r3, r3, #2
 8003664:	f003 0301 	and.w	r3, r3, #1
 8003668:	2b00      	cmp	r3, #0
 800366a:	f000 80d6 	beq.w	800381a <HAL_I2C_EV_IRQHandler+0x2d6>
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	0a5b      	lsrs	r3, r3, #9
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b00      	cmp	r3, #0
 8003678:	f000 80cf 	beq.w	800381a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800367c:	7bbb      	ldrb	r3, [r7, #14]
 800367e:	2b21      	cmp	r3, #33	; 0x21
 8003680:	d103      	bne.n	800368a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 fa7a 	bl	8003b7c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003688:	e0c7      	b.n	800381a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800368a:	7bfb      	ldrb	r3, [r7, #15]
 800368c:	2b40      	cmp	r3, #64	; 0x40
 800368e:	f040 80c4 	bne.w	800381a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 fae8 	bl	8003c68 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003698:	e0bf      	b.n	800381a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036a8:	f000 80b7 	beq.w	800381a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	099b      	lsrs	r3, r3, #6
 80036b0:	f003 0301 	and.w	r3, r3, #1
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00f      	beq.n	80036d8 <HAL_I2C_EV_IRQHandler+0x194>
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	0a9b      	lsrs	r3, r3, #10
 80036bc:	f003 0301 	and.w	r3, r3, #1
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d009      	beq.n	80036d8 <HAL_I2C_EV_IRQHandler+0x194>
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	089b      	lsrs	r3, r3, #2
 80036c8:	f003 0301 	and.w	r3, r3, #1
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d103      	bne.n	80036d8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 fb5d 	bl	8003d90 <I2C_MasterReceive_RXNE>
 80036d6:	e011      	b.n	80036fc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	089b      	lsrs	r3, r3, #2
 80036dc:	f003 0301 	and.w	r3, r3, #1
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f000 809a 	beq.w	800381a <HAL_I2C_EV_IRQHandler+0x2d6>
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	0a5b      	lsrs	r3, r3, #9
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f000 8093 	beq.w	800381a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 fbfc 	bl	8003ef2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036fa:	e08e      	b.n	800381a <HAL_I2C_EV_IRQHandler+0x2d6>
 80036fc:	e08d      	b.n	800381a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003702:	2b00      	cmp	r3, #0
 8003704:	d004      	beq.n	8003710 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	695b      	ldr	r3, [r3, #20]
 800370c:	61fb      	str	r3, [r7, #28]
 800370e:	e007      	b.n	8003720 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	085b      	lsrs	r3, r3, #1
 8003724:	f003 0301 	and.w	r3, r3, #1
 8003728:	2b00      	cmp	r3, #0
 800372a:	d012      	beq.n	8003752 <HAL_I2C_EV_IRQHandler+0x20e>
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	0a5b      	lsrs	r3, r3, #9
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00c      	beq.n	8003752 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373c:	2b00      	cmp	r3, #0
 800373e:	d003      	beq.n	8003748 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003748:	69b9      	ldr	r1, [r7, #24]
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 ffba 	bl	80046c4 <I2C_Slave_ADDR>
 8003750:	e066      	b.n	8003820 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	091b      	lsrs	r3, r3, #4
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b00      	cmp	r3, #0
 800375c:	d009      	beq.n	8003772 <HAL_I2C_EV_IRQHandler+0x22e>
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	0a5b      	lsrs	r3, r3, #9
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	2b00      	cmp	r3, #0
 8003768:	d003      	beq.n	8003772 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 fff4 	bl	8004758 <I2C_Slave_STOPF>
 8003770:	e056      	b.n	8003820 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003772:	7bbb      	ldrb	r3, [r7, #14]
 8003774:	2b21      	cmp	r3, #33	; 0x21
 8003776:	d002      	beq.n	800377e <HAL_I2C_EV_IRQHandler+0x23a>
 8003778:	7bbb      	ldrb	r3, [r7, #14]
 800377a:	2b29      	cmp	r3, #41	; 0x29
 800377c:	d125      	bne.n	80037ca <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	09db      	lsrs	r3, r3, #7
 8003782:	f003 0301 	and.w	r3, r3, #1
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00f      	beq.n	80037aa <HAL_I2C_EV_IRQHandler+0x266>
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	0a9b      	lsrs	r3, r3, #10
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	2b00      	cmp	r3, #0
 8003794:	d009      	beq.n	80037aa <HAL_I2C_EV_IRQHandler+0x266>
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	089b      	lsrs	r3, r3, #2
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d103      	bne.n	80037aa <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 fed0 	bl	8004548 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037a8:	e039      	b.n	800381e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	089b      	lsrs	r3, r3, #2
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d033      	beq.n	800381e <HAL_I2C_EV_IRQHandler+0x2da>
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	0a5b      	lsrs	r3, r3, #9
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d02d      	beq.n	800381e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 fefd 	bl	80045c2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037c8:	e029      	b.n	800381e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	099b      	lsrs	r3, r3, #6
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00f      	beq.n	80037f6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	0a9b      	lsrs	r3, r3, #10
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d009      	beq.n	80037f6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	089b      	lsrs	r3, r3, #2
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d103      	bne.n	80037f6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 ff08 	bl	8004604 <I2C_SlaveReceive_RXNE>
 80037f4:	e014      	b.n	8003820 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	089b      	lsrs	r3, r3, #2
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00e      	beq.n	8003820 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	0a5b      	lsrs	r3, r3, #9
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	2b00      	cmp	r3, #0
 800380c:	d008      	beq.n	8003820 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 ff36 	bl	8004680 <I2C_SlaveReceive_BTF>
 8003814:	e004      	b.n	8003820 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003816:	bf00      	nop
 8003818:	e002      	b.n	8003820 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800381a:	bf00      	nop
 800381c:	e000      	b.n	8003820 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800381e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003820:	3720      	adds	r7, #32
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}

08003826 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b08a      	sub	sp, #40	; 0x28
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	695b      	ldr	r3, [r3, #20]
 8003834:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800383e:	2300      	movs	r3, #0
 8003840:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003848:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800384a:	6a3b      	ldr	r3, [r7, #32]
 800384c:	0a1b      	lsrs	r3, r3, #8
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00e      	beq.n	8003874 <HAL_I2C_ER_IRQHandler+0x4e>
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	0a1b      	lsrs	r3, r3, #8
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	2b00      	cmp	r3, #0
 8003860:	d008      	beq.n	8003874 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003864:	f043 0301 	orr.w	r3, r3, #1
 8003868:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003872:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003874:	6a3b      	ldr	r3, [r7, #32]
 8003876:	0a5b      	lsrs	r3, r3, #9
 8003878:	f003 0301 	and.w	r3, r3, #1
 800387c:	2b00      	cmp	r3, #0
 800387e:	d00e      	beq.n	800389e <HAL_I2C_ER_IRQHandler+0x78>
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	0a1b      	lsrs	r3, r3, #8
 8003884:	f003 0301 	and.w	r3, r3, #1
 8003888:	2b00      	cmp	r3, #0
 800388a:	d008      	beq.n	800389e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800388c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388e:	f043 0302 	orr.w	r3, r3, #2
 8003892:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800389c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800389e:	6a3b      	ldr	r3, [r7, #32]
 80038a0:	0a9b      	lsrs	r3, r3, #10
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d03f      	beq.n	800392a <HAL_I2C_ER_IRQHandler+0x104>
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	0a1b      	lsrs	r3, r3, #8
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d039      	beq.n	800392a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80038b6:	7efb      	ldrb	r3, [r7, #27]
 80038b8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038be:	b29b      	uxth	r3, r3
 80038c0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038c8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ce:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80038d0:	7ebb      	ldrb	r3, [r7, #26]
 80038d2:	2b20      	cmp	r3, #32
 80038d4:	d112      	bne.n	80038fc <HAL_I2C_ER_IRQHandler+0xd6>
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d10f      	bne.n	80038fc <HAL_I2C_ER_IRQHandler+0xd6>
 80038dc:	7cfb      	ldrb	r3, [r7, #19]
 80038de:	2b21      	cmp	r3, #33	; 0x21
 80038e0:	d008      	beq.n	80038f4 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80038e2:	7cfb      	ldrb	r3, [r7, #19]
 80038e4:	2b29      	cmp	r3, #41	; 0x29
 80038e6:	d005      	beq.n	80038f4 <HAL_I2C_ER_IRQHandler+0xce>
 80038e8:	7cfb      	ldrb	r3, [r7, #19]
 80038ea:	2b28      	cmp	r3, #40	; 0x28
 80038ec:	d106      	bne.n	80038fc <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2b21      	cmp	r3, #33	; 0x21
 80038f2:	d103      	bne.n	80038fc <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f001 f85f 	bl	80049b8 <I2C_Slave_AF>
 80038fa:	e016      	b.n	800392a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003904:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003908:	f043 0304 	orr.w	r3, r3, #4
 800390c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800390e:	7efb      	ldrb	r3, [r7, #27]
 8003910:	2b10      	cmp	r3, #16
 8003912:	d002      	beq.n	800391a <HAL_I2C_ER_IRQHandler+0xf4>
 8003914:	7efb      	ldrb	r3, [r7, #27]
 8003916:	2b40      	cmp	r3, #64	; 0x40
 8003918:	d107      	bne.n	800392a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003928:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800392a:	6a3b      	ldr	r3, [r7, #32]
 800392c:	0adb      	lsrs	r3, r3, #11
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00e      	beq.n	8003954 <HAL_I2C_ER_IRQHandler+0x12e>
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	0a1b      	lsrs	r3, r3, #8
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	d008      	beq.n	8003954 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003944:	f043 0308 	orr.w	r3, r3, #8
 8003948:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003952:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003956:	2b00      	cmp	r3, #0
 8003958:	d008      	beq.n	800396c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800395e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003960:	431a      	orrs	r2, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f001 f896 	bl	8004a98 <I2C_ITError>
  }
}
 800396c:	bf00      	nop
 800396e:	3728      	adds	r7, #40	; 0x28
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800397c:	bf00      	nop
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003990:	bf00      	nop
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80039a4:	bf00      	nop
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80039b8:	bf00      	nop
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	460b      	mov	r3, r1
 80039ce:	70fb      	strb	r3, [r7, #3]
 80039d0:	4613      	mov	r3, r2
 80039d2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80039fc:	bf00      	nop
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003a10:	bf00      	nop
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003a24:	bf00      	nop
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a52:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a5a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a60:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d150      	bne.n	8003b0c <I2C_MasterTransmit_TXE+0xc8>
 8003a6a:	7bfb      	ldrb	r3, [r7, #15]
 8003a6c:	2b21      	cmp	r3, #33	; 0x21
 8003a6e:	d14d      	bne.n	8003b0c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	2b08      	cmp	r3, #8
 8003a74:	d01d      	beq.n	8003ab2 <I2C_MasterTransmit_TXE+0x6e>
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	2b20      	cmp	r3, #32
 8003a7a:	d01a      	beq.n	8003ab2 <I2C_MasterTransmit_TXE+0x6e>
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a82:	d016      	beq.n	8003ab2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	685a      	ldr	r2, [r3, #4]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a92:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2211      	movs	r2, #17
 8003a98:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2220      	movs	r2, #32
 8003aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f7ff ff62 	bl	8003974 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ab0:	e060      	b.n	8003b74 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	685a      	ldr	r2, [r3, #4]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ac0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ad0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2220      	movs	r2, #32
 8003adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	2b40      	cmp	r3, #64	; 0x40
 8003aea:	d107      	bne.n	8003afc <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f7ff ff7d 	bl	80039f4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003afa:	e03b      	b.n	8003b74 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f7ff ff35 	bl	8003974 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003b0a:	e033      	b.n	8003b74 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003b0c:	7bfb      	ldrb	r3, [r7, #15]
 8003b0e:	2b21      	cmp	r3, #33	; 0x21
 8003b10:	d005      	beq.n	8003b1e <I2C_MasterTransmit_TXE+0xda>
 8003b12:	7bbb      	ldrb	r3, [r7, #14]
 8003b14:	2b40      	cmp	r3, #64	; 0x40
 8003b16:	d12d      	bne.n	8003b74 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003b18:	7bfb      	ldrb	r3, [r7, #15]
 8003b1a:	2b22      	cmp	r3, #34	; 0x22
 8003b1c:	d12a      	bne.n	8003b74 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d108      	bne.n	8003b3a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	685a      	ldr	r2, [r3, #4]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b36:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003b38:	e01c      	b.n	8003b74 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	2b40      	cmp	r3, #64	; 0x40
 8003b44:	d103      	bne.n	8003b4e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 f88e 	bl	8003c68 <I2C_MemoryTransmit_TXE_BTF>
}
 8003b4c:	e012      	b.n	8003b74 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b52:	781a      	ldrb	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5e:	1c5a      	adds	r2, r3, #1
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	b29a      	uxth	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003b72:	e7ff      	b.n	8003b74 <I2C_MasterTransmit_TXE+0x130>
 8003b74:	bf00      	nop
 8003b76:	3710      	adds	r7, #16
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b88:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b21      	cmp	r3, #33	; 0x21
 8003b94:	d164      	bne.n	8003c60 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d012      	beq.n	8003bc6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba4:	781a      	ldrb	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb0:	1c5a      	adds	r2, r3, #1
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	b29a      	uxth	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003bc4:	e04c      	b.n	8003c60 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2b08      	cmp	r3, #8
 8003bca:	d01d      	beq.n	8003c08 <I2C_MasterTransmit_BTF+0x8c>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2b20      	cmp	r3, #32
 8003bd0:	d01a      	beq.n	8003c08 <I2C_MasterTransmit_BTF+0x8c>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003bd8:	d016      	beq.n	8003c08 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	685a      	ldr	r2, [r3, #4]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003be8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2211      	movs	r2, #17
 8003bee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2220      	movs	r2, #32
 8003bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f7ff feb7 	bl	8003974 <HAL_I2C_MasterTxCpltCallback>
}
 8003c06:	e02b      	b.n	8003c60 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	685a      	ldr	r2, [r3, #4]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c16:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c26:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2220      	movs	r2, #32
 8003c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b40      	cmp	r3, #64	; 0x40
 8003c40:	d107      	bne.n	8003c52 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f7ff fed2 	bl	80039f4 <HAL_I2C_MemTxCpltCallback>
}
 8003c50:	e006      	b.n	8003c60 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f7ff fe8a 	bl	8003974 <HAL_I2C_MasterTxCpltCallback>
}
 8003c60:	bf00      	nop
 8003c62:	3710      	adds	r7, #16
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c76:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d11d      	bne.n	8003cbc <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d10b      	bne.n	8003ca0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c8c:	b2da      	uxtb	r2, r3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c98:	1c9a      	adds	r2, r3, #2
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003c9e:	e073      	b.n	8003d88 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	121b      	asrs	r3, r3, #8
 8003ca8:	b2da      	uxtb	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cb4:	1c5a      	adds	r2, r3, #1
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003cba:	e065      	b.n	8003d88 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d10b      	bne.n	8003cdc <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cc8:	b2da      	uxtb	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cd4:	1c5a      	adds	r2, r3, #1
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003cda:	e055      	b.n	8003d88 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d151      	bne.n	8003d88 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003ce4:	7bfb      	ldrb	r3, [r7, #15]
 8003ce6:	2b22      	cmp	r3, #34	; 0x22
 8003ce8:	d10d      	bne.n	8003d06 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cf8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cfe:	1c5a      	adds	r2, r3, #1
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003d04:	e040      	b.n	8003d88 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d015      	beq.n	8003d3c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003d10:	7bfb      	ldrb	r3, [r7, #15]
 8003d12:	2b21      	cmp	r3, #33	; 0x21
 8003d14:	d112      	bne.n	8003d3c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1a:	781a      	ldrb	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d26:	1c5a      	adds	r2, r3, #1
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	3b01      	subs	r3, #1
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003d3a:	e025      	b.n	8003d88 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d120      	bne.n	8003d88 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003d46:	7bfb      	ldrb	r3, [r7, #15]
 8003d48:	2b21      	cmp	r3, #33	; 0x21
 8003d4a:	d11d      	bne.n	8003d88 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	685a      	ldr	r2, [r3, #4]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d5a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d6a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2220      	movs	r2, #32
 8003d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f7ff fe36 	bl	80039f4 <HAL_I2C_MemTxCpltCallback>
}
 8003d88:	bf00      	nop
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	2b22      	cmp	r3, #34	; 0x22
 8003da2:	f040 80a2 	bne.w	8003eea <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2b03      	cmp	r3, #3
 8003db2:	d921      	bls.n	8003df8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	691a      	ldr	r2, [r3, #16]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbe:	b2d2      	uxtb	r2, r2
 8003dc0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc6:	1c5a      	adds	r2, r3, #1
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	2b03      	cmp	r3, #3
 8003de2:	f040 8082 	bne.w	8003eea <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	685a      	ldr	r2, [r3, #4]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003df4:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8003df6:	e078      	b.n	8003eea <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d074      	beq.n	8003eea <I2C_MasterReceive_RXNE+0x15a>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d002      	beq.n	8003e0c <I2C_MasterReceive_RXNE+0x7c>
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d16e      	bne.n	8003eea <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f001 fb5b 	bl	80054c8 <I2C_WaitOnSTOPRequestThroughIT>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d142      	bne.n	8003e9e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e26:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	685a      	ldr	r2, [r3, #4]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e36:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	691a      	ldr	r2, [r3, #16]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e42:	b2d2      	uxtb	r2, r2
 8003e44:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4a:	1c5a      	adds	r2, r3, #1
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	3b01      	subs	r3, #1
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2220      	movs	r2, #32
 8003e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b40      	cmp	r3, #64	; 0x40
 8003e70:	d10a      	bne.n	8003e88 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f7ff fdc1 	bl	8003a08 <HAL_I2C_MemRxCpltCallback>
}
 8003e86:	e030      	b.n	8003eea <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2212      	movs	r2, #18
 8003e94:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f7ff fd76 	bl	8003988 <HAL_I2C_MasterRxCpltCallback>
}
 8003e9c:	e025      	b.n	8003eea <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	685a      	ldr	r2, [r3, #4]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003eac:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	691a      	ldr	r2, [r3, #16]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb8:	b2d2      	uxtb	r2, r2
 8003eba:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec0:	1c5a      	adds	r2, r3, #1
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2220      	movs	r2, #32
 8003ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f7ff fd99 	bl	8003a1c <HAL_I2C_ErrorCallback>
}
 8003eea:	bf00      	nop
 8003eec:	3710      	adds	r7, #16
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b084      	sub	sp, #16
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efe:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	2b04      	cmp	r3, #4
 8003f08:	d11b      	bne.n	8003f42 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	685a      	ldr	r2, [r3, #4]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f18:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	691a      	ldr	r2, [r3, #16]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f24:	b2d2      	uxtb	r2, r2
 8003f26:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2c:	1c5a      	adds	r2, r3, #1
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003f40:	e0bd      	b.n	80040be <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	2b03      	cmp	r3, #3
 8003f4a:	d129      	bne.n	8003fa0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	685a      	ldr	r2, [r3, #4]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f5a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2b04      	cmp	r3, #4
 8003f60:	d00a      	beq.n	8003f78 <I2C_MasterReceive_BTF+0x86>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d007      	beq.n	8003f78 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f76:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	691a      	ldr	r2, [r3, #16]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f82:	b2d2      	uxtb	r2, r2
 8003f84:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8a:	1c5a      	adds	r2, r3, #1
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	3b01      	subs	r3, #1
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003f9e:	e08e      	b.n	80040be <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d176      	bne.n	8004098 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d002      	beq.n	8003fb6 <I2C_MasterReceive_BTF+0xc4>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2b10      	cmp	r3, #16
 8003fb4:	d108      	bne.n	8003fc8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fc4:	601a      	str	r2, [r3, #0]
 8003fc6:	e019      	b.n	8003ffc <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2b04      	cmp	r3, #4
 8003fcc:	d002      	beq.n	8003fd4 <I2C_MasterReceive_BTF+0xe2>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d108      	bne.n	8003fe6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003fe2:	601a      	str	r2, [r3, #0]
 8003fe4:	e00a      	b.n	8003ffc <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2b10      	cmp	r3, #16
 8003fea:	d007      	beq.n	8003ffc <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ffa:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	691a      	ldr	r2, [r3, #16]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004006:	b2d2      	uxtb	r2, r2
 8004008:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400e:	1c5a      	adds	r2, r3, #1
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004018:	b29b      	uxth	r3, r3
 800401a:	3b01      	subs	r3, #1
 800401c:	b29a      	uxth	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	691a      	ldr	r2, [r3, #16]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402c:	b2d2      	uxtb	r2, r2
 800402e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004034:	1c5a      	adds	r2, r3, #1
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800403e:	b29b      	uxth	r3, r3
 8004040:	3b01      	subs	r3, #1
 8004042:	b29a      	uxth	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	685a      	ldr	r2, [r3, #4]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004056:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2220      	movs	r2, #32
 800405c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004066:	b2db      	uxtb	r3, r3
 8004068:	2b40      	cmp	r3, #64	; 0x40
 800406a:	d10a      	bne.n	8004082 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f7ff fcc4 	bl	8003a08 <HAL_I2C_MemRxCpltCallback>
}
 8004080:	e01d      	b.n	80040be <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2212      	movs	r2, #18
 800408e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f7ff fc79 	bl	8003988 <HAL_I2C_MasterRxCpltCallback>
}
 8004096:	e012      	b.n	80040be <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	691a      	ldr	r2, [r3, #16]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a2:	b2d2      	uxtb	r2, r2
 80040a4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040aa:	1c5a      	adds	r2, r3, #1
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	3b01      	subs	r3, #1
 80040b8:	b29a      	uxth	r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80040be:	bf00      	nop
 80040c0:	3710      	adds	r7, #16
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80040c6:	b480      	push	{r7}
 80040c8:	b083      	sub	sp, #12
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b40      	cmp	r3, #64	; 0x40
 80040d8:	d117      	bne.n	800410a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d109      	bne.n	80040f6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	461a      	mov	r2, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040f2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80040f4:	e067      	b.n	80041c6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	f043 0301 	orr.w	r3, r3, #1
 8004100:	b2da      	uxtb	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	611a      	str	r2, [r3, #16]
}
 8004108:	e05d      	b.n	80041c6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004112:	d133      	bne.n	800417c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800411a:	b2db      	uxtb	r3, r3
 800411c:	2b21      	cmp	r3, #33	; 0x21
 800411e:	d109      	bne.n	8004134 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004124:	b2db      	uxtb	r3, r3
 8004126:	461a      	mov	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004130:	611a      	str	r2, [r3, #16]
 8004132:	e008      	b.n	8004146 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004138:	b2db      	uxtb	r3, r3
 800413a:	f043 0301 	orr.w	r3, r3, #1
 800413e:	b2da      	uxtb	r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800414a:	2b00      	cmp	r3, #0
 800414c:	d004      	beq.n	8004158 <I2C_Master_SB+0x92>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004154:	2b00      	cmp	r3, #0
 8004156:	d108      	bne.n	800416a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415c:	2b00      	cmp	r3, #0
 800415e:	d032      	beq.n	80041c6 <I2C_Master_SB+0x100>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004166:	2b00      	cmp	r3, #0
 8004168:	d02d      	beq.n	80041c6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	685a      	ldr	r2, [r3, #4]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004178:	605a      	str	r2, [r3, #4]
}
 800417a:	e024      	b.n	80041c6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004180:	2b00      	cmp	r3, #0
 8004182:	d10e      	bne.n	80041a2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004188:	b29b      	uxth	r3, r3
 800418a:	11db      	asrs	r3, r3, #7
 800418c:	b2db      	uxtb	r3, r3
 800418e:	f003 0306 	and.w	r3, r3, #6
 8004192:	b2db      	uxtb	r3, r3
 8004194:	f063 030f 	orn	r3, r3, #15
 8004198:	b2da      	uxtb	r2, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	611a      	str	r2, [r3, #16]
}
 80041a0:	e011      	b.n	80041c6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d10d      	bne.n	80041c6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	11db      	asrs	r3, r3, #7
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	f003 0306 	and.w	r3, r3, #6
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	f063 030e 	orn	r3, r3, #14
 80041be:	b2da      	uxtb	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	611a      	str	r2, [r3, #16]
}
 80041c6:	bf00      	nop
 80041c8:	370c      	adds	r7, #12
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr

080041d2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80041d2:	b480      	push	{r7}
 80041d4:	b083      	sub	sp, #12
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041de:	b2da      	uxtb	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d004      	beq.n	80041f8 <I2C_Master_ADD10+0x26>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d108      	bne.n	800420a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00c      	beq.n	800421a <I2C_Master_ADD10+0x48>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004206:	2b00      	cmp	r3, #0
 8004208:	d007      	beq.n	800421a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	685a      	ldr	r2, [r3, #4]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004218:	605a      	str	r2, [r3, #4]
  }
}
 800421a:	bf00      	nop
 800421c:	370c      	adds	r7, #12
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr

08004226 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004226:	b480      	push	{r7}
 8004228:	b091      	sub	sp, #68	; 0x44
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004234:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800423c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004242:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800424a:	b2db      	uxtb	r3, r3
 800424c:	2b22      	cmp	r3, #34	; 0x22
 800424e:	f040 8169 	bne.w	8004524 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004256:	2b00      	cmp	r3, #0
 8004258:	d10f      	bne.n	800427a <I2C_Master_ADDR+0x54>
 800425a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800425e:	2b40      	cmp	r3, #64	; 0x40
 8004260:	d10b      	bne.n	800427a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004262:	2300      	movs	r3, #0
 8004264:	633b      	str	r3, [r7, #48]	; 0x30
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	695b      	ldr	r3, [r3, #20]
 800426c:	633b      	str	r3, [r7, #48]	; 0x30
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	699b      	ldr	r3, [r3, #24]
 8004274:	633b      	str	r3, [r7, #48]	; 0x30
 8004276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004278:	e160      	b.n	800453c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800427e:	2b00      	cmp	r3, #0
 8004280:	d11d      	bne.n	80042be <I2C_Master_ADDR+0x98>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800428a:	d118      	bne.n	80042be <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800428c:	2300      	movs	r3, #0
 800428e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	695b      	ldr	r3, [r3, #20]
 8004296:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	699b      	ldr	r3, [r3, #24]
 800429e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042b0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042b6:	1c5a      	adds	r2, r3, #1
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	651a      	str	r2, [r3, #80]	; 0x50
 80042bc:	e13e      	b.n	800453c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d113      	bne.n	80042f0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042c8:	2300      	movs	r3, #0
 80042ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	62bb      	str	r3, [r7, #40]	; 0x28
 80042dc:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042ec:	601a      	str	r2, [r3, #0]
 80042ee:	e115      	b.n	800451c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	f040 808a 	bne.w	8004410 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80042fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042fe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004302:	d137      	bne.n	8004374 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004312:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800431e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004322:	d113      	bne.n	800434c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004332:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004334:	2300      	movs	r3, #0
 8004336:	627b      	str	r3, [r7, #36]	; 0x24
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	695b      	ldr	r3, [r3, #20]
 800433e:	627b      	str	r3, [r7, #36]	; 0x24
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	627b      	str	r3, [r7, #36]	; 0x24
 8004348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434a:	e0e7      	b.n	800451c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800434c:	2300      	movs	r3, #0
 800434e:	623b      	str	r3, [r7, #32]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	623b      	str	r3, [r7, #32]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	623b      	str	r3, [r7, #32]
 8004360:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004370:	601a      	str	r2, [r3, #0]
 8004372:	e0d3      	b.n	800451c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004376:	2b08      	cmp	r3, #8
 8004378:	d02e      	beq.n	80043d8 <I2C_Master_ADDR+0x1b2>
 800437a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800437c:	2b20      	cmp	r3, #32
 800437e:	d02b      	beq.n	80043d8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004382:	2b12      	cmp	r3, #18
 8004384:	d102      	bne.n	800438c <I2C_Master_ADDR+0x166>
 8004386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004388:	2b01      	cmp	r3, #1
 800438a:	d125      	bne.n	80043d8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800438c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800438e:	2b04      	cmp	r3, #4
 8004390:	d00e      	beq.n	80043b0 <I2C_Master_ADDR+0x18a>
 8004392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004394:	2b02      	cmp	r3, #2
 8004396:	d00b      	beq.n	80043b0 <I2C_Master_ADDR+0x18a>
 8004398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800439a:	2b10      	cmp	r3, #16
 800439c:	d008      	beq.n	80043b0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043ac:	601a      	str	r2, [r3, #0]
 80043ae:	e007      	b.n	80043c0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043be:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043c0:	2300      	movs	r3, #0
 80043c2:	61fb      	str	r3, [r7, #28]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	61fb      	str	r3, [r7, #28]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	61fb      	str	r3, [r7, #28]
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	e0a1      	b.n	800451c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043e6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043e8:	2300      	movs	r3, #0
 80043ea:	61bb      	str	r3, [r7, #24]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	61bb      	str	r3, [r7, #24]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	61bb      	str	r3, [r7, #24]
 80043fc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800440c:	601a      	str	r2, [r3, #0]
 800440e:	e085      	b.n	800451c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004414:	b29b      	uxth	r3, r3
 8004416:	2b02      	cmp	r3, #2
 8004418:	d14d      	bne.n	80044b6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800441a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800441c:	2b04      	cmp	r3, #4
 800441e:	d016      	beq.n	800444e <I2C_Master_ADDR+0x228>
 8004420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004422:	2b02      	cmp	r3, #2
 8004424:	d013      	beq.n	800444e <I2C_Master_ADDR+0x228>
 8004426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004428:	2b10      	cmp	r3, #16
 800442a:	d010      	beq.n	800444e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800443a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800444a:	601a      	str	r2, [r3, #0]
 800444c:	e007      	b.n	800445e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800445c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004468:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800446c:	d117      	bne.n	800449e <I2C_Master_ADDR+0x278>
 800446e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004470:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004474:	d00b      	beq.n	800448e <I2C_Master_ADDR+0x268>
 8004476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004478:	2b01      	cmp	r3, #1
 800447a:	d008      	beq.n	800448e <I2C_Master_ADDR+0x268>
 800447c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800447e:	2b08      	cmp	r3, #8
 8004480:	d005      	beq.n	800448e <I2C_Master_ADDR+0x268>
 8004482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004484:	2b10      	cmp	r3, #16
 8004486:	d002      	beq.n	800448e <I2C_Master_ADDR+0x268>
 8004488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800448a:	2b20      	cmp	r3, #32
 800448c:	d107      	bne.n	800449e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	685a      	ldr	r2, [r3, #4]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800449c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800449e:	2300      	movs	r3, #0
 80044a0:	617b      	str	r3, [r7, #20]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	695b      	ldr	r3, [r3, #20]
 80044a8:	617b      	str	r3, [r7, #20]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	699b      	ldr	r3, [r3, #24]
 80044b0:	617b      	str	r3, [r7, #20]
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	e032      	b.n	800451c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80044c4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044d4:	d117      	bne.n	8004506 <I2C_Master_ADDR+0x2e0>
 80044d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80044dc:	d00b      	beq.n	80044f6 <I2C_Master_ADDR+0x2d0>
 80044de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d008      	beq.n	80044f6 <I2C_Master_ADDR+0x2d0>
 80044e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e6:	2b08      	cmp	r3, #8
 80044e8:	d005      	beq.n	80044f6 <I2C_Master_ADDR+0x2d0>
 80044ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ec:	2b10      	cmp	r3, #16
 80044ee:	d002      	beq.n	80044f6 <I2C_Master_ADDR+0x2d0>
 80044f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f2:	2b20      	cmp	r3, #32
 80044f4:	d107      	bne.n	8004506 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	685a      	ldr	r2, [r3, #4]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004504:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004506:	2300      	movs	r3, #0
 8004508:	613b      	str	r3, [r7, #16]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	695b      	ldr	r3, [r3, #20]
 8004510:	613b      	str	r3, [r7, #16]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	613b      	str	r3, [r7, #16]
 800451a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004522:	e00b      	b.n	800453c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004524:	2300      	movs	r3, #0
 8004526:	60fb      	str	r3, [r7, #12]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	60fb      	str	r3, [r7, #12]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	60fb      	str	r3, [r7, #12]
 8004538:	68fb      	ldr	r3, [r7, #12]
}
 800453a:	e7ff      	b.n	800453c <I2C_Master_ADDR+0x316>
 800453c:	bf00      	nop
 800453e:	3744      	adds	r7, #68	; 0x44
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004556:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800455c:	b29b      	uxth	r3, r3
 800455e:	2b00      	cmp	r3, #0
 8004560:	d02b      	beq.n	80045ba <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004566:	781a      	ldrb	r2, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004572:	1c5a      	adds	r2, r3, #1
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800457c:	b29b      	uxth	r3, r3
 800457e:	3b01      	subs	r3, #1
 8004580:	b29a      	uxth	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800458a:	b29b      	uxth	r3, r3
 800458c:	2b00      	cmp	r3, #0
 800458e:	d114      	bne.n	80045ba <I2C_SlaveTransmit_TXE+0x72>
 8004590:	7bfb      	ldrb	r3, [r7, #15]
 8004592:	2b29      	cmp	r3, #41	; 0x29
 8004594:	d111      	bne.n	80045ba <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	685a      	ldr	r2, [r3, #4]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045a4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2221      	movs	r2, #33	; 0x21
 80045aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2228      	movs	r2, #40	; 0x28
 80045b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f7ff f9f1 	bl	800399c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80045ba:	bf00      	nop
 80045bc:	3710      	adds	r7, #16
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80045c2:	b480      	push	{r7}
 80045c4:	b083      	sub	sp, #12
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d011      	beq.n	80045f8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d8:	781a      	ldrb	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e4:	1c5a      	adds	r2, r3, #1
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	3b01      	subs	r3, #1
 80045f2:	b29a      	uxth	r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80045f8:	bf00      	nop
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004612:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004618:	b29b      	uxth	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d02c      	beq.n	8004678 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	691a      	ldr	r2, [r3, #16]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004628:	b2d2      	uxtb	r2, r2
 800462a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004630:	1c5a      	adds	r2, r3, #1
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800463a:	b29b      	uxth	r3, r3
 800463c:	3b01      	subs	r3, #1
 800463e:	b29a      	uxth	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004648:	b29b      	uxth	r3, r3
 800464a:	2b00      	cmp	r3, #0
 800464c:	d114      	bne.n	8004678 <I2C_SlaveReceive_RXNE+0x74>
 800464e:	7bfb      	ldrb	r3, [r7, #15]
 8004650:	2b2a      	cmp	r3, #42	; 0x2a
 8004652:	d111      	bne.n	8004678 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	685a      	ldr	r2, [r3, #4]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004662:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2222      	movs	r2, #34	; 0x22
 8004668:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2228      	movs	r2, #40	; 0x28
 800466e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f7ff f99c 	bl	80039b0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004678:	bf00      	nop
 800467a:	3710      	adds	r7, #16
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800468c:	b29b      	uxth	r3, r3
 800468e:	2b00      	cmp	r3, #0
 8004690:	d012      	beq.n	80046b8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	691a      	ldr	r2, [r3, #16]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469c:	b2d2      	uxtb	r2, r2
 800469e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a4:	1c5a      	adds	r2, r3, #1
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	3b01      	subs	r3, #1
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80046b8:	bf00      	nop
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80046ce:	2300      	movs	r3, #0
 80046d0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80046de:	2b28      	cmp	r3, #40	; 0x28
 80046e0:	d127      	bne.n	8004732 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	685a      	ldr	r2, [r3, #4]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046f0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	089b      	lsrs	r3, r3, #2
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80046fe:	2301      	movs	r3, #1
 8004700:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	09db      	lsrs	r3, r3, #7
 8004706:	f003 0301 	and.w	r3, r3, #1
 800470a:	2b00      	cmp	r3, #0
 800470c:	d103      	bne.n	8004716 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	81bb      	strh	r3, [r7, #12]
 8004714:	e002      	b.n	800471c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	699b      	ldr	r3, [r3, #24]
 800471a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004724:	89ba      	ldrh	r2, [r7, #12]
 8004726:	7bfb      	ldrb	r3, [r7, #15]
 8004728:	4619      	mov	r1, r3
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f7ff f94a 	bl	80039c4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004730:	e00e      	b.n	8004750 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004732:	2300      	movs	r3, #0
 8004734:	60bb      	str	r3, [r7, #8]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	695b      	ldr	r3, [r3, #20]
 800473c:	60bb      	str	r3, [r7, #8]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	699b      	ldr	r3, [r3, #24]
 8004744:	60bb      	str	r3, [r7, #8]
 8004746:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004750:	bf00      	nop
 8004752:	3710      	adds	r7, #16
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}

08004758 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004766:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	685a      	ldr	r2, [r3, #4]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004776:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004778:	2300      	movs	r3, #0
 800477a:	60bb      	str	r3, [r7, #8]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	60bb      	str	r3, [r7, #8]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f042 0201 	orr.w	r2, r2, #1
 8004792:	601a      	str	r2, [r3, #0]
 8004794:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047a4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047b4:	d172      	bne.n	800489c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80047b6:	7bfb      	ldrb	r3, [r7, #15]
 80047b8:	2b22      	cmp	r3, #34	; 0x22
 80047ba:	d002      	beq.n	80047c2 <I2C_Slave_STOPF+0x6a>
 80047bc:	7bfb      	ldrb	r3, [r7, #15]
 80047be:	2b2a      	cmp	r3, #42	; 0x2a
 80047c0:	d135      	bne.n	800482e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d005      	beq.n	80047e6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047de:	f043 0204 	orr.w	r2, r3, #4
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	685a      	ldr	r2, [r3, #4]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047f4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7fd ff58 	bl	80026b0 <HAL_DMA_GetState>
 8004800:	4603      	mov	r3, r0
 8004802:	2b01      	cmp	r3, #1
 8004804:	d049      	beq.n	800489a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480a:	4a69      	ldr	r2, [pc, #420]	; (80049b0 <I2C_Slave_STOPF+0x258>)
 800480c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004812:	4618      	mov	r0, r3
 8004814:	f7fd ff2a 	bl	800266c <HAL_DMA_Abort_IT>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d03d      	beq.n	800489a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004828:	4610      	mov	r0, r2
 800482a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800482c:	e035      	b.n	800489a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	b29a      	uxth	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004840:	b29b      	uxth	r3, r3
 8004842:	2b00      	cmp	r3, #0
 8004844:	d005      	beq.n	8004852 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484a:	f043 0204 	orr.w	r2, r3, #4
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	685a      	ldr	r2, [r3, #4]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004860:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004866:	4618      	mov	r0, r3
 8004868:	f7fd ff22 	bl	80026b0 <HAL_DMA_GetState>
 800486c:	4603      	mov	r3, r0
 800486e:	2b01      	cmp	r3, #1
 8004870:	d014      	beq.n	800489c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004876:	4a4e      	ldr	r2, [pc, #312]	; (80049b0 <I2C_Slave_STOPF+0x258>)
 8004878:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800487e:	4618      	mov	r0, r3
 8004880:	f7fd fef4 	bl	800266c <HAL_DMA_Abort_IT>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d008      	beq.n	800489c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800488e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004894:	4610      	mov	r0, r2
 8004896:	4798      	blx	r3
 8004898:	e000      	b.n	800489c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800489a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d03e      	beq.n	8004924 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	695b      	ldr	r3, [r3, #20]
 80048ac:	f003 0304 	and.w	r3, r3, #4
 80048b0:	2b04      	cmp	r3, #4
 80048b2:	d112      	bne.n	80048da <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	691a      	ldr	r2, [r3, #16]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048be:	b2d2      	uxtb	r2, r2
 80048c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c6:	1c5a      	adds	r2, r3, #1
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	3b01      	subs	r3, #1
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	695b      	ldr	r3, [r3, #20]
 80048e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e4:	2b40      	cmp	r3, #64	; 0x40
 80048e6:	d112      	bne.n	800490e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	691a      	ldr	r2, [r3, #16]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f2:	b2d2      	uxtb	r2, r2
 80048f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fa:	1c5a      	adds	r2, r3, #1
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004904:	b29b      	uxth	r3, r3
 8004906:	3b01      	subs	r3, #1
 8004908:	b29a      	uxth	r2, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004912:	b29b      	uxth	r3, r3
 8004914:	2b00      	cmp	r3, #0
 8004916:	d005      	beq.n	8004924 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491c:	f043 0204 	orr.w	r2, r3, #4
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004928:	2b00      	cmp	r3, #0
 800492a:	d003      	beq.n	8004934 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 f8b3 	bl	8004a98 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004932:	e039      	b.n	80049a8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004934:	7bfb      	ldrb	r3, [r7, #15]
 8004936:	2b2a      	cmp	r3, #42	; 0x2a
 8004938:	d109      	bne.n	800494e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2228      	movs	r2, #40	; 0x28
 8004944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f7ff f831 	bl	80039b0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004954:	b2db      	uxtb	r3, r3
 8004956:	2b28      	cmp	r3, #40	; 0x28
 8004958:	d111      	bne.n	800497e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a15      	ldr	r2, [pc, #84]	; (80049b4 <I2C_Slave_STOPF+0x25c>)
 800495e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2220      	movs	r2, #32
 800496a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f7ff f832 	bl	80039e0 <HAL_I2C_ListenCpltCallback>
}
 800497c:	e014      	b.n	80049a8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004982:	2b22      	cmp	r3, #34	; 0x22
 8004984:	d002      	beq.n	800498c <I2C_Slave_STOPF+0x234>
 8004986:	7bfb      	ldrb	r3, [r7, #15]
 8004988:	2b22      	cmp	r3, #34	; 0x22
 800498a:	d10d      	bne.n	80049a8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2220      	movs	r2, #32
 8004996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f7ff f804 	bl	80039b0 <HAL_I2C_SlaveRxCpltCallback>
}
 80049a8:	bf00      	nop
 80049aa:	3710      	adds	r7, #16
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	080050c9 	.word	0x080050c9
 80049b4:	ffff0000 	.word	0xffff0000

080049b8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049c6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049cc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	2b08      	cmp	r3, #8
 80049d2:	d002      	beq.n	80049da <I2C_Slave_AF+0x22>
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	2b20      	cmp	r3, #32
 80049d8:	d129      	bne.n	8004a2e <I2C_Slave_AF+0x76>
 80049da:	7bfb      	ldrb	r3, [r7, #15]
 80049dc:	2b28      	cmp	r3, #40	; 0x28
 80049de:	d126      	bne.n	8004a2e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a2c      	ldr	r2, [pc, #176]	; (8004a94 <I2C_Slave_AF+0xdc>)
 80049e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	685a      	ldr	r2, [r3, #4]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80049f4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80049fe:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a0e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2220      	movs	r2, #32
 8004a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f7fe ffda 	bl	80039e0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004a2c:	e02e      	b.n	8004a8c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004a2e:	7bfb      	ldrb	r3, [r7, #15]
 8004a30:	2b21      	cmp	r3, #33	; 0x21
 8004a32:	d126      	bne.n	8004a82 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a17      	ldr	r2, [pc, #92]	; (8004a94 <I2C_Slave_AF+0xdc>)
 8004a38:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2221      	movs	r2, #33	; 0x21
 8004a3e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2220      	movs	r2, #32
 8004a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	685a      	ldr	r2, [r3, #4]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a5e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a68:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a78:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f7fe ff8e 	bl	800399c <HAL_I2C_SlaveTxCpltCallback>
}
 8004a80:	e004      	b.n	8004a8c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a8a:	615a      	str	r2, [r3, #20]
}
 8004a8c:	bf00      	nop
 8004a8e:	3710      	adds	r7, #16
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	ffff0000 	.word	0xffff0000

08004a98 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aa6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004aae:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004ab0:	7bbb      	ldrb	r3, [r7, #14]
 8004ab2:	2b10      	cmp	r3, #16
 8004ab4:	d002      	beq.n	8004abc <I2C_ITError+0x24>
 8004ab6:	7bbb      	ldrb	r3, [r7, #14]
 8004ab8:	2b40      	cmp	r3, #64	; 0x40
 8004aba:	d10a      	bne.n	8004ad2 <I2C_ITError+0x3a>
 8004abc:	7bfb      	ldrb	r3, [r7, #15]
 8004abe:	2b22      	cmp	r3, #34	; 0x22
 8004ac0:	d107      	bne.n	8004ad2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ad0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004ad2:	7bfb      	ldrb	r3, [r7, #15]
 8004ad4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004ad8:	2b28      	cmp	r3, #40	; 0x28
 8004ada:	d107      	bne.n	8004aec <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2228      	movs	r2, #40	; 0x28
 8004ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004aea:	e015      	b.n	8004b18 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004af6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004afa:	d00a      	beq.n	8004b12 <I2C_ITError+0x7a>
 8004afc:	7bfb      	ldrb	r3, [r7, #15]
 8004afe:	2b60      	cmp	r3, #96	; 0x60
 8004b00:	d007      	beq.n	8004b12 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2220      	movs	r2, #32
 8004b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b26:	d162      	bne.n	8004bee <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	685a      	ldr	r2, [r3, #4]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b36:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d020      	beq.n	8004b88 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b4a:	4a6a      	ldr	r2, [pc, #424]	; (8004cf4 <I2C_ITError+0x25c>)
 8004b4c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7fd fd8a 	bl	800266c <HAL_DMA_Abort_IT>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	f000 8089 	beq.w	8004c72 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f022 0201 	bic.w	r2, r2, #1
 8004b6e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2220      	movs	r2, #32
 8004b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b82:	4610      	mov	r0, r2
 8004b84:	4798      	blx	r3
 8004b86:	e074      	b.n	8004c72 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b8c:	4a59      	ldr	r2, [pc, #356]	; (8004cf4 <I2C_ITError+0x25c>)
 8004b8e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b94:	4618      	mov	r0, r3
 8004b96:	f7fd fd69 	bl	800266c <HAL_DMA_Abort_IT>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d068      	beq.n	8004c72 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004baa:	2b40      	cmp	r3, #64	; 0x40
 8004bac:	d10b      	bne.n	8004bc6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	691a      	ldr	r2, [r3, #16]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb8:	b2d2      	uxtb	r2, r2
 8004bba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc0:	1c5a      	adds	r2, r3, #1
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f022 0201 	bic.w	r2, r2, #1
 8004bd4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2220      	movs	r2, #32
 8004bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004be8:	4610      	mov	r0, r2
 8004bea:	4798      	blx	r3
 8004bec:	e041      	b.n	8004c72 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b60      	cmp	r3, #96	; 0x60
 8004bf8:	d125      	bne.n	8004c46 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2220      	movs	r2, #32
 8004bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c12:	2b40      	cmp	r3, #64	; 0x40
 8004c14:	d10b      	bne.n	8004c2e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	691a      	ldr	r2, [r3, #16]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c20:	b2d2      	uxtb	r2, r2
 8004c22:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c28:	1c5a      	adds	r2, r3, #1
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f022 0201 	bic.w	r2, r2, #1
 8004c3c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f7fe fef6 	bl	8003a30 <HAL_I2C_AbortCpltCallback>
 8004c44:	e015      	b.n	8004c72 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	695b      	ldr	r3, [r3, #20]
 8004c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c50:	2b40      	cmp	r3, #64	; 0x40
 8004c52:	d10b      	bne.n	8004c6c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	691a      	ldr	r2, [r3, #16]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5e:	b2d2      	uxtb	r2, r2
 8004c60:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c66:	1c5a      	adds	r2, r3, #1
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f7fe fed5 	bl	8003a1c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c76:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10e      	bne.n	8004ca0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d109      	bne.n	8004ca0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d104      	bne.n	8004ca0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d007      	beq.n	8004cb0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	685a      	ldr	r2, [r3, #4]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004cae:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cb6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbc:	f003 0304 	and.w	r3, r3, #4
 8004cc0:	2b04      	cmp	r3, #4
 8004cc2:	d113      	bne.n	8004cec <I2C_ITError+0x254>
 8004cc4:	7bfb      	ldrb	r3, [r7, #15]
 8004cc6:	2b28      	cmp	r3, #40	; 0x28
 8004cc8:	d110      	bne.n	8004cec <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a0a      	ldr	r2, [pc, #40]	; (8004cf8 <I2C_ITError+0x260>)
 8004cce:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2220      	movs	r2, #32
 8004cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f7fe fe7a 	bl	80039e0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004cec:	bf00      	nop
 8004cee:	3710      	adds	r7, #16
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	080050c9 	.word	0x080050c9
 8004cf8:	ffff0000 	.word	0xffff0000

08004cfc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b088      	sub	sp, #32
 8004d00:	af02      	add	r7, sp, #8
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	607a      	str	r2, [r7, #4]
 8004d06:	603b      	str	r3, [r7, #0]
 8004d08:	460b      	mov	r3, r1
 8004d0a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d10:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	2b08      	cmp	r3, #8
 8004d16:	d006      	beq.n	8004d26 <I2C_MasterRequestWrite+0x2a>
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d003      	beq.n	8004d26 <I2C_MasterRequestWrite+0x2a>
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d24:	d108      	bne.n	8004d38 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d34:	601a      	str	r2, [r3, #0]
 8004d36:	e00b      	b.n	8004d50 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3c:	2b12      	cmp	r3, #18
 8004d3e:	d107      	bne.n	8004d50 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d4e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	9300      	str	r3, [sp, #0]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d5c:	68f8      	ldr	r0, [r7, #12]
 8004d5e:	f000 fa5b 	bl	8005218 <I2C_WaitOnFlagUntilTimeout>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00d      	beq.n	8004d84 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d76:	d103      	bne.n	8004d80 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	e035      	b.n	8004df0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d8c:	d108      	bne.n	8004da0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d8e:	897b      	ldrh	r3, [r7, #10]
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	461a      	mov	r2, r3
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004d9c:	611a      	str	r2, [r3, #16]
 8004d9e:	e01b      	b.n	8004dd8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004da0:	897b      	ldrh	r3, [r7, #10]
 8004da2:	11db      	asrs	r3, r3, #7
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	f003 0306 	and.w	r3, r3, #6
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	f063 030f 	orn	r3, r3, #15
 8004db0:	b2da      	uxtb	r2, r3
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	490e      	ldr	r1, [pc, #56]	; (8004df8 <I2C_MasterRequestWrite+0xfc>)
 8004dbe:	68f8      	ldr	r0, [r7, #12]
 8004dc0:	f000 fa81 	bl	80052c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d001      	beq.n	8004dce <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e010      	b.n	8004df0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004dce:	897b      	ldrh	r3, [r7, #10]
 8004dd0:	b2da      	uxtb	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	4907      	ldr	r1, [pc, #28]	; (8004dfc <I2C_MasterRequestWrite+0x100>)
 8004dde:	68f8      	ldr	r0, [r7, #12]
 8004de0:	f000 fa71 	bl	80052c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d001      	beq.n	8004dee <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e000      	b.n	8004df0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004dee:	2300      	movs	r3, #0
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3718      	adds	r7, #24
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	00010008 	.word	0x00010008
 8004dfc:	00010002 	.word	0x00010002

08004e00 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b088      	sub	sp, #32
 8004e04:	af02      	add	r7, sp, #8
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	607a      	str	r2, [r7, #4]
 8004e0a:	603b      	str	r3, [r7, #0]
 8004e0c:	460b      	mov	r3, r1
 8004e0e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e14:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e24:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	2b08      	cmp	r3, #8
 8004e2a:	d006      	beq.n	8004e3a <I2C_MasterRequestRead+0x3a>
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d003      	beq.n	8004e3a <I2C_MasterRequestRead+0x3a>
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e38:	d108      	bne.n	8004e4c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e48:	601a      	str	r2, [r3, #0]
 8004e4a:	e00b      	b.n	8004e64 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e50:	2b11      	cmp	r3, #17
 8004e52:	d107      	bne.n	8004e64 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e62:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	9300      	str	r3, [sp, #0]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e70:	68f8      	ldr	r0, [r7, #12]
 8004e72:	f000 f9d1 	bl	8005218 <I2C_WaitOnFlagUntilTimeout>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00d      	beq.n	8004e98 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e8a:	d103      	bne.n	8004e94 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e92:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e94:	2303      	movs	r3, #3
 8004e96:	e079      	b.n	8004f8c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ea0:	d108      	bne.n	8004eb4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004ea2:	897b      	ldrh	r3, [r7, #10]
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	f043 0301 	orr.w	r3, r3, #1
 8004eaa:	b2da      	uxtb	r2, r3
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	611a      	str	r2, [r3, #16]
 8004eb2:	e05f      	b.n	8004f74 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004eb4:	897b      	ldrh	r3, [r7, #10]
 8004eb6:	11db      	asrs	r3, r3, #7
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	f003 0306 	and.w	r3, r3, #6
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	f063 030f 	orn	r3, r3, #15
 8004ec4:	b2da      	uxtb	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	4930      	ldr	r1, [pc, #192]	; (8004f94 <I2C_MasterRequestRead+0x194>)
 8004ed2:	68f8      	ldr	r0, [r7, #12]
 8004ed4:	f000 f9f7 	bl	80052c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d001      	beq.n	8004ee2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e054      	b.n	8004f8c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004ee2:	897b      	ldrh	r3, [r7, #10]
 8004ee4:	b2da      	uxtb	r2, r3
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	4929      	ldr	r1, [pc, #164]	; (8004f98 <I2C_MasterRequestRead+0x198>)
 8004ef2:	68f8      	ldr	r0, [r7, #12]
 8004ef4:	f000 f9e7 	bl	80052c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d001      	beq.n	8004f02 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e044      	b.n	8004f8c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f02:	2300      	movs	r3, #0
 8004f04:	613b      	str	r3, [r7, #16]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	695b      	ldr	r3, [r3, #20]
 8004f0c:	613b      	str	r3, [r7, #16]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	613b      	str	r3, [r7, #16]
 8004f16:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f26:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	9300      	str	r3, [sp, #0]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f34:	68f8      	ldr	r0, [r7, #12]
 8004f36:	f000 f96f 	bl	8005218 <I2C_WaitOnFlagUntilTimeout>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d00d      	beq.n	8004f5c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f4e:	d103      	bne.n	8004f58 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f56:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	e017      	b.n	8004f8c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004f5c:	897b      	ldrh	r3, [r7, #10]
 8004f5e:	11db      	asrs	r3, r3, #7
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	f003 0306 	and.w	r3, r3, #6
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	f063 030e 	orn	r3, r3, #14
 8004f6c:	b2da      	uxtb	r2, r3
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	4907      	ldr	r1, [pc, #28]	; (8004f98 <I2C_MasterRequestRead+0x198>)
 8004f7a:	68f8      	ldr	r0, [r7, #12]
 8004f7c:	f000 f9a3 	bl	80052c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d001      	beq.n	8004f8a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e000      	b.n	8004f8c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3718      	adds	r7, #24
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	00010008 	.word	0x00010008
 8004f98:	00010002 	.word	0x00010002

08004f9c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b088      	sub	sp, #32
 8004fa0:	af02      	add	r7, sp, #8
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	4608      	mov	r0, r1
 8004fa6:	4611      	mov	r1, r2
 8004fa8:	461a      	mov	r2, r3
 8004faa:	4603      	mov	r3, r0
 8004fac:	817b      	strh	r3, [r7, #10]
 8004fae:	460b      	mov	r3, r1
 8004fb0:	813b      	strh	r3, [r7, #8]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fc4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc8:	9300      	str	r3, [sp, #0]
 8004fca:	6a3b      	ldr	r3, [r7, #32]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f000 f920 	bl	8005218 <I2C_WaitOnFlagUntilTimeout>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00d      	beq.n	8004ffa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fec:	d103      	bne.n	8004ff6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ff4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e05f      	b.n	80050ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004ffa:	897b      	ldrh	r3, [r7, #10]
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	461a      	mov	r2, r3
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005008:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800500a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500c:	6a3a      	ldr	r2, [r7, #32]
 800500e:	492d      	ldr	r1, [pc, #180]	; (80050c4 <I2C_RequestMemoryWrite+0x128>)
 8005010:	68f8      	ldr	r0, [r7, #12]
 8005012:	f000 f958 	bl	80052c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d001      	beq.n	8005020 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e04c      	b.n	80050ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005020:	2300      	movs	r3, #0
 8005022:	617b      	str	r3, [r7, #20]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	617b      	str	r3, [r7, #20]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	699b      	ldr	r3, [r3, #24]
 8005032:	617b      	str	r3, [r7, #20]
 8005034:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005038:	6a39      	ldr	r1, [r7, #32]
 800503a:	68f8      	ldr	r0, [r7, #12]
 800503c:	f000 f9c2 	bl	80053c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00d      	beq.n	8005062 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504a:	2b04      	cmp	r3, #4
 800504c:	d107      	bne.n	800505e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800505c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e02b      	b.n	80050ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005062:	88fb      	ldrh	r3, [r7, #6]
 8005064:	2b01      	cmp	r3, #1
 8005066:	d105      	bne.n	8005074 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005068:	893b      	ldrh	r3, [r7, #8]
 800506a:	b2da      	uxtb	r2, r3
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	611a      	str	r2, [r3, #16]
 8005072:	e021      	b.n	80050b8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005074:	893b      	ldrh	r3, [r7, #8]
 8005076:	0a1b      	lsrs	r3, r3, #8
 8005078:	b29b      	uxth	r3, r3
 800507a:	b2da      	uxtb	r2, r3
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005084:	6a39      	ldr	r1, [r7, #32]
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f000 f99c 	bl	80053c4 <I2C_WaitOnTXEFlagUntilTimeout>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d00d      	beq.n	80050ae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005096:	2b04      	cmp	r3, #4
 8005098:	d107      	bne.n	80050aa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e005      	b.n	80050ba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80050ae:	893b      	ldrh	r3, [r7, #8]
 80050b0:	b2da      	uxtb	r2, r3
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3718      	adds	r7, #24
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	bf00      	nop
 80050c4:	00010002 	.word	0x00010002

080050c8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b086      	sub	sp, #24
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050d0:	2300      	movs	r3, #0
 80050d2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050e0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80050e2:	4b4b      	ldr	r3, [pc, #300]	; (8005210 <I2C_DMAAbort+0x148>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	08db      	lsrs	r3, r3, #3
 80050e8:	4a4a      	ldr	r2, [pc, #296]	; (8005214 <I2C_DMAAbort+0x14c>)
 80050ea:	fba2 2303 	umull	r2, r3, r2, r3
 80050ee:	0a1a      	lsrs	r2, r3, #8
 80050f0:	4613      	mov	r3, r2
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	4413      	add	r3, r2
 80050f6:	00da      	lsls	r2, r3, #3
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d106      	bne.n	8005110 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005106:	f043 0220 	orr.w	r2, r3, #32
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800510e:	e00a      	b.n	8005126 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	3b01      	subs	r3, #1
 8005114:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005120:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005124:	d0ea      	beq.n	80050fc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800512a:	2b00      	cmp	r3, #0
 800512c:	d003      	beq.n	8005136 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005132:	2200      	movs	r2, #0
 8005134:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513a:	2b00      	cmp	r3, #0
 800513c:	d003      	beq.n	8005146 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005142:	2200      	movs	r2, #0
 8005144:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005154:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	2200      	movs	r2, #0
 800515a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005160:	2b00      	cmp	r3, #0
 8005162:	d003      	beq.n	800516c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005168:	2200      	movs	r2, #0
 800516a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005170:	2b00      	cmp	r3, #0
 8005172:	d003      	beq.n	800517c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005178:	2200      	movs	r2, #0
 800517a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f022 0201 	bic.w	r2, r2, #1
 800518a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005192:	b2db      	uxtb	r3, r3
 8005194:	2b60      	cmp	r3, #96	; 0x60
 8005196:	d10e      	bne.n	80051b6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	2220      	movs	r2, #32
 800519c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	2200      	movs	r2, #0
 80051ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80051ae:	6978      	ldr	r0, [r7, #20]
 80051b0:	f7fe fc3e 	bl	8003a30 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80051b4:	e027      	b.n	8005206 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80051b6:	7cfb      	ldrb	r3, [r7, #19]
 80051b8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80051bc:	2b28      	cmp	r3, #40	; 0x28
 80051be:	d117      	bne.n	80051f0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f042 0201 	orr.w	r2, r2, #1
 80051ce:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051de:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	2200      	movs	r2, #0
 80051e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	2228      	movs	r2, #40	; 0x28
 80051ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80051ee:	e007      	b.n	8005200 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	2220      	movs	r2, #32
 80051f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005200:	6978      	ldr	r0, [r7, #20]
 8005202:	f7fe fc0b 	bl	8003a1c <HAL_I2C_ErrorCallback>
}
 8005206:	bf00      	nop
 8005208:	3718      	adds	r7, #24
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	20000010 	.word	0x20000010
 8005214:	14f8b589 	.word	0x14f8b589

08005218 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	603b      	str	r3, [r7, #0]
 8005224:	4613      	mov	r3, r2
 8005226:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005228:	e025      	b.n	8005276 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005230:	d021      	beq.n	8005276 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005232:	f7fd f899 	bl	8002368 <HAL_GetTick>
 8005236:	4602      	mov	r2, r0
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	683a      	ldr	r2, [r7, #0]
 800523e:	429a      	cmp	r2, r3
 8005240:	d302      	bcc.n	8005248 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d116      	bne.n	8005276 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2200      	movs	r2, #0
 800524c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2220      	movs	r2, #32
 8005252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2200      	movs	r2, #0
 800525a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005262:	f043 0220 	orr.w	r2, r3, #32
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2200      	movs	r2, #0
 800526e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e023      	b.n	80052be <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	0c1b      	lsrs	r3, r3, #16
 800527a:	b2db      	uxtb	r3, r3
 800527c:	2b01      	cmp	r3, #1
 800527e:	d10d      	bne.n	800529c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	43da      	mvns	r2, r3
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	4013      	ands	r3, r2
 800528c:	b29b      	uxth	r3, r3
 800528e:	2b00      	cmp	r3, #0
 8005290:	bf0c      	ite	eq
 8005292:	2301      	moveq	r3, #1
 8005294:	2300      	movne	r3, #0
 8005296:	b2db      	uxtb	r3, r3
 8005298:	461a      	mov	r2, r3
 800529a:	e00c      	b.n	80052b6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	699b      	ldr	r3, [r3, #24]
 80052a2:	43da      	mvns	r2, r3
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	4013      	ands	r3, r2
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	bf0c      	ite	eq
 80052ae:	2301      	moveq	r3, #1
 80052b0:	2300      	movne	r3, #0
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	461a      	mov	r2, r3
 80052b6:	79fb      	ldrb	r3, [r7, #7]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d0b6      	beq.n	800522a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3710      	adds	r7, #16
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80052c6:	b580      	push	{r7, lr}
 80052c8:	b084      	sub	sp, #16
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	60f8      	str	r0, [r7, #12]
 80052ce:	60b9      	str	r1, [r7, #8]
 80052d0:	607a      	str	r2, [r7, #4]
 80052d2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80052d4:	e051      	b.n	800537a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	695b      	ldr	r3, [r3, #20]
 80052dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052e4:	d123      	bne.n	800532e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052f4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80052fe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2200      	movs	r2, #0
 8005304:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2220      	movs	r2, #32
 800530a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531a:	f043 0204 	orr.w	r2, r3, #4
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e046      	b.n	80053bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005334:	d021      	beq.n	800537a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005336:	f7fd f817 	bl	8002368 <HAL_GetTick>
 800533a:	4602      	mov	r2, r0
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	1ad3      	subs	r3, r2, r3
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	429a      	cmp	r2, r3
 8005344:	d302      	bcc.n	800534c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d116      	bne.n	800537a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2220      	movs	r2, #32
 8005356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005366:	f043 0220 	orr.w	r2, r3, #32
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e020      	b.n	80053bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	0c1b      	lsrs	r3, r3, #16
 800537e:	b2db      	uxtb	r3, r3
 8005380:	2b01      	cmp	r3, #1
 8005382:	d10c      	bne.n	800539e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	43da      	mvns	r2, r3
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	4013      	ands	r3, r2
 8005390:	b29b      	uxth	r3, r3
 8005392:	2b00      	cmp	r3, #0
 8005394:	bf14      	ite	ne
 8005396:	2301      	movne	r3, #1
 8005398:	2300      	moveq	r3, #0
 800539a:	b2db      	uxtb	r3, r3
 800539c:	e00b      	b.n	80053b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	699b      	ldr	r3, [r3, #24]
 80053a4:	43da      	mvns	r2, r3
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	4013      	ands	r3, r2
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	bf14      	ite	ne
 80053b0:	2301      	movne	r3, #1
 80053b2:	2300      	moveq	r3, #0
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d18d      	bne.n	80052d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80053ba:	2300      	movs	r3, #0
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3710      	adds	r7, #16
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b084      	sub	sp, #16
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	60b9      	str	r1, [r7, #8]
 80053ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053d0:	e02d      	b.n	800542e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80053d2:	68f8      	ldr	r0, [r7, #12]
 80053d4:	f000 f900 	bl	80055d8 <I2C_IsAcknowledgeFailed>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d001      	beq.n	80053e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e02d      	b.n	800543e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e8:	d021      	beq.n	800542e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ea:	f7fc ffbd 	bl	8002368 <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	68ba      	ldr	r2, [r7, #8]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d302      	bcc.n	8005400 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d116      	bne.n	800542e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2220      	movs	r2, #32
 800540a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541a:	f043 0220 	orr.w	r2, r3, #32
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e007      	b.n	800543e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	695b      	ldr	r3, [r3, #20]
 8005434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005438:	2b80      	cmp	r3, #128	; 0x80
 800543a:	d1ca      	bne.n	80053d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3710      	adds	r7, #16
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}

08005446 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005446:	b580      	push	{r7, lr}
 8005448:	b084      	sub	sp, #16
 800544a:	af00      	add	r7, sp, #0
 800544c:	60f8      	str	r0, [r7, #12]
 800544e:	60b9      	str	r1, [r7, #8]
 8005450:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005452:	e02d      	b.n	80054b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005454:	68f8      	ldr	r0, [r7, #12]
 8005456:	f000 f8bf 	bl	80055d8 <I2C_IsAcknowledgeFailed>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d001      	beq.n	8005464 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e02d      	b.n	80054c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800546a:	d021      	beq.n	80054b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800546c:	f7fc ff7c 	bl	8002368 <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	68ba      	ldr	r2, [r7, #8]
 8005478:	429a      	cmp	r2, r3
 800547a:	d302      	bcc.n	8005482 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d116      	bne.n	80054b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2200      	movs	r2, #0
 8005486:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2220      	movs	r2, #32
 800548c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2200      	movs	r2, #0
 8005494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549c:	f043 0220 	orr.w	r2, r3, #32
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e007      	b.n	80054c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	f003 0304 	and.w	r3, r3, #4
 80054ba:	2b04      	cmp	r3, #4
 80054bc:	d1ca      	bne.n	8005454 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3710      	adds	r7, #16
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b085      	sub	sp, #20
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80054d0:	2300      	movs	r3, #0
 80054d2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80054d4:	4b13      	ldr	r3, [pc, #76]	; (8005524 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	08db      	lsrs	r3, r3, #3
 80054da:	4a13      	ldr	r2, [pc, #76]	; (8005528 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80054dc:	fba2 2303 	umull	r2, r3, r2, r3
 80054e0:	0a1a      	lsrs	r2, r3, #8
 80054e2:	4613      	mov	r3, r2
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	4413      	add	r3, r2
 80054e8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	3b01      	subs	r3, #1
 80054ee:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d107      	bne.n	8005506 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fa:	f043 0220 	orr.w	r2, r3, #32
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e008      	b.n	8005518 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005510:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005514:	d0e9      	beq.n	80054ea <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	3714      	adds	r7, #20
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr
 8005524:	20000010 	.word	0x20000010
 8005528:	14f8b589 	.word	0x14f8b589

0800552c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005538:	e042      	b.n	80055c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	695b      	ldr	r3, [r3, #20]
 8005540:	f003 0310 	and.w	r3, r3, #16
 8005544:	2b10      	cmp	r3, #16
 8005546:	d119      	bne.n	800557c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f06f 0210 	mvn.w	r2, #16
 8005550:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2200      	movs	r2, #0
 8005556:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2220      	movs	r2, #32
 800555c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2200      	movs	r2, #0
 8005574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e029      	b.n	80055d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800557c:	f7fc fef4 	bl	8002368 <HAL_GetTick>
 8005580:	4602      	mov	r2, r0
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	68ba      	ldr	r2, [r7, #8]
 8005588:	429a      	cmp	r2, r3
 800558a:	d302      	bcc.n	8005592 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d116      	bne.n	80055c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2200      	movs	r2, #0
 8005596:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2220      	movs	r2, #32
 800559c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ac:	f043 0220 	orr.w	r2, r3, #32
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e007      	b.n	80055d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	695b      	ldr	r3, [r3, #20]
 80055c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ca:	2b40      	cmp	r3, #64	; 0x40
 80055cc:	d1b5      	bne.n	800553a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80055ce:	2300      	movs	r3, #0
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3710      	adds	r7, #16
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	695b      	ldr	r3, [r3, #20]
 80055e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055ee:	d11b      	bne.n	8005628 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80055f8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2220      	movs	r2, #32
 8005604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005614:	f043 0204 	orr.w	r2, r3, #4
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e000      	b.n	800562a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	370c      	adds	r7, #12
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr

08005636 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005636:	b480      	push	{r7}
 8005638:	b083      	sub	sp, #12
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005642:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005646:	d103      	bne.n	8005650 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800564e:	e007      	b.n	8005660 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005654:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005658:	d102      	bne.n	8005660 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2208      	movs	r2, #8
 800565e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005660:	bf00      	nop
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b086      	sub	sp, #24
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d101      	bne.n	800567e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e264      	b.n	8005b48 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 0301 	and.w	r3, r3, #1
 8005686:	2b00      	cmp	r3, #0
 8005688:	d075      	beq.n	8005776 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800568a:	4ba3      	ldr	r3, [pc, #652]	; (8005918 <HAL_RCC_OscConfig+0x2ac>)
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	f003 030c 	and.w	r3, r3, #12
 8005692:	2b04      	cmp	r3, #4
 8005694:	d00c      	beq.n	80056b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005696:	4ba0      	ldr	r3, [pc, #640]	; (8005918 <HAL_RCC_OscConfig+0x2ac>)
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800569e:	2b08      	cmp	r3, #8
 80056a0:	d112      	bne.n	80056c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056a2:	4b9d      	ldr	r3, [pc, #628]	; (8005918 <HAL_RCC_OscConfig+0x2ac>)
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056ae:	d10b      	bne.n	80056c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056b0:	4b99      	ldr	r3, [pc, #612]	; (8005918 <HAL_RCC_OscConfig+0x2ac>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d05b      	beq.n	8005774 <HAL_RCC_OscConfig+0x108>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d157      	bne.n	8005774 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	e23f      	b.n	8005b48 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056d0:	d106      	bne.n	80056e0 <HAL_RCC_OscConfig+0x74>
 80056d2:	4b91      	ldr	r3, [pc, #580]	; (8005918 <HAL_RCC_OscConfig+0x2ac>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a90      	ldr	r2, [pc, #576]	; (8005918 <HAL_RCC_OscConfig+0x2ac>)
 80056d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056dc:	6013      	str	r3, [r2, #0]
 80056de:	e01d      	b.n	800571c <HAL_RCC_OscConfig+0xb0>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056e8:	d10c      	bne.n	8005704 <HAL_RCC_OscConfig+0x98>
 80056ea:	4b8b      	ldr	r3, [pc, #556]	; (8005918 <HAL_RCC_OscConfig+0x2ac>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a8a      	ldr	r2, [pc, #552]	; (8005918 <HAL_RCC_OscConfig+0x2ac>)
 80056f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056f4:	6013      	str	r3, [r2, #0]
 80056f6:	4b88      	ldr	r3, [pc, #544]	; (8005918 <HAL_RCC_OscConfig+0x2ac>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a87      	ldr	r2, [pc, #540]	; (8005918 <HAL_RCC_OscConfig+0x2ac>)
 80056fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005700:	6013      	str	r3, [r2, #0]
 8005702:	e00b      	b.n	800571c <HAL_RCC_OscConfig+0xb0>
 8005704:	4b84      	ldr	r3, [pc, #528]	; (8005918 <HAL_RCC_OscConfig+0x2ac>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a83      	ldr	r2, [pc, #524]	; (8005918 <HAL_RCC_OscConfig+0x2ac>)
 800570a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800570e:	6013      	str	r3, [r2, #0]
 8005710:	4b81      	ldr	r3, [pc, #516]	; (8005918 <HAL_RCC_OscConfig+0x2ac>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a80      	ldr	r2, [pc, #512]	; (8005918 <HAL_RCC_OscConfig+0x2ac>)
 8005716:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800571a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d013      	beq.n	800574c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005724:	f7fc fe20 	bl	8002368 <HAL_GetTick>
 8005728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800572a:	e008      	b.n	800573e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800572c:	f7fc fe1c 	bl	8002368 <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	2b64      	cmp	r3, #100	; 0x64
 8005738:	d901      	bls.n	800573e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e204      	b.n	8005b48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800573e:	4b76      	ldr	r3, [pc, #472]	; (8005918 <HAL_RCC_OscConfig+0x2ac>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005746:	2b00      	cmp	r3, #0
 8005748:	d0f0      	beq.n	800572c <HAL_RCC_OscConfig+0xc0>
 800574a:	e014      	b.n	8005776 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800574c:	f7fc fe0c 	bl	8002368 <HAL_GetTick>
 8005750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005752:	e008      	b.n	8005766 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005754:	f7fc fe08 	bl	8002368 <HAL_GetTick>
 8005758:	4602      	mov	r2, r0
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	2b64      	cmp	r3, #100	; 0x64
 8005760:	d901      	bls.n	8005766 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e1f0      	b.n	8005b48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005766:	4b6c      	ldr	r3, [pc, #432]	; (8005918 <HAL_RCC_OscConfig+0x2ac>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1f0      	bne.n	8005754 <HAL_RCC_OscConfig+0xe8>
 8005772:	e000      	b.n	8005776 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005774:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 0302 	and.w	r3, r3, #2
 800577e:	2b00      	cmp	r3, #0
 8005780:	d063      	beq.n	800584a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005782:	4b65      	ldr	r3, [pc, #404]	; (8005918 <HAL_RCC_OscConfig+0x2ac>)
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	f003 030c 	and.w	r3, r3, #12
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00b      	beq.n	80057a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800578e:	4b62      	ldr	r3, [pc, #392]	; (8005918 <HAL_RCC_OscConfig+0x2ac>)
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005796:	2b08      	cmp	r3, #8
 8005798:	d11c      	bne.n	80057d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800579a:	4b5f      	ldr	r3, [pc, #380]	; (8005918 <HAL_RCC_OscConfig+0x2ac>)
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d116      	bne.n	80057d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057a6:	4b5c      	ldr	r3, [pc, #368]	; (8005918 <HAL_RCC_OscConfig+0x2ac>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 0302 	and.w	r3, r3, #2
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d005      	beq.n	80057be <HAL_RCC_OscConfig+0x152>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d001      	beq.n	80057be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e1c4      	b.n	8005b48 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057be:	4b56      	ldr	r3, [pc, #344]	; (8005918 <HAL_RCC_OscConfig+0x2ac>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	00db      	lsls	r3, r3, #3
 80057cc:	4952      	ldr	r1, [pc, #328]	; (8005918 <HAL_RCC_OscConfig+0x2ac>)
 80057ce:	4313      	orrs	r3, r2
 80057d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057d2:	e03a      	b.n	800584a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d020      	beq.n	800581e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057dc:	4b4f      	ldr	r3, [pc, #316]	; (800591c <HAL_RCC_OscConfig+0x2b0>)
 80057de:	2201      	movs	r2, #1
 80057e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057e2:	f7fc fdc1 	bl	8002368 <HAL_GetTick>
 80057e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057e8:	e008      	b.n	80057fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057ea:	f7fc fdbd 	bl	8002368 <HAL_GetTick>
 80057ee:	4602      	mov	r2, r0
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	2b02      	cmp	r3, #2
 80057f6:	d901      	bls.n	80057fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80057f8:	2303      	movs	r3, #3
 80057fa:	e1a5      	b.n	8005b48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057fc:	4b46      	ldr	r3, [pc, #280]	; (8005918 <HAL_RCC_OscConfig+0x2ac>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 0302 	and.w	r3, r3, #2
 8005804:	2b00      	cmp	r3, #0
 8005806:	d0f0      	beq.n	80057ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005808:	4b43      	ldr	r3, [pc, #268]	; (8005918 <HAL_RCC_OscConfig+0x2ac>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	691b      	ldr	r3, [r3, #16]
 8005814:	00db      	lsls	r3, r3, #3
 8005816:	4940      	ldr	r1, [pc, #256]	; (8005918 <HAL_RCC_OscConfig+0x2ac>)
 8005818:	4313      	orrs	r3, r2
 800581a:	600b      	str	r3, [r1, #0]
 800581c:	e015      	b.n	800584a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800581e:	4b3f      	ldr	r3, [pc, #252]	; (800591c <HAL_RCC_OscConfig+0x2b0>)
 8005820:	2200      	movs	r2, #0
 8005822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005824:	f7fc fda0 	bl	8002368 <HAL_GetTick>
 8005828:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800582a:	e008      	b.n	800583e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800582c:	f7fc fd9c 	bl	8002368 <HAL_GetTick>
 8005830:	4602      	mov	r2, r0
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	2b02      	cmp	r3, #2
 8005838:	d901      	bls.n	800583e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e184      	b.n	8005b48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800583e:	4b36      	ldr	r3, [pc, #216]	; (8005918 <HAL_RCC_OscConfig+0x2ac>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 0302 	and.w	r3, r3, #2
 8005846:	2b00      	cmp	r3, #0
 8005848:	d1f0      	bne.n	800582c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0308 	and.w	r3, r3, #8
 8005852:	2b00      	cmp	r3, #0
 8005854:	d030      	beq.n	80058b8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	695b      	ldr	r3, [r3, #20]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d016      	beq.n	800588c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800585e:	4b30      	ldr	r3, [pc, #192]	; (8005920 <HAL_RCC_OscConfig+0x2b4>)
 8005860:	2201      	movs	r2, #1
 8005862:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005864:	f7fc fd80 	bl	8002368 <HAL_GetTick>
 8005868:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800586a:	e008      	b.n	800587e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800586c:	f7fc fd7c 	bl	8002368 <HAL_GetTick>
 8005870:	4602      	mov	r2, r0
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	1ad3      	subs	r3, r2, r3
 8005876:	2b02      	cmp	r3, #2
 8005878:	d901      	bls.n	800587e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800587a:	2303      	movs	r3, #3
 800587c:	e164      	b.n	8005b48 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800587e:	4b26      	ldr	r3, [pc, #152]	; (8005918 <HAL_RCC_OscConfig+0x2ac>)
 8005880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005882:	f003 0302 	and.w	r3, r3, #2
 8005886:	2b00      	cmp	r3, #0
 8005888:	d0f0      	beq.n	800586c <HAL_RCC_OscConfig+0x200>
 800588a:	e015      	b.n	80058b8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800588c:	4b24      	ldr	r3, [pc, #144]	; (8005920 <HAL_RCC_OscConfig+0x2b4>)
 800588e:	2200      	movs	r2, #0
 8005890:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005892:	f7fc fd69 	bl	8002368 <HAL_GetTick>
 8005896:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005898:	e008      	b.n	80058ac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800589a:	f7fc fd65 	bl	8002368 <HAL_GetTick>
 800589e:	4602      	mov	r2, r0
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	1ad3      	subs	r3, r2, r3
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	d901      	bls.n	80058ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80058a8:	2303      	movs	r3, #3
 80058aa:	e14d      	b.n	8005b48 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058ac:	4b1a      	ldr	r3, [pc, #104]	; (8005918 <HAL_RCC_OscConfig+0x2ac>)
 80058ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058b0:	f003 0302 	and.w	r3, r3, #2
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d1f0      	bne.n	800589a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0304 	and.w	r3, r3, #4
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	f000 80a0 	beq.w	8005a06 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058c6:	2300      	movs	r3, #0
 80058c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058ca:	4b13      	ldr	r3, [pc, #76]	; (8005918 <HAL_RCC_OscConfig+0x2ac>)
 80058cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d10f      	bne.n	80058f6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058d6:	2300      	movs	r3, #0
 80058d8:	60bb      	str	r3, [r7, #8]
 80058da:	4b0f      	ldr	r3, [pc, #60]	; (8005918 <HAL_RCC_OscConfig+0x2ac>)
 80058dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058de:	4a0e      	ldr	r2, [pc, #56]	; (8005918 <HAL_RCC_OscConfig+0x2ac>)
 80058e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058e4:	6413      	str	r3, [r2, #64]	; 0x40
 80058e6:	4b0c      	ldr	r3, [pc, #48]	; (8005918 <HAL_RCC_OscConfig+0x2ac>)
 80058e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058ee:	60bb      	str	r3, [r7, #8]
 80058f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058f2:	2301      	movs	r3, #1
 80058f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058f6:	4b0b      	ldr	r3, [pc, #44]	; (8005924 <HAL_RCC_OscConfig+0x2b8>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d121      	bne.n	8005946 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005902:	4b08      	ldr	r3, [pc, #32]	; (8005924 <HAL_RCC_OscConfig+0x2b8>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a07      	ldr	r2, [pc, #28]	; (8005924 <HAL_RCC_OscConfig+0x2b8>)
 8005908:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800590c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800590e:	f7fc fd2b 	bl	8002368 <HAL_GetTick>
 8005912:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005914:	e011      	b.n	800593a <HAL_RCC_OscConfig+0x2ce>
 8005916:	bf00      	nop
 8005918:	40023800 	.word	0x40023800
 800591c:	42470000 	.word	0x42470000
 8005920:	42470e80 	.word	0x42470e80
 8005924:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005928:	f7fc fd1e 	bl	8002368 <HAL_GetTick>
 800592c:	4602      	mov	r2, r0
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	2b02      	cmp	r3, #2
 8005934:	d901      	bls.n	800593a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	e106      	b.n	8005b48 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800593a:	4b85      	ldr	r3, [pc, #532]	; (8005b50 <HAL_RCC_OscConfig+0x4e4>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005942:	2b00      	cmp	r3, #0
 8005944:	d0f0      	beq.n	8005928 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	2b01      	cmp	r3, #1
 800594c:	d106      	bne.n	800595c <HAL_RCC_OscConfig+0x2f0>
 800594e:	4b81      	ldr	r3, [pc, #516]	; (8005b54 <HAL_RCC_OscConfig+0x4e8>)
 8005950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005952:	4a80      	ldr	r2, [pc, #512]	; (8005b54 <HAL_RCC_OscConfig+0x4e8>)
 8005954:	f043 0301 	orr.w	r3, r3, #1
 8005958:	6713      	str	r3, [r2, #112]	; 0x70
 800595a:	e01c      	b.n	8005996 <HAL_RCC_OscConfig+0x32a>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	2b05      	cmp	r3, #5
 8005962:	d10c      	bne.n	800597e <HAL_RCC_OscConfig+0x312>
 8005964:	4b7b      	ldr	r3, [pc, #492]	; (8005b54 <HAL_RCC_OscConfig+0x4e8>)
 8005966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005968:	4a7a      	ldr	r2, [pc, #488]	; (8005b54 <HAL_RCC_OscConfig+0x4e8>)
 800596a:	f043 0304 	orr.w	r3, r3, #4
 800596e:	6713      	str	r3, [r2, #112]	; 0x70
 8005970:	4b78      	ldr	r3, [pc, #480]	; (8005b54 <HAL_RCC_OscConfig+0x4e8>)
 8005972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005974:	4a77      	ldr	r2, [pc, #476]	; (8005b54 <HAL_RCC_OscConfig+0x4e8>)
 8005976:	f043 0301 	orr.w	r3, r3, #1
 800597a:	6713      	str	r3, [r2, #112]	; 0x70
 800597c:	e00b      	b.n	8005996 <HAL_RCC_OscConfig+0x32a>
 800597e:	4b75      	ldr	r3, [pc, #468]	; (8005b54 <HAL_RCC_OscConfig+0x4e8>)
 8005980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005982:	4a74      	ldr	r2, [pc, #464]	; (8005b54 <HAL_RCC_OscConfig+0x4e8>)
 8005984:	f023 0301 	bic.w	r3, r3, #1
 8005988:	6713      	str	r3, [r2, #112]	; 0x70
 800598a:	4b72      	ldr	r3, [pc, #456]	; (8005b54 <HAL_RCC_OscConfig+0x4e8>)
 800598c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800598e:	4a71      	ldr	r2, [pc, #452]	; (8005b54 <HAL_RCC_OscConfig+0x4e8>)
 8005990:	f023 0304 	bic.w	r3, r3, #4
 8005994:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d015      	beq.n	80059ca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800599e:	f7fc fce3 	bl	8002368 <HAL_GetTick>
 80059a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059a4:	e00a      	b.n	80059bc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059a6:	f7fc fcdf 	bl	8002368 <HAL_GetTick>
 80059aa:	4602      	mov	r2, r0
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	1ad3      	subs	r3, r2, r3
 80059b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d901      	bls.n	80059bc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80059b8:	2303      	movs	r3, #3
 80059ba:	e0c5      	b.n	8005b48 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059bc:	4b65      	ldr	r3, [pc, #404]	; (8005b54 <HAL_RCC_OscConfig+0x4e8>)
 80059be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059c0:	f003 0302 	and.w	r3, r3, #2
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d0ee      	beq.n	80059a6 <HAL_RCC_OscConfig+0x33a>
 80059c8:	e014      	b.n	80059f4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059ca:	f7fc fccd 	bl	8002368 <HAL_GetTick>
 80059ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059d0:	e00a      	b.n	80059e8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059d2:	f7fc fcc9 	bl	8002368 <HAL_GetTick>
 80059d6:	4602      	mov	r2, r0
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	1ad3      	subs	r3, r2, r3
 80059dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d901      	bls.n	80059e8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80059e4:	2303      	movs	r3, #3
 80059e6:	e0af      	b.n	8005b48 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059e8:	4b5a      	ldr	r3, [pc, #360]	; (8005b54 <HAL_RCC_OscConfig+0x4e8>)
 80059ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ec:	f003 0302 	and.w	r3, r3, #2
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d1ee      	bne.n	80059d2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059f4:	7dfb      	ldrb	r3, [r7, #23]
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d105      	bne.n	8005a06 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059fa:	4b56      	ldr	r3, [pc, #344]	; (8005b54 <HAL_RCC_OscConfig+0x4e8>)
 80059fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fe:	4a55      	ldr	r2, [pc, #340]	; (8005b54 <HAL_RCC_OscConfig+0x4e8>)
 8005a00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a04:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	f000 809b 	beq.w	8005b46 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a10:	4b50      	ldr	r3, [pc, #320]	; (8005b54 <HAL_RCC_OscConfig+0x4e8>)
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	f003 030c 	and.w	r3, r3, #12
 8005a18:	2b08      	cmp	r3, #8
 8005a1a:	d05c      	beq.n	8005ad6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	699b      	ldr	r3, [r3, #24]
 8005a20:	2b02      	cmp	r3, #2
 8005a22:	d141      	bne.n	8005aa8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a24:	4b4c      	ldr	r3, [pc, #304]	; (8005b58 <HAL_RCC_OscConfig+0x4ec>)
 8005a26:	2200      	movs	r2, #0
 8005a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a2a:	f7fc fc9d 	bl	8002368 <HAL_GetTick>
 8005a2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a30:	e008      	b.n	8005a44 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a32:	f7fc fc99 	bl	8002368 <HAL_GetTick>
 8005a36:	4602      	mov	r2, r0
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	1ad3      	subs	r3, r2, r3
 8005a3c:	2b02      	cmp	r3, #2
 8005a3e:	d901      	bls.n	8005a44 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005a40:	2303      	movs	r3, #3
 8005a42:	e081      	b.n	8005b48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a44:	4b43      	ldr	r3, [pc, #268]	; (8005b54 <HAL_RCC_OscConfig+0x4e8>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d1f0      	bne.n	8005a32 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	69da      	ldr	r2, [r3, #28]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a1b      	ldr	r3, [r3, #32]
 8005a58:	431a      	orrs	r2, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5e:	019b      	lsls	r3, r3, #6
 8005a60:	431a      	orrs	r2, r3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a66:	085b      	lsrs	r3, r3, #1
 8005a68:	3b01      	subs	r3, #1
 8005a6a:	041b      	lsls	r3, r3, #16
 8005a6c:	431a      	orrs	r2, r3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a72:	061b      	lsls	r3, r3, #24
 8005a74:	4937      	ldr	r1, [pc, #220]	; (8005b54 <HAL_RCC_OscConfig+0x4e8>)
 8005a76:	4313      	orrs	r3, r2
 8005a78:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a7a:	4b37      	ldr	r3, [pc, #220]	; (8005b58 <HAL_RCC_OscConfig+0x4ec>)
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a80:	f7fc fc72 	bl	8002368 <HAL_GetTick>
 8005a84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a86:	e008      	b.n	8005a9a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a88:	f7fc fc6e 	bl	8002368 <HAL_GetTick>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	d901      	bls.n	8005a9a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	e056      	b.n	8005b48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a9a:	4b2e      	ldr	r3, [pc, #184]	; (8005b54 <HAL_RCC_OscConfig+0x4e8>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d0f0      	beq.n	8005a88 <HAL_RCC_OscConfig+0x41c>
 8005aa6:	e04e      	b.n	8005b46 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005aa8:	4b2b      	ldr	r3, [pc, #172]	; (8005b58 <HAL_RCC_OscConfig+0x4ec>)
 8005aaa:	2200      	movs	r2, #0
 8005aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aae:	f7fc fc5b 	bl	8002368 <HAL_GetTick>
 8005ab2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ab4:	e008      	b.n	8005ac8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ab6:	f7fc fc57 	bl	8002368 <HAL_GetTick>
 8005aba:	4602      	mov	r2, r0
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	1ad3      	subs	r3, r2, r3
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d901      	bls.n	8005ac8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e03f      	b.n	8005b48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ac8:	4b22      	ldr	r3, [pc, #136]	; (8005b54 <HAL_RCC_OscConfig+0x4e8>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d1f0      	bne.n	8005ab6 <HAL_RCC_OscConfig+0x44a>
 8005ad4:	e037      	b.n	8005b46 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	699b      	ldr	r3, [r3, #24]
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d101      	bne.n	8005ae2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e032      	b.n	8005b48 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ae2:	4b1c      	ldr	r3, [pc, #112]	; (8005b54 <HAL_RCC_OscConfig+0x4e8>)
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	699b      	ldr	r3, [r3, #24]
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d028      	beq.n	8005b42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d121      	bne.n	8005b42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d11a      	bne.n	8005b42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005b12:	4013      	ands	r3, r2
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b18:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d111      	bne.n	8005b42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b28:	085b      	lsrs	r3, r3, #1
 8005b2a:	3b01      	subs	r3, #1
 8005b2c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d107      	bne.n	8005b42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d001      	beq.n	8005b46 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e000      	b.n	8005b48 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005b46:	2300      	movs	r3, #0
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3718      	adds	r7, #24
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}
 8005b50:	40007000 	.word	0x40007000
 8005b54:	40023800 	.word	0x40023800
 8005b58:	42470060 	.word	0x42470060

08005b5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d101      	bne.n	8005b70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e0cc      	b.n	8005d0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b70:	4b68      	ldr	r3, [pc, #416]	; (8005d14 <HAL_RCC_ClockConfig+0x1b8>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0307 	and.w	r3, r3, #7
 8005b78:	683a      	ldr	r2, [r7, #0]
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d90c      	bls.n	8005b98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b7e:	4b65      	ldr	r3, [pc, #404]	; (8005d14 <HAL_RCC_ClockConfig+0x1b8>)
 8005b80:	683a      	ldr	r2, [r7, #0]
 8005b82:	b2d2      	uxtb	r2, r2
 8005b84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b86:	4b63      	ldr	r3, [pc, #396]	; (8005d14 <HAL_RCC_ClockConfig+0x1b8>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0307 	and.w	r3, r3, #7
 8005b8e:	683a      	ldr	r2, [r7, #0]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d001      	beq.n	8005b98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	e0b8      	b.n	8005d0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 0302 	and.w	r3, r3, #2
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d020      	beq.n	8005be6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 0304 	and.w	r3, r3, #4
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d005      	beq.n	8005bbc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005bb0:	4b59      	ldr	r3, [pc, #356]	; (8005d18 <HAL_RCC_ClockConfig+0x1bc>)
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	4a58      	ldr	r2, [pc, #352]	; (8005d18 <HAL_RCC_ClockConfig+0x1bc>)
 8005bb6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005bba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 0308 	and.w	r3, r3, #8
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d005      	beq.n	8005bd4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005bc8:	4b53      	ldr	r3, [pc, #332]	; (8005d18 <HAL_RCC_ClockConfig+0x1bc>)
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	4a52      	ldr	r2, [pc, #328]	; (8005d18 <HAL_RCC_ClockConfig+0x1bc>)
 8005bce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005bd2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bd4:	4b50      	ldr	r3, [pc, #320]	; (8005d18 <HAL_RCC_ClockConfig+0x1bc>)
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	494d      	ldr	r1, [pc, #308]	; (8005d18 <HAL_RCC_ClockConfig+0x1bc>)
 8005be2:	4313      	orrs	r3, r2
 8005be4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f003 0301 	and.w	r3, r3, #1
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d044      	beq.n	8005c7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d107      	bne.n	8005c0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bfa:	4b47      	ldr	r3, [pc, #284]	; (8005d18 <HAL_RCC_ClockConfig+0x1bc>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d119      	bne.n	8005c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e07f      	b.n	8005d0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d003      	beq.n	8005c1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c16:	2b03      	cmp	r3, #3
 8005c18:	d107      	bne.n	8005c2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c1a:	4b3f      	ldr	r3, [pc, #252]	; (8005d18 <HAL_RCC_ClockConfig+0x1bc>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d109      	bne.n	8005c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e06f      	b.n	8005d0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c2a:	4b3b      	ldr	r3, [pc, #236]	; (8005d18 <HAL_RCC_ClockConfig+0x1bc>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 0302 	and.w	r3, r3, #2
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d101      	bne.n	8005c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e067      	b.n	8005d0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c3a:	4b37      	ldr	r3, [pc, #220]	; (8005d18 <HAL_RCC_ClockConfig+0x1bc>)
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	f023 0203 	bic.w	r2, r3, #3
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	4934      	ldr	r1, [pc, #208]	; (8005d18 <HAL_RCC_ClockConfig+0x1bc>)
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c4c:	f7fc fb8c 	bl	8002368 <HAL_GetTick>
 8005c50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c52:	e00a      	b.n	8005c6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c54:	f7fc fb88 	bl	8002368 <HAL_GetTick>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	1ad3      	subs	r3, r2, r3
 8005c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d901      	bls.n	8005c6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e04f      	b.n	8005d0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c6a:	4b2b      	ldr	r3, [pc, #172]	; (8005d18 <HAL_RCC_ClockConfig+0x1bc>)
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	f003 020c 	and.w	r2, r3, #12
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d1eb      	bne.n	8005c54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c7c:	4b25      	ldr	r3, [pc, #148]	; (8005d14 <HAL_RCC_ClockConfig+0x1b8>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 0307 	and.w	r3, r3, #7
 8005c84:	683a      	ldr	r2, [r7, #0]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d20c      	bcs.n	8005ca4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c8a:	4b22      	ldr	r3, [pc, #136]	; (8005d14 <HAL_RCC_ClockConfig+0x1b8>)
 8005c8c:	683a      	ldr	r2, [r7, #0]
 8005c8e:	b2d2      	uxtb	r2, r2
 8005c90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c92:	4b20      	ldr	r3, [pc, #128]	; (8005d14 <HAL_RCC_ClockConfig+0x1b8>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 0307 	and.w	r3, r3, #7
 8005c9a:	683a      	ldr	r2, [r7, #0]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d001      	beq.n	8005ca4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e032      	b.n	8005d0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 0304 	and.w	r3, r3, #4
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d008      	beq.n	8005cc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005cb0:	4b19      	ldr	r3, [pc, #100]	; (8005d18 <HAL_RCC_ClockConfig+0x1bc>)
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	4916      	ldr	r1, [pc, #88]	; (8005d18 <HAL_RCC_ClockConfig+0x1bc>)
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 0308 	and.w	r3, r3, #8
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d009      	beq.n	8005ce2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005cce:	4b12      	ldr	r3, [pc, #72]	; (8005d18 <HAL_RCC_ClockConfig+0x1bc>)
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	00db      	lsls	r3, r3, #3
 8005cdc:	490e      	ldr	r1, [pc, #56]	; (8005d18 <HAL_RCC_ClockConfig+0x1bc>)
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005ce2:	f000 f821 	bl	8005d28 <HAL_RCC_GetSysClockFreq>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	4b0b      	ldr	r3, [pc, #44]	; (8005d18 <HAL_RCC_ClockConfig+0x1bc>)
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	091b      	lsrs	r3, r3, #4
 8005cee:	f003 030f 	and.w	r3, r3, #15
 8005cf2:	490a      	ldr	r1, [pc, #40]	; (8005d1c <HAL_RCC_ClockConfig+0x1c0>)
 8005cf4:	5ccb      	ldrb	r3, [r1, r3]
 8005cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8005cfa:	4a09      	ldr	r2, [pc, #36]	; (8005d20 <HAL_RCC_ClockConfig+0x1c4>)
 8005cfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005cfe:	4b09      	ldr	r3, [pc, #36]	; (8005d24 <HAL_RCC_ClockConfig+0x1c8>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4618      	mov	r0, r3
 8005d04:	f7fc f8ec 	bl	8001ee0 <HAL_InitTick>

  return HAL_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3710      	adds	r7, #16
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	40023c00 	.word	0x40023c00
 8005d18:	40023800 	.word	0x40023800
 8005d1c:	0800aab0 	.word	0x0800aab0
 8005d20:	20000010 	.word	0x20000010
 8005d24:	20000014 	.word	0x20000014

08005d28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d28:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005d2c:	b084      	sub	sp, #16
 8005d2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005d30:	2300      	movs	r3, #0
 8005d32:	607b      	str	r3, [r7, #4]
 8005d34:	2300      	movs	r3, #0
 8005d36:	60fb      	str	r3, [r7, #12]
 8005d38:	2300      	movs	r3, #0
 8005d3a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d40:	4b67      	ldr	r3, [pc, #412]	; (8005ee0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	f003 030c 	and.w	r3, r3, #12
 8005d48:	2b08      	cmp	r3, #8
 8005d4a:	d00d      	beq.n	8005d68 <HAL_RCC_GetSysClockFreq+0x40>
 8005d4c:	2b08      	cmp	r3, #8
 8005d4e:	f200 80bd 	bhi.w	8005ecc <HAL_RCC_GetSysClockFreq+0x1a4>
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d002      	beq.n	8005d5c <HAL_RCC_GetSysClockFreq+0x34>
 8005d56:	2b04      	cmp	r3, #4
 8005d58:	d003      	beq.n	8005d62 <HAL_RCC_GetSysClockFreq+0x3a>
 8005d5a:	e0b7      	b.n	8005ecc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d5c:	4b61      	ldr	r3, [pc, #388]	; (8005ee4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005d5e:	60bb      	str	r3, [r7, #8]
       break;
 8005d60:	e0b7      	b.n	8005ed2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d62:	4b61      	ldr	r3, [pc, #388]	; (8005ee8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005d64:	60bb      	str	r3, [r7, #8]
      break;
 8005d66:	e0b4      	b.n	8005ed2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d68:	4b5d      	ldr	r3, [pc, #372]	; (8005ee0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d70:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d72:	4b5b      	ldr	r3, [pc, #364]	; (8005ee0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d04d      	beq.n	8005e1a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d7e:	4b58      	ldr	r3, [pc, #352]	; (8005ee0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	099b      	lsrs	r3, r3, #6
 8005d84:	461a      	mov	r2, r3
 8005d86:	f04f 0300 	mov.w	r3, #0
 8005d8a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005d8e:	f04f 0100 	mov.w	r1, #0
 8005d92:	ea02 0800 	and.w	r8, r2, r0
 8005d96:	ea03 0901 	and.w	r9, r3, r1
 8005d9a:	4640      	mov	r0, r8
 8005d9c:	4649      	mov	r1, r9
 8005d9e:	f04f 0200 	mov.w	r2, #0
 8005da2:	f04f 0300 	mov.w	r3, #0
 8005da6:	014b      	lsls	r3, r1, #5
 8005da8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005dac:	0142      	lsls	r2, r0, #5
 8005dae:	4610      	mov	r0, r2
 8005db0:	4619      	mov	r1, r3
 8005db2:	ebb0 0008 	subs.w	r0, r0, r8
 8005db6:	eb61 0109 	sbc.w	r1, r1, r9
 8005dba:	f04f 0200 	mov.w	r2, #0
 8005dbe:	f04f 0300 	mov.w	r3, #0
 8005dc2:	018b      	lsls	r3, r1, #6
 8005dc4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005dc8:	0182      	lsls	r2, r0, #6
 8005dca:	1a12      	subs	r2, r2, r0
 8005dcc:	eb63 0301 	sbc.w	r3, r3, r1
 8005dd0:	f04f 0000 	mov.w	r0, #0
 8005dd4:	f04f 0100 	mov.w	r1, #0
 8005dd8:	00d9      	lsls	r1, r3, #3
 8005dda:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005dde:	00d0      	lsls	r0, r2, #3
 8005de0:	4602      	mov	r2, r0
 8005de2:	460b      	mov	r3, r1
 8005de4:	eb12 0208 	adds.w	r2, r2, r8
 8005de8:	eb43 0309 	adc.w	r3, r3, r9
 8005dec:	f04f 0000 	mov.w	r0, #0
 8005df0:	f04f 0100 	mov.w	r1, #0
 8005df4:	0259      	lsls	r1, r3, #9
 8005df6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005dfa:	0250      	lsls	r0, r2, #9
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	460b      	mov	r3, r1
 8005e00:	4610      	mov	r0, r2
 8005e02:	4619      	mov	r1, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	461a      	mov	r2, r3
 8005e08:	f04f 0300 	mov.w	r3, #0
 8005e0c:	f7fa fa30 	bl	8000270 <__aeabi_uldivmod>
 8005e10:	4602      	mov	r2, r0
 8005e12:	460b      	mov	r3, r1
 8005e14:	4613      	mov	r3, r2
 8005e16:	60fb      	str	r3, [r7, #12]
 8005e18:	e04a      	b.n	8005eb0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e1a:	4b31      	ldr	r3, [pc, #196]	; (8005ee0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	099b      	lsrs	r3, r3, #6
 8005e20:	461a      	mov	r2, r3
 8005e22:	f04f 0300 	mov.w	r3, #0
 8005e26:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005e2a:	f04f 0100 	mov.w	r1, #0
 8005e2e:	ea02 0400 	and.w	r4, r2, r0
 8005e32:	ea03 0501 	and.w	r5, r3, r1
 8005e36:	4620      	mov	r0, r4
 8005e38:	4629      	mov	r1, r5
 8005e3a:	f04f 0200 	mov.w	r2, #0
 8005e3e:	f04f 0300 	mov.w	r3, #0
 8005e42:	014b      	lsls	r3, r1, #5
 8005e44:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005e48:	0142      	lsls	r2, r0, #5
 8005e4a:	4610      	mov	r0, r2
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	1b00      	subs	r0, r0, r4
 8005e50:	eb61 0105 	sbc.w	r1, r1, r5
 8005e54:	f04f 0200 	mov.w	r2, #0
 8005e58:	f04f 0300 	mov.w	r3, #0
 8005e5c:	018b      	lsls	r3, r1, #6
 8005e5e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005e62:	0182      	lsls	r2, r0, #6
 8005e64:	1a12      	subs	r2, r2, r0
 8005e66:	eb63 0301 	sbc.w	r3, r3, r1
 8005e6a:	f04f 0000 	mov.w	r0, #0
 8005e6e:	f04f 0100 	mov.w	r1, #0
 8005e72:	00d9      	lsls	r1, r3, #3
 8005e74:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e78:	00d0      	lsls	r0, r2, #3
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	1912      	adds	r2, r2, r4
 8005e80:	eb45 0303 	adc.w	r3, r5, r3
 8005e84:	f04f 0000 	mov.w	r0, #0
 8005e88:	f04f 0100 	mov.w	r1, #0
 8005e8c:	0299      	lsls	r1, r3, #10
 8005e8e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005e92:	0290      	lsls	r0, r2, #10
 8005e94:	4602      	mov	r2, r0
 8005e96:	460b      	mov	r3, r1
 8005e98:	4610      	mov	r0, r2
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	f04f 0300 	mov.w	r3, #0
 8005ea4:	f7fa f9e4 	bl	8000270 <__aeabi_uldivmod>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	460b      	mov	r3, r1
 8005eac:	4613      	mov	r3, r2
 8005eae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005eb0:	4b0b      	ldr	r3, [pc, #44]	; (8005ee0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	0c1b      	lsrs	r3, r3, #16
 8005eb6:	f003 0303 	and.w	r3, r3, #3
 8005eba:	3301      	adds	r3, #1
 8005ebc:	005b      	lsls	r3, r3, #1
 8005ebe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ec8:	60bb      	str	r3, [r7, #8]
      break;
 8005eca:	e002      	b.n	8005ed2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ecc:	4b05      	ldr	r3, [pc, #20]	; (8005ee4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005ece:	60bb      	str	r3, [r7, #8]
      break;
 8005ed0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ed2:	68bb      	ldr	r3, [r7, #8]
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3710      	adds	r7, #16
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005ede:	bf00      	nop
 8005ee0:	40023800 	.word	0x40023800
 8005ee4:	00f42400 	.word	0x00f42400
 8005ee8:	007a1200 	.word	0x007a1200

08005eec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005eec:	b480      	push	{r7}
 8005eee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ef0:	4b03      	ldr	r3, [pc, #12]	; (8005f00 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr
 8005efe:	bf00      	nop
 8005f00:	20000010 	.word	0x20000010

08005f04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005f08:	f7ff fff0 	bl	8005eec <HAL_RCC_GetHCLKFreq>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	4b05      	ldr	r3, [pc, #20]	; (8005f24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	0a9b      	lsrs	r3, r3, #10
 8005f14:	f003 0307 	and.w	r3, r3, #7
 8005f18:	4903      	ldr	r1, [pc, #12]	; (8005f28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f1a:	5ccb      	ldrb	r3, [r1, r3]
 8005f1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	bd80      	pop	{r7, pc}
 8005f24:	40023800 	.word	0x40023800
 8005f28:	0800aac0 	.word	0x0800aac0

08005f2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005f30:	f7ff ffdc 	bl	8005eec <HAL_RCC_GetHCLKFreq>
 8005f34:	4602      	mov	r2, r0
 8005f36:	4b05      	ldr	r3, [pc, #20]	; (8005f4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	0b5b      	lsrs	r3, r3, #13
 8005f3c:	f003 0307 	and.w	r3, r3, #7
 8005f40:	4903      	ldr	r1, [pc, #12]	; (8005f50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f42:	5ccb      	ldrb	r3, [r1, r3]
 8005f44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	40023800 	.word	0x40023800
 8005f50:	0800aac0 	.word	0x0800aac0

08005f54 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	220f      	movs	r2, #15
 8005f62:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005f64:	4b12      	ldr	r3, [pc, #72]	; (8005fb0 <HAL_RCC_GetClockConfig+0x5c>)
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	f003 0203 	and.w	r2, r3, #3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005f70:	4b0f      	ldr	r3, [pc, #60]	; (8005fb0 <HAL_RCC_GetClockConfig+0x5c>)
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005f7c:	4b0c      	ldr	r3, [pc, #48]	; (8005fb0 <HAL_RCC_GetClockConfig+0x5c>)
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005f88:	4b09      	ldr	r3, [pc, #36]	; (8005fb0 <HAL_RCC_GetClockConfig+0x5c>)
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	08db      	lsrs	r3, r3, #3
 8005f8e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005f96:	4b07      	ldr	r3, [pc, #28]	; (8005fb4 <HAL_RCC_GetClockConfig+0x60>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 0207 	and.w	r2, r3, #7
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	601a      	str	r2, [r3, #0]
}
 8005fa2:	bf00      	nop
 8005fa4:	370c      	adds	r7, #12
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	40023800 	.word	0x40023800
 8005fb4:	40023c00 	.word	0x40023c00

08005fb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d101      	bne.n	8005fca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e041      	b.n	800604e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d106      	bne.n	8005fe4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 f839 	bl	8006056 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2202      	movs	r2, #2
 8005fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	3304      	adds	r3, #4
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	4610      	mov	r0, r2
 8005ff8:	f000 f9d8 	bl	80063ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800604c:	2300      	movs	r3, #0
}
 800604e:	4618      	mov	r0, r3
 8006050:	3708      	adds	r7, #8
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}

08006056 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006056:	b480      	push	{r7}
 8006058:	b083      	sub	sp, #12
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800605e:	bf00      	nop
 8006060:	370c      	adds	r7, #12
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr
	...

0800606c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800606c:	b480      	push	{r7}
 800606e:	b085      	sub	sp, #20
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800607a:	b2db      	uxtb	r3, r3
 800607c:	2b01      	cmp	r3, #1
 800607e:	d001      	beq.n	8006084 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	e04e      	b.n	8006122 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2202      	movs	r2, #2
 8006088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	68da      	ldr	r2, [r3, #12]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f042 0201 	orr.w	r2, r2, #1
 800609a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a23      	ldr	r2, [pc, #140]	; (8006130 <HAL_TIM_Base_Start_IT+0xc4>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d022      	beq.n	80060ec <HAL_TIM_Base_Start_IT+0x80>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060ae:	d01d      	beq.n	80060ec <HAL_TIM_Base_Start_IT+0x80>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a1f      	ldr	r2, [pc, #124]	; (8006134 <HAL_TIM_Base_Start_IT+0xc8>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d018      	beq.n	80060ec <HAL_TIM_Base_Start_IT+0x80>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a1e      	ldr	r2, [pc, #120]	; (8006138 <HAL_TIM_Base_Start_IT+0xcc>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d013      	beq.n	80060ec <HAL_TIM_Base_Start_IT+0x80>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a1c      	ldr	r2, [pc, #112]	; (800613c <HAL_TIM_Base_Start_IT+0xd0>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d00e      	beq.n	80060ec <HAL_TIM_Base_Start_IT+0x80>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a1b      	ldr	r2, [pc, #108]	; (8006140 <HAL_TIM_Base_Start_IT+0xd4>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d009      	beq.n	80060ec <HAL_TIM_Base_Start_IT+0x80>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a19      	ldr	r2, [pc, #100]	; (8006144 <HAL_TIM_Base_Start_IT+0xd8>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d004      	beq.n	80060ec <HAL_TIM_Base_Start_IT+0x80>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a18      	ldr	r2, [pc, #96]	; (8006148 <HAL_TIM_Base_Start_IT+0xdc>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d111      	bne.n	8006110 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	f003 0307 	and.w	r3, r3, #7
 80060f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2b06      	cmp	r3, #6
 80060fc:	d010      	beq.n	8006120 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f042 0201 	orr.w	r2, r2, #1
 800610c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800610e:	e007      	b.n	8006120 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f042 0201 	orr.w	r2, r2, #1
 800611e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3714      	adds	r7, #20
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr
 800612e:	bf00      	nop
 8006130:	40010000 	.word	0x40010000
 8006134:	40000400 	.word	0x40000400
 8006138:	40000800 	.word	0x40000800
 800613c:	40000c00 	.word	0x40000c00
 8006140:	40010400 	.word	0x40010400
 8006144:	40014000 	.word	0x40014000
 8006148:	40001800 	.word	0x40001800

0800614c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b082      	sub	sp, #8
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	f003 0302 	and.w	r3, r3, #2
 800615e:	2b02      	cmp	r3, #2
 8006160:	d122      	bne.n	80061a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	f003 0302 	and.w	r3, r3, #2
 800616c:	2b02      	cmp	r3, #2
 800616e:	d11b      	bne.n	80061a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f06f 0202 	mvn.w	r2, #2
 8006178:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2201      	movs	r2, #1
 800617e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	699b      	ldr	r3, [r3, #24]
 8006186:	f003 0303 	and.w	r3, r3, #3
 800618a:	2b00      	cmp	r3, #0
 800618c:	d003      	beq.n	8006196 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 f8ee 	bl	8006370 <HAL_TIM_IC_CaptureCallback>
 8006194:	e005      	b.n	80061a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 f8e0 	bl	800635c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f000 f8f1 	bl	8006384 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	f003 0304 	and.w	r3, r3, #4
 80061b2:	2b04      	cmp	r3, #4
 80061b4:	d122      	bne.n	80061fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	f003 0304 	and.w	r3, r3, #4
 80061c0:	2b04      	cmp	r3, #4
 80061c2:	d11b      	bne.n	80061fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f06f 0204 	mvn.w	r2, #4
 80061cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2202      	movs	r2, #2
 80061d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	699b      	ldr	r3, [r3, #24]
 80061da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d003      	beq.n	80061ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 f8c4 	bl	8006370 <HAL_TIM_IC_CaptureCallback>
 80061e8:	e005      	b.n	80061f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 f8b6 	bl	800635c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 f8c7 	bl	8006384 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	f003 0308 	and.w	r3, r3, #8
 8006206:	2b08      	cmp	r3, #8
 8006208:	d122      	bne.n	8006250 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	f003 0308 	and.w	r3, r3, #8
 8006214:	2b08      	cmp	r3, #8
 8006216:	d11b      	bne.n	8006250 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f06f 0208 	mvn.w	r2, #8
 8006220:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2204      	movs	r2, #4
 8006226:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	69db      	ldr	r3, [r3, #28]
 800622e:	f003 0303 	and.w	r3, r3, #3
 8006232:	2b00      	cmp	r3, #0
 8006234:	d003      	beq.n	800623e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 f89a 	bl	8006370 <HAL_TIM_IC_CaptureCallback>
 800623c:	e005      	b.n	800624a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 f88c 	bl	800635c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 f89d 	bl	8006384 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	691b      	ldr	r3, [r3, #16]
 8006256:	f003 0310 	and.w	r3, r3, #16
 800625a:	2b10      	cmp	r3, #16
 800625c:	d122      	bne.n	80062a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	f003 0310 	and.w	r3, r3, #16
 8006268:	2b10      	cmp	r3, #16
 800626a:	d11b      	bne.n	80062a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f06f 0210 	mvn.w	r2, #16
 8006274:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2208      	movs	r2, #8
 800627a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	69db      	ldr	r3, [r3, #28]
 8006282:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006286:	2b00      	cmp	r3, #0
 8006288:	d003      	beq.n	8006292 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 f870 	bl	8006370 <HAL_TIM_IC_CaptureCallback>
 8006290:	e005      	b.n	800629e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 f862 	bl	800635c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 f873 	bl	8006384 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	f003 0301 	and.w	r3, r3, #1
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d10e      	bne.n	80062d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	f003 0301 	and.w	r3, r3, #1
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d107      	bne.n	80062d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f06f 0201 	mvn.w	r2, #1
 80062c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f7fb faea 	bl	80018a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062da:	2b80      	cmp	r3, #128	; 0x80
 80062dc:	d10e      	bne.n	80062fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062e8:	2b80      	cmp	r3, #128	; 0x80
 80062ea:	d107      	bne.n	80062fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80062f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 f902 	bl	8006500 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006306:	2b40      	cmp	r3, #64	; 0x40
 8006308:	d10e      	bne.n	8006328 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006314:	2b40      	cmp	r3, #64	; 0x40
 8006316:	d107      	bne.n	8006328 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 f838 	bl	8006398 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	691b      	ldr	r3, [r3, #16]
 800632e:	f003 0320 	and.w	r3, r3, #32
 8006332:	2b20      	cmp	r3, #32
 8006334:	d10e      	bne.n	8006354 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	f003 0320 	and.w	r3, r3, #32
 8006340:	2b20      	cmp	r3, #32
 8006342:	d107      	bne.n	8006354 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f06f 0220 	mvn.w	r2, #32
 800634c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 f8cc 	bl	80064ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006354:	bf00      	nop
 8006356:	3708      	adds	r7, #8
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006364:	bf00      	nop
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006378:	bf00      	nop
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800638c:	bf00      	nop
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80063a0:	bf00      	nop
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b085      	sub	sp, #20
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a40      	ldr	r2, [pc, #256]	; (80064c0 <TIM_Base_SetConfig+0x114>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d013      	beq.n	80063ec <TIM_Base_SetConfig+0x40>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063ca:	d00f      	beq.n	80063ec <TIM_Base_SetConfig+0x40>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a3d      	ldr	r2, [pc, #244]	; (80064c4 <TIM_Base_SetConfig+0x118>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d00b      	beq.n	80063ec <TIM_Base_SetConfig+0x40>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4a3c      	ldr	r2, [pc, #240]	; (80064c8 <TIM_Base_SetConfig+0x11c>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d007      	beq.n	80063ec <TIM_Base_SetConfig+0x40>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	4a3b      	ldr	r2, [pc, #236]	; (80064cc <TIM_Base_SetConfig+0x120>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d003      	beq.n	80063ec <TIM_Base_SetConfig+0x40>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4a3a      	ldr	r2, [pc, #232]	; (80064d0 <TIM_Base_SetConfig+0x124>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d108      	bne.n	80063fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a2f      	ldr	r2, [pc, #188]	; (80064c0 <TIM_Base_SetConfig+0x114>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d02b      	beq.n	800645e <TIM_Base_SetConfig+0xb2>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800640c:	d027      	beq.n	800645e <TIM_Base_SetConfig+0xb2>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a2c      	ldr	r2, [pc, #176]	; (80064c4 <TIM_Base_SetConfig+0x118>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d023      	beq.n	800645e <TIM_Base_SetConfig+0xb2>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a2b      	ldr	r2, [pc, #172]	; (80064c8 <TIM_Base_SetConfig+0x11c>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d01f      	beq.n	800645e <TIM_Base_SetConfig+0xb2>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a2a      	ldr	r2, [pc, #168]	; (80064cc <TIM_Base_SetConfig+0x120>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d01b      	beq.n	800645e <TIM_Base_SetConfig+0xb2>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a29      	ldr	r2, [pc, #164]	; (80064d0 <TIM_Base_SetConfig+0x124>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d017      	beq.n	800645e <TIM_Base_SetConfig+0xb2>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a28      	ldr	r2, [pc, #160]	; (80064d4 <TIM_Base_SetConfig+0x128>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d013      	beq.n	800645e <TIM_Base_SetConfig+0xb2>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a27      	ldr	r2, [pc, #156]	; (80064d8 <TIM_Base_SetConfig+0x12c>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d00f      	beq.n	800645e <TIM_Base_SetConfig+0xb2>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4a26      	ldr	r2, [pc, #152]	; (80064dc <TIM_Base_SetConfig+0x130>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d00b      	beq.n	800645e <TIM_Base_SetConfig+0xb2>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a25      	ldr	r2, [pc, #148]	; (80064e0 <TIM_Base_SetConfig+0x134>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d007      	beq.n	800645e <TIM_Base_SetConfig+0xb2>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4a24      	ldr	r2, [pc, #144]	; (80064e4 <TIM_Base_SetConfig+0x138>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d003      	beq.n	800645e <TIM_Base_SetConfig+0xb2>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4a23      	ldr	r2, [pc, #140]	; (80064e8 <TIM_Base_SetConfig+0x13c>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d108      	bne.n	8006470 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006464:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	68fa      	ldr	r2, [r7, #12]
 800646c:	4313      	orrs	r3, r2
 800646e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	695b      	ldr	r3, [r3, #20]
 800647a:	4313      	orrs	r3, r2
 800647c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	689a      	ldr	r2, [r3, #8]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4a0a      	ldr	r2, [pc, #40]	; (80064c0 <TIM_Base_SetConfig+0x114>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d003      	beq.n	80064a4 <TIM_Base_SetConfig+0xf8>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	4a0c      	ldr	r2, [pc, #48]	; (80064d0 <TIM_Base_SetConfig+0x124>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d103      	bne.n	80064ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	691a      	ldr	r2, [r3, #16]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2201      	movs	r2, #1
 80064b0:	615a      	str	r2, [r3, #20]
}
 80064b2:	bf00      	nop
 80064b4:	3714      	adds	r7, #20
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr
 80064be:	bf00      	nop
 80064c0:	40010000 	.word	0x40010000
 80064c4:	40000400 	.word	0x40000400
 80064c8:	40000800 	.word	0x40000800
 80064cc:	40000c00 	.word	0x40000c00
 80064d0:	40010400 	.word	0x40010400
 80064d4:	40014000 	.word	0x40014000
 80064d8:	40014400 	.word	0x40014400
 80064dc:	40014800 	.word	0x40014800
 80064e0:	40001800 	.word	0x40001800
 80064e4:	40001c00 	.word	0x40001c00
 80064e8:	40002000 	.word	0x40002000

080064ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064f4:	bf00      	nop
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006508:	bf00      	nop
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b082      	sub	sp, #8
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d101      	bne.n	8006526 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	e03f      	b.n	80065a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800652c:	b2db      	uxtb	r3, r3
 800652e:	2b00      	cmp	r3, #0
 8006530:	d106      	bne.n	8006540 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f7fb fe26 	bl	800218c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2224      	movs	r2, #36	; 0x24
 8006544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68da      	ldr	r2, [r3, #12]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006556:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 fe7d 	bl	8007258 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	691a      	ldr	r2, [r3, #16]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800656c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	695a      	ldr	r2, [r3, #20]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800657c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	68da      	ldr	r2, [r3, #12]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800658c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2220      	movs	r2, #32
 8006598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2220      	movs	r2, #32
 80065a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3708      	adds	r7, #8
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}

080065ae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065ae:	b580      	push	{r7, lr}
 80065b0:	b08a      	sub	sp, #40	; 0x28
 80065b2:	af02      	add	r7, sp, #8
 80065b4:	60f8      	str	r0, [r7, #12]
 80065b6:	60b9      	str	r1, [r7, #8]
 80065b8:	603b      	str	r3, [r7, #0]
 80065ba:	4613      	mov	r3, r2
 80065bc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80065be:	2300      	movs	r3, #0
 80065c0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	2b20      	cmp	r3, #32
 80065cc:	d17c      	bne.n	80066c8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d002      	beq.n	80065da <HAL_UART_Transmit+0x2c>
 80065d4:	88fb      	ldrh	r3, [r7, #6]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d101      	bne.n	80065de <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	e075      	b.n	80066ca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d101      	bne.n	80065ec <HAL_UART_Transmit+0x3e>
 80065e8:	2302      	movs	r3, #2
 80065ea:	e06e      	b.n	80066ca <HAL_UART_Transmit+0x11c>
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2200      	movs	r2, #0
 80065f8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2221      	movs	r2, #33	; 0x21
 80065fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006602:	f7fb feb1 	bl	8002368 <HAL_GetTick>
 8006606:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	88fa      	ldrh	r2, [r7, #6]
 800660c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	88fa      	ldrh	r2, [r7, #6]
 8006612:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800661c:	d108      	bne.n	8006630 <HAL_UART_Transmit+0x82>
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	691b      	ldr	r3, [r3, #16]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d104      	bne.n	8006630 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006626:	2300      	movs	r3, #0
 8006628:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	61bb      	str	r3, [r7, #24]
 800662e:	e003      	b.n	8006638 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006634:	2300      	movs	r3, #0
 8006636:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2200      	movs	r2, #0
 800663c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006640:	e02a      	b.n	8006698 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	9300      	str	r3, [sp, #0]
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	2200      	movs	r2, #0
 800664a:	2180      	movs	r1, #128	; 0x80
 800664c:	68f8      	ldr	r0, [r7, #12]
 800664e:	f000 fbc1 	bl	8006dd4 <UART_WaitOnFlagUntilTimeout>
 8006652:	4603      	mov	r3, r0
 8006654:	2b00      	cmp	r3, #0
 8006656:	d001      	beq.n	800665c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006658:	2303      	movs	r3, #3
 800665a:	e036      	b.n	80066ca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d10b      	bne.n	800667a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	881b      	ldrh	r3, [r3, #0]
 8006666:	461a      	mov	r2, r3
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006670:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006672:	69bb      	ldr	r3, [r7, #24]
 8006674:	3302      	adds	r3, #2
 8006676:	61bb      	str	r3, [r7, #24]
 8006678:	e007      	b.n	800668a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800667a:	69fb      	ldr	r3, [r7, #28]
 800667c:	781a      	ldrb	r2, [r3, #0]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	3301      	adds	r3, #1
 8006688:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800668e:	b29b      	uxth	r3, r3
 8006690:	3b01      	subs	r3, #1
 8006692:	b29a      	uxth	r2, r3
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800669c:	b29b      	uxth	r3, r3
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d1cf      	bne.n	8006642 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	9300      	str	r3, [sp, #0]
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	2200      	movs	r2, #0
 80066aa:	2140      	movs	r1, #64	; 0x40
 80066ac:	68f8      	ldr	r0, [r7, #12]
 80066ae:	f000 fb91 	bl	8006dd4 <UART_WaitOnFlagUntilTimeout>
 80066b2:	4603      	mov	r3, r0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d001      	beq.n	80066bc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80066b8:	2303      	movs	r3, #3
 80066ba:	e006      	b.n	80066ca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2220      	movs	r2, #32
 80066c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80066c4:	2300      	movs	r3, #0
 80066c6:	e000      	b.n	80066ca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80066c8:	2302      	movs	r3, #2
  }
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3720      	adds	r7, #32
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}

080066d2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80066d2:	b580      	push	{r7, lr}
 80066d4:	b084      	sub	sp, #16
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	60f8      	str	r0, [r7, #12]
 80066da:	60b9      	str	r1, [r7, #8]
 80066dc:	4613      	mov	r3, r2
 80066de:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	2b20      	cmp	r3, #32
 80066ea:	d11d      	bne.n	8006728 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d002      	beq.n	80066f8 <HAL_UART_Receive_IT+0x26>
 80066f2:	88fb      	ldrh	r3, [r7, #6]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d101      	bne.n	80066fc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	e016      	b.n	800672a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006702:	2b01      	cmp	r3, #1
 8006704:	d101      	bne.n	800670a <HAL_UART_Receive_IT+0x38>
 8006706:	2302      	movs	r3, #2
 8006708:	e00f      	b.n	800672a <HAL_UART_Receive_IT+0x58>
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2201      	movs	r2, #1
 800670e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2200      	movs	r2, #0
 8006716:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006718:	88fb      	ldrh	r3, [r7, #6]
 800671a:	461a      	mov	r2, r3
 800671c:	68b9      	ldr	r1, [r7, #8]
 800671e:	68f8      	ldr	r0, [r7, #12]
 8006720:	f000 fbc6 	bl	8006eb0 <UART_Start_Receive_IT>
 8006724:	4603      	mov	r3, r0
 8006726:	e000      	b.n	800672a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006728:	2302      	movs	r3, #2
  }
}
 800672a:	4618      	mov	r0, r3
 800672c:	3710      	adds	r7, #16
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}

08006732 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8006732:	b580      	push	{r7, lr}
 8006734:	b09a      	sub	sp, #104	; 0x68
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	330c      	adds	r3, #12
 8006740:	64bb      	str	r3, [r7, #72]	; 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006742:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006744:	e853 3f00 	ldrex	r3, [r3]
 8006748:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800674a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800674c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006750:	667b      	str	r3, [r7, #100]	; 0x64
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	330c      	adds	r3, #12
 8006758:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800675a:	657a      	str	r2, [r7, #84]	; 0x54
 800675c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800675e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006760:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006762:	e841 2300 	strex	r3, r2, [r1]
 8006766:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006768:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800676a:	2b00      	cmp	r3, #0
 800676c:	d1e5      	bne.n	800673a <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	3314      	adds	r3, #20
 8006774:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006778:	e853 3f00 	ldrex	r3, [r3]
 800677c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800677e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006780:	f023 0301 	bic.w	r3, r3, #1
 8006784:	663b      	str	r3, [r7, #96]	; 0x60
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	3314      	adds	r3, #20
 800678c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800678e:	643a      	str	r2, [r7, #64]	; 0x40
 8006790:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006792:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006794:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006796:	e841 2300 	strex	r3, r2, [r1]
 800679a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800679c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d1e5      	bne.n	800676e <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d119      	bne.n	80067de <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	330c      	adds	r3, #12
 80067b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b2:	6a3b      	ldr	r3, [r7, #32]
 80067b4:	e853 3f00 	ldrex	r3, [r3]
 80067b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80067ba:	69fb      	ldr	r3, [r7, #28]
 80067bc:	f023 0310 	bic.w	r3, r3, #16
 80067c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	330c      	adds	r3, #12
 80067c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80067ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80067cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067d2:	e841 2300 	strex	r3, r2, [r1]
 80067d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d1e5      	bne.n	80067aa <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	695b      	ldr	r3, [r3, #20]
 80067e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067e8:	2b40      	cmp	r3, #64	; 0x40
 80067ea:	d136      	bne.n	800685a <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	3314      	adds	r3, #20
 80067f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	e853 3f00 	ldrex	r3, [r3]
 80067fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006802:	65bb      	str	r3, [r7, #88]	; 0x58
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	3314      	adds	r3, #20
 800680a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800680c:	61ba      	str	r2, [r7, #24]
 800680e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006810:	6979      	ldr	r1, [r7, #20]
 8006812:	69ba      	ldr	r2, [r7, #24]
 8006814:	e841 2300 	strex	r3, r2, [r1]
 8006818:	613b      	str	r3, [r7, #16]
   return(result);
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d1e5      	bne.n	80067ec <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006824:	2b00      	cmp	r3, #0
 8006826:	d018      	beq.n	800685a <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800682c:	2200      	movs	r2, #0
 800682e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006834:	4618      	mov	r0, r3
 8006836:	f7fb fea9 	bl	800258c <HAL_DMA_Abort>
 800683a:	4603      	mov	r3, r0
 800683c:	2b00      	cmp	r3, #0
 800683e:	d00c      	beq.n	800685a <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006844:	4618      	mov	r0, r3
 8006846:	f7fb ff41 	bl	80026cc <HAL_DMA_GetError>
 800684a:	4603      	mov	r3, r0
 800684c:	2b20      	cmp	r3, #32
 800684e:	d104      	bne.n	800685a <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2210      	movs	r2, #16
 8006854:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8006856:	2303      	movs	r3, #3
 8006858:	e00a      	b.n	8006870 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2200      	movs	r2, #0
 800685e:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2220      	movs	r2, #32
 8006864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800686e:	2300      	movs	r3, #0
}
 8006870:	4618      	mov	r0, r3
 8006872:	3768      	adds	r7, #104	; 0x68
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b0ba      	sub	sp, #232	; 0xe8
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	695b      	ldr	r3, [r3, #20]
 800689a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800689e:	2300      	movs	r3, #0
 80068a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80068a4:	2300      	movs	r3, #0
 80068a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80068aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068ae:	f003 030f 	and.w	r3, r3, #15
 80068b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80068b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d10f      	bne.n	80068de <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80068be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068c2:	f003 0320 	and.w	r3, r3, #32
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d009      	beq.n	80068de <HAL_UART_IRQHandler+0x66>
 80068ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068ce:	f003 0320 	and.w	r3, r3, #32
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d003      	beq.n	80068de <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 fc03 	bl	80070e2 <UART_Receive_IT>
      return;
 80068dc:	e256      	b.n	8006d8c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80068de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	f000 80de 	beq.w	8006aa4 <HAL_UART_IRQHandler+0x22c>
 80068e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068ec:	f003 0301 	and.w	r3, r3, #1
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d106      	bne.n	8006902 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80068f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068f8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	f000 80d1 	beq.w	8006aa4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006906:	f003 0301 	and.w	r3, r3, #1
 800690a:	2b00      	cmp	r3, #0
 800690c:	d00b      	beq.n	8006926 <HAL_UART_IRQHandler+0xae>
 800690e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006916:	2b00      	cmp	r3, #0
 8006918:	d005      	beq.n	8006926 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800691e:	f043 0201 	orr.w	r2, r3, #1
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800692a:	f003 0304 	and.w	r3, r3, #4
 800692e:	2b00      	cmp	r3, #0
 8006930:	d00b      	beq.n	800694a <HAL_UART_IRQHandler+0xd2>
 8006932:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006936:	f003 0301 	and.w	r3, r3, #1
 800693a:	2b00      	cmp	r3, #0
 800693c:	d005      	beq.n	800694a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006942:	f043 0202 	orr.w	r2, r3, #2
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800694a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800694e:	f003 0302 	and.w	r3, r3, #2
 8006952:	2b00      	cmp	r3, #0
 8006954:	d00b      	beq.n	800696e <HAL_UART_IRQHandler+0xf6>
 8006956:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800695a:	f003 0301 	and.w	r3, r3, #1
 800695e:	2b00      	cmp	r3, #0
 8006960:	d005      	beq.n	800696e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006966:	f043 0204 	orr.w	r2, r3, #4
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800696e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006972:	f003 0308 	and.w	r3, r3, #8
 8006976:	2b00      	cmp	r3, #0
 8006978:	d011      	beq.n	800699e <HAL_UART_IRQHandler+0x126>
 800697a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800697e:	f003 0320 	and.w	r3, r3, #32
 8006982:	2b00      	cmp	r3, #0
 8006984:	d105      	bne.n	8006992 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006986:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800698a:	f003 0301 	and.w	r3, r3, #1
 800698e:	2b00      	cmp	r3, #0
 8006990:	d005      	beq.n	800699e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006996:	f043 0208 	orr.w	r2, r3, #8
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	f000 81ed 	beq.w	8006d82 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80069a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069ac:	f003 0320 	and.w	r3, r3, #32
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d008      	beq.n	80069c6 <HAL_UART_IRQHandler+0x14e>
 80069b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069b8:	f003 0320 	and.w	r3, r3, #32
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d002      	beq.n	80069c6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 fb8e 	bl	80070e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	695b      	ldr	r3, [r3, #20]
 80069cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069d0:	2b40      	cmp	r3, #64	; 0x40
 80069d2:	bf0c      	ite	eq
 80069d4:	2301      	moveq	r3, #1
 80069d6:	2300      	movne	r3, #0
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e2:	f003 0308 	and.w	r3, r3, #8
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d103      	bne.n	80069f2 <HAL_UART_IRQHandler+0x17a>
 80069ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d04f      	beq.n	8006a92 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 fa96 	bl	8006f24 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	695b      	ldr	r3, [r3, #20]
 80069fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a02:	2b40      	cmp	r3, #64	; 0x40
 8006a04:	d141      	bne.n	8006a8a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	3314      	adds	r3, #20
 8006a0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a10:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006a14:	e853 3f00 	ldrex	r3, [r3]
 8006a18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006a1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	3314      	adds	r3, #20
 8006a2e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006a32:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006a36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a3a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006a3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006a42:	e841 2300 	strex	r3, r2, [r1]
 8006a46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006a4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d1d9      	bne.n	8006a06 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d013      	beq.n	8006a82 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a5e:	4a7d      	ldr	r2, [pc, #500]	; (8006c54 <HAL_UART_IRQHandler+0x3dc>)
 8006a60:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a66:	4618      	mov	r0, r3
 8006a68:	f7fb fe00 	bl	800266c <HAL_DMA_Abort_IT>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d016      	beq.n	8006aa0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006a7c:	4610      	mov	r0, r2
 8006a7e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a80:	e00e      	b.n	8006aa0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 f990 	bl	8006da8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a88:	e00a      	b.n	8006aa0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 f98c 	bl	8006da8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a90:	e006      	b.n	8006aa0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 f988 	bl	8006da8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006a9e:	e170      	b.n	8006d82 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aa0:	bf00      	nop
    return;
 8006aa2:	e16e      	b.n	8006d82 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	f040 814a 	bne.w	8006d42 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ab2:	f003 0310 	and.w	r3, r3, #16
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	f000 8143 	beq.w	8006d42 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006abc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ac0:	f003 0310 	and.w	r3, r3, #16
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	f000 813c 	beq.w	8006d42 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006aca:	2300      	movs	r3, #0
 8006acc:	60bb      	str	r3, [r7, #8]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	60bb      	str	r3, [r7, #8]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	60bb      	str	r3, [r7, #8]
 8006ade:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	695b      	ldr	r3, [r3, #20]
 8006ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aea:	2b40      	cmp	r3, #64	; 0x40
 8006aec:	f040 80b4 	bne.w	8006c58 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006afc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	f000 8140 	beq.w	8006d86 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006b0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	f080 8139 	bcs.w	8006d86 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006b1a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b20:	69db      	ldr	r3, [r3, #28]
 8006b22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b26:	f000 8088 	beq.w	8006c3a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	330c      	adds	r3, #12
 8006b30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b38:	e853 3f00 	ldrex	r3, [r3]
 8006b3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006b40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	330c      	adds	r3, #12
 8006b52:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006b56:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006b5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b5e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006b62:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006b66:	e841 2300 	strex	r3, r2, [r1]
 8006b6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006b6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d1d9      	bne.n	8006b2a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	3314      	adds	r3, #20
 8006b7c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b80:	e853 3f00 	ldrex	r3, [r3]
 8006b84:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006b86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b88:	f023 0301 	bic.w	r3, r3, #1
 8006b8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	3314      	adds	r3, #20
 8006b96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006b9a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006b9e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006ba2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006ba6:	e841 2300 	strex	r3, r2, [r1]
 8006baa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006bac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d1e1      	bne.n	8006b76 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	3314      	adds	r3, #20
 8006bb8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006bbc:	e853 3f00 	ldrex	r3, [r3]
 8006bc0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006bc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006bc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	3314      	adds	r3, #20
 8006bd2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006bd6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006bd8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bda:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006bdc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006bde:	e841 2300 	strex	r3, r2, [r1]
 8006be2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006be4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d1e3      	bne.n	8006bb2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2220      	movs	r2, #32
 8006bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	330c      	adds	r3, #12
 8006bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c02:	e853 3f00 	ldrex	r3, [r3]
 8006c06:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006c08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c0a:	f023 0310 	bic.w	r3, r3, #16
 8006c0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	330c      	adds	r3, #12
 8006c18:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006c1c:	65ba      	str	r2, [r7, #88]	; 0x58
 8006c1e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c20:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006c22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c24:	e841 2300 	strex	r3, r2, [r1]
 8006c28:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006c2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d1e3      	bne.n	8006bf8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c34:	4618      	mov	r0, r3
 8006c36:	f7fb fca9 	bl	800258c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	1ad3      	subs	r3, r2, r3
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	4619      	mov	r1, r3
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 f8b6 	bl	8006dbc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c50:	e099      	b.n	8006d86 <HAL_UART_IRQHandler+0x50e>
 8006c52:	bf00      	nop
 8006c54:	08006feb 	.word	0x08006feb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	1ad3      	subs	r3, r2, r3
 8006c64:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	f000 808b 	beq.w	8006d8a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006c74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	f000 8086 	beq.w	8006d8a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	330c      	adds	r3, #12
 8006c84:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c88:	e853 3f00 	ldrex	r3, [r3]
 8006c8c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c94:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	330c      	adds	r3, #12
 8006c9e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006ca2:	647a      	str	r2, [r7, #68]	; 0x44
 8006ca4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ca8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006caa:	e841 2300 	strex	r3, r2, [r1]
 8006cae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006cb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d1e3      	bne.n	8006c7e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	3314      	adds	r3, #20
 8006cbc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc0:	e853 3f00 	ldrex	r3, [r3]
 8006cc4:	623b      	str	r3, [r7, #32]
   return(result);
 8006cc6:	6a3b      	ldr	r3, [r7, #32]
 8006cc8:	f023 0301 	bic.w	r3, r3, #1
 8006ccc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	3314      	adds	r3, #20
 8006cd6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006cda:	633a      	str	r2, [r7, #48]	; 0x30
 8006cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ce0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ce2:	e841 2300 	strex	r3, r2, [r1]
 8006ce6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d1e3      	bne.n	8006cb6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2220      	movs	r2, #32
 8006cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	330c      	adds	r3, #12
 8006d02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	e853 3f00 	ldrex	r3, [r3]
 8006d0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f023 0310 	bic.w	r3, r3, #16
 8006d12:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	330c      	adds	r3, #12
 8006d1c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006d20:	61fa      	str	r2, [r7, #28]
 8006d22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d24:	69b9      	ldr	r1, [r7, #24]
 8006d26:	69fa      	ldr	r2, [r7, #28]
 8006d28:	e841 2300 	strex	r3, r2, [r1]
 8006d2c:	617b      	str	r3, [r7, #20]
   return(result);
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d1e3      	bne.n	8006cfc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d38:	4619      	mov	r1, r3
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 f83e 	bl	8006dbc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d40:	e023      	b.n	8006d8a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d009      	beq.n	8006d62 <HAL_UART_IRQHandler+0x4ea>
 8006d4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d003      	beq.n	8006d62 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 f959 	bl	8007012 <UART_Transmit_IT>
    return;
 8006d60:	e014      	b.n	8006d8c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d00e      	beq.n	8006d8c <HAL_UART_IRQHandler+0x514>
 8006d6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d008      	beq.n	8006d8c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 f999 	bl	80070b2 <UART_EndTransmit_IT>
    return;
 8006d80:	e004      	b.n	8006d8c <HAL_UART_IRQHandler+0x514>
    return;
 8006d82:	bf00      	nop
 8006d84:	e002      	b.n	8006d8c <HAL_UART_IRQHandler+0x514>
      return;
 8006d86:	bf00      	nop
 8006d88:	e000      	b.n	8006d8c <HAL_UART_IRQHandler+0x514>
      return;
 8006d8a:	bf00      	nop
  }
}
 8006d8c:	37e8      	adds	r7, #232	; 0xe8
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}
 8006d92:	bf00      	nop

08006d94 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b083      	sub	sp, #12
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006d9c:	bf00      	nop
 8006d9e:	370c      	adds	r7, #12
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr

08006da8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006db0:	bf00      	nop
 8006db2:	370c      	adds	r7, #12
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	460b      	mov	r3, r1
 8006dc6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006dc8:	bf00      	nop
 8006dca:	370c      	adds	r7, #12
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b090      	sub	sp, #64	; 0x40
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	60b9      	str	r1, [r7, #8]
 8006dde:	603b      	str	r3, [r7, #0]
 8006de0:	4613      	mov	r3, r2
 8006de2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006de4:	e050      	b.n	8006e88 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006de6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dec:	d04c      	beq.n	8006e88 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006dee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d007      	beq.n	8006e04 <UART_WaitOnFlagUntilTimeout+0x30>
 8006df4:	f7fb fab8 	bl	8002368 <HAL_GetTick>
 8006df8:	4602      	mov	r2, r0
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	1ad3      	subs	r3, r2, r3
 8006dfe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d241      	bcs.n	8006e88 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	330c      	adds	r3, #12
 8006e0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e0e:	e853 3f00 	ldrex	r3, [r3]
 8006e12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e16:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	330c      	adds	r3, #12
 8006e22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006e24:	637a      	str	r2, [r7, #52]	; 0x34
 8006e26:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e2c:	e841 2300 	strex	r3, r2, [r1]
 8006e30:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d1e5      	bne.n	8006e04 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	3314      	adds	r3, #20
 8006e3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	e853 3f00 	ldrex	r3, [r3]
 8006e46:	613b      	str	r3, [r7, #16]
   return(result);
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	f023 0301 	bic.w	r3, r3, #1
 8006e4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	3314      	adds	r3, #20
 8006e56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e58:	623a      	str	r2, [r7, #32]
 8006e5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e5c:	69f9      	ldr	r1, [r7, #28]
 8006e5e:	6a3a      	ldr	r2, [r7, #32]
 8006e60:	e841 2300 	strex	r3, r2, [r1]
 8006e64:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e66:	69bb      	ldr	r3, [r7, #24]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d1e5      	bne.n	8006e38 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2220      	movs	r2, #32
 8006e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2220      	movs	r2, #32
 8006e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006e84:	2303      	movs	r3, #3
 8006e86:	e00f      	b.n	8006ea8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	4013      	ands	r3, r2
 8006e92:	68ba      	ldr	r2, [r7, #8]
 8006e94:	429a      	cmp	r2, r3
 8006e96:	bf0c      	ite	eq
 8006e98:	2301      	moveq	r3, #1
 8006e9a:	2300      	movne	r3, #0
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	79fb      	ldrb	r3, [r7, #7]
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d09f      	beq.n	8006de6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006ea6:	2300      	movs	r3, #0
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3740      	adds	r7, #64	; 0x40
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b085      	sub	sp, #20
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	4613      	mov	r3, r2
 8006ebc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	68ba      	ldr	r2, [r7, #8]
 8006ec2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	88fa      	ldrh	r2, [r7, #6]
 8006ec8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	88fa      	ldrh	r2, [r7, #6]
 8006ece:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2222      	movs	r2, #34	; 0x22
 8006eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	68da      	ldr	r2, [r3, #12]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ef4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	695a      	ldr	r2, [r3, #20]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f042 0201 	orr.w	r2, r2, #1
 8006f04:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	68da      	ldr	r2, [r3, #12]
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f042 0220 	orr.w	r2, r2, #32
 8006f14:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006f16:	2300      	movs	r3, #0
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3714      	adds	r7, #20
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b095      	sub	sp, #84	; 0x54
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	330c      	adds	r3, #12
 8006f32:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f36:	e853 3f00 	ldrex	r3, [r3]
 8006f3a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f3e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	330c      	adds	r3, #12
 8006f4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f4c:	643a      	str	r2, [r7, #64]	; 0x40
 8006f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f50:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f54:	e841 2300 	strex	r3, r2, [r1]
 8006f58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d1e5      	bne.n	8006f2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	3314      	adds	r3, #20
 8006f66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f68:	6a3b      	ldr	r3, [r7, #32]
 8006f6a:	e853 3f00 	ldrex	r3, [r3]
 8006f6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f70:	69fb      	ldr	r3, [r7, #28]
 8006f72:	f023 0301 	bic.w	r3, r3, #1
 8006f76:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	3314      	adds	r3, #20
 8006f7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f80:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f88:	e841 2300 	strex	r3, r2, [r1]
 8006f8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d1e5      	bne.n	8006f60 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d119      	bne.n	8006fd0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	330c      	adds	r3, #12
 8006fa2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	e853 3f00 	ldrex	r3, [r3]
 8006faa:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	f023 0310 	bic.w	r3, r3, #16
 8006fb2:	647b      	str	r3, [r7, #68]	; 0x44
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	330c      	adds	r3, #12
 8006fba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006fbc:	61ba      	str	r2, [r7, #24]
 8006fbe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc0:	6979      	ldr	r1, [r7, #20]
 8006fc2:	69ba      	ldr	r2, [r7, #24]
 8006fc4:	e841 2300 	strex	r3, r2, [r1]
 8006fc8:	613b      	str	r3, [r7, #16]
   return(result);
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d1e5      	bne.n	8006f9c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2220      	movs	r2, #32
 8006fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006fde:	bf00      	nop
 8006fe0:	3754      	adds	r7, #84	; 0x54
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr

08006fea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006fea:	b580      	push	{r7, lr}
 8006fec:	b084      	sub	sp, #16
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2200      	movs	r2, #0
 8007002:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007004:	68f8      	ldr	r0, [r7, #12]
 8007006:	f7ff fecf 	bl	8006da8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800700a:	bf00      	nop
 800700c:	3710      	adds	r7, #16
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}

08007012 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007012:	b480      	push	{r7}
 8007014:	b085      	sub	sp, #20
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007020:	b2db      	uxtb	r3, r3
 8007022:	2b21      	cmp	r3, #33	; 0x21
 8007024:	d13e      	bne.n	80070a4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800702e:	d114      	bne.n	800705a <UART_Transmit_IT+0x48>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d110      	bne.n	800705a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6a1b      	ldr	r3, [r3, #32]
 800703c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	881b      	ldrh	r3, [r3, #0]
 8007042:	461a      	mov	r2, r3
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800704c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6a1b      	ldr	r3, [r3, #32]
 8007052:	1c9a      	adds	r2, r3, #2
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	621a      	str	r2, [r3, #32]
 8007058:	e008      	b.n	800706c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6a1b      	ldr	r3, [r3, #32]
 800705e:	1c59      	adds	r1, r3, #1
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	6211      	str	r1, [r2, #32]
 8007064:	781a      	ldrb	r2, [r3, #0]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007070:	b29b      	uxth	r3, r3
 8007072:	3b01      	subs	r3, #1
 8007074:	b29b      	uxth	r3, r3
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	4619      	mov	r1, r3
 800707a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800707c:	2b00      	cmp	r3, #0
 800707e:	d10f      	bne.n	80070a0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	68da      	ldr	r2, [r3, #12]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800708e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	68da      	ldr	r2, [r3, #12]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800709e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80070a0:	2300      	movs	r3, #0
 80070a2:	e000      	b.n	80070a6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80070a4:	2302      	movs	r3, #2
  }
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3714      	adds	r7, #20
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr

080070b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80070b2:	b580      	push	{r7, lr}
 80070b4:	b082      	sub	sp, #8
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	68da      	ldr	r2, [r3, #12]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2220      	movs	r2, #32
 80070ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f7ff fe5e 	bl	8006d94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80070d8:	2300      	movs	r3, #0
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3708      	adds	r7, #8
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}

080070e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80070e2:	b580      	push	{r7, lr}
 80070e4:	b08c      	sub	sp, #48	; 0x30
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	2b22      	cmp	r3, #34	; 0x22
 80070f4:	f040 80ab 	bne.w	800724e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007100:	d117      	bne.n	8007132 <UART_Receive_IT+0x50>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	691b      	ldr	r3, [r3, #16]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d113      	bne.n	8007132 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800710a:	2300      	movs	r3, #0
 800710c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007112:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	b29b      	uxth	r3, r3
 800711c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007120:	b29a      	uxth	r2, r3
 8007122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007124:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800712a:	1c9a      	adds	r2, r3, #2
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	629a      	str	r2, [r3, #40]	; 0x28
 8007130:	e026      	b.n	8007180 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007136:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007138:	2300      	movs	r3, #0
 800713a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007144:	d007      	beq.n	8007156 <UART_Receive_IT+0x74>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	689b      	ldr	r3, [r3, #8]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d10a      	bne.n	8007164 <UART_Receive_IT+0x82>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d106      	bne.n	8007164 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	b2da      	uxtb	r2, r3
 800715e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007160:	701a      	strb	r2, [r3, #0]
 8007162:	e008      	b.n	8007176 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	b2db      	uxtb	r3, r3
 800716c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007170:	b2da      	uxtb	r2, r3
 8007172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007174:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800717a:	1c5a      	adds	r2, r3, #1
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007184:	b29b      	uxth	r3, r3
 8007186:	3b01      	subs	r3, #1
 8007188:	b29b      	uxth	r3, r3
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	4619      	mov	r1, r3
 800718e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007190:	2b00      	cmp	r3, #0
 8007192:	d15a      	bne.n	800724a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	68da      	ldr	r2, [r3, #12]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f022 0220 	bic.w	r2, r2, #32
 80071a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	68da      	ldr	r2, [r3, #12]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80071b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	695a      	ldr	r2, [r3, #20]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f022 0201 	bic.w	r2, r2, #1
 80071c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2220      	movs	r2, #32
 80071c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d135      	bne.n	8007240 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	330c      	adds	r3, #12
 80071e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	e853 3f00 	ldrex	r3, [r3]
 80071e8:	613b      	str	r3, [r7, #16]
   return(result);
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	f023 0310 	bic.w	r3, r3, #16
 80071f0:	627b      	str	r3, [r7, #36]	; 0x24
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	330c      	adds	r3, #12
 80071f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071fa:	623a      	str	r2, [r7, #32]
 80071fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071fe:	69f9      	ldr	r1, [r7, #28]
 8007200:	6a3a      	ldr	r2, [r7, #32]
 8007202:	e841 2300 	strex	r3, r2, [r1]
 8007206:	61bb      	str	r3, [r7, #24]
   return(result);
 8007208:	69bb      	ldr	r3, [r7, #24]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d1e5      	bne.n	80071da <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f003 0310 	and.w	r3, r3, #16
 8007218:	2b10      	cmp	r3, #16
 800721a:	d10a      	bne.n	8007232 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800721c:	2300      	movs	r3, #0
 800721e:	60fb      	str	r3, [r7, #12]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	60fb      	str	r3, [r7, #12]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	60fb      	str	r3, [r7, #12]
 8007230:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007236:	4619      	mov	r1, r3
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f7ff fdbf 	bl	8006dbc <HAL_UARTEx_RxEventCallback>
 800723e:	e002      	b.n	8007246 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f7fa f8c5 	bl	80013d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007246:	2300      	movs	r3, #0
 8007248:	e002      	b.n	8007250 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800724a:	2300      	movs	r3, #0
 800724c:	e000      	b.n	8007250 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800724e:	2302      	movs	r3, #2
  }
}
 8007250:	4618      	mov	r0, r3
 8007252:	3730      	adds	r7, #48	; 0x30
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800725c:	b09f      	sub	sp, #124	; 0x7c
 800725e:	af00      	add	r7, sp, #0
 8007260:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007262:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	691b      	ldr	r3, [r3, #16]
 8007268:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800726c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800726e:	68d9      	ldr	r1, [r3, #12]
 8007270:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	ea40 0301 	orr.w	r3, r0, r1
 8007278:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800727a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800727c:	689a      	ldr	r2, [r3, #8]
 800727e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007280:	691b      	ldr	r3, [r3, #16]
 8007282:	431a      	orrs	r2, r3
 8007284:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007286:	695b      	ldr	r3, [r3, #20]
 8007288:	431a      	orrs	r2, r3
 800728a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800728c:	69db      	ldr	r3, [r3, #28]
 800728e:	4313      	orrs	r3, r2
 8007290:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007292:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	68db      	ldr	r3, [r3, #12]
 8007298:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800729c:	f021 010c 	bic.w	r1, r1, #12
 80072a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80072a6:	430b      	orrs	r3, r1
 80072a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80072aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	695b      	ldr	r3, [r3, #20]
 80072b0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80072b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072b6:	6999      	ldr	r1, [r3, #24]
 80072b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	ea40 0301 	orr.w	r3, r0, r1
 80072c0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80072c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	4bc5      	ldr	r3, [pc, #788]	; (80075dc <UART_SetConfig+0x384>)
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d004      	beq.n	80072d6 <UART_SetConfig+0x7e>
 80072cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	4bc3      	ldr	r3, [pc, #780]	; (80075e0 <UART_SetConfig+0x388>)
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d103      	bne.n	80072de <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80072d6:	f7fe fe29 	bl	8005f2c <HAL_RCC_GetPCLK2Freq>
 80072da:	6778      	str	r0, [r7, #116]	; 0x74
 80072dc:	e002      	b.n	80072e4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80072de:	f7fe fe11 	bl	8005f04 <HAL_RCC_GetPCLK1Freq>
 80072e2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072e6:	69db      	ldr	r3, [r3, #28]
 80072e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072ec:	f040 80b6 	bne.w	800745c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80072f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072f2:	461c      	mov	r4, r3
 80072f4:	f04f 0500 	mov.w	r5, #0
 80072f8:	4622      	mov	r2, r4
 80072fa:	462b      	mov	r3, r5
 80072fc:	1891      	adds	r1, r2, r2
 80072fe:	6439      	str	r1, [r7, #64]	; 0x40
 8007300:	415b      	adcs	r3, r3
 8007302:	647b      	str	r3, [r7, #68]	; 0x44
 8007304:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007308:	1912      	adds	r2, r2, r4
 800730a:	eb45 0303 	adc.w	r3, r5, r3
 800730e:	f04f 0000 	mov.w	r0, #0
 8007312:	f04f 0100 	mov.w	r1, #0
 8007316:	00d9      	lsls	r1, r3, #3
 8007318:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800731c:	00d0      	lsls	r0, r2, #3
 800731e:	4602      	mov	r2, r0
 8007320:	460b      	mov	r3, r1
 8007322:	1911      	adds	r1, r2, r4
 8007324:	6639      	str	r1, [r7, #96]	; 0x60
 8007326:	416b      	adcs	r3, r5
 8007328:	667b      	str	r3, [r7, #100]	; 0x64
 800732a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	461a      	mov	r2, r3
 8007330:	f04f 0300 	mov.w	r3, #0
 8007334:	1891      	adds	r1, r2, r2
 8007336:	63b9      	str	r1, [r7, #56]	; 0x38
 8007338:	415b      	adcs	r3, r3
 800733a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800733c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007340:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007344:	f7f8 ff94 	bl	8000270 <__aeabi_uldivmod>
 8007348:	4602      	mov	r2, r0
 800734a:	460b      	mov	r3, r1
 800734c:	4ba5      	ldr	r3, [pc, #660]	; (80075e4 <UART_SetConfig+0x38c>)
 800734e:	fba3 2302 	umull	r2, r3, r3, r2
 8007352:	095b      	lsrs	r3, r3, #5
 8007354:	011e      	lsls	r6, r3, #4
 8007356:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007358:	461c      	mov	r4, r3
 800735a:	f04f 0500 	mov.w	r5, #0
 800735e:	4622      	mov	r2, r4
 8007360:	462b      	mov	r3, r5
 8007362:	1891      	adds	r1, r2, r2
 8007364:	6339      	str	r1, [r7, #48]	; 0x30
 8007366:	415b      	adcs	r3, r3
 8007368:	637b      	str	r3, [r7, #52]	; 0x34
 800736a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800736e:	1912      	adds	r2, r2, r4
 8007370:	eb45 0303 	adc.w	r3, r5, r3
 8007374:	f04f 0000 	mov.w	r0, #0
 8007378:	f04f 0100 	mov.w	r1, #0
 800737c:	00d9      	lsls	r1, r3, #3
 800737e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007382:	00d0      	lsls	r0, r2, #3
 8007384:	4602      	mov	r2, r0
 8007386:	460b      	mov	r3, r1
 8007388:	1911      	adds	r1, r2, r4
 800738a:	65b9      	str	r1, [r7, #88]	; 0x58
 800738c:	416b      	adcs	r3, r5
 800738e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007390:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	461a      	mov	r2, r3
 8007396:	f04f 0300 	mov.w	r3, #0
 800739a:	1891      	adds	r1, r2, r2
 800739c:	62b9      	str	r1, [r7, #40]	; 0x28
 800739e:	415b      	adcs	r3, r3
 80073a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80073a6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80073aa:	f7f8 ff61 	bl	8000270 <__aeabi_uldivmod>
 80073ae:	4602      	mov	r2, r0
 80073b0:	460b      	mov	r3, r1
 80073b2:	4b8c      	ldr	r3, [pc, #560]	; (80075e4 <UART_SetConfig+0x38c>)
 80073b4:	fba3 1302 	umull	r1, r3, r3, r2
 80073b8:	095b      	lsrs	r3, r3, #5
 80073ba:	2164      	movs	r1, #100	; 0x64
 80073bc:	fb01 f303 	mul.w	r3, r1, r3
 80073c0:	1ad3      	subs	r3, r2, r3
 80073c2:	00db      	lsls	r3, r3, #3
 80073c4:	3332      	adds	r3, #50	; 0x32
 80073c6:	4a87      	ldr	r2, [pc, #540]	; (80075e4 <UART_SetConfig+0x38c>)
 80073c8:	fba2 2303 	umull	r2, r3, r2, r3
 80073cc:	095b      	lsrs	r3, r3, #5
 80073ce:	005b      	lsls	r3, r3, #1
 80073d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80073d4:	441e      	add	r6, r3
 80073d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073d8:	4618      	mov	r0, r3
 80073da:	f04f 0100 	mov.w	r1, #0
 80073de:	4602      	mov	r2, r0
 80073e0:	460b      	mov	r3, r1
 80073e2:	1894      	adds	r4, r2, r2
 80073e4:	623c      	str	r4, [r7, #32]
 80073e6:	415b      	adcs	r3, r3
 80073e8:	627b      	str	r3, [r7, #36]	; 0x24
 80073ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80073ee:	1812      	adds	r2, r2, r0
 80073f0:	eb41 0303 	adc.w	r3, r1, r3
 80073f4:	f04f 0400 	mov.w	r4, #0
 80073f8:	f04f 0500 	mov.w	r5, #0
 80073fc:	00dd      	lsls	r5, r3, #3
 80073fe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007402:	00d4      	lsls	r4, r2, #3
 8007404:	4622      	mov	r2, r4
 8007406:	462b      	mov	r3, r5
 8007408:	1814      	adds	r4, r2, r0
 800740a:	653c      	str	r4, [r7, #80]	; 0x50
 800740c:	414b      	adcs	r3, r1
 800740e:	657b      	str	r3, [r7, #84]	; 0x54
 8007410:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	461a      	mov	r2, r3
 8007416:	f04f 0300 	mov.w	r3, #0
 800741a:	1891      	adds	r1, r2, r2
 800741c:	61b9      	str	r1, [r7, #24]
 800741e:	415b      	adcs	r3, r3
 8007420:	61fb      	str	r3, [r7, #28]
 8007422:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007426:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800742a:	f7f8 ff21 	bl	8000270 <__aeabi_uldivmod>
 800742e:	4602      	mov	r2, r0
 8007430:	460b      	mov	r3, r1
 8007432:	4b6c      	ldr	r3, [pc, #432]	; (80075e4 <UART_SetConfig+0x38c>)
 8007434:	fba3 1302 	umull	r1, r3, r3, r2
 8007438:	095b      	lsrs	r3, r3, #5
 800743a:	2164      	movs	r1, #100	; 0x64
 800743c:	fb01 f303 	mul.w	r3, r1, r3
 8007440:	1ad3      	subs	r3, r2, r3
 8007442:	00db      	lsls	r3, r3, #3
 8007444:	3332      	adds	r3, #50	; 0x32
 8007446:	4a67      	ldr	r2, [pc, #412]	; (80075e4 <UART_SetConfig+0x38c>)
 8007448:	fba2 2303 	umull	r2, r3, r2, r3
 800744c:	095b      	lsrs	r3, r3, #5
 800744e:	f003 0207 	and.w	r2, r3, #7
 8007452:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4432      	add	r2, r6
 8007458:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800745a:	e0b9      	b.n	80075d0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800745c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800745e:	461c      	mov	r4, r3
 8007460:	f04f 0500 	mov.w	r5, #0
 8007464:	4622      	mov	r2, r4
 8007466:	462b      	mov	r3, r5
 8007468:	1891      	adds	r1, r2, r2
 800746a:	6139      	str	r1, [r7, #16]
 800746c:	415b      	adcs	r3, r3
 800746e:	617b      	str	r3, [r7, #20]
 8007470:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007474:	1912      	adds	r2, r2, r4
 8007476:	eb45 0303 	adc.w	r3, r5, r3
 800747a:	f04f 0000 	mov.w	r0, #0
 800747e:	f04f 0100 	mov.w	r1, #0
 8007482:	00d9      	lsls	r1, r3, #3
 8007484:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007488:	00d0      	lsls	r0, r2, #3
 800748a:	4602      	mov	r2, r0
 800748c:	460b      	mov	r3, r1
 800748e:	eb12 0804 	adds.w	r8, r2, r4
 8007492:	eb43 0905 	adc.w	r9, r3, r5
 8007496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	4618      	mov	r0, r3
 800749c:	f04f 0100 	mov.w	r1, #0
 80074a0:	f04f 0200 	mov.w	r2, #0
 80074a4:	f04f 0300 	mov.w	r3, #0
 80074a8:	008b      	lsls	r3, r1, #2
 80074aa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80074ae:	0082      	lsls	r2, r0, #2
 80074b0:	4640      	mov	r0, r8
 80074b2:	4649      	mov	r1, r9
 80074b4:	f7f8 fedc 	bl	8000270 <__aeabi_uldivmod>
 80074b8:	4602      	mov	r2, r0
 80074ba:	460b      	mov	r3, r1
 80074bc:	4b49      	ldr	r3, [pc, #292]	; (80075e4 <UART_SetConfig+0x38c>)
 80074be:	fba3 2302 	umull	r2, r3, r3, r2
 80074c2:	095b      	lsrs	r3, r3, #5
 80074c4:	011e      	lsls	r6, r3, #4
 80074c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074c8:	4618      	mov	r0, r3
 80074ca:	f04f 0100 	mov.w	r1, #0
 80074ce:	4602      	mov	r2, r0
 80074d0:	460b      	mov	r3, r1
 80074d2:	1894      	adds	r4, r2, r2
 80074d4:	60bc      	str	r4, [r7, #8]
 80074d6:	415b      	adcs	r3, r3
 80074d8:	60fb      	str	r3, [r7, #12]
 80074da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80074de:	1812      	adds	r2, r2, r0
 80074e0:	eb41 0303 	adc.w	r3, r1, r3
 80074e4:	f04f 0400 	mov.w	r4, #0
 80074e8:	f04f 0500 	mov.w	r5, #0
 80074ec:	00dd      	lsls	r5, r3, #3
 80074ee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80074f2:	00d4      	lsls	r4, r2, #3
 80074f4:	4622      	mov	r2, r4
 80074f6:	462b      	mov	r3, r5
 80074f8:	1814      	adds	r4, r2, r0
 80074fa:	64bc      	str	r4, [r7, #72]	; 0x48
 80074fc:	414b      	adcs	r3, r1
 80074fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007500:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	4618      	mov	r0, r3
 8007506:	f04f 0100 	mov.w	r1, #0
 800750a:	f04f 0200 	mov.w	r2, #0
 800750e:	f04f 0300 	mov.w	r3, #0
 8007512:	008b      	lsls	r3, r1, #2
 8007514:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007518:	0082      	lsls	r2, r0, #2
 800751a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800751e:	f7f8 fea7 	bl	8000270 <__aeabi_uldivmod>
 8007522:	4602      	mov	r2, r0
 8007524:	460b      	mov	r3, r1
 8007526:	4b2f      	ldr	r3, [pc, #188]	; (80075e4 <UART_SetConfig+0x38c>)
 8007528:	fba3 1302 	umull	r1, r3, r3, r2
 800752c:	095b      	lsrs	r3, r3, #5
 800752e:	2164      	movs	r1, #100	; 0x64
 8007530:	fb01 f303 	mul.w	r3, r1, r3
 8007534:	1ad3      	subs	r3, r2, r3
 8007536:	011b      	lsls	r3, r3, #4
 8007538:	3332      	adds	r3, #50	; 0x32
 800753a:	4a2a      	ldr	r2, [pc, #168]	; (80075e4 <UART_SetConfig+0x38c>)
 800753c:	fba2 2303 	umull	r2, r3, r2, r3
 8007540:	095b      	lsrs	r3, r3, #5
 8007542:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007546:	441e      	add	r6, r3
 8007548:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800754a:	4618      	mov	r0, r3
 800754c:	f04f 0100 	mov.w	r1, #0
 8007550:	4602      	mov	r2, r0
 8007552:	460b      	mov	r3, r1
 8007554:	1894      	adds	r4, r2, r2
 8007556:	603c      	str	r4, [r7, #0]
 8007558:	415b      	adcs	r3, r3
 800755a:	607b      	str	r3, [r7, #4]
 800755c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007560:	1812      	adds	r2, r2, r0
 8007562:	eb41 0303 	adc.w	r3, r1, r3
 8007566:	f04f 0400 	mov.w	r4, #0
 800756a:	f04f 0500 	mov.w	r5, #0
 800756e:	00dd      	lsls	r5, r3, #3
 8007570:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007574:	00d4      	lsls	r4, r2, #3
 8007576:	4622      	mov	r2, r4
 8007578:	462b      	mov	r3, r5
 800757a:	eb12 0a00 	adds.w	sl, r2, r0
 800757e:	eb43 0b01 	adc.w	fp, r3, r1
 8007582:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	4618      	mov	r0, r3
 8007588:	f04f 0100 	mov.w	r1, #0
 800758c:	f04f 0200 	mov.w	r2, #0
 8007590:	f04f 0300 	mov.w	r3, #0
 8007594:	008b      	lsls	r3, r1, #2
 8007596:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800759a:	0082      	lsls	r2, r0, #2
 800759c:	4650      	mov	r0, sl
 800759e:	4659      	mov	r1, fp
 80075a0:	f7f8 fe66 	bl	8000270 <__aeabi_uldivmod>
 80075a4:	4602      	mov	r2, r0
 80075a6:	460b      	mov	r3, r1
 80075a8:	4b0e      	ldr	r3, [pc, #56]	; (80075e4 <UART_SetConfig+0x38c>)
 80075aa:	fba3 1302 	umull	r1, r3, r3, r2
 80075ae:	095b      	lsrs	r3, r3, #5
 80075b0:	2164      	movs	r1, #100	; 0x64
 80075b2:	fb01 f303 	mul.w	r3, r1, r3
 80075b6:	1ad3      	subs	r3, r2, r3
 80075b8:	011b      	lsls	r3, r3, #4
 80075ba:	3332      	adds	r3, #50	; 0x32
 80075bc:	4a09      	ldr	r2, [pc, #36]	; (80075e4 <UART_SetConfig+0x38c>)
 80075be:	fba2 2303 	umull	r2, r3, r2, r3
 80075c2:	095b      	lsrs	r3, r3, #5
 80075c4:	f003 020f 	and.w	r2, r3, #15
 80075c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4432      	add	r2, r6
 80075ce:	609a      	str	r2, [r3, #8]
}
 80075d0:	bf00      	nop
 80075d2:	377c      	adds	r7, #124	; 0x7c
 80075d4:	46bd      	mov	sp, r7
 80075d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075da:	bf00      	nop
 80075dc:	40011000 	.word	0x40011000
 80075e0:	40011400 	.word	0x40011400
 80075e4:	51eb851f 	.word	0x51eb851f

080075e8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b085      	sub	sp, #20
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	4603      	mov	r3, r0
 80075f0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80075f2:	2300      	movs	r3, #0
 80075f4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80075f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80075fa:	2b84      	cmp	r3, #132	; 0x84
 80075fc:	d005      	beq.n	800760a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80075fe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	4413      	add	r3, r2
 8007606:	3303      	adds	r3, #3
 8007608:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800760a:	68fb      	ldr	r3, [r7, #12]
}
 800760c:	4618      	mov	r0, r3
 800760e:	3714      	adds	r7, #20
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800761c:	f000 faf6 	bl	8007c0c <vTaskStartScheduler>
  
  return osOK;
 8007620:	2300      	movs	r3, #0
}
 8007622:	4618      	mov	r0, r3
 8007624:	bd80      	pop	{r7, pc}

08007626 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007626:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007628:	b089      	sub	sp, #36	; 0x24
 800762a:	af04      	add	r7, sp, #16
 800762c:	6078      	str	r0, [r7, #4]
 800762e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	695b      	ldr	r3, [r3, #20]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d020      	beq.n	800767a <osThreadCreate+0x54>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	699b      	ldr	r3, [r3, #24]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d01c      	beq.n	800767a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	685c      	ldr	r4, [r3, #4]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681d      	ldr	r5, [r3, #0]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	691e      	ldr	r6, [r3, #16]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007652:	4618      	mov	r0, r3
 8007654:	f7ff ffc8 	bl	80075e8 <makeFreeRtosPriority>
 8007658:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	695b      	ldr	r3, [r3, #20]
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007662:	9202      	str	r2, [sp, #8]
 8007664:	9301      	str	r3, [sp, #4]
 8007666:	9100      	str	r1, [sp, #0]
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	4632      	mov	r2, r6
 800766c:	4629      	mov	r1, r5
 800766e:	4620      	mov	r0, r4
 8007670:	f000 f8ed 	bl	800784e <xTaskCreateStatic>
 8007674:	4603      	mov	r3, r0
 8007676:	60fb      	str	r3, [r7, #12]
 8007678:	e01c      	b.n	80076b4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	685c      	ldr	r4, [r3, #4]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007686:	b29e      	uxth	r6, r3
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800768e:	4618      	mov	r0, r3
 8007690:	f7ff ffaa 	bl	80075e8 <makeFreeRtosPriority>
 8007694:	4602      	mov	r2, r0
 8007696:	f107 030c 	add.w	r3, r7, #12
 800769a:	9301      	str	r3, [sp, #4]
 800769c:	9200      	str	r2, [sp, #0]
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	4632      	mov	r2, r6
 80076a2:	4629      	mov	r1, r5
 80076a4:	4620      	mov	r0, r4
 80076a6:	f000 f92f 	bl	8007908 <xTaskCreate>
 80076aa:	4603      	mov	r3, r0
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d001      	beq.n	80076b4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80076b0:	2300      	movs	r3, #0
 80076b2:	e000      	b.n	80076b6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80076b4:	68fb      	ldr	r3, [r7, #12]
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3714      	adds	r7, #20
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080076be <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80076be:	b580      	push	{r7, lr}
 80076c0:	b084      	sub	sp, #16
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d001      	beq.n	80076d4 <osDelay+0x16>
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	e000      	b.n	80076d6 <osDelay+0x18>
 80076d4:	2301      	movs	r3, #1
 80076d6:	4618      	mov	r0, r3
 80076d8:	f000 fa64 	bl	8007ba4 <vTaskDelay>
  
  return osOK;
 80076dc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3710      	adds	r7, #16
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80076e6:	b480      	push	{r7}
 80076e8:	b083      	sub	sp, #12
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f103 0208 	add.w	r2, r3, #8
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f04f 32ff 	mov.w	r2, #4294967295
 80076fe:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f103 0208 	add.w	r2, r3, #8
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f103 0208 	add.w	r2, r3, #8
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2200      	movs	r2, #0
 8007718:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800771a:	bf00      	nop
 800771c:	370c      	adds	r7, #12
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr

08007726 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007726:	b480      	push	{r7}
 8007728:	b083      	sub	sp, #12
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2200      	movs	r2, #0
 8007732:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007734:	bf00      	nop
 8007736:	370c      	adds	r7, #12
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr

08007740 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007740:	b480      	push	{r7}
 8007742:	b085      	sub	sp, #20
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	68fa      	ldr	r2, [r7, #12]
 8007754:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	689a      	ldr	r2, [r3, #8]
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	683a      	ldr	r2, [r7, #0]
 8007764:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	683a      	ldr	r2, [r7, #0]
 800776a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	1c5a      	adds	r2, r3, #1
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	601a      	str	r2, [r3, #0]
}
 800777c:	bf00      	nop
 800777e:	3714      	adds	r7, #20
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr

08007788 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007788:	b480      	push	{r7}
 800778a:	b085      	sub	sp, #20
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800779e:	d103      	bne.n	80077a8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	691b      	ldr	r3, [r3, #16]
 80077a4:	60fb      	str	r3, [r7, #12]
 80077a6:	e00c      	b.n	80077c2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	3308      	adds	r3, #8
 80077ac:	60fb      	str	r3, [r7, #12]
 80077ae:	e002      	b.n	80077b6 <vListInsert+0x2e>
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	60fb      	str	r3, [r7, #12]
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	68ba      	ldr	r2, [r7, #8]
 80077be:	429a      	cmp	r2, r3
 80077c0:	d2f6      	bcs.n	80077b0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	685a      	ldr	r2, [r3, #4]
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	683a      	ldr	r2, [r7, #0]
 80077d0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	68fa      	ldr	r2, [r7, #12]
 80077d6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	683a      	ldr	r2, [r7, #0]
 80077dc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	1c5a      	adds	r2, r3, #1
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	601a      	str	r2, [r3, #0]
}
 80077ee:	bf00      	nop
 80077f0:	3714      	adds	r7, #20
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr

080077fa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80077fa:	b480      	push	{r7}
 80077fc:	b085      	sub	sp, #20
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	691b      	ldr	r3, [r3, #16]
 8007806:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	687a      	ldr	r2, [r7, #4]
 800780e:	6892      	ldr	r2, [r2, #8]
 8007810:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	6852      	ldr	r2, [r2, #4]
 800781a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	429a      	cmp	r2, r3
 8007824:	d103      	bne.n	800782e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	689a      	ldr	r2, [r3, #8]
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2200      	movs	r2, #0
 8007832:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	1e5a      	subs	r2, r3, #1
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
}
 8007842:	4618      	mov	r0, r3
 8007844:	3714      	adds	r7, #20
 8007846:	46bd      	mov	sp, r7
 8007848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784c:	4770      	bx	lr

0800784e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800784e:	b580      	push	{r7, lr}
 8007850:	b08e      	sub	sp, #56	; 0x38
 8007852:	af04      	add	r7, sp, #16
 8007854:	60f8      	str	r0, [r7, #12]
 8007856:	60b9      	str	r1, [r7, #8]
 8007858:	607a      	str	r2, [r7, #4]
 800785a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800785c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800785e:	2b00      	cmp	r3, #0
 8007860:	d10a      	bne.n	8007878 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007866:	f383 8811 	msr	BASEPRI, r3
 800786a:	f3bf 8f6f 	isb	sy
 800786e:	f3bf 8f4f 	dsb	sy
 8007872:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007874:	bf00      	nop
 8007876:	e7fe      	b.n	8007876 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800787a:	2b00      	cmp	r3, #0
 800787c:	d10a      	bne.n	8007894 <xTaskCreateStatic+0x46>
	__asm volatile
 800787e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007882:	f383 8811 	msr	BASEPRI, r3
 8007886:	f3bf 8f6f 	isb	sy
 800788a:	f3bf 8f4f 	dsb	sy
 800788e:	61fb      	str	r3, [r7, #28]
}
 8007890:	bf00      	nop
 8007892:	e7fe      	b.n	8007892 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007894:	23b4      	movs	r3, #180	; 0xb4
 8007896:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	2bb4      	cmp	r3, #180	; 0xb4
 800789c:	d00a      	beq.n	80078b4 <xTaskCreateStatic+0x66>
	__asm volatile
 800789e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a2:	f383 8811 	msr	BASEPRI, r3
 80078a6:	f3bf 8f6f 	isb	sy
 80078aa:	f3bf 8f4f 	dsb	sy
 80078ae:	61bb      	str	r3, [r7, #24]
}
 80078b0:	bf00      	nop
 80078b2:	e7fe      	b.n	80078b2 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80078b4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80078b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d01e      	beq.n	80078fa <xTaskCreateStatic+0xac>
 80078bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d01b      	beq.n	80078fa <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80078c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078c4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80078c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078ca:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80078cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ce:	2202      	movs	r2, #2
 80078d0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80078d4:	2300      	movs	r3, #0
 80078d6:	9303      	str	r3, [sp, #12]
 80078d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078da:	9302      	str	r3, [sp, #8]
 80078dc:	f107 0314 	add.w	r3, r7, #20
 80078e0:	9301      	str	r3, [sp, #4]
 80078e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e4:	9300      	str	r3, [sp, #0]
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	687a      	ldr	r2, [r7, #4]
 80078ea:	68b9      	ldr	r1, [r7, #8]
 80078ec:	68f8      	ldr	r0, [r7, #12]
 80078ee:	f000 f851 	bl	8007994 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80078f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80078f4:	f000 f8ec 	bl	8007ad0 <prvAddNewTaskToReadyList>
 80078f8:	e001      	b.n	80078fe <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80078fa:	2300      	movs	r3, #0
 80078fc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80078fe:	697b      	ldr	r3, [r7, #20]
	}
 8007900:	4618      	mov	r0, r3
 8007902:	3728      	adds	r7, #40	; 0x28
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007908:	b580      	push	{r7, lr}
 800790a:	b08c      	sub	sp, #48	; 0x30
 800790c:	af04      	add	r7, sp, #16
 800790e:	60f8      	str	r0, [r7, #12]
 8007910:	60b9      	str	r1, [r7, #8]
 8007912:	603b      	str	r3, [r7, #0]
 8007914:	4613      	mov	r3, r2
 8007916:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007918:	88fb      	ldrh	r3, [r7, #6]
 800791a:	009b      	lsls	r3, r3, #2
 800791c:	4618      	mov	r0, r3
 800791e:	f000 fef3 	bl	8008708 <pvPortMalloc>
 8007922:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d00e      	beq.n	8007948 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800792a:	20b4      	movs	r0, #180	; 0xb4
 800792c:	f000 feec 	bl	8008708 <pvPortMalloc>
 8007930:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007932:	69fb      	ldr	r3, [r7, #28]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d003      	beq.n	8007940 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007938:	69fb      	ldr	r3, [r7, #28]
 800793a:	697a      	ldr	r2, [r7, #20]
 800793c:	631a      	str	r2, [r3, #48]	; 0x30
 800793e:	e005      	b.n	800794c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007940:	6978      	ldr	r0, [r7, #20]
 8007942:	f000 ffad 	bl	80088a0 <vPortFree>
 8007946:	e001      	b.n	800794c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007948:	2300      	movs	r3, #0
 800794a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800794c:	69fb      	ldr	r3, [r7, #28]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d017      	beq.n	8007982 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007952:	69fb      	ldr	r3, [r7, #28]
 8007954:	2200      	movs	r2, #0
 8007956:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800795a:	88fa      	ldrh	r2, [r7, #6]
 800795c:	2300      	movs	r3, #0
 800795e:	9303      	str	r3, [sp, #12]
 8007960:	69fb      	ldr	r3, [r7, #28]
 8007962:	9302      	str	r3, [sp, #8]
 8007964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007966:	9301      	str	r3, [sp, #4]
 8007968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800796a:	9300      	str	r3, [sp, #0]
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	68b9      	ldr	r1, [r7, #8]
 8007970:	68f8      	ldr	r0, [r7, #12]
 8007972:	f000 f80f 	bl	8007994 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007976:	69f8      	ldr	r0, [r7, #28]
 8007978:	f000 f8aa 	bl	8007ad0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800797c:	2301      	movs	r3, #1
 800797e:	61bb      	str	r3, [r7, #24]
 8007980:	e002      	b.n	8007988 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007982:	f04f 33ff 	mov.w	r3, #4294967295
 8007986:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007988:	69bb      	ldr	r3, [r7, #24]
	}
 800798a:	4618      	mov	r0, r3
 800798c:	3720      	adds	r7, #32
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
	...

08007994 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b088      	sub	sp, #32
 8007998:	af00      	add	r7, sp, #0
 800799a:	60f8      	str	r0, [r7, #12]
 800799c:	60b9      	str	r1, [r7, #8]
 800799e:	607a      	str	r2, [r7, #4]
 80079a0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80079a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80079ac:	3b01      	subs	r3, #1
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	4413      	add	r3, r2
 80079b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80079b4:	69bb      	ldr	r3, [r7, #24]
 80079b6:	f023 0307 	bic.w	r3, r3, #7
 80079ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80079bc:	69bb      	ldr	r3, [r7, #24]
 80079be:	f003 0307 	and.w	r3, r3, #7
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d00a      	beq.n	80079dc <prvInitialiseNewTask+0x48>
	__asm volatile
 80079c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ca:	f383 8811 	msr	BASEPRI, r3
 80079ce:	f3bf 8f6f 	isb	sy
 80079d2:	f3bf 8f4f 	dsb	sy
 80079d6:	617b      	str	r3, [r7, #20]
}
 80079d8:	bf00      	nop
 80079da:	e7fe      	b.n	80079da <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d01f      	beq.n	8007a22 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80079e2:	2300      	movs	r3, #0
 80079e4:	61fb      	str	r3, [r7, #28]
 80079e6:	e012      	b.n	8007a0e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80079e8:	68ba      	ldr	r2, [r7, #8]
 80079ea:	69fb      	ldr	r3, [r7, #28]
 80079ec:	4413      	add	r3, r2
 80079ee:	7819      	ldrb	r1, [r3, #0]
 80079f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079f2:	69fb      	ldr	r3, [r7, #28]
 80079f4:	4413      	add	r3, r2
 80079f6:	3334      	adds	r3, #52	; 0x34
 80079f8:	460a      	mov	r2, r1
 80079fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80079fc:	68ba      	ldr	r2, [r7, #8]
 80079fe:	69fb      	ldr	r3, [r7, #28]
 8007a00:	4413      	add	r3, r2
 8007a02:	781b      	ldrb	r3, [r3, #0]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d006      	beq.n	8007a16 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a08:	69fb      	ldr	r3, [r7, #28]
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	61fb      	str	r3, [r7, #28]
 8007a0e:	69fb      	ldr	r3, [r7, #28]
 8007a10:	2b0f      	cmp	r3, #15
 8007a12:	d9e9      	bls.n	80079e8 <prvInitialiseNewTask+0x54>
 8007a14:	e000      	b.n	8007a18 <prvInitialiseNewTask+0x84>
			{
				break;
 8007a16:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007a20:	e003      	b.n	8007a2a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a24:	2200      	movs	r2, #0
 8007a26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a2c:	2b06      	cmp	r3, #6
 8007a2e:	d901      	bls.n	8007a34 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007a30:	2306      	movs	r3, #6
 8007a32:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a38:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a3e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a42:	2200      	movs	r2, #0
 8007a44:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a48:	3304      	adds	r3, #4
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f7ff fe6b 	bl	8007726 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a52:	3318      	adds	r3, #24
 8007a54:	4618      	mov	r0, r3
 8007a56:	f7ff fe66 	bl	8007726 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a5e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a62:	f1c3 0207 	rsb	r2, r3, #7
 8007a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a68:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a6e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a72:	2200      	movs	r2, #0
 8007a74:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a82:	334c      	adds	r3, #76	; 0x4c
 8007a84:	2260      	movs	r2, #96	; 0x60
 8007a86:	2100      	movs	r1, #0
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f001 f87b 	bl	8008b84 <memset>
 8007a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a90:	4a0c      	ldr	r2, [pc, #48]	; (8007ac4 <prvInitialiseNewTask+0x130>)
 8007a92:	651a      	str	r2, [r3, #80]	; 0x50
 8007a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a96:	4a0c      	ldr	r2, [pc, #48]	; (8007ac8 <prvInitialiseNewTask+0x134>)
 8007a98:	655a      	str	r2, [r3, #84]	; 0x54
 8007a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a9c:	4a0b      	ldr	r2, [pc, #44]	; (8007acc <prvInitialiseNewTask+0x138>)
 8007a9e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007aa0:	683a      	ldr	r2, [r7, #0]
 8007aa2:	68f9      	ldr	r1, [r7, #12]
 8007aa4:	69b8      	ldr	r0, [r7, #24]
 8007aa6:	f000 fc1f 	bl	80082e8 <pxPortInitialiseStack>
 8007aaa:	4602      	mov	r2, r0
 8007aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d002      	beq.n	8007abc <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007aba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007abc:	bf00      	nop
 8007abe:	3720      	adds	r7, #32
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}
 8007ac4:	0800aae8 	.word	0x0800aae8
 8007ac8:	0800ab08 	.word	0x0800ab08
 8007acc:	0800aac8 	.word	0x0800aac8

08007ad0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b082      	sub	sp, #8
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007ad8:	f000 fd34 	bl	8008544 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007adc:	4b2a      	ldr	r3, [pc, #168]	; (8007b88 <prvAddNewTaskToReadyList+0xb8>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	3301      	adds	r3, #1
 8007ae2:	4a29      	ldr	r2, [pc, #164]	; (8007b88 <prvAddNewTaskToReadyList+0xb8>)
 8007ae4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007ae6:	4b29      	ldr	r3, [pc, #164]	; (8007b8c <prvAddNewTaskToReadyList+0xbc>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d109      	bne.n	8007b02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007aee:	4a27      	ldr	r2, [pc, #156]	; (8007b8c <prvAddNewTaskToReadyList+0xbc>)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007af4:	4b24      	ldr	r3, [pc, #144]	; (8007b88 <prvAddNewTaskToReadyList+0xb8>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d110      	bne.n	8007b1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007afc:	f000 facc 	bl	8008098 <prvInitialiseTaskLists>
 8007b00:	e00d      	b.n	8007b1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007b02:	4b23      	ldr	r3, [pc, #140]	; (8007b90 <prvAddNewTaskToReadyList+0xc0>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d109      	bne.n	8007b1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007b0a:	4b20      	ldr	r3, [pc, #128]	; (8007b8c <prvAddNewTaskToReadyList+0xbc>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d802      	bhi.n	8007b1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007b18:	4a1c      	ldr	r2, [pc, #112]	; (8007b8c <prvAddNewTaskToReadyList+0xbc>)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007b1e:	4b1d      	ldr	r3, [pc, #116]	; (8007b94 <prvAddNewTaskToReadyList+0xc4>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	3301      	adds	r3, #1
 8007b24:	4a1b      	ldr	r2, [pc, #108]	; (8007b94 <prvAddNewTaskToReadyList+0xc4>)
 8007b26:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	409a      	lsls	r2, r3
 8007b30:	4b19      	ldr	r3, [pc, #100]	; (8007b98 <prvAddNewTaskToReadyList+0xc8>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4313      	orrs	r3, r2
 8007b36:	4a18      	ldr	r2, [pc, #96]	; (8007b98 <prvAddNewTaskToReadyList+0xc8>)
 8007b38:	6013      	str	r3, [r2, #0]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b3e:	4613      	mov	r3, r2
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	4413      	add	r3, r2
 8007b44:	009b      	lsls	r3, r3, #2
 8007b46:	4a15      	ldr	r2, [pc, #84]	; (8007b9c <prvAddNewTaskToReadyList+0xcc>)
 8007b48:	441a      	add	r2, r3
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	3304      	adds	r3, #4
 8007b4e:	4619      	mov	r1, r3
 8007b50:	4610      	mov	r0, r2
 8007b52:	f7ff fdf5 	bl	8007740 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007b56:	f000 fd25 	bl	80085a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007b5a:	4b0d      	ldr	r3, [pc, #52]	; (8007b90 <prvAddNewTaskToReadyList+0xc0>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d00e      	beq.n	8007b80 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007b62:	4b0a      	ldr	r3, [pc, #40]	; (8007b8c <prvAddNewTaskToReadyList+0xbc>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d207      	bcs.n	8007b80 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007b70:	4b0b      	ldr	r3, [pc, #44]	; (8007ba0 <prvAddNewTaskToReadyList+0xd0>)
 8007b72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b76:	601a      	str	r2, [r3, #0]
 8007b78:	f3bf 8f4f 	dsb	sy
 8007b7c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b80:	bf00      	nop
 8007b82:	3708      	adds	r7, #8
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}
 8007b88:	20000aa8 	.word	0x20000aa8
 8007b8c:	200009a8 	.word	0x200009a8
 8007b90:	20000ab4 	.word	0x20000ab4
 8007b94:	20000ac4 	.word	0x20000ac4
 8007b98:	20000ab0 	.word	0x20000ab0
 8007b9c:	200009ac 	.word	0x200009ac
 8007ba0:	e000ed04 	.word	0xe000ed04

08007ba4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b084      	sub	sp, #16
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007bac:	2300      	movs	r3, #0
 8007bae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d017      	beq.n	8007be6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007bb6:	4b13      	ldr	r3, [pc, #76]	; (8007c04 <vTaskDelay+0x60>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d00a      	beq.n	8007bd4 <vTaskDelay+0x30>
	__asm volatile
 8007bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc2:	f383 8811 	msr	BASEPRI, r3
 8007bc6:	f3bf 8f6f 	isb	sy
 8007bca:	f3bf 8f4f 	dsb	sy
 8007bce:	60bb      	str	r3, [r7, #8]
}
 8007bd0:	bf00      	nop
 8007bd2:	e7fe      	b.n	8007bd2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007bd4:	f000 f884 	bl	8007ce0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007bd8:	2100      	movs	r1, #0
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 fb1e 	bl	800821c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007be0:	f000 f88c 	bl	8007cfc <xTaskResumeAll>
 8007be4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d107      	bne.n	8007bfc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007bec:	4b06      	ldr	r3, [pc, #24]	; (8007c08 <vTaskDelay+0x64>)
 8007bee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bf2:	601a      	str	r2, [r3, #0]
 8007bf4:	f3bf 8f4f 	dsb	sy
 8007bf8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007bfc:	bf00      	nop
 8007bfe:	3710      	adds	r7, #16
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}
 8007c04:	20000ad0 	.word	0x20000ad0
 8007c08:	e000ed04 	.word	0xe000ed04

08007c0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b08a      	sub	sp, #40	; 0x28
 8007c10:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007c12:	2300      	movs	r3, #0
 8007c14:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007c16:	2300      	movs	r3, #0
 8007c18:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007c1a:	463a      	mov	r2, r7
 8007c1c:	1d39      	adds	r1, r7, #4
 8007c1e:	f107 0308 	add.w	r3, r7, #8
 8007c22:	4618      	mov	r0, r3
 8007c24:	f7f8 fe14 	bl	8000850 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007c28:	6839      	ldr	r1, [r7, #0]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	68ba      	ldr	r2, [r7, #8]
 8007c2e:	9202      	str	r2, [sp, #8]
 8007c30:	9301      	str	r3, [sp, #4]
 8007c32:	2300      	movs	r3, #0
 8007c34:	9300      	str	r3, [sp, #0]
 8007c36:	2300      	movs	r3, #0
 8007c38:	460a      	mov	r2, r1
 8007c3a:	4921      	ldr	r1, [pc, #132]	; (8007cc0 <vTaskStartScheduler+0xb4>)
 8007c3c:	4821      	ldr	r0, [pc, #132]	; (8007cc4 <vTaskStartScheduler+0xb8>)
 8007c3e:	f7ff fe06 	bl	800784e <xTaskCreateStatic>
 8007c42:	4603      	mov	r3, r0
 8007c44:	4a20      	ldr	r2, [pc, #128]	; (8007cc8 <vTaskStartScheduler+0xbc>)
 8007c46:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007c48:	4b1f      	ldr	r3, [pc, #124]	; (8007cc8 <vTaskStartScheduler+0xbc>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d002      	beq.n	8007c56 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007c50:	2301      	movs	r3, #1
 8007c52:	617b      	str	r3, [r7, #20]
 8007c54:	e001      	b.n	8007c5a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007c56:	2300      	movs	r3, #0
 8007c58:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d11b      	bne.n	8007c98 <vTaskStartScheduler+0x8c>
	__asm volatile
 8007c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c64:	f383 8811 	msr	BASEPRI, r3
 8007c68:	f3bf 8f6f 	isb	sy
 8007c6c:	f3bf 8f4f 	dsb	sy
 8007c70:	613b      	str	r3, [r7, #16]
}
 8007c72:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007c74:	4b15      	ldr	r3, [pc, #84]	; (8007ccc <vTaskStartScheduler+0xc0>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	334c      	adds	r3, #76	; 0x4c
 8007c7a:	4a15      	ldr	r2, [pc, #84]	; (8007cd0 <vTaskStartScheduler+0xc4>)
 8007c7c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007c7e:	4b15      	ldr	r3, [pc, #84]	; (8007cd4 <vTaskStartScheduler+0xc8>)
 8007c80:	f04f 32ff 	mov.w	r2, #4294967295
 8007c84:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007c86:	4b14      	ldr	r3, [pc, #80]	; (8007cd8 <vTaskStartScheduler+0xcc>)
 8007c88:	2201      	movs	r2, #1
 8007c8a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007c8c:	4b13      	ldr	r3, [pc, #76]	; (8007cdc <vTaskStartScheduler+0xd0>)
 8007c8e:	2200      	movs	r2, #0
 8007c90:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007c92:	f000 fbb5 	bl	8008400 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007c96:	e00e      	b.n	8007cb6 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c9e:	d10a      	bne.n	8007cb6 <vTaskStartScheduler+0xaa>
	__asm volatile
 8007ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca4:	f383 8811 	msr	BASEPRI, r3
 8007ca8:	f3bf 8f6f 	isb	sy
 8007cac:	f3bf 8f4f 	dsb	sy
 8007cb0:	60fb      	str	r3, [r7, #12]
}
 8007cb2:	bf00      	nop
 8007cb4:	e7fe      	b.n	8007cb4 <vTaskStartScheduler+0xa8>
}
 8007cb6:	bf00      	nop
 8007cb8:	3718      	adds	r7, #24
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	080095e0 	.word	0x080095e0
 8007cc4:	08008069 	.word	0x08008069
 8007cc8:	20000acc 	.word	0x20000acc
 8007ccc:	200009a8 	.word	0x200009a8
 8007cd0:	20000020 	.word	0x20000020
 8007cd4:	20000ac8 	.word	0x20000ac8
 8007cd8:	20000ab4 	.word	0x20000ab4
 8007cdc:	20000aac 	.word	0x20000aac

08007ce0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007ce4:	4b04      	ldr	r3, [pc, #16]	; (8007cf8 <vTaskSuspendAll+0x18>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	3301      	adds	r3, #1
 8007cea:	4a03      	ldr	r2, [pc, #12]	; (8007cf8 <vTaskSuspendAll+0x18>)
 8007cec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007cee:	bf00      	nop
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr
 8007cf8:	20000ad0 	.word	0x20000ad0

08007cfc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007d02:	2300      	movs	r3, #0
 8007d04:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007d06:	2300      	movs	r3, #0
 8007d08:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007d0a:	4b41      	ldr	r3, [pc, #260]	; (8007e10 <xTaskResumeAll+0x114>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d10a      	bne.n	8007d28 <xTaskResumeAll+0x2c>
	__asm volatile
 8007d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d16:	f383 8811 	msr	BASEPRI, r3
 8007d1a:	f3bf 8f6f 	isb	sy
 8007d1e:	f3bf 8f4f 	dsb	sy
 8007d22:	603b      	str	r3, [r7, #0]
}
 8007d24:	bf00      	nop
 8007d26:	e7fe      	b.n	8007d26 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007d28:	f000 fc0c 	bl	8008544 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007d2c:	4b38      	ldr	r3, [pc, #224]	; (8007e10 <xTaskResumeAll+0x114>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	3b01      	subs	r3, #1
 8007d32:	4a37      	ldr	r2, [pc, #220]	; (8007e10 <xTaskResumeAll+0x114>)
 8007d34:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d36:	4b36      	ldr	r3, [pc, #216]	; (8007e10 <xTaskResumeAll+0x114>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d161      	bne.n	8007e02 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007d3e:	4b35      	ldr	r3, [pc, #212]	; (8007e14 <xTaskResumeAll+0x118>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d05d      	beq.n	8007e02 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d46:	e02e      	b.n	8007da6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d48:	4b33      	ldr	r3, [pc, #204]	; (8007e18 <xTaskResumeAll+0x11c>)
 8007d4a:	68db      	ldr	r3, [r3, #12]
 8007d4c:	68db      	ldr	r3, [r3, #12]
 8007d4e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	3318      	adds	r3, #24
 8007d54:	4618      	mov	r0, r3
 8007d56:	f7ff fd50 	bl	80077fa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	3304      	adds	r3, #4
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f7ff fd4b 	bl	80077fa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d68:	2201      	movs	r2, #1
 8007d6a:	409a      	lsls	r2, r3
 8007d6c:	4b2b      	ldr	r3, [pc, #172]	; (8007e1c <xTaskResumeAll+0x120>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4313      	orrs	r3, r2
 8007d72:	4a2a      	ldr	r2, [pc, #168]	; (8007e1c <xTaskResumeAll+0x120>)
 8007d74:	6013      	str	r3, [r2, #0]
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d7a:	4613      	mov	r3, r2
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	4413      	add	r3, r2
 8007d80:	009b      	lsls	r3, r3, #2
 8007d82:	4a27      	ldr	r2, [pc, #156]	; (8007e20 <xTaskResumeAll+0x124>)
 8007d84:	441a      	add	r2, r3
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	3304      	adds	r3, #4
 8007d8a:	4619      	mov	r1, r3
 8007d8c:	4610      	mov	r0, r2
 8007d8e:	f7ff fcd7 	bl	8007740 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d96:	4b23      	ldr	r3, [pc, #140]	; (8007e24 <xTaskResumeAll+0x128>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d302      	bcc.n	8007da6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007da0:	4b21      	ldr	r3, [pc, #132]	; (8007e28 <xTaskResumeAll+0x12c>)
 8007da2:	2201      	movs	r2, #1
 8007da4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007da6:	4b1c      	ldr	r3, [pc, #112]	; (8007e18 <xTaskResumeAll+0x11c>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d1cc      	bne.n	8007d48 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d001      	beq.n	8007db8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007db4:	f000 fa12 	bl	80081dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007db8:	4b1c      	ldr	r3, [pc, #112]	; (8007e2c <xTaskResumeAll+0x130>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d010      	beq.n	8007de6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007dc4:	f000 f836 	bl	8007e34 <xTaskIncrementTick>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d002      	beq.n	8007dd4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007dce:	4b16      	ldr	r3, [pc, #88]	; (8007e28 <xTaskResumeAll+0x12c>)
 8007dd0:	2201      	movs	r2, #1
 8007dd2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	3b01      	subs	r3, #1
 8007dd8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d1f1      	bne.n	8007dc4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007de0:	4b12      	ldr	r3, [pc, #72]	; (8007e2c <xTaskResumeAll+0x130>)
 8007de2:	2200      	movs	r2, #0
 8007de4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007de6:	4b10      	ldr	r3, [pc, #64]	; (8007e28 <xTaskResumeAll+0x12c>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d009      	beq.n	8007e02 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007dee:	2301      	movs	r3, #1
 8007df0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007df2:	4b0f      	ldr	r3, [pc, #60]	; (8007e30 <xTaskResumeAll+0x134>)
 8007df4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007df8:	601a      	str	r2, [r3, #0]
 8007dfa:	f3bf 8f4f 	dsb	sy
 8007dfe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e02:	f000 fbcf 	bl	80085a4 <vPortExitCritical>

	return xAlreadyYielded;
 8007e06:	68bb      	ldr	r3, [r7, #8]
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3710      	adds	r7, #16
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}
 8007e10:	20000ad0 	.word	0x20000ad0
 8007e14:	20000aa8 	.word	0x20000aa8
 8007e18:	20000a68 	.word	0x20000a68
 8007e1c:	20000ab0 	.word	0x20000ab0
 8007e20:	200009ac 	.word	0x200009ac
 8007e24:	200009a8 	.word	0x200009a8
 8007e28:	20000abc 	.word	0x20000abc
 8007e2c:	20000ab8 	.word	0x20000ab8
 8007e30:	e000ed04 	.word	0xe000ed04

08007e34 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b086      	sub	sp, #24
 8007e38:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e3e:	4b4e      	ldr	r3, [pc, #312]	; (8007f78 <xTaskIncrementTick+0x144>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	f040 808e 	bne.w	8007f64 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007e48:	4b4c      	ldr	r3, [pc, #304]	; (8007f7c <xTaskIncrementTick+0x148>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	3301      	adds	r3, #1
 8007e4e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007e50:	4a4a      	ldr	r2, [pc, #296]	; (8007f7c <xTaskIncrementTick+0x148>)
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d120      	bne.n	8007e9e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007e5c:	4b48      	ldr	r3, [pc, #288]	; (8007f80 <xTaskIncrementTick+0x14c>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d00a      	beq.n	8007e7c <xTaskIncrementTick+0x48>
	__asm volatile
 8007e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e6a:	f383 8811 	msr	BASEPRI, r3
 8007e6e:	f3bf 8f6f 	isb	sy
 8007e72:	f3bf 8f4f 	dsb	sy
 8007e76:	603b      	str	r3, [r7, #0]
}
 8007e78:	bf00      	nop
 8007e7a:	e7fe      	b.n	8007e7a <xTaskIncrementTick+0x46>
 8007e7c:	4b40      	ldr	r3, [pc, #256]	; (8007f80 <xTaskIncrementTick+0x14c>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	60fb      	str	r3, [r7, #12]
 8007e82:	4b40      	ldr	r3, [pc, #256]	; (8007f84 <xTaskIncrementTick+0x150>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a3e      	ldr	r2, [pc, #248]	; (8007f80 <xTaskIncrementTick+0x14c>)
 8007e88:	6013      	str	r3, [r2, #0]
 8007e8a:	4a3e      	ldr	r2, [pc, #248]	; (8007f84 <xTaskIncrementTick+0x150>)
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	6013      	str	r3, [r2, #0]
 8007e90:	4b3d      	ldr	r3, [pc, #244]	; (8007f88 <xTaskIncrementTick+0x154>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	3301      	adds	r3, #1
 8007e96:	4a3c      	ldr	r2, [pc, #240]	; (8007f88 <xTaskIncrementTick+0x154>)
 8007e98:	6013      	str	r3, [r2, #0]
 8007e9a:	f000 f99f 	bl	80081dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007e9e:	4b3b      	ldr	r3, [pc, #236]	; (8007f8c <xTaskIncrementTick+0x158>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	693a      	ldr	r2, [r7, #16]
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d348      	bcc.n	8007f3a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ea8:	4b35      	ldr	r3, [pc, #212]	; (8007f80 <xTaskIncrementTick+0x14c>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d104      	bne.n	8007ebc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007eb2:	4b36      	ldr	r3, [pc, #216]	; (8007f8c <xTaskIncrementTick+0x158>)
 8007eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8007eb8:	601a      	str	r2, [r3, #0]
					break;
 8007eba:	e03e      	b.n	8007f3a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ebc:	4b30      	ldr	r3, [pc, #192]	; (8007f80 <xTaskIncrementTick+0x14c>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	68db      	ldr	r3, [r3, #12]
 8007ec2:	68db      	ldr	r3, [r3, #12]
 8007ec4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007ecc:	693a      	ldr	r2, [r7, #16]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d203      	bcs.n	8007edc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007ed4:	4a2d      	ldr	r2, [pc, #180]	; (8007f8c <xTaskIncrementTick+0x158>)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007eda:	e02e      	b.n	8007f3a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	3304      	adds	r3, #4
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f7ff fc8a 	bl	80077fa <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d004      	beq.n	8007ef8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	3318      	adds	r3, #24
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f7ff fc81 	bl	80077fa <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007efc:	2201      	movs	r2, #1
 8007efe:	409a      	lsls	r2, r3
 8007f00:	4b23      	ldr	r3, [pc, #140]	; (8007f90 <xTaskIncrementTick+0x15c>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4313      	orrs	r3, r2
 8007f06:	4a22      	ldr	r2, [pc, #136]	; (8007f90 <xTaskIncrementTick+0x15c>)
 8007f08:	6013      	str	r3, [r2, #0]
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f0e:	4613      	mov	r3, r2
 8007f10:	009b      	lsls	r3, r3, #2
 8007f12:	4413      	add	r3, r2
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	4a1f      	ldr	r2, [pc, #124]	; (8007f94 <xTaskIncrementTick+0x160>)
 8007f18:	441a      	add	r2, r3
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	3304      	adds	r3, #4
 8007f1e:	4619      	mov	r1, r3
 8007f20:	4610      	mov	r0, r2
 8007f22:	f7ff fc0d 	bl	8007740 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f2a:	4b1b      	ldr	r3, [pc, #108]	; (8007f98 <xTaskIncrementTick+0x164>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d3b9      	bcc.n	8007ea8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007f34:	2301      	movs	r3, #1
 8007f36:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f38:	e7b6      	b.n	8007ea8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007f3a:	4b17      	ldr	r3, [pc, #92]	; (8007f98 <xTaskIncrementTick+0x164>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f40:	4914      	ldr	r1, [pc, #80]	; (8007f94 <xTaskIncrementTick+0x160>)
 8007f42:	4613      	mov	r3, r2
 8007f44:	009b      	lsls	r3, r3, #2
 8007f46:	4413      	add	r3, r2
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	440b      	add	r3, r1
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	2b01      	cmp	r3, #1
 8007f50:	d901      	bls.n	8007f56 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007f52:	2301      	movs	r3, #1
 8007f54:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007f56:	4b11      	ldr	r3, [pc, #68]	; (8007f9c <xTaskIncrementTick+0x168>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d007      	beq.n	8007f6e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	617b      	str	r3, [r7, #20]
 8007f62:	e004      	b.n	8007f6e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007f64:	4b0e      	ldr	r3, [pc, #56]	; (8007fa0 <xTaskIncrementTick+0x16c>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	3301      	adds	r3, #1
 8007f6a:	4a0d      	ldr	r2, [pc, #52]	; (8007fa0 <xTaskIncrementTick+0x16c>)
 8007f6c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007f6e:	697b      	ldr	r3, [r7, #20]
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3718      	adds	r7, #24
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}
 8007f78:	20000ad0 	.word	0x20000ad0
 8007f7c:	20000aac 	.word	0x20000aac
 8007f80:	20000a60 	.word	0x20000a60
 8007f84:	20000a64 	.word	0x20000a64
 8007f88:	20000ac0 	.word	0x20000ac0
 8007f8c:	20000ac8 	.word	0x20000ac8
 8007f90:	20000ab0 	.word	0x20000ab0
 8007f94:	200009ac 	.word	0x200009ac
 8007f98:	200009a8 	.word	0x200009a8
 8007f9c:	20000abc 	.word	0x20000abc
 8007fa0:	20000ab8 	.word	0x20000ab8

08007fa4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b087      	sub	sp, #28
 8007fa8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007faa:	4b29      	ldr	r3, [pc, #164]	; (8008050 <vTaskSwitchContext+0xac>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d003      	beq.n	8007fba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007fb2:	4b28      	ldr	r3, [pc, #160]	; (8008054 <vTaskSwitchContext+0xb0>)
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007fb8:	e044      	b.n	8008044 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8007fba:	4b26      	ldr	r3, [pc, #152]	; (8008054 <vTaskSwitchContext+0xb0>)
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fc0:	4b25      	ldr	r3, [pc, #148]	; (8008058 <vTaskSwitchContext+0xb4>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	fab3 f383 	clz	r3, r3
 8007fcc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007fce:	7afb      	ldrb	r3, [r7, #11]
 8007fd0:	f1c3 031f 	rsb	r3, r3, #31
 8007fd4:	617b      	str	r3, [r7, #20]
 8007fd6:	4921      	ldr	r1, [pc, #132]	; (800805c <vTaskSwitchContext+0xb8>)
 8007fd8:	697a      	ldr	r2, [r7, #20]
 8007fda:	4613      	mov	r3, r2
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	4413      	add	r3, r2
 8007fe0:	009b      	lsls	r3, r3, #2
 8007fe2:	440b      	add	r3, r1
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d10a      	bne.n	8008000 <vTaskSwitchContext+0x5c>
	__asm volatile
 8007fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fee:	f383 8811 	msr	BASEPRI, r3
 8007ff2:	f3bf 8f6f 	isb	sy
 8007ff6:	f3bf 8f4f 	dsb	sy
 8007ffa:	607b      	str	r3, [r7, #4]
}
 8007ffc:	bf00      	nop
 8007ffe:	e7fe      	b.n	8007ffe <vTaskSwitchContext+0x5a>
 8008000:	697a      	ldr	r2, [r7, #20]
 8008002:	4613      	mov	r3, r2
 8008004:	009b      	lsls	r3, r3, #2
 8008006:	4413      	add	r3, r2
 8008008:	009b      	lsls	r3, r3, #2
 800800a:	4a14      	ldr	r2, [pc, #80]	; (800805c <vTaskSwitchContext+0xb8>)
 800800c:	4413      	add	r3, r2
 800800e:	613b      	str	r3, [r7, #16]
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	685a      	ldr	r2, [r3, #4]
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	605a      	str	r2, [r3, #4]
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	685a      	ldr	r2, [r3, #4]
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	3308      	adds	r3, #8
 8008022:	429a      	cmp	r2, r3
 8008024:	d104      	bne.n	8008030 <vTaskSwitchContext+0x8c>
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	685a      	ldr	r2, [r3, #4]
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	605a      	str	r2, [r3, #4]
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	68db      	ldr	r3, [r3, #12]
 8008036:	4a0a      	ldr	r2, [pc, #40]	; (8008060 <vTaskSwitchContext+0xbc>)
 8008038:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800803a:	4b09      	ldr	r3, [pc, #36]	; (8008060 <vTaskSwitchContext+0xbc>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	334c      	adds	r3, #76	; 0x4c
 8008040:	4a08      	ldr	r2, [pc, #32]	; (8008064 <vTaskSwitchContext+0xc0>)
 8008042:	6013      	str	r3, [r2, #0]
}
 8008044:	bf00      	nop
 8008046:	371c      	adds	r7, #28
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr
 8008050:	20000ad0 	.word	0x20000ad0
 8008054:	20000abc 	.word	0x20000abc
 8008058:	20000ab0 	.word	0x20000ab0
 800805c:	200009ac 	.word	0x200009ac
 8008060:	200009a8 	.word	0x200009a8
 8008064:	20000020 	.word	0x20000020

08008068 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b082      	sub	sp, #8
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008070:	f000 f852 	bl	8008118 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008074:	4b06      	ldr	r3, [pc, #24]	; (8008090 <prvIdleTask+0x28>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	2b01      	cmp	r3, #1
 800807a:	d9f9      	bls.n	8008070 <prvIdleTask+0x8>
			{
				taskYIELD();
 800807c:	4b05      	ldr	r3, [pc, #20]	; (8008094 <prvIdleTask+0x2c>)
 800807e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008082:	601a      	str	r2, [r3, #0]
 8008084:	f3bf 8f4f 	dsb	sy
 8008088:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800808c:	e7f0      	b.n	8008070 <prvIdleTask+0x8>
 800808e:	bf00      	nop
 8008090:	200009ac 	.word	0x200009ac
 8008094:	e000ed04 	.word	0xe000ed04

08008098 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b082      	sub	sp, #8
 800809c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800809e:	2300      	movs	r3, #0
 80080a0:	607b      	str	r3, [r7, #4]
 80080a2:	e00c      	b.n	80080be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80080a4:	687a      	ldr	r2, [r7, #4]
 80080a6:	4613      	mov	r3, r2
 80080a8:	009b      	lsls	r3, r3, #2
 80080aa:	4413      	add	r3, r2
 80080ac:	009b      	lsls	r3, r3, #2
 80080ae:	4a12      	ldr	r2, [pc, #72]	; (80080f8 <prvInitialiseTaskLists+0x60>)
 80080b0:	4413      	add	r3, r2
 80080b2:	4618      	mov	r0, r3
 80080b4:	f7ff fb17 	bl	80076e6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	3301      	adds	r3, #1
 80080bc:	607b      	str	r3, [r7, #4]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2b06      	cmp	r3, #6
 80080c2:	d9ef      	bls.n	80080a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80080c4:	480d      	ldr	r0, [pc, #52]	; (80080fc <prvInitialiseTaskLists+0x64>)
 80080c6:	f7ff fb0e 	bl	80076e6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80080ca:	480d      	ldr	r0, [pc, #52]	; (8008100 <prvInitialiseTaskLists+0x68>)
 80080cc:	f7ff fb0b 	bl	80076e6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80080d0:	480c      	ldr	r0, [pc, #48]	; (8008104 <prvInitialiseTaskLists+0x6c>)
 80080d2:	f7ff fb08 	bl	80076e6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80080d6:	480c      	ldr	r0, [pc, #48]	; (8008108 <prvInitialiseTaskLists+0x70>)
 80080d8:	f7ff fb05 	bl	80076e6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80080dc:	480b      	ldr	r0, [pc, #44]	; (800810c <prvInitialiseTaskLists+0x74>)
 80080de:	f7ff fb02 	bl	80076e6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80080e2:	4b0b      	ldr	r3, [pc, #44]	; (8008110 <prvInitialiseTaskLists+0x78>)
 80080e4:	4a05      	ldr	r2, [pc, #20]	; (80080fc <prvInitialiseTaskLists+0x64>)
 80080e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80080e8:	4b0a      	ldr	r3, [pc, #40]	; (8008114 <prvInitialiseTaskLists+0x7c>)
 80080ea:	4a05      	ldr	r2, [pc, #20]	; (8008100 <prvInitialiseTaskLists+0x68>)
 80080ec:	601a      	str	r2, [r3, #0]
}
 80080ee:	bf00      	nop
 80080f0:	3708      	adds	r7, #8
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	bf00      	nop
 80080f8:	200009ac 	.word	0x200009ac
 80080fc:	20000a38 	.word	0x20000a38
 8008100:	20000a4c 	.word	0x20000a4c
 8008104:	20000a68 	.word	0x20000a68
 8008108:	20000a7c 	.word	0x20000a7c
 800810c:	20000a94 	.word	0x20000a94
 8008110:	20000a60 	.word	0x20000a60
 8008114:	20000a64 	.word	0x20000a64

08008118 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b082      	sub	sp, #8
 800811c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800811e:	e019      	b.n	8008154 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008120:	f000 fa10 	bl	8008544 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008124:	4b10      	ldr	r3, [pc, #64]	; (8008168 <prvCheckTasksWaitingTermination+0x50>)
 8008126:	68db      	ldr	r3, [r3, #12]
 8008128:	68db      	ldr	r3, [r3, #12]
 800812a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	3304      	adds	r3, #4
 8008130:	4618      	mov	r0, r3
 8008132:	f7ff fb62 	bl	80077fa <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008136:	4b0d      	ldr	r3, [pc, #52]	; (800816c <prvCheckTasksWaitingTermination+0x54>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	3b01      	subs	r3, #1
 800813c:	4a0b      	ldr	r2, [pc, #44]	; (800816c <prvCheckTasksWaitingTermination+0x54>)
 800813e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008140:	4b0b      	ldr	r3, [pc, #44]	; (8008170 <prvCheckTasksWaitingTermination+0x58>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	3b01      	subs	r3, #1
 8008146:	4a0a      	ldr	r2, [pc, #40]	; (8008170 <prvCheckTasksWaitingTermination+0x58>)
 8008148:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800814a:	f000 fa2b 	bl	80085a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 f810 	bl	8008174 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008154:	4b06      	ldr	r3, [pc, #24]	; (8008170 <prvCheckTasksWaitingTermination+0x58>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d1e1      	bne.n	8008120 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800815c:	bf00      	nop
 800815e:	bf00      	nop
 8008160:	3708      	adds	r7, #8
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
 8008166:	bf00      	nop
 8008168:	20000a7c 	.word	0x20000a7c
 800816c:	20000aa8 	.word	0x20000aa8
 8008170:	20000a90 	.word	0x20000a90

08008174 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008174:	b580      	push	{r7, lr}
 8008176:	b084      	sub	sp, #16
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	334c      	adds	r3, #76	; 0x4c
 8008180:	4618      	mov	r0, r3
 8008182:	f000 fd6f 	bl	8008c64 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800818c:	2b00      	cmp	r3, #0
 800818e:	d108      	bne.n	80081a2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008194:	4618      	mov	r0, r3
 8008196:	f000 fb83 	bl	80088a0 <vPortFree>
				vPortFree( pxTCB );
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f000 fb80 	bl	80088a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80081a0:	e018      	b.n	80081d4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d103      	bne.n	80081b4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 fb77 	bl	80088a0 <vPortFree>
	}
 80081b2:	e00f      	b.n	80081d4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80081ba:	2b02      	cmp	r3, #2
 80081bc:	d00a      	beq.n	80081d4 <prvDeleteTCB+0x60>
	__asm volatile
 80081be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c2:	f383 8811 	msr	BASEPRI, r3
 80081c6:	f3bf 8f6f 	isb	sy
 80081ca:	f3bf 8f4f 	dsb	sy
 80081ce:	60fb      	str	r3, [r7, #12]
}
 80081d0:	bf00      	nop
 80081d2:	e7fe      	b.n	80081d2 <prvDeleteTCB+0x5e>
	}
 80081d4:	bf00      	nop
 80081d6:	3710      	adds	r7, #16
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}

080081dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80081dc:	b480      	push	{r7}
 80081de:	b083      	sub	sp, #12
 80081e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80081e2:	4b0c      	ldr	r3, [pc, #48]	; (8008214 <prvResetNextTaskUnblockTime+0x38>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d104      	bne.n	80081f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80081ec:	4b0a      	ldr	r3, [pc, #40]	; (8008218 <prvResetNextTaskUnblockTime+0x3c>)
 80081ee:	f04f 32ff 	mov.w	r2, #4294967295
 80081f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80081f4:	e008      	b.n	8008208 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081f6:	4b07      	ldr	r3, [pc, #28]	; (8008214 <prvResetNextTaskUnblockTime+0x38>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	68db      	ldr	r3, [r3, #12]
 80081fc:	68db      	ldr	r3, [r3, #12]
 80081fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	4a04      	ldr	r2, [pc, #16]	; (8008218 <prvResetNextTaskUnblockTime+0x3c>)
 8008206:	6013      	str	r3, [r2, #0]
}
 8008208:	bf00      	nop
 800820a:	370c      	adds	r7, #12
 800820c:	46bd      	mov	sp, r7
 800820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008212:	4770      	bx	lr
 8008214:	20000a60 	.word	0x20000a60
 8008218:	20000ac8 	.word	0x20000ac8

0800821c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b084      	sub	sp, #16
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008226:	4b29      	ldr	r3, [pc, #164]	; (80082cc <prvAddCurrentTaskToDelayedList+0xb0>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800822c:	4b28      	ldr	r3, [pc, #160]	; (80082d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	3304      	adds	r3, #4
 8008232:	4618      	mov	r0, r3
 8008234:	f7ff fae1 	bl	80077fa <uxListRemove>
 8008238:	4603      	mov	r3, r0
 800823a:	2b00      	cmp	r3, #0
 800823c:	d10b      	bne.n	8008256 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800823e:	4b24      	ldr	r3, [pc, #144]	; (80082d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008244:	2201      	movs	r2, #1
 8008246:	fa02 f303 	lsl.w	r3, r2, r3
 800824a:	43da      	mvns	r2, r3
 800824c:	4b21      	ldr	r3, [pc, #132]	; (80082d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4013      	ands	r3, r2
 8008252:	4a20      	ldr	r2, [pc, #128]	; (80082d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008254:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800825c:	d10a      	bne.n	8008274 <prvAddCurrentTaskToDelayedList+0x58>
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d007      	beq.n	8008274 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008264:	4b1a      	ldr	r3, [pc, #104]	; (80082d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	3304      	adds	r3, #4
 800826a:	4619      	mov	r1, r3
 800826c:	481a      	ldr	r0, [pc, #104]	; (80082d8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800826e:	f7ff fa67 	bl	8007740 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008272:	e026      	b.n	80082c2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008274:	68fa      	ldr	r2, [r7, #12]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	4413      	add	r3, r2
 800827a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800827c:	4b14      	ldr	r3, [pc, #80]	; (80082d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	68ba      	ldr	r2, [r7, #8]
 8008282:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008284:	68ba      	ldr	r2, [r7, #8]
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	429a      	cmp	r2, r3
 800828a:	d209      	bcs.n	80082a0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800828c:	4b13      	ldr	r3, [pc, #76]	; (80082dc <prvAddCurrentTaskToDelayedList+0xc0>)
 800828e:	681a      	ldr	r2, [r3, #0]
 8008290:	4b0f      	ldr	r3, [pc, #60]	; (80082d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	3304      	adds	r3, #4
 8008296:	4619      	mov	r1, r3
 8008298:	4610      	mov	r0, r2
 800829a:	f7ff fa75 	bl	8007788 <vListInsert>
}
 800829e:	e010      	b.n	80082c2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082a0:	4b0f      	ldr	r3, [pc, #60]	; (80082e0 <prvAddCurrentTaskToDelayedList+0xc4>)
 80082a2:	681a      	ldr	r2, [r3, #0]
 80082a4:	4b0a      	ldr	r3, [pc, #40]	; (80082d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	3304      	adds	r3, #4
 80082aa:	4619      	mov	r1, r3
 80082ac:	4610      	mov	r0, r2
 80082ae:	f7ff fa6b 	bl	8007788 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80082b2:	4b0c      	ldr	r3, [pc, #48]	; (80082e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	68ba      	ldr	r2, [r7, #8]
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d202      	bcs.n	80082c2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80082bc:	4a09      	ldr	r2, [pc, #36]	; (80082e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	6013      	str	r3, [r2, #0]
}
 80082c2:	bf00      	nop
 80082c4:	3710      	adds	r7, #16
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}
 80082ca:	bf00      	nop
 80082cc:	20000aac 	.word	0x20000aac
 80082d0:	200009a8 	.word	0x200009a8
 80082d4:	20000ab0 	.word	0x20000ab0
 80082d8:	20000a94 	.word	0x20000a94
 80082dc:	20000a64 	.word	0x20000a64
 80082e0:	20000a60 	.word	0x20000a60
 80082e4:	20000ac8 	.word	0x20000ac8

080082e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80082e8:	b480      	push	{r7}
 80082ea:	b085      	sub	sp, #20
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	60f8      	str	r0, [r7, #12]
 80082f0:	60b9      	str	r1, [r7, #8]
 80082f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	3b04      	subs	r3, #4
 80082f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008300:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	3b04      	subs	r3, #4
 8008306:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	f023 0201 	bic.w	r2, r3, #1
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	3b04      	subs	r3, #4
 8008316:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008318:	4a0c      	ldr	r2, [pc, #48]	; (800834c <pxPortInitialiseStack+0x64>)
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	3b14      	subs	r3, #20
 8008322:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	3b04      	subs	r3, #4
 800832e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f06f 0202 	mvn.w	r2, #2
 8008336:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	3b20      	subs	r3, #32
 800833c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800833e:	68fb      	ldr	r3, [r7, #12]
}
 8008340:	4618      	mov	r0, r3
 8008342:	3714      	adds	r7, #20
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr
 800834c:	08008351 	.word	0x08008351

08008350 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008350:	b480      	push	{r7}
 8008352:	b085      	sub	sp, #20
 8008354:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008356:	2300      	movs	r3, #0
 8008358:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800835a:	4b12      	ldr	r3, [pc, #72]	; (80083a4 <prvTaskExitError+0x54>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008362:	d00a      	beq.n	800837a <prvTaskExitError+0x2a>
	__asm volatile
 8008364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008368:	f383 8811 	msr	BASEPRI, r3
 800836c:	f3bf 8f6f 	isb	sy
 8008370:	f3bf 8f4f 	dsb	sy
 8008374:	60fb      	str	r3, [r7, #12]
}
 8008376:	bf00      	nop
 8008378:	e7fe      	b.n	8008378 <prvTaskExitError+0x28>
	__asm volatile
 800837a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800837e:	f383 8811 	msr	BASEPRI, r3
 8008382:	f3bf 8f6f 	isb	sy
 8008386:	f3bf 8f4f 	dsb	sy
 800838a:	60bb      	str	r3, [r7, #8]
}
 800838c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800838e:	bf00      	nop
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d0fc      	beq.n	8008390 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008396:	bf00      	nop
 8008398:	bf00      	nop
 800839a:	3714      	adds	r7, #20
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr
 80083a4:	2000001c 	.word	0x2000001c
	...

080083b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80083b0:	4b07      	ldr	r3, [pc, #28]	; (80083d0 <pxCurrentTCBConst2>)
 80083b2:	6819      	ldr	r1, [r3, #0]
 80083b4:	6808      	ldr	r0, [r1, #0]
 80083b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083ba:	f380 8809 	msr	PSP, r0
 80083be:	f3bf 8f6f 	isb	sy
 80083c2:	f04f 0000 	mov.w	r0, #0
 80083c6:	f380 8811 	msr	BASEPRI, r0
 80083ca:	4770      	bx	lr
 80083cc:	f3af 8000 	nop.w

080083d0 <pxCurrentTCBConst2>:
 80083d0:	200009a8 	.word	0x200009a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80083d4:	bf00      	nop
 80083d6:	bf00      	nop

080083d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80083d8:	4808      	ldr	r0, [pc, #32]	; (80083fc <prvPortStartFirstTask+0x24>)
 80083da:	6800      	ldr	r0, [r0, #0]
 80083dc:	6800      	ldr	r0, [r0, #0]
 80083de:	f380 8808 	msr	MSP, r0
 80083e2:	f04f 0000 	mov.w	r0, #0
 80083e6:	f380 8814 	msr	CONTROL, r0
 80083ea:	b662      	cpsie	i
 80083ec:	b661      	cpsie	f
 80083ee:	f3bf 8f4f 	dsb	sy
 80083f2:	f3bf 8f6f 	isb	sy
 80083f6:	df00      	svc	0
 80083f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80083fa:	bf00      	nop
 80083fc:	e000ed08 	.word	0xe000ed08

08008400 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b086      	sub	sp, #24
 8008404:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008406:	4b46      	ldr	r3, [pc, #280]	; (8008520 <xPortStartScheduler+0x120>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a46      	ldr	r2, [pc, #280]	; (8008524 <xPortStartScheduler+0x124>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d10a      	bne.n	8008426 <xPortStartScheduler+0x26>
	__asm volatile
 8008410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008414:	f383 8811 	msr	BASEPRI, r3
 8008418:	f3bf 8f6f 	isb	sy
 800841c:	f3bf 8f4f 	dsb	sy
 8008420:	613b      	str	r3, [r7, #16]
}
 8008422:	bf00      	nop
 8008424:	e7fe      	b.n	8008424 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008426:	4b3e      	ldr	r3, [pc, #248]	; (8008520 <xPortStartScheduler+0x120>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a3f      	ldr	r2, [pc, #252]	; (8008528 <xPortStartScheduler+0x128>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d10a      	bne.n	8008446 <xPortStartScheduler+0x46>
	__asm volatile
 8008430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008434:	f383 8811 	msr	BASEPRI, r3
 8008438:	f3bf 8f6f 	isb	sy
 800843c:	f3bf 8f4f 	dsb	sy
 8008440:	60fb      	str	r3, [r7, #12]
}
 8008442:	bf00      	nop
 8008444:	e7fe      	b.n	8008444 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008446:	4b39      	ldr	r3, [pc, #228]	; (800852c <xPortStartScheduler+0x12c>)
 8008448:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	781b      	ldrb	r3, [r3, #0]
 800844e:	b2db      	uxtb	r3, r3
 8008450:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	22ff      	movs	r2, #255	; 0xff
 8008456:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	781b      	ldrb	r3, [r3, #0]
 800845c:	b2db      	uxtb	r3, r3
 800845e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008460:	78fb      	ldrb	r3, [r7, #3]
 8008462:	b2db      	uxtb	r3, r3
 8008464:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008468:	b2da      	uxtb	r2, r3
 800846a:	4b31      	ldr	r3, [pc, #196]	; (8008530 <xPortStartScheduler+0x130>)
 800846c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800846e:	4b31      	ldr	r3, [pc, #196]	; (8008534 <xPortStartScheduler+0x134>)
 8008470:	2207      	movs	r2, #7
 8008472:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008474:	e009      	b.n	800848a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008476:	4b2f      	ldr	r3, [pc, #188]	; (8008534 <xPortStartScheduler+0x134>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	3b01      	subs	r3, #1
 800847c:	4a2d      	ldr	r2, [pc, #180]	; (8008534 <xPortStartScheduler+0x134>)
 800847e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008480:	78fb      	ldrb	r3, [r7, #3]
 8008482:	b2db      	uxtb	r3, r3
 8008484:	005b      	lsls	r3, r3, #1
 8008486:	b2db      	uxtb	r3, r3
 8008488:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800848a:	78fb      	ldrb	r3, [r7, #3]
 800848c:	b2db      	uxtb	r3, r3
 800848e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008492:	2b80      	cmp	r3, #128	; 0x80
 8008494:	d0ef      	beq.n	8008476 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008496:	4b27      	ldr	r3, [pc, #156]	; (8008534 <xPortStartScheduler+0x134>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f1c3 0307 	rsb	r3, r3, #7
 800849e:	2b04      	cmp	r3, #4
 80084a0:	d00a      	beq.n	80084b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80084a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a6:	f383 8811 	msr	BASEPRI, r3
 80084aa:	f3bf 8f6f 	isb	sy
 80084ae:	f3bf 8f4f 	dsb	sy
 80084b2:	60bb      	str	r3, [r7, #8]
}
 80084b4:	bf00      	nop
 80084b6:	e7fe      	b.n	80084b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80084b8:	4b1e      	ldr	r3, [pc, #120]	; (8008534 <xPortStartScheduler+0x134>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	021b      	lsls	r3, r3, #8
 80084be:	4a1d      	ldr	r2, [pc, #116]	; (8008534 <xPortStartScheduler+0x134>)
 80084c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80084c2:	4b1c      	ldr	r3, [pc, #112]	; (8008534 <xPortStartScheduler+0x134>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80084ca:	4a1a      	ldr	r2, [pc, #104]	; (8008534 <xPortStartScheduler+0x134>)
 80084cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	b2da      	uxtb	r2, r3
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80084d6:	4b18      	ldr	r3, [pc, #96]	; (8008538 <xPortStartScheduler+0x138>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a17      	ldr	r2, [pc, #92]	; (8008538 <xPortStartScheduler+0x138>)
 80084dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80084e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80084e2:	4b15      	ldr	r3, [pc, #84]	; (8008538 <xPortStartScheduler+0x138>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4a14      	ldr	r2, [pc, #80]	; (8008538 <xPortStartScheduler+0x138>)
 80084e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80084ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80084ee:	f000 f8dd 	bl	80086ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80084f2:	4b12      	ldr	r3, [pc, #72]	; (800853c <xPortStartScheduler+0x13c>)
 80084f4:	2200      	movs	r2, #0
 80084f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80084f8:	f000 f8fc 	bl	80086f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80084fc:	4b10      	ldr	r3, [pc, #64]	; (8008540 <xPortStartScheduler+0x140>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a0f      	ldr	r2, [pc, #60]	; (8008540 <xPortStartScheduler+0x140>)
 8008502:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008506:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008508:	f7ff ff66 	bl	80083d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800850c:	f7ff fd4a 	bl	8007fa4 <vTaskSwitchContext>
	prvTaskExitError();
 8008510:	f7ff ff1e 	bl	8008350 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008514:	2300      	movs	r3, #0
}
 8008516:	4618      	mov	r0, r3
 8008518:	3718      	adds	r7, #24
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
 800851e:	bf00      	nop
 8008520:	e000ed00 	.word	0xe000ed00
 8008524:	410fc271 	.word	0x410fc271
 8008528:	410fc270 	.word	0x410fc270
 800852c:	e000e400 	.word	0xe000e400
 8008530:	20000ad4 	.word	0x20000ad4
 8008534:	20000ad8 	.word	0x20000ad8
 8008538:	e000ed20 	.word	0xe000ed20
 800853c:	2000001c 	.word	0x2000001c
 8008540:	e000ef34 	.word	0xe000ef34

08008544 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0
	__asm volatile
 800854a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800854e:	f383 8811 	msr	BASEPRI, r3
 8008552:	f3bf 8f6f 	isb	sy
 8008556:	f3bf 8f4f 	dsb	sy
 800855a:	607b      	str	r3, [r7, #4]
}
 800855c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800855e:	4b0f      	ldr	r3, [pc, #60]	; (800859c <vPortEnterCritical+0x58>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	3301      	adds	r3, #1
 8008564:	4a0d      	ldr	r2, [pc, #52]	; (800859c <vPortEnterCritical+0x58>)
 8008566:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008568:	4b0c      	ldr	r3, [pc, #48]	; (800859c <vPortEnterCritical+0x58>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	2b01      	cmp	r3, #1
 800856e:	d10f      	bne.n	8008590 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008570:	4b0b      	ldr	r3, [pc, #44]	; (80085a0 <vPortEnterCritical+0x5c>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	b2db      	uxtb	r3, r3
 8008576:	2b00      	cmp	r3, #0
 8008578:	d00a      	beq.n	8008590 <vPortEnterCritical+0x4c>
	__asm volatile
 800857a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800857e:	f383 8811 	msr	BASEPRI, r3
 8008582:	f3bf 8f6f 	isb	sy
 8008586:	f3bf 8f4f 	dsb	sy
 800858a:	603b      	str	r3, [r7, #0]
}
 800858c:	bf00      	nop
 800858e:	e7fe      	b.n	800858e <vPortEnterCritical+0x4a>
	}
}
 8008590:	bf00      	nop
 8008592:	370c      	adds	r7, #12
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr
 800859c:	2000001c 	.word	0x2000001c
 80085a0:	e000ed04 	.word	0xe000ed04

080085a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80085a4:	b480      	push	{r7}
 80085a6:	b083      	sub	sp, #12
 80085a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80085aa:	4b12      	ldr	r3, [pc, #72]	; (80085f4 <vPortExitCritical+0x50>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d10a      	bne.n	80085c8 <vPortExitCritical+0x24>
	__asm volatile
 80085b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b6:	f383 8811 	msr	BASEPRI, r3
 80085ba:	f3bf 8f6f 	isb	sy
 80085be:	f3bf 8f4f 	dsb	sy
 80085c2:	607b      	str	r3, [r7, #4]
}
 80085c4:	bf00      	nop
 80085c6:	e7fe      	b.n	80085c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80085c8:	4b0a      	ldr	r3, [pc, #40]	; (80085f4 <vPortExitCritical+0x50>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	3b01      	subs	r3, #1
 80085ce:	4a09      	ldr	r2, [pc, #36]	; (80085f4 <vPortExitCritical+0x50>)
 80085d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80085d2:	4b08      	ldr	r3, [pc, #32]	; (80085f4 <vPortExitCritical+0x50>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d105      	bne.n	80085e6 <vPortExitCritical+0x42>
 80085da:	2300      	movs	r3, #0
 80085dc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80085e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80085e6:	bf00      	nop
 80085e8:	370c      	adds	r7, #12
 80085ea:	46bd      	mov	sp, r7
 80085ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f0:	4770      	bx	lr
 80085f2:	bf00      	nop
 80085f4:	2000001c 	.word	0x2000001c
	...

08008600 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008600:	f3ef 8009 	mrs	r0, PSP
 8008604:	f3bf 8f6f 	isb	sy
 8008608:	4b15      	ldr	r3, [pc, #84]	; (8008660 <pxCurrentTCBConst>)
 800860a:	681a      	ldr	r2, [r3, #0]
 800860c:	f01e 0f10 	tst.w	lr, #16
 8008610:	bf08      	it	eq
 8008612:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008616:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800861a:	6010      	str	r0, [r2, #0]
 800861c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008620:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008624:	f380 8811 	msr	BASEPRI, r0
 8008628:	f3bf 8f4f 	dsb	sy
 800862c:	f3bf 8f6f 	isb	sy
 8008630:	f7ff fcb8 	bl	8007fa4 <vTaskSwitchContext>
 8008634:	f04f 0000 	mov.w	r0, #0
 8008638:	f380 8811 	msr	BASEPRI, r0
 800863c:	bc09      	pop	{r0, r3}
 800863e:	6819      	ldr	r1, [r3, #0]
 8008640:	6808      	ldr	r0, [r1, #0]
 8008642:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008646:	f01e 0f10 	tst.w	lr, #16
 800864a:	bf08      	it	eq
 800864c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008650:	f380 8809 	msr	PSP, r0
 8008654:	f3bf 8f6f 	isb	sy
 8008658:	4770      	bx	lr
 800865a:	bf00      	nop
 800865c:	f3af 8000 	nop.w

08008660 <pxCurrentTCBConst>:
 8008660:	200009a8 	.word	0x200009a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008664:	bf00      	nop
 8008666:	bf00      	nop

08008668 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b082      	sub	sp, #8
 800866c:	af00      	add	r7, sp, #0
	__asm volatile
 800866e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008672:	f383 8811 	msr	BASEPRI, r3
 8008676:	f3bf 8f6f 	isb	sy
 800867a:	f3bf 8f4f 	dsb	sy
 800867e:	607b      	str	r3, [r7, #4]
}
 8008680:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008682:	f7ff fbd7 	bl	8007e34 <xTaskIncrementTick>
 8008686:	4603      	mov	r3, r0
 8008688:	2b00      	cmp	r3, #0
 800868a:	d003      	beq.n	8008694 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800868c:	4b06      	ldr	r3, [pc, #24]	; (80086a8 <SysTick_Handler+0x40>)
 800868e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008692:	601a      	str	r2, [r3, #0]
 8008694:	2300      	movs	r3, #0
 8008696:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	f383 8811 	msr	BASEPRI, r3
}
 800869e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80086a0:	bf00      	nop
 80086a2:	3708      	adds	r7, #8
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}
 80086a8:	e000ed04 	.word	0xe000ed04

080086ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80086ac:	b480      	push	{r7}
 80086ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80086b0:	4b0b      	ldr	r3, [pc, #44]	; (80086e0 <vPortSetupTimerInterrupt+0x34>)
 80086b2:	2200      	movs	r2, #0
 80086b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80086b6:	4b0b      	ldr	r3, [pc, #44]	; (80086e4 <vPortSetupTimerInterrupt+0x38>)
 80086b8:	2200      	movs	r2, #0
 80086ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80086bc:	4b0a      	ldr	r3, [pc, #40]	; (80086e8 <vPortSetupTimerInterrupt+0x3c>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a0a      	ldr	r2, [pc, #40]	; (80086ec <vPortSetupTimerInterrupt+0x40>)
 80086c2:	fba2 2303 	umull	r2, r3, r2, r3
 80086c6:	099b      	lsrs	r3, r3, #6
 80086c8:	4a09      	ldr	r2, [pc, #36]	; (80086f0 <vPortSetupTimerInterrupt+0x44>)
 80086ca:	3b01      	subs	r3, #1
 80086cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80086ce:	4b04      	ldr	r3, [pc, #16]	; (80086e0 <vPortSetupTimerInterrupt+0x34>)
 80086d0:	2207      	movs	r2, #7
 80086d2:	601a      	str	r2, [r3, #0]
}
 80086d4:	bf00      	nop
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr
 80086de:	bf00      	nop
 80086e0:	e000e010 	.word	0xe000e010
 80086e4:	e000e018 	.word	0xe000e018
 80086e8:	20000010 	.word	0x20000010
 80086ec:	10624dd3 	.word	0x10624dd3
 80086f0:	e000e014 	.word	0xe000e014

080086f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80086f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008704 <vPortEnableVFP+0x10>
 80086f8:	6801      	ldr	r1, [r0, #0]
 80086fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80086fe:	6001      	str	r1, [r0, #0]
 8008700:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008702:	bf00      	nop
 8008704:	e000ed88 	.word	0xe000ed88

08008708 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b08a      	sub	sp, #40	; 0x28
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008710:	2300      	movs	r3, #0
 8008712:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008714:	f7ff fae4 	bl	8007ce0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008718:	4b5b      	ldr	r3, [pc, #364]	; (8008888 <pvPortMalloc+0x180>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d101      	bne.n	8008724 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008720:	f000 f920 	bl	8008964 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008724:	4b59      	ldr	r3, [pc, #356]	; (800888c <pvPortMalloc+0x184>)
 8008726:	681a      	ldr	r2, [r3, #0]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	4013      	ands	r3, r2
 800872c:	2b00      	cmp	r3, #0
 800872e:	f040 8093 	bne.w	8008858 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d01d      	beq.n	8008774 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008738:	2208      	movs	r2, #8
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	4413      	add	r3, r2
 800873e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f003 0307 	and.w	r3, r3, #7
 8008746:	2b00      	cmp	r3, #0
 8008748:	d014      	beq.n	8008774 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f023 0307 	bic.w	r3, r3, #7
 8008750:	3308      	adds	r3, #8
 8008752:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f003 0307 	and.w	r3, r3, #7
 800875a:	2b00      	cmp	r3, #0
 800875c:	d00a      	beq.n	8008774 <pvPortMalloc+0x6c>
	__asm volatile
 800875e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008762:	f383 8811 	msr	BASEPRI, r3
 8008766:	f3bf 8f6f 	isb	sy
 800876a:	f3bf 8f4f 	dsb	sy
 800876e:	617b      	str	r3, [r7, #20]
}
 8008770:	bf00      	nop
 8008772:	e7fe      	b.n	8008772 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d06e      	beq.n	8008858 <pvPortMalloc+0x150>
 800877a:	4b45      	ldr	r3, [pc, #276]	; (8008890 <pvPortMalloc+0x188>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	687a      	ldr	r2, [r7, #4]
 8008780:	429a      	cmp	r2, r3
 8008782:	d869      	bhi.n	8008858 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008784:	4b43      	ldr	r3, [pc, #268]	; (8008894 <pvPortMalloc+0x18c>)
 8008786:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008788:	4b42      	ldr	r3, [pc, #264]	; (8008894 <pvPortMalloc+0x18c>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800878e:	e004      	b.n	800879a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008792:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800879a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	687a      	ldr	r2, [r7, #4]
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d903      	bls.n	80087ac <pvPortMalloc+0xa4>
 80087a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d1f1      	bne.n	8008790 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80087ac:	4b36      	ldr	r3, [pc, #216]	; (8008888 <pvPortMalloc+0x180>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087b2:	429a      	cmp	r2, r3
 80087b4:	d050      	beq.n	8008858 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80087b6:	6a3b      	ldr	r3, [r7, #32]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	2208      	movs	r2, #8
 80087bc:	4413      	add	r3, r2
 80087be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80087c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c2:	681a      	ldr	r2, [r3, #0]
 80087c4:	6a3b      	ldr	r3, [r7, #32]
 80087c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80087c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ca:	685a      	ldr	r2, [r3, #4]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	1ad2      	subs	r2, r2, r3
 80087d0:	2308      	movs	r3, #8
 80087d2:	005b      	lsls	r3, r3, #1
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d91f      	bls.n	8008818 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80087d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	4413      	add	r3, r2
 80087de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80087e0:	69bb      	ldr	r3, [r7, #24]
 80087e2:	f003 0307 	and.w	r3, r3, #7
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d00a      	beq.n	8008800 <pvPortMalloc+0xf8>
	__asm volatile
 80087ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ee:	f383 8811 	msr	BASEPRI, r3
 80087f2:	f3bf 8f6f 	isb	sy
 80087f6:	f3bf 8f4f 	dsb	sy
 80087fa:	613b      	str	r3, [r7, #16]
}
 80087fc:	bf00      	nop
 80087fe:	e7fe      	b.n	80087fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008802:	685a      	ldr	r2, [r3, #4]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	1ad2      	subs	r2, r2, r3
 8008808:	69bb      	ldr	r3, [r7, #24]
 800880a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800880c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800880e:	687a      	ldr	r2, [r7, #4]
 8008810:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008812:	69b8      	ldr	r0, [r7, #24]
 8008814:	f000 f908 	bl	8008a28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008818:	4b1d      	ldr	r3, [pc, #116]	; (8008890 <pvPortMalloc+0x188>)
 800881a:	681a      	ldr	r2, [r3, #0]
 800881c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	1ad3      	subs	r3, r2, r3
 8008822:	4a1b      	ldr	r2, [pc, #108]	; (8008890 <pvPortMalloc+0x188>)
 8008824:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008826:	4b1a      	ldr	r3, [pc, #104]	; (8008890 <pvPortMalloc+0x188>)
 8008828:	681a      	ldr	r2, [r3, #0]
 800882a:	4b1b      	ldr	r3, [pc, #108]	; (8008898 <pvPortMalloc+0x190>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	429a      	cmp	r2, r3
 8008830:	d203      	bcs.n	800883a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008832:	4b17      	ldr	r3, [pc, #92]	; (8008890 <pvPortMalloc+0x188>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4a18      	ldr	r2, [pc, #96]	; (8008898 <pvPortMalloc+0x190>)
 8008838:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800883a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800883c:	685a      	ldr	r2, [r3, #4]
 800883e:	4b13      	ldr	r3, [pc, #76]	; (800888c <pvPortMalloc+0x184>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	431a      	orrs	r2, r3
 8008844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008846:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884a:	2200      	movs	r2, #0
 800884c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800884e:	4b13      	ldr	r3, [pc, #76]	; (800889c <pvPortMalloc+0x194>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	3301      	adds	r3, #1
 8008854:	4a11      	ldr	r2, [pc, #68]	; (800889c <pvPortMalloc+0x194>)
 8008856:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008858:	f7ff fa50 	bl	8007cfc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800885c:	69fb      	ldr	r3, [r7, #28]
 800885e:	f003 0307 	and.w	r3, r3, #7
 8008862:	2b00      	cmp	r3, #0
 8008864:	d00a      	beq.n	800887c <pvPortMalloc+0x174>
	__asm volatile
 8008866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800886a:	f383 8811 	msr	BASEPRI, r3
 800886e:	f3bf 8f6f 	isb	sy
 8008872:	f3bf 8f4f 	dsb	sy
 8008876:	60fb      	str	r3, [r7, #12]
}
 8008878:	bf00      	nop
 800887a:	e7fe      	b.n	800887a <pvPortMalloc+0x172>
	return pvReturn;
 800887c:	69fb      	ldr	r3, [r7, #28]
}
 800887e:	4618      	mov	r0, r3
 8008880:	3728      	adds	r7, #40	; 0x28
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}
 8008886:	bf00      	nop
 8008888:	200046e4 	.word	0x200046e4
 800888c:	200046f8 	.word	0x200046f8
 8008890:	200046e8 	.word	0x200046e8
 8008894:	200046dc 	.word	0x200046dc
 8008898:	200046ec 	.word	0x200046ec
 800889c:	200046f0 	.word	0x200046f0

080088a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b086      	sub	sp, #24
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d04d      	beq.n	800894e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80088b2:	2308      	movs	r3, #8
 80088b4:	425b      	negs	r3, r3
 80088b6:	697a      	ldr	r2, [r7, #20]
 80088b8:	4413      	add	r3, r2
 80088ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	685a      	ldr	r2, [r3, #4]
 80088c4:	4b24      	ldr	r3, [pc, #144]	; (8008958 <vPortFree+0xb8>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4013      	ands	r3, r2
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d10a      	bne.n	80088e4 <vPortFree+0x44>
	__asm volatile
 80088ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d2:	f383 8811 	msr	BASEPRI, r3
 80088d6:	f3bf 8f6f 	isb	sy
 80088da:	f3bf 8f4f 	dsb	sy
 80088de:	60fb      	str	r3, [r7, #12]
}
 80088e0:	bf00      	nop
 80088e2:	e7fe      	b.n	80088e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d00a      	beq.n	8008902 <vPortFree+0x62>
	__asm volatile
 80088ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f0:	f383 8811 	msr	BASEPRI, r3
 80088f4:	f3bf 8f6f 	isb	sy
 80088f8:	f3bf 8f4f 	dsb	sy
 80088fc:	60bb      	str	r3, [r7, #8]
}
 80088fe:	bf00      	nop
 8008900:	e7fe      	b.n	8008900 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	685a      	ldr	r2, [r3, #4]
 8008906:	4b14      	ldr	r3, [pc, #80]	; (8008958 <vPortFree+0xb8>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4013      	ands	r3, r2
 800890c:	2b00      	cmp	r3, #0
 800890e:	d01e      	beq.n	800894e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d11a      	bne.n	800894e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	685a      	ldr	r2, [r3, #4]
 800891c:	4b0e      	ldr	r3, [pc, #56]	; (8008958 <vPortFree+0xb8>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	43db      	mvns	r3, r3
 8008922:	401a      	ands	r2, r3
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008928:	f7ff f9da 	bl	8007ce0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	685a      	ldr	r2, [r3, #4]
 8008930:	4b0a      	ldr	r3, [pc, #40]	; (800895c <vPortFree+0xbc>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4413      	add	r3, r2
 8008936:	4a09      	ldr	r2, [pc, #36]	; (800895c <vPortFree+0xbc>)
 8008938:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800893a:	6938      	ldr	r0, [r7, #16]
 800893c:	f000 f874 	bl	8008a28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008940:	4b07      	ldr	r3, [pc, #28]	; (8008960 <vPortFree+0xc0>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	3301      	adds	r3, #1
 8008946:	4a06      	ldr	r2, [pc, #24]	; (8008960 <vPortFree+0xc0>)
 8008948:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800894a:	f7ff f9d7 	bl	8007cfc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800894e:	bf00      	nop
 8008950:	3718      	adds	r7, #24
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}
 8008956:	bf00      	nop
 8008958:	200046f8 	.word	0x200046f8
 800895c:	200046e8 	.word	0x200046e8
 8008960:	200046f4 	.word	0x200046f4

08008964 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008964:	b480      	push	{r7}
 8008966:	b085      	sub	sp, #20
 8008968:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800896a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800896e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008970:	4b27      	ldr	r3, [pc, #156]	; (8008a10 <prvHeapInit+0xac>)
 8008972:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f003 0307 	and.w	r3, r3, #7
 800897a:	2b00      	cmp	r3, #0
 800897c:	d00c      	beq.n	8008998 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	3307      	adds	r3, #7
 8008982:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f023 0307 	bic.w	r3, r3, #7
 800898a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800898c:	68ba      	ldr	r2, [r7, #8]
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	1ad3      	subs	r3, r2, r3
 8008992:	4a1f      	ldr	r2, [pc, #124]	; (8008a10 <prvHeapInit+0xac>)
 8008994:	4413      	add	r3, r2
 8008996:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800899c:	4a1d      	ldr	r2, [pc, #116]	; (8008a14 <prvHeapInit+0xb0>)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80089a2:	4b1c      	ldr	r3, [pc, #112]	; (8008a14 <prvHeapInit+0xb0>)
 80089a4:	2200      	movs	r2, #0
 80089a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	68ba      	ldr	r2, [r7, #8]
 80089ac:	4413      	add	r3, r2
 80089ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80089b0:	2208      	movs	r2, #8
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	1a9b      	subs	r3, r3, r2
 80089b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	f023 0307 	bic.w	r3, r3, #7
 80089be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	4a15      	ldr	r2, [pc, #84]	; (8008a18 <prvHeapInit+0xb4>)
 80089c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80089c6:	4b14      	ldr	r3, [pc, #80]	; (8008a18 <prvHeapInit+0xb4>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	2200      	movs	r2, #0
 80089cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80089ce:	4b12      	ldr	r3, [pc, #72]	; (8008a18 <prvHeapInit+0xb4>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	2200      	movs	r2, #0
 80089d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	68fa      	ldr	r2, [r7, #12]
 80089de:	1ad2      	subs	r2, r2, r3
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80089e4:	4b0c      	ldr	r3, [pc, #48]	; (8008a18 <prvHeapInit+0xb4>)
 80089e6:	681a      	ldr	r2, [r3, #0]
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	4a0a      	ldr	r2, [pc, #40]	; (8008a1c <prvHeapInit+0xb8>)
 80089f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	4a09      	ldr	r2, [pc, #36]	; (8008a20 <prvHeapInit+0xbc>)
 80089fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80089fc:	4b09      	ldr	r3, [pc, #36]	; (8008a24 <prvHeapInit+0xc0>)
 80089fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008a02:	601a      	str	r2, [r3, #0]
}
 8008a04:	bf00      	nop
 8008a06:	3714      	adds	r7, #20
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr
 8008a10:	20000adc 	.word	0x20000adc
 8008a14:	200046dc 	.word	0x200046dc
 8008a18:	200046e4 	.word	0x200046e4
 8008a1c:	200046ec 	.word	0x200046ec
 8008a20:	200046e8 	.word	0x200046e8
 8008a24:	200046f8 	.word	0x200046f8

08008a28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b085      	sub	sp, #20
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008a30:	4b28      	ldr	r3, [pc, #160]	; (8008ad4 <prvInsertBlockIntoFreeList+0xac>)
 8008a32:	60fb      	str	r3, [r7, #12]
 8008a34:	e002      	b.n	8008a3c <prvInsertBlockIntoFreeList+0x14>
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	60fb      	str	r3, [r7, #12]
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	687a      	ldr	r2, [r7, #4]
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d8f7      	bhi.n	8008a36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	68ba      	ldr	r2, [r7, #8]
 8008a50:	4413      	add	r3, r2
 8008a52:	687a      	ldr	r2, [r7, #4]
 8008a54:	429a      	cmp	r2, r3
 8008a56:	d108      	bne.n	8008a6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	685a      	ldr	r2, [r3, #4]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	441a      	add	r2, r3
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	68ba      	ldr	r2, [r7, #8]
 8008a74:	441a      	add	r2, r3
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d118      	bne.n	8008ab0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681a      	ldr	r2, [r3, #0]
 8008a82:	4b15      	ldr	r3, [pc, #84]	; (8008ad8 <prvInsertBlockIntoFreeList+0xb0>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	429a      	cmp	r2, r3
 8008a88:	d00d      	beq.n	8008aa6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	685a      	ldr	r2, [r3, #4]
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	441a      	add	r2, r3
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	681a      	ldr	r2, [r3, #0]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	601a      	str	r2, [r3, #0]
 8008aa4:	e008      	b.n	8008ab8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008aa6:	4b0c      	ldr	r3, [pc, #48]	; (8008ad8 <prvInsertBlockIntoFreeList+0xb0>)
 8008aa8:	681a      	ldr	r2, [r3, #0]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	601a      	str	r2, [r3, #0]
 8008aae:	e003      	b.n	8008ab8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681a      	ldr	r2, [r3, #0]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008ab8:	68fa      	ldr	r2, [r7, #12]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	429a      	cmp	r2, r3
 8008abe:	d002      	beq.n	8008ac6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	687a      	ldr	r2, [r7, #4]
 8008ac4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ac6:	bf00      	nop
 8008ac8:	3714      	adds	r7, #20
 8008aca:	46bd      	mov	sp, r7
 8008acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad0:	4770      	bx	lr
 8008ad2:	bf00      	nop
 8008ad4:	200046dc 	.word	0x200046dc
 8008ad8:	200046e4 	.word	0x200046e4

08008adc <__errno>:
 8008adc:	4b01      	ldr	r3, [pc, #4]	; (8008ae4 <__errno+0x8>)
 8008ade:	6818      	ldr	r0, [r3, #0]
 8008ae0:	4770      	bx	lr
 8008ae2:	bf00      	nop
 8008ae4:	20000020 	.word	0x20000020

08008ae8 <__libc_init_array>:
 8008ae8:	b570      	push	{r4, r5, r6, lr}
 8008aea:	4d0d      	ldr	r5, [pc, #52]	; (8008b20 <__libc_init_array+0x38>)
 8008aec:	4c0d      	ldr	r4, [pc, #52]	; (8008b24 <__libc_init_array+0x3c>)
 8008aee:	1b64      	subs	r4, r4, r5
 8008af0:	10a4      	asrs	r4, r4, #2
 8008af2:	2600      	movs	r6, #0
 8008af4:	42a6      	cmp	r6, r4
 8008af6:	d109      	bne.n	8008b0c <__libc_init_array+0x24>
 8008af8:	4d0b      	ldr	r5, [pc, #44]	; (8008b28 <__libc_init_array+0x40>)
 8008afa:	4c0c      	ldr	r4, [pc, #48]	; (8008b2c <__libc_init_array+0x44>)
 8008afc:	f000 fcb8 	bl	8009470 <_init>
 8008b00:	1b64      	subs	r4, r4, r5
 8008b02:	10a4      	asrs	r4, r4, #2
 8008b04:	2600      	movs	r6, #0
 8008b06:	42a6      	cmp	r6, r4
 8008b08:	d105      	bne.n	8008b16 <__libc_init_array+0x2e>
 8008b0a:	bd70      	pop	{r4, r5, r6, pc}
 8008b0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b10:	4798      	blx	r3
 8008b12:	3601      	adds	r6, #1
 8008b14:	e7ee      	b.n	8008af4 <__libc_init_array+0xc>
 8008b16:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b1a:	4798      	blx	r3
 8008b1c:	3601      	adds	r6, #1
 8008b1e:	e7f2      	b.n	8008b06 <__libc_init_array+0x1e>
 8008b20:	0800ab64 	.word	0x0800ab64
 8008b24:	0800ab64 	.word	0x0800ab64
 8008b28:	0800ab64 	.word	0x0800ab64
 8008b2c:	0800ab68 	.word	0x0800ab68

08008b30 <__retarget_lock_acquire_recursive>:
 8008b30:	4770      	bx	lr

08008b32 <__retarget_lock_release_recursive>:
 8008b32:	4770      	bx	lr

08008b34 <memcpy>:
 8008b34:	440a      	add	r2, r1
 8008b36:	4291      	cmp	r1, r2
 8008b38:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b3c:	d100      	bne.n	8008b40 <memcpy+0xc>
 8008b3e:	4770      	bx	lr
 8008b40:	b510      	push	{r4, lr}
 8008b42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b4a:	4291      	cmp	r1, r2
 8008b4c:	d1f9      	bne.n	8008b42 <memcpy+0xe>
 8008b4e:	bd10      	pop	{r4, pc}

08008b50 <memmove>:
 8008b50:	4288      	cmp	r0, r1
 8008b52:	b510      	push	{r4, lr}
 8008b54:	eb01 0402 	add.w	r4, r1, r2
 8008b58:	d902      	bls.n	8008b60 <memmove+0x10>
 8008b5a:	4284      	cmp	r4, r0
 8008b5c:	4623      	mov	r3, r4
 8008b5e:	d807      	bhi.n	8008b70 <memmove+0x20>
 8008b60:	1e43      	subs	r3, r0, #1
 8008b62:	42a1      	cmp	r1, r4
 8008b64:	d008      	beq.n	8008b78 <memmove+0x28>
 8008b66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b6e:	e7f8      	b.n	8008b62 <memmove+0x12>
 8008b70:	4402      	add	r2, r0
 8008b72:	4601      	mov	r1, r0
 8008b74:	428a      	cmp	r2, r1
 8008b76:	d100      	bne.n	8008b7a <memmove+0x2a>
 8008b78:	bd10      	pop	{r4, pc}
 8008b7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b82:	e7f7      	b.n	8008b74 <memmove+0x24>

08008b84 <memset>:
 8008b84:	4402      	add	r2, r0
 8008b86:	4603      	mov	r3, r0
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d100      	bne.n	8008b8e <memset+0xa>
 8008b8c:	4770      	bx	lr
 8008b8e:	f803 1b01 	strb.w	r1, [r3], #1
 8008b92:	e7f9      	b.n	8008b88 <memset+0x4>

08008b94 <_malloc_r>:
 8008b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b96:	1ccd      	adds	r5, r1, #3
 8008b98:	f025 0503 	bic.w	r5, r5, #3
 8008b9c:	3508      	adds	r5, #8
 8008b9e:	2d0c      	cmp	r5, #12
 8008ba0:	bf38      	it	cc
 8008ba2:	250c      	movcc	r5, #12
 8008ba4:	2d00      	cmp	r5, #0
 8008ba6:	4606      	mov	r6, r0
 8008ba8:	db01      	blt.n	8008bae <_malloc_r+0x1a>
 8008baa:	42a9      	cmp	r1, r5
 8008bac:	d903      	bls.n	8008bb6 <_malloc_r+0x22>
 8008bae:	230c      	movs	r3, #12
 8008bb0:	6033      	str	r3, [r6, #0]
 8008bb2:	2000      	movs	r0, #0
 8008bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bb6:	f000 f8e1 	bl	8008d7c <__malloc_lock>
 8008bba:	4921      	ldr	r1, [pc, #132]	; (8008c40 <_malloc_r+0xac>)
 8008bbc:	680a      	ldr	r2, [r1, #0]
 8008bbe:	4614      	mov	r4, r2
 8008bc0:	b99c      	cbnz	r4, 8008bea <_malloc_r+0x56>
 8008bc2:	4f20      	ldr	r7, [pc, #128]	; (8008c44 <_malloc_r+0xb0>)
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	b923      	cbnz	r3, 8008bd2 <_malloc_r+0x3e>
 8008bc8:	4621      	mov	r1, r4
 8008bca:	4630      	mov	r0, r6
 8008bcc:	f000 f8a6 	bl	8008d1c <_sbrk_r>
 8008bd0:	6038      	str	r0, [r7, #0]
 8008bd2:	4629      	mov	r1, r5
 8008bd4:	4630      	mov	r0, r6
 8008bd6:	f000 f8a1 	bl	8008d1c <_sbrk_r>
 8008bda:	1c43      	adds	r3, r0, #1
 8008bdc:	d123      	bne.n	8008c26 <_malloc_r+0x92>
 8008bde:	230c      	movs	r3, #12
 8008be0:	6033      	str	r3, [r6, #0]
 8008be2:	4630      	mov	r0, r6
 8008be4:	f000 f8d0 	bl	8008d88 <__malloc_unlock>
 8008be8:	e7e3      	b.n	8008bb2 <_malloc_r+0x1e>
 8008bea:	6823      	ldr	r3, [r4, #0]
 8008bec:	1b5b      	subs	r3, r3, r5
 8008bee:	d417      	bmi.n	8008c20 <_malloc_r+0x8c>
 8008bf0:	2b0b      	cmp	r3, #11
 8008bf2:	d903      	bls.n	8008bfc <_malloc_r+0x68>
 8008bf4:	6023      	str	r3, [r4, #0]
 8008bf6:	441c      	add	r4, r3
 8008bf8:	6025      	str	r5, [r4, #0]
 8008bfa:	e004      	b.n	8008c06 <_malloc_r+0x72>
 8008bfc:	6863      	ldr	r3, [r4, #4]
 8008bfe:	42a2      	cmp	r2, r4
 8008c00:	bf0c      	ite	eq
 8008c02:	600b      	streq	r3, [r1, #0]
 8008c04:	6053      	strne	r3, [r2, #4]
 8008c06:	4630      	mov	r0, r6
 8008c08:	f000 f8be 	bl	8008d88 <__malloc_unlock>
 8008c0c:	f104 000b 	add.w	r0, r4, #11
 8008c10:	1d23      	adds	r3, r4, #4
 8008c12:	f020 0007 	bic.w	r0, r0, #7
 8008c16:	1ac2      	subs	r2, r0, r3
 8008c18:	d0cc      	beq.n	8008bb4 <_malloc_r+0x20>
 8008c1a:	1a1b      	subs	r3, r3, r0
 8008c1c:	50a3      	str	r3, [r4, r2]
 8008c1e:	e7c9      	b.n	8008bb4 <_malloc_r+0x20>
 8008c20:	4622      	mov	r2, r4
 8008c22:	6864      	ldr	r4, [r4, #4]
 8008c24:	e7cc      	b.n	8008bc0 <_malloc_r+0x2c>
 8008c26:	1cc4      	adds	r4, r0, #3
 8008c28:	f024 0403 	bic.w	r4, r4, #3
 8008c2c:	42a0      	cmp	r0, r4
 8008c2e:	d0e3      	beq.n	8008bf8 <_malloc_r+0x64>
 8008c30:	1a21      	subs	r1, r4, r0
 8008c32:	4630      	mov	r0, r6
 8008c34:	f000 f872 	bl	8008d1c <_sbrk_r>
 8008c38:	3001      	adds	r0, #1
 8008c3a:	d1dd      	bne.n	8008bf8 <_malloc_r+0x64>
 8008c3c:	e7cf      	b.n	8008bde <_malloc_r+0x4a>
 8008c3e:	bf00      	nop
 8008c40:	200046fc 	.word	0x200046fc
 8008c44:	20004700 	.word	0x20004700

08008c48 <cleanup_glue>:
 8008c48:	b538      	push	{r3, r4, r5, lr}
 8008c4a:	460c      	mov	r4, r1
 8008c4c:	6809      	ldr	r1, [r1, #0]
 8008c4e:	4605      	mov	r5, r0
 8008c50:	b109      	cbz	r1, 8008c56 <cleanup_glue+0xe>
 8008c52:	f7ff fff9 	bl	8008c48 <cleanup_glue>
 8008c56:	4621      	mov	r1, r4
 8008c58:	4628      	mov	r0, r5
 8008c5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c5e:	f000 b899 	b.w	8008d94 <_free_r>
	...

08008c64 <_reclaim_reent>:
 8008c64:	4b2c      	ldr	r3, [pc, #176]	; (8008d18 <_reclaim_reent+0xb4>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4283      	cmp	r3, r0
 8008c6a:	b570      	push	{r4, r5, r6, lr}
 8008c6c:	4604      	mov	r4, r0
 8008c6e:	d051      	beq.n	8008d14 <_reclaim_reent+0xb0>
 8008c70:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008c72:	b143      	cbz	r3, 8008c86 <_reclaim_reent+0x22>
 8008c74:	68db      	ldr	r3, [r3, #12]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d14a      	bne.n	8008d10 <_reclaim_reent+0xac>
 8008c7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c7c:	6819      	ldr	r1, [r3, #0]
 8008c7e:	b111      	cbz	r1, 8008c86 <_reclaim_reent+0x22>
 8008c80:	4620      	mov	r0, r4
 8008c82:	f000 f887 	bl	8008d94 <_free_r>
 8008c86:	6961      	ldr	r1, [r4, #20]
 8008c88:	b111      	cbz	r1, 8008c90 <_reclaim_reent+0x2c>
 8008c8a:	4620      	mov	r0, r4
 8008c8c:	f000 f882 	bl	8008d94 <_free_r>
 8008c90:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008c92:	b111      	cbz	r1, 8008c9a <_reclaim_reent+0x36>
 8008c94:	4620      	mov	r0, r4
 8008c96:	f000 f87d 	bl	8008d94 <_free_r>
 8008c9a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008c9c:	b111      	cbz	r1, 8008ca4 <_reclaim_reent+0x40>
 8008c9e:	4620      	mov	r0, r4
 8008ca0:	f000 f878 	bl	8008d94 <_free_r>
 8008ca4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008ca6:	b111      	cbz	r1, 8008cae <_reclaim_reent+0x4a>
 8008ca8:	4620      	mov	r0, r4
 8008caa:	f000 f873 	bl	8008d94 <_free_r>
 8008cae:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008cb0:	b111      	cbz	r1, 8008cb8 <_reclaim_reent+0x54>
 8008cb2:	4620      	mov	r0, r4
 8008cb4:	f000 f86e 	bl	8008d94 <_free_r>
 8008cb8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008cba:	b111      	cbz	r1, 8008cc2 <_reclaim_reent+0x5e>
 8008cbc:	4620      	mov	r0, r4
 8008cbe:	f000 f869 	bl	8008d94 <_free_r>
 8008cc2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008cc4:	b111      	cbz	r1, 8008ccc <_reclaim_reent+0x68>
 8008cc6:	4620      	mov	r0, r4
 8008cc8:	f000 f864 	bl	8008d94 <_free_r>
 8008ccc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008cce:	b111      	cbz	r1, 8008cd6 <_reclaim_reent+0x72>
 8008cd0:	4620      	mov	r0, r4
 8008cd2:	f000 f85f 	bl	8008d94 <_free_r>
 8008cd6:	69a3      	ldr	r3, [r4, #24]
 8008cd8:	b1e3      	cbz	r3, 8008d14 <_reclaim_reent+0xb0>
 8008cda:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008cdc:	4620      	mov	r0, r4
 8008cde:	4798      	blx	r3
 8008ce0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008ce2:	b1b9      	cbz	r1, 8008d14 <_reclaim_reent+0xb0>
 8008ce4:	4620      	mov	r0, r4
 8008ce6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008cea:	f7ff bfad 	b.w	8008c48 <cleanup_glue>
 8008cee:	5949      	ldr	r1, [r1, r5]
 8008cf0:	b941      	cbnz	r1, 8008d04 <_reclaim_reent+0xa0>
 8008cf2:	3504      	adds	r5, #4
 8008cf4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cf6:	2d80      	cmp	r5, #128	; 0x80
 8008cf8:	68d9      	ldr	r1, [r3, #12]
 8008cfa:	d1f8      	bne.n	8008cee <_reclaim_reent+0x8a>
 8008cfc:	4620      	mov	r0, r4
 8008cfe:	f000 f849 	bl	8008d94 <_free_r>
 8008d02:	e7ba      	b.n	8008c7a <_reclaim_reent+0x16>
 8008d04:	680e      	ldr	r6, [r1, #0]
 8008d06:	4620      	mov	r0, r4
 8008d08:	f000 f844 	bl	8008d94 <_free_r>
 8008d0c:	4631      	mov	r1, r6
 8008d0e:	e7ef      	b.n	8008cf0 <_reclaim_reent+0x8c>
 8008d10:	2500      	movs	r5, #0
 8008d12:	e7ef      	b.n	8008cf4 <_reclaim_reent+0x90>
 8008d14:	bd70      	pop	{r4, r5, r6, pc}
 8008d16:	bf00      	nop
 8008d18:	20000020 	.word	0x20000020

08008d1c <_sbrk_r>:
 8008d1c:	b538      	push	{r3, r4, r5, lr}
 8008d1e:	4d06      	ldr	r5, [pc, #24]	; (8008d38 <_sbrk_r+0x1c>)
 8008d20:	2300      	movs	r3, #0
 8008d22:	4604      	mov	r4, r0
 8008d24:	4608      	mov	r0, r1
 8008d26:	602b      	str	r3, [r5, #0]
 8008d28:	f7f9 f994 	bl	8002054 <_sbrk>
 8008d2c:	1c43      	adds	r3, r0, #1
 8008d2e:	d102      	bne.n	8008d36 <_sbrk_r+0x1a>
 8008d30:	682b      	ldr	r3, [r5, #0]
 8008d32:	b103      	cbz	r3, 8008d36 <_sbrk_r+0x1a>
 8008d34:	6023      	str	r3, [r4, #0]
 8008d36:	bd38      	pop	{r3, r4, r5, pc}
 8008d38:	2000488c 	.word	0x2000488c

08008d3c <siprintf>:
 8008d3c:	b40e      	push	{r1, r2, r3}
 8008d3e:	b500      	push	{lr}
 8008d40:	b09c      	sub	sp, #112	; 0x70
 8008d42:	ab1d      	add	r3, sp, #116	; 0x74
 8008d44:	9002      	str	r0, [sp, #8]
 8008d46:	9006      	str	r0, [sp, #24]
 8008d48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008d4c:	4809      	ldr	r0, [pc, #36]	; (8008d74 <siprintf+0x38>)
 8008d4e:	9107      	str	r1, [sp, #28]
 8008d50:	9104      	str	r1, [sp, #16]
 8008d52:	4909      	ldr	r1, [pc, #36]	; (8008d78 <siprintf+0x3c>)
 8008d54:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d58:	9105      	str	r1, [sp, #20]
 8008d5a:	6800      	ldr	r0, [r0, #0]
 8008d5c:	9301      	str	r3, [sp, #4]
 8008d5e:	a902      	add	r1, sp, #8
 8008d60:	f000 f8c4 	bl	8008eec <_svfiprintf_r>
 8008d64:	9b02      	ldr	r3, [sp, #8]
 8008d66:	2200      	movs	r2, #0
 8008d68:	701a      	strb	r2, [r3, #0]
 8008d6a:	b01c      	add	sp, #112	; 0x70
 8008d6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d70:	b003      	add	sp, #12
 8008d72:	4770      	bx	lr
 8008d74:	20000020 	.word	0x20000020
 8008d78:	ffff0208 	.word	0xffff0208

08008d7c <__malloc_lock>:
 8008d7c:	4801      	ldr	r0, [pc, #4]	; (8008d84 <__malloc_lock+0x8>)
 8008d7e:	f7ff bed7 	b.w	8008b30 <__retarget_lock_acquire_recursive>
 8008d82:	bf00      	nop
 8008d84:	20004884 	.word	0x20004884

08008d88 <__malloc_unlock>:
 8008d88:	4801      	ldr	r0, [pc, #4]	; (8008d90 <__malloc_unlock+0x8>)
 8008d8a:	f7ff bed2 	b.w	8008b32 <__retarget_lock_release_recursive>
 8008d8e:	bf00      	nop
 8008d90:	20004884 	.word	0x20004884

08008d94 <_free_r>:
 8008d94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d96:	2900      	cmp	r1, #0
 8008d98:	d048      	beq.n	8008e2c <_free_r+0x98>
 8008d9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d9e:	9001      	str	r0, [sp, #4]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	f1a1 0404 	sub.w	r4, r1, #4
 8008da6:	bfb8      	it	lt
 8008da8:	18e4      	addlt	r4, r4, r3
 8008daa:	f7ff ffe7 	bl	8008d7c <__malloc_lock>
 8008dae:	4a20      	ldr	r2, [pc, #128]	; (8008e30 <_free_r+0x9c>)
 8008db0:	9801      	ldr	r0, [sp, #4]
 8008db2:	6813      	ldr	r3, [r2, #0]
 8008db4:	4615      	mov	r5, r2
 8008db6:	b933      	cbnz	r3, 8008dc6 <_free_r+0x32>
 8008db8:	6063      	str	r3, [r4, #4]
 8008dba:	6014      	str	r4, [r2, #0]
 8008dbc:	b003      	add	sp, #12
 8008dbe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008dc2:	f7ff bfe1 	b.w	8008d88 <__malloc_unlock>
 8008dc6:	42a3      	cmp	r3, r4
 8008dc8:	d90b      	bls.n	8008de2 <_free_r+0x4e>
 8008dca:	6821      	ldr	r1, [r4, #0]
 8008dcc:	1862      	adds	r2, r4, r1
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	bf04      	itt	eq
 8008dd2:	681a      	ldreq	r2, [r3, #0]
 8008dd4:	685b      	ldreq	r3, [r3, #4]
 8008dd6:	6063      	str	r3, [r4, #4]
 8008dd8:	bf04      	itt	eq
 8008dda:	1852      	addeq	r2, r2, r1
 8008ddc:	6022      	streq	r2, [r4, #0]
 8008dde:	602c      	str	r4, [r5, #0]
 8008de0:	e7ec      	b.n	8008dbc <_free_r+0x28>
 8008de2:	461a      	mov	r2, r3
 8008de4:	685b      	ldr	r3, [r3, #4]
 8008de6:	b10b      	cbz	r3, 8008dec <_free_r+0x58>
 8008de8:	42a3      	cmp	r3, r4
 8008dea:	d9fa      	bls.n	8008de2 <_free_r+0x4e>
 8008dec:	6811      	ldr	r1, [r2, #0]
 8008dee:	1855      	adds	r5, r2, r1
 8008df0:	42a5      	cmp	r5, r4
 8008df2:	d10b      	bne.n	8008e0c <_free_r+0x78>
 8008df4:	6824      	ldr	r4, [r4, #0]
 8008df6:	4421      	add	r1, r4
 8008df8:	1854      	adds	r4, r2, r1
 8008dfa:	42a3      	cmp	r3, r4
 8008dfc:	6011      	str	r1, [r2, #0]
 8008dfe:	d1dd      	bne.n	8008dbc <_free_r+0x28>
 8008e00:	681c      	ldr	r4, [r3, #0]
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	6053      	str	r3, [r2, #4]
 8008e06:	4421      	add	r1, r4
 8008e08:	6011      	str	r1, [r2, #0]
 8008e0a:	e7d7      	b.n	8008dbc <_free_r+0x28>
 8008e0c:	d902      	bls.n	8008e14 <_free_r+0x80>
 8008e0e:	230c      	movs	r3, #12
 8008e10:	6003      	str	r3, [r0, #0]
 8008e12:	e7d3      	b.n	8008dbc <_free_r+0x28>
 8008e14:	6825      	ldr	r5, [r4, #0]
 8008e16:	1961      	adds	r1, r4, r5
 8008e18:	428b      	cmp	r3, r1
 8008e1a:	bf04      	itt	eq
 8008e1c:	6819      	ldreq	r1, [r3, #0]
 8008e1e:	685b      	ldreq	r3, [r3, #4]
 8008e20:	6063      	str	r3, [r4, #4]
 8008e22:	bf04      	itt	eq
 8008e24:	1949      	addeq	r1, r1, r5
 8008e26:	6021      	streq	r1, [r4, #0]
 8008e28:	6054      	str	r4, [r2, #4]
 8008e2a:	e7c7      	b.n	8008dbc <_free_r+0x28>
 8008e2c:	b003      	add	sp, #12
 8008e2e:	bd30      	pop	{r4, r5, pc}
 8008e30:	200046fc 	.word	0x200046fc

08008e34 <__ssputs_r>:
 8008e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e38:	688e      	ldr	r6, [r1, #8]
 8008e3a:	429e      	cmp	r6, r3
 8008e3c:	4682      	mov	sl, r0
 8008e3e:	460c      	mov	r4, r1
 8008e40:	4690      	mov	r8, r2
 8008e42:	461f      	mov	r7, r3
 8008e44:	d838      	bhi.n	8008eb8 <__ssputs_r+0x84>
 8008e46:	898a      	ldrh	r2, [r1, #12]
 8008e48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008e4c:	d032      	beq.n	8008eb4 <__ssputs_r+0x80>
 8008e4e:	6825      	ldr	r5, [r4, #0]
 8008e50:	6909      	ldr	r1, [r1, #16]
 8008e52:	eba5 0901 	sub.w	r9, r5, r1
 8008e56:	6965      	ldr	r5, [r4, #20]
 8008e58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008e60:	3301      	adds	r3, #1
 8008e62:	444b      	add	r3, r9
 8008e64:	106d      	asrs	r5, r5, #1
 8008e66:	429d      	cmp	r5, r3
 8008e68:	bf38      	it	cc
 8008e6a:	461d      	movcc	r5, r3
 8008e6c:	0553      	lsls	r3, r2, #21
 8008e6e:	d531      	bpl.n	8008ed4 <__ssputs_r+0xa0>
 8008e70:	4629      	mov	r1, r5
 8008e72:	f7ff fe8f 	bl	8008b94 <_malloc_r>
 8008e76:	4606      	mov	r6, r0
 8008e78:	b950      	cbnz	r0, 8008e90 <__ssputs_r+0x5c>
 8008e7a:	230c      	movs	r3, #12
 8008e7c:	f8ca 3000 	str.w	r3, [sl]
 8008e80:	89a3      	ldrh	r3, [r4, #12]
 8008e82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e86:	81a3      	strh	r3, [r4, #12]
 8008e88:	f04f 30ff 	mov.w	r0, #4294967295
 8008e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e90:	6921      	ldr	r1, [r4, #16]
 8008e92:	464a      	mov	r2, r9
 8008e94:	f7ff fe4e 	bl	8008b34 <memcpy>
 8008e98:	89a3      	ldrh	r3, [r4, #12]
 8008e9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008e9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ea2:	81a3      	strh	r3, [r4, #12]
 8008ea4:	6126      	str	r6, [r4, #16]
 8008ea6:	6165      	str	r5, [r4, #20]
 8008ea8:	444e      	add	r6, r9
 8008eaa:	eba5 0509 	sub.w	r5, r5, r9
 8008eae:	6026      	str	r6, [r4, #0]
 8008eb0:	60a5      	str	r5, [r4, #8]
 8008eb2:	463e      	mov	r6, r7
 8008eb4:	42be      	cmp	r6, r7
 8008eb6:	d900      	bls.n	8008eba <__ssputs_r+0x86>
 8008eb8:	463e      	mov	r6, r7
 8008eba:	4632      	mov	r2, r6
 8008ebc:	6820      	ldr	r0, [r4, #0]
 8008ebe:	4641      	mov	r1, r8
 8008ec0:	f7ff fe46 	bl	8008b50 <memmove>
 8008ec4:	68a3      	ldr	r3, [r4, #8]
 8008ec6:	6822      	ldr	r2, [r4, #0]
 8008ec8:	1b9b      	subs	r3, r3, r6
 8008eca:	4432      	add	r2, r6
 8008ecc:	60a3      	str	r3, [r4, #8]
 8008ece:	6022      	str	r2, [r4, #0]
 8008ed0:	2000      	movs	r0, #0
 8008ed2:	e7db      	b.n	8008e8c <__ssputs_r+0x58>
 8008ed4:	462a      	mov	r2, r5
 8008ed6:	f000 fa9d 	bl	8009414 <_realloc_r>
 8008eda:	4606      	mov	r6, r0
 8008edc:	2800      	cmp	r0, #0
 8008ede:	d1e1      	bne.n	8008ea4 <__ssputs_r+0x70>
 8008ee0:	6921      	ldr	r1, [r4, #16]
 8008ee2:	4650      	mov	r0, sl
 8008ee4:	f7ff ff56 	bl	8008d94 <_free_r>
 8008ee8:	e7c7      	b.n	8008e7a <__ssputs_r+0x46>
	...

08008eec <_svfiprintf_r>:
 8008eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ef0:	4698      	mov	r8, r3
 8008ef2:	898b      	ldrh	r3, [r1, #12]
 8008ef4:	061b      	lsls	r3, r3, #24
 8008ef6:	b09d      	sub	sp, #116	; 0x74
 8008ef8:	4607      	mov	r7, r0
 8008efa:	460d      	mov	r5, r1
 8008efc:	4614      	mov	r4, r2
 8008efe:	d50e      	bpl.n	8008f1e <_svfiprintf_r+0x32>
 8008f00:	690b      	ldr	r3, [r1, #16]
 8008f02:	b963      	cbnz	r3, 8008f1e <_svfiprintf_r+0x32>
 8008f04:	2140      	movs	r1, #64	; 0x40
 8008f06:	f7ff fe45 	bl	8008b94 <_malloc_r>
 8008f0a:	6028      	str	r0, [r5, #0]
 8008f0c:	6128      	str	r0, [r5, #16]
 8008f0e:	b920      	cbnz	r0, 8008f1a <_svfiprintf_r+0x2e>
 8008f10:	230c      	movs	r3, #12
 8008f12:	603b      	str	r3, [r7, #0]
 8008f14:	f04f 30ff 	mov.w	r0, #4294967295
 8008f18:	e0d1      	b.n	80090be <_svfiprintf_r+0x1d2>
 8008f1a:	2340      	movs	r3, #64	; 0x40
 8008f1c:	616b      	str	r3, [r5, #20]
 8008f1e:	2300      	movs	r3, #0
 8008f20:	9309      	str	r3, [sp, #36]	; 0x24
 8008f22:	2320      	movs	r3, #32
 8008f24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f28:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f2c:	2330      	movs	r3, #48	; 0x30
 8008f2e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80090d8 <_svfiprintf_r+0x1ec>
 8008f32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f36:	f04f 0901 	mov.w	r9, #1
 8008f3a:	4623      	mov	r3, r4
 8008f3c:	469a      	mov	sl, r3
 8008f3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f42:	b10a      	cbz	r2, 8008f48 <_svfiprintf_r+0x5c>
 8008f44:	2a25      	cmp	r2, #37	; 0x25
 8008f46:	d1f9      	bne.n	8008f3c <_svfiprintf_r+0x50>
 8008f48:	ebba 0b04 	subs.w	fp, sl, r4
 8008f4c:	d00b      	beq.n	8008f66 <_svfiprintf_r+0x7a>
 8008f4e:	465b      	mov	r3, fp
 8008f50:	4622      	mov	r2, r4
 8008f52:	4629      	mov	r1, r5
 8008f54:	4638      	mov	r0, r7
 8008f56:	f7ff ff6d 	bl	8008e34 <__ssputs_r>
 8008f5a:	3001      	adds	r0, #1
 8008f5c:	f000 80aa 	beq.w	80090b4 <_svfiprintf_r+0x1c8>
 8008f60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f62:	445a      	add	r2, fp
 8008f64:	9209      	str	r2, [sp, #36]	; 0x24
 8008f66:	f89a 3000 	ldrb.w	r3, [sl]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	f000 80a2 	beq.w	80090b4 <_svfiprintf_r+0x1c8>
 8008f70:	2300      	movs	r3, #0
 8008f72:	f04f 32ff 	mov.w	r2, #4294967295
 8008f76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f7a:	f10a 0a01 	add.w	sl, sl, #1
 8008f7e:	9304      	str	r3, [sp, #16]
 8008f80:	9307      	str	r3, [sp, #28]
 8008f82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f86:	931a      	str	r3, [sp, #104]	; 0x68
 8008f88:	4654      	mov	r4, sl
 8008f8a:	2205      	movs	r2, #5
 8008f8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f90:	4851      	ldr	r0, [pc, #324]	; (80090d8 <_svfiprintf_r+0x1ec>)
 8008f92:	f7f7 f91d 	bl	80001d0 <memchr>
 8008f96:	9a04      	ldr	r2, [sp, #16]
 8008f98:	b9d8      	cbnz	r0, 8008fd2 <_svfiprintf_r+0xe6>
 8008f9a:	06d0      	lsls	r0, r2, #27
 8008f9c:	bf44      	itt	mi
 8008f9e:	2320      	movmi	r3, #32
 8008fa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fa4:	0711      	lsls	r1, r2, #28
 8008fa6:	bf44      	itt	mi
 8008fa8:	232b      	movmi	r3, #43	; 0x2b
 8008faa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fae:	f89a 3000 	ldrb.w	r3, [sl]
 8008fb2:	2b2a      	cmp	r3, #42	; 0x2a
 8008fb4:	d015      	beq.n	8008fe2 <_svfiprintf_r+0xf6>
 8008fb6:	9a07      	ldr	r2, [sp, #28]
 8008fb8:	4654      	mov	r4, sl
 8008fba:	2000      	movs	r0, #0
 8008fbc:	f04f 0c0a 	mov.w	ip, #10
 8008fc0:	4621      	mov	r1, r4
 8008fc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fc6:	3b30      	subs	r3, #48	; 0x30
 8008fc8:	2b09      	cmp	r3, #9
 8008fca:	d94e      	bls.n	800906a <_svfiprintf_r+0x17e>
 8008fcc:	b1b0      	cbz	r0, 8008ffc <_svfiprintf_r+0x110>
 8008fce:	9207      	str	r2, [sp, #28]
 8008fd0:	e014      	b.n	8008ffc <_svfiprintf_r+0x110>
 8008fd2:	eba0 0308 	sub.w	r3, r0, r8
 8008fd6:	fa09 f303 	lsl.w	r3, r9, r3
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	9304      	str	r3, [sp, #16]
 8008fde:	46a2      	mov	sl, r4
 8008fe0:	e7d2      	b.n	8008f88 <_svfiprintf_r+0x9c>
 8008fe2:	9b03      	ldr	r3, [sp, #12]
 8008fe4:	1d19      	adds	r1, r3, #4
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	9103      	str	r1, [sp, #12]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	bfbb      	ittet	lt
 8008fee:	425b      	neglt	r3, r3
 8008ff0:	f042 0202 	orrlt.w	r2, r2, #2
 8008ff4:	9307      	strge	r3, [sp, #28]
 8008ff6:	9307      	strlt	r3, [sp, #28]
 8008ff8:	bfb8      	it	lt
 8008ffa:	9204      	strlt	r2, [sp, #16]
 8008ffc:	7823      	ldrb	r3, [r4, #0]
 8008ffe:	2b2e      	cmp	r3, #46	; 0x2e
 8009000:	d10c      	bne.n	800901c <_svfiprintf_r+0x130>
 8009002:	7863      	ldrb	r3, [r4, #1]
 8009004:	2b2a      	cmp	r3, #42	; 0x2a
 8009006:	d135      	bne.n	8009074 <_svfiprintf_r+0x188>
 8009008:	9b03      	ldr	r3, [sp, #12]
 800900a:	1d1a      	adds	r2, r3, #4
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	9203      	str	r2, [sp, #12]
 8009010:	2b00      	cmp	r3, #0
 8009012:	bfb8      	it	lt
 8009014:	f04f 33ff 	movlt.w	r3, #4294967295
 8009018:	3402      	adds	r4, #2
 800901a:	9305      	str	r3, [sp, #20]
 800901c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80090e8 <_svfiprintf_r+0x1fc>
 8009020:	7821      	ldrb	r1, [r4, #0]
 8009022:	2203      	movs	r2, #3
 8009024:	4650      	mov	r0, sl
 8009026:	f7f7 f8d3 	bl	80001d0 <memchr>
 800902a:	b140      	cbz	r0, 800903e <_svfiprintf_r+0x152>
 800902c:	2340      	movs	r3, #64	; 0x40
 800902e:	eba0 000a 	sub.w	r0, r0, sl
 8009032:	fa03 f000 	lsl.w	r0, r3, r0
 8009036:	9b04      	ldr	r3, [sp, #16]
 8009038:	4303      	orrs	r3, r0
 800903a:	3401      	adds	r4, #1
 800903c:	9304      	str	r3, [sp, #16]
 800903e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009042:	4826      	ldr	r0, [pc, #152]	; (80090dc <_svfiprintf_r+0x1f0>)
 8009044:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009048:	2206      	movs	r2, #6
 800904a:	f7f7 f8c1 	bl	80001d0 <memchr>
 800904e:	2800      	cmp	r0, #0
 8009050:	d038      	beq.n	80090c4 <_svfiprintf_r+0x1d8>
 8009052:	4b23      	ldr	r3, [pc, #140]	; (80090e0 <_svfiprintf_r+0x1f4>)
 8009054:	bb1b      	cbnz	r3, 800909e <_svfiprintf_r+0x1b2>
 8009056:	9b03      	ldr	r3, [sp, #12]
 8009058:	3307      	adds	r3, #7
 800905a:	f023 0307 	bic.w	r3, r3, #7
 800905e:	3308      	adds	r3, #8
 8009060:	9303      	str	r3, [sp, #12]
 8009062:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009064:	4433      	add	r3, r6
 8009066:	9309      	str	r3, [sp, #36]	; 0x24
 8009068:	e767      	b.n	8008f3a <_svfiprintf_r+0x4e>
 800906a:	fb0c 3202 	mla	r2, ip, r2, r3
 800906e:	460c      	mov	r4, r1
 8009070:	2001      	movs	r0, #1
 8009072:	e7a5      	b.n	8008fc0 <_svfiprintf_r+0xd4>
 8009074:	2300      	movs	r3, #0
 8009076:	3401      	adds	r4, #1
 8009078:	9305      	str	r3, [sp, #20]
 800907a:	4619      	mov	r1, r3
 800907c:	f04f 0c0a 	mov.w	ip, #10
 8009080:	4620      	mov	r0, r4
 8009082:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009086:	3a30      	subs	r2, #48	; 0x30
 8009088:	2a09      	cmp	r2, #9
 800908a:	d903      	bls.n	8009094 <_svfiprintf_r+0x1a8>
 800908c:	2b00      	cmp	r3, #0
 800908e:	d0c5      	beq.n	800901c <_svfiprintf_r+0x130>
 8009090:	9105      	str	r1, [sp, #20]
 8009092:	e7c3      	b.n	800901c <_svfiprintf_r+0x130>
 8009094:	fb0c 2101 	mla	r1, ip, r1, r2
 8009098:	4604      	mov	r4, r0
 800909a:	2301      	movs	r3, #1
 800909c:	e7f0      	b.n	8009080 <_svfiprintf_r+0x194>
 800909e:	ab03      	add	r3, sp, #12
 80090a0:	9300      	str	r3, [sp, #0]
 80090a2:	462a      	mov	r2, r5
 80090a4:	4b0f      	ldr	r3, [pc, #60]	; (80090e4 <_svfiprintf_r+0x1f8>)
 80090a6:	a904      	add	r1, sp, #16
 80090a8:	4638      	mov	r0, r7
 80090aa:	f3af 8000 	nop.w
 80090ae:	1c42      	adds	r2, r0, #1
 80090b0:	4606      	mov	r6, r0
 80090b2:	d1d6      	bne.n	8009062 <_svfiprintf_r+0x176>
 80090b4:	89ab      	ldrh	r3, [r5, #12]
 80090b6:	065b      	lsls	r3, r3, #25
 80090b8:	f53f af2c 	bmi.w	8008f14 <_svfiprintf_r+0x28>
 80090bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090be:	b01d      	add	sp, #116	; 0x74
 80090c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090c4:	ab03      	add	r3, sp, #12
 80090c6:	9300      	str	r3, [sp, #0]
 80090c8:	462a      	mov	r2, r5
 80090ca:	4b06      	ldr	r3, [pc, #24]	; (80090e4 <_svfiprintf_r+0x1f8>)
 80090cc:	a904      	add	r1, sp, #16
 80090ce:	4638      	mov	r0, r7
 80090d0:	f000 f87a 	bl	80091c8 <_printf_i>
 80090d4:	e7eb      	b.n	80090ae <_svfiprintf_r+0x1c2>
 80090d6:	bf00      	nop
 80090d8:	0800ab28 	.word	0x0800ab28
 80090dc:	0800ab32 	.word	0x0800ab32
 80090e0:	00000000 	.word	0x00000000
 80090e4:	08008e35 	.word	0x08008e35
 80090e8:	0800ab2e 	.word	0x0800ab2e

080090ec <_printf_common>:
 80090ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090f0:	4616      	mov	r6, r2
 80090f2:	4699      	mov	r9, r3
 80090f4:	688a      	ldr	r2, [r1, #8]
 80090f6:	690b      	ldr	r3, [r1, #16]
 80090f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80090fc:	4293      	cmp	r3, r2
 80090fe:	bfb8      	it	lt
 8009100:	4613      	movlt	r3, r2
 8009102:	6033      	str	r3, [r6, #0]
 8009104:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009108:	4607      	mov	r7, r0
 800910a:	460c      	mov	r4, r1
 800910c:	b10a      	cbz	r2, 8009112 <_printf_common+0x26>
 800910e:	3301      	adds	r3, #1
 8009110:	6033      	str	r3, [r6, #0]
 8009112:	6823      	ldr	r3, [r4, #0]
 8009114:	0699      	lsls	r1, r3, #26
 8009116:	bf42      	ittt	mi
 8009118:	6833      	ldrmi	r3, [r6, #0]
 800911a:	3302      	addmi	r3, #2
 800911c:	6033      	strmi	r3, [r6, #0]
 800911e:	6825      	ldr	r5, [r4, #0]
 8009120:	f015 0506 	ands.w	r5, r5, #6
 8009124:	d106      	bne.n	8009134 <_printf_common+0x48>
 8009126:	f104 0a19 	add.w	sl, r4, #25
 800912a:	68e3      	ldr	r3, [r4, #12]
 800912c:	6832      	ldr	r2, [r6, #0]
 800912e:	1a9b      	subs	r3, r3, r2
 8009130:	42ab      	cmp	r3, r5
 8009132:	dc26      	bgt.n	8009182 <_printf_common+0x96>
 8009134:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009138:	1e13      	subs	r3, r2, #0
 800913a:	6822      	ldr	r2, [r4, #0]
 800913c:	bf18      	it	ne
 800913e:	2301      	movne	r3, #1
 8009140:	0692      	lsls	r2, r2, #26
 8009142:	d42b      	bmi.n	800919c <_printf_common+0xb0>
 8009144:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009148:	4649      	mov	r1, r9
 800914a:	4638      	mov	r0, r7
 800914c:	47c0      	blx	r8
 800914e:	3001      	adds	r0, #1
 8009150:	d01e      	beq.n	8009190 <_printf_common+0xa4>
 8009152:	6823      	ldr	r3, [r4, #0]
 8009154:	68e5      	ldr	r5, [r4, #12]
 8009156:	6832      	ldr	r2, [r6, #0]
 8009158:	f003 0306 	and.w	r3, r3, #6
 800915c:	2b04      	cmp	r3, #4
 800915e:	bf08      	it	eq
 8009160:	1aad      	subeq	r5, r5, r2
 8009162:	68a3      	ldr	r3, [r4, #8]
 8009164:	6922      	ldr	r2, [r4, #16]
 8009166:	bf0c      	ite	eq
 8009168:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800916c:	2500      	movne	r5, #0
 800916e:	4293      	cmp	r3, r2
 8009170:	bfc4      	itt	gt
 8009172:	1a9b      	subgt	r3, r3, r2
 8009174:	18ed      	addgt	r5, r5, r3
 8009176:	2600      	movs	r6, #0
 8009178:	341a      	adds	r4, #26
 800917a:	42b5      	cmp	r5, r6
 800917c:	d11a      	bne.n	80091b4 <_printf_common+0xc8>
 800917e:	2000      	movs	r0, #0
 8009180:	e008      	b.n	8009194 <_printf_common+0xa8>
 8009182:	2301      	movs	r3, #1
 8009184:	4652      	mov	r2, sl
 8009186:	4649      	mov	r1, r9
 8009188:	4638      	mov	r0, r7
 800918a:	47c0      	blx	r8
 800918c:	3001      	adds	r0, #1
 800918e:	d103      	bne.n	8009198 <_printf_common+0xac>
 8009190:	f04f 30ff 	mov.w	r0, #4294967295
 8009194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009198:	3501      	adds	r5, #1
 800919a:	e7c6      	b.n	800912a <_printf_common+0x3e>
 800919c:	18e1      	adds	r1, r4, r3
 800919e:	1c5a      	adds	r2, r3, #1
 80091a0:	2030      	movs	r0, #48	; 0x30
 80091a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80091a6:	4422      	add	r2, r4
 80091a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80091ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80091b0:	3302      	adds	r3, #2
 80091b2:	e7c7      	b.n	8009144 <_printf_common+0x58>
 80091b4:	2301      	movs	r3, #1
 80091b6:	4622      	mov	r2, r4
 80091b8:	4649      	mov	r1, r9
 80091ba:	4638      	mov	r0, r7
 80091bc:	47c0      	blx	r8
 80091be:	3001      	adds	r0, #1
 80091c0:	d0e6      	beq.n	8009190 <_printf_common+0xa4>
 80091c2:	3601      	adds	r6, #1
 80091c4:	e7d9      	b.n	800917a <_printf_common+0x8e>
	...

080091c8 <_printf_i>:
 80091c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80091cc:	460c      	mov	r4, r1
 80091ce:	4691      	mov	r9, r2
 80091d0:	7e27      	ldrb	r7, [r4, #24]
 80091d2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80091d4:	2f78      	cmp	r7, #120	; 0x78
 80091d6:	4680      	mov	r8, r0
 80091d8:	469a      	mov	sl, r3
 80091da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80091de:	d807      	bhi.n	80091f0 <_printf_i+0x28>
 80091e0:	2f62      	cmp	r7, #98	; 0x62
 80091e2:	d80a      	bhi.n	80091fa <_printf_i+0x32>
 80091e4:	2f00      	cmp	r7, #0
 80091e6:	f000 80d8 	beq.w	800939a <_printf_i+0x1d2>
 80091ea:	2f58      	cmp	r7, #88	; 0x58
 80091ec:	f000 80a3 	beq.w	8009336 <_printf_i+0x16e>
 80091f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80091f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80091f8:	e03a      	b.n	8009270 <_printf_i+0xa8>
 80091fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80091fe:	2b15      	cmp	r3, #21
 8009200:	d8f6      	bhi.n	80091f0 <_printf_i+0x28>
 8009202:	a001      	add	r0, pc, #4	; (adr r0, 8009208 <_printf_i+0x40>)
 8009204:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009208:	08009261 	.word	0x08009261
 800920c:	08009275 	.word	0x08009275
 8009210:	080091f1 	.word	0x080091f1
 8009214:	080091f1 	.word	0x080091f1
 8009218:	080091f1 	.word	0x080091f1
 800921c:	080091f1 	.word	0x080091f1
 8009220:	08009275 	.word	0x08009275
 8009224:	080091f1 	.word	0x080091f1
 8009228:	080091f1 	.word	0x080091f1
 800922c:	080091f1 	.word	0x080091f1
 8009230:	080091f1 	.word	0x080091f1
 8009234:	08009381 	.word	0x08009381
 8009238:	080092a5 	.word	0x080092a5
 800923c:	08009363 	.word	0x08009363
 8009240:	080091f1 	.word	0x080091f1
 8009244:	080091f1 	.word	0x080091f1
 8009248:	080093a3 	.word	0x080093a3
 800924c:	080091f1 	.word	0x080091f1
 8009250:	080092a5 	.word	0x080092a5
 8009254:	080091f1 	.word	0x080091f1
 8009258:	080091f1 	.word	0x080091f1
 800925c:	0800936b 	.word	0x0800936b
 8009260:	680b      	ldr	r3, [r1, #0]
 8009262:	1d1a      	adds	r2, r3, #4
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	600a      	str	r2, [r1, #0]
 8009268:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800926c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009270:	2301      	movs	r3, #1
 8009272:	e0a3      	b.n	80093bc <_printf_i+0x1f4>
 8009274:	6825      	ldr	r5, [r4, #0]
 8009276:	6808      	ldr	r0, [r1, #0]
 8009278:	062e      	lsls	r6, r5, #24
 800927a:	f100 0304 	add.w	r3, r0, #4
 800927e:	d50a      	bpl.n	8009296 <_printf_i+0xce>
 8009280:	6805      	ldr	r5, [r0, #0]
 8009282:	600b      	str	r3, [r1, #0]
 8009284:	2d00      	cmp	r5, #0
 8009286:	da03      	bge.n	8009290 <_printf_i+0xc8>
 8009288:	232d      	movs	r3, #45	; 0x2d
 800928a:	426d      	negs	r5, r5
 800928c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009290:	485e      	ldr	r0, [pc, #376]	; (800940c <_printf_i+0x244>)
 8009292:	230a      	movs	r3, #10
 8009294:	e019      	b.n	80092ca <_printf_i+0x102>
 8009296:	f015 0f40 	tst.w	r5, #64	; 0x40
 800929a:	6805      	ldr	r5, [r0, #0]
 800929c:	600b      	str	r3, [r1, #0]
 800929e:	bf18      	it	ne
 80092a0:	b22d      	sxthne	r5, r5
 80092a2:	e7ef      	b.n	8009284 <_printf_i+0xbc>
 80092a4:	680b      	ldr	r3, [r1, #0]
 80092a6:	6825      	ldr	r5, [r4, #0]
 80092a8:	1d18      	adds	r0, r3, #4
 80092aa:	6008      	str	r0, [r1, #0]
 80092ac:	0628      	lsls	r0, r5, #24
 80092ae:	d501      	bpl.n	80092b4 <_printf_i+0xec>
 80092b0:	681d      	ldr	r5, [r3, #0]
 80092b2:	e002      	b.n	80092ba <_printf_i+0xf2>
 80092b4:	0669      	lsls	r1, r5, #25
 80092b6:	d5fb      	bpl.n	80092b0 <_printf_i+0xe8>
 80092b8:	881d      	ldrh	r5, [r3, #0]
 80092ba:	4854      	ldr	r0, [pc, #336]	; (800940c <_printf_i+0x244>)
 80092bc:	2f6f      	cmp	r7, #111	; 0x6f
 80092be:	bf0c      	ite	eq
 80092c0:	2308      	moveq	r3, #8
 80092c2:	230a      	movne	r3, #10
 80092c4:	2100      	movs	r1, #0
 80092c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80092ca:	6866      	ldr	r6, [r4, #4]
 80092cc:	60a6      	str	r6, [r4, #8]
 80092ce:	2e00      	cmp	r6, #0
 80092d0:	bfa2      	ittt	ge
 80092d2:	6821      	ldrge	r1, [r4, #0]
 80092d4:	f021 0104 	bicge.w	r1, r1, #4
 80092d8:	6021      	strge	r1, [r4, #0]
 80092da:	b90d      	cbnz	r5, 80092e0 <_printf_i+0x118>
 80092dc:	2e00      	cmp	r6, #0
 80092de:	d04d      	beq.n	800937c <_printf_i+0x1b4>
 80092e0:	4616      	mov	r6, r2
 80092e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80092e6:	fb03 5711 	mls	r7, r3, r1, r5
 80092ea:	5dc7      	ldrb	r7, [r0, r7]
 80092ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80092f0:	462f      	mov	r7, r5
 80092f2:	42bb      	cmp	r3, r7
 80092f4:	460d      	mov	r5, r1
 80092f6:	d9f4      	bls.n	80092e2 <_printf_i+0x11a>
 80092f8:	2b08      	cmp	r3, #8
 80092fa:	d10b      	bne.n	8009314 <_printf_i+0x14c>
 80092fc:	6823      	ldr	r3, [r4, #0]
 80092fe:	07df      	lsls	r7, r3, #31
 8009300:	d508      	bpl.n	8009314 <_printf_i+0x14c>
 8009302:	6923      	ldr	r3, [r4, #16]
 8009304:	6861      	ldr	r1, [r4, #4]
 8009306:	4299      	cmp	r1, r3
 8009308:	bfde      	ittt	le
 800930a:	2330      	movle	r3, #48	; 0x30
 800930c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009310:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009314:	1b92      	subs	r2, r2, r6
 8009316:	6122      	str	r2, [r4, #16]
 8009318:	f8cd a000 	str.w	sl, [sp]
 800931c:	464b      	mov	r3, r9
 800931e:	aa03      	add	r2, sp, #12
 8009320:	4621      	mov	r1, r4
 8009322:	4640      	mov	r0, r8
 8009324:	f7ff fee2 	bl	80090ec <_printf_common>
 8009328:	3001      	adds	r0, #1
 800932a:	d14c      	bne.n	80093c6 <_printf_i+0x1fe>
 800932c:	f04f 30ff 	mov.w	r0, #4294967295
 8009330:	b004      	add	sp, #16
 8009332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009336:	4835      	ldr	r0, [pc, #212]	; (800940c <_printf_i+0x244>)
 8009338:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800933c:	6823      	ldr	r3, [r4, #0]
 800933e:	680e      	ldr	r6, [r1, #0]
 8009340:	061f      	lsls	r7, r3, #24
 8009342:	f856 5b04 	ldr.w	r5, [r6], #4
 8009346:	600e      	str	r6, [r1, #0]
 8009348:	d514      	bpl.n	8009374 <_printf_i+0x1ac>
 800934a:	07d9      	lsls	r1, r3, #31
 800934c:	bf44      	itt	mi
 800934e:	f043 0320 	orrmi.w	r3, r3, #32
 8009352:	6023      	strmi	r3, [r4, #0]
 8009354:	b91d      	cbnz	r5, 800935e <_printf_i+0x196>
 8009356:	6823      	ldr	r3, [r4, #0]
 8009358:	f023 0320 	bic.w	r3, r3, #32
 800935c:	6023      	str	r3, [r4, #0]
 800935e:	2310      	movs	r3, #16
 8009360:	e7b0      	b.n	80092c4 <_printf_i+0xfc>
 8009362:	6823      	ldr	r3, [r4, #0]
 8009364:	f043 0320 	orr.w	r3, r3, #32
 8009368:	6023      	str	r3, [r4, #0]
 800936a:	2378      	movs	r3, #120	; 0x78
 800936c:	4828      	ldr	r0, [pc, #160]	; (8009410 <_printf_i+0x248>)
 800936e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009372:	e7e3      	b.n	800933c <_printf_i+0x174>
 8009374:	065e      	lsls	r6, r3, #25
 8009376:	bf48      	it	mi
 8009378:	b2ad      	uxthmi	r5, r5
 800937a:	e7e6      	b.n	800934a <_printf_i+0x182>
 800937c:	4616      	mov	r6, r2
 800937e:	e7bb      	b.n	80092f8 <_printf_i+0x130>
 8009380:	680b      	ldr	r3, [r1, #0]
 8009382:	6826      	ldr	r6, [r4, #0]
 8009384:	6960      	ldr	r0, [r4, #20]
 8009386:	1d1d      	adds	r5, r3, #4
 8009388:	600d      	str	r5, [r1, #0]
 800938a:	0635      	lsls	r5, r6, #24
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	d501      	bpl.n	8009394 <_printf_i+0x1cc>
 8009390:	6018      	str	r0, [r3, #0]
 8009392:	e002      	b.n	800939a <_printf_i+0x1d2>
 8009394:	0671      	lsls	r1, r6, #25
 8009396:	d5fb      	bpl.n	8009390 <_printf_i+0x1c8>
 8009398:	8018      	strh	r0, [r3, #0]
 800939a:	2300      	movs	r3, #0
 800939c:	6123      	str	r3, [r4, #16]
 800939e:	4616      	mov	r6, r2
 80093a0:	e7ba      	b.n	8009318 <_printf_i+0x150>
 80093a2:	680b      	ldr	r3, [r1, #0]
 80093a4:	1d1a      	adds	r2, r3, #4
 80093a6:	600a      	str	r2, [r1, #0]
 80093a8:	681e      	ldr	r6, [r3, #0]
 80093aa:	6862      	ldr	r2, [r4, #4]
 80093ac:	2100      	movs	r1, #0
 80093ae:	4630      	mov	r0, r6
 80093b0:	f7f6 ff0e 	bl	80001d0 <memchr>
 80093b4:	b108      	cbz	r0, 80093ba <_printf_i+0x1f2>
 80093b6:	1b80      	subs	r0, r0, r6
 80093b8:	6060      	str	r0, [r4, #4]
 80093ba:	6863      	ldr	r3, [r4, #4]
 80093bc:	6123      	str	r3, [r4, #16]
 80093be:	2300      	movs	r3, #0
 80093c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093c4:	e7a8      	b.n	8009318 <_printf_i+0x150>
 80093c6:	6923      	ldr	r3, [r4, #16]
 80093c8:	4632      	mov	r2, r6
 80093ca:	4649      	mov	r1, r9
 80093cc:	4640      	mov	r0, r8
 80093ce:	47d0      	blx	sl
 80093d0:	3001      	adds	r0, #1
 80093d2:	d0ab      	beq.n	800932c <_printf_i+0x164>
 80093d4:	6823      	ldr	r3, [r4, #0]
 80093d6:	079b      	lsls	r3, r3, #30
 80093d8:	d413      	bmi.n	8009402 <_printf_i+0x23a>
 80093da:	68e0      	ldr	r0, [r4, #12]
 80093dc:	9b03      	ldr	r3, [sp, #12]
 80093de:	4298      	cmp	r0, r3
 80093e0:	bfb8      	it	lt
 80093e2:	4618      	movlt	r0, r3
 80093e4:	e7a4      	b.n	8009330 <_printf_i+0x168>
 80093e6:	2301      	movs	r3, #1
 80093e8:	4632      	mov	r2, r6
 80093ea:	4649      	mov	r1, r9
 80093ec:	4640      	mov	r0, r8
 80093ee:	47d0      	blx	sl
 80093f0:	3001      	adds	r0, #1
 80093f2:	d09b      	beq.n	800932c <_printf_i+0x164>
 80093f4:	3501      	adds	r5, #1
 80093f6:	68e3      	ldr	r3, [r4, #12]
 80093f8:	9903      	ldr	r1, [sp, #12]
 80093fa:	1a5b      	subs	r3, r3, r1
 80093fc:	42ab      	cmp	r3, r5
 80093fe:	dcf2      	bgt.n	80093e6 <_printf_i+0x21e>
 8009400:	e7eb      	b.n	80093da <_printf_i+0x212>
 8009402:	2500      	movs	r5, #0
 8009404:	f104 0619 	add.w	r6, r4, #25
 8009408:	e7f5      	b.n	80093f6 <_printf_i+0x22e>
 800940a:	bf00      	nop
 800940c:	0800ab39 	.word	0x0800ab39
 8009410:	0800ab4a 	.word	0x0800ab4a

08009414 <_realloc_r>:
 8009414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009416:	4607      	mov	r7, r0
 8009418:	4614      	mov	r4, r2
 800941a:	460e      	mov	r6, r1
 800941c:	b921      	cbnz	r1, 8009428 <_realloc_r+0x14>
 800941e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009422:	4611      	mov	r1, r2
 8009424:	f7ff bbb6 	b.w	8008b94 <_malloc_r>
 8009428:	b922      	cbnz	r2, 8009434 <_realloc_r+0x20>
 800942a:	f7ff fcb3 	bl	8008d94 <_free_r>
 800942e:	4625      	mov	r5, r4
 8009430:	4628      	mov	r0, r5
 8009432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009434:	f000 f814 	bl	8009460 <_malloc_usable_size_r>
 8009438:	42a0      	cmp	r0, r4
 800943a:	d20f      	bcs.n	800945c <_realloc_r+0x48>
 800943c:	4621      	mov	r1, r4
 800943e:	4638      	mov	r0, r7
 8009440:	f7ff fba8 	bl	8008b94 <_malloc_r>
 8009444:	4605      	mov	r5, r0
 8009446:	2800      	cmp	r0, #0
 8009448:	d0f2      	beq.n	8009430 <_realloc_r+0x1c>
 800944a:	4631      	mov	r1, r6
 800944c:	4622      	mov	r2, r4
 800944e:	f7ff fb71 	bl	8008b34 <memcpy>
 8009452:	4631      	mov	r1, r6
 8009454:	4638      	mov	r0, r7
 8009456:	f7ff fc9d 	bl	8008d94 <_free_r>
 800945a:	e7e9      	b.n	8009430 <_realloc_r+0x1c>
 800945c:	4635      	mov	r5, r6
 800945e:	e7e7      	b.n	8009430 <_realloc_r+0x1c>

08009460 <_malloc_usable_size_r>:
 8009460:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009464:	1f18      	subs	r0, r3, #4
 8009466:	2b00      	cmp	r3, #0
 8009468:	bfbc      	itt	lt
 800946a:	580b      	ldrlt	r3, [r1, r0]
 800946c:	18c0      	addlt	r0, r0, r3
 800946e:	4770      	bx	lr

08009470 <_init>:
 8009470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009472:	bf00      	nop
 8009474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009476:	bc08      	pop	{r3}
 8009478:	469e      	mov	lr, r3
 800947a:	4770      	bx	lr

0800947c <_fini>:
 800947c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800947e:	bf00      	nop
 8009480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009482:	bc08      	pop	{r3}
 8009484:	469e      	mov	lr, r3
 8009486:	4770      	bx	lr
