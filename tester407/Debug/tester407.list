
tester407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000014ac  08008574  08008574  00018574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a20  08009a20  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08009a20  08009a20  00019a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a28  08009a28  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a28  08009a28  00019a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a2c  08009a2c  00019a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08009a30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          000047f8  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004874  20004874  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e749  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d45  00000000  00000000  0003e7f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015b8  00000000  00000000  00042540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001460  00000000  00000000  00043af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000266ac  00000000  00000000  00044f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a395  00000000  00000000  0006b604  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d867e  00000000  00000000  00085999  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0015e017  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005df4  00000000  00000000  0015e06c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800855c 	.word	0x0800855c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	0800855c 	.word	0x0800855c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <_ZN9RV_BUTTONC1EP12GPIO_TypeDeftbb>:
#include "RV_BUTTON.h"

//создание экземпляра класса кнопки, порт, вывод, type (HIGH_PULL / LOW_PULL) и направление dir (NORM_OPEN / NORM_CLOSE)
RV_BUTTON::RV_BUTTON(GPIO_TypeDef *port, uint16_t pin, bool type, bool dir) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	60b9      	str	r1, [r7, #8]
 80004d2:	4611      	mov	r1, r2
 80004d4:	461a      	mov	r2, r3
 80004d6:	460b      	mov	r3, r1
 80004d8:	80fb      	strh	r3, [r7, #6]
 80004da:	4613      	mov	r3, r2
 80004dc:	717b      	strb	r3, [r7, #5]
	_PORT = port;
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	68ba      	ldr	r2, [r7, #8]
 80004e2:	605a      	str	r2, [r3, #4]
	_PIN = pin;
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	88fa      	ldrh	r2, [r7, #6]
 80004e8:	811a      	strh	r2, [r3, #8]
	RV_BUTTON::init();
 80004ea:	68f8      	ldr	r0, [r7, #12]
 80004ec:	f000 f80d 	bl	800050a <_ZN9RV_BUTTON4initEv>
	RV_BUTTON::setType(type);
 80004f0:	797b      	ldrb	r3, [r7, #5]
 80004f2:	4619      	mov	r1, r3
 80004f4:	68f8      	ldr	r0, [r7, #12]
 80004f6:	f000 f82e 	bl	8000556 <_ZN9RV_BUTTON7setTypeEb>
	_inv_state = dir;
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	7e3a      	ldrb	r2, [r7, #24]
 80004fe:	761a      	strb	r2, [r3, #24]
}
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	4618      	mov	r0, r3
 8000504:	3710      	adds	r7, #16
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}

0800050a <_ZN9RV_BUTTON4initEv>:
//инициализация
void RV_BUTTON::init() {
 800050a:	b580      	push	{r7, lr}
 800050c:	b082      	sub	sp, #8
 800050e:	af00      	add	r7, sp, #0
 8000510:	6078      	str	r0, [r7, #4]
	_mode = false;
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	2200      	movs	r2, #0
 8000516:	765a      	strb	r2, [r3, #25]
	btn_timer = 0;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	2200      	movs	r2, #0
 800051c:	615a      	str	r2, [r3, #20]
	btn_counter = 0;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	2200      	movs	r2, #0
 8000522:	741a      	strb	r2, [r3, #16]
	last_counter = 0;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2200      	movs	r2, #0
 8000528:	745a      	strb	r2, [r3, #17]
	_debounce = 120;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	2278      	movs	r2, #120	; 0x78
 800052e:	815a      	strh	r2, [r3, #10]
	_timeout = 500;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000536:	819a      	strh	r2, [r3, #12]
	_step_timeout = 400;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800053e:	81da      	strh	r2, [r3, #14]
	_inv_state = NORM_OPEN;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	2200      	movs	r2, #0
 8000544:	761a      	strb	r2, [r3, #24]
	RV_BUTTON::setType(HIGH_PULL);
 8000546:	2100      	movs	r1, #0
 8000548:	6878      	ldr	r0, [r7, #4]
 800054a:	f000 f804 	bl	8000556 <_ZN9RV_BUTTON7setTypeEb>
}
 800054e:	bf00      	nop
 8000550:	3708      	adds	r7, #8
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}

08000556 <_ZN9RV_BUTTON7setTypeEb>:
//установка таймаута между инкрементами (по умолчанию 400 мс)
void RV_BUTTON::setStepTimeout(uint16_t step_timeout) {
	_step_timeout = step_timeout;
}
//установка типа кнопки (HIGH_PULL / LOW_PULL)
void RV_BUTTON::setType(bool type) {
 8000556:	b480      	push	{r7}
 8000558:	b083      	sub	sp, #12
 800055a:	af00      	add	r7, sp, #0
 800055c:	6078      	str	r0, [r7, #4]
 800055e:	460b      	mov	r3, r1
 8000560:	70fb      	strb	r3, [r7, #3]
	_type = type;
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	78fa      	ldrb	r2, [r7, #3]
 8000566:	769a      	strb	r2, [r3, #26]
}
 8000568:	bf00      	nop
 800056a:	370c      	adds	r7, #12
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr

08000574 <_ZN9RV_BUTTON7isClickEv>:
	}
	else
		return false;
}
//возвращает true при клике. Сбрасывается после вызова
bool RV_BUTTON::isClick() {	
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	if (flags.isOne_f) {
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	785b      	ldrb	r3, [r3, #1]
 8000580:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000584:	b2db      	uxtb	r3, r3
 8000586:	2b00      	cmp	r3, #0
 8000588:	d006      	beq.n	8000598 <_ZN9RV_BUTTON7isClickEv+0x24>
		flags.isOne_f = false;
 800058a:	687a      	ldr	r2, [r7, #4]
 800058c:	7853      	ldrb	r3, [r2, #1]
 800058e:	f36f 0341 	bfc	r3, #1, #1
 8000592:	7053      	strb	r3, [r2, #1]
		return true;
 8000594:	2301      	movs	r3, #1
 8000596:	e000      	b.n	800059a <_ZN9RV_BUTTON7isClickEv+0x26>
	}
	else
		return false;
 8000598:	2300      	movs	r3, #0
}
 800059a:	4618      	mov	r0, r3
 800059c:	370c      	adds	r7, #12
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr

080005a6 <_ZN9RV_BUTTON4tickEv>:
	_mode = true;
	flags.btn_state = state ^ _inv_state;
	_mode = false;
}
//опрос кнопки
void RV_BUTTON::tick() {	
 80005a6:	b580      	push	{r7, lr}
 80005a8:	b082      	sub	sp, #8
 80005aa:	af00      	add	r7, sp, #0
 80005ac:	6078      	str	r0, [r7, #4]
	if (!_mode) flags.btn_state = !HAL_GPIO_ReadPin(_PORT, _PIN) ^ (_inv_state ^ _type);
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	7e5b      	ldrb	r3, [r3, #25]
 80005b2:	f083 0301 	eor.w	r3, r3, #1
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d01e      	beq.n	80005fa <_ZN9RV_BUTTON4tickEv+0x54>
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	685a      	ldr	r2, [r3, #4]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	891b      	ldrh	r3, [r3, #8]
 80005c4:	4619      	mov	r1, r3
 80005c6:	4610      	mov	r0, r2
 80005c8:	f001 fe1c 	bl	8002204 <HAL_GPIO_ReadPin>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	bf0c      	ite	eq
 80005d2:	2301      	moveq	r3, #1
 80005d4:	2300      	movne	r3, #0
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	4619      	mov	r1, r3
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	7e1a      	ldrb	r2, [r3, #24]
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	7e9b      	ldrb	r3, [r3, #26]
 80005e2:	4053      	eors	r3, r2
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	4299      	cmp	r1, r3
 80005e8:	bf14      	ite	ne
 80005ea:	2301      	movne	r3, #1
 80005ec:	2300      	moveq	r3, #0
 80005ee:	b2d9      	uxtb	r1, r3
 80005f0:	687a      	ldr	r2, [r7, #4]
 80005f2:	7813      	ldrb	r3, [r2, #0]
 80005f4:	f361 0300 	bfi	r3, r1, #0, #1
 80005f8:	7013      	strb	r3, [r2, #0]
	
  if (flags.btn_state && !flags.btn_flag && (HAL_GetTick() - btn_timer >= _debounce)) {
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000602:	b2db      	uxtb	r3, r3
 8000604:	2b00      	cmp	r3, #0
 8000606:	d015      	beq.n	8000634 <_ZN9RV_BUTTON4tickEv+0x8e>
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000610:	b2db      	uxtb	r3, r3
 8000612:	f083 0301 	eor.w	r3, r3, #1
 8000616:	b2db      	uxtb	r3, r3
 8000618:	2b00      	cmp	r3, #0
 800061a:	d00b      	beq.n	8000634 <_ZN9RV_BUTTON4tickEv+0x8e>
 800061c:	f001 fabc 	bl	8001b98 <HAL_GetTick>
 8000620:	4602      	mov	r2, r0
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	695b      	ldr	r3, [r3, #20]
 8000626:	1ad3      	subs	r3, r2, r3
 8000628:	687a      	ldr	r2, [r7, #4]
 800062a:	8952      	ldrh	r2, [r2, #10]
 800062c:	4293      	cmp	r3, r2
 800062e:	d301      	bcc.n	8000634 <_ZN9RV_BUTTON4tickEv+0x8e>
 8000630:	2301      	movs	r3, #1
 8000632:	e000      	b.n	8000636 <_ZN9RV_BUTTON4tickEv+0x90>
 8000634:	2300      	movs	r3, #0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d019      	beq.n	800066e <_ZN9RV_BUTTON4tickEv+0xc8>
    flags.btn_flag = true;
 800063a:	687a      	ldr	r2, [r7, #4]
 800063c:	7813      	ldrb	r3, [r2, #0]
 800063e:	f043 0302 	orr.w	r3, r3, #2
 8000642:	7013      	strb	r3, [r2, #0]
    btn_counter++;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	7c1b      	ldrb	r3, [r3, #16]
 8000648:	3301      	adds	r3, #1
 800064a:	b2da      	uxtb	r2, r3
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	741a      	strb	r2, [r3, #16]
    btn_timer = HAL_GetTick();
 8000650:	f001 faa2 	bl	8001b98 <HAL_GetTick>
 8000654:	4602      	mov	r2, r0
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	615a      	str	r2, [r3, #20]
    flags.isPress_f = true;
 800065a:	687a      	ldr	r2, [r7, #4]
 800065c:	7813      	ldrb	r3, [r2, #0]
 800065e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000662:	7013      	strb	r3, [r2, #0]
		flags.oneClick_f = true;
 8000664:	687a      	ldr	r2, [r7, #4]
 8000666:	7853      	ldrb	r3, [r2, #1]
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	7053      	strb	r3, [r2, #1]
  }
  if (!flags.btn_state && flags.btn_flag) {
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000676:	b2db      	uxtb	r3, r3
 8000678:	f083 0301 	eor.w	r3, r3, #1
 800067c:	b2db      	uxtb	r3, r3
 800067e:	2b00      	cmp	r3, #0
 8000680:	d030      	beq.n	80006e4 <_ZN9RV_BUTTON4tickEv+0x13e>
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800068a:	b2db      	uxtb	r3, r3
 800068c:	2b00      	cmp	r3, #0
 800068e:	d029      	beq.n	80006e4 <_ZN9RV_BUTTON4tickEv+0x13e>
    flags.btn_flag = false;
 8000690:	687a      	ldr	r2, [r7, #4]
 8000692:	7813      	ldrb	r3, [r2, #0]
 8000694:	f36f 0341 	bfc	r3, #1, #1
 8000698:	7013      	strb	r3, [r2, #0]
    flags.hold_flag = false;
 800069a:	687a      	ldr	r2, [r7, #4]
 800069c:	7813      	ldrb	r3, [r2, #0]
 800069e:	f36f 0382 	bfc	r3, #2, #1
 80006a2:	7013      	strb	r3, [r2, #0]
    flags.isRelease_f = true;
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	7813      	ldrb	r3, [r2, #0]
 80006a8:	f043 0320 	orr.w	r3, r3, #32
 80006ac:	7013      	strb	r3, [r2, #0]
		btn_timer = HAL_GetTick();
 80006ae:	f001 fa73 	bl	8001b98 <HAL_GetTick>
 80006b2:	4602      	mov	r2, r0
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	615a      	str	r2, [r3, #20]
		flags.step_flag = false;
 80006b8:	687a      	ldr	r2, [r7, #4]
 80006ba:	7813      	ldrb	r3, [r2, #0]
 80006bc:	f36f 13c7 	bfc	r3, #7, #1
 80006c0:	7013      	strb	r3, [r2, #0]
		if (flags.oneClick_f) {
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	785b      	ldrb	r3, [r3, #1]
 80006c6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d009      	beq.n	80006e4 <_ZN9RV_BUTTON4tickEv+0x13e>
			flags.oneClick_f = false;
 80006d0:	687a      	ldr	r2, [r7, #4]
 80006d2:	7853      	ldrb	r3, [r2, #1]
 80006d4:	f36f 0300 	bfc	r3, #0, #1
 80006d8:	7053      	strb	r3, [r2, #1]
			flags.isOne_f = true;
 80006da:	687a      	ldr	r2, [r7, #4]
 80006dc:	7853      	ldrb	r3, [r2, #1]
 80006de:	f043 0302 	orr.w	r3, r3, #2
 80006e2:	7053      	strb	r3, [r2, #1]
		}
  }
  if (flags.btn_flag && flags.btn_state && (HAL_GetTick() - btn_timer >= _timeout) && !flags.hold_flag) {
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d01c      	beq.n	800072c <_ZN9RV_BUTTON4tickEv+0x186>
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d015      	beq.n	800072c <_ZN9RV_BUTTON4tickEv+0x186>
 8000700:	f001 fa4a 	bl	8001b98 <HAL_GetTick>
 8000704:	4602      	mov	r2, r0
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	695b      	ldr	r3, [r3, #20]
 800070a:	1ad3      	subs	r3, r2, r3
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	8992      	ldrh	r2, [r2, #12]
 8000710:	4293      	cmp	r3, r2
 8000712:	d30b      	bcc.n	800072c <_ZN9RV_BUTTON4tickEv+0x186>
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800071c:	b2db      	uxtb	r3, r3
 800071e:	f083 0301 	eor.w	r3, r3, #1
 8000722:	b2db      	uxtb	r3, r3
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <_ZN9RV_BUTTON4tickEv+0x186>
 8000728:	2301      	movs	r3, #1
 800072a:	e000      	b.n	800072e <_ZN9RV_BUTTON4tickEv+0x188>
 800072c:	2300      	movs	r3, #0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d01b      	beq.n	800076a <_ZN9RV_BUTTON4tickEv+0x1c4>
    flags.hold_flag = true;
 8000732:	687a      	ldr	r2, [r7, #4]
 8000734:	7813      	ldrb	r3, [r2, #0]
 8000736:	f043 0304 	orr.w	r3, r3, #4
 800073a:	7013      	strb	r3, [r2, #0]
    btn_counter = 0;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	2200      	movs	r2, #0
 8000740:	741a      	strb	r2, [r3, #16]
    flags.isHolded_f = true;
 8000742:	687a      	ldr	r2, [r7, #4]
 8000744:	7813      	ldrb	r3, [r2, #0]
 8000746:	f043 0310 	orr.w	r3, r3, #16
 800074a:	7013      	strb	r3, [r2, #0]
		flags.step_flag = true;
 800074c:	687a      	ldr	r2, [r7, #4]
 800074e:	7813      	ldrb	r3, [r2, #0]
 8000750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000754:	7013      	strb	r3, [r2, #0]
		flags.oneClick_f = false;
 8000756:	687a      	ldr	r2, [r7, #4]
 8000758:	7853      	ldrb	r3, [r2, #1]
 800075a:	f36f 0300 	bfc	r3, #0, #1
 800075e:	7053      	strb	r3, [r2, #1]
		btn_timer = HAL_GetTick();
 8000760:	f001 fa1a 	bl	8001b98 <HAL_GetTick>
 8000764:	4602      	mov	r2, r0
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	615a      	str	r2, [r3, #20]
  }
  
  if ((HAL_GetTick() - btn_timer >= _timeout) && (btn_counter != 0)) {    
 800076a:	f001 fa15 	bl	8001b98 <HAL_GetTick>
 800076e:	4602      	mov	r2, r0
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	695b      	ldr	r3, [r3, #20]
 8000774:	1ad3      	subs	r3, r2, r3
 8000776:	687a      	ldr	r2, [r7, #4]
 8000778:	8992      	ldrh	r2, [r2, #12]
 800077a:	4293      	cmp	r3, r2
 800077c:	d305      	bcc.n	800078a <_ZN9RV_BUTTON4tickEv+0x1e4>
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	7c1b      	ldrb	r3, [r3, #16]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <_ZN9RV_BUTTON4tickEv+0x1e4>
 8000786:	2301      	movs	r3, #1
 8000788:	e000      	b.n	800078c <_ZN9RV_BUTTON4tickEv+0x1e6>
 800078a:	2300      	movs	r3, #0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d00b      	beq.n	80007a8 <_ZN9RV_BUTTON4tickEv+0x202>
    last_counter = btn_counter;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	7c1a      	ldrb	r2, [r3, #16]
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	745a      	strb	r2, [r3, #17]
    btn_counter = 0;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2200      	movs	r2, #0
 800079c:	741a      	strb	r2, [r3, #16]
		flags.counter_flag = true;
 800079e:	687a      	ldr	r2, [r7, #4]
 80007a0:	7813      	ldrb	r3, [r2, #0]
 80007a2:	f043 0308 	orr.w	r3, r3, #8
 80007a6:	7013      	strb	r3, [r2, #0]
  }
}
 80007a8:	bf00      	nop
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80007b0:	b480      	push	{r7}
 80007b2:	b085      	sub	sp, #20
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	60b9      	str	r1, [r7, #8]
 80007ba:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	4a07      	ldr	r2, [pc, #28]	; (80007dc <vApplicationGetIdleTaskMemory+0x2c>)
 80007c0:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 80007c2:	68bb      	ldr	r3, [r7, #8]
 80007c4:	4a06      	ldr	r2, [pc, #24]	; (80007e0 <vApplicationGetIdleTaskMemory+0x30>)
 80007c6:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2280      	movs	r2, #128	; 0x80
 80007cc:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 80007ce:	bf00      	nop
 80007d0:	3714      	adds	r7, #20
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	200002d0 	.word	0x200002d0
 80007e0:	20000384 	.word	0x20000384

080007e4 <_Z16MX_FREERTOS_Initv>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
   void MX_FREERTOS_Init(void) {
 80007e4:	b5b0      	push	{r4, r5, r7, lr}
 80007e6:	b096      	sub	sp, #88	; 0x58
 80007e8:	af00      	add	r7, sp, #0
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of testTask */
  osThreadDef(testTask, TestTask, osPriorityNormal, 0, 256);
 80007ea:	4b1d      	ldr	r3, [pc, #116]	; (8000860 <_Z16MX_FREERTOS_Initv+0x7c>)
 80007ec:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80007f0:	461d      	mov	r5, r3
 80007f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  testTaskHandle = osThreadCreate(osThread(testTask), NULL);
 80007fe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000802:	2100      	movs	r1, #0
 8000804:	4618      	mov	r0, r3
 8000806:	f006 fb02 	bl	8006e0e <osThreadCreate>
 800080a:	4603      	mov	r3, r0
 800080c:	4a15      	ldr	r2, [pc, #84]	; (8000864 <_Z16MX_FREERTOS_Initv+0x80>)
 800080e:	6013      	str	r3, [r2, #0]

  /* definition and creation of lcdTask */
  osThreadDef(lcdTask, LCDTask, osPriorityNormal, 0, 256);
 8000810:	4b15      	ldr	r3, [pc, #84]	; (8000868 <_Z16MX_FREERTOS_Initv+0x84>)
 8000812:	f107 0420 	add.w	r4, r7, #32
 8000816:	461d      	mov	r5, r3
 8000818:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800081a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800081c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000820:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  lcdTaskHandle = osThreadCreate(osThread(lcdTask), NULL);
 8000824:	f107 0320 	add.w	r3, r7, #32
 8000828:	2100      	movs	r1, #0
 800082a:	4618      	mov	r0, r3
 800082c:	f006 faef 	bl	8006e0e <osThreadCreate>
 8000830:	4603      	mov	r3, r0
 8000832:	4a0e      	ldr	r2, [pc, #56]	; (800086c <_Z16MX_FREERTOS_Initv+0x88>)
 8000834:	6013      	str	r3, [r2, #0]

  /* definition and creation of I2C_Task */
  osThreadDef(I2C_Task, i2c_Task, osPriorityNormal, 0, 128);
 8000836:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <_Z16MX_FREERTOS_Initv+0x8c>)
 8000838:	1d3c      	adds	r4, r7, #4
 800083a:	461d      	mov	r5, r3
 800083c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800083e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000840:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000844:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  I2C_TaskHandle = osThreadCreate(osThread(I2C_Task), NULL);
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	2100      	movs	r1, #0
 800084c:	4618      	mov	r0, r3
 800084e:	f006 fade 	bl	8006e0e <osThreadCreate>
 8000852:	4603      	mov	r3, r0
 8000854:	4a07      	ldr	r2, [pc, #28]	; (8000874 <_Z16MX_FREERTOS_Initv+0x90>)
 8000856:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000858:	bf00      	nop
 800085a:	3758      	adds	r7, #88	; 0x58
 800085c:	46bd      	mov	sp, r7
 800085e:	bdb0      	pop	{r4, r5, r7, pc}
 8000860:	08008594 	.word	0x08008594
 8000864:	200002c4 	.word	0x200002c4
 8000868:	080085b0 	.word	0x080085b0
 800086c:	200002c8 	.word	0x200002c8
 8000870:	080085cc 	.word	0x080085cc
 8000874:	200002cc 	.word	0x200002cc

08000878 <_Z8TestTaskPKv>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_TestTask */
void TestTask(void const * argument)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b088      	sub	sp, #32
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TestTask */

	uint32_t timeOutUART = 50;
 8000880:	2332      	movs	r3, #50	; 0x32
 8000882:	61fb      	str	r3, [r7, #28]
	uint8_t snum[5];
	//команды uart
	uint8_t cmdASIC[7] = { 0x55, 0xAA, 0x52, 0x05, 0x00, 0x00, 0x0A };
 8000884:	4a4d      	ldr	r2, [pc, #308]	; (80009bc <_Z8TestTaskPKv+0x144>)
 8000886:	f107 030c 	add.w	r3, r7, #12
 800088a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800088e:	6018      	str	r0, [r3, #0]
 8000890:	3304      	adds	r3, #4
 8000892:	8019      	strh	r1, [r3, #0]
 8000894:	3302      	adds	r3, #2
 8000896:	0c0a      	lsrs	r2, r1, #16
 8000898:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(RST_ASIC_GPIO_Port, RST_ASIC_Pin, GPIO_PIN_RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008a0:	4847      	ldr	r0, [pc, #284]	; (80009c0 <_Z8TestTaskPKv+0x148>)
 80008a2:	f001 fcc7 	bl	8002234 <HAL_GPIO_WritePin>


	/* Infinite loop */
	for (;;) {
		if (start && ready) {
 80008a6:	4b47      	ldr	r3, [pc, #284]	; (80009c4 <_Z8TestTaskPKv+0x14c>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d0fb      	beq.n	80008a6 <_Z8TestTaskPKv+0x2e>
 80008ae:	4b46      	ldr	r3, [pc, #280]	; (80009c8 <_Z8TestTaskPKv+0x150>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d0f7      	beq.n	80008a6 <_Z8TestTaskPKv+0x2e>
			counter_bytes = 0;
 80008b6:	4b45      	ldr	r3, [pc, #276]	; (80009cc <_Z8TestTaskPKv+0x154>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(RST_ASIC_GPIO_Port, RST_ASIC_Pin, GPIO_PIN_RESET);
 80008bc:	2200      	movs	r2, #0
 80008be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008c2:	483f      	ldr	r0, [pc, #252]	; (80009c0 <_Z8TestTaskPKv+0x148>)
 80008c4:	f001 fcb6 	bl	8002234 <HAL_GPIO_WritePin>
			osDelay(4);
 80008c8:	2004      	movs	r0, #4
 80008ca:	f006 faec 	bl	8006ea6 <osDelay>
			HAL_GPIO_WritePin(RST_ASIC_GPIO_Port, RST_ASIC_Pin, GPIO_PIN_SET);
 80008ce:	2201      	movs	r2, #1
 80008d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008d4:	483a      	ldr	r0, [pc, #232]	; (80009c0 <_Z8TestTaskPKv+0x148>)
 80008d6:	f001 fcad 	bl	8002234 <HAL_GPIO_WritePin>
			osDelay(1200);
 80008da:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80008de:	f006 fae2 	bl	8006ea6 <osDelay>

			//цикл опроса
			while (start) {
 80008e2:	4b38      	ldr	r3, [pc, #224]	; (80009c4 <_Z8TestTaskPKv+0x14c>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d0dd      	beq.n	80008a6 <_Z8TestTaskPKv+0x2e>

				//сброс асиков
				HAL_GPIO_WritePin(RST_ASIC_GPIO_Port, RST_ASIC_Pin, GPIO_PIN_RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008f0:	4833      	ldr	r0, [pc, #204]	; (80009c0 <_Z8TestTaskPKv+0x148>)
 80008f2:	f001 fc9f 	bl	8002234 <HAL_GPIO_WritePin>
				osDelay(500);
 80008f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008fa:	f006 fad4 	bl	8006ea6 <osDelay>
				HAL_GPIO_WritePin(RST_ASIC_GPIO_Port, RST_ASIC_Pin, GPIO_PIN_SET);
 80008fe:	2201      	movs	r2, #1
 8000900:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000904:	482e      	ldr	r0, [pc, #184]	; (80009c0 <_Z8TestTaskPKv+0x148>)
 8000906:	f001 fc95 	bl	8002234 <HAL_GPIO_WritePin>
				osDelay(500);
 800090a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800090e:	f006 faca 	bl	8006ea6 <osDelay>

				status_uart = HAL_UART_Receive_IT(&huart6, readASIC, 1);
 8000912:	2201      	movs	r2, #1
 8000914:	492e      	ldr	r1, [pc, #184]	; (80009d0 <_Z8TestTaskPKv+0x158>)
 8000916:	482f      	ldr	r0, [pc, #188]	; (80009d4 <_Z8TestTaskPKv+0x15c>)
 8000918:	f005 facf 	bl	8005eba <HAL_UART_Receive_IT>
 800091c:	4603      	mov	r3, r0
 800091e:	461a      	mov	r2, r3
 8000920:	4b2d      	ldr	r3, [pc, #180]	; (80009d8 <_Z8TestTaskPKv+0x160>)
 8000922:	701a      	strb	r2, [r3, #0]
				status_uart = HAL_UART_Transmit(&huart1, cmdASIC, 7, 20);
 8000924:	f107 010c 	add.w	r1, r7, #12
 8000928:	2314      	movs	r3, #20
 800092a:	2207      	movs	r2, #7
 800092c:	482b      	ldr	r0, [pc, #172]	; (80009dc <_Z8TestTaskPKv+0x164>)
 800092e:	f005 fa32 	bl	8005d96 <HAL_UART_Transmit>
 8000932:	4603      	mov	r3, r0
 8000934:	461a      	mov	r2, r3
 8000936:	4b28      	ldr	r3, [pc, #160]	; (80009d8 <_Z8TestTaskPKv+0x160>)
 8000938:	701a      	strb	r2, [r3, #0]

				//запускаем таймер
				status_uartTIM = 1;
 800093a:	4b29      	ldr	r3, [pc, #164]	; (80009e0 <_Z8TestTaskPKv+0x168>)
 800093c:	2201      	movs	r2, #1
 800093e:	701a      	strb	r2, [r3, #0]
				// ожидать таймаута по уарту
				while(uartTIM < timeOutUART){
 8000940:	4b28      	ldr	r3, [pc, #160]	; (80009e4 <_Z8TestTaskPKv+0x16c>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	69fa      	ldr	r2, [r7, #28]
 8000946:	429a      	cmp	r2, r3
 8000948:	d903      	bls.n	8000952 <_Z8TestTaskPKv+0xda>
					osDelay(1);
 800094a:	2001      	movs	r0, #1
 800094c:	f006 faab 	bl	8006ea6 <osDelay>
				while(uartTIM < timeOutUART){
 8000950:	e7f6      	b.n	8000940 <_Z8TestTaskPKv+0xc8>
				}
				uartTIM = 0;
 8000952:	4b24      	ldr	r3, [pc, #144]	; (80009e4 <_Z8TestTaskPKv+0x16c>)
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
				status_uartTIM = 0;
 8000958:	4b21      	ldr	r3, [pc, #132]	; (80009e0 <_Z8TestTaskPKv+0x168>)
 800095a:	2200      	movs	r2, #0
 800095c:	701a      	strb	r2, [r3, #0]

				// все данные пришли отключаем уарт
				HAL_UART_AbortReceive(&huart6);
 800095e:	481d      	ldr	r0, [pc, #116]	; (80009d4 <_Z8TestTaskPKv+0x15c>)
 8000960:	f005 fadb 	bl	8005f1a <HAL_UART_AbortReceive>

				//проверить пришедшие данные сравненией с шаблоном

				//посчитать количесво асиков

				pre_count_ASIC = counter_bytes / 9;
 8000964:	4b19      	ldr	r3, [pc, #100]	; (80009cc <_Z8TestTaskPKv+0x154>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a1f      	ldr	r2, [pc, #124]	; (80009e8 <_Z8TestTaskPKv+0x170>)
 800096a:	fba2 2303 	umull	r2, r3, r2, r3
 800096e:	085b      	lsrs	r3, r3, #1
 8000970:	4a1e      	ldr	r2, [pc, #120]	; (80009ec <_Z8TestTaskPKv+0x174>)
 8000972:	6013      	str	r3, [r2, #0]
				itoa(pre_count_ASIC, (char*)snum, 10);
 8000974:	4b1d      	ldr	r3, [pc, #116]	; (80009ec <_Z8TestTaskPKv+0x174>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4618      	mov	r0, r3
 800097a:	f107 0314 	add.w	r3, r7, #20
 800097e:	220a      	movs	r2, #10
 8000980:	4619      	mov	r1, r3
 8000982:	f007 fcd7 	bl	8008334 <itoa>

			    ssd1306_SetCursor(2, 0);
 8000986:	2100      	movs	r1, #0
 8000988:	2002      	movs	r0, #2
 800098a:	f000 fecb 	bl	8001724 <ssd1306_SetCursor>
			    ssd1306_WriteString((char*)snum, Font_16x26, White);
 800098e:	4a18      	ldr	r2, [pc, #96]	; (80009f0 <_Z8TestTaskPKv+0x178>)
 8000990:	f107 0014 	add.w	r0, r7, #20
 8000994:	2301      	movs	r3, #1
 8000996:	ca06      	ldmia	r2, {r1, r2}
 8000998:	f000 fe9e 	bl	80016d8 <ssd1306_WriteString>
			    ssd1306_UpdateScreen();
 800099c:	f000 fd98 	bl	80014d0 <ssd1306_UpdateScreen>

				counter_bytes = 0;
 80009a0:	4b0a      	ldr	r3, [pc, #40]	; (80009cc <_Z8TestTaskPKv+0x154>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
				memset(readASIC, 0, sizeof readASIC);
 80009a6:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80009aa:	2100      	movs	r1, #0
 80009ac:	4808      	ldr	r0, [pc, #32]	; (80009d0 <_Z8TestTaskPKv+0x158>)
 80009ae:	f007 fcc5 	bl	800833c <memset>

				osDelay(200);
 80009b2:	20c8      	movs	r0, #200	; 0xc8
 80009b4:	f006 fa77 	bl	8006ea6 <osDelay>
			while (start) {
 80009b8:	e793      	b.n	80008e2 <_Z8TestTaskPKv+0x6a>
 80009ba:	bf00      	nop
 80009bc:	080085e8 	.word	0x080085e8
 80009c0:	40020000 	.word	0x40020000
 80009c4:	200002c0 	.word	0x200002c0
 80009c8:	200002c1 	.word	0x200002c1
 80009cc:	200000a0 	.word	0x200000a0
 80009d0:	200000a4 	.word	0x200000a4
 80009d4:	20004820 	.word	0x20004820
 80009d8:	20000099 	.word	0x20000099
 80009dc:	200047dc 	.word	0x200047dc
 80009e0:	20000588 	.word	0x20000588
 80009e4:	20000584 	.word	0x20000584
 80009e8:	38e38e39 	.word	0x38e38e39
 80009ec:	2000009c 	.word	0x2000009c
 80009f0:	20000000 	.word	0x20000000

080009f4 <_Z7LCDTaskPKv>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_LCDTask */
void LCDTask(void const * argument)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b09a      	sub	sp, #104	; 0x68
 80009f8:	af02      	add	r7, sp, #8
 80009fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LCDTask */

	RV_BUTTON button1(B1_GPIO_Port, B1_Pin, HIGH_PULL, NORM_OPEN);
 80009fc:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8000a00:	2300      	movs	r3, #0
 8000a02:	9300      	str	r3, [sp, #0]
 8000a04:	2300      	movs	r3, #0
 8000a06:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a0a:	492c      	ldr	r1, [pc, #176]	; (8000abc <_Z7LCDTaskPKv+0xc8>)
 8000a0c:	f7ff fd5c 	bl	80004c8 <_ZN9RV_BUTTONC1EP12GPIO_TypeDeftbb>
	RV_BUTTON button2(B2_GPIO_Port, B2_Pin, HIGH_PULL, NORM_OPEN);
 8000a10:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000a14:	2300      	movs	r3, #0
 8000a16:	9300      	str	r3, [sp, #0]
 8000a18:	2300      	movs	r3, #0
 8000a1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a1e:	4928      	ldr	r1, [pc, #160]	; (8000ac0 <_Z7LCDTaskPKv+0xcc>)
 8000a20:	f7ff fd52 	bl	80004c8 <_ZN9RV_BUTTONC1EP12GPIO_TypeDeftbb>
	RV_BUTTON button3(B3_GPIO_Port, B3_Pin, HIGH_PULL, NORM_OPEN);
 8000a24:	f107 000c 	add.w	r0, r7, #12
 8000a28:	2300      	movs	r3, #0
 8000a2a:	9300      	str	r3, [sp, #0]
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a32:	4923      	ldr	r1, [pc, #140]	; (8000ac0 <_Z7LCDTaskPKv+0xcc>)
 8000a34:	f7ff fd48 	bl	80004c8 <_ZN9RV_BUTTONC1EP12GPIO_TypeDeftbb>

	button1.isClick();
 8000a38:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff fd99 	bl	8000574 <_ZN9RV_BUTTON7isClickEv>
	button2.isClick();
 8000a42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a46:	4618      	mov	r0, r3
 8000a48:	f7ff fd94 	bl	8000574 <_ZN9RV_BUTTON7isClickEv>
	button3.isClick();
 8000a4c:	f107 030c 	add.w	r3, r7, #12
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff fd8f 	bl	8000574 <_ZN9RV_BUTTON7isClickEv>


	//ssd1306_TestAll();
    ssd1306_SetCursor(2, 28);
 8000a56:	211c      	movs	r1, #28
 8000a58:	2002      	movs	r0, #2
 8000a5a:	f000 fe63 	bl	8001724 <ssd1306_SetCursor>
    ssd1306_WriteString("Start", Font_16x26, White);
 8000a5e:	4a19      	ldr	r2, [pc, #100]	; (8000ac4 <_Z7LCDTaskPKv+0xd0>)
 8000a60:	2301      	movs	r3, #1
 8000a62:	ca06      	ldmia	r2, {r1, r2}
 8000a64:	4818      	ldr	r0, [pc, #96]	; (8000ac8 <_Z7LCDTaskPKv+0xd4>)
 8000a66:	f000 fe37 	bl	80016d8 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8000a6a:	f000 fd31 	bl	80014d0 <ssd1306_UpdateScreen>

/* Infinite loop */
for (;;) {
	button1.tick();
 8000a6e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a72:	4618      	mov	r0, r3
 8000a74:	f7ff fd97 	bl	80005a6 <_ZN9RV_BUTTON4tickEv>
	button2.tick();
 8000a78:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff fd92 	bl	80005a6 <_ZN9RV_BUTTON4tickEv>
	button3.tick();
 8000a82:	f107 030c 	add.w	r3, r7, #12
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff fd8d 	bl	80005a6 <_ZN9RV_BUTTON4tickEv>

	if (button1.isClick() ){
 8000a8c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff fd6f 	bl	8000574 <_ZN9RV_BUTTON7isClickEv>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d00a      	beq.n	8000ab2 <_Z7LCDTaskPKv+0xbe>
		if (start == 0) {
 8000a9c:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <_Z7LCDTaskPKv+0xd8>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d103      	bne.n	8000aac <_Z7LCDTaskPKv+0xb8>
			start = 1;
 8000aa4:	4b09      	ldr	r3, [pc, #36]	; (8000acc <_Z7LCDTaskPKv+0xd8>)
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	701a      	strb	r2, [r3, #0]
 8000aaa:	e002      	b.n	8000ab2 <_Z7LCDTaskPKv+0xbe>
		}else {
			start = 0;
 8000aac:	4b07      	ldr	r3, [pc, #28]	; (8000acc <_Z7LCDTaskPKv+0xd8>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	701a      	strb	r2, [r3, #0]
		}

	}

	osDelay(1);
 8000ab2:	2001      	movs	r0, #1
 8000ab4:	f006 f9f7 	bl	8006ea6 <osDelay>
	button1.tick();
 8000ab8:	e7d9      	b.n	8000a6e <_Z7LCDTaskPKv+0x7a>
 8000aba:	bf00      	nop
 8000abc:	40020000 	.word	0x40020000
 8000ac0:	40020800 	.word	0x40020800
 8000ac4:	20000000 	.word	0x20000000
 8000ac8:	080085f0 	.word	0x080085f0
 8000acc:	200002c0 	.word	0x200002c0

08000ad0 <_Z8i2c_TaskPKv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_i2c_Task */
void i2c_Task(void const * argument)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b09a      	sub	sp, #104	; 0x68
 8000ad4:	af02      	add	r7, sp, #8
 8000ad6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN i2c_Task */

	//команды i2c
	uint16_t addr = 0x20;
 8000ad8:	2320      	movs	r3, #32
 8000ada:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	addr = addr<<1;
 8000ade:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8000ae2:	005b      	lsls	r3, r3, #1
 8000ae4:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

	GPIO_PinState plug = GPIO_PIN_RESET;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59

	uint8_t cmdStart_1[6] = { 0x55, 0xAA, 0x04, 0x07, 0x00, 0x0B };
 8000aee:	4ad0      	ldr	r2, [pc, #832]	; (8000e30 <_Z8i2c_TaskPKv+0x360>)
 8000af0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000af4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000af8:	6018      	str	r0, [r3, #0]
 8000afa:	3304      	adds	r3, #4
 8000afc:	8019      	strh	r1, [r3, #0]
	uint8_t cmdRead_1[2] = { 0x00 };// 0x07 0x01
 8000afe:	2300      	movs	r3, #0
 8000b00:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	uint8_t cmdStart_2[6] = { 0x55, 0xAA, 0x04, 0x06, 0x00, 0x0A };
 8000b04:	4acb      	ldr	r2, [pc, #812]	; (8000e34 <_Z8i2c_TaskPKv+0x364>)
 8000b06:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000b0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b0e:	6018      	str	r0, [r3, #0]
 8000b10:	3304      	adds	r3, #4
 8000b12:	8019      	strh	r1, [r3, #0]
	uint8_t cmdRead_2[2] = { 0x00 };// 0x06 0x01
 8000b14:	2300      	movs	r3, #0
 8000b16:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

	uint8_t cmdStart_3[9] = { 0x55, 0xAA, 0x07, 0x10, 0x19, 0x00, 0x00, 0x00, 0x30 };
 8000b1a:	4ac7      	ldr	r2, [pc, #796]	; (8000e38 <_Z8i2c_TaskPKv+0x368>)
 8000b1c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b20:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b22:	c303      	stmia	r3!, {r0, r1}
 8000b24:	701a      	strb	r2, [r3, #0]
	uint8_t cmdRead_3[2] = { 0x00 };// 0x10 0x01
 8000b26:	2300      	movs	r3, #0
 8000b28:	863b      	strh	r3, [r7, #48]	; 0x30

	uint8_t cmdStart_4[7] = { 0x55, 0xAA, 0x05, 0x15, 0x01, 0x00, 0x1B };
 8000b2a:	4ac4      	ldr	r2, [pc, #784]	; (8000e3c <_Z8i2c_TaskPKv+0x36c>)
 8000b2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b30:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b34:	6018      	str	r0, [r3, #0]
 8000b36:	3304      	adds	r3, #4
 8000b38:	8019      	strh	r1, [r3, #0]
 8000b3a:	3302      	adds	r3, #2
 8000b3c:	0c0a      	lsrs	r2, r1, #16
 8000b3e:	701a      	strb	r2, [r3, #0]
	uint8_t cmdRead_4[2] = { 0x00 };// 0x15 0x01
 8000b40:	2300      	movs	r3, #0
 8000b42:	84bb      	strh	r3, [r7, #36]	; 0x24

	uint8_t cmdStop[7] = { 0x55, 0xAA, 0x05, 0x15, 0x00, 0x00, 0x1A };
 8000b44:	4abe      	ldr	r2, [pc, #760]	; (8000e40 <_Z8i2c_TaskPKv+0x370>)
 8000b46:	f107 031c 	add.w	r3, r7, #28
 8000b4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b4e:	6018      	str	r0, [r3, #0]
 8000b50:	3304      	adds	r3, #4
 8000b52:	8019      	strh	r1, [r3, #0]
 8000b54:	3302      	adds	r3, #2
 8000b56:	0c0a      	lsrs	r2, r1, #16
 8000b58:	701a      	strb	r2, [r3, #0]
	uint8_t cmdRead_stop[2] = { 0x00 };// 0x15 0x01
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	833b      	strh	r3, [r7, #24]

	uint8_t cmdRefresh[6] = { 0x55, 0xAA, 0x04, 0x16, 0x00, 0x1A };
 8000b5e:	4ab9      	ldr	r2, [pc, #740]	; (8000e44 <_Z8i2c_TaskPKv+0x374>)
 8000b60:	f107 0310 	add.w	r3, r7, #16
 8000b64:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b68:	6018      	str	r0, [r3, #0]
 8000b6a:	3304      	adds	r3, #4
 8000b6c:	8019      	strh	r1, [r3, #0]
	uint8_t cmdRead_Refresh[6] = { 0x00 };// 0x06 0x16 0x01 0x00 0x00 0x1D
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60bb      	str	r3, [r7, #8]
 8000b72:	2300      	movs	r3, #0
 8000b74:	81bb      	strh	r3, [r7, #12]


	HAL_GPIO_WritePin(A0_GPIO_Port, A0_Pin, GPIO_PIN_RESET);
 8000b76:	2200      	movs	r2, #0
 8000b78:	2102      	movs	r1, #2
 8000b7a:	48b3      	ldr	r0, [pc, #716]	; (8000e48 <_Z8i2c_TaskPKv+0x378>)
 8000b7c:	f001 fb5a 	bl	8002234 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, GPIO_PIN_RESET);
 8000b80:	2200      	movs	r2, #0
 8000b82:	2101      	movs	r1, #1
 8000b84:	48b0      	ldr	r0, [pc, #704]	; (8000e48 <_Z8i2c_TaskPKv+0x378>)
 8000b86:	f001 fb55 	bl	8002234 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, GPIO_PIN_RESET);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2104      	movs	r1, #4
 8000b8e:	48ae      	ldr	r0, [pc, #696]	; (8000e48 <_Z8i2c_TaskPKv+0x378>)
 8000b90:	f001 fb50 	bl	8002234 <HAL_GPIO_WritePin>


	plug = HAL_GPIO_ReadPin(PLUG_GPIO_Port, PLUG_Pin);
 8000b94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b98:	48ac      	ldr	r0, [pc, #688]	; (8000e4c <_Z8i2c_TaskPKv+0x37c>)
 8000b9a:	f001 fb33 	bl	8002204 <HAL_GPIO_ReadPin>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59

  /* Infinite loop */
  for(;;)
  {

	  if (start && plug) {
 8000ba4:	4baa      	ldr	r3, [pc, #680]	; (8000e50 <_Z8i2c_TaskPKv+0x380>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d0fb      	beq.n	8000ba4 <_Z8i2c_TaskPKv+0xd4>
 8000bac:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d0f7      	beq.n	8000ba4 <_Z8i2c_TaskPKv+0xd4>
					status_i2c = HAL_I2C_Master_Transmit(&hi2c1, addr, cmdStart_1, 6, 20);
 8000bb4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000bb8:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000bbc:	2314      	movs	r3, #20
 8000bbe:	9300      	str	r3, [sp, #0]
 8000bc0:	2306      	movs	r3, #6
 8000bc2:	48a4      	ldr	r0, [pc, #656]	; (8000e54 <_Z8i2c_TaskPKv+0x384>)
 8000bc4:	f001 fc94 	bl	80024f0 <HAL_I2C_Master_Transmit>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	461a      	mov	r2, r3
 8000bcc:	4ba2      	ldr	r3, [pc, #648]	; (8000e58 <_Z8i2c_TaskPKv+0x388>)
 8000bce:	701a      	strb	r2, [r3, #0]
					osDelay(200);
 8000bd0:	20c8      	movs	r0, #200	; 0xc8
 8000bd2:	f006 f968 	bl	8006ea6 <osDelay>
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_1[0], 1, 20);
 8000bd6:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8000bda:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000bde:	2314      	movs	r3, #20
 8000be0:	9300      	str	r3, [sp, #0]
 8000be2:	2301      	movs	r3, #1
 8000be4:	489b      	ldr	r0, [pc, #620]	; (8000e54 <_Z8i2c_TaskPKv+0x384>)
 8000be6:	f001 fd81 	bl	80026ec <HAL_I2C_Master_Receive>
 8000bea:	4603      	mov	r3, r0
 8000bec:	461a      	mov	r2, r3
 8000bee:	4b9a      	ldr	r3, [pc, #616]	; (8000e58 <_Z8i2c_TaskPKv+0x388>)
 8000bf0:	701a      	strb	r2, [r3, #0]
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_1[1], 1, 20);
 8000bf2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000bf6:	1c5a      	adds	r2, r3, #1
 8000bf8:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000bfc:	2314      	movs	r3, #20
 8000bfe:	9300      	str	r3, [sp, #0]
 8000c00:	2301      	movs	r3, #1
 8000c02:	4894      	ldr	r0, [pc, #592]	; (8000e54 <_Z8i2c_TaskPKv+0x384>)
 8000c04:	f001 fd72 	bl	80026ec <HAL_I2C_Master_Receive>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	4b92      	ldr	r3, [pc, #584]	; (8000e58 <_Z8i2c_TaskPKv+0x388>)
 8000c0e:	701a      	strb	r2, [r3, #0]
					osDelay(300);
 8000c10:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000c14:	f006 f947 	bl	8006ea6 <osDelay>

					status_i2c = HAL_I2C_Master_Transmit(&hi2c1, addr, cmdStart_2, 6, 20);
 8000c18:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000c1c:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000c20:	2314      	movs	r3, #20
 8000c22:	9300      	str	r3, [sp, #0]
 8000c24:	2306      	movs	r3, #6
 8000c26:	488b      	ldr	r0, [pc, #556]	; (8000e54 <_Z8i2c_TaskPKv+0x384>)
 8000c28:	f001 fc62 	bl	80024f0 <HAL_I2C_Master_Transmit>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	461a      	mov	r2, r3
 8000c30:	4b89      	ldr	r3, [pc, #548]	; (8000e58 <_Z8i2c_TaskPKv+0x388>)
 8000c32:	701a      	strb	r2, [r3, #0]
					osDelay(200);
 8000c34:	20c8      	movs	r0, #200	; 0xc8
 8000c36:	f006 f936 	bl	8006ea6 <osDelay>
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_2[0], 1, 20);
 8000c3a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000c3e:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000c42:	2314      	movs	r3, #20
 8000c44:	9300      	str	r3, [sp, #0]
 8000c46:	2301      	movs	r3, #1
 8000c48:	4882      	ldr	r0, [pc, #520]	; (8000e54 <_Z8i2c_TaskPKv+0x384>)
 8000c4a:	f001 fd4f 	bl	80026ec <HAL_I2C_Master_Receive>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	461a      	mov	r2, r3
 8000c52:	4b81      	ldr	r3, [pc, #516]	; (8000e58 <_Z8i2c_TaskPKv+0x388>)
 8000c54:	701a      	strb	r2, [r3, #0]
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_2[1], 1, 20);
 8000c56:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c5a:	1c5a      	adds	r2, r3, #1
 8000c5c:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000c60:	2314      	movs	r3, #20
 8000c62:	9300      	str	r3, [sp, #0]
 8000c64:	2301      	movs	r3, #1
 8000c66:	487b      	ldr	r0, [pc, #492]	; (8000e54 <_Z8i2c_TaskPKv+0x384>)
 8000c68:	f001 fd40 	bl	80026ec <HAL_I2C_Master_Receive>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	461a      	mov	r2, r3
 8000c70:	4b79      	ldr	r3, [pc, #484]	; (8000e58 <_Z8i2c_TaskPKv+0x388>)
 8000c72:	701a      	strb	r2, [r3, #0]
					osDelay(1000);
 8000c74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c78:	f006 f915 	bl	8006ea6 <osDelay>

					status_i2c = HAL_I2C_Master_Transmit(&hi2c1, addr, cmdStart_3, 9, 20);
 8000c7c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000c80:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000c84:	2314      	movs	r3, #20
 8000c86:	9300      	str	r3, [sp, #0]
 8000c88:	2309      	movs	r3, #9
 8000c8a:	4872      	ldr	r0, [pc, #456]	; (8000e54 <_Z8i2c_TaskPKv+0x384>)
 8000c8c:	f001 fc30 	bl	80024f0 <HAL_I2C_Master_Transmit>
 8000c90:	4603      	mov	r3, r0
 8000c92:	461a      	mov	r2, r3
 8000c94:	4b70      	ldr	r3, [pc, #448]	; (8000e58 <_Z8i2c_TaskPKv+0x388>)
 8000c96:	701a      	strb	r2, [r3, #0]
					osDelay(100);
 8000c98:	2064      	movs	r0, #100	; 0x64
 8000c9a:	f006 f904 	bl	8006ea6 <osDelay>
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_3[0], 1, 20);
 8000c9e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000ca2:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000ca6:	2314      	movs	r3, #20
 8000ca8:	9300      	str	r3, [sp, #0]
 8000caa:	2301      	movs	r3, #1
 8000cac:	4869      	ldr	r0, [pc, #420]	; (8000e54 <_Z8i2c_TaskPKv+0x384>)
 8000cae:	f001 fd1d 	bl	80026ec <HAL_I2C_Master_Receive>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	4b68      	ldr	r3, [pc, #416]	; (8000e58 <_Z8i2c_TaskPKv+0x388>)
 8000cb8:	701a      	strb	r2, [r3, #0]
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_3[1], 1, 20);
 8000cba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cbe:	1c5a      	adds	r2, r3, #1
 8000cc0:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000cc4:	2314      	movs	r3, #20
 8000cc6:	9300      	str	r3, [sp, #0]
 8000cc8:	2301      	movs	r3, #1
 8000cca:	4862      	ldr	r0, [pc, #392]	; (8000e54 <_Z8i2c_TaskPKv+0x384>)
 8000ccc:	f001 fd0e 	bl	80026ec <HAL_I2C_Master_Receive>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	4b60      	ldr	r3, [pc, #384]	; (8000e58 <_Z8i2c_TaskPKv+0x388>)
 8000cd6:	701a      	strb	r2, [r3, #0]
					osDelay(1000);
 8000cd8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cdc:	f006 f8e3 	bl	8006ea6 <osDelay>

					status_i2c = HAL_I2C_Master_Transmit(&hi2c1, addr, cmdStart_4, 7, 20);
 8000ce0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000ce4:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000ce8:	2314      	movs	r3, #20
 8000cea:	9300      	str	r3, [sp, #0]
 8000cec:	2307      	movs	r3, #7
 8000cee:	4859      	ldr	r0, [pc, #356]	; (8000e54 <_Z8i2c_TaskPKv+0x384>)
 8000cf0:	f001 fbfe 	bl	80024f0 <HAL_I2C_Master_Transmit>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	4b57      	ldr	r3, [pc, #348]	; (8000e58 <_Z8i2c_TaskPKv+0x388>)
 8000cfa:	701a      	strb	r2, [r3, #0]
					osDelay(710);
 8000cfc:	f240 20c6 	movw	r0, #710	; 0x2c6
 8000d00:	f006 f8d1 	bl	8006ea6 <osDelay>
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_4[0], 1, 20);
 8000d04:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000d08:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000d0c:	2314      	movs	r3, #20
 8000d0e:	9300      	str	r3, [sp, #0]
 8000d10:	2301      	movs	r3, #1
 8000d12:	4850      	ldr	r0, [pc, #320]	; (8000e54 <_Z8i2c_TaskPKv+0x384>)
 8000d14:	f001 fcea 	bl	80026ec <HAL_I2C_Master_Receive>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	4b4e      	ldr	r3, [pc, #312]	; (8000e58 <_Z8i2c_TaskPKv+0x388>)
 8000d1e:	701a      	strb	r2, [r3, #0]
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_4[1], 1, 20);
 8000d20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d24:	1c5a      	adds	r2, r3, #1
 8000d26:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000d2a:	2314      	movs	r3, #20
 8000d2c:	9300      	str	r3, [sp, #0]
 8000d2e:	2301      	movs	r3, #1
 8000d30:	4848      	ldr	r0, [pc, #288]	; (8000e54 <_Z8i2c_TaskPKv+0x384>)
 8000d32:	f001 fcdb 	bl	80026ec <HAL_I2C_Master_Receive>
 8000d36:	4603      	mov	r3, r0
 8000d38:	461a      	mov	r2, r3
 8000d3a:	4b47      	ldr	r3, [pc, #284]	; (8000e58 <_Z8i2c_TaskPKv+0x388>)
 8000d3c:	701a      	strb	r2, [r3, #0]


					osDelay(1000);
 8000d3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d42:	f006 f8b0 	bl	8006ea6 <osDelay>
					//выдать флаг готовности питания
					ready = 1;
 8000d46:	4b45      	ldr	r3, [pc, #276]	; (8000e5c <_Z8i2c_TaskPKv+0x38c>)
 8000d48:	2201      	movs	r2, #1
 8000d4a:	701a      	strb	r2, [r3, #0]

					osDelay(3000);
 8000d4c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000d50:	f006 f8a9 	bl	8006ea6 <osDelay>
					//обновляем пик
					status_i2c = HAL_I2C_Master_Transmit(&hi2c1, addr, cmdRefresh, 6, 20);
 8000d54:	f107 0210 	add.w	r2, r7, #16
 8000d58:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000d5c:	2314      	movs	r3, #20
 8000d5e:	9300      	str	r3, [sp, #0]
 8000d60:	2306      	movs	r3, #6
 8000d62:	483c      	ldr	r0, [pc, #240]	; (8000e54 <_Z8i2c_TaskPKv+0x384>)
 8000d64:	f001 fbc4 	bl	80024f0 <HAL_I2C_Master_Transmit>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	4b3a      	ldr	r3, [pc, #232]	; (8000e58 <_Z8i2c_TaskPKv+0x388>)
 8000d6e:	701a      	strb	r2, [r3, #0]
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, cmdRead_Refresh, 6, 20);
 8000d70:	f107 0208 	add.w	r2, r7, #8
 8000d74:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000d78:	2314      	movs	r3, #20
 8000d7a:	9300      	str	r3, [sp, #0]
 8000d7c:	2306      	movs	r3, #6
 8000d7e:	4835      	ldr	r0, [pc, #212]	; (8000e54 <_Z8i2c_TaskPKv+0x384>)
 8000d80:	f001 fcb4 	bl	80026ec <HAL_I2C_Master_Receive>
 8000d84:	4603      	mov	r3, r0
 8000d86:	461a      	mov	r2, r3
 8000d88:	4b33      	ldr	r3, [pc, #204]	; (8000e58 <_Z8i2c_TaskPKv+0x388>)
 8000d8a:	701a      	strb	r2, [r3, #0]

					// запустить цикл обновления до остановки пользователем
					while(start){
 8000d8c:	4b30      	ldr	r3, [pc, #192]	; (8000e50 <_Z8i2c_TaskPKv+0x380>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	f000 809c 	beq.w	8000ece <_Z8i2c_TaskPKv+0x3fe>
							//обновляем пик
							status_i2c = HAL_I2C_Master_Transmit(&hi2c1, addr, cmdRefresh, 6, 20);
 8000d96:	f107 0210 	add.w	r2, r7, #16
 8000d9a:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000d9e:	2314      	movs	r3, #20
 8000da0:	9300      	str	r3, [sp, #0]
 8000da2:	2306      	movs	r3, #6
 8000da4:	482b      	ldr	r0, [pc, #172]	; (8000e54 <_Z8i2c_TaskPKv+0x384>)
 8000da6:	f001 fba3 	bl	80024f0 <HAL_I2C_Master_Transmit>
 8000daa:	4603      	mov	r3, r0
 8000dac:	461a      	mov	r2, r3
 8000dae:	4b2a      	ldr	r3, [pc, #168]	; (8000e58 <_Z8i2c_TaskPKv+0x388>)
 8000db0:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 8000db2:	200a      	movs	r0, #10
 8000db4:	f006 f877 	bl	8006ea6 <osDelay>
							status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_Refresh[0], 1, 20);
 8000db8:	f107 0208 	add.w	r2, r7, #8
 8000dbc:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000dc0:	2314      	movs	r3, #20
 8000dc2:	9300      	str	r3, [sp, #0]
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	4823      	ldr	r0, [pc, #140]	; (8000e54 <_Z8i2c_TaskPKv+0x384>)
 8000dc8:	f001 fc90 	bl	80026ec <HAL_I2C_Master_Receive>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	461a      	mov	r2, r3
 8000dd0:	4b21      	ldr	r3, [pc, #132]	; (8000e58 <_Z8i2c_TaskPKv+0x388>)
 8000dd2:	701a      	strb	r2, [r3, #0]
							status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_Refresh[1], 1, 20);
 8000dd4:	f107 0308 	add.w	r3, r7, #8
 8000dd8:	1c5a      	adds	r2, r3, #1
 8000dda:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000dde:	2314      	movs	r3, #20
 8000de0:	9300      	str	r3, [sp, #0]
 8000de2:	2301      	movs	r3, #1
 8000de4:	481b      	ldr	r0, [pc, #108]	; (8000e54 <_Z8i2c_TaskPKv+0x384>)
 8000de6:	f001 fc81 	bl	80026ec <HAL_I2C_Master_Receive>
 8000dea:	4603      	mov	r3, r0
 8000dec:	461a      	mov	r2, r3
 8000dee:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <_Z8i2c_TaskPKv+0x388>)
 8000df0:	701a      	strb	r2, [r3, #0]
							status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_Refresh[2], 1, 20);
 8000df2:	f107 0308 	add.w	r3, r7, #8
 8000df6:	1c9a      	adds	r2, r3, #2
 8000df8:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000dfc:	2314      	movs	r3, #20
 8000dfe:	9300      	str	r3, [sp, #0]
 8000e00:	2301      	movs	r3, #1
 8000e02:	4814      	ldr	r0, [pc, #80]	; (8000e54 <_Z8i2c_TaskPKv+0x384>)
 8000e04:	f001 fc72 	bl	80026ec <HAL_I2C_Master_Receive>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <_Z8i2c_TaskPKv+0x388>)
 8000e0e:	701a      	strb	r2, [r3, #0]
							status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_Refresh[3], 1, 20);
 8000e10:	f107 0308 	add.w	r3, r7, #8
 8000e14:	1cda      	adds	r2, r3, #3
 8000e16:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000e1a:	2314      	movs	r3, #20
 8000e1c:	9300      	str	r3, [sp, #0]
 8000e1e:	2301      	movs	r3, #1
 8000e20:	480c      	ldr	r0, [pc, #48]	; (8000e54 <_Z8i2c_TaskPKv+0x384>)
 8000e22:	f001 fc63 	bl	80026ec <HAL_I2C_Master_Receive>
 8000e26:	4603      	mov	r3, r0
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4b0b      	ldr	r3, [pc, #44]	; (8000e58 <_Z8i2c_TaskPKv+0x388>)
 8000e2c:	701a      	strb	r2, [r3, #0]
 8000e2e:	e017      	b.n	8000e60 <_Z8i2c_TaskPKv+0x390>
 8000e30:	080085f8 	.word	0x080085f8
 8000e34:	08008600 	.word	0x08008600
 8000e38:	08008608 	.word	0x08008608
 8000e3c:	08008614 	.word	0x08008614
 8000e40:	0800861c 	.word	0x0800861c
 8000e44:	08008624 	.word	0x08008624
 8000e48:	40020c00 	.word	0x40020c00
 8000e4c:	40020800 	.word	0x40020800
 8000e50:	200002c0 	.word	0x200002c0
 8000e54:	20004740 	.word	0x20004740
 8000e58:	20000098 	.word	0x20000098
 8000e5c:	200002c1 	.word	0x200002c1
							status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_Refresh[4], 1, 20);
 8000e60:	f107 0308 	add.w	r3, r7, #8
 8000e64:	1d1a      	adds	r2, r3, #4
 8000e66:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000e6a:	2314      	movs	r3, #20
 8000e6c:	9300      	str	r3, [sp, #0]
 8000e6e:	2301      	movs	r3, #1
 8000e70:	4830      	ldr	r0, [pc, #192]	; (8000f34 <_Z8i2c_TaskPKv+0x464>)
 8000e72:	f001 fc3b 	bl	80026ec <HAL_I2C_Master_Receive>
 8000e76:	4603      	mov	r3, r0
 8000e78:	461a      	mov	r2, r3
 8000e7a:	4b2f      	ldr	r3, [pc, #188]	; (8000f38 <_Z8i2c_TaskPKv+0x468>)
 8000e7c:	701a      	strb	r2, [r3, #0]
							status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_Refresh[5], 1, 20);
 8000e7e:	f107 0308 	add.w	r3, r7, #8
 8000e82:	1d5a      	adds	r2, r3, #5
 8000e84:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000e88:	2314      	movs	r3, #20
 8000e8a:	9300      	str	r3, [sp, #0]
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	4829      	ldr	r0, [pc, #164]	; (8000f34 <_Z8i2c_TaskPKv+0x464>)
 8000e90:	f001 fc2c 	bl	80026ec <HAL_I2C_Master_Receive>
 8000e94:	4603      	mov	r3, r0
 8000e96:	461a      	mov	r2, r3
 8000e98:	4b27      	ldr	r3, [pc, #156]	; (8000f38 <_Z8i2c_TaskPKv+0x468>)
 8000e9a:	701a      	strb	r2, [r3, #0]

							for (int var = 0; var < 10000; ++var) {
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000ea0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ea2:	f242 720f 	movw	r2, #9999	; 0x270f
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	dc0b      	bgt.n	8000ec2 <_Z8i2c_TaskPKv+0x3f2>
								if(!start){
 8000eaa:	4b24      	ldr	r3, [pc, #144]	; (8000f3c <_Z8i2c_TaskPKv+0x46c>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d006      	beq.n	8000ec0 <_Z8i2c_TaskPKv+0x3f0>
									break;
								}
								osDelay(1);
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	f005 fff7 	bl	8006ea6 <osDelay>
							for (int var = 0; var < 10000; ++var) {
 8000eb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000eba:	3301      	adds	r3, #1
 8000ebc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000ebe:	e7ef      	b.n	8000ea0 <_Z8i2c_TaskPKv+0x3d0>
									break;
 8000ec0:	bf00      	nop
							}

							if(!start){
 8000ec2:	4b1e      	ldr	r3, [pc, #120]	; (8000f3c <_Z8i2c_TaskPKv+0x46c>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d000      	beq.n	8000ecc <_Z8i2c_TaskPKv+0x3fc>
					while(start){
 8000eca:	e75f      	b.n	8000d8c <_Z8i2c_TaskPKv+0x2bc>
									break;
 8000ecc:	bf00      	nop
							}

					}

					// выключение питания
					status_i2c = HAL_I2C_Master_Transmit(&hi2c1, addr, cmdStop, 7, 20);
 8000ece:	f107 021c 	add.w	r2, r7, #28
 8000ed2:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000ed6:	2314      	movs	r3, #20
 8000ed8:	9300      	str	r3, [sp, #0]
 8000eda:	2307      	movs	r3, #7
 8000edc:	4815      	ldr	r0, [pc, #84]	; (8000f34 <_Z8i2c_TaskPKv+0x464>)
 8000ede:	f001 fb07 	bl	80024f0 <HAL_I2C_Master_Transmit>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <_Z8i2c_TaskPKv+0x468>)
 8000ee8:	701a      	strb	r2, [r3, #0]
					osDelay(20);
 8000eea:	2014      	movs	r0, #20
 8000eec:	f005 ffdb 	bl	8006ea6 <osDelay>
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_stop[0], 1, 20);
 8000ef0:	f107 0218 	add.w	r2, r7, #24
 8000ef4:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000ef8:	2314      	movs	r3, #20
 8000efa:	9300      	str	r3, [sp, #0]
 8000efc:	2301      	movs	r3, #1
 8000efe:	480d      	ldr	r0, [pc, #52]	; (8000f34 <_Z8i2c_TaskPKv+0x464>)
 8000f00:	f001 fbf4 	bl	80026ec <HAL_I2C_Master_Receive>
 8000f04:	4603      	mov	r3, r0
 8000f06:	461a      	mov	r2, r3
 8000f08:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <_Z8i2c_TaskPKv+0x468>)
 8000f0a:	701a      	strb	r2, [r3, #0]
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_stop[1], 1, 20);
 8000f0c:	f107 0318 	add.w	r3, r7, #24
 8000f10:	1c5a      	adds	r2, r3, #1
 8000f12:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000f16:	2314      	movs	r3, #20
 8000f18:	9300      	str	r3, [sp, #0]
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	4805      	ldr	r0, [pc, #20]	; (8000f34 <_Z8i2c_TaskPKv+0x464>)
 8000f1e:	f001 fbe5 	bl	80026ec <HAL_I2C_Master_Receive>
 8000f22:	4603      	mov	r3, r0
 8000f24:	461a      	mov	r2, r3
 8000f26:	4b04      	ldr	r3, [pc, #16]	; (8000f38 <_Z8i2c_TaskPKv+0x468>)
 8000f28:	701a      	strb	r2, [r3, #0]
					//выдать флаг отключения питания
					ready = 0;
 8000f2a:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <_Z8i2c_TaskPKv+0x470>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	701a      	strb	r2, [r3, #0]
	  }

  }
 8000f30:	e638      	b.n	8000ba4 <_Z8i2c_TaskPKv+0xd4>
 8000f32:	bf00      	nop
 8000f34:	20004740 	.word	0x20004740
 8000f38:	20000098 	.word	0x20000098
 8000f3c:	200002c0 	.word	0x200002c0
 8000f40:	200002c1 	.word	0x200002c1

08000f44 <HAL_UART_RxCpltCallback>:
  /* USER CODE END i2c_Task */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]

	status_uart = HAL_UART_Receive_IT(&huart6, &readASIC[counter_bytes], 1);
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <HAL_UART_RxCpltCallback+0x3c>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a0c      	ldr	r2, [pc, #48]	; (8000f84 <HAL_UART_RxCpltCallback+0x40>)
 8000f52:	4413      	add	r3, r2
 8000f54:	2201      	movs	r2, #1
 8000f56:	4619      	mov	r1, r3
 8000f58:	480b      	ldr	r0, [pc, #44]	; (8000f88 <HAL_UART_RxCpltCallback+0x44>)
 8000f5a:	f004 ffae 	bl	8005eba <HAL_UART_Receive_IT>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	461a      	mov	r2, r3
 8000f62:	4b0a      	ldr	r3, [pc, #40]	; (8000f8c <HAL_UART_RxCpltCallback+0x48>)
 8000f64:	701a      	strb	r2, [r3, #0]
	counter_bytes++;
 8000f66:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <HAL_UART_RxCpltCallback+0x3c>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	4a04      	ldr	r2, [pc, #16]	; (8000f80 <HAL_UART_RxCpltCallback+0x3c>)
 8000f6e:	6013      	str	r3, [r2, #0]
	uartTIM = 0; //сбрасываем таймер до тех пор пока не придут все данные
 8000f70:	4b07      	ldr	r3, [pc, #28]	; (8000f90 <HAL_UART_RxCpltCallback+0x4c>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	200000a0 	.word	0x200000a0
 8000f84:	200000a4 	.word	0x200000a4
 8000f88:	20004820 	.word	0x20004820
 8000f8c:	20000099 	.word	0x20000099
 8000f90:	20000584 	.word	0x20000584

08000f94 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08a      	sub	sp, #40	; 0x28
 8000f98:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9a:	f107 0314 	add.w	r3, r7, #20
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	609a      	str	r2, [r3, #8]
 8000fa6:	60da      	str	r2, [r3, #12]
 8000fa8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
 8000fae:	4b4b      	ldr	r3, [pc, #300]	; (80010dc <MX_GPIO_Init+0x148>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a4a      	ldr	r2, [pc, #296]	; (80010dc <MX_GPIO_Init+0x148>)
 8000fb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b48      	ldr	r3, [pc, #288]	; (80010dc <MX_GPIO_Init+0x148>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fc2:	613b      	str	r3, [r7, #16]
 8000fc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	4b44      	ldr	r3, [pc, #272]	; (80010dc <MX_GPIO_Init+0x148>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	4a43      	ldr	r2, [pc, #268]	; (80010dc <MX_GPIO_Init+0x148>)
 8000fd0:	f043 0304 	orr.w	r3, r3, #4
 8000fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd6:	4b41      	ldr	r3, [pc, #260]	; (80010dc <MX_GPIO_Init+0x148>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	f003 0304 	and.w	r3, r3, #4
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	4b3d      	ldr	r3, [pc, #244]	; (80010dc <MX_GPIO_Init+0x148>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	4a3c      	ldr	r2, [pc, #240]	; (80010dc <MX_GPIO_Init+0x148>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff2:	4b3a      	ldr	r3, [pc, #232]	; (80010dc <MX_GPIO_Init+0x148>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	4b36      	ldr	r3, [pc, #216]	; (80010dc <MX_GPIO_Init+0x148>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	4a35      	ldr	r2, [pc, #212]	; (80010dc <MX_GPIO_Init+0x148>)
 8001008:	f043 0308 	orr.w	r3, r3, #8
 800100c:	6313      	str	r3, [r2, #48]	; 0x30
 800100e:	4b33      	ldr	r3, [pc, #204]	; (80010dc <MX_GPIO_Init+0x148>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	f003 0308 	and.w	r3, r3, #8
 8001016:	607b      	str	r3, [r7, #4]
 8001018:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	603b      	str	r3, [r7, #0]
 800101e:	4b2f      	ldr	r3, [pc, #188]	; (80010dc <MX_GPIO_Init+0x148>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	4a2e      	ldr	r2, [pc, #184]	; (80010dc <MX_GPIO_Init+0x148>)
 8001024:	f043 0302 	orr.w	r3, r3, #2
 8001028:	6313      	str	r3, [r2, #48]	; 0x30
 800102a:	4b2c      	ldr	r3, [pc, #176]	; (80010dc <MX_GPIO_Init+0x148>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	603b      	str	r3, [r7, #0]
 8001034:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_ASIC_GPIO_Port, RST_ASIC_Pin, GPIO_PIN_SET);
 8001036:	2201      	movs	r2, #1
 8001038:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800103c:	4828      	ldr	r0, [pc, #160]	; (80010e0 <MX_GPIO_Init+0x14c>)
 800103e:	f001 f8f9 	bl	8002234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, A1_Pin|A0_Pin|A2_Pin, GPIO_PIN_SET);
 8001042:	2201      	movs	r2, #1
 8001044:	2107      	movs	r1, #7
 8001046:	4827      	ldr	r0, [pc, #156]	; (80010e4 <MX_GPIO_Init+0x150>)
 8001048:	f001 f8f4 	bl	8002234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RST_ASIC_Pin;
 800104c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001050:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001052:	2301      	movs	r3, #1
 8001054:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105a:	2300      	movs	r3, #0
 800105c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RST_ASIC_GPIO_Port, &GPIO_InitStruct);
 800105e:	f107 0314 	add.w	r3, r7, #20
 8001062:	4619      	mov	r1, r3
 8001064:	481e      	ldr	r0, [pc, #120]	; (80010e0 <MX_GPIO_Init+0x14c>)
 8001066:	f000 ff31 	bl	8001ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800106a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800106e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001070:	2300      	movs	r3, #0
 8001072:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001074:	2301      	movs	r3, #1
 8001076:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	4619      	mov	r1, r3
 800107e:	4818      	ldr	r0, [pc, #96]	; (80010e0 <MX_GPIO_Init+0x14c>)
 8001080:	f000 ff24 	bl	8001ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8001084:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001088:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800108a:	2300      	movs	r3, #0
 800108c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800108e:	2301      	movs	r3, #1
 8001090:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001092:	f107 0314 	add.w	r3, r7, #20
 8001096:	4619      	mov	r1, r3
 8001098:	4813      	ldr	r0, [pc, #76]	; (80010e8 <MX_GPIO_Init+0x154>)
 800109a:	f000 ff17 	bl	8001ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PLUG_Pin;
 800109e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010a4:	2300      	movs	r3, #0
 80010a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PLUG_GPIO_Port, &GPIO_InitStruct);
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	4619      	mov	r1, r3
 80010b2:	480d      	ldr	r0, [pc, #52]	; (80010e8 <MX_GPIO_Init+0x154>)
 80010b4:	f000 ff0a 	bl	8001ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = A1_Pin|A0_Pin|A2_Pin;
 80010b8:	2307      	movs	r3, #7
 80010ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010bc:	2301      	movs	r3, #1
 80010be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c4:	2300      	movs	r3, #0
 80010c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	4619      	mov	r1, r3
 80010ce:	4805      	ldr	r0, [pc, #20]	; (80010e4 <MX_GPIO_Init+0x150>)
 80010d0:	f000 fefc 	bl	8001ecc <HAL_GPIO_Init>

}
 80010d4:	bf00      	nop
 80010d6:	3728      	adds	r7, #40	; 0x28
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40023800 	.word	0x40023800
 80010e0:	40020000 	.word	0x40020000
 80010e4:	40020c00 	.word	0x40020c00
 80010e8:	40020800 	.word	0x40020800

080010ec <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010f0:	4b13      	ldr	r3, [pc, #76]	; (8001140 <MX_I2C1_Init+0x54>)
 80010f2:	4a14      	ldr	r2, [pc, #80]	; (8001144 <MX_I2C1_Init+0x58>)
 80010f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 35000;
 80010f6:	4b12      	ldr	r3, [pc, #72]	; (8001140 <MX_I2C1_Init+0x54>)
 80010f8:	f648 02b8 	movw	r2, #35000	; 0x88b8
 80010fc:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010fe:	4b10      	ldr	r3, [pc, #64]	; (8001140 <MX_I2C1_Init+0x54>)
 8001100:	2200      	movs	r2, #0
 8001102:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001104:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <MX_I2C1_Init+0x54>)
 8001106:	2200      	movs	r2, #0
 8001108:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800110a:	4b0d      	ldr	r3, [pc, #52]	; (8001140 <MX_I2C1_Init+0x54>)
 800110c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001110:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001112:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <MX_I2C1_Init+0x54>)
 8001114:	2200      	movs	r2, #0
 8001116:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001118:	4b09      	ldr	r3, [pc, #36]	; (8001140 <MX_I2C1_Init+0x54>)
 800111a:	2200      	movs	r2, #0
 800111c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800111e:	4b08      	ldr	r3, [pc, #32]	; (8001140 <MX_I2C1_Init+0x54>)
 8001120:	2200      	movs	r2, #0
 8001122:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <MX_I2C1_Init+0x54>)
 8001126:	2200      	movs	r2, #0
 8001128:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800112a:	4805      	ldr	r0, [pc, #20]	; (8001140 <MX_I2C1_Init+0x54>)
 800112c:	f001 f89c 	bl	8002268 <HAL_I2C_Init>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8001136:	f000 f993 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20004740 	.word	0x20004740
 8001144:	40005400 	.word	0x40005400

08001148 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <MX_I2C3_Init+0x50>)
 800114e:	4a13      	ldr	r2, [pc, #76]	; (800119c <MX_I2C3_Init+0x54>)
 8001150:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8001152:	4b11      	ldr	r3, [pc, #68]	; (8001198 <MX_I2C3_Init+0x50>)
 8001154:	4a12      	ldr	r2, [pc, #72]	; (80011a0 <MX_I2C3_Init+0x58>)
 8001156:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001158:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <MX_I2C3_Init+0x50>)
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800115e:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <MX_I2C3_Init+0x50>)
 8001160:	2200      	movs	r2, #0
 8001162:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001164:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <MX_I2C3_Init+0x50>)
 8001166:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800116a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800116c:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <MX_I2C3_Init+0x50>)
 800116e:	2200      	movs	r2, #0
 8001170:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001172:	4b09      	ldr	r3, [pc, #36]	; (8001198 <MX_I2C3_Init+0x50>)
 8001174:	2200      	movs	r2, #0
 8001176:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001178:	4b07      	ldr	r3, [pc, #28]	; (8001198 <MX_I2C3_Init+0x50>)
 800117a:	2200      	movs	r2, #0
 800117c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800117e:	4b06      	ldr	r3, [pc, #24]	; (8001198 <MX_I2C3_Init+0x50>)
 8001180:	2200      	movs	r2, #0
 8001182:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001184:	4804      	ldr	r0, [pc, #16]	; (8001198 <MX_I2C3_Init+0x50>)
 8001186:	f001 f86f 	bl	8002268 <HAL_I2C_Init>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001190:	f000 f966 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}
 8001198:	200046ec 	.word	0x200046ec
 800119c:	40005c00 	.word	0x40005c00
 80011a0:	00061a80 	.word	0x00061a80

080011a4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08c      	sub	sp, #48	; 0x30
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	f107 031c 	add.w	r3, r7, #28
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a4a      	ldr	r2, [pc, #296]	; (80012ec <HAL_I2C_MspInit+0x148>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d12c      	bne.n	8001220 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	61bb      	str	r3, [r7, #24]
 80011ca:	4b49      	ldr	r3, [pc, #292]	; (80012f0 <HAL_I2C_MspInit+0x14c>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	4a48      	ldr	r2, [pc, #288]	; (80012f0 <HAL_I2C_MspInit+0x14c>)
 80011d0:	f043 0302 	orr.w	r3, r3, #2
 80011d4:	6313      	str	r3, [r2, #48]	; 0x30
 80011d6:	4b46      	ldr	r3, [pc, #280]	; (80012f0 <HAL_I2C_MspInit+0x14c>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	61bb      	str	r3, [r7, #24]
 80011e0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011e2:	23c0      	movs	r3, #192	; 0xc0
 80011e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011e6:	2312      	movs	r3, #18
 80011e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ee:	2303      	movs	r3, #3
 80011f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011f2:	2304      	movs	r3, #4
 80011f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f6:	f107 031c 	add.w	r3, r7, #28
 80011fa:	4619      	mov	r1, r3
 80011fc:	483d      	ldr	r0, [pc, #244]	; (80012f4 <HAL_I2C_MspInit+0x150>)
 80011fe:	f000 fe65 	bl	8001ecc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	617b      	str	r3, [r7, #20]
 8001206:	4b3a      	ldr	r3, [pc, #232]	; (80012f0 <HAL_I2C_MspInit+0x14c>)
 8001208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120a:	4a39      	ldr	r2, [pc, #228]	; (80012f0 <HAL_I2C_MspInit+0x14c>)
 800120c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001210:	6413      	str	r3, [r2, #64]	; 0x40
 8001212:	4b37      	ldr	r3, [pc, #220]	; (80012f0 <HAL_I2C_MspInit+0x14c>)
 8001214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001216:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800121a:	617b      	str	r3, [r7, #20]
 800121c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800121e:	e060      	b.n	80012e2 <HAL_I2C_MspInit+0x13e>
  else if(i2cHandle->Instance==I2C3)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a34      	ldr	r2, [pc, #208]	; (80012f8 <HAL_I2C_MspInit+0x154>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d15b      	bne.n	80012e2 <HAL_I2C_MspInit+0x13e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	613b      	str	r3, [r7, #16]
 800122e:	4b30      	ldr	r3, [pc, #192]	; (80012f0 <HAL_I2C_MspInit+0x14c>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	4a2f      	ldr	r2, [pc, #188]	; (80012f0 <HAL_I2C_MspInit+0x14c>)
 8001234:	f043 0304 	orr.w	r3, r3, #4
 8001238:	6313      	str	r3, [r2, #48]	; 0x30
 800123a:	4b2d      	ldr	r3, [pc, #180]	; (80012f0 <HAL_I2C_MspInit+0x14c>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	f003 0304 	and.w	r3, r3, #4
 8001242:	613b      	str	r3, [r7, #16]
 8001244:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	4b29      	ldr	r3, [pc, #164]	; (80012f0 <HAL_I2C_MspInit+0x14c>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	4a28      	ldr	r2, [pc, #160]	; (80012f0 <HAL_I2C_MspInit+0x14c>)
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	6313      	str	r3, [r2, #48]	; 0x30
 8001256:	4b26      	ldr	r3, [pc, #152]	; (80012f0 <HAL_I2C_MspInit+0x14c>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001262:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001266:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001268:	2312      	movs	r3, #18
 800126a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001270:	2303      	movs	r3, #3
 8001272:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001274:	2304      	movs	r3, #4
 8001276:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001278:	f107 031c 	add.w	r3, r7, #28
 800127c:	4619      	mov	r1, r3
 800127e:	481f      	ldr	r0, [pc, #124]	; (80012fc <HAL_I2C_MspInit+0x158>)
 8001280:	f000 fe24 	bl	8001ecc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001284:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001288:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800128a:	2312      	movs	r3, #18
 800128c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001292:	2303      	movs	r3, #3
 8001294:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001296:	2304      	movs	r3, #4
 8001298:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129a:	f107 031c 	add.w	r3, r7, #28
 800129e:	4619      	mov	r1, r3
 80012a0:	4817      	ldr	r0, [pc, #92]	; (8001300 <HAL_I2C_MspInit+0x15c>)
 80012a2:	f000 fe13 	bl	8001ecc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <HAL_I2C_MspInit+0x14c>)
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	4a10      	ldr	r2, [pc, #64]	; (80012f0 <HAL_I2C_MspInit+0x14c>)
 80012b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80012b4:	6413      	str	r3, [r2, #64]	; 0x40
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <HAL_I2C_MspInit+0x14c>)
 80012b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80012be:	60bb      	str	r3, [r7, #8]
 80012c0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 5, 0);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2105      	movs	r1, #5
 80012c6:	2048      	movs	r0, #72	; 0x48
 80012c8:	f000 fd2a 	bl	8001d20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80012cc:	2048      	movs	r0, #72	; 0x48
 80012ce:	f000 fd43 	bl	8001d58 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 5, 0);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2105      	movs	r1, #5
 80012d6:	2049      	movs	r0, #73	; 0x49
 80012d8:	f000 fd22 	bl	8001d20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 80012dc:	2049      	movs	r0, #73	; 0x49
 80012de:	f000 fd3b 	bl	8001d58 <HAL_NVIC_EnableIRQ>
}
 80012e2:	bf00      	nop
 80012e4:	3730      	adds	r7, #48	; 0x30
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40005400 	.word	0x40005400
 80012f0:	40023800 	.word	0x40023800
 80012f4:	40020400 	.word	0x40020400
 80012f8:	40005c00 	.word	0x40005c00
 80012fc:	40020800 	.word	0x40020800
 8001300:	40020000 	.word	0x40020000

08001304 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001308:	f000 fc10 	bl	8001b2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800130c:	f000 f810 	bl	8001330 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001310:	f7ff fe40 	bl	8000f94 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001314:	f7ff feea 	bl	80010ec <MX_I2C1_Init>
  MX_I2C3_Init();
 8001318:	f7ff ff16 	bl	8001148 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 800131c:	f000 fafa 	bl	8001914 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001320:	f000 fb22 	bl	8001968 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001324:	f7ff fa5e 	bl	80007e4 <_Z16MX_FREERTOS_Initv>
  /* Start scheduler */
  osKernelStart();
 8001328:	f005 fd6a 	bl	8006e00 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800132c:	e7fe      	b.n	800132c <main+0x28>
	...

08001330 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b094      	sub	sp, #80	; 0x50
 8001334:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001336:	f107 0320 	add.w	r3, r7, #32
 800133a:	2230      	movs	r2, #48	; 0x30
 800133c:	2100      	movs	r1, #0
 800133e:	4618      	mov	r0, r3
 8001340:	f006 fffc 	bl	800833c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001344:	f107 030c 	add.w	r3, r7, #12
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001354:	2300      	movs	r3, #0
 8001356:	60bb      	str	r3, [r7, #8]
 8001358:	4b2d      	ldr	r3, [pc, #180]	; (8001410 <_Z18SystemClock_Configv+0xe0>)
 800135a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135c:	4a2c      	ldr	r2, [pc, #176]	; (8001410 <_Z18SystemClock_Configv+0xe0>)
 800135e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001362:	6413      	str	r3, [r2, #64]	; 0x40
 8001364:	4b2a      	ldr	r3, [pc, #168]	; (8001410 <_Z18SystemClock_Configv+0xe0>)
 8001366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136c:	60bb      	str	r3, [r7, #8]
 800136e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001370:	2300      	movs	r3, #0
 8001372:	607b      	str	r3, [r7, #4]
 8001374:	4b27      	ldr	r3, [pc, #156]	; (8001414 <_Z18SystemClock_Configv+0xe4>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a26      	ldr	r2, [pc, #152]	; (8001414 <_Z18SystemClock_Configv+0xe4>)
 800137a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800137e:	6013      	str	r3, [r2, #0]
 8001380:	4b24      	ldr	r3, [pc, #144]	; (8001414 <_Z18SystemClock_Configv+0xe4>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001388:	607b      	str	r3, [r7, #4]
 800138a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800138c:	2302      	movs	r3, #2
 800138e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001390:	2301      	movs	r3, #1
 8001392:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001394:	2310      	movs	r3, #16
 8001396:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001398:	2302      	movs	r3, #2
 800139a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800139c:	2300      	movs	r3, #0
 800139e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013a0:	2308      	movs	r3, #8
 80013a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80013a4:	23a8      	movs	r3, #168	; 0xa8
 80013a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013a8:	2302      	movs	r3, #2
 80013aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013ac:	2304      	movs	r3, #4
 80013ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013b0:	f107 0320 	add.w	r3, r7, #32
 80013b4:	4618      	mov	r0, r3
 80013b6:	f003 fd4d 	bl	8004e54 <HAL_RCC_OscConfig>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	bf14      	ite	ne
 80013c0:	2301      	movne	r3, #1
 80013c2:	2300      	moveq	r3, #0
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 80013ca:	f000 f849 	bl	8001460 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ce:	230f      	movs	r3, #15
 80013d0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013d2:	2302      	movs	r3, #2
 80013d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013d6:	2300      	movs	r3, #0
 80013d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013da:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013e6:	f107 030c 	add.w	r3, r7, #12
 80013ea:	2105      	movs	r1, #5
 80013ec:	4618      	mov	r0, r3
 80013ee:	f003 ffa9 	bl	8005344 <HAL_RCC_ClockConfig>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	bf14      	ite	ne
 80013f8:	2301      	movne	r3, #1
 80013fa:	2300      	moveq	r3, #0
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 8001402:	f000 f82d 	bl	8001460 <Error_Handler>
  }
}
 8001406:	bf00      	nop
 8001408:	3750      	adds	r7, #80	; 0x50
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40023800 	.word	0x40023800
 8001414:	40007000 	.word	0x40007000

08001418 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	  if (htim->Instance == TIM7) {
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a0b      	ldr	r2, [pc, #44]	; (8001454 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d108      	bne.n	800143c <HAL_TIM_PeriodElapsedCallback+0x24>
	    if (status_uartTIM) {
 800142a:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d004      	beq.n	800143c <HAL_TIM_PeriodElapsedCallback+0x24>
	    	uartTIM++;
 8001432:	4b0a      	ldr	r3, [pc, #40]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	3301      	adds	r3, #1
 8001438:	4a08      	ldr	r2, [pc, #32]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x44>)
 800143a:	6013      	str	r3, [r2, #0]
		}

	  }

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a04      	ldr	r2, [pc, #16]	; (8001454 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d101      	bne.n	800144a <HAL_TIM_PeriodElapsedCallback+0x32>
    HAL_IncTick();
 8001446:	f000 fb93 	bl	8001b70 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40001400 	.word	0x40001400
 8001458:	20000588 	.word	0x20000588
 800145c:	20000584 	.word	0x20000584

08001460 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001464:	b672      	cpsid	i
}
 8001466:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001468:	e7fe      	b.n	8001468 <Error_Handler+0x8>
	...

0800146c <ssd1306_WriteCommand>:
void ssd1306_Reset(void) {
    /* for I2C - do nothing */
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af04      	add	r7, sp, #16
 8001472:	4603      	mov	r3, r0
 8001474:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001476:	f04f 33ff 	mov.w	r3, #4294967295
 800147a:	9302      	str	r3, [sp, #8]
 800147c:	2301      	movs	r3, #1
 800147e:	9301      	str	r3, [sp, #4]
 8001480:	1dfb      	adds	r3, r7, #7
 8001482:	9300      	str	r3, [sp, #0]
 8001484:	2301      	movs	r3, #1
 8001486:	2200      	movs	r2, #0
 8001488:	2178      	movs	r1, #120	; 0x78
 800148a:	4803      	ldr	r0, [pc, #12]	; (8001498 <ssd1306_WriteCommand+0x2c>)
 800148c:	f001 fb54 	bl	8002b38 <HAL_I2C_Mem_Write>
}
 8001490:	bf00      	nop
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	200046ec 	.word	0x200046ec

0800149c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af04      	add	r7, sp, #16
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	f04f 32ff 	mov.w	r2, #4294967295
 80014ae:	9202      	str	r2, [sp, #8]
 80014b0:	9301      	str	r3, [sp, #4]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	2301      	movs	r3, #1
 80014b8:	2240      	movs	r2, #64	; 0x40
 80014ba:	2178      	movs	r1, #120	; 0x78
 80014bc:	4803      	ldr	r0, [pc, #12]	; (80014cc <ssd1306_WriteData+0x30>)
 80014be:	f001 fb3b 	bl	8002b38 <HAL_I2C_Mem_Write>
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	200046ec 	.word	0x200046ec

080014d0 <ssd1306_UpdateScreen>:
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
    }
}

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80014d6:	2300      	movs	r3, #0
 80014d8:	71fb      	strb	r3, [r7, #7]
 80014da:	e016      	b.n	800150a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	3b50      	subs	r3, #80	; 0x50
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff ffc2 	bl	800146c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 80014e8:	2000      	movs	r0, #0
 80014ea:	f7ff ffbf 	bl	800146c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 80014ee:	2010      	movs	r0, #16
 80014f0:	f7ff ffbc 	bl	800146c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	01db      	lsls	r3, r3, #7
 80014f8:	4a08      	ldr	r2, [pc, #32]	; (800151c <ssd1306_UpdateScreen+0x4c>)
 80014fa:	4413      	add	r3, r2
 80014fc:	2180      	movs	r1, #128	; 0x80
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff ffcc 	bl	800149c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001504:	79fb      	ldrb	r3, [r7, #7]
 8001506:	3301      	adds	r3, #1
 8001508:	71fb      	strb	r3, [r7, #7]
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	2b07      	cmp	r3, #7
 800150e:	d9e5      	bls.n	80014dc <ssd1306_UpdateScreen+0xc>
    }
}
 8001510:	bf00      	nop
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	2000058c 	.word	0x2000058c

08001520 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	71fb      	strb	r3, [r7, #7]
 800152a:	460b      	mov	r3, r1
 800152c:	71bb      	strb	r3, [r7, #6]
 800152e:	4613      	mov	r3, r2
 8001530:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001536:	2b00      	cmp	r3, #0
 8001538:	db3d      	blt.n	80015b6 <ssd1306_DrawPixel+0x96>
 800153a:	79bb      	ldrb	r3, [r7, #6]
 800153c:	2b3f      	cmp	r3, #63	; 0x3f
 800153e:	d83a      	bhi.n	80015b6 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001540:	797b      	ldrb	r3, [r7, #5]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d11a      	bne.n	800157c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001546:	79fa      	ldrb	r2, [r7, #7]
 8001548:	79bb      	ldrb	r3, [r7, #6]
 800154a:	08db      	lsrs	r3, r3, #3
 800154c:	b2d8      	uxtb	r0, r3
 800154e:	4603      	mov	r3, r0
 8001550:	01db      	lsls	r3, r3, #7
 8001552:	4413      	add	r3, r2
 8001554:	4a1b      	ldr	r2, [pc, #108]	; (80015c4 <ssd1306_DrawPixel+0xa4>)
 8001556:	5cd3      	ldrb	r3, [r2, r3]
 8001558:	b25a      	sxtb	r2, r3
 800155a:	79bb      	ldrb	r3, [r7, #6]
 800155c:	f003 0307 	and.w	r3, r3, #7
 8001560:	2101      	movs	r1, #1
 8001562:	fa01 f303 	lsl.w	r3, r1, r3
 8001566:	b25b      	sxtb	r3, r3
 8001568:	4313      	orrs	r3, r2
 800156a:	b259      	sxtb	r1, r3
 800156c:	79fa      	ldrb	r2, [r7, #7]
 800156e:	4603      	mov	r3, r0
 8001570:	01db      	lsls	r3, r3, #7
 8001572:	4413      	add	r3, r2
 8001574:	b2c9      	uxtb	r1, r1
 8001576:	4a13      	ldr	r2, [pc, #76]	; (80015c4 <ssd1306_DrawPixel+0xa4>)
 8001578:	54d1      	strb	r1, [r2, r3]
 800157a:	e01d      	b.n	80015b8 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800157c:	79fa      	ldrb	r2, [r7, #7]
 800157e:	79bb      	ldrb	r3, [r7, #6]
 8001580:	08db      	lsrs	r3, r3, #3
 8001582:	b2d8      	uxtb	r0, r3
 8001584:	4603      	mov	r3, r0
 8001586:	01db      	lsls	r3, r3, #7
 8001588:	4413      	add	r3, r2
 800158a:	4a0e      	ldr	r2, [pc, #56]	; (80015c4 <ssd1306_DrawPixel+0xa4>)
 800158c:	5cd3      	ldrb	r3, [r2, r3]
 800158e:	b25a      	sxtb	r2, r3
 8001590:	79bb      	ldrb	r3, [r7, #6]
 8001592:	f003 0307 	and.w	r3, r3, #7
 8001596:	2101      	movs	r1, #1
 8001598:	fa01 f303 	lsl.w	r3, r1, r3
 800159c:	b25b      	sxtb	r3, r3
 800159e:	43db      	mvns	r3, r3
 80015a0:	b25b      	sxtb	r3, r3
 80015a2:	4013      	ands	r3, r2
 80015a4:	b259      	sxtb	r1, r3
 80015a6:	79fa      	ldrb	r2, [r7, #7]
 80015a8:	4603      	mov	r3, r0
 80015aa:	01db      	lsls	r3, r3, #7
 80015ac:	4413      	add	r3, r2
 80015ae:	b2c9      	uxtb	r1, r1
 80015b0:	4a04      	ldr	r2, [pc, #16]	; (80015c4 <ssd1306_DrawPixel+0xa4>)
 80015b2:	54d1      	strb	r1, [r2, r3]
 80015b4:	e000      	b.n	80015b8 <ssd1306_DrawPixel+0x98>
        return;
 80015b6:	bf00      	nop
    }
}
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	2000058c 	.word	0x2000058c

080015c8 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80015c8:	b590      	push	{r4, r7, lr}
 80015ca:	b089      	sub	sp, #36	; 0x24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4604      	mov	r4, r0
 80015d0:	1d38      	adds	r0, r7, #4
 80015d2:	e880 0006 	stmia.w	r0, {r1, r2}
 80015d6:	461a      	mov	r2, r3
 80015d8:	4623      	mov	r3, r4
 80015da:	73fb      	strb	r3, [r7, #15]
 80015dc:	4613      	mov	r3, r2
 80015de:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80015e0:	7bfb      	ldrb	r3, [r7, #15]
 80015e2:	2b1f      	cmp	r3, #31
 80015e4:	d902      	bls.n	80015ec <ssd1306_WriteChar+0x24>
 80015e6:	7bfb      	ldrb	r3, [r7, #15]
 80015e8:	2b7e      	cmp	r3, #126	; 0x7e
 80015ea:	d901      	bls.n	80015f0 <ssd1306_WriteChar+0x28>
        return 0;
 80015ec:	2300      	movs	r3, #0
 80015ee:	e06d      	b.n	80016cc <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80015f0:	4b38      	ldr	r3, [pc, #224]	; (80016d4 <ssd1306_WriteChar+0x10c>)
 80015f2:	881b      	ldrh	r3, [r3, #0]
 80015f4:	461a      	mov	r2, r3
 80015f6:	793b      	ldrb	r3, [r7, #4]
 80015f8:	4413      	add	r3, r2
 80015fa:	2b80      	cmp	r3, #128	; 0x80
 80015fc:	dc06      	bgt.n	800160c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80015fe:	4b35      	ldr	r3, [pc, #212]	; (80016d4 <ssd1306_WriteChar+0x10c>)
 8001600:	885b      	ldrh	r3, [r3, #2]
 8001602:	461a      	mov	r2, r3
 8001604:	797b      	ldrb	r3, [r7, #5]
 8001606:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001608:	2b40      	cmp	r3, #64	; 0x40
 800160a:	dd01      	ble.n	8001610 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 800160c:	2300      	movs	r3, #0
 800160e:	e05d      	b.n	80016cc <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001610:	2300      	movs	r3, #0
 8001612:	61fb      	str	r3, [r7, #28]
 8001614:	e04c      	b.n	80016b0 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001616:	68ba      	ldr	r2, [r7, #8]
 8001618:	7bfb      	ldrb	r3, [r7, #15]
 800161a:	3b20      	subs	r3, #32
 800161c:	7979      	ldrb	r1, [r7, #5]
 800161e:	fb01 f303 	mul.w	r3, r1, r3
 8001622:	4619      	mov	r1, r3
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	440b      	add	r3, r1
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	4413      	add	r3, r2
 800162c:	881b      	ldrh	r3, [r3, #0]
 800162e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001630:	2300      	movs	r3, #0
 8001632:	61bb      	str	r3, [r7, #24]
 8001634:	e034      	b.n	80016a0 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001636:	697a      	ldr	r2, [r7, #20]
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d012      	beq.n	800166c <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001646:	4b23      	ldr	r3, [pc, #140]	; (80016d4 <ssd1306_WriteChar+0x10c>)
 8001648:	881b      	ldrh	r3, [r3, #0]
 800164a:	b2da      	uxtb	r2, r3
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	b2db      	uxtb	r3, r3
 8001650:	4413      	add	r3, r2
 8001652:	b2d8      	uxtb	r0, r3
 8001654:	4b1f      	ldr	r3, [pc, #124]	; (80016d4 <ssd1306_WriteChar+0x10c>)
 8001656:	885b      	ldrh	r3, [r3, #2]
 8001658:	b2da      	uxtb	r2, r3
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	b2db      	uxtb	r3, r3
 800165e:	4413      	add	r3, r2
 8001660:	b2db      	uxtb	r3, r3
 8001662:	7bba      	ldrb	r2, [r7, #14]
 8001664:	4619      	mov	r1, r3
 8001666:	f7ff ff5b 	bl	8001520 <ssd1306_DrawPixel>
 800166a:	e016      	b.n	800169a <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800166c:	4b19      	ldr	r3, [pc, #100]	; (80016d4 <ssd1306_WriteChar+0x10c>)
 800166e:	881b      	ldrh	r3, [r3, #0]
 8001670:	b2da      	uxtb	r2, r3
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	b2db      	uxtb	r3, r3
 8001676:	4413      	add	r3, r2
 8001678:	b2d8      	uxtb	r0, r3
 800167a:	4b16      	ldr	r3, [pc, #88]	; (80016d4 <ssd1306_WriteChar+0x10c>)
 800167c:	885b      	ldrh	r3, [r3, #2]
 800167e:	b2da      	uxtb	r2, r3
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	b2db      	uxtb	r3, r3
 8001684:	4413      	add	r3, r2
 8001686:	b2d9      	uxtb	r1, r3
 8001688:	7bbb      	ldrb	r3, [r7, #14]
 800168a:	2b00      	cmp	r3, #0
 800168c:	bf0c      	ite	eq
 800168e:	2301      	moveq	r3, #1
 8001690:	2300      	movne	r3, #0
 8001692:	b2db      	uxtb	r3, r3
 8001694:	461a      	mov	r2, r3
 8001696:	f7ff ff43 	bl	8001520 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	3301      	adds	r3, #1
 800169e:	61bb      	str	r3, [r7, #24]
 80016a0:	793b      	ldrb	r3, [r7, #4]
 80016a2:	461a      	mov	r2, r3
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d3c5      	bcc.n	8001636 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	3301      	adds	r3, #1
 80016ae:	61fb      	str	r3, [r7, #28]
 80016b0:	797b      	ldrb	r3, [r7, #5]
 80016b2:	461a      	mov	r2, r3
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d3ad      	bcc.n	8001616 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80016ba:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <ssd1306_WriteChar+0x10c>)
 80016bc:	881a      	ldrh	r2, [r3, #0]
 80016be:	793b      	ldrb	r3, [r7, #4]
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	4413      	add	r3, r2
 80016c4:	b29a      	uxth	r2, r3
 80016c6:	4b03      	ldr	r3, [pc, #12]	; (80016d4 <ssd1306_WriteChar+0x10c>)
 80016c8:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3724      	adds	r7, #36	; 0x24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd90      	pop	{r4, r7, pc}
 80016d4:	2000098c 	.word	0x2000098c

080016d8 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	1d38      	adds	r0, r7, #4
 80016e2:	e880 0006 	stmia.w	r0, {r1, r2}
 80016e6:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 80016e8:	e012      	b.n	8001710 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	7818      	ldrb	r0, [r3, #0]
 80016ee:	78fb      	ldrb	r3, [r7, #3]
 80016f0:	1d3a      	adds	r2, r7, #4
 80016f2:	ca06      	ldmia	r2, {r1, r2}
 80016f4:	f7ff ff68 	bl	80015c8 <ssd1306_WriteChar>
 80016f8:	4603      	mov	r3, r0
 80016fa:	461a      	mov	r2, r3
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	429a      	cmp	r2, r3
 8001702:	d002      	beq.n	800170a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	e008      	b.n	800171c <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	3301      	adds	r3, #1
 800170e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d1e8      	bne.n	80016ea <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	781b      	ldrb	r3, [r3, #0]
}
 800171c:	4618      	mov	r0, r3
 800171e:	3710      	adds	r7, #16
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	460a      	mov	r2, r1
 800172e:	71fb      	strb	r3, [r7, #7]
 8001730:	4613      	mov	r3, r2
 8001732:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	b29a      	uxth	r2, r3
 8001738:	4b05      	ldr	r3, [pc, #20]	; (8001750 <ssd1306_SetCursor+0x2c>)
 800173a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800173c:	79bb      	ldrb	r3, [r7, #6]
 800173e:	b29a      	uxth	r2, r3
 8001740:	4b03      	ldr	r3, [pc, #12]	; (8001750 <ssd1306_SetCursor+0x2c>)
 8001742:	805a      	strh	r2, [r3, #2]
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	2000098c 	.word	0x2000098c

08001754 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	607b      	str	r3, [r7, #4]
 800175e:	4b12      	ldr	r3, [pc, #72]	; (80017a8 <HAL_MspInit+0x54>)
 8001760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001762:	4a11      	ldr	r2, [pc, #68]	; (80017a8 <HAL_MspInit+0x54>)
 8001764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001768:	6453      	str	r3, [r2, #68]	; 0x44
 800176a:	4b0f      	ldr	r3, [pc, #60]	; (80017a8 <HAL_MspInit+0x54>)
 800176c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001772:	607b      	str	r3, [r7, #4]
 8001774:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	603b      	str	r3, [r7, #0]
 800177a:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <HAL_MspInit+0x54>)
 800177c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177e:	4a0a      	ldr	r2, [pc, #40]	; (80017a8 <HAL_MspInit+0x54>)
 8001780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001784:	6413      	str	r3, [r2, #64]	; 0x40
 8001786:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <HAL_MspInit+0x54>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178e:	603b      	str	r3, [r7, #0]
 8001790:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001792:	2200      	movs	r2, #0
 8001794:	210f      	movs	r1, #15
 8001796:	f06f 0001 	mvn.w	r0, #1
 800179a:	f000 fac1 	bl	8001d20 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40023800 	.word	0x40023800

080017ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b08c      	sub	sp, #48	; 0x30
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80017b4:	2300      	movs	r3, #0
 80017b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80017b8:	2300      	movs	r3, #0
 80017ba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 80017bc:	2200      	movs	r2, #0
 80017be:	6879      	ldr	r1, [r7, #4]
 80017c0:	2037      	movs	r0, #55	; 0x37
 80017c2:	f000 faad 	bl	8001d20 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80017c6:	2037      	movs	r0, #55	; 0x37
 80017c8:	f000 fac6 	bl	8001d58 <HAL_NVIC_EnableIRQ>

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80017cc:	2300      	movs	r3, #0
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	4b1f      	ldr	r3, [pc, #124]	; (8001850 <HAL_InitTick+0xa4>)
 80017d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d4:	4a1e      	ldr	r2, [pc, #120]	; (8001850 <HAL_InitTick+0xa4>)
 80017d6:	f043 0320 	orr.w	r3, r3, #32
 80017da:	6413      	str	r3, [r2, #64]	; 0x40
 80017dc:	4b1c      	ldr	r3, [pc, #112]	; (8001850 <HAL_InitTick+0xa4>)
 80017de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e0:	f003 0320 	and.w	r3, r3, #32
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017e8:	f107 0210 	add.w	r2, r7, #16
 80017ec:	f107 0314 	add.w	r3, r7, #20
 80017f0:	4611      	mov	r1, r2
 80017f2:	4618      	mov	r0, r3
 80017f4:	f003 ffa2 	bl	800573c <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80017f8:	f003 ff78 	bl	80056ec <HAL_RCC_GetPCLK1Freq>
 80017fc:	4603      	mov	r3, r0
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001804:	4a13      	ldr	r2, [pc, #76]	; (8001854 <HAL_InitTick+0xa8>)
 8001806:	fba2 2303 	umull	r2, r3, r2, r3
 800180a:	0c9b      	lsrs	r3, r3, #18
 800180c:	3b01      	subs	r3, #1
 800180e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001810:	4b11      	ldr	r3, [pc, #68]	; (8001858 <HAL_InitTick+0xac>)
 8001812:	4a12      	ldr	r2, [pc, #72]	; (800185c <HAL_InitTick+0xb0>)
 8001814:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001816:	4b10      	ldr	r3, [pc, #64]	; (8001858 <HAL_InitTick+0xac>)
 8001818:	f240 32e7 	movw	r2, #999	; 0x3e7
 800181c:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 800181e:	4a0e      	ldr	r2, [pc, #56]	; (8001858 <HAL_InitTick+0xac>)
 8001820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001822:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001824:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <HAL_InitTick+0xac>)
 8001826:	2200      	movs	r2, #0
 8001828:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800182a:	4b0b      	ldr	r3, [pc, #44]	; (8001858 <HAL_InitTick+0xac>)
 800182c:	2200      	movs	r2, #0
 800182e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8001830:	4809      	ldr	r0, [pc, #36]	; (8001858 <HAL_InitTick+0xac>)
 8001832:	f003 ffb5 	bl	80057a0 <HAL_TIM_Base_Init>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d104      	bne.n	8001846 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 800183c:	4806      	ldr	r0, [pc, #24]	; (8001858 <HAL_InitTick+0xac>)
 800183e:	f004 f809 	bl	8005854 <HAL_TIM_Base_Start_IT>
 8001842:	4603      	mov	r3, r0
 8001844:	e000      	b.n	8001848 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
}
 8001848:	4618      	mov	r0, r3
 800184a:	3730      	adds	r7, #48	; 0x30
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40023800 	.word	0x40023800
 8001854:	431bde83 	.word	0x431bde83
 8001858:	20004794 	.word	0x20004794
 800185c:	40001400 	.word	0x40001400

08001860 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001864:	e7fe      	b.n	8001864 <NMI_Handler+0x4>

08001866 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001866:	b480      	push	{r7}
 8001868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800186a:	e7fe      	b.n	800186a <HardFault_Handler+0x4>

0800186c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001870:	e7fe      	b.n	8001870 <MemManage_Handler+0x4>

08001872 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001872:	b480      	push	{r7}
 8001874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001876:	e7fe      	b.n	8001876 <BusFault_Handler+0x4>

08001878 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800187c:	e7fe      	b.n	800187c <UsageFault_Handler+0x4>

0800187e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001890:	4802      	ldr	r0, [pc, #8]	; (800189c <USART1_IRQHandler+0x10>)
 8001892:	f004 fbe5 	bl	8006060 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	200047dc 	.word	0x200047dc

080018a0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80018a4:	4802      	ldr	r0, [pc, #8]	; (80018b0 <TIM7_IRQHandler+0x10>)
 80018a6:	f004 f845 	bl	8005934 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20004794 	.word	0x20004794

080018b4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80018b8:	4802      	ldr	r0, [pc, #8]	; (80018c4 <USART6_IRQHandler+0x10>)
 80018ba:	f004 fbd1 	bl	8006060 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	20004820 	.word	0x20004820

080018c8 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 80018cc:	4802      	ldr	r0, [pc, #8]	; (80018d8 <I2C3_EV_IRQHandler+0x10>)
 80018ce:	f001 fa2d 	bl	8002d2c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	200046ec 	.word	0x200046ec

080018dc <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 80018e0:	4802      	ldr	r0, [pc, #8]	; (80018ec <I2C3_ER_IRQHandler+0x10>)
 80018e2:	f001 fb94 	bl	800300e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	200046ec 	.word	0x200046ec

080018f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018f4:	4b06      	ldr	r3, [pc, #24]	; (8001910 <SystemInit+0x20>)
 80018f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018fa:	4a05      	ldr	r2, [pc, #20]	; (8001910 <SystemInit+0x20>)
 80018fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001900:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001918:	4b11      	ldr	r3, [pc, #68]	; (8001960 <MX_USART1_UART_Init+0x4c>)
 800191a:	4a12      	ldr	r2, [pc, #72]	; (8001964 <MX_USART1_UART_Init+0x50>)
 800191c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800191e:	4b10      	ldr	r3, [pc, #64]	; (8001960 <MX_USART1_UART_Init+0x4c>)
 8001920:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001924:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001926:	4b0e      	ldr	r3, [pc, #56]	; (8001960 <MX_USART1_UART_Init+0x4c>)
 8001928:	2200      	movs	r2, #0
 800192a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800192c:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <MX_USART1_UART_Init+0x4c>)
 800192e:	2200      	movs	r2, #0
 8001930:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001932:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <MX_USART1_UART_Init+0x4c>)
 8001934:	2200      	movs	r2, #0
 8001936:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001938:	4b09      	ldr	r3, [pc, #36]	; (8001960 <MX_USART1_UART_Init+0x4c>)
 800193a:	220c      	movs	r2, #12
 800193c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800193e:	4b08      	ldr	r3, [pc, #32]	; (8001960 <MX_USART1_UART_Init+0x4c>)
 8001940:	2200      	movs	r2, #0
 8001942:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001944:	4b06      	ldr	r3, [pc, #24]	; (8001960 <MX_USART1_UART_Init+0x4c>)
 8001946:	2200      	movs	r2, #0
 8001948:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800194a:	4805      	ldr	r0, [pc, #20]	; (8001960 <MX_USART1_UART_Init+0x4c>)
 800194c:	f004 f9d6 	bl	8005cfc <HAL_UART_Init>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001956:	f7ff fd83 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	200047dc 	.word	0x200047dc
 8001964:	40011000 	.word	0x40011000

08001968 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800196c:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <MX_USART6_UART_Init+0x4c>)
 800196e:	4a12      	ldr	r2, [pc, #72]	; (80019b8 <MX_USART6_UART_Init+0x50>)
 8001970:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001972:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <MX_USART6_UART_Init+0x4c>)
 8001974:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001978:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800197a:	4b0e      	ldr	r3, [pc, #56]	; (80019b4 <MX_USART6_UART_Init+0x4c>)
 800197c:	2200      	movs	r2, #0
 800197e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001980:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <MX_USART6_UART_Init+0x4c>)
 8001982:	2200      	movs	r2, #0
 8001984:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001986:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <MX_USART6_UART_Init+0x4c>)
 8001988:	2200      	movs	r2, #0
 800198a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800198c:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <MX_USART6_UART_Init+0x4c>)
 800198e:	220c      	movs	r2, #12
 8001990:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001992:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <MX_USART6_UART_Init+0x4c>)
 8001994:	2200      	movs	r2, #0
 8001996:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001998:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <MX_USART6_UART_Init+0x4c>)
 800199a:	2200      	movs	r2, #0
 800199c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800199e:	4805      	ldr	r0, [pc, #20]	; (80019b4 <MX_USART6_UART_Init+0x4c>)
 80019a0:	f004 f9ac 	bl	8005cfc <HAL_UART_Init>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80019aa:	f7ff fd59 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20004820 	.word	0x20004820
 80019b8:	40011400 	.word	0x40011400

080019bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b08c      	sub	sp, #48	; 0x30
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c4:	f107 031c 	add.w	r3, r7, #28
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	60da      	str	r2, [r3, #12]
 80019d2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a3a      	ldr	r2, [pc, #232]	; (8001ac4 <HAL_UART_MspInit+0x108>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d135      	bne.n	8001a4a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	61bb      	str	r3, [r7, #24]
 80019e2:	4b39      	ldr	r3, [pc, #228]	; (8001ac8 <HAL_UART_MspInit+0x10c>)
 80019e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e6:	4a38      	ldr	r2, [pc, #224]	; (8001ac8 <HAL_UART_MspInit+0x10c>)
 80019e8:	f043 0310 	orr.w	r3, r3, #16
 80019ec:	6453      	str	r3, [r2, #68]	; 0x44
 80019ee:	4b36      	ldr	r3, [pc, #216]	; (8001ac8 <HAL_UART_MspInit+0x10c>)
 80019f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f2:	f003 0310 	and.w	r3, r3, #16
 80019f6:	61bb      	str	r3, [r7, #24]
 80019f8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	617b      	str	r3, [r7, #20]
 80019fe:	4b32      	ldr	r3, [pc, #200]	; (8001ac8 <HAL_UART_MspInit+0x10c>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	4a31      	ldr	r2, [pc, #196]	; (8001ac8 <HAL_UART_MspInit+0x10c>)
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0a:	4b2f      	ldr	r3, [pc, #188]	; (8001ac8 <HAL_UART_MspInit+0x10c>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	617b      	str	r3, [r7, #20]
 8001a14:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a16:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a20:	2300      	movs	r3, #0
 8001a22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a24:	2303      	movs	r3, #3
 8001a26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a28:	2307      	movs	r3, #7
 8001a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2c:	f107 031c 	add.w	r3, r7, #28
 8001a30:	4619      	mov	r1, r3
 8001a32:	4826      	ldr	r0, [pc, #152]	; (8001acc <HAL_UART_MspInit+0x110>)
 8001a34:	f000 fa4a 	bl	8001ecc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001a38:	2200      	movs	r2, #0
 8001a3a:	2105      	movs	r1, #5
 8001a3c:	2025      	movs	r0, #37	; 0x25
 8001a3e:	f000 f96f 	bl	8001d20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a42:	2025      	movs	r0, #37	; 0x25
 8001a44:	f000 f988 	bl	8001d58 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001a48:	e038      	b.n	8001abc <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART6)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a20      	ldr	r2, [pc, #128]	; (8001ad0 <HAL_UART_MspInit+0x114>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d133      	bne.n	8001abc <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001a54:	2300      	movs	r3, #0
 8001a56:	613b      	str	r3, [r7, #16]
 8001a58:	4b1b      	ldr	r3, [pc, #108]	; (8001ac8 <HAL_UART_MspInit+0x10c>)
 8001a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5c:	4a1a      	ldr	r2, [pc, #104]	; (8001ac8 <HAL_UART_MspInit+0x10c>)
 8001a5e:	f043 0320 	orr.w	r3, r3, #32
 8001a62:	6453      	str	r3, [r2, #68]	; 0x44
 8001a64:	4b18      	ldr	r3, [pc, #96]	; (8001ac8 <HAL_UART_MspInit+0x10c>)
 8001a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a68:	f003 0320 	and.w	r3, r3, #32
 8001a6c:	613b      	str	r3, [r7, #16]
 8001a6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a70:	2300      	movs	r3, #0
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	4b14      	ldr	r3, [pc, #80]	; (8001ac8 <HAL_UART_MspInit+0x10c>)
 8001a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a78:	4a13      	ldr	r2, [pc, #76]	; (8001ac8 <HAL_UART_MspInit+0x10c>)
 8001a7a:	f043 0304 	orr.w	r3, r3, #4
 8001a7e:	6313      	str	r3, [r2, #48]	; 0x30
 8001a80:	4b11      	ldr	r3, [pc, #68]	; (8001ac8 <HAL_UART_MspInit+0x10c>)
 8001a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a84:	f003 0304 	and.w	r3, r3, #4
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a8c:	23c0      	movs	r3, #192	; 0xc0
 8001a8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a90:	2302      	movs	r3, #2
 8001a92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a94:	2300      	movs	r3, #0
 8001a96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001a9c:	2308      	movs	r3, #8
 8001a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aa0:	f107 031c 	add.w	r3, r7, #28
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	480b      	ldr	r0, [pc, #44]	; (8001ad4 <HAL_UART_MspInit+0x118>)
 8001aa8:	f000 fa10 	bl	8001ecc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8001aac:	2200      	movs	r2, #0
 8001aae:	2105      	movs	r1, #5
 8001ab0:	2047      	movs	r0, #71	; 0x47
 8001ab2:	f000 f935 	bl	8001d20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001ab6:	2047      	movs	r0, #71	; 0x47
 8001ab8:	f000 f94e 	bl	8001d58 <HAL_NVIC_EnableIRQ>
}
 8001abc:	bf00      	nop
 8001abe:	3730      	adds	r7, #48	; 0x30
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40011000 	.word	0x40011000
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	40020000 	.word	0x40020000
 8001ad0:	40011400 	.word	0x40011400
 8001ad4:	40020800 	.word	0x40020800

08001ad8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ad8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001adc:	480d      	ldr	r0, [pc, #52]	; (8001b14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ade:	490e      	ldr	r1, [pc, #56]	; (8001b18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ae0:	4a0e      	ldr	r2, [pc, #56]	; (8001b1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ae2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ae4:	e002      	b.n	8001aec <LoopCopyDataInit>

08001ae6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ae6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ae8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aea:	3304      	adds	r3, #4

08001aec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001af0:	d3f9      	bcc.n	8001ae6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001af2:	4a0b      	ldr	r2, [pc, #44]	; (8001b20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001af4:	4c0b      	ldr	r4, [pc, #44]	; (8001b24 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001af6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001af8:	e001      	b.n	8001afe <LoopFillZerobss>

08001afa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001afa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001afc:	3204      	adds	r2, #4

08001afe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001afe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b00:	d3fb      	bcc.n	8001afa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b02:	f7ff fef5 	bl	80018f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b06:	f006 fbd9 	bl	80082bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b0a:	f7ff fbfb 	bl	8001304 <main>
  bx  lr    
 8001b0e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b18:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001b1c:	08009a30 	.word	0x08009a30
  ldr r2, =_sbss
 8001b20:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001b24:	20004874 	.word	0x20004874

08001b28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b28:	e7fe      	b.n	8001b28 <ADC_IRQHandler>
	...

08001b2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b30:	4b0e      	ldr	r3, [pc, #56]	; (8001b6c <HAL_Init+0x40>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a0d      	ldr	r2, [pc, #52]	; (8001b6c <HAL_Init+0x40>)
 8001b36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b3c:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <HAL_Init+0x40>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a0a      	ldr	r2, [pc, #40]	; (8001b6c <HAL_Init+0x40>)
 8001b42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b48:	4b08      	ldr	r3, [pc, #32]	; (8001b6c <HAL_Init+0x40>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a07      	ldr	r2, [pc, #28]	; (8001b6c <HAL_Init+0x40>)
 8001b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b54:	2003      	movs	r0, #3
 8001b56:	f000 f8d8 	bl	8001d0a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b5a:	200f      	movs	r0, #15
 8001b5c:	f7ff fe26 	bl	80017ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b60:	f7ff fdf8 	bl	8001754 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40023c00 	.word	0x40023c00

08001b70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b74:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <HAL_IncTick+0x20>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <HAL_IncTick+0x24>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4413      	add	r3, r2
 8001b80:	4a04      	ldr	r2, [pc, #16]	; (8001b94 <HAL_IncTick+0x24>)
 8001b82:	6013      	str	r3, [r2, #0]
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	20000010 	.word	0x20000010
 8001b94:	20004864 	.word	0x20004864

08001b98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b9c:	4b03      	ldr	r3, [pc, #12]	; (8001bac <HAL_GetTick+0x14>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	20004864 	.word	0x20004864

08001bb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bc0:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bc6:	68ba      	ldr	r2, [r7, #8]
 8001bc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bcc:	4013      	ands	r3, r2
 8001bce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001be0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001be2:	4a04      	ldr	r2, [pc, #16]	; (8001bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	60d3      	str	r3, [r2, #12]
}
 8001be8:	bf00      	nop
 8001bea:	3714      	adds	r7, #20
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bfc:	4b04      	ldr	r3, [pc, #16]	; (8001c10 <__NVIC_GetPriorityGrouping+0x18>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	0a1b      	lsrs	r3, r3, #8
 8001c02:	f003 0307 	and.w	r3, r3, #7
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	e000ed00 	.word	0xe000ed00

08001c14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	db0b      	blt.n	8001c3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	f003 021f 	and.w	r2, r3, #31
 8001c2c:	4907      	ldr	r1, [pc, #28]	; (8001c4c <__NVIC_EnableIRQ+0x38>)
 8001c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c32:	095b      	lsrs	r3, r3, #5
 8001c34:	2001      	movs	r0, #1
 8001c36:	fa00 f202 	lsl.w	r2, r0, r2
 8001c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	e000e100 	.word	0xe000e100

08001c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	6039      	str	r1, [r7, #0]
 8001c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	db0a      	blt.n	8001c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	b2da      	uxtb	r2, r3
 8001c68:	490c      	ldr	r1, [pc, #48]	; (8001c9c <__NVIC_SetPriority+0x4c>)
 8001c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6e:	0112      	lsls	r2, r2, #4
 8001c70:	b2d2      	uxtb	r2, r2
 8001c72:	440b      	add	r3, r1
 8001c74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c78:	e00a      	b.n	8001c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	b2da      	uxtb	r2, r3
 8001c7e:	4908      	ldr	r1, [pc, #32]	; (8001ca0 <__NVIC_SetPriority+0x50>)
 8001c80:	79fb      	ldrb	r3, [r7, #7]
 8001c82:	f003 030f 	and.w	r3, r3, #15
 8001c86:	3b04      	subs	r3, #4
 8001c88:	0112      	lsls	r2, r2, #4
 8001c8a:	b2d2      	uxtb	r2, r2
 8001c8c:	440b      	add	r3, r1
 8001c8e:	761a      	strb	r2, [r3, #24]
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	e000e100 	.word	0xe000e100
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b089      	sub	sp, #36	; 0x24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	f1c3 0307 	rsb	r3, r3, #7
 8001cbe:	2b04      	cmp	r3, #4
 8001cc0:	bf28      	it	cs
 8001cc2:	2304      	movcs	r3, #4
 8001cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	3304      	adds	r3, #4
 8001cca:	2b06      	cmp	r3, #6
 8001ccc:	d902      	bls.n	8001cd4 <NVIC_EncodePriority+0x30>
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	3b03      	subs	r3, #3
 8001cd2:	e000      	b.n	8001cd6 <NVIC_EncodePriority+0x32>
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	43da      	mvns	r2, r3
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	401a      	ands	r2, r3
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cec:	f04f 31ff 	mov.w	r1, #4294967295
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf6:	43d9      	mvns	r1, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cfc:	4313      	orrs	r3, r2
         );
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3724      	adds	r7, #36	; 0x24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b082      	sub	sp, #8
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f7ff ff4c 	bl	8001bb0 <__NVIC_SetPriorityGrouping>
}
 8001d18:	bf00      	nop
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
 8001d2c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d32:	f7ff ff61 	bl	8001bf8 <__NVIC_GetPriorityGrouping>
 8001d36:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	68b9      	ldr	r1, [r7, #8]
 8001d3c:	6978      	ldr	r0, [r7, #20]
 8001d3e:	f7ff ffb1 	bl	8001ca4 <NVIC_EncodePriority>
 8001d42:	4602      	mov	r2, r0
 8001d44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d48:	4611      	mov	r1, r2
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff ff80 	bl	8001c50 <__NVIC_SetPriority>
}
 8001d50:	bf00      	nop
 8001d52:	3718      	adds	r7, #24
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff ff54 	bl	8001c14 <__NVIC_EnableIRQ>
}
 8001d6c:	bf00      	nop
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d80:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d82:	f7ff ff09 	bl	8001b98 <HAL_GetTick>
 8001d86:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d008      	beq.n	8001da6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2280      	movs	r2, #128	; 0x80
 8001d98:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e052      	b.n	8001e4c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f022 0216 	bic.w	r2, r2, #22
 8001db4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	695a      	ldr	r2, [r3, #20]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001dc4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d103      	bne.n	8001dd6 <HAL_DMA_Abort+0x62>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d007      	beq.n	8001de6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f022 0208 	bic.w	r2, r2, #8
 8001de4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f022 0201 	bic.w	r2, r2, #1
 8001df4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001df6:	e013      	b.n	8001e20 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001df8:	f7ff fece 	bl	8001b98 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b05      	cmp	r3, #5
 8001e04:	d90c      	bls.n	8001e20 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2220      	movs	r2, #32
 8001e0a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2203      	movs	r2, #3
 8001e10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e015      	b.n	8001e4c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1e4      	bne.n	8001df8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e32:	223f      	movs	r2, #63	; 0x3f
 8001e34:	409a      	lsls	r2, r3
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d004      	beq.n	8001e72 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2280      	movs	r2, #128	; 0x80
 8001e6c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e00c      	b.n	8001e8c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2205      	movs	r2, #5
 8001e76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f022 0201 	bic.w	r2, r2, #1
 8001e88:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ea6:	b2db      	uxtb	r3, r3
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b089      	sub	sp, #36	; 0x24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001eda:	2300      	movs	r3, #0
 8001edc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61fb      	str	r3, [r7, #28]
 8001ee6:	e16b      	b.n	80021c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ee8:	2201      	movs	r2, #1
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	697a      	ldr	r2, [r7, #20]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	f040 815a 	bne.w	80021ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f003 0303 	and.w	r3, r3, #3
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d005      	beq.n	8001f1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d130      	bne.n	8001f80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	2203      	movs	r2, #3
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4013      	ands	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	68da      	ldr	r2, [r3, #12]
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f54:	2201      	movs	r2, #1
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	4013      	ands	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	091b      	lsrs	r3, r3, #4
 8001f6a:	f003 0201 	and.w	r2, r3, #1
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f003 0303 	and.w	r3, r3, #3
 8001f88:	2b03      	cmp	r3, #3
 8001f8a:	d017      	beq.n	8001fbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	2203      	movs	r2, #3
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f003 0303 	and.w	r3, r3, #3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d123      	bne.n	8002010 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	08da      	lsrs	r2, r3, #3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3208      	adds	r2, #8
 8001fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	f003 0307 	and.w	r3, r3, #7
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	220f      	movs	r2, #15
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	691a      	ldr	r2, [r3, #16]
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	08da      	lsrs	r2, r3, #3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	3208      	adds	r2, #8
 800200a:	69b9      	ldr	r1, [r7, #24]
 800200c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	2203      	movs	r2, #3
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4013      	ands	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f003 0203 	and.w	r2, r3, #3
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4313      	orrs	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800204c:	2b00      	cmp	r3, #0
 800204e:	f000 80b4 	beq.w	80021ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	60fb      	str	r3, [r7, #12]
 8002056:	4b60      	ldr	r3, [pc, #384]	; (80021d8 <HAL_GPIO_Init+0x30c>)
 8002058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205a:	4a5f      	ldr	r2, [pc, #380]	; (80021d8 <HAL_GPIO_Init+0x30c>)
 800205c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002060:	6453      	str	r3, [r2, #68]	; 0x44
 8002062:	4b5d      	ldr	r3, [pc, #372]	; (80021d8 <HAL_GPIO_Init+0x30c>)
 8002064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002066:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800206e:	4a5b      	ldr	r2, [pc, #364]	; (80021dc <HAL_GPIO_Init+0x310>)
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	089b      	lsrs	r3, r3, #2
 8002074:	3302      	adds	r3, #2
 8002076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800207a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	f003 0303 	and.w	r3, r3, #3
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	220f      	movs	r2, #15
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	43db      	mvns	r3, r3
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	4013      	ands	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a52      	ldr	r2, [pc, #328]	; (80021e0 <HAL_GPIO_Init+0x314>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d02b      	beq.n	80020f2 <HAL_GPIO_Init+0x226>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a51      	ldr	r2, [pc, #324]	; (80021e4 <HAL_GPIO_Init+0x318>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d025      	beq.n	80020ee <HAL_GPIO_Init+0x222>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a50      	ldr	r2, [pc, #320]	; (80021e8 <HAL_GPIO_Init+0x31c>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d01f      	beq.n	80020ea <HAL_GPIO_Init+0x21e>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a4f      	ldr	r2, [pc, #316]	; (80021ec <HAL_GPIO_Init+0x320>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d019      	beq.n	80020e6 <HAL_GPIO_Init+0x21a>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a4e      	ldr	r2, [pc, #312]	; (80021f0 <HAL_GPIO_Init+0x324>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d013      	beq.n	80020e2 <HAL_GPIO_Init+0x216>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a4d      	ldr	r2, [pc, #308]	; (80021f4 <HAL_GPIO_Init+0x328>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d00d      	beq.n	80020de <HAL_GPIO_Init+0x212>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a4c      	ldr	r2, [pc, #304]	; (80021f8 <HAL_GPIO_Init+0x32c>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d007      	beq.n	80020da <HAL_GPIO_Init+0x20e>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a4b      	ldr	r2, [pc, #300]	; (80021fc <HAL_GPIO_Init+0x330>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d101      	bne.n	80020d6 <HAL_GPIO_Init+0x20a>
 80020d2:	2307      	movs	r3, #7
 80020d4:	e00e      	b.n	80020f4 <HAL_GPIO_Init+0x228>
 80020d6:	2308      	movs	r3, #8
 80020d8:	e00c      	b.n	80020f4 <HAL_GPIO_Init+0x228>
 80020da:	2306      	movs	r3, #6
 80020dc:	e00a      	b.n	80020f4 <HAL_GPIO_Init+0x228>
 80020de:	2305      	movs	r3, #5
 80020e0:	e008      	b.n	80020f4 <HAL_GPIO_Init+0x228>
 80020e2:	2304      	movs	r3, #4
 80020e4:	e006      	b.n	80020f4 <HAL_GPIO_Init+0x228>
 80020e6:	2303      	movs	r3, #3
 80020e8:	e004      	b.n	80020f4 <HAL_GPIO_Init+0x228>
 80020ea:	2302      	movs	r3, #2
 80020ec:	e002      	b.n	80020f4 <HAL_GPIO_Init+0x228>
 80020ee:	2301      	movs	r3, #1
 80020f0:	e000      	b.n	80020f4 <HAL_GPIO_Init+0x228>
 80020f2:	2300      	movs	r3, #0
 80020f4:	69fa      	ldr	r2, [r7, #28]
 80020f6:	f002 0203 	and.w	r2, r2, #3
 80020fa:	0092      	lsls	r2, r2, #2
 80020fc:	4093      	lsls	r3, r2
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4313      	orrs	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002104:	4935      	ldr	r1, [pc, #212]	; (80021dc <HAL_GPIO_Init+0x310>)
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	089b      	lsrs	r3, r3, #2
 800210a:	3302      	adds	r3, #2
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002112:	4b3b      	ldr	r3, [pc, #236]	; (8002200 <HAL_GPIO_Init+0x334>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	43db      	mvns	r3, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4013      	ands	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	4313      	orrs	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002136:	4a32      	ldr	r2, [pc, #200]	; (8002200 <HAL_GPIO_Init+0x334>)
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800213c:	4b30      	ldr	r3, [pc, #192]	; (8002200 <HAL_GPIO_Init+0x334>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	43db      	mvns	r3, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4013      	ands	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d003      	beq.n	8002160 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	4313      	orrs	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002160:	4a27      	ldr	r2, [pc, #156]	; (8002200 <HAL_GPIO_Init+0x334>)
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002166:	4b26      	ldr	r3, [pc, #152]	; (8002200 <HAL_GPIO_Init+0x334>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	43db      	mvns	r3, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4013      	ands	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d003      	beq.n	800218a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	4313      	orrs	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800218a:	4a1d      	ldr	r2, [pc, #116]	; (8002200 <HAL_GPIO_Init+0x334>)
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002190:	4b1b      	ldr	r3, [pc, #108]	; (8002200 <HAL_GPIO_Init+0x334>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	43db      	mvns	r3, r3
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	4013      	ands	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d003      	beq.n	80021b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021b4:	4a12      	ldr	r2, [pc, #72]	; (8002200 <HAL_GPIO_Init+0x334>)
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	3301      	adds	r3, #1
 80021be:	61fb      	str	r3, [r7, #28]
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	2b0f      	cmp	r3, #15
 80021c4:	f67f ae90 	bls.w	8001ee8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021c8:	bf00      	nop
 80021ca:	bf00      	nop
 80021cc:	3724      	adds	r7, #36	; 0x24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	40023800 	.word	0x40023800
 80021dc:	40013800 	.word	0x40013800
 80021e0:	40020000 	.word	0x40020000
 80021e4:	40020400 	.word	0x40020400
 80021e8:	40020800 	.word	0x40020800
 80021ec:	40020c00 	.word	0x40020c00
 80021f0:	40021000 	.word	0x40021000
 80021f4:	40021400 	.word	0x40021400
 80021f8:	40021800 	.word	0x40021800
 80021fc:	40021c00 	.word	0x40021c00
 8002200:	40013c00 	.word	0x40013c00

08002204 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	460b      	mov	r3, r1
 800220e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	691a      	ldr	r2, [r3, #16]
 8002214:	887b      	ldrh	r3, [r7, #2]
 8002216:	4013      	ands	r3, r2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d002      	beq.n	8002222 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800221c:	2301      	movs	r3, #1
 800221e:	73fb      	strb	r3, [r7, #15]
 8002220:	e001      	b.n	8002226 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002222:	2300      	movs	r3, #0
 8002224:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002226:	7bfb      	ldrb	r3, [r7, #15]
}
 8002228:	4618      	mov	r0, r3
 800222a:	3714      	adds	r7, #20
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	460b      	mov	r3, r1
 800223e:	807b      	strh	r3, [r7, #2]
 8002240:	4613      	mov	r3, r2
 8002242:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002244:	787b      	ldrb	r3, [r7, #1]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d003      	beq.n	8002252 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800224a:	887a      	ldrh	r2, [r7, #2]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002250:	e003      	b.n	800225a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002252:	887b      	ldrh	r3, [r7, #2]
 8002254:	041a      	lsls	r2, r3, #16
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	619a      	str	r2, [r3, #24]
}
 800225a:	bf00      	nop
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
	...

08002268 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e12b      	b.n	80024d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b00      	cmp	r3, #0
 8002284:	d106      	bne.n	8002294 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7fe ff88 	bl	80011a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2224      	movs	r2, #36	; 0x24
 8002298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f022 0201 	bic.w	r2, r2, #1
 80022aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022cc:	f003 fa0e 	bl	80056ec <HAL_RCC_GetPCLK1Freq>
 80022d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	4a81      	ldr	r2, [pc, #516]	; (80024dc <HAL_I2C_Init+0x274>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d807      	bhi.n	80022ec <HAL_I2C_Init+0x84>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	4a80      	ldr	r2, [pc, #512]	; (80024e0 <HAL_I2C_Init+0x278>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	bf94      	ite	ls
 80022e4:	2301      	movls	r3, #1
 80022e6:	2300      	movhi	r3, #0
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	e006      	b.n	80022fa <HAL_I2C_Init+0x92>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	4a7d      	ldr	r2, [pc, #500]	; (80024e4 <HAL_I2C_Init+0x27c>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	bf94      	ite	ls
 80022f4:	2301      	movls	r3, #1
 80022f6:	2300      	movhi	r3, #0
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e0e7      	b.n	80024d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	4a78      	ldr	r2, [pc, #480]	; (80024e8 <HAL_I2C_Init+0x280>)
 8002306:	fba2 2303 	umull	r2, r3, r2, r3
 800230a:	0c9b      	lsrs	r3, r3, #18
 800230c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	68ba      	ldr	r2, [r7, #8]
 800231e:	430a      	orrs	r2, r1
 8002320:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	6a1b      	ldr	r3, [r3, #32]
 8002328:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	4a6a      	ldr	r2, [pc, #424]	; (80024dc <HAL_I2C_Init+0x274>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d802      	bhi.n	800233c <HAL_I2C_Init+0xd4>
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	3301      	adds	r3, #1
 800233a:	e009      	b.n	8002350 <HAL_I2C_Init+0xe8>
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002342:	fb02 f303 	mul.w	r3, r2, r3
 8002346:	4a69      	ldr	r2, [pc, #420]	; (80024ec <HAL_I2C_Init+0x284>)
 8002348:	fba2 2303 	umull	r2, r3, r2, r3
 800234c:	099b      	lsrs	r3, r3, #6
 800234e:	3301      	adds	r3, #1
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	6812      	ldr	r2, [r2, #0]
 8002354:	430b      	orrs	r3, r1
 8002356:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	69db      	ldr	r3, [r3, #28]
 800235e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002362:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	495c      	ldr	r1, [pc, #368]	; (80024dc <HAL_I2C_Init+0x274>)
 800236c:	428b      	cmp	r3, r1
 800236e:	d819      	bhi.n	80023a4 <HAL_I2C_Init+0x13c>
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	1e59      	subs	r1, r3, #1
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	fbb1 f3f3 	udiv	r3, r1, r3
 800237e:	1c59      	adds	r1, r3, #1
 8002380:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002384:	400b      	ands	r3, r1
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00a      	beq.n	80023a0 <HAL_I2C_Init+0x138>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	1e59      	subs	r1, r3, #1
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	fbb1 f3f3 	udiv	r3, r1, r3
 8002398:	3301      	adds	r3, #1
 800239a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800239e:	e051      	b.n	8002444 <HAL_I2C_Init+0x1dc>
 80023a0:	2304      	movs	r3, #4
 80023a2:	e04f      	b.n	8002444 <HAL_I2C_Init+0x1dc>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d111      	bne.n	80023d0 <HAL_I2C_Init+0x168>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	1e58      	subs	r0, r3, #1
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6859      	ldr	r1, [r3, #4]
 80023b4:	460b      	mov	r3, r1
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	440b      	add	r3, r1
 80023ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80023be:	3301      	adds	r3, #1
 80023c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	bf0c      	ite	eq
 80023c8:	2301      	moveq	r3, #1
 80023ca:	2300      	movne	r3, #0
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	e012      	b.n	80023f6 <HAL_I2C_Init+0x18e>
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	1e58      	subs	r0, r3, #1
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6859      	ldr	r1, [r3, #4]
 80023d8:	460b      	mov	r3, r1
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	440b      	add	r3, r1
 80023de:	0099      	lsls	r1, r3, #2
 80023e0:	440b      	add	r3, r1
 80023e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80023e6:	3301      	adds	r3, #1
 80023e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	bf0c      	ite	eq
 80023f0:	2301      	moveq	r3, #1
 80023f2:	2300      	movne	r3, #0
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <HAL_I2C_Init+0x196>
 80023fa:	2301      	movs	r3, #1
 80023fc:	e022      	b.n	8002444 <HAL_I2C_Init+0x1dc>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10e      	bne.n	8002424 <HAL_I2C_Init+0x1bc>
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	1e58      	subs	r0, r3, #1
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6859      	ldr	r1, [r3, #4]
 800240e:	460b      	mov	r3, r1
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	440b      	add	r3, r1
 8002414:	fbb0 f3f3 	udiv	r3, r0, r3
 8002418:	3301      	adds	r3, #1
 800241a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800241e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002422:	e00f      	b.n	8002444 <HAL_I2C_Init+0x1dc>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	1e58      	subs	r0, r3, #1
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6859      	ldr	r1, [r3, #4]
 800242c:	460b      	mov	r3, r1
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	440b      	add	r3, r1
 8002432:	0099      	lsls	r1, r3, #2
 8002434:	440b      	add	r3, r1
 8002436:	fbb0 f3f3 	udiv	r3, r0, r3
 800243a:	3301      	adds	r3, #1
 800243c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002440:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002444:	6879      	ldr	r1, [r7, #4]
 8002446:	6809      	ldr	r1, [r1, #0]
 8002448:	4313      	orrs	r3, r2
 800244a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	69da      	ldr	r2, [r3, #28]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a1b      	ldr	r3, [r3, #32]
 800245e:	431a      	orrs	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	430a      	orrs	r2, r1
 8002466:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002472:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	6911      	ldr	r1, [r2, #16]
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	68d2      	ldr	r2, [r2, #12]
 800247e:	4311      	orrs	r1, r2
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	6812      	ldr	r2, [r2, #0]
 8002484:	430b      	orrs	r3, r1
 8002486:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	695a      	ldr	r2, [r3, #20]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	431a      	orrs	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	430a      	orrs	r2, r1
 80024a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f042 0201 	orr.w	r2, r2, #1
 80024b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2220      	movs	r2, #32
 80024be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	000186a0 	.word	0x000186a0
 80024e0:	001e847f 	.word	0x001e847f
 80024e4:	003d08ff 	.word	0x003d08ff
 80024e8:	431bde83 	.word	0x431bde83
 80024ec:	10624dd3 	.word	0x10624dd3

080024f0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b088      	sub	sp, #32
 80024f4:	af02      	add	r7, sp, #8
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	607a      	str	r2, [r7, #4]
 80024fa:	461a      	mov	r2, r3
 80024fc:	460b      	mov	r3, r1
 80024fe:	817b      	strh	r3, [r7, #10]
 8002500:	4613      	mov	r3, r2
 8002502:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002504:	f7ff fb48 	bl	8001b98 <HAL_GetTick>
 8002508:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b20      	cmp	r3, #32
 8002514:	f040 80e0 	bne.w	80026d8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	9300      	str	r3, [sp, #0]
 800251c:	2319      	movs	r3, #25
 800251e:	2201      	movs	r2, #1
 8002520:	4970      	ldr	r1, [pc, #448]	; (80026e4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002522:	68f8      	ldr	r0, [r7, #12]
 8002524:	f002 fa6c 	bl	8004a00 <I2C_WaitOnFlagUntilTimeout>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800252e:	2302      	movs	r3, #2
 8002530:	e0d3      	b.n	80026da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002538:	2b01      	cmp	r3, #1
 800253a:	d101      	bne.n	8002540 <HAL_I2C_Master_Transmit+0x50>
 800253c:	2302      	movs	r3, #2
 800253e:	e0cc      	b.n	80026da <HAL_I2C_Master_Transmit+0x1ea>
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	2b01      	cmp	r3, #1
 8002554:	d007      	beq.n	8002566 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f042 0201 	orr.w	r2, r2, #1
 8002564:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002574:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2221      	movs	r2, #33	; 0x21
 800257a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2210      	movs	r2, #16
 8002582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2200      	movs	r2, #0
 800258a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	893a      	ldrh	r2, [r7, #8]
 8002596:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800259c:	b29a      	uxth	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	4a50      	ldr	r2, [pc, #320]	; (80026e8 <HAL_I2C_Master_Transmit+0x1f8>)
 80025a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80025a8:	8979      	ldrh	r1, [r7, #10]
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	6a3a      	ldr	r2, [r7, #32]
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f001 ff98 	bl	80044e4 <I2C_MasterRequestWrite>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e08d      	b.n	80026da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025be:	2300      	movs	r3, #0
 80025c0:	613b      	str	r3, [r7, #16]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	695b      	ldr	r3, [r3, #20]
 80025c8:	613b      	str	r3, [r7, #16]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	613b      	str	r3, [r7, #16]
 80025d2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80025d4:	e066      	b.n	80026a4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	6a39      	ldr	r1, [r7, #32]
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f002 fae6 	bl	8004bac <I2C_WaitOnTXEFlagUntilTimeout>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00d      	beq.n	8002602 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	2b04      	cmp	r3, #4
 80025ec:	d107      	bne.n	80025fe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e06b      	b.n	80026da <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002606:	781a      	ldrb	r2, [r3, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002612:	1c5a      	adds	r2, r3, #1
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800261c:	b29b      	uxth	r3, r3
 800261e:	3b01      	subs	r3, #1
 8002620:	b29a      	uxth	r2, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800262a:	3b01      	subs	r3, #1
 800262c:	b29a      	uxth	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	695b      	ldr	r3, [r3, #20]
 8002638:	f003 0304 	and.w	r3, r3, #4
 800263c:	2b04      	cmp	r3, #4
 800263e:	d11b      	bne.n	8002678 <HAL_I2C_Master_Transmit+0x188>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002644:	2b00      	cmp	r3, #0
 8002646:	d017      	beq.n	8002678 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264c:	781a      	ldrb	r2, [r3, #0]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002658:	1c5a      	adds	r2, r3, #1
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002662:	b29b      	uxth	r3, r3
 8002664:	3b01      	subs	r3, #1
 8002666:	b29a      	uxth	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002670:	3b01      	subs	r3, #1
 8002672:	b29a      	uxth	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002678:	697a      	ldr	r2, [r7, #20]
 800267a:	6a39      	ldr	r1, [r7, #32]
 800267c:	68f8      	ldr	r0, [r7, #12]
 800267e:	f002 fad6 	bl	8004c2e <I2C_WaitOnBTFFlagUntilTimeout>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00d      	beq.n	80026a4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268c:	2b04      	cmp	r3, #4
 800268e:	d107      	bne.n	80026a0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800269e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e01a      	b.n	80026da <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d194      	bne.n	80025d6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2220      	movs	r2, #32
 80026c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80026d4:	2300      	movs	r3, #0
 80026d6:	e000      	b.n	80026da <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80026d8:	2302      	movs	r3, #2
  }
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3718      	adds	r7, #24
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	00100002 	.word	0x00100002
 80026e8:	ffff0000 	.word	0xffff0000

080026ec <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b08c      	sub	sp, #48	; 0x30
 80026f0:	af02      	add	r7, sp, #8
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	607a      	str	r2, [r7, #4]
 80026f6:	461a      	mov	r2, r3
 80026f8:	460b      	mov	r3, r1
 80026fa:	817b      	strh	r3, [r7, #10]
 80026fc:	4613      	mov	r3, r2
 80026fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002700:	f7ff fa4a 	bl	8001b98 <HAL_GetTick>
 8002704:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b20      	cmp	r3, #32
 8002710:	f040 820b 	bne.w	8002b2a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002716:	9300      	str	r3, [sp, #0]
 8002718:	2319      	movs	r3, #25
 800271a:	2201      	movs	r2, #1
 800271c:	497c      	ldr	r1, [pc, #496]	; (8002910 <HAL_I2C_Master_Receive+0x224>)
 800271e:	68f8      	ldr	r0, [r7, #12]
 8002720:	f002 f96e 	bl	8004a00 <I2C_WaitOnFlagUntilTimeout>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800272a:	2302      	movs	r3, #2
 800272c:	e1fe      	b.n	8002b2c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002734:	2b01      	cmp	r3, #1
 8002736:	d101      	bne.n	800273c <HAL_I2C_Master_Receive+0x50>
 8002738:	2302      	movs	r3, #2
 800273a:	e1f7      	b.n	8002b2c <HAL_I2C_Master_Receive+0x440>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	2b01      	cmp	r3, #1
 8002750:	d007      	beq.n	8002762 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f042 0201 	orr.w	r2, r2, #1
 8002760:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002770:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2222      	movs	r2, #34	; 0x22
 8002776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2210      	movs	r2, #16
 800277e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	893a      	ldrh	r2, [r7, #8]
 8002792:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002798:	b29a      	uxth	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	4a5c      	ldr	r2, [pc, #368]	; (8002914 <HAL_I2C_Master_Receive+0x228>)
 80027a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80027a4:	8979      	ldrh	r1, [r7, #10]
 80027a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027aa:	68f8      	ldr	r0, [r7, #12]
 80027ac:	f001 ff1c 	bl	80045e8 <I2C_MasterRequestRead>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e1b8      	b.n	8002b2c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d113      	bne.n	80027ea <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027c2:	2300      	movs	r3, #0
 80027c4:	623b      	str	r3, [r7, #32]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	695b      	ldr	r3, [r3, #20]
 80027cc:	623b      	str	r3, [r7, #32]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	623b      	str	r3, [r7, #32]
 80027d6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	e18c      	b.n	8002b04 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d11b      	bne.n	800282a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002800:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002802:	2300      	movs	r3, #0
 8002804:	61fb      	str	r3, [r7, #28]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	695b      	ldr	r3, [r3, #20]
 800280c:	61fb      	str	r3, [r7, #28]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	61fb      	str	r3, [r7, #28]
 8002816:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	e16c      	b.n	8002b04 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800282e:	2b02      	cmp	r3, #2
 8002830:	d11b      	bne.n	800286a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002840:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002850:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002852:	2300      	movs	r3, #0
 8002854:	61bb      	str	r3, [r7, #24]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	695b      	ldr	r3, [r3, #20]
 800285c:	61bb      	str	r3, [r7, #24]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	61bb      	str	r3, [r7, #24]
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	e14c      	b.n	8002b04 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002878:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800287a:	2300      	movs	r3, #0
 800287c:	617b      	str	r3, [r7, #20]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	695b      	ldr	r3, [r3, #20]
 8002884:	617b      	str	r3, [r7, #20]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	617b      	str	r3, [r7, #20]
 800288e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002890:	e138      	b.n	8002b04 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002896:	2b03      	cmp	r3, #3
 8002898:	f200 80f1 	bhi.w	8002a7e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d123      	bne.n	80028ec <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80028a8:	68f8      	ldr	r0, [r7, #12]
 80028aa:	f002 fa33 	bl	8004d14 <I2C_WaitOnRXNEFlagUntilTimeout>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e139      	b.n	8002b2c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	691a      	ldr	r2, [r3, #16]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c2:	b2d2      	uxtb	r2, r2
 80028c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ca:	1c5a      	adds	r2, r3, #1
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d4:	3b01      	subs	r3, #1
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	3b01      	subs	r3, #1
 80028e4:	b29a      	uxth	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028ea:	e10b      	b.n	8002b04 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d14e      	bne.n	8002992 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f6:	9300      	str	r3, [sp, #0]
 80028f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028fa:	2200      	movs	r2, #0
 80028fc:	4906      	ldr	r1, [pc, #24]	; (8002918 <HAL_I2C_Master_Receive+0x22c>)
 80028fe:	68f8      	ldr	r0, [r7, #12]
 8002900:	f002 f87e 	bl	8004a00 <I2C_WaitOnFlagUntilTimeout>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d008      	beq.n	800291c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e10e      	b.n	8002b2c <HAL_I2C_Master_Receive+0x440>
 800290e:	bf00      	nop
 8002910:	00100002 	.word	0x00100002
 8002914:	ffff0000 	.word	0xffff0000
 8002918:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800292a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	691a      	ldr	r2, [r3, #16]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002936:	b2d2      	uxtb	r2, r2
 8002938:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293e:	1c5a      	adds	r2, r3, #1
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002948:	3b01      	subs	r3, #1
 800294a:	b29a      	uxth	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002954:	b29b      	uxth	r3, r3
 8002956:	3b01      	subs	r3, #1
 8002958:	b29a      	uxth	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	691a      	ldr	r2, [r3, #16]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002968:	b2d2      	uxtb	r2, r2
 800296a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002970:	1c5a      	adds	r2, r3, #1
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800297a:	3b01      	subs	r3, #1
 800297c:	b29a      	uxth	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002986:	b29b      	uxth	r3, r3
 8002988:	3b01      	subs	r3, #1
 800298a:	b29a      	uxth	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002990:	e0b8      	b.n	8002b04 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002998:	2200      	movs	r2, #0
 800299a:	4966      	ldr	r1, [pc, #408]	; (8002b34 <HAL_I2C_Master_Receive+0x448>)
 800299c:	68f8      	ldr	r0, [r7, #12]
 800299e:	f002 f82f 	bl	8004a00 <I2C_WaitOnFlagUntilTimeout>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e0bf      	b.n	8002b2c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	691a      	ldr	r2, [r3, #16]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c6:	b2d2      	uxtb	r2, r2
 80029c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ce:	1c5a      	adds	r2, r3, #1
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d8:	3b01      	subs	r3, #1
 80029da:	b29a      	uxth	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	3b01      	subs	r3, #1
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f0:	9300      	str	r3, [sp, #0]
 80029f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f4:	2200      	movs	r2, #0
 80029f6:	494f      	ldr	r1, [pc, #316]	; (8002b34 <HAL_I2C_Master_Receive+0x448>)
 80029f8:	68f8      	ldr	r0, [r7, #12]
 80029fa:	f002 f801 	bl	8004a00 <I2C_WaitOnFlagUntilTimeout>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e091      	b.n	8002b2c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	691a      	ldr	r2, [r3, #16]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a22:	b2d2      	uxtb	r2, r2
 8002a24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2a:	1c5a      	adds	r2, r3, #1
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a34:	3b01      	subs	r3, #1
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	3b01      	subs	r3, #1
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	691a      	ldr	r2, [r3, #16]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a54:	b2d2      	uxtb	r2, r2
 8002a56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5c:	1c5a      	adds	r2, r3, #1
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a66:	3b01      	subs	r3, #1
 8002a68:	b29a      	uxth	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	3b01      	subs	r3, #1
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a7c:	e042      	b.n	8002b04 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a82:	68f8      	ldr	r0, [r7, #12]
 8002a84:	f002 f946 	bl	8004d14 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e04c      	b.n	8002b2c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	691a      	ldr	r2, [r3, #16]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9c:	b2d2      	uxtb	r2, r2
 8002a9e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa4:	1c5a      	adds	r2, r3, #1
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	b29a      	uxth	r2, r3
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	3b01      	subs	r3, #1
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	f003 0304 	and.w	r3, r3, #4
 8002ace:	2b04      	cmp	r3, #4
 8002ad0:	d118      	bne.n	8002b04 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	691a      	ldr	r2, [r3, #16]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002adc:	b2d2      	uxtb	r2, r2
 8002ade:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae4:	1c5a      	adds	r2, r3, #1
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aee:	3b01      	subs	r3, #1
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	3b01      	subs	r3, #1
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f47f aec2 	bne.w	8002892 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2220      	movs	r2, #32
 8002b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b26:	2300      	movs	r3, #0
 8002b28:	e000      	b.n	8002b2c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002b2a:	2302      	movs	r3, #2
  }
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3728      	adds	r7, #40	; 0x28
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	00010004 	.word	0x00010004

08002b38 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b088      	sub	sp, #32
 8002b3c:	af02      	add	r7, sp, #8
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	4608      	mov	r0, r1
 8002b42:	4611      	mov	r1, r2
 8002b44:	461a      	mov	r2, r3
 8002b46:	4603      	mov	r3, r0
 8002b48:	817b      	strh	r3, [r7, #10]
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	813b      	strh	r3, [r7, #8]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b52:	f7ff f821 	bl	8001b98 <HAL_GetTick>
 8002b56:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	2b20      	cmp	r3, #32
 8002b62:	f040 80d9 	bne.w	8002d18 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	9300      	str	r3, [sp, #0]
 8002b6a:	2319      	movs	r3, #25
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	496d      	ldr	r1, [pc, #436]	; (8002d24 <HAL_I2C_Mem_Write+0x1ec>)
 8002b70:	68f8      	ldr	r0, [r7, #12]
 8002b72:	f001 ff45 	bl	8004a00 <I2C_WaitOnFlagUntilTimeout>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	e0cc      	b.n	8002d1a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d101      	bne.n	8002b8e <HAL_I2C_Mem_Write+0x56>
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	e0c5      	b.n	8002d1a <HAL_I2C_Mem_Write+0x1e2>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0301 	and.w	r3, r3, #1
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d007      	beq.n	8002bb4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f042 0201 	orr.w	r2, r2, #1
 8002bb2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bc2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2221      	movs	r2, #33	; 0x21
 8002bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2240      	movs	r2, #64	; 0x40
 8002bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6a3a      	ldr	r2, [r7, #32]
 8002bde:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002be4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	4a4d      	ldr	r2, [pc, #308]	; (8002d28 <HAL_I2C_Mem_Write+0x1f0>)
 8002bf4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002bf6:	88f8      	ldrh	r0, [r7, #6]
 8002bf8:	893a      	ldrh	r2, [r7, #8]
 8002bfa:	8979      	ldrh	r1, [r7, #10]
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	9301      	str	r3, [sp, #4]
 8002c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c02:	9300      	str	r3, [sp, #0]
 8002c04:	4603      	mov	r3, r0
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f001 fdbc 	bl	8004784 <I2C_RequestMemoryWrite>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d052      	beq.n	8002cb8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e081      	b.n	8002d1a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f001 ffc6 	bl	8004bac <I2C_WaitOnTXEFlagUntilTimeout>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00d      	beq.n	8002c42 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2a:	2b04      	cmp	r3, #4
 8002c2c:	d107      	bne.n	8002c3e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c3c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e06b      	b.n	8002d1a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c46:	781a      	ldrb	r2, [r3, #0]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c52:	1c5a      	adds	r2, r3, #1
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	695b      	ldr	r3, [r3, #20]
 8002c78:	f003 0304 	and.w	r3, r3, #4
 8002c7c:	2b04      	cmp	r3, #4
 8002c7e:	d11b      	bne.n	8002cb8 <HAL_I2C_Mem_Write+0x180>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d017      	beq.n	8002cb8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8c:	781a      	ldrb	r2, [r3, #0]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c98:	1c5a      	adds	r2, r3, #1
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	b29a      	uxth	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d1aa      	bne.n	8002c16 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cc4:	68f8      	ldr	r0, [r7, #12]
 8002cc6:	f001 ffb2 	bl	8004c2e <I2C_WaitOnBTFFlagUntilTimeout>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00d      	beq.n	8002cec <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd4:	2b04      	cmp	r3, #4
 8002cd6:	d107      	bne.n	8002ce8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ce6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e016      	b.n	8002d1a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2220      	movs	r2, #32
 8002d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d14:	2300      	movs	r3, #0
 8002d16:	e000      	b.n	8002d1a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002d18:	2302      	movs	r3, #2
  }
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3718      	adds	r7, #24
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	00100002 	.word	0x00100002
 8002d28:	ffff0000 	.word	0xffff0000

08002d2c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b088      	sub	sp, #32
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002d34:	2300      	movs	r3, #0
 8002d36:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d44:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d4c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d54:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002d56:	7bfb      	ldrb	r3, [r7, #15]
 8002d58:	2b10      	cmp	r3, #16
 8002d5a:	d003      	beq.n	8002d64 <HAL_I2C_EV_IRQHandler+0x38>
 8002d5c:	7bfb      	ldrb	r3, [r7, #15]
 8002d5e:	2b40      	cmp	r3, #64	; 0x40
 8002d60:	f040 80c1 	bne.w	8002ee6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d10d      	bne.n	8002d9a <HAL_I2C_EV_IRQHandler+0x6e>
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002d84:	d003      	beq.n	8002d8e <HAL_I2C_EV_IRQHandler+0x62>
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002d8c:	d101      	bne.n	8002d92 <HAL_I2C_EV_IRQHandler+0x66>
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e000      	b.n	8002d94 <HAL_I2C_EV_IRQHandler+0x68>
 8002d92:	2300      	movs	r3, #0
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	f000 8132 	beq.w	8002ffe <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00c      	beq.n	8002dbe <HAL_I2C_EV_IRQHandler+0x92>
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	0a5b      	lsrs	r3, r3, #9
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d006      	beq.n	8002dbe <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f002 f834 	bl	8004e1e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 fd79 	bl	80038ae <I2C_Master_SB>
 8002dbc:	e092      	b.n	8002ee4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	08db      	lsrs	r3, r3, #3
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d009      	beq.n	8002dde <HAL_I2C_EV_IRQHandler+0xb2>
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	0a5b      	lsrs	r3, r3, #9
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d003      	beq.n	8002dde <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 fdef 	bl	80039ba <I2C_Master_ADD10>
 8002ddc:	e082      	b.n	8002ee4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	085b      	lsrs	r3, r3, #1
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d009      	beq.n	8002dfe <HAL_I2C_EV_IRQHandler+0xd2>
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	0a5b      	lsrs	r3, r3, #9
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d003      	beq.n	8002dfe <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 fe09 	bl	8003a0e <I2C_Master_ADDR>
 8002dfc:	e072      	b.n	8002ee4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	089b      	lsrs	r3, r3, #2
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d03b      	beq.n	8002e82 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e18:	f000 80f3 	beq.w	8003002 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	09db      	lsrs	r3, r3, #7
 8002e20:	f003 0301 	and.w	r3, r3, #1
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d00f      	beq.n	8002e48 <HAL_I2C_EV_IRQHandler+0x11c>
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	0a9b      	lsrs	r3, r3, #10
 8002e2c:	f003 0301 	and.w	r3, r3, #1
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d009      	beq.n	8002e48 <HAL_I2C_EV_IRQHandler+0x11c>
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	089b      	lsrs	r3, r3, #2
 8002e38:	f003 0301 	and.w	r3, r3, #1
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d103      	bne.n	8002e48 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f000 f9f3 	bl	800322c <I2C_MasterTransmit_TXE>
 8002e46:	e04d      	b.n	8002ee4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	089b      	lsrs	r3, r3, #2
 8002e4c:	f003 0301 	and.w	r3, r3, #1
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	f000 80d6 	beq.w	8003002 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	0a5b      	lsrs	r3, r3, #9
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f000 80cf 	beq.w	8003002 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002e64:	7bbb      	ldrb	r3, [r7, #14]
 8002e66:	2b21      	cmp	r3, #33	; 0x21
 8002e68:	d103      	bne.n	8002e72 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 fa7a 	bl	8003364 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e70:	e0c7      	b.n	8003002 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002e72:	7bfb      	ldrb	r3, [r7, #15]
 8002e74:	2b40      	cmp	r3, #64	; 0x40
 8002e76:	f040 80c4 	bne.w	8003002 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 fae8 	bl	8003450 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e80:	e0bf      	b.n	8003002 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e90:	f000 80b7 	beq.w	8003002 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	099b      	lsrs	r3, r3, #6
 8002e98:	f003 0301 	and.w	r3, r3, #1
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00f      	beq.n	8002ec0 <HAL_I2C_EV_IRQHandler+0x194>
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	0a9b      	lsrs	r3, r3, #10
 8002ea4:	f003 0301 	and.w	r3, r3, #1
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d009      	beq.n	8002ec0 <HAL_I2C_EV_IRQHandler+0x194>
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	089b      	lsrs	r3, r3, #2
 8002eb0:	f003 0301 	and.w	r3, r3, #1
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d103      	bne.n	8002ec0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 fb5d 	bl	8003578 <I2C_MasterReceive_RXNE>
 8002ebe:	e011      	b.n	8002ee4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	089b      	lsrs	r3, r3, #2
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	f000 809a 	beq.w	8003002 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	0a5b      	lsrs	r3, r3, #9
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	f000 8093 	beq.w	8003002 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f000 fbfc 	bl	80036da <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ee2:	e08e      	b.n	8003002 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002ee4:	e08d      	b.n	8003002 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d004      	beq.n	8002ef8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	695b      	ldr	r3, [r3, #20]
 8002ef4:	61fb      	str	r3, [r7, #28]
 8002ef6:	e007      	b.n	8002f08 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	085b      	lsrs	r3, r3, #1
 8002f0c:	f003 0301 	and.w	r3, r3, #1
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d012      	beq.n	8002f3a <HAL_I2C_EV_IRQHandler+0x20e>
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	0a5b      	lsrs	r3, r3, #9
 8002f18:	f003 0301 	and.w	r3, r3, #1
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d00c      	beq.n	8002f3a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d003      	beq.n	8002f30 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002f30:	69b9      	ldr	r1, [r7, #24]
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 ffba 	bl	8003eac <I2C_Slave_ADDR>
 8002f38:	e066      	b.n	8003008 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	091b      	lsrs	r3, r3, #4
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d009      	beq.n	8002f5a <HAL_I2C_EV_IRQHandler+0x22e>
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	0a5b      	lsrs	r3, r3, #9
 8002f4a:	f003 0301 	and.w	r3, r3, #1
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d003      	beq.n	8002f5a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 fff4 	bl	8003f40 <I2C_Slave_STOPF>
 8002f58:	e056      	b.n	8003008 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002f5a:	7bbb      	ldrb	r3, [r7, #14]
 8002f5c:	2b21      	cmp	r3, #33	; 0x21
 8002f5e:	d002      	beq.n	8002f66 <HAL_I2C_EV_IRQHandler+0x23a>
 8002f60:	7bbb      	ldrb	r3, [r7, #14]
 8002f62:	2b29      	cmp	r3, #41	; 0x29
 8002f64:	d125      	bne.n	8002fb2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	09db      	lsrs	r3, r3, #7
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00f      	beq.n	8002f92 <HAL_I2C_EV_IRQHandler+0x266>
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	0a9b      	lsrs	r3, r3, #10
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d009      	beq.n	8002f92 <HAL_I2C_EV_IRQHandler+0x266>
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	089b      	lsrs	r3, r3, #2
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d103      	bne.n	8002f92 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 fed0 	bl	8003d30 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f90:	e039      	b.n	8003006 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	089b      	lsrs	r3, r3, #2
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d033      	beq.n	8003006 <HAL_I2C_EV_IRQHandler+0x2da>
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	0a5b      	lsrs	r3, r3, #9
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d02d      	beq.n	8003006 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 fefd 	bl	8003daa <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002fb0:	e029      	b.n	8003006 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	099b      	lsrs	r3, r3, #6
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00f      	beq.n	8002fde <HAL_I2C_EV_IRQHandler+0x2b2>
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	0a9b      	lsrs	r3, r3, #10
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d009      	beq.n	8002fde <HAL_I2C_EV_IRQHandler+0x2b2>
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	089b      	lsrs	r3, r3, #2
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d103      	bne.n	8002fde <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 ff08 	bl	8003dec <I2C_SlaveReceive_RXNE>
 8002fdc:	e014      	b.n	8003008 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	089b      	lsrs	r3, r3, #2
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00e      	beq.n	8003008 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	0a5b      	lsrs	r3, r3, #9
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d008      	beq.n	8003008 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 ff36 	bl	8003e68 <I2C_SlaveReceive_BTF>
 8002ffc:	e004      	b.n	8003008 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002ffe:	bf00      	nop
 8003000:	e002      	b.n	8003008 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003002:	bf00      	nop
 8003004:	e000      	b.n	8003008 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003006:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003008:	3720      	adds	r7, #32
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800300e:	b580      	push	{r7, lr}
 8003010:	b08a      	sub	sp, #40	; 0x28
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003026:	2300      	movs	r3, #0
 8003028:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003030:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003032:	6a3b      	ldr	r3, [r7, #32]
 8003034:	0a1b      	lsrs	r3, r3, #8
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00e      	beq.n	800305c <HAL_I2C_ER_IRQHandler+0x4e>
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	0a1b      	lsrs	r3, r3, #8
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	2b00      	cmp	r3, #0
 8003048:	d008      	beq.n	800305c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800304a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304c:	f043 0301 	orr.w	r3, r3, #1
 8003050:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800305a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800305c:	6a3b      	ldr	r3, [r7, #32]
 800305e:	0a5b      	lsrs	r3, r3, #9
 8003060:	f003 0301 	and.w	r3, r3, #1
 8003064:	2b00      	cmp	r3, #0
 8003066:	d00e      	beq.n	8003086 <HAL_I2C_ER_IRQHandler+0x78>
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	0a1b      	lsrs	r3, r3, #8
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	2b00      	cmp	r3, #0
 8003072:	d008      	beq.n	8003086 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003076:	f043 0302 	orr.w	r3, r3, #2
 800307a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003084:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003086:	6a3b      	ldr	r3, [r7, #32]
 8003088:	0a9b      	lsrs	r3, r3, #10
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	2b00      	cmp	r3, #0
 8003090:	d03f      	beq.n	8003112 <HAL_I2C_ER_IRQHandler+0x104>
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	0a1b      	lsrs	r3, r3, #8
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b00      	cmp	r3, #0
 800309c:	d039      	beq.n	8003112 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800309e:	7efb      	ldrb	r3, [r7, #27]
 80030a0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030b0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80030b8:	7ebb      	ldrb	r3, [r7, #26]
 80030ba:	2b20      	cmp	r3, #32
 80030bc:	d112      	bne.n	80030e4 <HAL_I2C_ER_IRQHandler+0xd6>
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d10f      	bne.n	80030e4 <HAL_I2C_ER_IRQHandler+0xd6>
 80030c4:	7cfb      	ldrb	r3, [r7, #19]
 80030c6:	2b21      	cmp	r3, #33	; 0x21
 80030c8:	d008      	beq.n	80030dc <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80030ca:	7cfb      	ldrb	r3, [r7, #19]
 80030cc:	2b29      	cmp	r3, #41	; 0x29
 80030ce:	d005      	beq.n	80030dc <HAL_I2C_ER_IRQHandler+0xce>
 80030d0:	7cfb      	ldrb	r3, [r7, #19]
 80030d2:	2b28      	cmp	r3, #40	; 0x28
 80030d4:	d106      	bne.n	80030e4 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2b21      	cmp	r3, #33	; 0x21
 80030da:	d103      	bne.n	80030e4 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f001 f85f 	bl	80041a0 <I2C_Slave_AF>
 80030e2:	e016      	b.n	8003112 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030ec:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80030ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f0:	f043 0304 	orr.w	r3, r3, #4
 80030f4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80030f6:	7efb      	ldrb	r3, [r7, #27]
 80030f8:	2b10      	cmp	r3, #16
 80030fa:	d002      	beq.n	8003102 <HAL_I2C_ER_IRQHandler+0xf4>
 80030fc:	7efb      	ldrb	r3, [r7, #27]
 80030fe:	2b40      	cmp	r3, #64	; 0x40
 8003100:	d107      	bne.n	8003112 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003110:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003112:	6a3b      	ldr	r3, [r7, #32]
 8003114:	0adb      	lsrs	r3, r3, #11
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00e      	beq.n	800313c <HAL_I2C_ER_IRQHandler+0x12e>
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	0a1b      	lsrs	r3, r3, #8
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b00      	cmp	r3, #0
 8003128:	d008      	beq.n	800313c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800312a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312c:	f043 0308 	orr.w	r3, r3, #8
 8003130:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800313a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800313c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313e:	2b00      	cmp	r3, #0
 8003140:	d008      	beq.n	8003154 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003148:	431a      	orrs	r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f001 f896 	bl	8004280 <I2C_ITError>
  }
}
 8003154:	bf00      	nop
 8003156:	3728      	adds	r7, #40	; 0x28
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800318c:	bf00      	nop
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	460b      	mov	r3, r1
 80031b6:	70fb      	strb	r3, [r7, #3]
 80031b8:	4613      	mov	r3, r2
 80031ba:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800323a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003242:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003248:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800324e:	2b00      	cmp	r3, #0
 8003250:	d150      	bne.n	80032f4 <I2C_MasterTransmit_TXE+0xc8>
 8003252:	7bfb      	ldrb	r3, [r7, #15]
 8003254:	2b21      	cmp	r3, #33	; 0x21
 8003256:	d14d      	bne.n	80032f4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	2b08      	cmp	r3, #8
 800325c:	d01d      	beq.n	800329a <I2C_MasterTransmit_TXE+0x6e>
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	2b20      	cmp	r3, #32
 8003262:	d01a      	beq.n	800329a <I2C_MasterTransmit_TXE+0x6e>
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800326a:	d016      	beq.n	800329a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	685a      	ldr	r2, [r3, #4]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800327a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2211      	movs	r2, #17
 8003280:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2220      	movs	r2, #32
 800328e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f7ff ff62 	bl	800315c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003298:	e060      	b.n	800335c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	685a      	ldr	r2, [r3, #4]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80032a8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032b8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2220      	movs	r2, #32
 80032c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	2b40      	cmp	r3, #64	; 0x40
 80032d2:	d107      	bne.n	80032e4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f7ff ff7d 	bl	80031dc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80032e2:	e03b      	b.n	800335c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f7ff ff35 	bl	800315c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80032f2:	e033      	b.n	800335c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80032f4:	7bfb      	ldrb	r3, [r7, #15]
 80032f6:	2b21      	cmp	r3, #33	; 0x21
 80032f8:	d005      	beq.n	8003306 <I2C_MasterTransmit_TXE+0xda>
 80032fa:	7bbb      	ldrb	r3, [r7, #14]
 80032fc:	2b40      	cmp	r3, #64	; 0x40
 80032fe:	d12d      	bne.n	800335c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003300:	7bfb      	ldrb	r3, [r7, #15]
 8003302:	2b22      	cmp	r3, #34	; 0x22
 8003304:	d12a      	bne.n	800335c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800330a:	b29b      	uxth	r3, r3
 800330c:	2b00      	cmp	r3, #0
 800330e:	d108      	bne.n	8003322 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	685a      	ldr	r2, [r3, #4]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800331e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003320:	e01c      	b.n	800335c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b40      	cmp	r3, #64	; 0x40
 800332c:	d103      	bne.n	8003336 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f88e 	bl	8003450 <I2C_MemoryTransmit_TXE_BTF>
}
 8003334:	e012      	b.n	800335c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333a:	781a      	ldrb	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003346:	1c5a      	adds	r2, r3, #1
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003350:	b29b      	uxth	r3, r3
 8003352:	3b01      	subs	r3, #1
 8003354:	b29a      	uxth	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800335a:	e7ff      	b.n	800335c <I2C_MasterTransmit_TXE+0x130>
 800335c:	bf00      	nop
 800335e:	3710      	adds	r7, #16
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003370:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b21      	cmp	r3, #33	; 0x21
 800337c:	d164      	bne.n	8003448 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003382:	b29b      	uxth	r3, r3
 8003384:	2b00      	cmp	r3, #0
 8003386:	d012      	beq.n	80033ae <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338c:	781a      	ldrb	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003398:	1c5a      	adds	r2, r3, #1
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	3b01      	subs	r3, #1
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80033ac:	e04c      	b.n	8003448 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2b08      	cmp	r3, #8
 80033b2:	d01d      	beq.n	80033f0 <I2C_MasterTransmit_BTF+0x8c>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2b20      	cmp	r3, #32
 80033b8:	d01a      	beq.n	80033f0 <I2C_MasterTransmit_BTF+0x8c>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033c0:	d016      	beq.n	80033f0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	685a      	ldr	r2, [r3, #4]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80033d0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2211      	movs	r2, #17
 80033d6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2220      	movs	r2, #32
 80033e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f7ff feb7 	bl	800315c <HAL_I2C_MasterTxCpltCallback>
}
 80033ee:	e02b      	b.n	8003448 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	685a      	ldr	r2, [r3, #4]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80033fe:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800340e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2220      	movs	r2, #32
 800341a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b40      	cmp	r3, #64	; 0x40
 8003428:	d107      	bne.n	800343a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f7ff fed2 	bl	80031dc <HAL_I2C_MemTxCpltCallback>
}
 8003438:	e006      	b.n	8003448 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f7ff fe8a 	bl	800315c <HAL_I2C_MasterTxCpltCallback>
}
 8003448:	bf00      	nop
 800344a:	3710      	adds	r7, #16
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800345e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003464:	2b00      	cmp	r3, #0
 8003466:	d11d      	bne.n	80034a4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800346c:	2b01      	cmp	r3, #1
 800346e:	d10b      	bne.n	8003488 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003474:	b2da      	uxtb	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003480:	1c9a      	adds	r2, r3, #2
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003486:	e073      	b.n	8003570 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800348c:	b29b      	uxth	r3, r3
 800348e:	121b      	asrs	r3, r3, #8
 8003490:	b2da      	uxtb	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800349c:	1c5a      	adds	r2, r3, #1
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80034a2:	e065      	b.n	8003570 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d10b      	bne.n	80034c4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034b0:	b2da      	uxtb	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034bc:	1c5a      	adds	r2, r3, #1
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80034c2:	e055      	b.n	8003570 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d151      	bne.n	8003570 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80034cc:	7bfb      	ldrb	r3, [r7, #15]
 80034ce:	2b22      	cmp	r3, #34	; 0x22
 80034d0:	d10d      	bne.n	80034ee <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034e0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034e6:	1c5a      	adds	r2, r3, #1
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	651a      	str	r2, [r3, #80]	; 0x50
}
 80034ec:	e040      	b.n	8003570 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d015      	beq.n	8003524 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80034f8:	7bfb      	ldrb	r3, [r7, #15]
 80034fa:	2b21      	cmp	r3, #33	; 0x21
 80034fc:	d112      	bne.n	8003524 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003502:	781a      	ldrb	r2, [r3, #0]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350e:	1c5a      	adds	r2, r3, #1
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003518:	b29b      	uxth	r3, r3
 800351a:	3b01      	subs	r3, #1
 800351c:	b29a      	uxth	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003522:	e025      	b.n	8003570 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003528:	b29b      	uxth	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d120      	bne.n	8003570 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800352e:	7bfb      	ldrb	r3, [r7, #15]
 8003530:	2b21      	cmp	r3, #33	; 0x21
 8003532:	d11d      	bne.n	8003570 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	685a      	ldr	r2, [r3, #4]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003542:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003552:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2220      	movs	r2, #32
 800355e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f7ff fe36 	bl	80031dc <HAL_I2C_MemTxCpltCallback>
}
 8003570:	bf00      	nop
 8003572:	3710      	adds	r7, #16
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b22      	cmp	r3, #34	; 0x22
 800358a:	f040 80a2 	bne.w	80036d2 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003592:	b29b      	uxth	r3, r3
 8003594:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2b03      	cmp	r3, #3
 800359a:	d921      	bls.n	80035e0 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	691a      	ldr	r2, [r3, #16]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a6:	b2d2      	uxtb	r2, r2
 80035a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ae:	1c5a      	adds	r2, r3, #1
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	3b01      	subs	r3, #1
 80035bc:	b29a      	uxth	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	2b03      	cmp	r3, #3
 80035ca:	f040 8082 	bne.w	80036d2 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	685a      	ldr	r2, [r3, #4]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035dc:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80035de:	e078      	b.n	80036d2 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d074      	beq.n	80036d2 <I2C_MasterReceive_RXNE+0x15a>
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d002      	beq.n	80035f4 <I2C_MasterReceive_RXNE+0x7c>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d16e      	bne.n	80036d2 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f001 fb5b 	bl	8004cb0 <I2C_WaitOnSTOPRequestThroughIT>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d142      	bne.n	8003686 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800360e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	685a      	ldr	r2, [r3, #4]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800361e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	691a      	ldr	r2, [r3, #16]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362a:	b2d2      	uxtb	r2, r2
 800362c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003632:	1c5a      	adds	r2, r3, #1
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800363c:	b29b      	uxth	r3, r3
 800363e:	3b01      	subs	r3, #1
 8003640:	b29a      	uxth	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2220      	movs	r2, #32
 800364a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b40      	cmp	r3, #64	; 0x40
 8003658:	d10a      	bne.n	8003670 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f7ff fdc1 	bl	80031f0 <HAL_I2C_MemRxCpltCallback>
}
 800366e:	e030      	b.n	80036d2 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2212      	movs	r2, #18
 800367c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f7ff fd76 	bl	8003170 <HAL_I2C_MasterRxCpltCallback>
}
 8003684:	e025      	b.n	80036d2 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	685a      	ldr	r2, [r3, #4]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003694:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	691a      	ldr	r2, [r3, #16]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a0:	b2d2      	uxtb	r2, r2
 80036a2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a8:	1c5a      	adds	r2, r3, #1
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	3b01      	subs	r3, #1
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2220      	movs	r2, #32
 80036c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f7ff fd99 	bl	8003204 <HAL_I2C_ErrorCallback>
}
 80036d2:	bf00      	nop
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80036da:	b580      	push	{r7, lr}
 80036dc:	b084      	sub	sp, #16
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	2b04      	cmp	r3, #4
 80036f0:	d11b      	bne.n	800372a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	685a      	ldr	r2, [r3, #4]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003700:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	691a      	ldr	r2, [r3, #16]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370c:	b2d2      	uxtb	r2, r2
 800370e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003714:	1c5a      	adds	r2, r3, #1
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800371e:	b29b      	uxth	r3, r3
 8003720:	3b01      	subs	r3, #1
 8003722:	b29a      	uxth	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003728:	e0bd      	b.n	80038a6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800372e:	b29b      	uxth	r3, r3
 8003730:	2b03      	cmp	r3, #3
 8003732:	d129      	bne.n	8003788 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	685a      	ldr	r2, [r3, #4]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003742:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2b04      	cmp	r3, #4
 8003748:	d00a      	beq.n	8003760 <I2C_MasterReceive_BTF+0x86>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2b02      	cmp	r3, #2
 800374e:	d007      	beq.n	8003760 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800375e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	691a      	ldr	r2, [r3, #16]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376a:	b2d2      	uxtb	r2, r2
 800376c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003772:	1c5a      	adds	r2, r3, #1
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800377c:	b29b      	uxth	r3, r3
 800377e:	3b01      	subs	r3, #1
 8003780:	b29a      	uxth	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003786:	e08e      	b.n	80038a6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800378c:	b29b      	uxth	r3, r3
 800378e:	2b02      	cmp	r3, #2
 8003790:	d176      	bne.n	8003880 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2b01      	cmp	r3, #1
 8003796:	d002      	beq.n	800379e <I2C_MasterReceive_BTF+0xc4>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2b10      	cmp	r3, #16
 800379c:	d108      	bne.n	80037b0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037ac:	601a      	str	r2, [r3, #0]
 80037ae:	e019      	b.n	80037e4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2b04      	cmp	r3, #4
 80037b4:	d002      	beq.n	80037bc <I2C_MasterReceive_BTF+0xe2>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d108      	bne.n	80037ce <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037ca:	601a      	str	r2, [r3, #0]
 80037cc:	e00a      	b.n	80037e4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2b10      	cmp	r3, #16
 80037d2:	d007      	beq.n	80037e4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037e2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	691a      	ldr	r2, [r3, #16]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ee:	b2d2      	uxtb	r2, r2
 80037f0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f6:	1c5a      	adds	r2, r3, #1
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003800:	b29b      	uxth	r3, r3
 8003802:	3b01      	subs	r3, #1
 8003804:	b29a      	uxth	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	691a      	ldr	r2, [r3, #16]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003814:	b2d2      	uxtb	r2, r2
 8003816:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381c:	1c5a      	adds	r2, r3, #1
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003826:	b29b      	uxth	r3, r3
 8003828:	3b01      	subs	r3, #1
 800382a:	b29a      	uxth	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	685a      	ldr	r2, [r3, #4]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800383e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2220      	movs	r2, #32
 8003844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800384e:	b2db      	uxtb	r3, r3
 8003850:	2b40      	cmp	r3, #64	; 0x40
 8003852:	d10a      	bne.n	800386a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f7ff fcc4 	bl	80031f0 <HAL_I2C_MemRxCpltCallback>
}
 8003868:	e01d      	b.n	80038a6 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2212      	movs	r2, #18
 8003876:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f7ff fc79 	bl	8003170 <HAL_I2C_MasterRxCpltCallback>
}
 800387e:	e012      	b.n	80038a6 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	691a      	ldr	r2, [r3, #16]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388a:	b2d2      	uxtb	r2, r2
 800388c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003892:	1c5a      	adds	r2, r3, #1
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800389c:	b29b      	uxth	r3, r3
 800389e:	3b01      	subs	r3, #1
 80038a0:	b29a      	uxth	r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80038a6:	bf00      	nop
 80038a8:	3710      	adds	r7, #16
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}

080038ae <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80038ae:	b480      	push	{r7}
 80038b0:	b083      	sub	sp, #12
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b40      	cmp	r3, #64	; 0x40
 80038c0:	d117      	bne.n	80038f2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d109      	bne.n	80038de <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	461a      	mov	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80038da:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80038dc:	e067      	b.n	80039ae <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	f043 0301 	orr.w	r3, r3, #1
 80038e8:	b2da      	uxtb	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	611a      	str	r2, [r3, #16]
}
 80038f0:	e05d      	b.n	80039ae <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038fa:	d133      	bne.n	8003964 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003902:	b2db      	uxtb	r3, r3
 8003904:	2b21      	cmp	r3, #33	; 0x21
 8003906:	d109      	bne.n	800391c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800390c:	b2db      	uxtb	r3, r3
 800390e:	461a      	mov	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003918:	611a      	str	r2, [r3, #16]
 800391a:	e008      	b.n	800392e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003920:	b2db      	uxtb	r3, r3
 8003922:	f043 0301 	orr.w	r3, r3, #1
 8003926:	b2da      	uxtb	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003932:	2b00      	cmp	r3, #0
 8003934:	d004      	beq.n	8003940 <I2C_Master_SB+0x92>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800393a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800393c:	2b00      	cmp	r3, #0
 800393e:	d108      	bne.n	8003952 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003944:	2b00      	cmp	r3, #0
 8003946:	d032      	beq.n	80039ae <I2C_Master_SB+0x100>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800394e:	2b00      	cmp	r3, #0
 8003950:	d02d      	beq.n	80039ae <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	685a      	ldr	r2, [r3, #4]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003960:	605a      	str	r2, [r3, #4]
}
 8003962:	e024      	b.n	80039ae <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003968:	2b00      	cmp	r3, #0
 800396a:	d10e      	bne.n	800398a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003970:	b29b      	uxth	r3, r3
 8003972:	11db      	asrs	r3, r3, #7
 8003974:	b2db      	uxtb	r3, r3
 8003976:	f003 0306 	and.w	r3, r3, #6
 800397a:	b2db      	uxtb	r3, r3
 800397c:	f063 030f 	orn	r3, r3, #15
 8003980:	b2da      	uxtb	r2, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	611a      	str	r2, [r3, #16]
}
 8003988:	e011      	b.n	80039ae <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800398e:	2b01      	cmp	r3, #1
 8003990:	d10d      	bne.n	80039ae <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003996:	b29b      	uxth	r3, r3
 8003998:	11db      	asrs	r3, r3, #7
 800399a:	b2db      	uxtb	r3, r3
 800399c:	f003 0306 	and.w	r3, r3, #6
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	f063 030e 	orn	r3, r3, #14
 80039a6:	b2da      	uxtb	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	611a      	str	r2, [r3, #16]
}
 80039ae:	bf00      	nop
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr

080039ba <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80039ba:	b480      	push	{r7}
 80039bc:	b083      	sub	sp, #12
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c6:	b2da      	uxtb	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d004      	beq.n	80039e0 <I2C_Master_ADD10+0x26>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d108      	bne.n	80039f2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00c      	beq.n	8003a02 <I2C_Master_ADD10+0x48>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d007      	beq.n	8003a02 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	685a      	ldr	r2, [r3, #4]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a00:	605a      	str	r2, [r3, #4]
  }
}
 8003a02:	bf00      	nop
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr

08003a0e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003a0e:	b480      	push	{r7}
 8003a10:	b091      	sub	sp, #68	; 0x44
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a1c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a24:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	2b22      	cmp	r3, #34	; 0x22
 8003a36:	f040 8169 	bne.w	8003d0c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d10f      	bne.n	8003a62 <I2C_Master_ADDR+0x54>
 8003a42:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003a46:	2b40      	cmp	r3, #64	; 0x40
 8003a48:	d10b      	bne.n	8003a62 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	633b      	str	r3, [r7, #48]	; 0x30
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	695b      	ldr	r3, [r3, #20]
 8003a54:	633b      	str	r3, [r7, #48]	; 0x30
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	633b      	str	r3, [r7, #48]	; 0x30
 8003a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a60:	e160      	b.n	8003d24 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d11d      	bne.n	8003aa6 <I2C_Master_ADDR+0x98>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003a72:	d118      	bne.n	8003aa6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a74:	2300      	movs	r3, #0
 8003a76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a98:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a9e:	1c5a      	adds	r2, r3, #1
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	651a      	str	r2, [r3, #80]	; 0x50
 8003aa4:	e13e      	b.n	8003d24 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d113      	bne.n	8003ad8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	62bb      	str	r3, [r7, #40]	; 0x28
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ad4:	601a      	str	r2, [r3, #0]
 8003ad6:	e115      	b.n	8003d04 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	f040 808a 	bne.w	8003bf8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003aea:	d137      	bne.n	8003b5c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003afa:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b0a:	d113      	bne.n	8003b34 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b1a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	627b      	str	r3, [r7, #36]	; 0x24
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b32:	e0e7      	b.n	8003d04 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b34:	2300      	movs	r3, #0
 8003b36:	623b      	str	r3, [r7, #32]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	623b      	str	r3, [r7, #32]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	623b      	str	r3, [r7, #32]
 8003b48:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b58:	601a      	str	r2, [r3, #0]
 8003b5a:	e0d3      	b.n	8003d04 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b5e:	2b08      	cmp	r3, #8
 8003b60:	d02e      	beq.n	8003bc0 <I2C_Master_ADDR+0x1b2>
 8003b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b64:	2b20      	cmp	r3, #32
 8003b66:	d02b      	beq.n	8003bc0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b6a:	2b12      	cmp	r3, #18
 8003b6c:	d102      	bne.n	8003b74 <I2C_Master_ADDR+0x166>
 8003b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d125      	bne.n	8003bc0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b76:	2b04      	cmp	r3, #4
 8003b78:	d00e      	beq.n	8003b98 <I2C_Master_ADDR+0x18a>
 8003b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d00b      	beq.n	8003b98 <I2C_Master_ADDR+0x18a>
 8003b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b82:	2b10      	cmp	r3, #16
 8003b84:	d008      	beq.n	8003b98 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b94:	601a      	str	r2, [r3, #0]
 8003b96:	e007      	b.n	8003ba8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ba6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ba8:	2300      	movs	r3, #0
 8003baa:	61fb      	str	r3, [r7, #28]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	61fb      	str	r3, [r7, #28]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	61fb      	str	r3, [r7, #28]
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	e0a1      	b.n	8003d04 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bce:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	61bb      	str	r3, [r7, #24]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	61bb      	str	r3, [r7, #24]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	61bb      	str	r3, [r7, #24]
 8003be4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bf4:	601a      	str	r2, [r3, #0]
 8003bf6:	e085      	b.n	8003d04 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d14d      	bne.n	8003c9e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c04:	2b04      	cmp	r3, #4
 8003c06:	d016      	beq.n	8003c36 <I2C_Master_ADDR+0x228>
 8003c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d013      	beq.n	8003c36 <I2C_Master_ADDR+0x228>
 8003c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c10:	2b10      	cmp	r3, #16
 8003c12:	d010      	beq.n	8003c36 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c22:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c32:	601a      	str	r2, [r3, #0]
 8003c34:	e007      	b.n	8003c46 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c44:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c54:	d117      	bne.n	8003c86 <I2C_Master_ADDR+0x278>
 8003c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c58:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c5c:	d00b      	beq.n	8003c76 <I2C_Master_ADDR+0x268>
 8003c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d008      	beq.n	8003c76 <I2C_Master_ADDR+0x268>
 8003c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c66:	2b08      	cmp	r3, #8
 8003c68:	d005      	beq.n	8003c76 <I2C_Master_ADDR+0x268>
 8003c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c6c:	2b10      	cmp	r3, #16
 8003c6e:	d002      	beq.n	8003c76 <I2C_Master_ADDR+0x268>
 8003c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c72:	2b20      	cmp	r3, #32
 8003c74:	d107      	bne.n	8003c86 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	685a      	ldr	r2, [r3, #4]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c84:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c86:	2300      	movs	r3, #0
 8003c88:	617b      	str	r3, [r7, #20]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	695b      	ldr	r3, [r3, #20]
 8003c90:	617b      	str	r3, [r7, #20]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	617b      	str	r3, [r7, #20]
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	e032      	b.n	8003d04 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cac:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cbc:	d117      	bne.n	8003cee <I2C_Master_ADDR+0x2e0>
 8003cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003cc4:	d00b      	beq.n	8003cde <I2C_Master_ADDR+0x2d0>
 8003cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d008      	beq.n	8003cde <I2C_Master_ADDR+0x2d0>
 8003ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cce:	2b08      	cmp	r3, #8
 8003cd0:	d005      	beq.n	8003cde <I2C_Master_ADDR+0x2d0>
 8003cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd4:	2b10      	cmp	r3, #16
 8003cd6:	d002      	beq.n	8003cde <I2C_Master_ADDR+0x2d0>
 8003cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cda:	2b20      	cmp	r3, #32
 8003cdc:	d107      	bne.n	8003cee <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	685a      	ldr	r2, [r3, #4]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003cec:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cee:	2300      	movs	r3, #0
 8003cf0:	613b      	str	r3, [r7, #16]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	695b      	ldr	r3, [r3, #20]
 8003cf8:	613b      	str	r3, [r7, #16]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	613b      	str	r3, [r7, #16]
 8003d02:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003d0a:	e00b      	b.n	8003d24 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	60fb      	str	r3, [r7, #12]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	60fb      	str	r3, [r7, #12]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	60fb      	str	r3, [r7, #12]
 8003d20:	68fb      	ldr	r3, [r7, #12]
}
 8003d22:	e7ff      	b.n	8003d24 <I2C_Master_ADDR+0x316>
 8003d24:	bf00      	nop
 8003d26:	3744      	adds	r7, #68	; 0x44
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d3e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d02b      	beq.n	8003da2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4e:	781a      	ldrb	r2, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5a:	1c5a      	adds	r2, r3, #1
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	3b01      	subs	r3, #1
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d114      	bne.n	8003da2 <I2C_SlaveTransmit_TXE+0x72>
 8003d78:	7bfb      	ldrb	r3, [r7, #15]
 8003d7a:	2b29      	cmp	r3, #41	; 0x29
 8003d7c:	d111      	bne.n	8003da2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d8c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2221      	movs	r2, #33	; 0x21
 8003d92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2228      	movs	r2, #40	; 0x28
 8003d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f7ff f9f1 	bl	8003184 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003da2:	bf00      	nop
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003daa:	b480      	push	{r7}
 8003dac:	b083      	sub	sp, #12
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d011      	beq.n	8003de0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc0:	781a      	ldrb	r2, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dcc:	1c5a      	adds	r2, r3, #1
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003de0:	bf00      	nop
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dfa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d02c      	beq.n	8003e60 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	691a      	ldr	r2, [r3, #16]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e10:	b2d2      	uxtb	r2, r2
 8003e12:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e18:	1c5a      	adds	r2, r3, #1
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	3b01      	subs	r3, #1
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d114      	bne.n	8003e60 <I2C_SlaveReceive_RXNE+0x74>
 8003e36:	7bfb      	ldrb	r3, [r7, #15]
 8003e38:	2b2a      	cmp	r3, #42	; 0x2a
 8003e3a:	d111      	bne.n	8003e60 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	685a      	ldr	r2, [r3, #4]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e4a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2222      	movs	r2, #34	; 0x22
 8003e50:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2228      	movs	r2, #40	; 0x28
 8003e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f7ff f99c 	bl	8003198 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003e60:	bf00      	nop
 8003e62:	3710      	adds	r7, #16
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d012      	beq.n	8003ea0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	691a      	ldr	r2, [r3, #16]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e84:	b2d2      	uxtb	r2, r2
 8003e86:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8c:	1c5a      	adds	r2, r3, #1
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	3b01      	subs	r3, #1
 8003e9a:	b29a      	uxth	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ec6:	2b28      	cmp	r3, #40	; 0x28
 8003ec8:	d127      	bne.n	8003f1a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	685a      	ldr	r2, [r3, #4]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ed8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	089b      	lsrs	r3, r3, #2
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	09db      	lsrs	r3, r3, #7
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d103      	bne.n	8003efe <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	81bb      	strh	r3, [r7, #12]
 8003efc:	e002      	b.n	8003f04 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003f0c:	89ba      	ldrh	r2, [r7, #12]
 8003f0e:	7bfb      	ldrb	r3, [r7, #15]
 8003f10:	4619      	mov	r1, r3
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f7ff f94a 	bl	80031ac <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003f18:	e00e      	b.n	8003f38 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	60bb      	str	r3, [r7, #8]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	695b      	ldr	r3, [r3, #20]
 8003f24:	60bb      	str	r3, [r7, #8]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	60bb      	str	r3, [r7, #8]
 8003f2e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003f38:	bf00      	nop
 8003f3a:	3710      	adds	r7, #16
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f4e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	685a      	ldr	r2, [r3, #4]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f5e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003f60:	2300      	movs	r3, #0
 8003f62:	60bb      	str	r3, [r7, #8]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	60bb      	str	r3, [r7, #8]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f042 0201 	orr.w	r2, r2, #1
 8003f7a:	601a      	str	r2, [r3, #0]
 8003f7c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f8c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f9c:	d172      	bne.n	8004084 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003f9e:	7bfb      	ldrb	r3, [r7, #15]
 8003fa0:	2b22      	cmp	r3, #34	; 0x22
 8003fa2:	d002      	beq.n	8003faa <I2C_Slave_STOPF+0x6a>
 8003fa4:	7bfb      	ldrb	r3, [r7, #15]
 8003fa6:	2b2a      	cmp	r3, #42	; 0x2a
 8003fa8:	d135      	bne.n	8004016 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d005      	beq.n	8003fce <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc6:	f043 0204 	orr.w	r2, r3, #4
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	685a      	ldr	r2, [r3, #4]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fdc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7fd ff58 	bl	8001e98 <HAL_DMA_GetState>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d049      	beq.n	8004082 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff2:	4a69      	ldr	r2, [pc, #420]	; (8004198 <I2C_Slave_STOPF+0x258>)
 8003ff4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7fd ff2a 	bl	8001e54 <HAL_DMA_Abort_IT>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d03d      	beq.n	8004082 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800400a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004010:	4610      	mov	r0, r2
 8004012:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004014:	e035      	b.n	8004082 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	b29a      	uxth	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004028:	b29b      	uxth	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d005      	beq.n	800403a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004032:	f043 0204 	orr.w	r2, r3, #4
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	685a      	ldr	r2, [r3, #4]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004048:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800404e:	4618      	mov	r0, r3
 8004050:	f7fd ff22 	bl	8001e98 <HAL_DMA_GetState>
 8004054:	4603      	mov	r3, r0
 8004056:	2b01      	cmp	r3, #1
 8004058:	d014      	beq.n	8004084 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800405e:	4a4e      	ldr	r2, [pc, #312]	; (8004198 <I2C_Slave_STOPF+0x258>)
 8004060:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004066:	4618      	mov	r0, r3
 8004068:	f7fd fef4 	bl	8001e54 <HAL_DMA_Abort_IT>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d008      	beq.n	8004084 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800407c:	4610      	mov	r0, r2
 800407e:	4798      	blx	r3
 8004080:	e000      	b.n	8004084 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004082:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004088:	b29b      	uxth	r3, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	d03e      	beq.n	800410c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	695b      	ldr	r3, [r3, #20]
 8004094:	f003 0304 	and.w	r3, r3, #4
 8004098:	2b04      	cmp	r3, #4
 800409a:	d112      	bne.n	80040c2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	691a      	ldr	r2, [r3, #16]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a6:	b2d2      	uxtb	r2, r2
 80040a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ae:	1c5a      	adds	r2, r3, #1
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	3b01      	subs	r3, #1
 80040bc:	b29a      	uxth	r2, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040cc:	2b40      	cmp	r3, #64	; 0x40
 80040ce:	d112      	bne.n	80040f6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	691a      	ldr	r2, [r3, #16]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040da:	b2d2      	uxtb	r2, r2
 80040dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e2:	1c5a      	adds	r2, r3, #1
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	3b01      	subs	r3, #1
 80040f0:	b29a      	uxth	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d005      	beq.n	800410c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004104:	f043 0204 	orr.w	r2, r3, #4
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004110:	2b00      	cmp	r3, #0
 8004112:	d003      	beq.n	800411c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 f8b3 	bl	8004280 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800411a:	e039      	b.n	8004190 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800411c:	7bfb      	ldrb	r3, [r7, #15]
 800411e:	2b2a      	cmp	r3, #42	; 0x2a
 8004120:	d109      	bne.n	8004136 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2228      	movs	r2, #40	; 0x28
 800412c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f7ff f831 	bl	8003198 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b28      	cmp	r3, #40	; 0x28
 8004140:	d111      	bne.n	8004166 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a15      	ldr	r2, [pc, #84]	; (800419c <I2C_Slave_STOPF+0x25c>)
 8004146:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2220      	movs	r2, #32
 8004152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f7ff f832 	bl	80031c8 <HAL_I2C_ListenCpltCallback>
}
 8004164:	e014      	b.n	8004190 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416a:	2b22      	cmp	r3, #34	; 0x22
 800416c:	d002      	beq.n	8004174 <I2C_Slave_STOPF+0x234>
 800416e:	7bfb      	ldrb	r3, [r7, #15]
 8004170:	2b22      	cmp	r3, #34	; 0x22
 8004172:	d10d      	bne.n	8004190 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2220      	movs	r2, #32
 800417e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f7ff f804 	bl	8003198 <HAL_I2C_SlaveRxCpltCallback>
}
 8004190:	bf00      	nop
 8004192:	3710      	adds	r7, #16
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	080048b1 	.word	0x080048b1
 800419c:	ffff0000 	.word	0xffff0000

080041a0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ae:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	2b08      	cmp	r3, #8
 80041ba:	d002      	beq.n	80041c2 <I2C_Slave_AF+0x22>
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	2b20      	cmp	r3, #32
 80041c0:	d129      	bne.n	8004216 <I2C_Slave_AF+0x76>
 80041c2:	7bfb      	ldrb	r3, [r7, #15]
 80041c4:	2b28      	cmp	r3, #40	; 0x28
 80041c6:	d126      	bne.n	8004216 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a2c      	ldr	r2, [pc, #176]	; (800427c <I2C_Slave_AF+0xdc>)
 80041cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	685a      	ldr	r2, [r3, #4]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80041dc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041e6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041f6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2220      	movs	r2, #32
 8004202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f7fe ffda 	bl	80031c8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004214:	e02e      	b.n	8004274 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004216:	7bfb      	ldrb	r3, [r7, #15]
 8004218:	2b21      	cmp	r3, #33	; 0x21
 800421a:	d126      	bne.n	800426a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a17      	ldr	r2, [pc, #92]	; (800427c <I2C_Slave_AF+0xdc>)
 8004220:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2221      	movs	r2, #33	; 0x21
 8004226:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2220      	movs	r2, #32
 800422c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	685a      	ldr	r2, [r3, #4]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004246:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004250:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004260:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f7fe ff8e 	bl	8003184 <HAL_I2C_SlaveTxCpltCallback>
}
 8004268:	e004      	b.n	8004274 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004272:	615a      	str	r2, [r3, #20]
}
 8004274:	bf00      	nop
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	ffff0000 	.word	0xffff0000

08004280 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800428e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004296:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004298:	7bbb      	ldrb	r3, [r7, #14]
 800429a:	2b10      	cmp	r3, #16
 800429c:	d002      	beq.n	80042a4 <I2C_ITError+0x24>
 800429e:	7bbb      	ldrb	r3, [r7, #14]
 80042a0:	2b40      	cmp	r3, #64	; 0x40
 80042a2:	d10a      	bne.n	80042ba <I2C_ITError+0x3a>
 80042a4:	7bfb      	ldrb	r3, [r7, #15]
 80042a6:	2b22      	cmp	r3, #34	; 0x22
 80042a8:	d107      	bne.n	80042ba <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042b8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80042ba:	7bfb      	ldrb	r3, [r7, #15]
 80042bc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80042c0:	2b28      	cmp	r3, #40	; 0x28
 80042c2:	d107      	bne.n	80042d4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2228      	movs	r2, #40	; 0x28
 80042ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80042d2:	e015      	b.n	8004300 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042e2:	d00a      	beq.n	80042fa <I2C_ITError+0x7a>
 80042e4:	7bfb      	ldrb	r3, [r7, #15]
 80042e6:	2b60      	cmp	r3, #96	; 0x60
 80042e8:	d007      	beq.n	80042fa <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2220      	movs	r2, #32
 80042ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800430a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800430e:	d162      	bne.n	80043d6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	685a      	ldr	r2, [r3, #4]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800431e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004324:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004328:	b2db      	uxtb	r3, r3
 800432a:	2b01      	cmp	r3, #1
 800432c:	d020      	beq.n	8004370 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004332:	4a6a      	ldr	r2, [pc, #424]	; (80044dc <I2C_ITError+0x25c>)
 8004334:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800433a:	4618      	mov	r0, r3
 800433c:	f7fd fd8a 	bl	8001e54 <HAL_DMA_Abort_IT>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	f000 8089 	beq.w	800445a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f022 0201 	bic.w	r2, r2, #1
 8004356:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2220      	movs	r2, #32
 800435c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800436a:	4610      	mov	r0, r2
 800436c:	4798      	blx	r3
 800436e:	e074      	b.n	800445a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004374:	4a59      	ldr	r2, [pc, #356]	; (80044dc <I2C_ITError+0x25c>)
 8004376:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437c:	4618      	mov	r0, r3
 800437e:	f7fd fd69 	bl	8001e54 <HAL_DMA_Abort_IT>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d068      	beq.n	800445a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004392:	2b40      	cmp	r3, #64	; 0x40
 8004394:	d10b      	bne.n	80043ae <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	691a      	ldr	r2, [r3, #16]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a0:	b2d2      	uxtb	r2, r2
 80043a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a8:	1c5a      	adds	r2, r3, #1
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f022 0201 	bic.w	r2, r2, #1
 80043bc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2220      	movs	r2, #32
 80043c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80043d0:	4610      	mov	r0, r2
 80043d2:	4798      	blx	r3
 80043d4:	e041      	b.n	800445a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	2b60      	cmp	r3, #96	; 0x60
 80043e0:	d125      	bne.n	800442e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2220      	movs	r2, #32
 80043e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043fa:	2b40      	cmp	r3, #64	; 0x40
 80043fc:	d10b      	bne.n	8004416 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	691a      	ldr	r2, [r3, #16]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004408:	b2d2      	uxtb	r2, r2
 800440a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004410:	1c5a      	adds	r2, r3, #1
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f022 0201 	bic.w	r2, r2, #1
 8004424:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f7fe fef6 	bl	8003218 <HAL_I2C_AbortCpltCallback>
 800442c:	e015      	b.n	800445a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	695b      	ldr	r3, [r3, #20]
 8004434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004438:	2b40      	cmp	r3, #64	; 0x40
 800443a:	d10b      	bne.n	8004454 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	691a      	ldr	r2, [r3, #16]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004446:	b2d2      	uxtb	r2, r2
 8004448:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444e:	1c5a      	adds	r2, r3, #1
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f7fe fed5 	bl	8003204 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	f003 0301 	and.w	r3, r3, #1
 8004466:	2b00      	cmp	r3, #0
 8004468:	d10e      	bne.n	8004488 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004470:	2b00      	cmp	r3, #0
 8004472:	d109      	bne.n	8004488 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800447a:	2b00      	cmp	r3, #0
 800447c:	d104      	bne.n	8004488 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004484:	2b00      	cmp	r3, #0
 8004486:	d007      	beq.n	8004498 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	685a      	ldr	r2, [r3, #4]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004496:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800449e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a4:	f003 0304 	and.w	r3, r3, #4
 80044a8:	2b04      	cmp	r3, #4
 80044aa:	d113      	bne.n	80044d4 <I2C_ITError+0x254>
 80044ac:	7bfb      	ldrb	r3, [r7, #15]
 80044ae:	2b28      	cmp	r3, #40	; 0x28
 80044b0:	d110      	bne.n	80044d4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a0a      	ldr	r2, [pc, #40]	; (80044e0 <I2C_ITError+0x260>)
 80044b6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2220      	movs	r2, #32
 80044c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f7fe fe7a 	bl	80031c8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80044d4:	bf00      	nop
 80044d6:	3710      	adds	r7, #16
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	080048b1 	.word	0x080048b1
 80044e0:	ffff0000 	.word	0xffff0000

080044e4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b088      	sub	sp, #32
 80044e8:	af02      	add	r7, sp, #8
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	607a      	str	r2, [r7, #4]
 80044ee:	603b      	str	r3, [r7, #0]
 80044f0:	460b      	mov	r3, r1
 80044f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	2b08      	cmp	r3, #8
 80044fe:	d006      	beq.n	800450e <I2C_MasterRequestWrite+0x2a>
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	2b01      	cmp	r3, #1
 8004504:	d003      	beq.n	800450e <I2C_MasterRequestWrite+0x2a>
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800450c:	d108      	bne.n	8004520 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800451c:	601a      	str	r2, [r3, #0]
 800451e:	e00b      	b.n	8004538 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004524:	2b12      	cmp	r3, #18
 8004526:	d107      	bne.n	8004538 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004536:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	9300      	str	r3, [sp, #0]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004544:	68f8      	ldr	r0, [r7, #12]
 8004546:	f000 fa5b 	bl	8004a00 <I2C_WaitOnFlagUntilTimeout>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00d      	beq.n	800456c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800455a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800455e:	d103      	bne.n	8004568 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004566:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e035      	b.n	80045d8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004574:	d108      	bne.n	8004588 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004576:	897b      	ldrh	r3, [r7, #10]
 8004578:	b2db      	uxtb	r3, r3
 800457a:	461a      	mov	r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004584:	611a      	str	r2, [r3, #16]
 8004586:	e01b      	b.n	80045c0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004588:	897b      	ldrh	r3, [r7, #10]
 800458a:	11db      	asrs	r3, r3, #7
 800458c:	b2db      	uxtb	r3, r3
 800458e:	f003 0306 	and.w	r3, r3, #6
 8004592:	b2db      	uxtb	r3, r3
 8004594:	f063 030f 	orn	r3, r3, #15
 8004598:	b2da      	uxtb	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	490e      	ldr	r1, [pc, #56]	; (80045e0 <I2C_MasterRequestWrite+0xfc>)
 80045a6:	68f8      	ldr	r0, [r7, #12]
 80045a8:	f000 fa81 	bl	8004aae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d001      	beq.n	80045b6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e010      	b.n	80045d8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80045b6:	897b      	ldrh	r3, [r7, #10]
 80045b8:	b2da      	uxtb	r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	4907      	ldr	r1, [pc, #28]	; (80045e4 <I2C_MasterRequestWrite+0x100>)
 80045c6:	68f8      	ldr	r0, [r7, #12]
 80045c8:	f000 fa71 	bl	8004aae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d001      	beq.n	80045d6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e000      	b.n	80045d8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80045d6:	2300      	movs	r3, #0
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3718      	adds	r7, #24
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	00010008 	.word	0x00010008
 80045e4:	00010002 	.word	0x00010002

080045e8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b088      	sub	sp, #32
 80045ec:	af02      	add	r7, sp, #8
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	607a      	str	r2, [r7, #4]
 80045f2:	603b      	str	r3, [r7, #0]
 80045f4:	460b      	mov	r3, r1
 80045f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800460c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	2b08      	cmp	r3, #8
 8004612:	d006      	beq.n	8004622 <I2C_MasterRequestRead+0x3a>
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	2b01      	cmp	r3, #1
 8004618:	d003      	beq.n	8004622 <I2C_MasterRequestRead+0x3a>
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004620:	d108      	bne.n	8004634 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004630:	601a      	str	r2, [r3, #0]
 8004632:	e00b      	b.n	800464c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004638:	2b11      	cmp	r3, #17
 800463a:	d107      	bne.n	800464c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800464a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	9300      	str	r3, [sp, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004658:	68f8      	ldr	r0, [r7, #12]
 800465a:	f000 f9d1 	bl	8004a00 <I2C_WaitOnFlagUntilTimeout>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00d      	beq.n	8004680 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800466e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004672:	d103      	bne.n	800467c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f44f 7200 	mov.w	r2, #512	; 0x200
 800467a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e079      	b.n	8004774 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004688:	d108      	bne.n	800469c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800468a:	897b      	ldrh	r3, [r7, #10]
 800468c:	b2db      	uxtb	r3, r3
 800468e:	f043 0301 	orr.w	r3, r3, #1
 8004692:	b2da      	uxtb	r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	611a      	str	r2, [r3, #16]
 800469a:	e05f      	b.n	800475c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800469c:	897b      	ldrh	r3, [r7, #10]
 800469e:	11db      	asrs	r3, r3, #7
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	f003 0306 	and.w	r3, r3, #6
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	f063 030f 	orn	r3, r3, #15
 80046ac:	b2da      	uxtb	r2, r3
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	4930      	ldr	r1, [pc, #192]	; (800477c <I2C_MasterRequestRead+0x194>)
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	f000 f9f7 	bl	8004aae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d001      	beq.n	80046ca <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e054      	b.n	8004774 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80046ca:	897b      	ldrh	r3, [r7, #10]
 80046cc:	b2da      	uxtb	r2, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	4929      	ldr	r1, [pc, #164]	; (8004780 <I2C_MasterRequestRead+0x198>)
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	f000 f9e7 	bl	8004aae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d001      	beq.n	80046ea <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e044      	b.n	8004774 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046ea:	2300      	movs	r3, #0
 80046ec:	613b      	str	r3, [r7, #16]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	695b      	ldr	r3, [r3, #20]
 80046f4:	613b      	str	r3, [r7, #16]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	613b      	str	r3, [r7, #16]
 80046fe:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800470e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	9300      	str	r3, [sp, #0]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f000 f96f 	bl	8004a00 <I2C_WaitOnFlagUntilTimeout>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00d      	beq.n	8004744 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004732:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004736:	d103      	bne.n	8004740 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800473e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e017      	b.n	8004774 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004744:	897b      	ldrh	r3, [r7, #10]
 8004746:	11db      	asrs	r3, r3, #7
 8004748:	b2db      	uxtb	r3, r3
 800474a:	f003 0306 	and.w	r3, r3, #6
 800474e:	b2db      	uxtb	r3, r3
 8004750:	f063 030e 	orn	r3, r3, #14
 8004754:	b2da      	uxtb	r2, r3
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	4907      	ldr	r1, [pc, #28]	; (8004780 <I2C_MasterRequestRead+0x198>)
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	f000 f9a3 	bl	8004aae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d001      	beq.n	8004772 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e000      	b.n	8004774 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	3718      	adds	r7, #24
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	00010008 	.word	0x00010008
 8004780:	00010002 	.word	0x00010002

08004784 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b088      	sub	sp, #32
 8004788:	af02      	add	r7, sp, #8
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	4608      	mov	r0, r1
 800478e:	4611      	mov	r1, r2
 8004790:	461a      	mov	r2, r3
 8004792:	4603      	mov	r3, r0
 8004794:	817b      	strh	r3, [r7, #10]
 8004796:	460b      	mov	r3, r1
 8004798:	813b      	strh	r3, [r7, #8]
 800479a:	4613      	mov	r3, r2
 800479c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b0:	9300      	str	r3, [sp, #0]
 80047b2:	6a3b      	ldr	r3, [r7, #32]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	f000 f920 	bl	8004a00 <I2C_WaitOnFlagUntilTimeout>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00d      	beq.n	80047e2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047d4:	d103      	bne.n	80047de <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e05f      	b.n	80048a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80047e2:	897b      	ldrh	r3, [r7, #10]
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	461a      	mov	r2, r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80047f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f4:	6a3a      	ldr	r2, [r7, #32]
 80047f6:	492d      	ldr	r1, [pc, #180]	; (80048ac <I2C_RequestMemoryWrite+0x128>)
 80047f8:	68f8      	ldr	r0, [r7, #12]
 80047fa:	f000 f958 	bl	8004aae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d001      	beq.n	8004808 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e04c      	b.n	80048a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004808:	2300      	movs	r3, #0
 800480a:	617b      	str	r3, [r7, #20]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	617b      	str	r3, [r7, #20]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	617b      	str	r3, [r7, #20]
 800481c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800481e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004820:	6a39      	ldr	r1, [r7, #32]
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	f000 f9c2 	bl	8004bac <I2C_WaitOnTXEFlagUntilTimeout>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00d      	beq.n	800484a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004832:	2b04      	cmp	r3, #4
 8004834:	d107      	bne.n	8004846 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004844:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e02b      	b.n	80048a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800484a:	88fb      	ldrh	r3, [r7, #6]
 800484c:	2b01      	cmp	r3, #1
 800484e:	d105      	bne.n	800485c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004850:	893b      	ldrh	r3, [r7, #8]
 8004852:	b2da      	uxtb	r2, r3
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	611a      	str	r2, [r3, #16]
 800485a:	e021      	b.n	80048a0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800485c:	893b      	ldrh	r3, [r7, #8]
 800485e:	0a1b      	lsrs	r3, r3, #8
 8004860:	b29b      	uxth	r3, r3
 8004862:	b2da      	uxtb	r2, r3
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800486a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800486c:	6a39      	ldr	r1, [r7, #32]
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	f000 f99c 	bl	8004bac <I2C_WaitOnTXEFlagUntilTimeout>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00d      	beq.n	8004896 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487e:	2b04      	cmp	r3, #4
 8004880:	d107      	bne.n	8004892 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004890:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e005      	b.n	80048a2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004896:	893b      	ldrh	r3, [r7, #8]
 8004898:	b2da      	uxtb	r2, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3718      	adds	r7, #24
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	00010002 	.word	0x00010002

080048b0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b086      	sub	sp, #24
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80048b8:	2300      	movs	r3, #0
 80048ba:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048c8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80048ca:	4b4b      	ldr	r3, [pc, #300]	; (80049f8 <I2C_DMAAbort+0x148>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	08db      	lsrs	r3, r3, #3
 80048d0:	4a4a      	ldr	r2, [pc, #296]	; (80049fc <I2C_DMAAbort+0x14c>)
 80048d2:	fba2 2303 	umull	r2, r3, r2, r3
 80048d6:	0a1a      	lsrs	r2, r3, #8
 80048d8:	4613      	mov	r3, r2
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	4413      	add	r3, r2
 80048de:	00da      	lsls	r2, r3, #3
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d106      	bne.n	80048f8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ee:	f043 0220 	orr.w	r2, r3, #32
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80048f6:	e00a      	b.n	800490e <I2C_DMAAbort+0x5e>
    }
    count--;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	3b01      	subs	r3, #1
 80048fc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004908:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800490c:	d0ea      	beq.n	80048e4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004912:	2b00      	cmp	r3, #0
 8004914:	d003      	beq.n	800491e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800491a:	2200      	movs	r2, #0
 800491c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004922:	2b00      	cmp	r3, #0
 8004924:	d003      	beq.n	800492e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492a:	2200      	movs	r2, #0
 800492c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800493c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	2200      	movs	r2, #0
 8004942:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004948:	2b00      	cmp	r3, #0
 800494a:	d003      	beq.n	8004954 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004950:	2200      	movs	r2, #0
 8004952:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004958:	2b00      	cmp	r3, #0
 800495a:	d003      	beq.n	8004964 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004960:	2200      	movs	r2, #0
 8004962:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f022 0201 	bic.w	r2, r2, #1
 8004972:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800497a:	b2db      	uxtb	r3, r3
 800497c:	2b60      	cmp	r3, #96	; 0x60
 800497e:	d10e      	bne.n	800499e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	2220      	movs	r2, #32
 8004984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	2200      	movs	r2, #0
 800498c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	2200      	movs	r2, #0
 8004994:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004996:	6978      	ldr	r0, [r7, #20]
 8004998:	f7fe fc3e 	bl	8003218 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800499c:	e027      	b.n	80049ee <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800499e:	7cfb      	ldrb	r3, [r7, #19]
 80049a0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80049a4:	2b28      	cmp	r3, #40	; 0x28
 80049a6:	d117      	bne.n	80049d8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f042 0201 	orr.w	r2, r2, #1
 80049b6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049c6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	2200      	movs	r2, #0
 80049cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	2228      	movs	r2, #40	; 0x28
 80049d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80049d6:	e007      	b.n	80049e8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	2220      	movs	r2, #32
 80049dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80049e8:	6978      	ldr	r0, [r7, #20]
 80049ea:	f7fe fc0b 	bl	8003204 <HAL_I2C_ErrorCallback>
}
 80049ee:	bf00      	nop
 80049f0:	3718      	adds	r7, #24
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	20000008 	.word	0x20000008
 80049fc:	14f8b589 	.word	0x14f8b589

08004a00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	603b      	str	r3, [r7, #0]
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a10:	e025      	b.n	8004a5e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a18:	d021      	beq.n	8004a5e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a1a:	f7fd f8bd 	bl	8001b98 <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	683a      	ldr	r2, [r7, #0]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d302      	bcc.n	8004a30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d116      	bne.n	8004a5e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2200      	movs	r2, #0
 8004a34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2220      	movs	r2, #32
 8004a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4a:	f043 0220 	orr.w	r2, r3, #32
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e023      	b.n	8004aa6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	0c1b      	lsrs	r3, r3, #16
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d10d      	bne.n	8004a84 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	43da      	mvns	r2, r3
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	4013      	ands	r3, r2
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	bf0c      	ite	eq
 8004a7a:	2301      	moveq	r3, #1
 8004a7c:	2300      	movne	r3, #0
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	461a      	mov	r2, r3
 8004a82:	e00c      	b.n	8004a9e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	699b      	ldr	r3, [r3, #24]
 8004a8a:	43da      	mvns	r2, r3
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	4013      	ands	r3, r2
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	bf0c      	ite	eq
 8004a96:	2301      	moveq	r3, #1
 8004a98:	2300      	movne	r3, #0
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	79fb      	ldrb	r3, [r7, #7]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d0b6      	beq.n	8004a12 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3710      	adds	r7, #16
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}

08004aae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004aae:	b580      	push	{r7, lr}
 8004ab0:	b084      	sub	sp, #16
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	60f8      	str	r0, [r7, #12]
 8004ab6:	60b9      	str	r1, [r7, #8]
 8004ab8:	607a      	str	r2, [r7, #4]
 8004aba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004abc:	e051      	b.n	8004b62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	695b      	ldr	r3, [r3, #20]
 8004ac4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ac8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004acc:	d123      	bne.n	8004b16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004adc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ae6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2200      	movs	r2, #0
 8004aec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2220      	movs	r2, #32
 8004af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b02:	f043 0204 	orr.w	r2, r3, #4
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e046      	b.n	8004ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b1c:	d021      	beq.n	8004b62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b1e:	f7fd f83b 	bl	8001b98 <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d302      	bcc.n	8004b34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d116      	bne.n	8004b62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2200      	movs	r2, #0
 8004b38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2220      	movs	r2, #32
 8004b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4e:	f043 0220 	orr.w	r2, r3, #32
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e020      	b.n	8004ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	0c1b      	lsrs	r3, r3, #16
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d10c      	bne.n	8004b86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	43da      	mvns	r2, r3
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	4013      	ands	r3, r2
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	bf14      	ite	ne
 8004b7e:	2301      	movne	r3, #1
 8004b80:	2300      	moveq	r3, #0
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	e00b      	b.n	8004b9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	699b      	ldr	r3, [r3, #24]
 8004b8c:	43da      	mvns	r2, r3
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	4013      	ands	r3, r2
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	bf14      	ite	ne
 8004b98:	2301      	movne	r3, #1
 8004b9a:	2300      	moveq	r3, #0
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d18d      	bne.n	8004abe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3710      	adds	r7, #16
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bb8:	e02d      	b.n	8004c16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004bba:	68f8      	ldr	r0, [r7, #12]
 8004bbc:	f000 f900 	bl	8004dc0 <I2C_IsAcknowledgeFailed>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d001      	beq.n	8004bca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e02d      	b.n	8004c26 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd0:	d021      	beq.n	8004c16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bd2:	f7fc ffe1 	bl	8001b98 <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	68ba      	ldr	r2, [r7, #8]
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d302      	bcc.n	8004be8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d116      	bne.n	8004c16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2200      	movs	r2, #0
 8004bec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2220      	movs	r2, #32
 8004bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c02:	f043 0220 	orr.w	r2, r3, #32
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e007      	b.n	8004c26 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	695b      	ldr	r3, [r3, #20]
 8004c1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c20:	2b80      	cmp	r3, #128	; 0x80
 8004c22:	d1ca      	bne.n	8004bba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3710      	adds	r7, #16
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}

08004c2e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b084      	sub	sp, #16
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	60f8      	str	r0, [r7, #12]
 8004c36:	60b9      	str	r1, [r7, #8]
 8004c38:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c3a:	e02d      	b.n	8004c98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c3c:	68f8      	ldr	r0, [r7, #12]
 8004c3e:	f000 f8bf 	bl	8004dc0 <I2C_IsAcknowledgeFailed>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d001      	beq.n	8004c4c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e02d      	b.n	8004ca8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c52:	d021      	beq.n	8004c98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c54:	f7fc ffa0 	bl	8001b98 <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	68ba      	ldr	r2, [r7, #8]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d302      	bcc.n	8004c6a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d116      	bne.n	8004c98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2220      	movs	r2, #32
 8004c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c84:	f043 0220 	orr.w	r2, r3, #32
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e007      	b.n	8004ca8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	f003 0304 	and.w	r3, r3, #4
 8004ca2:	2b04      	cmp	r3, #4
 8004ca4:	d1ca      	bne.n	8004c3c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3710      	adds	r7, #16
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004cbc:	4b13      	ldr	r3, [pc, #76]	; (8004d0c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	08db      	lsrs	r3, r3, #3
 8004cc2:	4a13      	ldr	r2, [pc, #76]	; (8004d10 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc8:	0a1a      	lsrs	r2, r3, #8
 8004cca:	4613      	mov	r3, r2
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	4413      	add	r3, r2
 8004cd0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	3b01      	subs	r3, #1
 8004cd6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d107      	bne.n	8004cee <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce2:	f043 0220 	orr.w	r2, r3, #32
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e008      	b.n	8004d00 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cfc:	d0e9      	beq.n	8004cd2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3714      	adds	r7, #20
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr
 8004d0c:	20000008 	.word	0x20000008
 8004d10:	14f8b589 	.word	0x14f8b589

08004d14 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d20:	e042      	b.n	8004da8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	695b      	ldr	r3, [r3, #20]
 8004d28:	f003 0310 	and.w	r3, r3, #16
 8004d2c:	2b10      	cmp	r3, #16
 8004d2e:	d119      	bne.n	8004d64 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f06f 0210 	mvn.w	r2, #16
 8004d38:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2220      	movs	r2, #32
 8004d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e029      	b.n	8004db8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d64:	f7fc ff18 	bl	8001b98 <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	68ba      	ldr	r2, [r7, #8]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d302      	bcc.n	8004d7a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d116      	bne.n	8004da8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2220      	movs	r2, #32
 8004d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d94:	f043 0220 	orr.w	r2, r3, #32
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e007      	b.n	8004db8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004db2:	2b40      	cmp	r3, #64	; 0x40
 8004db4:	d1b5      	bne.n	8004d22 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3710      	adds	r7, #16
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	695b      	ldr	r3, [r3, #20]
 8004dce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dd6:	d11b      	bne.n	8004e10 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004de0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2220      	movs	r2, #32
 8004dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfc:	f043 0204 	orr.w	r2, r3, #4
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e000      	b.n	8004e12 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	370c      	adds	r7, #12
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr

08004e1e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004e1e:	b480      	push	{r7}
 8004e20:	b083      	sub	sp, #12
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004e2e:	d103      	bne.n	8004e38 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004e36:	e007      	b.n	8004e48 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004e40:	d102      	bne.n	8004e48 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2208      	movs	r2, #8
 8004e46:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004e48:	bf00      	nop
 8004e4a:	370c      	adds	r7, #12
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b086      	sub	sp, #24
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d101      	bne.n	8004e66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e264      	b.n	8005330 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d075      	beq.n	8004f5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e72:	4ba3      	ldr	r3, [pc, #652]	; (8005100 <HAL_RCC_OscConfig+0x2ac>)
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f003 030c 	and.w	r3, r3, #12
 8004e7a:	2b04      	cmp	r3, #4
 8004e7c:	d00c      	beq.n	8004e98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e7e:	4ba0      	ldr	r3, [pc, #640]	; (8005100 <HAL_RCC_OscConfig+0x2ac>)
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e86:	2b08      	cmp	r3, #8
 8004e88:	d112      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e8a:	4b9d      	ldr	r3, [pc, #628]	; (8005100 <HAL_RCC_OscConfig+0x2ac>)
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e96:	d10b      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e98:	4b99      	ldr	r3, [pc, #612]	; (8005100 <HAL_RCC_OscConfig+0x2ac>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d05b      	beq.n	8004f5c <HAL_RCC_OscConfig+0x108>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d157      	bne.n	8004f5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e23f      	b.n	8005330 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eb8:	d106      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x74>
 8004eba:	4b91      	ldr	r3, [pc, #580]	; (8005100 <HAL_RCC_OscConfig+0x2ac>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a90      	ldr	r2, [pc, #576]	; (8005100 <HAL_RCC_OscConfig+0x2ac>)
 8004ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ec4:	6013      	str	r3, [r2, #0]
 8004ec6:	e01d      	b.n	8004f04 <HAL_RCC_OscConfig+0xb0>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ed0:	d10c      	bne.n	8004eec <HAL_RCC_OscConfig+0x98>
 8004ed2:	4b8b      	ldr	r3, [pc, #556]	; (8005100 <HAL_RCC_OscConfig+0x2ac>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a8a      	ldr	r2, [pc, #552]	; (8005100 <HAL_RCC_OscConfig+0x2ac>)
 8004ed8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004edc:	6013      	str	r3, [r2, #0]
 8004ede:	4b88      	ldr	r3, [pc, #544]	; (8005100 <HAL_RCC_OscConfig+0x2ac>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a87      	ldr	r2, [pc, #540]	; (8005100 <HAL_RCC_OscConfig+0x2ac>)
 8004ee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ee8:	6013      	str	r3, [r2, #0]
 8004eea:	e00b      	b.n	8004f04 <HAL_RCC_OscConfig+0xb0>
 8004eec:	4b84      	ldr	r3, [pc, #528]	; (8005100 <HAL_RCC_OscConfig+0x2ac>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a83      	ldr	r2, [pc, #524]	; (8005100 <HAL_RCC_OscConfig+0x2ac>)
 8004ef2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ef6:	6013      	str	r3, [r2, #0]
 8004ef8:	4b81      	ldr	r3, [pc, #516]	; (8005100 <HAL_RCC_OscConfig+0x2ac>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a80      	ldr	r2, [pc, #512]	; (8005100 <HAL_RCC_OscConfig+0x2ac>)
 8004efe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d013      	beq.n	8004f34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f0c:	f7fc fe44 	bl	8001b98 <HAL_GetTick>
 8004f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f12:	e008      	b.n	8004f26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f14:	f7fc fe40 	bl	8001b98 <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	2b64      	cmp	r3, #100	; 0x64
 8004f20:	d901      	bls.n	8004f26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e204      	b.n	8005330 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f26:	4b76      	ldr	r3, [pc, #472]	; (8005100 <HAL_RCC_OscConfig+0x2ac>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d0f0      	beq.n	8004f14 <HAL_RCC_OscConfig+0xc0>
 8004f32:	e014      	b.n	8004f5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f34:	f7fc fe30 	bl	8001b98 <HAL_GetTick>
 8004f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f3a:	e008      	b.n	8004f4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f3c:	f7fc fe2c 	bl	8001b98 <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	2b64      	cmp	r3, #100	; 0x64
 8004f48:	d901      	bls.n	8004f4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e1f0      	b.n	8005330 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f4e:	4b6c      	ldr	r3, [pc, #432]	; (8005100 <HAL_RCC_OscConfig+0x2ac>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d1f0      	bne.n	8004f3c <HAL_RCC_OscConfig+0xe8>
 8004f5a:	e000      	b.n	8004f5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0302 	and.w	r3, r3, #2
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d063      	beq.n	8005032 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f6a:	4b65      	ldr	r3, [pc, #404]	; (8005100 <HAL_RCC_OscConfig+0x2ac>)
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f003 030c 	and.w	r3, r3, #12
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00b      	beq.n	8004f8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f76:	4b62      	ldr	r3, [pc, #392]	; (8005100 <HAL_RCC_OscConfig+0x2ac>)
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f7e:	2b08      	cmp	r3, #8
 8004f80:	d11c      	bne.n	8004fbc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f82:	4b5f      	ldr	r3, [pc, #380]	; (8005100 <HAL_RCC_OscConfig+0x2ac>)
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d116      	bne.n	8004fbc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f8e:	4b5c      	ldr	r3, [pc, #368]	; (8005100 <HAL_RCC_OscConfig+0x2ac>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0302 	and.w	r3, r3, #2
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d005      	beq.n	8004fa6 <HAL_RCC_OscConfig+0x152>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d001      	beq.n	8004fa6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e1c4      	b.n	8005330 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fa6:	4b56      	ldr	r3, [pc, #344]	; (8005100 <HAL_RCC_OscConfig+0x2ac>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	00db      	lsls	r3, r3, #3
 8004fb4:	4952      	ldr	r1, [pc, #328]	; (8005100 <HAL_RCC_OscConfig+0x2ac>)
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fba:	e03a      	b.n	8005032 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d020      	beq.n	8005006 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fc4:	4b4f      	ldr	r3, [pc, #316]	; (8005104 <HAL_RCC_OscConfig+0x2b0>)
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fca:	f7fc fde5 	bl	8001b98 <HAL_GetTick>
 8004fce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fd0:	e008      	b.n	8004fe4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fd2:	f7fc fde1 	bl	8001b98 <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d901      	bls.n	8004fe4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	e1a5      	b.n	8005330 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fe4:	4b46      	ldr	r3, [pc, #280]	; (8005100 <HAL_RCC_OscConfig+0x2ac>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0302 	and.w	r3, r3, #2
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d0f0      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ff0:	4b43      	ldr	r3, [pc, #268]	; (8005100 <HAL_RCC_OscConfig+0x2ac>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	00db      	lsls	r3, r3, #3
 8004ffe:	4940      	ldr	r1, [pc, #256]	; (8005100 <HAL_RCC_OscConfig+0x2ac>)
 8005000:	4313      	orrs	r3, r2
 8005002:	600b      	str	r3, [r1, #0]
 8005004:	e015      	b.n	8005032 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005006:	4b3f      	ldr	r3, [pc, #252]	; (8005104 <HAL_RCC_OscConfig+0x2b0>)
 8005008:	2200      	movs	r2, #0
 800500a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800500c:	f7fc fdc4 	bl	8001b98 <HAL_GetTick>
 8005010:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005012:	e008      	b.n	8005026 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005014:	f7fc fdc0 	bl	8001b98 <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	2b02      	cmp	r3, #2
 8005020:	d901      	bls.n	8005026 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e184      	b.n	8005330 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005026:	4b36      	ldr	r3, [pc, #216]	; (8005100 <HAL_RCC_OscConfig+0x2ac>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0302 	and.w	r3, r3, #2
 800502e:	2b00      	cmp	r3, #0
 8005030:	d1f0      	bne.n	8005014 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0308 	and.w	r3, r3, #8
 800503a:	2b00      	cmp	r3, #0
 800503c:	d030      	beq.n	80050a0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d016      	beq.n	8005074 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005046:	4b30      	ldr	r3, [pc, #192]	; (8005108 <HAL_RCC_OscConfig+0x2b4>)
 8005048:	2201      	movs	r2, #1
 800504a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800504c:	f7fc fda4 	bl	8001b98 <HAL_GetTick>
 8005050:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005052:	e008      	b.n	8005066 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005054:	f7fc fda0 	bl	8001b98 <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	2b02      	cmp	r3, #2
 8005060:	d901      	bls.n	8005066 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e164      	b.n	8005330 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005066:	4b26      	ldr	r3, [pc, #152]	; (8005100 <HAL_RCC_OscConfig+0x2ac>)
 8005068:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800506a:	f003 0302 	and.w	r3, r3, #2
 800506e:	2b00      	cmp	r3, #0
 8005070:	d0f0      	beq.n	8005054 <HAL_RCC_OscConfig+0x200>
 8005072:	e015      	b.n	80050a0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005074:	4b24      	ldr	r3, [pc, #144]	; (8005108 <HAL_RCC_OscConfig+0x2b4>)
 8005076:	2200      	movs	r2, #0
 8005078:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800507a:	f7fc fd8d 	bl	8001b98 <HAL_GetTick>
 800507e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005080:	e008      	b.n	8005094 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005082:	f7fc fd89 	bl	8001b98 <HAL_GetTick>
 8005086:	4602      	mov	r2, r0
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	2b02      	cmp	r3, #2
 800508e:	d901      	bls.n	8005094 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005090:	2303      	movs	r3, #3
 8005092:	e14d      	b.n	8005330 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005094:	4b1a      	ldr	r3, [pc, #104]	; (8005100 <HAL_RCC_OscConfig+0x2ac>)
 8005096:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005098:	f003 0302 	and.w	r3, r3, #2
 800509c:	2b00      	cmp	r3, #0
 800509e:	d1f0      	bne.n	8005082 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0304 	and.w	r3, r3, #4
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f000 80a0 	beq.w	80051ee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050ae:	2300      	movs	r3, #0
 80050b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050b2:	4b13      	ldr	r3, [pc, #76]	; (8005100 <HAL_RCC_OscConfig+0x2ac>)
 80050b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d10f      	bne.n	80050de <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050be:	2300      	movs	r3, #0
 80050c0:	60bb      	str	r3, [r7, #8]
 80050c2:	4b0f      	ldr	r3, [pc, #60]	; (8005100 <HAL_RCC_OscConfig+0x2ac>)
 80050c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c6:	4a0e      	ldr	r2, [pc, #56]	; (8005100 <HAL_RCC_OscConfig+0x2ac>)
 80050c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050cc:	6413      	str	r3, [r2, #64]	; 0x40
 80050ce:	4b0c      	ldr	r3, [pc, #48]	; (8005100 <HAL_RCC_OscConfig+0x2ac>)
 80050d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050d6:	60bb      	str	r3, [r7, #8]
 80050d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050da:	2301      	movs	r3, #1
 80050dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050de:	4b0b      	ldr	r3, [pc, #44]	; (800510c <HAL_RCC_OscConfig+0x2b8>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d121      	bne.n	800512e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050ea:	4b08      	ldr	r3, [pc, #32]	; (800510c <HAL_RCC_OscConfig+0x2b8>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a07      	ldr	r2, [pc, #28]	; (800510c <HAL_RCC_OscConfig+0x2b8>)
 80050f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050f6:	f7fc fd4f 	bl	8001b98 <HAL_GetTick>
 80050fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050fc:	e011      	b.n	8005122 <HAL_RCC_OscConfig+0x2ce>
 80050fe:	bf00      	nop
 8005100:	40023800 	.word	0x40023800
 8005104:	42470000 	.word	0x42470000
 8005108:	42470e80 	.word	0x42470e80
 800510c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005110:	f7fc fd42 	bl	8001b98 <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	2b02      	cmp	r3, #2
 800511c:	d901      	bls.n	8005122 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e106      	b.n	8005330 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005122:	4b85      	ldr	r3, [pc, #532]	; (8005338 <HAL_RCC_OscConfig+0x4e4>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800512a:	2b00      	cmp	r3, #0
 800512c:	d0f0      	beq.n	8005110 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	2b01      	cmp	r3, #1
 8005134:	d106      	bne.n	8005144 <HAL_RCC_OscConfig+0x2f0>
 8005136:	4b81      	ldr	r3, [pc, #516]	; (800533c <HAL_RCC_OscConfig+0x4e8>)
 8005138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800513a:	4a80      	ldr	r2, [pc, #512]	; (800533c <HAL_RCC_OscConfig+0x4e8>)
 800513c:	f043 0301 	orr.w	r3, r3, #1
 8005140:	6713      	str	r3, [r2, #112]	; 0x70
 8005142:	e01c      	b.n	800517e <HAL_RCC_OscConfig+0x32a>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	2b05      	cmp	r3, #5
 800514a:	d10c      	bne.n	8005166 <HAL_RCC_OscConfig+0x312>
 800514c:	4b7b      	ldr	r3, [pc, #492]	; (800533c <HAL_RCC_OscConfig+0x4e8>)
 800514e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005150:	4a7a      	ldr	r2, [pc, #488]	; (800533c <HAL_RCC_OscConfig+0x4e8>)
 8005152:	f043 0304 	orr.w	r3, r3, #4
 8005156:	6713      	str	r3, [r2, #112]	; 0x70
 8005158:	4b78      	ldr	r3, [pc, #480]	; (800533c <HAL_RCC_OscConfig+0x4e8>)
 800515a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800515c:	4a77      	ldr	r2, [pc, #476]	; (800533c <HAL_RCC_OscConfig+0x4e8>)
 800515e:	f043 0301 	orr.w	r3, r3, #1
 8005162:	6713      	str	r3, [r2, #112]	; 0x70
 8005164:	e00b      	b.n	800517e <HAL_RCC_OscConfig+0x32a>
 8005166:	4b75      	ldr	r3, [pc, #468]	; (800533c <HAL_RCC_OscConfig+0x4e8>)
 8005168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800516a:	4a74      	ldr	r2, [pc, #464]	; (800533c <HAL_RCC_OscConfig+0x4e8>)
 800516c:	f023 0301 	bic.w	r3, r3, #1
 8005170:	6713      	str	r3, [r2, #112]	; 0x70
 8005172:	4b72      	ldr	r3, [pc, #456]	; (800533c <HAL_RCC_OscConfig+0x4e8>)
 8005174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005176:	4a71      	ldr	r2, [pc, #452]	; (800533c <HAL_RCC_OscConfig+0x4e8>)
 8005178:	f023 0304 	bic.w	r3, r3, #4
 800517c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d015      	beq.n	80051b2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005186:	f7fc fd07 	bl	8001b98 <HAL_GetTick>
 800518a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800518c:	e00a      	b.n	80051a4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800518e:	f7fc fd03 	bl	8001b98 <HAL_GetTick>
 8005192:	4602      	mov	r2, r0
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	f241 3288 	movw	r2, #5000	; 0x1388
 800519c:	4293      	cmp	r3, r2
 800519e:	d901      	bls.n	80051a4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e0c5      	b.n	8005330 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051a4:	4b65      	ldr	r3, [pc, #404]	; (800533c <HAL_RCC_OscConfig+0x4e8>)
 80051a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a8:	f003 0302 	and.w	r3, r3, #2
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d0ee      	beq.n	800518e <HAL_RCC_OscConfig+0x33a>
 80051b0:	e014      	b.n	80051dc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051b2:	f7fc fcf1 	bl	8001b98 <HAL_GetTick>
 80051b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051b8:	e00a      	b.n	80051d0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051ba:	f7fc fced 	bl	8001b98 <HAL_GetTick>
 80051be:	4602      	mov	r2, r0
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d901      	bls.n	80051d0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80051cc:	2303      	movs	r3, #3
 80051ce:	e0af      	b.n	8005330 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051d0:	4b5a      	ldr	r3, [pc, #360]	; (800533c <HAL_RCC_OscConfig+0x4e8>)
 80051d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051d4:	f003 0302 	and.w	r3, r3, #2
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d1ee      	bne.n	80051ba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051dc:	7dfb      	ldrb	r3, [r7, #23]
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d105      	bne.n	80051ee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051e2:	4b56      	ldr	r3, [pc, #344]	; (800533c <HAL_RCC_OscConfig+0x4e8>)
 80051e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e6:	4a55      	ldr	r2, [pc, #340]	; (800533c <HAL_RCC_OscConfig+0x4e8>)
 80051e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	699b      	ldr	r3, [r3, #24]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	f000 809b 	beq.w	800532e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051f8:	4b50      	ldr	r3, [pc, #320]	; (800533c <HAL_RCC_OscConfig+0x4e8>)
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	f003 030c 	and.w	r3, r3, #12
 8005200:	2b08      	cmp	r3, #8
 8005202:	d05c      	beq.n	80052be <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	2b02      	cmp	r3, #2
 800520a:	d141      	bne.n	8005290 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800520c:	4b4c      	ldr	r3, [pc, #304]	; (8005340 <HAL_RCC_OscConfig+0x4ec>)
 800520e:	2200      	movs	r2, #0
 8005210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005212:	f7fc fcc1 	bl	8001b98 <HAL_GetTick>
 8005216:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005218:	e008      	b.n	800522c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800521a:	f7fc fcbd 	bl	8001b98 <HAL_GetTick>
 800521e:	4602      	mov	r2, r0
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	2b02      	cmp	r3, #2
 8005226:	d901      	bls.n	800522c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005228:	2303      	movs	r3, #3
 800522a:	e081      	b.n	8005330 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800522c:	4b43      	ldr	r3, [pc, #268]	; (800533c <HAL_RCC_OscConfig+0x4e8>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d1f0      	bne.n	800521a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	69da      	ldr	r2, [r3, #28]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a1b      	ldr	r3, [r3, #32]
 8005240:	431a      	orrs	r2, r3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005246:	019b      	lsls	r3, r3, #6
 8005248:	431a      	orrs	r2, r3
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800524e:	085b      	lsrs	r3, r3, #1
 8005250:	3b01      	subs	r3, #1
 8005252:	041b      	lsls	r3, r3, #16
 8005254:	431a      	orrs	r2, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525a:	061b      	lsls	r3, r3, #24
 800525c:	4937      	ldr	r1, [pc, #220]	; (800533c <HAL_RCC_OscConfig+0x4e8>)
 800525e:	4313      	orrs	r3, r2
 8005260:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005262:	4b37      	ldr	r3, [pc, #220]	; (8005340 <HAL_RCC_OscConfig+0x4ec>)
 8005264:	2201      	movs	r2, #1
 8005266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005268:	f7fc fc96 	bl	8001b98 <HAL_GetTick>
 800526c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800526e:	e008      	b.n	8005282 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005270:	f7fc fc92 	bl	8001b98 <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	2b02      	cmp	r3, #2
 800527c:	d901      	bls.n	8005282 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e056      	b.n	8005330 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005282:	4b2e      	ldr	r3, [pc, #184]	; (800533c <HAL_RCC_OscConfig+0x4e8>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d0f0      	beq.n	8005270 <HAL_RCC_OscConfig+0x41c>
 800528e:	e04e      	b.n	800532e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005290:	4b2b      	ldr	r3, [pc, #172]	; (8005340 <HAL_RCC_OscConfig+0x4ec>)
 8005292:	2200      	movs	r2, #0
 8005294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005296:	f7fc fc7f 	bl	8001b98 <HAL_GetTick>
 800529a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800529c:	e008      	b.n	80052b0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800529e:	f7fc fc7b 	bl	8001b98 <HAL_GetTick>
 80052a2:	4602      	mov	r2, r0
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	d901      	bls.n	80052b0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e03f      	b.n	8005330 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052b0:	4b22      	ldr	r3, [pc, #136]	; (800533c <HAL_RCC_OscConfig+0x4e8>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d1f0      	bne.n	800529e <HAL_RCC_OscConfig+0x44a>
 80052bc:	e037      	b.n	800532e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d101      	bne.n	80052ca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e032      	b.n	8005330 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80052ca:	4b1c      	ldr	r3, [pc, #112]	; (800533c <HAL_RCC_OscConfig+0x4e8>)
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	699b      	ldr	r3, [r3, #24]
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d028      	beq.n	800532a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d121      	bne.n	800532a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d11a      	bne.n	800532a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80052fa:	4013      	ands	r3, r2
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005300:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005302:	4293      	cmp	r3, r2
 8005304:	d111      	bne.n	800532a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005310:	085b      	lsrs	r3, r3, #1
 8005312:	3b01      	subs	r3, #1
 8005314:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005316:	429a      	cmp	r2, r3
 8005318:	d107      	bne.n	800532a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005324:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005326:	429a      	cmp	r2, r3
 8005328:	d001      	beq.n	800532e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e000      	b.n	8005330 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800532e:	2300      	movs	r3, #0
}
 8005330:	4618      	mov	r0, r3
 8005332:	3718      	adds	r7, #24
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	40007000 	.word	0x40007000
 800533c:	40023800 	.word	0x40023800
 8005340:	42470060 	.word	0x42470060

08005344 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d101      	bne.n	8005358 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e0cc      	b.n	80054f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005358:	4b68      	ldr	r3, [pc, #416]	; (80054fc <HAL_RCC_ClockConfig+0x1b8>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0307 	and.w	r3, r3, #7
 8005360:	683a      	ldr	r2, [r7, #0]
 8005362:	429a      	cmp	r2, r3
 8005364:	d90c      	bls.n	8005380 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005366:	4b65      	ldr	r3, [pc, #404]	; (80054fc <HAL_RCC_ClockConfig+0x1b8>)
 8005368:	683a      	ldr	r2, [r7, #0]
 800536a:	b2d2      	uxtb	r2, r2
 800536c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800536e:	4b63      	ldr	r3, [pc, #396]	; (80054fc <HAL_RCC_ClockConfig+0x1b8>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 0307 	and.w	r3, r3, #7
 8005376:	683a      	ldr	r2, [r7, #0]
 8005378:	429a      	cmp	r2, r3
 800537a:	d001      	beq.n	8005380 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e0b8      	b.n	80054f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0302 	and.w	r3, r3, #2
 8005388:	2b00      	cmp	r3, #0
 800538a:	d020      	beq.n	80053ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0304 	and.w	r3, r3, #4
 8005394:	2b00      	cmp	r3, #0
 8005396:	d005      	beq.n	80053a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005398:	4b59      	ldr	r3, [pc, #356]	; (8005500 <HAL_RCC_ClockConfig+0x1bc>)
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	4a58      	ldr	r2, [pc, #352]	; (8005500 <HAL_RCC_ClockConfig+0x1bc>)
 800539e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80053a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 0308 	and.w	r3, r3, #8
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d005      	beq.n	80053bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053b0:	4b53      	ldr	r3, [pc, #332]	; (8005500 <HAL_RCC_ClockConfig+0x1bc>)
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	4a52      	ldr	r2, [pc, #328]	; (8005500 <HAL_RCC_ClockConfig+0x1bc>)
 80053b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80053ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053bc:	4b50      	ldr	r3, [pc, #320]	; (8005500 <HAL_RCC_ClockConfig+0x1bc>)
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	494d      	ldr	r1, [pc, #308]	; (8005500 <HAL_RCC_ClockConfig+0x1bc>)
 80053ca:	4313      	orrs	r3, r2
 80053cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0301 	and.w	r3, r3, #1
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d044      	beq.n	8005464 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d107      	bne.n	80053f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053e2:	4b47      	ldr	r3, [pc, #284]	; (8005500 <HAL_RCC_ClockConfig+0x1bc>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d119      	bne.n	8005422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e07f      	b.n	80054f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	d003      	beq.n	8005402 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053fe:	2b03      	cmp	r3, #3
 8005400:	d107      	bne.n	8005412 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005402:	4b3f      	ldr	r3, [pc, #252]	; (8005500 <HAL_RCC_ClockConfig+0x1bc>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d109      	bne.n	8005422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e06f      	b.n	80054f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005412:	4b3b      	ldr	r3, [pc, #236]	; (8005500 <HAL_RCC_ClockConfig+0x1bc>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0302 	and.w	r3, r3, #2
 800541a:	2b00      	cmp	r3, #0
 800541c:	d101      	bne.n	8005422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e067      	b.n	80054f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005422:	4b37      	ldr	r3, [pc, #220]	; (8005500 <HAL_RCC_ClockConfig+0x1bc>)
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	f023 0203 	bic.w	r2, r3, #3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	4934      	ldr	r1, [pc, #208]	; (8005500 <HAL_RCC_ClockConfig+0x1bc>)
 8005430:	4313      	orrs	r3, r2
 8005432:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005434:	f7fc fbb0 	bl	8001b98 <HAL_GetTick>
 8005438:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800543a:	e00a      	b.n	8005452 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800543c:	f7fc fbac 	bl	8001b98 <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	f241 3288 	movw	r2, #5000	; 0x1388
 800544a:	4293      	cmp	r3, r2
 800544c:	d901      	bls.n	8005452 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e04f      	b.n	80054f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005452:	4b2b      	ldr	r3, [pc, #172]	; (8005500 <HAL_RCC_ClockConfig+0x1bc>)
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	f003 020c 	and.w	r2, r3, #12
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	429a      	cmp	r2, r3
 8005462:	d1eb      	bne.n	800543c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005464:	4b25      	ldr	r3, [pc, #148]	; (80054fc <HAL_RCC_ClockConfig+0x1b8>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0307 	and.w	r3, r3, #7
 800546c:	683a      	ldr	r2, [r7, #0]
 800546e:	429a      	cmp	r2, r3
 8005470:	d20c      	bcs.n	800548c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005472:	4b22      	ldr	r3, [pc, #136]	; (80054fc <HAL_RCC_ClockConfig+0x1b8>)
 8005474:	683a      	ldr	r2, [r7, #0]
 8005476:	b2d2      	uxtb	r2, r2
 8005478:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800547a:	4b20      	ldr	r3, [pc, #128]	; (80054fc <HAL_RCC_ClockConfig+0x1b8>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0307 	and.w	r3, r3, #7
 8005482:	683a      	ldr	r2, [r7, #0]
 8005484:	429a      	cmp	r2, r3
 8005486:	d001      	beq.n	800548c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e032      	b.n	80054f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 0304 	and.w	r3, r3, #4
 8005494:	2b00      	cmp	r3, #0
 8005496:	d008      	beq.n	80054aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005498:	4b19      	ldr	r3, [pc, #100]	; (8005500 <HAL_RCC_ClockConfig+0x1bc>)
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	4916      	ldr	r1, [pc, #88]	; (8005500 <HAL_RCC_ClockConfig+0x1bc>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0308 	and.w	r3, r3, #8
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d009      	beq.n	80054ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054b6:	4b12      	ldr	r3, [pc, #72]	; (8005500 <HAL_RCC_ClockConfig+0x1bc>)
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	00db      	lsls	r3, r3, #3
 80054c4:	490e      	ldr	r1, [pc, #56]	; (8005500 <HAL_RCC_ClockConfig+0x1bc>)
 80054c6:	4313      	orrs	r3, r2
 80054c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80054ca:	f000 f821 	bl	8005510 <HAL_RCC_GetSysClockFreq>
 80054ce:	4602      	mov	r2, r0
 80054d0:	4b0b      	ldr	r3, [pc, #44]	; (8005500 <HAL_RCC_ClockConfig+0x1bc>)
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	091b      	lsrs	r3, r3, #4
 80054d6:	f003 030f 	and.w	r3, r3, #15
 80054da:	490a      	ldr	r1, [pc, #40]	; (8005504 <HAL_RCC_ClockConfig+0x1c0>)
 80054dc:	5ccb      	ldrb	r3, [r1, r3]
 80054de:	fa22 f303 	lsr.w	r3, r2, r3
 80054e2:	4a09      	ldr	r2, [pc, #36]	; (8005508 <HAL_RCC_ClockConfig+0x1c4>)
 80054e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80054e6:	4b09      	ldr	r3, [pc, #36]	; (800550c <HAL_RCC_ClockConfig+0x1c8>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7fc f95e 	bl	80017ac <HAL_InitTick>

  return HAL_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3710      	adds	r7, #16
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	40023c00 	.word	0x40023c00
 8005500:	40023800 	.word	0x40023800
 8005504:	08009980 	.word	0x08009980
 8005508:	20000008 	.word	0x20000008
 800550c:	2000000c 	.word	0x2000000c

08005510 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005510:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005514:	b084      	sub	sp, #16
 8005516:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005518:	2300      	movs	r3, #0
 800551a:	607b      	str	r3, [r7, #4]
 800551c:	2300      	movs	r3, #0
 800551e:	60fb      	str	r3, [r7, #12]
 8005520:	2300      	movs	r3, #0
 8005522:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005524:	2300      	movs	r3, #0
 8005526:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005528:	4b67      	ldr	r3, [pc, #412]	; (80056c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	f003 030c 	and.w	r3, r3, #12
 8005530:	2b08      	cmp	r3, #8
 8005532:	d00d      	beq.n	8005550 <HAL_RCC_GetSysClockFreq+0x40>
 8005534:	2b08      	cmp	r3, #8
 8005536:	f200 80bd 	bhi.w	80056b4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800553a:	2b00      	cmp	r3, #0
 800553c:	d002      	beq.n	8005544 <HAL_RCC_GetSysClockFreq+0x34>
 800553e:	2b04      	cmp	r3, #4
 8005540:	d003      	beq.n	800554a <HAL_RCC_GetSysClockFreq+0x3a>
 8005542:	e0b7      	b.n	80056b4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005544:	4b61      	ldr	r3, [pc, #388]	; (80056cc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005546:	60bb      	str	r3, [r7, #8]
       break;
 8005548:	e0b7      	b.n	80056ba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800554a:	4b61      	ldr	r3, [pc, #388]	; (80056d0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800554c:	60bb      	str	r3, [r7, #8]
      break;
 800554e:	e0b4      	b.n	80056ba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005550:	4b5d      	ldr	r3, [pc, #372]	; (80056c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005558:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800555a:	4b5b      	ldr	r3, [pc, #364]	; (80056c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d04d      	beq.n	8005602 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005566:	4b58      	ldr	r3, [pc, #352]	; (80056c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	099b      	lsrs	r3, r3, #6
 800556c:	461a      	mov	r2, r3
 800556e:	f04f 0300 	mov.w	r3, #0
 8005572:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005576:	f04f 0100 	mov.w	r1, #0
 800557a:	ea02 0800 	and.w	r8, r2, r0
 800557e:	ea03 0901 	and.w	r9, r3, r1
 8005582:	4640      	mov	r0, r8
 8005584:	4649      	mov	r1, r9
 8005586:	f04f 0200 	mov.w	r2, #0
 800558a:	f04f 0300 	mov.w	r3, #0
 800558e:	014b      	lsls	r3, r1, #5
 8005590:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005594:	0142      	lsls	r2, r0, #5
 8005596:	4610      	mov	r0, r2
 8005598:	4619      	mov	r1, r3
 800559a:	ebb0 0008 	subs.w	r0, r0, r8
 800559e:	eb61 0109 	sbc.w	r1, r1, r9
 80055a2:	f04f 0200 	mov.w	r2, #0
 80055a6:	f04f 0300 	mov.w	r3, #0
 80055aa:	018b      	lsls	r3, r1, #6
 80055ac:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80055b0:	0182      	lsls	r2, r0, #6
 80055b2:	1a12      	subs	r2, r2, r0
 80055b4:	eb63 0301 	sbc.w	r3, r3, r1
 80055b8:	f04f 0000 	mov.w	r0, #0
 80055bc:	f04f 0100 	mov.w	r1, #0
 80055c0:	00d9      	lsls	r1, r3, #3
 80055c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80055c6:	00d0      	lsls	r0, r2, #3
 80055c8:	4602      	mov	r2, r0
 80055ca:	460b      	mov	r3, r1
 80055cc:	eb12 0208 	adds.w	r2, r2, r8
 80055d0:	eb43 0309 	adc.w	r3, r3, r9
 80055d4:	f04f 0000 	mov.w	r0, #0
 80055d8:	f04f 0100 	mov.w	r1, #0
 80055dc:	0259      	lsls	r1, r3, #9
 80055de:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80055e2:	0250      	lsls	r0, r2, #9
 80055e4:	4602      	mov	r2, r0
 80055e6:	460b      	mov	r3, r1
 80055e8:	4610      	mov	r0, r2
 80055ea:	4619      	mov	r1, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	461a      	mov	r2, r3
 80055f0:	f04f 0300 	mov.w	r3, #0
 80055f4:	f7fa fdec 	bl	80001d0 <__aeabi_uldivmod>
 80055f8:	4602      	mov	r2, r0
 80055fa:	460b      	mov	r3, r1
 80055fc:	4613      	mov	r3, r2
 80055fe:	60fb      	str	r3, [r7, #12]
 8005600:	e04a      	b.n	8005698 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005602:	4b31      	ldr	r3, [pc, #196]	; (80056c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	099b      	lsrs	r3, r3, #6
 8005608:	461a      	mov	r2, r3
 800560a:	f04f 0300 	mov.w	r3, #0
 800560e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005612:	f04f 0100 	mov.w	r1, #0
 8005616:	ea02 0400 	and.w	r4, r2, r0
 800561a:	ea03 0501 	and.w	r5, r3, r1
 800561e:	4620      	mov	r0, r4
 8005620:	4629      	mov	r1, r5
 8005622:	f04f 0200 	mov.w	r2, #0
 8005626:	f04f 0300 	mov.w	r3, #0
 800562a:	014b      	lsls	r3, r1, #5
 800562c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005630:	0142      	lsls	r2, r0, #5
 8005632:	4610      	mov	r0, r2
 8005634:	4619      	mov	r1, r3
 8005636:	1b00      	subs	r0, r0, r4
 8005638:	eb61 0105 	sbc.w	r1, r1, r5
 800563c:	f04f 0200 	mov.w	r2, #0
 8005640:	f04f 0300 	mov.w	r3, #0
 8005644:	018b      	lsls	r3, r1, #6
 8005646:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800564a:	0182      	lsls	r2, r0, #6
 800564c:	1a12      	subs	r2, r2, r0
 800564e:	eb63 0301 	sbc.w	r3, r3, r1
 8005652:	f04f 0000 	mov.w	r0, #0
 8005656:	f04f 0100 	mov.w	r1, #0
 800565a:	00d9      	lsls	r1, r3, #3
 800565c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005660:	00d0      	lsls	r0, r2, #3
 8005662:	4602      	mov	r2, r0
 8005664:	460b      	mov	r3, r1
 8005666:	1912      	adds	r2, r2, r4
 8005668:	eb45 0303 	adc.w	r3, r5, r3
 800566c:	f04f 0000 	mov.w	r0, #0
 8005670:	f04f 0100 	mov.w	r1, #0
 8005674:	0299      	lsls	r1, r3, #10
 8005676:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800567a:	0290      	lsls	r0, r2, #10
 800567c:	4602      	mov	r2, r0
 800567e:	460b      	mov	r3, r1
 8005680:	4610      	mov	r0, r2
 8005682:	4619      	mov	r1, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	461a      	mov	r2, r3
 8005688:	f04f 0300 	mov.w	r3, #0
 800568c:	f7fa fda0 	bl	80001d0 <__aeabi_uldivmod>
 8005690:	4602      	mov	r2, r0
 8005692:	460b      	mov	r3, r1
 8005694:	4613      	mov	r3, r2
 8005696:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005698:	4b0b      	ldr	r3, [pc, #44]	; (80056c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	0c1b      	lsrs	r3, r3, #16
 800569e:	f003 0303 	and.w	r3, r3, #3
 80056a2:	3301      	adds	r3, #1
 80056a4:	005b      	lsls	r3, r3, #1
 80056a6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b0:	60bb      	str	r3, [r7, #8]
      break;
 80056b2:	e002      	b.n	80056ba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80056b4:	4b05      	ldr	r3, [pc, #20]	; (80056cc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80056b6:	60bb      	str	r3, [r7, #8]
      break;
 80056b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056ba:	68bb      	ldr	r3, [r7, #8]
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3710      	adds	r7, #16
 80056c0:	46bd      	mov	sp, r7
 80056c2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80056c6:	bf00      	nop
 80056c8:	40023800 	.word	0x40023800
 80056cc:	00f42400 	.word	0x00f42400
 80056d0:	007a1200 	.word	0x007a1200

080056d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056d4:	b480      	push	{r7}
 80056d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056d8:	4b03      	ldr	r3, [pc, #12]	; (80056e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80056da:	681b      	ldr	r3, [r3, #0]
}
 80056dc:	4618      	mov	r0, r3
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	20000008 	.word	0x20000008

080056ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80056f0:	f7ff fff0 	bl	80056d4 <HAL_RCC_GetHCLKFreq>
 80056f4:	4602      	mov	r2, r0
 80056f6:	4b05      	ldr	r3, [pc, #20]	; (800570c <HAL_RCC_GetPCLK1Freq+0x20>)
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	0a9b      	lsrs	r3, r3, #10
 80056fc:	f003 0307 	and.w	r3, r3, #7
 8005700:	4903      	ldr	r1, [pc, #12]	; (8005710 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005702:	5ccb      	ldrb	r3, [r1, r3]
 8005704:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005708:	4618      	mov	r0, r3
 800570a:	bd80      	pop	{r7, pc}
 800570c:	40023800 	.word	0x40023800
 8005710:	08009990 	.word	0x08009990

08005714 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005718:	f7ff ffdc 	bl	80056d4 <HAL_RCC_GetHCLKFreq>
 800571c:	4602      	mov	r2, r0
 800571e:	4b05      	ldr	r3, [pc, #20]	; (8005734 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	0b5b      	lsrs	r3, r3, #13
 8005724:	f003 0307 	and.w	r3, r3, #7
 8005728:	4903      	ldr	r1, [pc, #12]	; (8005738 <HAL_RCC_GetPCLK2Freq+0x24>)
 800572a:	5ccb      	ldrb	r3, [r1, r3]
 800572c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005730:	4618      	mov	r0, r3
 8005732:	bd80      	pop	{r7, pc}
 8005734:	40023800 	.word	0x40023800
 8005738:	08009990 	.word	0x08009990

0800573c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	220f      	movs	r2, #15
 800574a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800574c:	4b12      	ldr	r3, [pc, #72]	; (8005798 <HAL_RCC_GetClockConfig+0x5c>)
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	f003 0203 	and.w	r2, r3, #3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005758:	4b0f      	ldr	r3, [pc, #60]	; (8005798 <HAL_RCC_GetClockConfig+0x5c>)
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005764:	4b0c      	ldr	r3, [pc, #48]	; (8005798 <HAL_RCC_GetClockConfig+0x5c>)
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005770:	4b09      	ldr	r3, [pc, #36]	; (8005798 <HAL_RCC_GetClockConfig+0x5c>)
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	08db      	lsrs	r3, r3, #3
 8005776:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800577e:	4b07      	ldr	r3, [pc, #28]	; (800579c <HAL_RCC_GetClockConfig+0x60>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0207 	and.w	r2, r3, #7
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	601a      	str	r2, [r3, #0]
}
 800578a:	bf00      	nop
 800578c:	370c      	adds	r7, #12
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
 8005796:	bf00      	nop
 8005798:	40023800 	.word	0x40023800
 800579c:	40023c00 	.word	0x40023c00

080057a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b082      	sub	sp, #8
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d101      	bne.n	80057b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e041      	b.n	8005836 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d106      	bne.n	80057cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 f839 	bl	800583e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2202      	movs	r2, #2
 80057d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	3304      	adds	r3, #4
 80057dc:	4619      	mov	r1, r3
 80057de:	4610      	mov	r0, r2
 80057e0:	f000 f9d8 	bl	8005b94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	3708      	adds	r7, #8
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}

0800583e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800583e:	b480      	push	{r7}
 8005840:	b083      	sub	sp, #12
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005846:	bf00      	nop
 8005848:	370c      	adds	r7, #12
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
	...

08005854 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005854:	b480      	push	{r7}
 8005856:	b085      	sub	sp, #20
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005862:	b2db      	uxtb	r3, r3
 8005864:	2b01      	cmp	r3, #1
 8005866:	d001      	beq.n	800586c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e04e      	b.n	800590a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2202      	movs	r2, #2
 8005870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	68da      	ldr	r2, [r3, #12]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f042 0201 	orr.w	r2, r2, #1
 8005882:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a23      	ldr	r2, [pc, #140]	; (8005918 <HAL_TIM_Base_Start_IT+0xc4>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d022      	beq.n	80058d4 <HAL_TIM_Base_Start_IT+0x80>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005896:	d01d      	beq.n	80058d4 <HAL_TIM_Base_Start_IT+0x80>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a1f      	ldr	r2, [pc, #124]	; (800591c <HAL_TIM_Base_Start_IT+0xc8>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d018      	beq.n	80058d4 <HAL_TIM_Base_Start_IT+0x80>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a1e      	ldr	r2, [pc, #120]	; (8005920 <HAL_TIM_Base_Start_IT+0xcc>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d013      	beq.n	80058d4 <HAL_TIM_Base_Start_IT+0x80>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a1c      	ldr	r2, [pc, #112]	; (8005924 <HAL_TIM_Base_Start_IT+0xd0>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d00e      	beq.n	80058d4 <HAL_TIM_Base_Start_IT+0x80>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a1b      	ldr	r2, [pc, #108]	; (8005928 <HAL_TIM_Base_Start_IT+0xd4>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d009      	beq.n	80058d4 <HAL_TIM_Base_Start_IT+0x80>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a19      	ldr	r2, [pc, #100]	; (800592c <HAL_TIM_Base_Start_IT+0xd8>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d004      	beq.n	80058d4 <HAL_TIM_Base_Start_IT+0x80>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a18      	ldr	r2, [pc, #96]	; (8005930 <HAL_TIM_Base_Start_IT+0xdc>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d111      	bne.n	80058f8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	f003 0307 	and.w	r3, r3, #7
 80058de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2b06      	cmp	r3, #6
 80058e4:	d010      	beq.n	8005908 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f042 0201 	orr.w	r2, r2, #1
 80058f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058f6:	e007      	b.n	8005908 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f042 0201 	orr.w	r2, r2, #1
 8005906:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	3714      	adds	r7, #20
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
 8005916:	bf00      	nop
 8005918:	40010000 	.word	0x40010000
 800591c:	40000400 	.word	0x40000400
 8005920:	40000800 	.word	0x40000800
 8005924:	40000c00 	.word	0x40000c00
 8005928:	40010400 	.word	0x40010400
 800592c:	40014000 	.word	0x40014000
 8005930:	40001800 	.word	0x40001800

08005934 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b082      	sub	sp, #8
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	f003 0302 	and.w	r3, r3, #2
 8005946:	2b02      	cmp	r3, #2
 8005948:	d122      	bne.n	8005990 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	f003 0302 	and.w	r3, r3, #2
 8005954:	2b02      	cmp	r3, #2
 8005956:	d11b      	bne.n	8005990 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f06f 0202 	mvn.w	r2, #2
 8005960:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2201      	movs	r2, #1
 8005966:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	699b      	ldr	r3, [r3, #24]
 800596e:	f003 0303 	and.w	r3, r3, #3
 8005972:	2b00      	cmp	r3, #0
 8005974:	d003      	beq.n	800597e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 f8ee 	bl	8005b58 <HAL_TIM_IC_CaptureCallback>
 800597c:	e005      	b.n	800598a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 f8e0 	bl	8005b44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 f8f1 	bl	8005b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	f003 0304 	and.w	r3, r3, #4
 800599a:	2b04      	cmp	r3, #4
 800599c:	d122      	bne.n	80059e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	f003 0304 	and.w	r3, r3, #4
 80059a8:	2b04      	cmp	r3, #4
 80059aa:	d11b      	bne.n	80059e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f06f 0204 	mvn.w	r2, #4
 80059b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2202      	movs	r2, #2
 80059ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	699b      	ldr	r3, [r3, #24]
 80059c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d003      	beq.n	80059d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 f8c4 	bl	8005b58 <HAL_TIM_IC_CaptureCallback>
 80059d0:	e005      	b.n	80059de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 f8b6 	bl	8005b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f000 f8c7 	bl	8005b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	f003 0308 	and.w	r3, r3, #8
 80059ee:	2b08      	cmp	r3, #8
 80059f0:	d122      	bne.n	8005a38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	f003 0308 	and.w	r3, r3, #8
 80059fc:	2b08      	cmp	r3, #8
 80059fe:	d11b      	bne.n	8005a38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f06f 0208 	mvn.w	r2, #8
 8005a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2204      	movs	r2, #4
 8005a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	69db      	ldr	r3, [r3, #28]
 8005a16:	f003 0303 	and.w	r3, r3, #3
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d003      	beq.n	8005a26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 f89a 	bl	8005b58 <HAL_TIM_IC_CaptureCallback>
 8005a24:	e005      	b.n	8005a32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 f88c 	bl	8005b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 f89d 	bl	8005b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	f003 0310 	and.w	r3, r3, #16
 8005a42:	2b10      	cmp	r3, #16
 8005a44:	d122      	bne.n	8005a8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	f003 0310 	and.w	r3, r3, #16
 8005a50:	2b10      	cmp	r3, #16
 8005a52:	d11b      	bne.n	8005a8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f06f 0210 	mvn.w	r2, #16
 8005a5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2208      	movs	r2, #8
 8005a62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	69db      	ldr	r3, [r3, #28]
 8005a6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d003      	beq.n	8005a7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 f870 	bl	8005b58 <HAL_TIM_IC_CaptureCallback>
 8005a78:	e005      	b.n	8005a86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 f862 	bl	8005b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f000 f873 	bl	8005b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	f003 0301 	and.w	r3, r3, #1
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d10e      	bne.n	8005ab8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	f003 0301 	and.w	r3, r3, #1
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d107      	bne.n	8005ab8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f06f 0201 	mvn.w	r2, #1
 8005ab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f7fb fcb0 	bl	8001418 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ac2:	2b80      	cmp	r3, #128	; 0x80
 8005ac4:	d10e      	bne.n	8005ae4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ad0:	2b80      	cmp	r3, #128	; 0x80
 8005ad2:	d107      	bne.n	8005ae4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 f902 	bl	8005ce8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aee:	2b40      	cmp	r3, #64	; 0x40
 8005af0:	d10e      	bne.n	8005b10 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005afc:	2b40      	cmp	r3, #64	; 0x40
 8005afe:	d107      	bne.n	8005b10 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 f838 	bl	8005b80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	f003 0320 	and.w	r3, r3, #32
 8005b1a:	2b20      	cmp	r3, #32
 8005b1c:	d10e      	bne.n	8005b3c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	f003 0320 	and.w	r3, r3, #32
 8005b28:	2b20      	cmp	r3, #32
 8005b2a:	d107      	bne.n	8005b3c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f06f 0220 	mvn.w	r2, #32
 8005b34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 f8cc 	bl	8005cd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b3c:	bf00      	nop
 8005b3e:	3708      	adds	r7, #8
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b4c:	bf00      	nop
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b60:	bf00      	nop
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b74:	bf00      	nop
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b88:	bf00      	nop
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b085      	sub	sp, #20
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a40      	ldr	r2, [pc, #256]	; (8005ca8 <TIM_Base_SetConfig+0x114>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d013      	beq.n	8005bd4 <TIM_Base_SetConfig+0x40>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bb2:	d00f      	beq.n	8005bd4 <TIM_Base_SetConfig+0x40>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	4a3d      	ldr	r2, [pc, #244]	; (8005cac <TIM_Base_SetConfig+0x118>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d00b      	beq.n	8005bd4 <TIM_Base_SetConfig+0x40>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a3c      	ldr	r2, [pc, #240]	; (8005cb0 <TIM_Base_SetConfig+0x11c>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d007      	beq.n	8005bd4 <TIM_Base_SetConfig+0x40>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a3b      	ldr	r2, [pc, #236]	; (8005cb4 <TIM_Base_SetConfig+0x120>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d003      	beq.n	8005bd4 <TIM_Base_SetConfig+0x40>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a3a      	ldr	r2, [pc, #232]	; (8005cb8 <TIM_Base_SetConfig+0x124>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d108      	bne.n	8005be6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a2f      	ldr	r2, [pc, #188]	; (8005ca8 <TIM_Base_SetConfig+0x114>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d02b      	beq.n	8005c46 <TIM_Base_SetConfig+0xb2>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bf4:	d027      	beq.n	8005c46 <TIM_Base_SetConfig+0xb2>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a2c      	ldr	r2, [pc, #176]	; (8005cac <TIM_Base_SetConfig+0x118>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d023      	beq.n	8005c46 <TIM_Base_SetConfig+0xb2>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a2b      	ldr	r2, [pc, #172]	; (8005cb0 <TIM_Base_SetConfig+0x11c>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d01f      	beq.n	8005c46 <TIM_Base_SetConfig+0xb2>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a2a      	ldr	r2, [pc, #168]	; (8005cb4 <TIM_Base_SetConfig+0x120>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d01b      	beq.n	8005c46 <TIM_Base_SetConfig+0xb2>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a29      	ldr	r2, [pc, #164]	; (8005cb8 <TIM_Base_SetConfig+0x124>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d017      	beq.n	8005c46 <TIM_Base_SetConfig+0xb2>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a28      	ldr	r2, [pc, #160]	; (8005cbc <TIM_Base_SetConfig+0x128>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d013      	beq.n	8005c46 <TIM_Base_SetConfig+0xb2>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a27      	ldr	r2, [pc, #156]	; (8005cc0 <TIM_Base_SetConfig+0x12c>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d00f      	beq.n	8005c46 <TIM_Base_SetConfig+0xb2>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a26      	ldr	r2, [pc, #152]	; (8005cc4 <TIM_Base_SetConfig+0x130>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d00b      	beq.n	8005c46 <TIM_Base_SetConfig+0xb2>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a25      	ldr	r2, [pc, #148]	; (8005cc8 <TIM_Base_SetConfig+0x134>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d007      	beq.n	8005c46 <TIM_Base_SetConfig+0xb2>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a24      	ldr	r2, [pc, #144]	; (8005ccc <TIM_Base_SetConfig+0x138>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d003      	beq.n	8005c46 <TIM_Base_SetConfig+0xb2>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a23      	ldr	r2, [pc, #140]	; (8005cd0 <TIM_Base_SetConfig+0x13c>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d108      	bne.n	8005c58 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	695b      	ldr	r3, [r3, #20]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	68fa      	ldr	r2, [r7, #12]
 8005c6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	689a      	ldr	r2, [r3, #8]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a0a      	ldr	r2, [pc, #40]	; (8005ca8 <TIM_Base_SetConfig+0x114>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d003      	beq.n	8005c8c <TIM_Base_SetConfig+0xf8>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a0c      	ldr	r2, [pc, #48]	; (8005cb8 <TIM_Base_SetConfig+0x124>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d103      	bne.n	8005c94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	691a      	ldr	r2, [r3, #16]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	615a      	str	r2, [r3, #20]
}
 8005c9a:	bf00      	nop
 8005c9c:	3714      	adds	r7, #20
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	40010000 	.word	0x40010000
 8005cac:	40000400 	.word	0x40000400
 8005cb0:	40000800 	.word	0x40000800
 8005cb4:	40000c00 	.word	0x40000c00
 8005cb8:	40010400 	.word	0x40010400
 8005cbc:	40014000 	.word	0x40014000
 8005cc0:	40014400 	.word	0x40014400
 8005cc4:	40014800 	.word	0x40014800
 8005cc8:	40001800 	.word	0x40001800
 8005ccc:	40001c00 	.word	0x40001c00
 8005cd0:	40002000 	.word	0x40002000

08005cd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005cdc:	bf00      	nop
 8005cde:	370c      	adds	r7, #12
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005cf0:	bf00      	nop
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b082      	sub	sp, #8
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d101      	bne.n	8005d0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e03f      	b.n	8005d8e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d106      	bne.n	8005d28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f7fb fe4a 	bl	80019bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2224      	movs	r2, #36	; 0x24
 8005d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68da      	ldr	r2, [r3, #12]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 fe7d 	bl	8006a40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	691a      	ldr	r2, [r3, #16]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	695a      	ldr	r2, [r3, #20]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68da      	ldr	r2, [r3, #12]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2220      	movs	r2, #32
 8005d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2220      	movs	r2, #32
 8005d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3708      	adds	r7, #8
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}

08005d96 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d96:	b580      	push	{r7, lr}
 8005d98:	b08a      	sub	sp, #40	; 0x28
 8005d9a:	af02      	add	r7, sp, #8
 8005d9c:	60f8      	str	r0, [r7, #12]
 8005d9e:	60b9      	str	r1, [r7, #8]
 8005da0:	603b      	str	r3, [r7, #0]
 8005da2:	4613      	mov	r3, r2
 8005da4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005da6:	2300      	movs	r3, #0
 8005da8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	2b20      	cmp	r3, #32
 8005db4:	d17c      	bne.n	8005eb0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d002      	beq.n	8005dc2 <HAL_UART_Transmit+0x2c>
 8005dbc:	88fb      	ldrh	r3, [r7, #6]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d101      	bne.n	8005dc6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e075      	b.n	8005eb2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d101      	bne.n	8005dd4 <HAL_UART_Transmit+0x3e>
 8005dd0:	2302      	movs	r3, #2
 8005dd2:	e06e      	b.n	8005eb2 <HAL_UART_Transmit+0x11c>
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2200      	movs	r2, #0
 8005de0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2221      	movs	r2, #33	; 0x21
 8005de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005dea:	f7fb fed5 	bl	8001b98 <HAL_GetTick>
 8005dee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	88fa      	ldrh	r2, [r7, #6]
 8005df4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	88fa      	ldrh	r2, [r7, #6]
 8005dfa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e04:	d108      	bne.n	8005e18 <HAL_UART_Transmit+0x82>
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d104      	bne.n	8005e18 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	61bb      	str	r3, [r7, #24]
 8005e16:	e003      	b.n	8005e20 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005e28:	e02a      	b.n	8005e80 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	9300      	str	r3, [sp, #0]
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	2200      	movs	r2, #0
 8005e32:	2180      	movs	r1, #128	; 0x80
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	f000 fbc1 	bl	80065bc <UART_WaitOnFlagUntilTimeout>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d001      	beq.n	8005e44 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005e40:	2303      	movs	r3, #3
 8005e42:	e036      	b.n	8005eb2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d10b      	bne.n	8005e62 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	881b      	ldrh	r3, [r3, #0]
 8005e4e:	461a      	mov	r2, r3
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e58:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	3302      	adds	r3, #2
 8005e5e:	61bb      	str	r3, [r7, #24]
 8005e60:	e007      	b.n	8005e72 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	781a      	ldrb	r2, [r3, #0]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	3301      	adds	r3, #1
 8005e70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	b29a      	uxth	r2, r3
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d1cf      	bne.n	8005e2a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	9300      	str	r3, [sp, #0]
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	2200      	movs	r2, #0
 8005e92:	2140      	movs	r1, #64	; 0x40
 8005e94:	68f8      	ldr	r0, [r7, #12]
 8005e96:	f000 fb91 	bl	80065bc <UART_WaitOnFlagUntilTimeout>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d001      	beq.n	8005ea4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	e006      	b.n	8005eb2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2220      	movs	r2, #32
 8005ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005eac:	2300      	movs	r3, #0
 8005eae:	e000      	b.n	8005eb2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005eb0:	2302      	movs	r3, #2
  }
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3720      	adds	r7, #32
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}

08005eba <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005eba:	b580      	push	{r7, lr}
 8005ebc:	b084      	sub	sp, #16
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	60f8      	str	r0, [r7, #12]
 8005ec2:	60b9      	str	r1, [r7, #8]
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	2b20      	cmp	r3, #32
 8005ed2:	d11d      	bne.n	8005f10 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d002      	beq.n	8005ee0 <HAL_UART_Receive_IT+0x26>
 8005eda:	88fb      	ldrh	r3, [r7, #6]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d101      	bne.n	8005ee4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e016      	b.n	8005f12 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d101      	bne.n	8005ef2 <HAL_UART_Receive_IT+0x38>
 8005eee:	2302      	movs	r3, #2
 8005ef0:	e00f      	b.n	8005f12 <HAL_UART_Receive_IT+0x58>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2200      	movs	r2, #0
 8005efe:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005f00:	88fb      	ldrh	r3, [r7, #6]
 8005f02:	461a      	mov	r2, r3
 8005f04:	68b9      	ldr	r1, [r7, #8]
 8005f06:	68f8      	ldr	r0, [r7, #12]
 8005f08:	f000 fbc6 	bl	8006698 <UART_Start_Receive_IT>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	e000      	b.n	8005f12 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005f10:	2302      	movs	r3, #2
  }
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3710      	adds	r7, #16
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}

08005f1a <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8005f1a:	b580      	push	{r7, lr}
 8005f1c:	b09a      	sub	sp, #104	; 0x68
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	330c      	adds	r3, #12
 8005f28:	64bb      	str	r3, [r7, #72]	; 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f2c:	e853 3f00 	ldrex	r3, [r3]
 8005f30:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005f32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f38:	667b      	str	r3, [r7, #100]	; 0x64
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	330c      	adds	r3, #12
 8005f40:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005f42:	657a      	str	r2, [r7, #84]	; 0x54
 8005f44:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f46:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f48:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005f4a:	e841 2300 	strex	r3, r2, [r1]
 8005f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005f50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d1e5      	bne.n	8005f22 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	3314      	adds	r3, #20
 8005f5c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f60:	e853 3f00 	ldrex	r3, [r3]
 8005f64:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f68:	f023 0301 	bic.w	r3, r3, #1
 8005f6c:	663b      	str	r3, [r7, #96]	; 0x60
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	3314      	adds	r3, #20
 8005f74:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005f76:	643a      	str	r2, [r7, #64]	; 0x40
 8005f78:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f7a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f7e:	e841 2300 	strex	r3, r2, [r1]
 8005f82:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d1e5      	bne.n	8005f56 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d119      	bne.n	8005fc6 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	330c      	adds	r3, #12
 8005f98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f9a:	6a3b      	ldr	r3, [r7, #32]
 8005f9c:	e853 3f00 	ldrex	r3, [r3]
 8005fa0:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	f023 0310 	bic.w	r3, r3, #16
 8005fa8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	330c      	adds	r3, #12
 8005fb0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005fb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005fb4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fba:	e841 2300 	strex	r3, r2, [r1]
 8005fbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d1e5      	bne.n	8005f92 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	695b      	ldr	r3, [r3, #20]
 8005fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fd0:	2b40      	cmp	r3, #64	; 0x40
 8005fd2:	d136      	bne.n	8006042 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	3314      	adds	r3, #20
 8005fda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	e853 3f00 	ldrex	r3, [r3]
 8005fe2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fea:	65bb      	str	r3, [r7, #88]	; 0x58
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	3314      	adds	r3, #20
 8005ff2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ff4:	61ba      	str	r2, [r7, #24]
 8005ff6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff8:	6979      	ldr	r1, [r7, #20]
 8005ffa:	69ba      	ldr	r2, [r7, #24]
 8005ffc:	e841 2300 	strex	r3, r2, [r1]
 8006000:	613b      	str	r3, [r7, #16]
   return(result);
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d1e5      	bne.n	8005fd4 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800600c:	2b00      	cmp	r3, #0
 800600e:	d018      	beq.n	8006042 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006014:	2200      	movs	r2, #0
 8006016:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800601c:	4618      	mov	r0, r3
 800601e:	f7fb fea9 	bl	8001d74 <HAL_DMA_Abort>
 8006022:	4603      	mov	r3, r0
 8006024:	2b00      	cmp	r3, #0
 8006026:	d00c      	beq.n	8006042 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800602c:	4618      	mov	r0, r3
 800602e:	f7fb ff41 	bl	8001eb4 <HAL_DMA_GetError>
 8006032:	4603      	mov	r3, r0
 8006034:	2b20      	cmp	r3, #32
 8006036:	d104      	bne.n	8006042 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2210      	movs	r2, #16
 800603c:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 800603e:	2303      	movs	r3, #3
 8006040:	e00a      	b.n	8006058 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2220      	movs	r2, #32
 800604c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8006056:	2300      	movs	r3, #0
}
 8006058:	4618      	mov	r0, r3
 800605a:	3768      	adds	r7, #104	; 0x68
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}

08006060 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b0ba      	sub	sp, #232	; 0xe8
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	695b      	ldr	r3, [r3, #20]
 8006082:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006086:	2300      	movs	r3, #0
 8006088:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800608c:	2300      	movs	r3, #0
 800608e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006096:	f003 030f 	and.w	r3, r3, #15
 800609a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800609e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d10f      	bne.n	80060c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80060a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060aa:	f003 0320 	and.w	r3, r3, #32
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d009      	beq.n	80060c6 <HAL_UART_IRQHandler+0x66>
 80060b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060b6:	f003 0320 	and.w	r3, r3, #32
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d003      	beq.n	80060c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 fc03 	bl	80068ca <UART_Receive_IT>
      return;
 80060c4:	e256      	b.n	8006574 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80060c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	f000 80de 	beq.w	800628c <HAL_UART_IRQHandler+0x22c>
 80060d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060d4:	f003 0301 	and.w	r3, r3, #1
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d106      	bne.n	80060ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80060dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060e0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	f000 80d1 	beq.w	800628c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80060ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060ee:	f003 0301 	and.w	r3, r3, #1
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d00b      	beq.n	800610e <HAL_UART_IRQHandler+0xae>
 80060f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d005      	beq.n	800610e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006106:	f043 0201 	orr.w	r2, r3, #1
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800610e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006112:	f003 0304 	and.w	r3, r3, #4
 8006116:	2b00      	cmp	r3, #0
 8006118:	d00b      	beq.n	8006132 <HAL_UART_IRQHandler+0xd2>
 800611a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800611e:	f003 0301 	and.w	r3, r3, #1
 8006122:	2b00      	cmp	r3, #0
 8006124:	d005      	beq.n	8006132 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612a:	f043 0202 	orr.w	r2, r3, #2
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006136:	f003 0302 	and.w	r3, r3, #2
 800613a:	2b00      	cmp	r3, #0
 800613c:	d00b      	beq.n	8006156 <HAL_UART_IRQHandler+0xf6>
 800613e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006142:	f003 0301 	and.w	r3, r3, #1
 8006146:	2b00      	cmp	r3, #0
 8006148:	d005      	beq.n	8006156 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614e:	f043 0204 	orr.w	r2, r3, #4
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800615a:	f003 0308 	and.w	r3, r3, #8
 800615e:	2b00      	cmp	r3, #0
 8006160:	d011      	beq.n	8006186 <HAL_UART_IRQHandler+0x126>
 8006162:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006166:	f003 0320 	and.w	r3, r3, #32
 800616a:	2b00      	cmp	r3, #0
 800616c:	d105      	bne.n	800617a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800616e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006172:	f003 0301 	and.w	r3, r3, #1
 8006176:	2b00      	cmp	r3, #0
 8006178:	d005      	beq.n	8006186 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617e:	f043 0208 	orr.w	r2, r3, #8
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618a:	2b00      	cmp	r3, #0
 800618c:	f000 81ed 	beq.w	800656a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006194:	f003 0320 	and.w	r3, r3, #32
 8006198:	2b00      	cmp	r3, #0
 800619a:	d008      	beq.n	80061ae <HAL_UART_IRQHandler+0x14e>
 800619c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061a0:	f003 0320 	and.w	r3, r3, #32
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d002      	beq.n	80061ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f000 fb8e 	bl	80068ca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	695b      	ldr	r3, [r3, #20]
 80061b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061b8:	2b40      	cmp	r3, #64	; 0x40
 80061ba:	bf0c      	ite	eq
 80061bc:	2301      	moveq	r3, #1
 80061be:	2300      	movne	r3, #0
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ca:	f003 0308 	and.w	r3, r3, #8
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d103      	bne.n	80061da <HAL_UART_IRQHandler+0x17a>
 80061d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d04f      	beq.n	800627a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 fa96 	bl	800670c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	695b      	ldr	r3, [r3, #20]
 80061e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ea:	2b40      	cmp	r3, #64	; 0x40
 80061ec:	d141      	bne.n	8006272 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	3314      	adds	r3, #20
 80061f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80061fc:	e853 3f00 	ldrex	r3, [r3]
 8006200:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006204:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006208:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800620c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	3314      	adds	r3, #20
 8006216:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800621a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800621e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006222:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006226:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800622a:	e841 2300 	strex	r3, r2, [r1]
 800622e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006232:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d1d9      	bne.n	80061ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800623e:	2b00      	cmp	r3, #0
 8006240:	d013      	beq.n	800626a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006246:	4a7d      	ldr	r2, [pc, #500]	; (800643c <HAL_UART_IRQHandler+0x3dc>)
 8006248:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800624e:	4618      	mov	r0, r3
 8006250:	f7fb fe00 	bl	8001e54 <HAL_DMA_Abort_IT>
 8006254:	4603      	mov	r3, r0
 8006256:	2b00      	cmp	r3, #0
 8006258:	d016      	beq.n	8006288 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800625e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006264:	4610      	mov	r0, r2
 8006266:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006268:	e00e      	b.n	8006288 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 f990 	bl	8006590 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006270:	e00a      	b.n	8006288 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 f98c 	bl	8006590 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006278:	e006      	b.n	8006288 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 f988 	bl	8006590 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006286:	e170      	b.n	800656a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006288:	bf00      	nop
    return;
 800628a:	e16e      	b.n	800656a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006290:	2b01      	cmp	r3, #1
 8006292:	f040 814a 	bne.w	800652a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800629a:	f003 0310 	and.w	r3, r3, #16
 800629e:	2b00      	cmp	r3, #0
 80062a0:	f000 8143 	beq.w	800652a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80062a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062a8:	f003 0310 	and.w	r3, r3, #16
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	f000 813c 	beq.w	800652a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80062b2:	2300      	movs	r3, #0
 80062b4:	60bb      	str	r3, [r7, #8]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	60bb      	str	r3, [r7, #8]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	60bb      	str	r3, [r7, #8]
 80062c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	695b      	ldr	r3, [r3, #20]
 80062ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062d2:	2b40      	cmp	r3, #64	; 0x40
 80062d4:	f040 80b4 	bne.w	8006440 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80062e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	f000 8140 	beq.w	800656e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80062f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80062f6:	429a      	cmp	r2, r3
 80062f8:	f080 8139 	bcs.w	800656e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006302:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006308:	69db      	ldr	r3, [r3, #28]
 800630a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800630e:	f000 8088 	beq.w	8006422 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	330c      	adds	r3, #12
 8006318:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800631c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006320:	e853 3f00 	ldrex	r3, [r3]
 8006324:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006328:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800632c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006330:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	330c      	adds	r3, #12
 800633a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800633e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006342:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006346:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800634a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800634e:	e841 2300 	strex	r3, r2, [r1]
 8006352:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006356:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800635a:	2b00      	cmp	r3, #0
 800635c:	d1d9      	bne.n	8006312 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	3314      	adds	r3, #20
 8006364:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006366:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006368:	e853 3f00 	ldrex	r3, [r3]
 800636c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800636e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006370:	f023 0301 	bic.w	r3, r3, #1
 8006374:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	3314      	adds	r3, #20
 800637e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006382:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006386:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006388:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800638a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800638e:	e841 2300 	strex	r3, r2, [r1]
 8006392:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006394:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006396:	2b00      	cmp	r3, #0
 8006398:	d1e1      	bne.n	800635e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	3314      	adds	r3, #20
 80063a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063a4:	e853 3f00 	ldrex	r3, [r3]
 80063a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80063aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	3314      	adds	r3, #20
 80063ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80063be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80063c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80063c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80063c6:	e841 2300 	strex	r3, r2, [r1]
 80063ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80063cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d1e3      	bne.n	800639a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2220      	movs	r2, #32
 80063d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	330c      	adds	r3, #12
 80063e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063ea:	e853 3f00 	ldrex	r3, [r3]
 80063ee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80063f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063f2:	f023 0310 	bic.w	r3, r3, #16
 80063f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	330c      	adds	r3, #12
 8006400:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006404:	65ba      	str	r2, [r7, #88]	; 0x58
 8006406:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006408:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800640a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800640c:	e841 2300 	strex	r3, r2, [r1]
 8006410:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006412:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006414:	2b00      	cmp	r3, #0
 8006416:	d1e3      	bne.n	80063e0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800641c:	4618      	mov	r0, r3
 800641e:	f7fb fca9 	bl	8001d74 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800642a:	b29b      	uxth	r3, r3
 800642c:	1ad3      	subs	r3, r2, r3
 800642e:	b29b      	uxth	r3, r3
 8006430:	4619      	mov	r1, r3
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f000 f8b6 	bl	80065a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006438:	e099      	b.n	800656e <HAL_UART_IRQHandler+0x50e>
 800643a:	bf00      	nop
 800643c:	080067d3 	.word	0x080067d3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006448:	b29b      	uxth	r3, r3
 800644a:	1ad3      	subs	r3, r2, r3
 800644c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006454:	b29b      	uxth	r3, r3
 8006456:	2b00      	cmp	r3, #0
 8006458:	f000 808b 	beq.w	8006572 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800645c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006460:	2b00      	cmp	r3, #0
 8006462:	f000 8086 	beq.w	8006572 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	330c      	adds	r3, #12
 800646c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800646e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006470:	e853 3f00 	ldrex	r3, [r3]
 8006474:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006478:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800647c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	330c      	adds	r3, #12
 8006486:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800648a:	647a      	str	r2, [r7, #68]	; 0x44
 800648c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800648e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006490:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006492:	e841 2300 	strex	r3, r2, [r1]
 8006496:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800649a:	2b00      	cmp	r3, #0
 800649c:	d1e3      	bne.n	8006466 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	3314      	adds	r3, #20
 80064a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a8:	e853 3f00 	ldrex	r3, [r3]
 80064ac:	623b      	str	r3, [r7, #32]
   return(result);
 80064ae:	6a3b      	ldr	r3, [r7, #32]
 80064b0:	f023 0301 	bic.w	r3, r3, #1
 80064b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	3314      	adds	r3, #20
 80064be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80064c2:	633a      	str	r2, [r7, #48]	; 0x30
 80064c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064ca:	e841 2300 	strex	r3, r2, [r1]
 80064ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80064d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d1e3      	bne.n	800649e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2220      	movs	r2, #32
 80064da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	330c      	adds	r3, #12
 80064ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	e853 3f00 	ldrex	r3, [r3]
 80064f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f023 0310 	bic.w	r3, r3, #16
 80064fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	330c      	adds	r3, #12
 8006504:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006508:	61fa      	str	r2, [r7, #28]
 800650a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800650c:	69b9      	ldr	r1, [r7, #24]
 800650e:	69fa      	ldr	r2, [r7, #28]
 8006510:	e841 2300 	strex	r3, r2, [r1]
 8006514:	617b      	str	r3, [r7, #20]
   return(result);
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d1e3      	bne.n	80064e4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800651c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006520:	4619      	mov	r1, r3
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 f83e 	bl	80065a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006528:	e023      	b.n	8006572 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800652a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800652e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006532:	2b00      	cmp	r3, #0
 8006534:	d009      	beq.n	800654a <HAL_UART_IRQHandler+0x4ea>
 8006536:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800653a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800653e:	2b00      	cmp	r3, #0
 8006540:	d003      	beq.n	800654a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 f959 	bl	80067fa <UART_Transmit_IT>
    return;
 8006548:	e014      	b.n	8006574 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800654a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800654e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006552:	2b00      	cmp	r3, #0
 8006554:	d00e      	beq.n	8006574 <HAL_UART_IRQHandler+0x514>
 8006556:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800655a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800655e:	2b00      	cmp	r3, #0
 8006560:	d008      	beq.n	8006574 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 f999 	bl	800689a <UART_EndTransmit_IT>
    return;
 8006568:	e004      	b.n	8006574 <HAL_UART_IRQHandler+0x514>
    return;
 800656a:	bf00      	nop
 800656c:	e002      	b.n	8006574 <HAL_UART_IRQHandler+0x514>
      return;
 800656e:	bf00      	nop
 8006570:	e000      	b.n	8006574 <HAL_UART_IRQHandler+0x514>
      return;
 8006572:	bf00      	nop
  }
}
 8006574:	37e8      	adds	r7, #232	; 0xe8
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
 800657a:	bf00      	nop

0800657c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006584:	bf00      	nop
 8006586:	370c      	adds	r7, #12
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006598:	bf00      	nop
 800659a:	370c      	adds	r7, #12
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	460b      	mov	r3, r1
 80065ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80065b0:	bf00      	nop
 80065b2:	370c      	adds	r7, #12
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b090      	sub	sp, #64	; 0x40
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	60f8      	str	r0, [r7, #12]
 80065c4:	60b9      	str	r1, [r7, #8]
 80065c6:	603b      	str	r3, [r7, #0]
 80065c8:	4613      	mov	r3, r2
 80065ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065cc:	e050      	b.n	8006670 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065d4:	d04c      	beq.n	8006670 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80065d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d007      	beq.n	80065ec <UART_WaitOnFlagUntilTimeout+0x30>
 80065dc:	f7fb fadc 	bl	8001b98 <HAL_GetTick>
 80065e0:	4602      	mov	r2, r0
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	1ad3      	subs	r3, r2, r3
 80065e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d241      	bcs.n	8006670 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	330c      	adds	r3, #12
 80065f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f6:	e853 3f00 	ldrex	r3, [r3]
 80065fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006602:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	330c      	adds	r3, #12
 800660a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800660c:	637a      	str	r2, [r7, #52]	; 0x34
 800660e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006610:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006612:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006614:	e841 2300 	strex	r3, r2, [r1]
 8006618:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800661a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800661c:	2b00      	cmp	r3, #0
 800661e:	d1e5      	bne.n	80065ec <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	3314      	adds	r3, #20
 8006626:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	e853 3f00 	ldrex	r3, [r3]
 800662e:	613b      	str	r3, [r7, #16]
   return(result);
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	f023 0301 	bic.w	r3, r3, #1
 8006636:	63bb      	str	r3, [r7, #56]	; 0x38
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	3314      	adds	r3, #20
 800663e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006640:	623a      	str	r2, [r7, #32]
 8006642:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006644:	69f9      	ldr	r1, [r7, #28]
 8006646:	6a3a      	ldr	r2, [r7, #32]
 8006648:	e841 2300 	strex	r3, r2, [r1]
 800664c:	61bb      	str	r3, [r7, #24]
   return(result);
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d1e5      	bne.n	8006620 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2220      	movs	r2, #32
 8006658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2220      	movs	r2, #32
 8006660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2200      	movs	r2, #0
 8006668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800666c:	2303      	movs	r3, #3
 800666e:	e00f      	b.n	8006690 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	4013      	ands	r3, r2
 800667a:	68ba      	ldr	r2, [r7, #8]
 800667c:	429a      	cmp	r2, r3
 800667e:	bf0c      	ite	eq
 8006680:	2301      	moveq	r3, #1
 8006682:	2300      	movne	r3, #0
 8006684:	b2db      	uxtb	r3, r3
 8006686:	461a      	mov	r2, r3
 8006688:	79fb      	ldrb	r3, [r7, #7]
 800668a:	429a      	cmp	r2, r3
 800668c:	d09f      	beq.n	80065ce <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800668e:	2300      	movs	r3, #0
}
 8006690:	4618      	mov	r0, r3
 8006692:	3740      	adds	r7, #64	; 0x40
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006698:	b480      	push	{r7}
 800669a:	b085      	sub	sp, #20
 800669c:	af00      	add	r7, sp, #0
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	4613      	mov	r3, r2
 80066a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	68ba      	ldr	r2, [r7, #8]
 80066aa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	88fa      	ldrh	r2, [r7, #6]
 80066b0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	88fa      	ldrh	r2, [r7, #6]
 80066b6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2200      	movs	r2, #0
 80066bc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2222      	movs	r2, #34	; 0x22
 80066c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2200      	movs	r2, #0
 80066ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	68da      	ldr	r2, [r3, #12]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066dc:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	695a      	ldr	r2, [r3, #20]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f042 0201 	orr.w	r2, r2, #1
 80066ec:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	68da      	ldr	r2, [r3, #12]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f042 0220 	orr.w	r2, r2, #32
 80066fc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80066fe:	2300      	movs	r3, #0
}
 8006700:	4618      	mov	r0, r3
 8006702:	3714      	adds	r7, #20
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800670c:	b480      	push	{r7}
 800670e:	b095      	sub	sp, #84	; 0x54
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	330c      	adds	r3, #12
 800671a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800671e:	e853 3f00 	ldrex	r3, [r3]
 8006722:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006726:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800672a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	330c      	adds	r3, #12
 8006732:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006734:	643a      	str	r2, [r7, #64]	; 0x40
 8006736:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006738:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800673a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800673c:	e841 2300 	strex	r3, r2, [r1]
 8006740:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006744:	2b00      	cmp	r3, #0
 8006746:	d1e5      	bne.n	8006714 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	3314      	adds	r3, #20
 800674e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006750:	6a3b      	ldr	r3, [r7, #32]
 8006752:	e853 3f00 	ldrex	r3, [r3]
 8006756:	61fb      	str	r3, [r7, #28]
   return(result);
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	f023 0301 	bic.w	r3, r3, #1
 800675e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	3314      	adds	r3, #20
 8006766:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006768:	62fa      	str	r2, [r7, #44]	; 0x2c
 800676a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800676c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800676e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006770:	e841 2300 	strex	r3, r2, [r1]
 8006774:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006778:	2b00      	cmp	r3, #0
 800677a:	d1e5      	bne.n	8006748 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006780:	2b01      	cmp	r3, #1
 8006782:	d119      	bne.n	80067b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	330c      	adds	r3, #12
 800678a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	e853 3f00 	ldrex	r3, [r3]
 8006792:	60bb      	str	r3, [r7, #8]
   return(result);
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	f023 0310 	bic.w	r3, r3, #16
 800679a:	647b      	str	r3, [r7, #68]	; 0x44
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	330c      	adds	r3, #12
 80067a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80067a4:	61ba      	str	r2, [r7, #24]
 80067a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a8:	6979      	ldr	r1, [r7, #20]
 80067aa:	69ba      	ldr	r2, [r7, #24]
 80067ac:	e841 2300 	strex	r3, r2, [r1]
 80067b0:	613b      	str	r3, [r7, #16]
   return(result);
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d1e5      	bne.n	8006784 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2220      	movs	r2, #32
 80067bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80067c6:	bf00      	nop
 80067c8:	3754      	adds	r7, #84	; 0x54
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr

080067d2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80067d2:	b580      	push	{r7, lr}
 80067d4:	b084      	sub	sp, #16
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2200      	movs	r2, #0
 80067e4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2200      	movs	r2, #0
 80067ea:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80067ec:	68f8      	ldr	r0, [r7, #12]
 80067ee:	f7ff fecf 	bl	8006590 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067f2:	bf00      	nop
 80067f4:	3710      	adds	r7, #16
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}

080067fa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80067fa:	b480      	push	{r7}
 80067fc:	b085      	sub	sp, #20
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006808:	b2db      	uxtb	r3, r3
 800680a:	2b21      	cmp	r3, #33	; 0x21
 800680c:	d13e      	bne.n	800688c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006816:	d114      	bne.n	8006842 <UART_Transmit_IT+0x48>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	691b      	ldr	r3, [r3, #16]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d110      	bne.n	8006842 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6a1b      	ldr	r3, [r3, #32]
 8006824:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	881b      	ldrh	r3, [r3, #0]
 800682a:	461a      	mov	r2, r3
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006834:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a1b      	ldr	r3, [r3, #32]
 800683a:	1c9a      	adds	r2, r3, #2
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	621a      	str	r2, [r3, #32]
 8006840:	e008      	b.n	8006854 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a1b      	ldr	r3, [r3, #32]
 8006846:	1c59      	adds	r1, r3, #1
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	6211      	str	r1, [r2, #32]
 800684c:	781a      	ldrb	r2, [r3, #0]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006858:	b29b      	uxth	r3, r3
 800685a:	3b01      	subs	r3, #1
 800685c:	b29b      	uxth	r3, r3
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	4619      	mov	r1, r3
 8006862:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006864:	2b00      	cmp	r3, #0
 8006866:	d10f      	bne.n	8006888 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	68da      	ldr	r2, [r3, #12]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006876:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	68da      	ldr	r2, [r3, #12]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006886:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006888:	2300      	movs	r3, #0
 800688a:	e000      	b.n	800688e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800688c:	2302      	movs	r3, #2
  }
}
 800688e:	4618      	mov	r0, r3
 8006890:	3714      	adds	r7, #20
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr

0800689a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800689a:	b580      	push	{r7, lr}
 800689c:	b082      	sub	sp, #8
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	68da      	ldr	r2, [r3, #12]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068b0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2220      	movs	r2, #32
 80068b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f7ff fe5e 	bl	800657c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3708      	adds	r7, #8
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}

080068ca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80068ca:	b580      	push	{r7, lr}
 80068cc:	b08c      	sub	sp, #48	; 0x30
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	2b22      	cmp	r3, #34	; 0x22
 80068dc:	f040 80ab 	bne.w	8006a36 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068e8:	d117      	bne.n	800691a <UART_Receive_IT+0x50>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	691b      	ldr	r3, [r3, #16]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d113      	bne.n	800691a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80068f2:	2300      	movs	r3, #0
 80068f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068fa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	b29b      	uxth	r3, r3
 8006904:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006908:	b29a      	uxth	r2, r3
 800690a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800690c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006912:	1c9a      	adds	r2, r3, #2
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	629a      	str	r2, [r3, #40]	; 0x28
 8006918:	e026      	b.n	8006968 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800691e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006920:	2300      	movs	r3, #0
 8006922:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800692c:	d007      	beq.n	800693e <UART_Receive_IT+0x74>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d10a      	bne.n	800694c <UART_Receive_IT+0x82>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d106      	bne.n	800694c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	b2da      	uxtb	r2, r3
 8006946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006948:	701a      	strb	r2, [r3, #0]
 800694a:	e008      	b.n	800695e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	b2db      	uxtb	r3, r3
 8006954:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006958:	b2da      	uxtb	r2, r3
 800695a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800695c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006962:	1c5a      	adds	r2, r3, #1
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800696c:	b29b      	uxth	r3, r3
 800696e:	3b01      	subs	r3, #1
 8006970:	b29b      	uxth	r3, r3
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	4619      	mov	r1, r3
 8006976:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006978:	2b00      	cmp	r3, #0
 800697a:	d15a      	bne.n	8006a32 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	68da      	ldr	r2, [r3, #12]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f022 0220 	bic.w	r2, r2, #32
 800698a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	68da      	ldr	r2, [r3, #12]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800699a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	695a      	ldr	r2, [r3, #20]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f022 0201 	bic.w	r2, r2, #1
 80069aa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2220      	movs	r2, #32
 80069b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d135      	bne.n	8006a28 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	330c      	adds	r3, #12
 80069c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	e853 3f00 	ldrex	r3, [r3]
 80069d0:	613b      	str	r3, [r7, #16]
   return(result);
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	f023 0310 	bic.w	r3, r3, #16
 80069d8:	627b      	str	r3, [r7, #36]	; 0x24
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	330c      	adds	r3, #12
 80069e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069e2:	623a      	str	r2, [r7, #32]
 80069e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e6:	69f9      	ldr	r1, [r7, #28]
 80069e8:	6a3a      	ldr	r2, [r7, #32]
 80069ea:	e841 2300 	strex	r3, r2, [r1]
 80069ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80069f0:	69bb      	ldr	r3, [r7, #24]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d1e5      	bne.n	80069c2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 0310 	and.w	r3, r3, #16
 8006a00:	2b10      	cmp	r3, #16
 8006a02:	d10a      	bne.n	8006a1a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a04:	2300      	movs	r3, #0
 8006a06:	60fb      	str	r3, [r7, #12]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	60fb      	str	r3, [r7, #12]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	60fb      	str	r3, [r7, #12]
 8006a18:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006a1e:	4619      	mov	r1, r3
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f7ff fdbf 	bl	80065a4 <HAL_UARTEx_RxEventCallback>
 8006a26:	e002      	b.n	8006a2e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f7fa fa8b 	bl	8000f44 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	e002      	b.n	8006a38 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006a32:	2300      	movs	r3, #0
 8006a34:	e000      	b.n	8006a38 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006a36:	2302      	movs	r3, #2
  }
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3730      	adds	r7, #48	; 0x30
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a44:	b09f      	sub	sp, #124	; 0x7c
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	691b      	ldr	r3, [r3, #16]
 8006a50:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006a54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a56:	68d9      	ldr	r1, [r3, #12]
 8006a58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	ea40 0301 	orr.w	r3, r0, r1
 8006a60:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006a62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a64:	689a      	ldr	r2, [r3, #8]
 8006a66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a68:	691b      	ldr	r3, [r3, #16]
 8006a6a:	431a      	orrs	r2, r3
 8006a6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a6e:	695b      	ldr	r3, [r3, #20]
 8006a70:	431a      	orrs	r2, r3
 8006a72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a74:	69db      	ldr	r3, [r3, #28]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006a7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006a84:	f021 010c 	bic.w	r1, r1, #12
 8006a88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a8e:	430b      	orrs	r3, r1
 8006a90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	695b      	ldr	r3, [r3, #20]
 8006a98:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006a9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a9e:	6999      	ldr	r1, [r3, #24]
 8006aa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	ea40 0301 	orr.w	r3, r0, r1
 8006aa8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006aaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	4bc5      	ldr	r3, [pc, #788]	; (8006dc4 <UART_SetConfig+0x384>)
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d004      	beq.n	8006abe <UART_SetConfig+0x7e>
 8006ab4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	4bc3      	ldr	r3, [pc, #780]	; (8006dc8 <UART_SetConfig+0x388>)
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d103      	bne.n	8006ac6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006abe:	f7fe fe29 	bl	8005714 <HAL_RCC_GetPCLK2Freq>
 8006ac2:	6778      	str	r0, [r7, #116]	; 0x74
 8006ac4:	e002      	b.n	8006acc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006ac6:	f7fe fe11 	bl	80056ec <HAL_RCC_GetPCLK1Freq>
 8006aca:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006acc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ace:	69db      	ldr	r3, [r3, #28]
 8006ad0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ad4:	f040 80b6 	bne.w	8006c44 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006ad8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ada:	461c      	mov	r4, r3
 8006adc:	f04f 0500 	mov.w	r5, #0
 8006ae0:	4622      	mov	r2, r4
 8006ae2:	462b      	mov	r3, r5
 8006ae4:	1891      	adds	r1, r2, r2
 8006ae6:	6439      	str	r1, [r7, #64]	; 0x40
 8006ae8:	415b      	adcs	r3, r3
 8006aea:	647b      	str	r3, [r7, #68]	; 0x44
 8006aec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006af0:	1912      	adds	r2, r2, r4
 8006af2:	eb45 0303 	adc.w	r3, r5, r3
 8006af6:	f04f 0000 	mov.w	r0, #0
 8006afa:	f04f 0100 	mov.w	r1, #0
 8006afe:	00d9      	lsls	r1, r3, #3
 8006b00:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006b04:	00d0      	lsls	r0, r2, #3
 8006b06:	4602      	mov	r2, r0
 8006b08:	460b      	mov	r3, r1
 8006b0a:	1911      	adds	r1, r2, r4
 8006b0c:	6639      	str	r1, [r7, #96]	; 0x60
 8006b0e:	416b      	adcs	r3, r5
 8006b10:	667b      	str	r3, [r7, #100]	; 0x64
 8006b12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	461a      	mov	r2, r3
 8006b18:	f04f 0300 	mov.w	r3, #0
 8006b1c:	1891      	adds	r1, r2, r2
 8006b1e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006b20:	415b      	adcs	r3, r3
 8006b22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006b28:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006b2c:	f7f9 fb50 	bl	80001d0 <__aeabi_uldivmod>
 8006b30:	4602      	mov	r2, r0
 8006b32:	460b      	mov	r3, r1
 8006b34:	4ba5      	ldr	r3, [pc, #660]	; (8006dcc <UART_SetConfig+0x38c>)
 8006b36:	fba3 2302 	umull	r2, r3, r3, r2
 8006b3a:	095b      	lsrs	r3, r3, #5
 8006b3c:	011e      	lsls	r6, r3, #4
 8006b3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b40:	461c      	mov	r4, r3
 8006b42:	f04f 0500 	mov.w	r5, #0
 8006b46:	4622      	mov	r2, r4
 8006b48:	462b      	mov	r3, r5
 8006b4a:	1891      	adds	r1, r2, r2
 8006b4c:	6339      	str	r1, [r7, #48]	; 0x30
 8006b4e:	415b      	adcs	r3, r3
 8006b50:	637b      	str	r3, [r7, #52]	; 0x34
 8006b52:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006b56:	1912      	adds	r2, r2, r4
 8006b58:	eb45 0303 	adc.w	r3, r5, r3
 8006b5c:	f04f 0000 	mov.w	r0, #0
 8006b60:	f04f 0100 	mov.w	r1, #0
 8006b64:	00d9      	lsls	r1, r3, #3
 8006b66:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006b6a:	00d0      	lsls	r0, r2, #3
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	460b      	mov	r3, r1
 8006b70:	1911      	adds	r1, r2, r4
 8006b72:	65b9      	str	r1, [r7, #88]	; 0x58
 8006b74:	416b      	adcs	r3, r5
 8006b76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	f04f 0300 	mov.w	r3, #0
 8006b82:	1891      	adds	r1, r2, r2
 8006b84:	62b9      	str	r1, [r7, #40]	; 0x28
 8006b86:	415b      	adcs	r3, r3
 8006b88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006b8e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006b92:	f7f9 fb1d 	bl	80001d0 <__aeabi_uldivmod>
 8006b96:	4602      	mov	r2, r0
 8006b98:	460b      	mov	r3, r1
 8006b9a:	4b8c      	ldr	r3, [pc, #560]	; (8006dcc <UART_SetConfig+0x38c>)
 8006b9c:	fba3 1302 	umull	r1, r3, r3, r2
 8006ba0:	095b      	lsrs	r3, r3, #5
 8006ba2:	2164      	movs	r1, #100	; 0x64
 8006ba4:	fb01 f303 	mul.w	r3, r1, r3
 8006ba8:	1ad3      	subs	r3, r2, r3
 8006baa:	00db      	lsls	r3, r3, #3
 8006bac:	3332      	adds	r3, #50	; 0x32
 8006bae:	4a87      	ldr	r2, [pc, #540]	; (8006dcc <UART_SetConfig+0x38c>)
 8006bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8006bb4:	095b      	lsrs	r3, r3, #5
 8006bb6:	005b      	lsls	r3, r3, #1
 8006bb8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006bbc:	441e      	add	r6, r3
 8006bbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f04f 0100 	mov.w	r1, #0
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	460b      	mov	r3, r1
 8006bca:	1894      	adds	r4, r2, r2
 8006bcc:	623c      	str	r4, [r7, #32]
 8006bce:	415b      	adcs	r3, r3
 8006bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8006bd2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006bd6:	1812      	adds	r2, r2, r0
 8006bd8:	eb41 0303 	adc.w	r3, r1, r3
 8006bdc:	f04f 0400 	mov.w	r4, #0
 8006be0:	f04f 0500 	mov.w	r5, #0
 8006be4:	00dd      	lsls	r5, r3, #3
 8006be6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006bea:	00d4      	lsls	r4, r2, #3
 8006bec:	4622      	mov	r2, r4
 8006bee:	462b      	mov	r3, r5
 8006bf0:	1814      	adds	r4, r2, r0
 8006bf2:	653c      	str	r4, [r7, #80]	; 0x50
 8006bf4:	414b      	adcs	r3, r1
 8006bf6:	657b      	str	r3, [r7, #84]	; 0x54
 8006bf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	f04f 0300 	mov.w	r3, #0
 8006c02:	1891      	adds	r1, r2, r2
 8006c04:	61b9      	str	r1, [r7, #24]
 8006c06:	415b      	adcs	r3, r3
 8006c08:	61fb      	str	r3, [r7, #28]
 8006c0a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c0e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006c12:	f7f9 fadd 	bl	80001d0 <__aeabi_uldivmod>
 8006c16:	4602      	mov	r2, r0
 8006c18:	460b      	mov	r3, r1
 8006c1a:	4b6c      	ldr	r3, [pc, #432]	; (8006dcc <UART_SetConfig+0x38c>)
 8006c1c:	fba3 1302 	umull	r1, r3, r3, r2
 8006c20:	095b      	lsrs	r3, r3, #5
 8006c22:	2164      	movs	r1, #100	; 0x64
 8006c24:	fb01 f303 	mul.w	r3, r1, r3
 8006c28:	1ad3      	subs	r3, r2, r3
 8006c2a:	00db      	lsls	r3, r3, #3
 8006c2c:	3332      	adds	r3, #50	; 0x32
 8006c2e:	4a67      	ldr	r2, [pc, #412]	; (8006dcc <UART_SetConfig+0x38c>)
 8006c30:	fba2 2303 	umull	r2, r3, r2, r3
 8006c34:	095b      	lsrs	r3, r3, #5
 8006c36:	f003 0207 	and.w	r2, r3, #7
 8006c3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4432      	add	r2, r6
 8006c40:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006c42:	e0b9      	b.n	8006db8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c46:	461c      	mov	r4, r3
 8006c48:	f04f 0500 	mov.w	r5, #0
 8006c4c:	4622      	mov	r2, r4
 8006c4e:	462b      	mov	r3, r5
 8006c50:	1891      	adds	r1, r2, r2
 8006c52:	6139      	str	r1, [r7, #16]
 8006c54:	415b      	adcs	r3, r3
 8006c56:	617b      	str	r3, [r7, #20]
 8006c58:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006c5c:	1912      	adds	r2, r2, r4
 8006c5e:	eb45 0303 	adc.w	r3, r5, r3
 8006c62:	f04f 0000 	mov.w	r0, #0
 8006c66:	f04f 0100 	mov.w	r1, #0
 8006c6a:	00d9      	lsls	r1, r3, #3
 8006c6c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006c70:	00d0      	lsls	r0, r2, #3
 8006c72:	4602      	mov	r2, r0
 8006c74:	460b      	mov	r3, r1
 8006c76:	eb12 0804 	adds.w	r8, r2, r4
 8006c7a:	eb43 0905 	adc.w	r9, r3, r5
 8006c7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	4618      	mov	r0, r3
 8006c84:	f04f 0100 	mov.w	r1, #0
 8006c88:	f04f 0200 	mov.w	r2, #0
 8006c8c:	f04f 0300 	mov.w	r3, #0
 8006c90:	008b      	lsls	r3, r1, #2
 8006c92:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006c96:	0082      	lsls	r2, r0, #2
 8006c98:	4640      	mov	r0, r8
 8006c9a:	4649      	mov	r1, r9
 8006c9c:	f7f9 fa98 	bl	80001d0 <__aeabi_uldivmod>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	4b49      	ldr	r3, [pc, #292]	; (8006dcc <UART_SetConfig+0x38c>)
 8006ca6:	fba3 2302 	umull	r2, r3, r3, r2
 8006caa:	095b      	lsrs	r3, r3, #5
 8006cac:	011e      	lsls	r6, r3, #4
 8006cae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f04f 0100 	mov.w	r1, #0
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	460b      	mov	r3, r1
 8006cba:	1894      	adds	r4, r2, r2
 8006cbc:	60bc      	str	r4, [r7, #8]
 8006cbe:	415b      	adcs	r3, r3
 8006cc0:	60fb      	str	r3, [r7, #12]
 8006cc2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006cc6:	1812      	adds	r2, r2, r0
 8006cc8:	eb41 0303 	adc.w	r3, r1, r3
 8006ccc:	f04f 0400 	mov.w	r4, #0
 8006cd0:	f04f 0500 	mov.w	r5, #0
 8006cd4:	00dd      	lsls	r5, r3, #3
 8006cd6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006cda:	00d4      	lsls	r4, r2, #3
 8006cdc:	4622      	mov	r2, r4
 8006cde:	462b      	mov	r3, r5
 8006ce0:	1814      	adds	r4, r2, r0
 8006ce2:	64bc      	str	r4, [r7, #72]	; 0x48
 8006ce4:	414b      	adcs	r3, r1
 8006ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ce8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	4618      	mov	r0, r3
 8006cee:	f04f 0100 	mov.w	r1, #0
 8006cf2:	f04f 0200 	mov.w	r2, #0
 8006cf6:	f04f 0300 	mov.w	r3, #0
 8006cfa:	008b      	lsls	r3, r1, #2
 8006cfc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006d00:	0082      	lsls	r2, r0, #2
 8006d02:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006d06:	f7f9 fa63 	bl	80001d0 <__aeabi_uldivmod>
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	4b2f      	ldr	r3, [pc, #188]	; (8006dcc <UART_SetConfig+0x38c>)
 8006d10:	fba3 1302 	umull	r1, r3, r3, r2
 8006d14:	095b      	lsrs	r3, r3, #5
 8006d16:	2164      	movs	r1, #100	; 0x64
 8006d18:	fb01 f303 	mul.w	r3, r1, r3
 8006d1c:	1ad3      	subs	r3, r2, r3
 8006d1e:	011b      	lsls	r3, r3, #4
 8006d20:	3332      	adds	r3, #50	; 0x32
 8006d22:	4a2a      	ldr	r2, [pc, #168]	; (8006dcc <UART_SetConfig+0x38c>)
 8006d24:	fba2 2303 	umull	r2, r3, r2, r3
 8006d28:	095b      	lsrs	r3, r3, #5
 8006d2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d2e:	441e      	add	r6, r3
 8006d30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d32:	4618      	mov	r0, r3
 8006d34:	f04f 0100 	mov.w	r1, #0
 8006d38:	4602      	mov	r2, r0
 8006d3a:	460b      	mov	r3, r1
 8006d3c:	1894      	adds	r4, r2, r2
 8006d3e:	603c      	str	r4, [r7, #0]
 8006d40:	415b      	adcs	r3, r3
 8006d42:	607b      	str	r3, [r7, #4]
 8006d44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d48:	1812      	adds	r2, r2, r0
 8006d4a:	eb41 0303 	adc.w	r3, r1, r3
 8006d4e:	f04f 0400 	mov.w	r4, #0
 8006d52:	f04f 0500 	mov.w	r5, #0
 8006d56:	00dd      	lsls	r5, r3, #3
 8006d58:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006d5c:	00d4      	lsls	r4, r2, #3
 8006d5e:	4622      	mov	r2, r4
 8006d60:	462b      	mov	r3, r5
 8006d62:	eb12 0a00 	adds.w	sl, r2, r0
 8006d66:	eb43 0b01 	adc.w	fp, r3, r1
 8006d6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f04f 0100 	mov.w	r1, #0
 8006d74:	f04f 0200 	mov.w	r2, #0
 8006d78:	f04f 0300 	mov.w	r3, #0
 8006d7c:	008b      	lsls	r3, r1, #2
 8006d7e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006d82:	0082      	lsls	r2, r0, #2
 8006d84:	4650      	mov	r0, sl
 8006d86:	4659      	mov	r1, fp
 8006d88:	f7f9 fa22 	bl	80001d0 <__aeabi_uldivmod>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	460b      	mov	r3, r1
 8006d90:	4b0e      	ldr	r3, [pc, #56]	; (8006dcc <UART_SetConfig+0x38c>)
 8006d92:	fba3 1302 	umull	r1, r3, r3, r2
 8006d96:	095b      	lsrs	r3, r3, #5
 8006d98:	2164      	movs	r1, #100	; 0x64
 8006d9a:	fb01 f303 	mul.w	r3, r1, r3
 8006d9e:	1ad3      	subs	r3, r2, r3
 8006da0:	011b      	lsls	r3, r3, #4
 8006da2:	3332      	adds	r3, #50	; 0x32
 8006da4:	4a09      	ldr	r2, [pc, #36]	; (8006dcc <UART_SetConfig+0x38c>)
 8006da6:	fba2 2303 	umull	r2, r3, r2, r3
 8006daa:	095b      	lsrs	r3, r3, #5
 8006dac:	f003 020f 	and.w	r2, r3, #15
 8006db0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4432      	add	r2, r6
 8006db6:	609a      	str	r2, [r3, #8]
}
 8006db8:	bf00      	nop
 8006dba:	377c      	adds	r7, #124	; 0x7c
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dc2:	bf00      	nop
 8006dc4:	40011000 	.word	0x40011000
 8006dc8:	40011400 	.word	0x40011400
 8006dcc:	51eb851f 	.word	0x51eb851f

08006dd0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b085      	sub	sp, #20
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006dde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006de2:	2b84      	cmp	r3, #132	; 0x84
 8006de4:	d005      	beq.n	8006df2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006de6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	4413      	add	r3, r2
 8006dee:	3303      	adds	r3, #3
 8006df0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006df2:	68fb      	ldr	r3, [r7, #12]
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3714      	adds	r7, #20
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006e04:	f000 faf6 	bl	80073f4 <vTaskStartScheduler>
  
  return osOK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	bd80      	pop	{r7, pc}

08006e0e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006e0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e10:	b089      	sub	sp, #36	; 0x24
 8006e12:	af04      	add	r7, sp, #16
 8006e14:	6078      	str	r0, [r7, #4]
 8006e16:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	695b      	ldr	r3, [r3, #20]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d020      	beq.n	8006e62 <osThreadCreate+0x54>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	699b      	ldr	r3, [r3, #24]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d01c      	beq.n	8006e62 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	685c      	ldr	r4, [r3, #4]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681d      	ldr	r5, [r3, #0]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	691e      	ldr	r6, [r3, #16]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f7ff ffc8 	bl	8006dd0 <makeFreeRtosPriority>
 8006e40:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	695b      	ldr	r3, [r3, #20]
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006e4a:	9202      	str	r2, [sp, #8]
 8006e4c:	9301      	str	r3, [sp, #4]
 8006e4e:	9100      	str	r1, [sp, #0]
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	4632      	mov	r2, r6
 8006e54:	4629      	mov	r1, r5
 8006e56:	4620      	mov	r0, r4
 8006e58:	f000 f8ed 	bl	8007036 <xTaskCreateStatic>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	60fb      	str	r3, [r7, #12]
 8006e60:	e01c      	b.n	8006e9c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	685c      	ldr	r4, [r3, #4]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006e6e:	b29e      	uxth	r6, r3
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006e76:	4618      	mov	r0, r3
 8006e78:	f7ff ffaa 	bl	8006dd0 <makeFreeRtosPriority>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	f107 030c 	add.w	r3, r7, #12
 8006e82:	9301      	str	r3, [sp, #4]
 8006e84:	9200      	str	r2, [sp, #0]
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	4632      	mov	r2, r6
 8006e8a:	4629      	mov	r1, r5
 8006e8c:	4620      	mov	r0, r4
 8006e8e:	f000 f92f 	bl	80070f0 <xTaskCreate>
 8006e92:	4603      	mov	r3, r0
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d001      	beq.n	8006e9c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	e000      	b.n	8006e9e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3714      	adds	r7, #20
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006ea6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006ea6:	b580      	push	{r7, lr}
 8006ea8:	b084      	sub	sp, #16
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d001      	beq.n	8006ebc <osDelay+0x16>
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	e000      	b.n	8006ebe <osDelay+0x18>
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f000 fa64 	bl	800738c <vTaskDelay>
  
  return osOK;
 8006ec4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3710      	adds	r7, #16
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}

08006ece <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006ece:	b480      	push	{r7}
 8006ed0:	b083      	sub	sp, #12
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f103 0208 	add.w	r2, r3, #8
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ee6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f103 0208 	add.w	r2, r3, #8
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f103 0208 	add.w	r2, r3, #8
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006f02:	bf00      	nop
 8006f04:	370c      	adds	r7, #12
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr

08006f0e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006f0e:	b480      	push	{r7}
 8006f10:	b083      	sub	sp, #12
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006f1c:	bf00      	nop
 8006f1e:	370c      	adds	r7, #12
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr

08006f28 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b085      	sub	sp, #20
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	68fa      	ldr	r2, [r7, #12]
 8006f3c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	689a      	ldr	r2, [r3, #8]
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	683a      	ldr	r2, [r7, #0]
 8006f4c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	683a      	ldr	r2, [r7, #0]
 8006f52:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	1c5a      	adds	r2, r3, #1
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	601a      	str	r2, [r3, #0]
}
 8006f64:	bf00      	nop
 8006f66:	3714      	adds	r7, #20
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr

08006f70 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f70:	b480      	push	{r7}
 8006f72:	b085      	sub	sp, #20
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f86:	d103      	bne.n	8006f90 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	691b      	ldr	r3, [r3, #16]
 8006f8c:	60fb      	str	r3, [r7, #12]
 8006f8e:	e00c      	b.n	8006faa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	3308      	adds	r3, #8
 8006f94:	60fb      	str	r3, [r7, #12]
 8006f96:	e002      	b.n	8006f9e <vListInsert+0x2e>
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	60fb      	str	r3, [r7, #12]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	68ba      	ldr	r2, [r7, #8]
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d2f6      	bcs.n	8006f98 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	685a      	ldr	r2, [r3, #4]
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	683a      	ldr	r2, [r7, #0]
 8006fb8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	68fa      	ldr	r2, [r7, #12]
 8006fbe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	683a      	ldr	r2, [r7, #0]
 8006fc4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	1c5a      	adds	r2, r3, #1
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	601a      	str	r2, [r3, #0]
}
 8006fd6:	bf00      	nop
 8006fd8:	3714      	adds	r7, #20
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr

08006fe2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006fe2:	b480      	push	{r7}
 8006fe4:	b085      	sub	sp, #20
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	691b      	ldr	r3, [r3, #16]
 8006fee:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	6892      	ldr	r2, [r2, #8]
 8006ff8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	6852      	ldr	r2, [r2, #4]
 8007002:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	429a      	cmp	r2, r3
 800700c:	d103      	bne.n	8007016 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	689a      	ldr	r2, [r3, #8]
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	1e5a      	subs	r2, r3, #1
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
}
 800702a:	4618      	mov	r0, r3
 800702c:	3714      	adds	r7, #20
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr

08007036 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007036:	b580      	push	{r7, lr}
 8007038:	b08e      	sub	sp, #56	; 0x38
 800703a:	af04      	add	r7, sp, #16
 800703c:	60f8      	str	r0, [r7, #12]
 800703e:	60b9      	str	r1, [r7, #8]
 8007040:	607a      	str	r2, [r7, #4]
 8007042:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007046:	2b00      	cmp	r3, #0
 8007048:	d10a      	bne.n	8007060 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800704a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800704e:	f383 8811 	msr	BASEPRI, r3
 8007052:	f3bf 8f6f 	isb	sy
 8007056:	f3bf 8f4f 	dsb	sy
 800705a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800705c:	bf00      	nop
 800705e:	e7fe      	b.n	800705e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007062:	2b00      	cmp	r3, #0
 8007064:	d10a      	bne.n	800707c <xTaskCreateStatic+0x46>
	__asm volatile
 8007066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800706a:	f383 8811 	msr	BASEPRI, r3
 800706e:	f3bf 8f6f 	isb	sy
 8007072:	f3bf 8f4f 	dsb	sy
 8007076:	61fb      	str	r3, [r7, #28]
}
 8007078:	bf00      	nop
 800707a:	e7fe      	b.n	800707a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800707c:	23b4      	movs	r3, #180	; 0xb4
 800707e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	2bb4      	cmp	r3, #180	; 0xb4
 8007084:	d00a      	beq.n	800709c <xTaskCreateStatic+0x66>
	__asm volatile
 8007086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800708a:	f383 8811 	msr	BASEPRI, r3
 800708e:	f3bf 8f6f 	isb	sy
 8007092:	f3bf 8f4f 	dsb	sy
 8007096:	61bb      	str	r3, [r7, #24]
}
 8007098:	bf00      	nop
 800709a:	e7fe      	b.n	800709a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800709c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800709e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d01e      	beq.n	80070e2 <xTaskCreateStatic+0xac>
 80070a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d01b      	beq.n	80070e2 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80070aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ac:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80070ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070b2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80070b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b6:	2202      	movs	r2, #2
 80070b8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80070bc:	2300      	movs	r3, #0
 80070be:	9303      	str	r3, [sp, #12]
 80070c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c2:	9302      	str	r3, [sp, #8]
 80070c4:	f107 0314 	add.w	r3, r7, #20
 80070c8:	9301      	str	r3, [sp, #4]
 80070ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070cc:	9300      	str	r3, [sp, #0]
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	68b9      	ldr	r1, [r7, #8]
 80070d4:	68f8      	ldr	r0, [r7, #12]
 80070d6:	f000 f851 	bl	800717c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80070da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80070dc:	f000 f8ec 	bl	80072b8 <prvAddNewTaskToReadyList>
 80070e0:	e001      	b.n	80070e6 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80070e2:	2300      	movs	r3, #0
 80070e4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80070e6:	697b      	ldr	r3, [r7, #20]
	}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3728      	adds	r7, #40	; 0x28
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b08c      	sub	sp, #48	; 0x30
 80070f4:	af04      	add	r7, sp, #16
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	60b9      	str	r1, [r7, #8]
 80070fa:	603b      	str	r3, [r7, #0]
 80070fc:	4613      	mov	r3, r2
 80070fe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007100:	88fb      	ldrh	r3, [r7, #6]
 8007102:	009b      	lsls	r3, r3, #2
 8007104:	4618      	mov	r0, r3
 8007106:	f000 feef 	bl	8007ee8 <pvPortMalloc>
 800710a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d00e      	beq.n	8007130 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007112:	20b4      	movs	r0, #180	; 0xb4
 8007114:	f000 fee8 	bl	8007ee8 <pvPortMalloc>
 8007118:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800711a:	69fb      	ldr	r3, [r7, #28]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d003      	beq.n	8007128 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007120:	69fb      	ldr	r3, [r7, #28]
 8007122:	697a      	ldr	r2, [r7, #20]
 8007124:	631a      	str	r2, [r3, #48]	; 0x30
 8007126:	e005      	b.n	8007134 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007128:	6978      	ldr	r0, [r7, #20]
 800712a:	f000 ffa9 	bl	8008080 <vPortFree>
 800712e:	e001      	b.n	8007134 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007130:	2300      	movs	r3, #0
 8007132:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007134:	69fb      	ldr	r3, [r7, #28]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d017      	beq.n	800716a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800713a:	69fb      	ldr	r3, [r7, #28]
 800713c:	2200      	movs	r2, #0
 800713e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007142:	88fa      	ldrh	r2, [r7, #6]
 8007144:	2300      	movs	r3, #0
 8007146:	9303      	str	r3, [sp, #12]
 8007148:	69fb      	ldr	r3, [r7, #28]
 800714a:	9302      	str	r3, [sp, #8]
 800714c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800714e:	9301      	str	r3, [sp, #4]
 8007150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007152:	9300      	str	r3, [sp, #0]
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	68b9      	ldr	r1, [r7, #8]
 8007158:	68f8      	ldr	r0, [r7, #12]
 800715a:	f000 f80f 	bl	800717c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800715e:	69f8      	ldr	r0, [r7, #28]
 8007160:	f000 f8aa 	bl	80072b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007164:	2301      	movs	r3, #1
 8007166:	61bb      	str	r3, [r7, #24]
 8007168:	e002      	b.n	8007170 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800716a:	f04f 33ff 	mov.w	r3, #4294967295
 800716e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007170:	69bb      	ldr	r3, [r7, #24]
	}
 8007172:	4618      	mov	r0, r3
 8007174:	3720      	adds	r7, #32
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}
	...

0800717c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b088      	sub	sp, #32
 8007180:	af00      	add	r7, sp, #0
 8007182:	60f8      	str	r0, [r7, #12]
 8007184:	60b9      	str	r1, [r7, #8]
 8007186:	607a      	str	r2, [r7, #4]
 8007188:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800718a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800718c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007194:	3b01      	subs	r3, #1
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	4413      	add	r3, r2
 800719a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800719c:	69bb      	ldr	r3, [r7, #24]
 800719e:	f023 0307 	bic.w	r3, r3, #7
 80071a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80071a4:	69bb      	ldr	r3, [r7, #24]
 80071a6:	f003 0307 	and.w	r3, r3, #7
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d00a      	beq.n	80071c4 <prvInitialiseNewTask+0x48>
	__asm volatile
 80071ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b2:	f383 8811 	msr	BASEPRI, r3
 80071b6:	f3bf 8f6f 	isb	sy
 80071ba:	f3bf 8f4f 	dsb	sy
 80071be:	617b      	str	r3, [r7, #20]
}
 80071c0:	bf00      	nop
 80071c2:	e7fe      	b.n	80071c2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d01f      	beq.n	800720a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80071ca:	2300      	movs	r3, #0
 80071cc:	61fb      	str	r3, [r7, #28]
 80071ce:	e012      	b.n	80071f6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80071d0:	68ba      	ldr	r2, [r7, #8]
 80071d2:	69fb      	ldr	r3, [r7, #28]
 80071d4:	4413      	add	r3, r2
 80071d6:	7819      	ldrb	r1, [r3, #0]
 80071d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071da:	69fb      	ldr	r3, [r7, #28]
 80071dc:	4413      	add	r3, r2
 80071de:	3334      	adds	r3, #52	; 0x34
 80071e0:	460a      	mov	r2, r1
 80071e2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80071e4:	68ba      	ldr	r2, [r7, #8]
 80071e6:	69fb      	ldr	r3, [r7, #28]
 80071e8:	4413      	add	r3, r2
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d006      	beq.n	80071fe <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80071f0:	69fb      	ldr	r3, [r7, #28]
 80071f2:	3301      	adds	r3, #1
 80071f4:	61fb      	str	r3, [r7, #28]
 80071f6:	69fb      	ldr	r3, [r7, #28]
 80071f8:	2b0f      	cmp	r3, #15
 80071fa:	d9e9      	bls.n	80071d0 <prvInitialiseNewTask+0x54>
 80071fc:	e000      	b.n	8007200 <prvInitialiseNewTask+0x84>
			{
				break;
 80071fe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007202:	2200      	movs	r2, #0
 8007204:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007208:	e003      	b.n	8007212 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800720a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800720c:	2200      	movs	r2, #0
 800720e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007214:	2b06      	cmp	r3, #6
 8007216:	d901      	bls.n	800721c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007218:	2306      	movs	r3, #6
 800721a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800721c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800721e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007220:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007224:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007226:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800722a:	2200      	movs	r2, #0
 800722c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800722e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007230:	3304      	adds	r3, #4
 8007232:	4618      	mov	r0, r3
 8007234:	f7ff fe6b 	bl	8006f0e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800723a:	3318      	adds	r3, #24
 800723c:	4618      	mov	r0, r3
 800723e:	f7ff fe66 	bl	8006f0e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007244:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007246:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800724a:	f1c3 0207 	rsb	r2, r3, #7
 800724e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007250:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007254:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007256:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800725a:	2200      	movs	r2, #0
 800725c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007262:	2200      	movs	r2, #0
 8007264:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800726a:	334c      	adds	r3, #76	; 0x4c
 800726c:	2260      	movs	r2, #96	; 0x60
 800726e:	2100      	movs	r1, #0
 8007270:	4618      	mov	r0, r3
 8007272:	f001 f863 	bl	800833c <memset>
 8007276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007278:	4a0c      	ldr	r2, [pc, #48]	; (80072ac <prvInitialiseNewTask+0x130>)
 800727a:	651a      	str	r2, [r3, #80]	; 0x50
 800727c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800727e:	4a0c      	ldr	r2, [pc, #48]	; (80072b0 <prvInitialiseNewTask+0x134>)
 8007280:	655a      	str	r2, [r3, #84]	; 0x54
 8007282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007284:	4a0b      	ldr	r2, [pc, #44]	; (80072b4 <prvInitialiseNewTask+0x138>)
 8007286:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007288:	683a      	ldr	r2, [r7, #0]
 800728a:	68f9      	ldr	r1, [r7, #12]
 800728c:	69b8      	ldr	r0, [r7, #24]
 800728e:	f000 fc1f 	bl	8007ad0 <pxPortInitialiseStack>
 8007292:	4602      	mov	r2, r0
 8007294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007296:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800729a:	2b00      	cmp	r3, #0
 800729c:	d002      	beq.n	80072a4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800729e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072a2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80072a4:	bf00      	nop
 80072a6:	3720      	adds	r7, #32
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}
 80072ac:	080099b8 	.word	0x080099b8
 80072b0:	080099d8 	.word	0x080099d8
 80072b4:	08009998 	.word	0x08009998

080072b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80072c0:	f000 fd30 	bl	8007d24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80072c4:	4b2a      	ldr	r3, [pc, #168]	; (8007370 <prvAddNewTaskToReadyList+0xb8>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	3301      	adds	r3, #1
 80072ca:	4a29      	ldr	r2, [pc, #164]	; (8007370 <prvAddNewTaskToReadyList+0xb8>)
 80072cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80072ce:	4b29      	ldr	r3, [pc, #164]	; (8007374 <prvAddNewTaskToReadyList+0xbc>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d109      	bne.n	80072ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80072d6:	4a27      	ldr	r2, [pc, #156]	; (8007374 <prvAddNewTaskToReadyList+0xbc>)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80072dc:	4b24      	ldr	r3, [pc, #144]	; (8007370 <prvAddNewTaskToReadyList+0xb8>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d110      	bne.n	8007306 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80072e4:	f000 facc 	bl	8007880 <prvInitialiseTaskLists>
 80072e8:	e00d      	b.n	8007306 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80072ea:	4b23      	ldr	r3, [pc, #140]	; (8007378 <prvAddNewTaskToReadyList+0xc0>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d109      	bne.n	8007306 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80072f2:	4b20      	ldr	r3, [pc, #128]	; (8007374 <prvAddNewTaskToReadyList+0xbc>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d802      	bhi.n	8007306 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007300:	4a1c      	ldr	r2, [pc, #112]	; (8007374 <prvAddNewTaskToReadyList+0xbc>)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007306:	4b1d      	ldr	r3, [pc, #116]	; (800737c <prvAddNewTaskToReadyList+0xc4>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	3301      	adds	r3, #1
 800730c:	4a1b      	ldr	r2, [pc, #108]	; (800737c <prvAddNewTaskToReadyList+0xc4>)
 800730e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007314:	2201      	movs	r2, #1
 8007316:	409a      	lsls	r2, r3
 8007318:	4b19      	ldr	r3, [pc, #100]	; (8007380 <prvAddNewTaskToReadyList+0xc8>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4313      	orrs	r3, r2
 800731e:	4a18      	ldr	r2, [pc, #96]	; (8007380 <prvAddNewTaskToReadyList+0xc8>)
 8007320:	6013      	str	r3, [r2, #0]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007326:	4613      	mov	r3, r2
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	4413      	add	r3, r2
 800732c:	009b      	lsls	r3, r3, #2
 800732e:	4a15      	ldr	r2, [pc, #84]	; (8007384 <prvAddNewTaskToReadyList+0xcc>)
 8007330:	441a      	add	r2, r3
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	3304      	adds	r3, #4
 8007336:	4619      	mov	r1, r3
 8007338:	4610      	mov	r0, r2
 800733a:	f7ff fdf5 	bl	8006f28 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800733e:	f000 fd21 	bl	8007d84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007342:	4b0d      	ldr	r3, [pc, #52]	; (8007378 <prvAddNewTaskToReadyList+0xc0>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d00e      	beq.n	8007368 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800734a:	4b0a      	ldr	r3, [pc, #40]	; (8007374 <prvAddNewTaskToReadyList+0xbc>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007354:	429a      	cmp	r2, r3
 8007356:	d207      	bcs.n	8007368 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007358:	4b0b      	ldr	r3, [pc, #44]	; (8007388 <prvAddNewTaskToReadyList+0xd0>)
 800735a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800735e:	601a      	str	r2, [r3, #0]
 8007360:	f3bf 8f4f 	dsb	sy
 8007364:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007368:	bf00      	nop
 800736a:	3708      	adds	r7, #8
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}
 8007370:	20000a94 	.word	0x20000a94
 8007374:	20000994 	.word	0x20000994
 8007378:	20000aa0 	.word	0x20000aa0
 800737c:	20000ab0 	.word	0x20000ab0
 8007380:	20000a9c 	.word	0x20000a9c
 8007384:	20000998 	.word	0x20000998
 8007388:	e000ed04 	.word	0xe000ed04

0800738c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800738c:	b580      	push	{r7, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007394:	2300      	movs	r3, #0
 8007396:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d017      	beq.n	80073ce <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800739e:	4b13      	ldr	r3, [pc, #76]	; (80073ec <vTaskDelay+0x60>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d00a      	beq.n	80073bc <vTaskDelay+0x30>
	__asm volatile
 80073a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073aa:	f383 8811 	msr	BASEPRI, r3
 80073ae:	f3bf 8f6f 	isb	sy
 80073b2:	f3bf 8f4f 	dsb	sy
 80073b6:	60bb      	str	r3, [r7, #8]
}
 80073b8:	bf00      	nop
 80073ba:	e7fe      	b.n	80073ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80073bc:	f000 f884 	bl	80074c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80073c0:	2100      	movs	r1, #0
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 fb1e 	bl	8007a04 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80073c8:	f000 f88c 	bl	80074e4 <xTaskResumeAll>
 80073cc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d107      	bne.n	80073e4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80073d4:	4b06      	ldr	r3, [pc, #24]	; (80073f0 <vTaskDelay+0x64>)
 80073d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073da:	601a      	str	r2, [r3, #0]
 80073dc:	f3bf 8f4f 	dsb	sy
 80073e0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80073e4:	bf00      	nop
 80073e6:	3710      	adds	r7, #16
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}
 80073ec:	20000abc 	.word	0x20000abc
 80073f0:	e000ed04 	.word	0xe000ed04

080073f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b08a      	sub	sp, #40	; 0x28
 80073f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80073fa:	2300      	movs	r3, #0
 80073fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80073fe:	2300      	movs	r3, #0
 8007400:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007402:	463a      	mov	r2, r7
 8007404:	1d39      	adds	r1, r7, #4
 8007406:	f107 0308 	add.w	r3, r7, #8
 800740a:	4618      	mov	r0, r3
 800740c:	f7f9 f9d0 	bl	80007b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007410:	6839      	ldr	r1, [r7, #0]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	68ba      	ldr	r2, [r7, #8]
 8007416:	9202      	str	r2, [sp, #8]
 8007418:	9301      	str	r3, [sp, #4]
 800741a:	2300      	movs	r3, #0
 800741c:	9300      	str	r3, [sp, #0]
 800741e:	2300      	movs	r3, #0
 8007420:	460a      	mov	r2, r1
 8007422:	4921      	ldr	r1, [pc, #132]	; (80074a8 <vTaskStartScheduler+0xb4>)
 8007424:	4821      	ldr	r0, [pc, #132]	; (80074ac <vTaskStartScheduler+0xb8>)
 8007426:	f7ff fe06 	bl	8007036 <xTaskCreateStatic>
 800742a:	4603      	mov	r3, r0
 800742c:	4a20      	ldr	r2, [pc, #128]	; (80074b0 <vTaskStartScheduler+0xbc>)
 800742e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007430:	4b1f      	ldr	r3, [pc, #124]	; (80074b0 <vTaskStartScheduler+0xbc>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d002      	beq.n	800743e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007438:	2301      	movs	r3, #1
 800743a:	617b      	str	r3, [r7, #20]
 800743c:	e001      	b.n	8007442 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800743e:	2300      	movs	r3, #0
 8007440:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	2b01      	cmp	r3, #1
 8007446:	d11b      	bne.n	8007480 <vTaskStartScheduler+0x8c>
	__asm volatile
 8007448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800744c:	f383 8811 	msr	BASEPRI, r3
 8007450:	f3bf 8f6f 	isb	sy
 8007454:	f3bf 8f4f 	dsb	sy
 8007458:	613b      	str	r3, [r7, #16]
}
 800745a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800745c:	4b15      	ldr	r3, [pc, #84]	; (80074b4 <vTaskStartScheduler+0xc0>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	334c      	adds	r3, #76	; 0x4c
 8007462:	4a15      	ldr	r2, [pc, #84]	; (80074b8 <vTaskStartScheduler+0xc4>)
 8007464:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007466:	4b15      	ldr	r3, [pc, #84]	; (80074bc <vTaskStartScheduler+0xc8>)
 8007468:	f04f 32ff 	mov.w	r2, #4294967295
 800746c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800746e:	4b14      	ldr	r3, [pc, #80]	; (80074c0 <vTaskStartScheduler+0xcc>)
 8007470:	2201      	movs	r2, #1
 8007472:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007474:	4b13      	ldr	r3, [pc, #76]	; (80074c4 <vTaskStartScheduler+0xd0>)
 8007476:	2200      	movs	r2, #0
 8007478:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800747a:	f000 fbb1 	bl	8007be0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800747e:	e00e      	b.n	800749e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007486:	d10a      	bne.n	800749e <vTaskStartScheduler+0xaa>
	__asm volatile
 8007488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800748c:	f383 8811 	msr	BASEPRI, r3
 8007490:	f3bf 8f6f 	isb	sy
 8007494:	f3bf 8f4f 	dsb	sy
 8007498:	60fb      	str	r3, [r7, #12]
}
 800749a:	bf00      	nop
 800749c:	e7fe      	b.n	800749c <vTaskStartScheduler+0xa8>
}
 800749e:	bf00      	nop
 80074a0:	3718      	adds	r7, #24
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop
 80074a8:	0800862c 	.word	0x0800862c
 80074ac:	08007851 	.word	0x08007851
 80074b0:	20000ab8 	.word	0x20000ab8
 80074b4:	20000994 	.word	0x20000994
 80074b8:	20000018 	.word	0x20000018
 80074bc:	20000ab4 	.word	0x20000ab4
 80074c0:	20000aa0 	.word	0x20000aa0
 80074c4:	20000a98 	.word	0x20000a98

080074c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80074c8:	b480      	push	{r7}
 80074ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80074cc:	4b04      	ldr	r3, [pc, #16]	; (80074e0 <vTaskSuspendAll+0x18>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	3301      	adds	r3, #1
 80074d2:	4a03      	ldr	r2, [pc, #12]	; (80074e0 <vTaskSuspendAll+0x18>)
 80074d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80074d6:	bf00      	nop
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr
 80074e0:	20000abc 	.word	0x20000abc

080074e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b084      	sub	sp, #16
 80074e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80074ea:	2300      	movs	r3, #0
 80074ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80074ee:	2300      	movs	r3, #0
 80074f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80074f2:	4b41      	ldr	r3, [pc, #260]	; (80075f8 <xTaskResumeAll+0x114>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d10a      	bne.n	8007510 <xTaskResumeAll+0x2c>
	__asm volatile
 80074fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074fe:	f383 8811 	msr	BASEPRI, r3
 8007502:	f3bf 8f6f 	isb	sy
 8007506:	f3bf 8f4f 	dsb	sy
 800750a:	603b      	str	r3, [r7, #0]
}
 800750c:	bf00      	nop
 800750e:	e7fe      	b.n	800750e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007510:	f000 fc08 	bl	8007d24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007514:	4b38      	ldr	r3, [pc, #224]	; (80075f8 <xTaskResumeAll+0x114>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	3b01      	subs	r3, #1
 800751a:	4a37      	ldr	r2, [pc, #220]	; (80075f8 <xTaskResumeAll+0x114>)
 800751c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800751e:	4b36      	ldr	r3, [pc, #216]	; (80075f8 <xTaskResumeAll+0x114>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d161      	bne.n	80075ea <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007526:	4b35      	ldr	r3, [pc, #212]	; (80075fc <xTaskResumeAll+0x118>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d05d      	beq.n	80075ea <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800752e:	e02e      	b.n	800758e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007530:	4b33      	ldr	r3, [pc, #204]	; (8007600 <xTaskResumeAll+0x11c>)
 8007532:	68db      	ldr	r3, [r3, #12]
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	3318      	adds	r3, #24
 800753c:	4618      	mov	r0, r3
 800753e:	f7ff fd50 	bl	8006fe2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	3304      	adds	r3, #4
 8007546:	4618      	mov	r0, r3
 8007548:	f7ff fd4b 	bl	8006fe2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007550:	2201      	movs	r2, #1
 8007552:	409a      	lsls	r2, r3
 8007554:	4b2b      	ldr	r3, [pc, #172]	; (8007604 <xTaskResumeAll+0x120>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4313      	orrs	r3, r2
 800755a:	4a2a      	ldr	r2, [pc, #168]	; (8007604 <xTaskResumeAll+0x120>)
 800755c:	6013      	str	r3, [r2, #0]
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007562:	4613      	mov	r3, r2
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	4413      	add	r3, r2
 8007568:	009b      	lsls	r3, r3, #2
 800756a:	4a27      	ldr	r2, [pc, #156]	; (8007608 <xTaskResumeAll+0x124>)
 800756c:	441a      	add	r2, r3
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	3304      	adds	r3, #4
 8007572:	4619      	mov	r1, r3
 8007574:	4610      	mov	r0, r2
 8007576:	f7ff fcd7 	bl	8006f28 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800757e:	4b23      	ldr	r3, [pc, #140]	; (800760c <xTaskResumeAll+0x128>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007584:	429a      	cmp	r2, r3
 8007586:	d302      	bcc.n	800758e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007588:	4b21      	ldr	r3, [pc, #132]	; (8007610 <xTaskResumeAll+0x12c>)
 800758a:	2201      	movs	r2, #1
 800758c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800758e:	4b1c      	ldr	r3, [pc, #112]	; (8007600 <xTaskResumeAll+0x11c>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d1cc      	bne.n	8007530 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d001      	beq.n	80075a0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800759c:	f000 fa12 	bl	80079c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80075a0:	4b1c      	ldr	r3, [pc, #112]	; (8007614 <xTaskResumeAll+0x130>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d010      	beq.n	80075ce <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80075ac:	f000 f836 	bl	800761c <xTaskIncrementTick>
 80075b0:	4603      	mov	r3, r0
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d002      	beq.n	80075bc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80075b6:	4b16      	ldr	r3, [pc, #88]	; (8007610 <xTaskResumeAll+0x12c>)
 80075b8:	2201      	movs	r2, #1
 80075ba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	3b01      	subs	r3, #1
 80075c0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d1f1      	bne.n	80075ac <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80075c8:	4b12      	ldr	r3, [pc, #72]	; (8007614 <xTaskResumeAll+0x130>)
 80075ca:	2200      	movs	r2, #0
 80075cc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80075ce:	4b10      	ldr	r3, [pc, #64]	; (8007610 <xTaskResumeAll+0x12c>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d009      	beq.n	80075ea <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80075d6:	2301      	movs	r3, #1
 80075d8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80075da:	4b0f      	ldr	r3, [pc, #60]	; (8007618 <xTaskResumeAll+0x134>)
 80075dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075e0:	601a      	str	r2, [r3, #0]
 80075e2:	f3bf 8f4f 	dsb	sy
 80075e6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80075ea:	f000 fbcb 	bl	8007d84 <vPortExitCritical>

	return xAlreadyYielded;
 80075ee:	68bb      	ldr	r3, [r7, #8]
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3710      	adds	r7, #16
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	20000abc 	.word	0x20000abc
 80075fc:	20000a94 	.word	0x20000a94
 8007600:	20000a54 	.word	0x20000a54
 8007604:	20000a9c 	.word	0x20000a9c
 8007608:	20000998 	.word	0x20000998
 800760c:	20000994 	.word	0x20000994
 8007610:	20000aa8 	.word	0x20000aa8
 8007614:	20000aa4 	.word	0x20000aa4
 8007618:	e000ed04 	.word	0xe000ed04

0800761c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b086      	sub	sp, #24
 8007620:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007622:	2300      	movs	r3, #0
 8007624:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007626:	4b4e      	ldr	r3, [pc, #312]	; (8007760 <xTaskIncrementTick+0x144>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	2b00      	cmp	r3, #0
 800762c:	f040 808e 	bne.w	800774c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007630:	4b4c      	ldr	r3, [pc, #304]	; (8007764 <xTaskIncrementTick+0x148>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	3301      	adds	r3, #1
 8007636:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007638:	4a4a      	ldr	r2, [pc, #296]	; (8007764 <xTaskIncrementTick+0x148>)
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d120      	bne.n	8007686 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007644:	4b48      	ldr	r3, [pc, #288]	; (8007768 <xTaskIncrementTick+0x14c>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d00a      	beq.n	8007664 <xTaskIncrementTick+0x48>
	__asm volatile
 800764e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007652:	f383 8811 	msr	BASEPRI, r3
 8007656:	f3bf 8f6f 	isb	sy
 800765a:	f3bf 8f4f 	dsb	sy
 800765e:	603b      	str	r3, [r7, #0]
}
 8007660:	bf00      	nop
 8007662:	e7fe      	b.n	8007662 <xTaskIncrementTick+0x46>
 8007664:	4b40      	ldr	r3, [pc, #256]	; (8007768 <xTaskIncrementTick+0x14c>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	60fb      	str	r3, [r7, #12]
 800766a:	4b40      	ldr	r3, [pc, #256]	; (800776c <xTaskIncrementTick+0x150>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a3e      	ldr	r2, [pc, #248]	; (8007768 <xTaskIncrementTick+0x14c>)
 8007670:	6013      	str	r3, [r2, #0]
 8007672:	4a3e      	ldr	r2, [pc, #248]	; (800776c <xTaskIncrementTick+0x150>)
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	6013      	str	r3, [r2, #0]
 8007678:	4b3d      	ldr	r3, [pc, #244]	; (8007770 <xTaskIncrementTick+0x154>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	3301      	adds	r3, #1
 800767e:	4a3c      	ldr	r2, [pc, #240]	; (8007770 <xTaskIncrementTick+0x154>)
 8007680:	6013      	str	r3, [r2, #0]
 8007682:	f000 f99f 	bl	80079c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007686:	4b3b      	ldr	r3, [pc, #236]	; (8007774 <xTaskIncrementTick+0x158>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	693a      	ldr	r2, [r7, #16]
 800768c:	429a      	cmp	r2, r3
 800768e:	d348      	bcc.n	8007722 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007690:	4b35      	ldr	r3, [pc, #212]	; (8007768 <xTaskIncrementTick+0x14c>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d104      	bne.n	80076a4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800769a:	4b36      	ldr	r3, [pc, #216]	; (8007774 <xTaskIncrementTick+0x158>)
 800769c:	f04f 32ff 	mov.w	r2, #4294967295
 80076a0:	601a      	str	r2, [r3, #0]
					break;
 80076a2:	e03e      	b.n	8007722 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076a4:	4b30      	ldr	r3, [pc, #192]	; (8007768 <xTaskIncrementTick+0x14c>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	68db      	ldr	r3, [r3, #12]
 80076aa:	68db      	ldr	r3, [r3, #12]
 80076ac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80076b4:	693a      	ldr	r2, [r7, #16]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d203      	bcs.n	80076c4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80076bc:	4a2d      	ldr	r2, [pc, #180]	; (8007774 <xTaskIncrementTick+0x158>)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80076c2:	e02e      	b.n	8007722 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	3304      	adds	r3, #4
 80076c8:	4618      	mov	r0, r3
 80076ca:	f7ff fc8a 	bl	8006fe2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d004      	beq.n	80076e0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	3318      	adds	r3, #24
 80076da:	4618      	mov	r0, r3
 80076dc:	f7ff fc81 	bl	8006fe2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e4:	2201      	movs	r2, #1
 80076e6:	409a      	lsls	r2, r3
 80076e8:	4b23      	ldr	r3, [pc, #140]	; (8007778 <xTaskIncrementTick+0x15c>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4313      	orrs	r3, r2
 80076ee:	4a22      	ldr	r2, [pc, #136]	; (8007778 <xTaskIncrementTick+0x15c>)
 80076f0:	6013      	str	r3, [r2, #0]
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076f6:	4613      	mov	r3, r2
 80076f8:	009b      	lsls	r3, r3, #2
 80076fa:	4413      	add	r3, r2
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	4a1f      	ldr	r2, [pc, #124]	; (800777c <xTaskIncrementTick+0x160>)
 8007700:	441a      	add	r2, r3
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	3304      	adds	r3, #4
 8007706:	4619      	mov	r1, r3
 8007708:	4610      	mov	r0, r2
 800770a:	f7ff fc0d 	bl	8006f28 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007712:	4b1b      	ldr	r3, [pc, #108]	; (8007780 <xTaskIncrementTick+0x164>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007718:	429a      	cmp	r2, r3
 800771a:	d3b9      	bcc.n	8007690 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800771c:	2301      	movs	r3, #1
 800771e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007720:	e7b6      	b.n	8007690 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007722:	4b17      	ldr	r3, [pc, #92]	; (8007780 <xTaskIncrementTick+0x164>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007728:	4914      	ldr	r1, [pc, #80]	; (800777c <xTaskIncrementTick+0x160>)
 800772a:	4613      	mov	r3, r2
 800772c:	009b      	lsls	r3, r3, #2
 800772e:	4413      	add	r3, r2
 8007730:	009b      	lsls	r3, r3, #2
 8007732:	440b      	add	r3, r1
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	2b01      	cmp	r3, #1
 8007738:	d901      	bls.n	800773e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800773a:	2301      	movs	r3, #1
 800773c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800773e:	4b11      	ldr	r3, [pc, #68]	; (8007784 <xTaskIncrementTick+0x168>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d007      	beq.n	8007756 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007746:	2301      	movs	r3, #1
 8007748:	617b      	str	r3, [r7, #20]
 800774a:	e004      	b.n	8007756 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800774c:	4b0e      	ldr	r3, [pc, #56]	; (8007788 <xTaskIncrementTick+0x16c>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	3301      	adds	r3, #1
 8007752:	4a0d      	ldr	r2, [pc, #52]	; (8007788 <xTaskIncrementTick+0x16c>)
 8007754:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007756:	697b      	ldr	r3, [r7, #20]
}
 8007758:	4618      	mov	r0, r3
 800775a:	3718      	adds	r7, #24
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}
 8007760:	20000abc 	.word	0x20000abc
 8007764:	20000a98 	.word	0x20000a98
 8007768:	20000a4c 	.word	0x20000a4c
 800776c:	20000a50 	.word	0x20000a50
 8007770:	20000aac 	.word	0x20000aac
 8007774:	20000ab4 	.word	0x20000ab4
 8007778:	20000a9c 	.word	0x20000a9c
 800777c:	20000998 	.word	0x20000998
 8007780:	20000994 	.word	0x20000994
 8007784:	20000aa8 	.word	0x20000aa8
 8007788:	20000aa4 	.word	0x20000aa4

0800778c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800778c:	b480      	push	{r7}
 800778e:	b087      	sub	sp, #28
 8007790:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007792:	4b29      	ldr	r3, [pc, #164]	; (8007838 <vTaskSwitchContext+0xac>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d003      	beq.n	80077a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800779a:	4b28      	ldr	r3, [pc, #160]	; (800783c <vTaskSwitchContext+0xb0>)
 800779c:	2201      	movs	r2, #1
 800779e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80077a0:	e044      	b.n	800782c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80077a2:	4b26      	ldr	r3, [pc, #152]	; (800783c <vTaskSwitchContext+0xb0>)
 80077a4:	2200      	movs	r2, #0
 80077a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077a8:	4b25      	ldr	r3, [pc, #148]	; (8007840 <vTaskSwitchContext+0xb4>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	fab3 f383 	clz	r3, r3
 80077b4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80077b6:	7afb      	ldrb	r3, [r7, #11]
 80077b8:	f1c3 031f 	rsb	r3, r3, #31
 80077bc:	617b      	str	r3, [r7, #20]
 80077be:	4921      	ldr	r1, [pc, #132]	; (8007844 <vTaskSwitchContext+0xb8>)
 80077c0:	697a      	ldr	r2, [r7, #20]
 80077c2:	4613      	mov	r3, r2
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	4413      	add	r3, r2
 80077c8:	009b      	lsls	r3, r3, #2
 80077ca:	440b      	add	r3, r1
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d10a      	bne.n	80077e8 <vTaskSwitchContext+0x5c>
	__asm volatile
 80077d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d6:	f383 8811 	msr	BASEPRI, r3
 80077da:	f3bf 8f6f 	isb	sy
 80077de:	f3bf 8f4f 	dsb	sy
 80077e2:	607b      	str	r3, [r7, #4]
}
 80077e4:	bf00      	nop
 80077e6:	e7fe      	b.n	80077e6 <vTaskSwitchContext+0x5a>
 80077e8:	697a      	ldr	r2, [r7, #20]
 80077ea:	4613      	mov	r3, r2
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	4413      	add	r3, r2
 80077f0:	009b      	lsls	r3, r3, #2
 80077f2:	4a14      	ldr	r2, [pc, #80]	; (8007844 <vTaskSwitchContext+0xb8>)
 80077f4:	4413      	add	r3, r2
 80077f6:	613b      	str	r3, [r7, #16]
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	685a      	ldr	r2, [r3, #4]
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	605a      	str	r2, [r3, #4]
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	685a      	ldr	r2, [r3, #4]
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	3308      	adds	r3, #8
 800780a:	429a      	cmp	r2, r3
 800780c:	d104      	bne.n	8007818 <vTaskSwitchContext+0x8c>
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	685a      	ldr	r2, [r3, #4]
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	605a      	str	r2, [r3, #4]
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	68db      	ldr	r3, [r3, #12]
 800781e:	4a0a      	ldr	r2, [pc, #40]	; (8007848 <vTaskSwitchContext+0xbc>)
 8007820:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007822:	4b09      	ldr	r3, [pc, #36]	; (8007848 <vTaskSwitchContext+0xbc>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	334c      	adds	r3, #76	; 0x4c
 8007828:	4a08      	ldr	r2, [pc, #32]	; (800784c <vTaskSwitchContext+0xc0>)
 800782a:	6013      	str	r3, [r2, #0]
}
 800782c:	bf00      	nop
 800782e:	371c      	adds	r7, #28
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr
 8007838:	20000abc 	.word	0x20000abc
 800783c:	20000aa8 	.word	0x20000aa8
 8007840:	20000a9c 	.word	0x20000a9c
 8007844:	20000998 	.word	0x20000998
 8007848:	20000994 	.word	0x20000994
 800784c:	20000018 	.word	0x20000018

08007850 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b082      	sub	sp, #8
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007858:	f000 f852 	bl	8007900 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800785c:	4b06      	ldr	r3, [pc, #24]	; (8007878 <prvIdleTask+0x28>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	2b01      	cmp	r3, #1
 8007862:	d9f9      	bls.n	8007858 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007864:	4b05      	ldr	r3, [pc, #20]	; (800787c <prvIdleTask+0x2c>)
 8007866:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800786a:	601a      	str	r2, [r3, #0]
 800786c:	f3bf 8f4f 	dsb	sy
 8007870:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007874:	e7f0      	b.n	8007858 <prvIdleTask+0x8>
 8007876:	bf00      	nop
 8007878:	20000998 	.word	0x20000998
 800787c:	e000ed04 	.word	0xe000ed04

08007880 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b082      	sub	sp, #8
 8007884:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007886:	2300      	movs	r3, #0
 8007888:	607b      	str	r3, [r7, #4]
 800788a:	e00c      	b.n	80078a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	4613      	mov	r3, r2
 8007890:	009b      	lsls	r3, r3, #2
 8007892:	4413      	add	r3, r2
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	4a12      	ldr	r2, [pc, #72]	; (80078e0 <prvInitialiseTaskLists+0x60>)
 8007898:	4413      	add	r3, r2
 800789a:	4618      	mov	r0, r3
 800789c:	f7ff fb17 	bl	8006ece <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	3301      	adds	r3, #1
 80078a4:	607b      	str	r3, [r7, #4]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2b06      	cmp	r3, #6
 80078aa:	d9ef      	bls.n	800788c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80078ac:	480d      	ldr	r0, [pc, #52]	; (80078e4 <prvInitialiseTaskLists+0x64>)
 80078ae:	f7ff fb0e 	bl	8006ece <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80078b2:	480d      	ldr	r0, [pc, #52]	; (80078e8 <prvInitialiseTaskLists+0x68>)
 80078b4:	f7ff fb0b 	bl	8006ece <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80078b8:	480c      	ldr	r0, [pc, #48]	; (80078ec <prvInitialiseTaskLists+0x6c>)
 80078ba:	f7ff fb08 	bl	8006ece <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80078be:	480c      	ldr	r0, [pc, #48]	; (80078f0 <prvInitialiseTaskLists+0x70>)
 80078c0:	f7ff fb05 	bl	8006ece <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80078c4:	480b      	ldr	r0, [pc, #44]	; (80078f4 <prvInitialiseTaskLists+0x74>)
 80078c6:	f7ff fb02 	bl	8006ece <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80078ca:	4b0b      	ldr	r3, [pc, #44]	; (80078f8 <prvInitialiseTaskLists+0x78>)
 80078cc:	4a05      	ldr	r2, [pc, #20]	; (80078e4 <prvInitialiseTaskLists+0x64>)
 80078ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80078d0:	4b0a      	ldr	r3, [pc, #40]	; (80078fc <prvInitialiseTaskLists+0x7c>)
 80078d2:	4a05      	ldr	r2, [pc, #20]	; (80078e8 <prvInitialiseTaskLists+0x68>)
 80078d4:	601a      	str	r2, [r3, #0]
}
 80078d6:	bf00      	nop
 80078d8:	3708      	adds	r7, #8
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}
 80078de:	bf00      	nop
 80078e0:	20000998 	.word	0x20000998
 80078e4:	20000a24 	.word	0x20000a24
 80078e8:	20000a38 	.word	0x20000a38
 80078ec:	20000a54 	.word	0x20000a54
 80078f0:	20000a68 	.word	0x20000a68
 80078f4:	20000a80 	.word	0x20000a80
 80078f8:	20000a4c 	.word	0x20000a4c
 80078fc:	20000a50 	.word	0x20000a50

08007900 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b082      	sub	sp, #8
 8007904:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007906:	e019      	b.n	800793c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007908:	f000 fa0c 	bl	8007d24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800790c:	4b10      	ldr	r3, [pc, #64]	; (8007950 <prvCheckTasksWaitingTermination+0x50>)
 800790e:	68db      	ldr	r3, [r3, #12]
 8007910:	68db      	ldr	r3, [r3, #12]
 8007912:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	3304      	adds	r3, #4
 8007918:	4618      	mov	r0, r3
 800791a:	f7ff fb62 	bl	8006fe2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800791e:	4b0d      	ldr	r3, [pc, #52]	; (8007954 <prvCheckTasksWaitingTermination+0x54>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	3b01      	subs	r3, #1
 8007924:	4a0b      	ldr	r2, [pc, #44]	; (8007954 <prvCheckTasksWaitingTermination+0x54>)
 8007926:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007928:	4b0b      	ldr	r3, [pc, #44]	; (8007958 <prvCheckTasksWaitingTermination+0x58>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	3b01      	subs	r3, #1
 800792e:	4a0a      	ldr	r2, [pc, #40]	; (8007958 <prvCheckTasksWaitingTermination+0x58>)
 8007930:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007932:	f000 fa27 	bl	8007d84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 f810 	bl	800795c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800793c:	4b06      	ldr	r3, [pc, #24]	; (8007958 <prvCheckTasksWaitingTermination+0x58>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d1e1      	bne.n	8007908 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007944:	bf00      	nop
 8007946:	bf00      	nop
 8007948:	3708      	adds	r7, #8
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}
 800794e:	bf00      	nop
 8007950:	20000a68 	.word	0x20000a68
 8007954:	20000a94 	.word	0x20000a94
 8007958:	20000a7c 	.word	0x20000a7c

0800795c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800795c:	b580      	push	{r7, lr}
 800795e:	b084      	sub	sp, #16
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	334c      	adds	r3, #76	; 0x4c
 8007968:	4618      	mov	r0, r3
 800796a:	f000 fcfd 	bl	8008368 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007974:	2b00      	cmp	r3, #0
 8007976:	d108      	bne.n	800798a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800797c:	4618      	mov	r0, r3
 800797e:	f000 fb7f 	bl	8008080 <vPortFree>
				vPortFree( pxTCB );
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 fb7c 	bl	8008080 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007988:	e018      	b.n	80079bc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007990:	2b01      	cmp	r3, #1
 8007992:	d103      	bne.n	800799c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 fb73 	bl	8008080 <vPortFree>
	}
 800799a:	e00f      	b.n	80079bc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80079a2:	2b02      	cmp	r3, #2
 80079a4:	d00a      	beq.n	80079bc <prvDeleteTCB+0x60>
	__asm volatile
 80079a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079aa:	f383 8811 	msr	BASEPRI, r3
 80079ae:	f3bf 8f6f 	isb	sy
 80079b2:	f3bf 8f4f 	dsb	sy
 80079b6:	60fb      	str	r3, [r7, #12]
}
 80079b8:	bf00      	nop
 80079ba:	e7fe      	b.n	80079ba <prvDeleteTCB+0x5e>
	}
 80079bc:	bf00      	nop
 80079be:	3710      	adds	r7, #16
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80079c4:	b480      	push	{r7}
 80079c6:	b083      	sub	sp, #12
 80079c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079ca:	4b0c      	ldr	r3, [pc, #48]	; (80079fc <prvResetNextTaskUnblockTime+0x38>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d104      	bne.n	80079de <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80079d4:	4b0a      	ldr	r3, [pc, #40]	; (8007a00 <prvResetNextTaskUnblockTime+0x3c>)
 80079d6:	f04f 32ff 	mov.w	r2, #4294967295
 80079da:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80079dc:	e008      	b.n	80079f0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079de:	4b07      	ldr	r3, [pc, #28]	; (80079fc <prvResetNextTaskUnblockTime+0x38>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	68db      	ldr	r3, [r3, #12]
 80079e4:	68db      	ldr	r3, [r3, #12]
 80079e6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	4a04      	ldr	r2, [pc, #16]	; (8007a00 <prvResetNextTaskUnblockTime+0x3c>)
 80079ee:	6013      	str	r3, [r2, #0]
}
 80079f0:	bf00      	nop
 80079f2:	370c      	adds	r7, #12
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr
 80079fc:	20000a4c 	.word	0x20000a4c
 8007a00:	20000ab4 	.word	0x20000ab4

08007a04 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b084      	sub	sp, #16
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007a0e:	4b29      	ldr	r3, [pc, #164]	; (8007ab4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a14:	4b28      	ldr	r3, [pc, #160]	; (8007ab8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	3304      	adds	r3, #4
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f7ff fae1 	bl	8006fe2 <uxListRemove>
 8007a20:	4603      	mov	r3, r0
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d10b      	bne.n	8007a3e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007a26:	4b24      	ldr	r3, [pc, #144]	; (8007ab8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a32:	43da      	mvns	r2, r3
 8007a34:	4b21      	ldr	r3, [pc, #132]	; (8007abc <prvAddCurrentTaskToDelayedList+0xb8>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4013      	ands	r3, r2
 8007a3a:	4a20      	ldr	r2, [pc, #128]	; (8007abc <prvAddCurrentTaskToDelayedList+0xb8>)
 8007a3c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a44:	d10a      	bne.n	8007a5c <prvAddCurrentTaskToDelayedList+0x58>
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d007      	beq.n	8007a5c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a4c:	4b1a      	ldr	r3, [pc, #104]	; (8007ab8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	3304      	adds	r3, #4
 8007a52:	4619      	mov	r1, r3
 8007a54:	481a      	ldr	r0, [pc, #104]	; (8007ac0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007a56:	f7ff fa67 	bl	8006f28 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007a5a:	e026      	b.n	8007aaa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007a5c:	68fa      	ldr	r2, [r7, #12]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	4413      	add	r3, r2
 8007a62:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007a64:	4b14      	ldr	r3, [pc, #80]	; (8007ab8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	68ba      	ldr	r2, [r7, #8]
 8007a6a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007a6c:	68ba      	ldr	r2, [r7, #8]
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d209      	bcs.n	8007a88 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a74:	4b13      	ldr	r3, [pc, #76]	; (8007ac4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007a76:	681a      	ldr	r2, [r3, #0]
 8007a78:	4b0f      	ldr	r3, [pc, #60]	; (8007ab8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	3304      	adds	r3, #4
 8007a7e:	4619      	mov	r1, r3
 8007a80:	4610      	mov	r0, r2
 8007a82:	f7ff fa75 	bl	8006f70 <vListInsert>
}
 8007a86:	e010      	b.n	8007aaa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a88:	4b0f      	ldr	r3, [pc, #60]	; (8007ac8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	4b0a      	ldr	r3, [pc, #40]	; (8007ab8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	3304      	adds	r3, #4
 8007a92:	4619      	mov	r1, r3
 8007a94:	4610      	mov	r0, r2
 8007a96:	f7ff fa6b 	bl	8006f70 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007a9a:	4b0c      	ldr	r3, [pc, #48]	; (8007acc <prvAddCurrentTaskToDelayedList+0xc8>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	68ba      	ldr	r2, [r7, #8]
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d202      	bcs.n	8007aaa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007aa4:	4a09      	ldr	r2, [pc, #36]	; (8007acc <prvAddCurrentTaskToDelayedList+0xc8>)
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	6013      	str	r3, [r2, #0]
}
 8007aaa:	bf00      	nop
 8007aac:	3710      	adds	r7, #16
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
 8007ab2:	bf00      	nop
 8007ab4:	20000a98 	.word	0x20000a98
 8007ab8:	20000994 	.word	0x20000994
 8007abc:	20000a9c 	.word	0x20000a9c
 8007ac0:	20000a80 	.word	0x20000a80
 8007ac4:	20000a50 	.word	0x20000a50
 8007ac8:	20000a4c 	.word	0x20000a4c
 8007acc:	20000ab4 	.word	0x20000ab4

08007ad0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b085      	sub	sp, #20
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	60b9      	str	r1, [r7, #8]
 8007ada:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	3b04      	subs	r3, #4
 8007ae0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007ae8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	3b04      	subs	r3, #4
 8007aee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	f023 0201 	bic.w	r2, r3, #1
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	3b04      	subs	r3, #4
 8007afe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007b00:	4a0c      	ldr	r2, [pc, #48]	; (8007b34 <pxPortInitialiseStack+0x64>)
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	3b14      	subs	r3, #20
 8007b0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007b0c:	687a      	ldr	r2, [r7, #4]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	3b04      	subs	r3, #4
 8007b16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f06f 0202 	mvn.w	r2, #2
 8007b1e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	3b20      	subs	r3, #32
 8007b24:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007b26:	68fb      	ldr	r3, [r7, #12]
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3714      	adds	r7, #20
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr
 8007b34:	08007b39 	.word	0x08007b39

08007b38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b085      	sub	sp, #20
 8007b3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007b42:	4b12      	ldr	r3, [pc, #72]	; (8007b8c <prvTaskExitError+0x54>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b4a:	d00a      	beq.n	8007b62 <prvTaskExitError+0x2a>
	__asm volatile
 8007b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b50:	f383 8811 	msr	BASEPRI, r3
 8007b54:	f3bf 8f6f 	isb	sy
 8007b58:	f3bf 8f4f 	dsb	sy
 8007b5c:	60fb      	str	r3, [r7, #12]
}
 8007b5e:	bf00      	nop
 8007b60:	e7fe      	b.n	8007b60 <prvTaskExitError+0x28>
	__asm volatile
 8007b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b66:	f383 8811 	msr	BASEPRI, r3
 8007b6a:	f3bf 8f6f 	isb	sy
 8007b6e:	f3bf 8f4f 	dsb	sy
 8007b72:	60bb      	str	r3, [r7, #8]
}
 8007b74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007b76:	bf00      	nop
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d0fc      	beq.n	8007b78 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007b7e:	bf00      	nop
 8007b80:	bf00      	nop
 8007b82:	3714      	adds	r7, #20
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr
 8007b8c:	20000014 	.word	0x20000014

08007b90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007b90:	4b07      	ldr	r3, [pc, #28]	; (8007bb0 <pxCurrentTCBConst2>)
 8007b92:	6819      	ldr	r1, [r3, #0]
 8007b94:	6808      	ldr	r0, [r1, #0]
 8007b96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b9a:	f380 8809 	msr	PSP, r0
 8007b9e:	f3bf 8f6f 	isb	sy
 8007ba2:	f04f 0000 	mov.w	r0, #0
 8007ba6:	f380 8811 	msr	BASEPRI, r0
 8007baa:	4770      	bx	lr
 8007bac:	f3af 8000 	nop.w

08007bb0 <pxCurrentTCBConst2>:
 8007bb0:	20000994 	.word	0x20000994
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007bb4:	bf00      	nop
 8007bb6:	bf00      	nop

08007bb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007bb8:	4808      	ldr	r0, [pc, #32]	; (8007bdc <prvPortStartFirstTask+0x24>)
 8007bba:	6800      	ldr	r0, [r0, #0]
 8007bbc:	6800      	ldr	r0, [r0, #0]
 8007bbe:	f380 8808 	msr	MSP, r0
 8007bc2:	f04f 0000 	mov.w	r0, #0
 8007bc6:	f380 8814 	msr	CONTROL, r0
 8007bca:	b662      	cpsie	i
 8007bcc:	b661      	cpsie	f
 8007bce:	f3bf 8f4f 	dsb	sy
 8007bd2:	f3bf 8f6f 	isb	sy
 8007bd6:	df00      	svc	0
 8007bd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007bda:	bf00      	nop
 8007bdc:	e000ed08 	.word	0xe000ed08

08007be0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b086      	sub	sp, #24
 8007be4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007be6:	4b46      	ldr	r3, [pc, #280]	; (8007d00 <xPortStartScheduler+0x120>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a46      	ldr	r2, [pc, #280]	; (8007d04 <xPortStartScheduler+0x124>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d10a      	bne.n	8007c06 <xPortStartScheduler+0x26>
	__asm volatile
 8007bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf4:	f383 8811 	msr	BASEPRI, r3
 8007bf8:	f3bf 8f6f 	isb	sy
 8007bfc:	f3bf 8f4f 	dsb	sy
 8007c00:	613b      	str	r3, [r7, #16]
}
 8007c02:	bf00      	nop
 8007c04:	e7fe      	b.n	8007c04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007c06:	4b3e      	ldr	r3, [pc, #248]	; (8007d00 <xPortStartScheduler+0x120>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a3f      	ldr	r2, [pc, #252]	; (8007d08 <xPortStartScheduler+0x128>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d10a      	bne.n	8007c26 <xPortStartScheduler+0x46>
	__asm volatile
 8007c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c14:	f383 8811 	msr	BASEPRI, r3
 8007c18:	f3bf 8f6f 	isb	sy
 8007c1c:	f3bf 8f4f 	dsb	sy
 8007c20:	60fb      	str	r3, [r7, #12]
}
 8007c22:	bf00      	nop
 8007c24:	e7fe      	b.n	8007c24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007c26:	4b39      	ldr	r3, [pc, #228]	; (8007d0c <xPortStartScheduler+0x12c>)
 8007c28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	22ff      	movs	r2, #255	; 0xff
 8007c36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	781b      	ldrb	r3, [r3, #0]
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007c40:	78fb      	ldrb	r3, [r7, #3]
 8007c42:	b2db      	uxtb	r3, r3
 8007c44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007c48:	b2da      	uxtb	r2, r3
 8007c4a:	4b31      	ldr	r3, [pc, #196]	; (8007d10 <xPortStartScheduler+0x130>)
 8007c4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007c4e:	4b31      	ldr	r3, [pc, #196]	; (8007d14 <xPortStartScheduler+0x134>)
 8007c50:	2207      	movs	r2, #7
 8007c52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c54:	e009      	b.n	8007c6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007c56:	4b2f      	ldr	r3, [pc, #188]	; (8007d14 <xPortStartScheduler+0x134>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	3b01      	subs	r3, #1
 8007c5c:	4a2d      	ldr	r2, [pc, #180]	; (8007d14 <xPortStartScheduler+0x134>)
 8007c5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007c60:	78fb      	ldrb	r3, [r7, #3]
 8007c62:	b2db      	uxtb	r3, r3
 8007c64:	005b      	lsls	r3, r3, #1
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c6a:	78fb      	ldrb	r3, [r7, #3]
 8007c6c:	b2db      	uxtb	r3, r3
 8007c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c72:	2b80      	cmp	r3, #128	; 0x80
 8007c74:	d0ef      	beq.n	8007c56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007c76:	4b27      	ldr	r3, [pc, #156]	; (8007d14 <xPortStartScheduler+0x134>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f1c3 0307 	rsb	r3, r3, #7
 8007c7e:	2b04      	cmp	r3, #4
 8007c80:	d00a      	beq.n	8007c98 <xPortStartScheduler+0xb8>
	__asm volatile
 8007c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c86:	f383 8811 	msr	BASEPRI, r3
 8007c8a:	f3bf 8f6f 	isb	sy
 8007c8e:	f3bf 8f4f 	dsb	sy
 8007c92:	60bb      	str	r3, [r7, #8]
}
 8007c94:	bf00      	nop
 8007c96:	e7fe      	b.n	8007c96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007c98:	4b1e      	ldr	r3, [pc, #120]	; (8007d14 <xPortStartScheduler+0x134>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	021b      	lsls	r3, r3, #8
 8007c9e:	4a1d      	ldr	r2, [pc, #116]	; (8007d14 <xPortStartScheduler+0x134>)
 8007ca0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007ca2:	4b1c      	ldr	r3, [pc, #112]	; (8007d14 <xPortStartScheduler+0x134>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007caa:	4a1a      	ldr	r2, [pc, #104]	; (8007d14 <xPortStartScheduler+0x134>)
 8007cac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	b2da      	uxtb	r2, r3
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007cb6:	4b18      	ldr	r3, [pc, #96]	; (8007d18 <xPortStartScheduler+0x138>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a17      	ldr	r2, [pc, #92]	; (8007d18 <xPortStartScheduler+0x138>)
 8007cbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007cc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007cc2:	4b15      	ldr	r3, [pc, #84]	; (8007d18 <xPortStartScheduler+0x138>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a14      	ldr	r2, [pc, #80]	; (8007d18 <xPortStartScheduler+0x138>)
 8007cc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007ccc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007cce:	f000 f8dd 	bl	8007e8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007cd2:	4b12      	ldr	r3, [pc, #72]	; (8007d1c <xPortStartScheduler+0x13c>)
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007cd8:	f000 f8fc 	bl	8007ed4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007cdc:	4b10      	ldr	r3, [pc, #64]	; (8007d20 <xPortStartScheduler+0x140>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a0f      	ldr	r2, [pc, #60]	; (8007d20 <xPortStartScheduler+0x140>)
 8007ce2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007ce6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007ce8:	f7ff ff66 	bl	8007bb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007cec:	f7ff fd4e 	bl	800778c <vTaskSwitchContext>
	prvTaskExitError();
 8007cf0:	f7ff ff22 	bl	8007b38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007cf4:	2300      	movs	r3, #0
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3718      	adds	r7, #24
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}
 8007cfe:	bf00      	nop
 8007d00:	e000ed00 	.word	0xe000ed00
 8007d04:	410fc271 	.word	0x410fc271
 8007d08:	410fc270 	.word	0x410fc270
 8007d0c:	e000e400 	.word	0xe000e400
 8007d10:	20000ac0 	.word	0x20000ac0
 8007d14:	20000ac4 	.word	0x20000ac4
 8007d18:	e000ed20 	.word	0xe000ed20
 8007d1c:	20000014 	.word	0x20000014
 8007d20:	e000ef34 	.word	0xe000ef34

08007d24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007d24:	b480      	push	{r7}
 8007d26:	b083      	sub	sp, #12
 8007d28:	af00      	add	r7, sp, #0
	__asm volatile
 8007d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d2e:	f383 8811 	msr	BASEPRI, r3
 8007d32:	f3bf 8f6f 	isb	sy
 8007d36:	f3bf 8f4f 	dsb	sy
 8007d3a:	607b      	str	r3, [r7, #4]
}
 8007d3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007d3e:	4b0f      	ldr	r3, [pc, #60]	; (8007d7c <vPortEnterCritical+0x58>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	3301      	adds	r3, #1
 8007d44:	4a0d      	ldr	r2, [pc, #52]	; (8007d7c <vPortEnterCritical+0x58>)
 8007d46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007d48:	4b0c      	ldr	r3, [pc, #48]	; (8007d7c <vPortEnterCritical+0x58>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d10f      	bne.n	8007d70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007d50:	4b0b      	ldr	r3, [pc, #44]	; (8007d80 <vPortEnterCritical+0x5c>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	b2db      	uxtb	r3, r3
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d00a      	beq.n	8007d70 <vPortEnterCritical+0x4c>
	__asm volatile
 8007d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d5e:	f383 8811 	msr	BASEPRI, r3
 8007d62:	f3bf 8f6f 	isb	sy
 8007d66:	f3bf 8f4f 	dsb	sy
 8007d6a:	603b      	str	r3, [r7, #0]
}
 8007d6c:	bf00      	nop
 8007d6e:	e7fe      	b.n	8007d6e <vPortEnterCritical+0x4a>
	}
}
 8007d70:	bf00      	nop
 8007d72:	370c      	adds	r7, #12
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr
 8007d7c:	20000014 	.word	0x20000014
 8007d80:	e000ed04 	.word	0xe000ed04

08007d84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007d84:	b480      	push	{r7}
 8007d86:	b083      	sub	sp, #12
 8007d88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007d8a:	4b12      	ldr	r3, [pc, #72]	; (8007dd4 <vPortExitCritical+0x50>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d10a      	bne.n	8007da8 <vPortExitCritical+0x24>
	__asm volatile
 8007d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d96:	f383 8811 	msr	BASEPRI, r3
 8007d9a:	f3bf 8f6f 	isb	sy
 8007d9e:	f3bf 8f4f 	dsb	sy
 8007da2:	607b      	str	r3, [r7, #4]
}
 8007da4:	bf00      	nop
 8007da6:	e7fe      	b.n	8007da6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007da8:	4b0a      	ldr	r3, [pc, #40]	; (8007dd4 <vPortExitCritical+0x50>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	3b01      	subs	r3, #1
 8007dae:	4a09      	ldr	r2, [pc, #36]	; (8007dd4 <vPortExitCritical+0x50>)
 8007db0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007db2:	4b08      	ldr	r3, [pc, #32]	; (8007dd4 <vPortExitCritical+0x50>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d105      	bne.n	8007dc6 <vPortExitCritical+0x42>
 8007dba:	2300      	movs	r3, #0
 8007dbc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007dc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007dc6:	bf00      	nop
 8007dc8:	370c      	adds	r7, #12
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr
 8007dd2:	bf00      	nop
 8007dd4:	20000014 	.word	0x20000014
	...

08007de0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007de0:	f3ef 8009 	mrs	r0, PSP
 8007de4:	f3bf 8f6f 	isb	sy
 8007de8:	4b15      	ldr	r3, [pc, #84]	; (8007e40 <pxCurrentTCBConst>)
 8007dea:	681a      	ldr	r2, [r3, #0]
 8007dec:	f01e 0f10 	tst.w	lr, #16
 8007df0:	bf08      	it	eq
 8007df2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007df6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dfa:	6010      	str	r0, [r2, #0]
 8007dfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007e00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007e04:	f380 8811 	msr	BASEPRI, r0
 8007e08:	f3bf 8f4f 	dsb	sy
 8007e0c:	f3bf 8f6f 	isb	sy
 8007e10:	f7ff fcbc 	bl	800778c <vTaskSwitchContext>
 8007e14:	f04f 0000 	mov.w	r0, #0
 8007e18:	f380 8811 	msr	BASEPRI, r0
 8007e1c:	bc09      	pop	{r0, r3}
 8007e1e:	6819      	ldr	r1, [r3, #0]
 8007e20:	6808      	ldr	r0, [r1, #0]
 8007e22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e26:	f01e 0f10 	tst.w	lr, #16
 8007e2a:	bf08      	it	eq
 8007e2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007e30:	f380 8809 	msr	PSP, r0
 8007e34:	f3bf 8f6f 	isb	sy
 8007e38:	4770      	bx	lr
 8007e3a:	bf00      	nop
 8007e3c:	f3af 8000 	nop.w

08007e40 <pxCurrentTCBConst>:
 8007e40:	20000994 	.word	0x20000994
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007e44:	bf00      	nop
 8007e46:	bf00      	nop

08007e48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b082      	sub	sp, #8
 8007e4c:	af00      	add	r7, sp, #0
	__asm volatile
 8007e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e52:	f383 8811 	msr	BASEPRI, r3
 8007e56:	f3bf 8f6f 	isb	sy
 8007e5a:	f3bf 8f4f 	dsb	sy
 8007e5e:	607b      	str	r3, [r7, #4]
}
 8007e60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007e62:	f7ff fbdb 	bl	800761c <xTaskIncrementTick>
 8007e66:	4603      	mov	r3, r0
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d003      	beq.n	8007e74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007e6c:	4b06      	ldr	r3, [pc, #24]	; (8007e88 <SysTick_Handler+0x40>)
 8007e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e72:	601a      	str	r2, [r3, #0]
 8007e74:	2300      	movs	r3, #0
 8007e76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	f383 8811 	msr	BASEPRI, r3
}
 8007e7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007e80:	bf00      	nop
 8007e82:	3708      	adds	r7, #8
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}
 8007e88:	e000ed04 	.word	0xe000ed04

08007e8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007e90:	4b0b      	ldr	r3, [pc, #44]	; (8007ec0 <vPortSetupTimerInterrupt+0x34>)
 8007e92:	2200      	movs	r2, #0
 8007e94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007e96:	4b0b      	ldr	r3, [pc, #44]	; (8007ec4 <vPortSetupTimerInterrupt+0x38>)
 8007e98:	2200      	movs	r2, #0
 8007e9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007e9c:	4b0a      	ldr	r3, [pc, #40]	; (8007ec8 <vPortSetupTimerInterrupt+0x3c>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a0a      	ldr	r2, [pc, #40]	; (8007ecc <vPortSetupTimerInterrupt+0x40>)
 8007ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ea6:	099b      	lsrs	r3, r3, #6
 8007ea8:	4a09      	ldr	r2, [pc, #36]	; (8007ed0 <vPortSetupTimerInterrupt+0x44>)
 8007eaa:	3b01      	subs	r3, #1
 8007eac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007eae:	4b04      	ldr	r3, [pc, #16]	; (8007ec0 <vPortSetupTimerInterrupt+0x34>)
 8007eb0:	2207      	movs	r2, #7
 8007eb2:	601a      	str	r2, [r3, #0]
}
 8007eb4:	bf00      	nop
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr
 8007ebe:	bf00      	nop
 8007ec0:	e000e010 	.word	0xe000e010
 8007ec4:	e000e018 	.word	0xe000e018
 8007ec8:	20000008 	.word	0x20000008
 8007ecc:	10624dd3 	.word	0x10624dd3
 8007ed0:	e000e014 	.word	0xe000e014

08007ed4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007ed4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007ee4 <vPortEnableVFP+0x10>
 8007ed8:	6801      	ldr	r1, [r0, #0]
 8007eda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007ede:	6001      	str	r1, [r0, #0]
 8007ee0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007ee2:	bf00      	nop
 8007ee4:	e000ed88 	.word	0xe000ed88

08007ee8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b08a      	sub	sp, #40	; 0x28
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007ef4:	f7ff fae8 	bl	80074c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007ef8:	4b5b      	ldr	r3, [pc, #364]	; (8008068 <pvPortMalloc+0x180>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d101      	bne.n	8007f04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007f00:	f000 f920 	bl	8008144 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007f04:	4b59      	ldr	r3, [pc, #356]	; (800806c <pvPortMalloc+0x184>)
 8007f06:	681a      	ldr	r2, [r3, #0]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	4013      	ands	r3, r2
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	f040 8093 	bne.w	8008038 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d01d      	beq.n	8007f54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007f18:	2208      	movs	r2, #8
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	4413      	add	r3, r2
 8007f1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f003 0307 	and.w	r3, r3, #7
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d014      	beq.n	8007f54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f023 0307 	bic.w	r3, r3, #7
 8007f30:	3308      	adds	r3, #8
 8007f32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f003 0307 	and.w	r3, r3, #7
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d00a      	beq.n	8007f54 <pvPortMalloc+0x6c>
	__asm volatile
 8007f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f42:	f383 8811 	msr	BASEPRI, r3
 8007f46:	f3bf 8f6f 	isb	sy
 8007f4a:	f3bf 8f4f 	dsb	sy
 8007f4e:	617b      	str	r3, [r7, #20]
}
 8007f50:	bf00      	nop
 8007f52:	e7fe      	b.n	8007f52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d06e      	beq.n	8008038 <pvPortMalloc+0x150>
 8007f5a:	4b45      	ldr	r3, [pc, #276]	; (8008070 <pvPortMalloc+0x188>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	687a      	ldr	r2, [r7, #4]
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d869      	bhi.n	8008038 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007f64:	4b43      	ldr	r3, [pc, #268]	; (8008074 <pvPortMalloc+0x18c>)
 8007f66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007f68:	4b42      	ldr	r3, [pc, #264]	; (8008074 <pvPortMalloc+0x18c>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f6e:	e004      	b.n	8007f7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	687a      	ldr	r2, [r7, #4]
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d903      	bls.n	8007f8c <pvPortMalloc+0xa4>
 8007f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d1f1      	bne.n	8007f70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007f8c:	4b36      	ldr	r3, [pc, #216]	; (8008068 <pvPortMalloc+0x180>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d050      	beq.n	8008038 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007f96:	6a3b      	ldr	r3, [r7, #32]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	2208      	movs	r2, #8
 8007f9c:	4413      	add	r3, r2
 8007f9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	6a3b      	ldr	r3, [r7, #32]
 8007fa6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007faa:	685a      	ldr	r2, [r3, #4]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	1ad2      	subs	r2, r2, r3
 8007fb0:	2308      	movs	r3, #8
 8007fb2:	005b      	lsls	r3, r3, #1
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d91f      	bls.n	8007ff8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	4413      	add	r3, r2
 8007fbe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007fc0:	69bb      	ldr	r3, [r7, #24]
 8007fc2:	f003 0307 	and.w	r3, r3, #7
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d00a      	beq.n	8007fe0 <pvPortMalloc+0xf8>
	__asm volatile
 8007fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fce:	f383 8811 	msr	BASEPRI, r3
 8007fd2:	f3bf 8f6f 	isb	sy
 8007fd6:	f3bf 8f4f 	dsb	sy
 8007fda:	613b      	str	r3, [r7, #16]
}
 8007fdc:	bf00      	nop
 8007fde:	e7fe      	b.n	8007fde <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe2:	685a      	ldr	r2, [r3, #4]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	1ad2      	subs	r2, r2, r3
 8007fe8:	69bb      	ldr	r3, [r7, #24]
 8007fea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fee:	687a      	ldr	r2, [r7, #4]
 8007ff0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007ff2:	69b8      	ldr	r0, [r7, #24]
 8007ff4:	f000 f908 	bl	8008208 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007ff8:	4b1d      	ldr	r3, [pc, #116]	; (8008070 <pvPortMalloc+0x188>)
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	1ad3      	subs	r3, r2, r3
 8008002:	4a1b      	ldr	r2, [pc, #108]	; (8008070 <pvPortMalloc+0x188>)
 8008004:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008006:	4b1a      	ldr	r3, [pc, #104]	; (8008070 <pvPortMalloc+0x188>)
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	4b1b      	ldr	r3, [pc, #108]	; (8008078 <pvPortMalloc+0x190>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	429a      	cmp	r2, r3
 8008010:	d203      	bcs.n	800801a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008012:	4b17      	ldr	r3, [pc, #92]	; (8008070 <pvPortMalloc+0x188>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a18      	ldr	r2, [pc, #96]	; (8008078 <pvPortMalloc+0x190>)
 8008018:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800801a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800801c:	685a      	ldr	r2, [r3, #4]
 800801e:	4b13      	ldr	r3, [pc, #76]	; (800806c <pvPortMalloc+0x184>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	431a      	orrs	r2, r3
 8008024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008026:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802a:	2200      	movs	r2, #0
 800802c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800802e:	4b13      	ldr	r3, [pc, #76]	; (800807c <pvPortMalloc+0x194>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	3301      	adds	r3, #1
 8008034:	4a11      	ldr	r2, [pc, #68]	; (800807c <pvPortMalloc+0x194>)
 8008036:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008038:	f7ff fa54 	bl	80074e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800803c:	69fb      	ldr	r3, [r7, #28]
 800803e:	f003 0307 	and.w	r3, r3, #7
 8008042:	2b00      	cmp	r3, #0
 8008044:	d00a      	beq.n	800805c <pvPortMalloc+0x174>
	__asm volatile
 8008046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800804a:	f383 8811 	msr	BASEPRI, r3
 800804e:	f3bf 8f6f 	isb	sy
 8008052:	f3bf 8f4f 	dsb	sy
 8008056:	60fb      	str	r3, [r7, #12]
}
 8008058:	bf00      	nop
 800805a:	e7fe      	b.n	800805a <pvPortMalloc+0x172>
	return pvReturn;
 800805c:	69fb      	ldr	r3, [r7, #28]
}
 800805e:	4618      	mov	r0, r3
 8008060:	3728      	adds	r7, #40	; 0x28
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}
 8008066:	bf00      	nop
 8008068:	200046d0 	.word	0x200046d0
 800806c:	200046e4 	.word	0x200046e4
 8008070:	200046d4 	.word	0x200046d4
 8008074:	200046c8 	.word	0x200046c8
 8008078:	200046d8 	.word	0x200046d8
 800807c:	200046dc 	.word	0x200046dc

08008080 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b086      	sub	sp, #24
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d04d      	beq.n	800812e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008092:	2308      	movs	r3, #8
 8008094:	425b      	negs	r3, r3
 8008096:	697a      	ldr	r2, [r7, #20]
 8008098:	4413      	add	r3, r2
 800809a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	685a      	ldr	r2, [r3, #4]
 80080a4:	4b24      	ldr	r3, [pc, #144]	; (8008138 <vPortFree+0xb8>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4013      	ands	r3, r2
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d10a      	bne.n	80080c4 <vPortFree+0x44>
	__asm volatile
 80080ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b2:	f383 8811 	msr	BASEPRI, r3
 80080b6:	f3bf 8f6f 	isb	sy
 80080ba:	f3bf 8f4f 	dsb	sy
 80080be:	60fb      	str	r3, [r7, #12]
}
 80080c0:	bf00      	nop
 80080c2:	e7fe      	b.n	80080c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d00a      	beq.n	80080e2 <vPortFree+0x62>
	__asm volatile
 80080cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d0:	f383 8811 	msr	BASEPRI, r3
 80080d4:	f3bf 8f6f 	isb	sy
 80080d8:	f3bf 8f4f 	dsb	sy
 80080dc:	60bb      	str	r3, [r7, #8]
}
 80080de:	bf00      	nop
 80080e0:	e7fe      	b.n	80080e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	685a      	ldr	r2, [r3, #4]
 80080e6:	4b14      	ldr	r3, [pc, #80]	; (8008138 <vPortFree+0xb8>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4013      	ands	r3, r2
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d01e      	beq.n	800812e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d11a      	bne.n	800812e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	685a      	ldr	r2, [r3, #4]
 80080fc:	4b0e      	ldr	r3, [pc, #56]	; (8008138 <vPortFree+0xb8>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	43db      	mvns	r3, r3
 8008102:	401a      	ands	r2, r3
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008108:	f7ff f9de 	bl	80074c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	685a      	ldr	r2, [r3, #4]
 8008110:	4b0a      	ldr	r3, [pc, #40]	; (800813c <vPortFree+0xbc>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4413      	add	r3, r2
 8008116:	4a09      	ldr	r2, [pc, #36]	; (800813c <vPortFree+0xbc>)
 8008118:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800811a:	6938      	ldr	r0, [r7, #16]
 800811c:	f000 f874 	bl	8008208 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008120:	4b07      	ldr	r3, [pc, #28]	; (8008140 <vPortFree+0xc0>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	3301      	adds	r3, #1
 8008126:	4a06      	ldr	r2, [pc, #24]	; (8008140 <vPortFree+0xc0>)
 8008128:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800812a:	f7ff f9db 	bl	80074e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800812e:	bf00      	nop
 8008130:	3718      	adds	r7, #24
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
 8008136:	bf00      	nop
 8008138:	200046e4 	.word	0x200046e4
 800813c:	200046d4 	.word	0x200046d4
 8008140:	200046e0 	.word	0x200046e0

08008144 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008144:	b480      	push	{r7}
 8008146:	b085      	sub	sp, #20
 8008148:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800814a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800814e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008150:	4b27      	ldr	r3, [pc, #156]	; (80081f0 <prvHeapInit+0xac>)
 8008152:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f003 0307 	and.w	r3, r3, #7
 800815a:	2b00      	cmp	r3, #0
 800815c:	d00c      	beq.n	8008178 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	3307      	adds	r3, #7
 8008162:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f023 0307 	bic.w	r3, r3, #7
 800816a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800816c:	68ba      	ldr	r2, [r7, #8]
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	1ad3      	subs	r3, r2, r3
 8008172:	4a1f      	ldr	r2, [pc, #124]	; (80081f0 <prvHeapInit+0xac>)
 8008174:	4413      	add	r3, r2
 8008176:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800817c:	4a1d      	ldr	r2, [pc, #116]	; (80081f4 <prvHeapInit+0xb0>)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008182:	4b1c      	ldr	r3, [pc, #112]	; (80081f4 <prvHeapInit+0xb0>)
 8008184:	2200      	movs	r2, #0
 8008186:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	68ba      	ldr	r2, [r7, #8]
 800818c:	4413      	add	r3, r2
 800818e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008190:	2208      	movs	r2, #8
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	1a9b      	subs	r3, r3, r2
 8008196:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f023 0307 	bic.w	r3, r3, #7
 800819e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	4a15      	ldr	r2, [pc, #84]	; (80081f8 <prvHeapInit+0xb4>)
 80081a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80081a6:	4b14      	ldr	r3, [pc, #80]	; (80081f8 <prvHeapInit+0xb4>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	2200      	movs	r2, #0
 80081ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80081ae:	4b12      	ldr	r3, [pc, #72]	; (80081f8 <prvHeapInit+0xb4>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	2200      	movs	r2, #0
 80081b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	68fa      	ldr	r2, [r7, #12]
 80081be:	1ad2      	subs	r2, r2, r3
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80081c4:	4b0c      	ldr	r3, [pc, #48]	; (80081f8 <prvHeapInit+0xb4>)
 80081c6:	681a      	ldr	r2, [r3, #0]
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	4a0a      	ldr	r2, [pc, #40]	; (80081fc <prvHeapInit+0xb8>)
 80081d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	4a09      	ldr	r2, [pc, #36]	; (8008200 <prvHeapInit+0xbc>)
 80081da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80081dc:	4b09      	ldr	r3, [pc, #36]	; (8008204 <prvHeapInit+0xc0>)
 80081de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80081e2:	601a      	str	r2, [r3, #0]
}
 80081e4:	bf00      	nop
 80081e6:	3714      	adds	r7, #20
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr
 80081f0:	20000ac8 	.word	0x20000ac8
 80081f4:	200046c8 	.word	0x200046c8
 80081f8:	200046d0 	.word	0x200046d0
 80081fc:	200046d8 	.word	0x200046d8
 8008200:	200046d4 	.word	0x200046d4
 8008204:	200046e4 	.word	0x200046e4

08008208 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008208:	b480      	push	{r7}
 800820a:	b085      	sub	sp, #20
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008210:	4b28      	ldr	r3, [pc, #160]	; (80082b4 <prvInsertBlockIntoFreeList+0xac>)
 8008212:	60fb      	str	r3, [r7, #12]
 8008214:	e002      	b.n	800821c <prvInsertBlockIntoFreeList+0x14>
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	60fb      	str	r3, [r7, #12]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	429a      	cmp	r2, r3
 8008224:	d8f7      	bhi.n	8008216 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	68ba      	ldr	r2, [r7, #8]
 8008230:	4413      	add	r3, r2
 8008232:	687a      	ldr	r2, [r7, #4]
 8008234:	429a      	cmp	r2, r3
 8008236:	d108      	bne.n	800824a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	685a      	ldr	r2, [r3, #4]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	441a      	add	r2, r3
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	68ba      	ldr	r2, [r7, #8]
 8008254:	441a      	add	r2, r3
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	429a      	cmp	r2, r3
 800825c:	d118      	bne.n	8008290 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681a      	ldr	r2, [r3, #0]
 8008262:	4b15      	ldr	r3, [pc, #84]	; (80082b8 <prvInsertBlockIntoFreeList+0xb0>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	429a      	cmp	r2, r3
 8008268:	d00d      	beq.n	8008286 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	685a      	ldr	r2, [r3, #4]
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	441a      	add	r2, r3
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	601a      	str	r2, [r3, #0]
 8008284:	e008      	b.n	8008298 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008286:	4b0c      	ldr	r3, [pc, #48]	; (80082b8 <prvInsertBlockIntoFreeList+0xb0>)
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	601a      	str	r2, [r3, #0]
 800828e:	e003      	b.n	8008298 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681a      	ldr	r2, [r3, #0]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008298:	68fa      	ldr	r2, [r7, #12]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	429a      	cmp	r2, r3
 800829e:	d002      	beq.n	80082a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80082a6:	bf00      	nop
 80082a8:	3714      	adds	r7, #20
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr
 80082b2:	bf00      	nop
 80082b4:	200046c8 	.word	0x200046c8
 80082b8:	200046d0 	.word	0x200046d0

080082bc <__libc_init_array>:
 80082bc:	b570      	push	{r4, r5, r6, lr}
 80082be:	4d0d      	ldr	r5, [pc, #52]	; (80082f4 <__libc_init_array+0x38>)
 80082c0:	4c0d      	ldr	r4, [pc, #52]	; (80082f8 <__libc_init_array+0x3c>)
 80082c2:	1b64      	subs	r4, r4, r5
 80082c4:	10a4      	asrs	r4, r4, #2
 80082c6:	2600      	movs	r6, #0
 80082c8:	42a6      	cmp	r6, r4
 80082ca:	d109      	bne.n	80082e0 <__libc_init_array+0x24>
 80082cc:	4d0b      	ldr	r5, [pc, #44]	; (80082fc <__libc_init_array+0x40>)
 80082ce:	4c0c      	ldr	r4, [pc, #48]	; (8008300 <__libc_init_array+0x44>)
 80082d0:	f000 f944 	bl	800855c <_init>
 80082d4:	1b64      	subs	r4, r4, r5
 80082d6:	10a4      	asrs	r4, r4, #2
 80082d8:	2600      	movs	r6, #0
 80082da:	42a6      	cmp	r6, r4
 80082dc:	d105      	bne.n	80082ea <__libc_init_array+0x2e>
 80082de:	bd70      	pop	{r4, r5, r6, pc}
 80082e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80082e4:	4798      	blx	r3
 80082e6:	3601      	adds	r6, #1
 80082e8:	e7ee      	b.n	80082c8 <__libc_init_array+0xc>
 80082ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80082ee:	4798      	blx	r3
 80082f0:	3601      	adds	r6, #1
 80082f2:	e7f2      	b.n	80082da <__libc_init_array+0x1e>
 80082f4:	08009a28 	.word	0x08009a28
 80082f8:	08009a28 	.word	0x08009a28
 80082fc:	08009a28 	.word	0x08009a28
 8008300:	08009a2c 	.word	0x08009a2c

08008304 <__itoa>:
 8008304:	1e93      	subs	r3, r2, #2
 8008306:	2b22      	cmp	r3, #34	; 0x22
 8008308:	b510      	push	{r4, lr}
 800830a:	460c      	mov	r4, r1
 800830c:	d904      	bls.n	8008318 <__itoa+0x14>
 800830e:	2300      	movs	r3, #0
 8008310:	700b      	strb	r3, [r1, #0]
 8008312:	461c      	mov	r4, r3
 8008314:	4620      	mov	r0, r4
 8008316:	bd10      	pop	{r4, pc}
 8008318:	2a0a      	cmp	r2, #10
 800831a:	d109      	bne.n	8008330 <__itoa+0x2c>
 800831c:	2800      	cmp	r0, #0
 800831e:	da07      	bge.n	8008330 <__itoa+0x2c>
 8008320:	232d      	movs	r3, #45	; 0x2d
 8008322:	700b      	strb	r3, [r1, #0]
 8008324:	4240      	negs	r0, r0
 8008326:	2101      	movs	r1, #1
 8008328:	4421      	add	r1, r4
 800832a:	f000 f879 	bl	8008420 <__utoa>
 800832e:	e7f1      	b.n	8008314 <__itoa+0x10>
 8008330:	2100      	movs	r1, #0
 8008332:	e7f9      	b.n	8008328 <__itoa+0x24>

08008334 <itoa>:
 8008334:	f7ff bfe6 	b.w	8008304 <__itoa>

08008338 <__retarget_lock_acquire_recursive>:
 8008338:	4770      	bx	lr

0800833a <__retarget_lock_release_recursive>:
 800833a:	4770      	bx	lr

0800833c <memset>:
 800833c:	4402      	add	r2, r0
 800833e:	4603      	mov	r3, r0
 8008340:	4293      	cmp	r3, r2
 8008342:	d100      	bne.n	8008346 <memset+0xa>
 8008344:	4770      	bx	lr
 8008346:	f803 1b01 	strb.w	r1, [r3], #1
 800834a:	e7f9      	b.n	8008340 <memset+0x4>

0800834c <cleanup_glue>:
 800834c:	b538      	push	{r3, r4, r5, lr}
 800834e:	460c      	mov	r4, r1
 8008350:	6809      	ldr	r1, [r1, #0]
 8008352:	4605      	mov	r5, r0
 8008354:	b109      	cbz	r1, 800835a <cleanup_glue+0xe>
 8008356:	f7ff fff9 	bl	800834c <cleanup_glue>
 800835a:	4621      	mov	r1, r4
 800835c:	4628      	mov	r0, r5
 800835e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008362:	f000 b8ab 	b.w	80084bc <_free_r>
	...

08008368 <_reclaim_reent>:
 8008368:	4b2c      	ldr	r3, [pc, #176]	; (800841c <_reclaim_reent+0xb4>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4283      	cmp	r3, r0
 800836e:	b570      	push	{r4, r5, r6, lr}
 8008370:	4604      	mov	r4, r0
 8008372:	d051      	beq.n	8008418 <_reclaim_reent+0xb0>
 8008374:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008376:	b143      	cbz	r3, 800838a <_reclaim_reent+0x22>
 8008378:	68db      	ldr	r3, [r3, #12]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d14a      	bne.n	8008414 <_reclaim_reent+0xac>
 800837e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008380:	6819      	ldr	r1, [r3, #0]
 8008382:	b111      	cbz	r1, 800838a <_reclaim_reent+0x22>
 8008384:	4620      	mov	r0, r4
 8008386:	f000 f899 	bl	80084bc <_free_r>
 800838a:	6961      	ldr	r1, [r4, #20]
 800838c:	b111      	cbz	r1, 8008394 <_reclaim_reent+0x2c>
 800838e:	4620      	mov	r0, r4
 8008390:	f000 f894 	bl	80084bc <_free_r>
 8008394:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008396:	b111      	cbz	r1, 800839e <_reclaim_reent+0x36>
 8008398:	4620      	mov	r0, r4
 800839a:	f000 f88f 	bl	80084bc <_free_r>
 800839e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80083a0:	b111      	cbz	r1, 80083a8 <_reclaim_reent+0x40>
 80083a2:	4620      	mov	r0, r4
 80083a4:	f000 f88a 	bl	80084bc <_free_r>
 80083a8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80083aa:	b111      	cbz	r1, 80083b2 <_reclaim_reent+0x4a>
 80083ac:	4620      	mov	r0, r4
 80083ae:	f000 f885 	bl	80084bc <_free_r>
 80083b2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80083b4:	b111      	cbz	r1, 80083bc <_reclaim_reent+0x54>
 80083b6:	4620      	mov	r0, r4
 80083b8:	f000 f880 	bl	80084bc <_free_r>
 80083bc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80083be:	b111      	cbz	r1, 80083c6 <_reclaim_reent+0x5e>
 80083c0:	4620      	mov	r0, r4
 80083c2:	f000 f87b 	bl	80084bc <_free_r>
 80083c6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80083c8:	b111      	cbz	r1, 80083d0 <_reclaim_reent+0x68>
 80083ca:	4620      	mov	r0, r4
 80083cc:	f000 f876 	bl	80084bc <_free_r>
 80083d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083d2:	b111      	cbz	r1, 80083da <_reclaim_reent+0x72>
 80083d4:	4620      	mov	r0, r4
 80083d6:	f000 f871 	bl	80084bc <_free_r>
 80083da:	69a3      	ldr	r3, [r4, #24]
 80083dc:	b1e3      	cbz	r3, 8008418 <_reclaim_reent+0xb0>
 80083de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80083e0:	4620      	mov	r0, r4
 80083e2:	4798      	blx	r3
 80083e4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80083e6:	b1b9      	cbz	r1, 8008418 <_reclaim_reent+0xb0>
 80083e8:	4620      	mov	r0, r4
 80083ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80083ee:	f7ff bfad 	b.w	800834c <cleanup_glue>
 80083f2:	5949      	ldr	r1, [r1, r5]
 80083f4:	b941      	cbnz	r1, 8008408 <_reclaim_reent+0xa0>
 80083f6:	3504      	adds	r5, #4
 80083f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083fa:	2d80      	cmp	r5, #128	; 0x80
 80083fc:	68d9      	ldr	r1, [r3, #12]
 80083fe:	d1f8      	bne.n	80083f2 <_reclaim_reent+0x8a>
 8008400:	4620      	mov	r0, r4
 8008402:	f000 f85b 	bl	80084bc <_free_r>
 8008406:	e7ba      	b.n	800837e <_reclaim_reent+0x16>
 8008408:	680e      	ldr	r6, [r1, #0]
 800840a:	4620      	mov	r0, r4
 800840c:	f000 f856 	bl	80084bc <_free_r>
 8008410:	4631      	mov	r1, r6
 8008412:	e7ef      	b.n	80083f4 <_reclaim_reent+0x8c>
 8008414:	2500      	movs	r5, #0
 8008416:	e7ef      	b.n	80083f8 <_reclaim_reent+0x90>
 8008418:	bd70      	pop	{r4, r5, r6, pc}
 800841a:	bf00      	nop
 800841c:	20000018 	.word	0x20000018

08008420 <__utoa>:
 8008420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008422:	4c1f      	ldr	r4, [pc, #124]	; (80084a0 <__utoa+0x80>)
 8008424:	b08b      	sub	sp, #44	; 0x2c
 8008426:	4605      	mov	r5, r0
 8008428:	460b      	mov	r3, r1
 800842a:	466e      	mov	r6, sp
 800842c:	f104 0c20 	add.w	ip, r4, #32
 8008430:	6820      	ldr	r0, [r4, #0]
 8008432:	6861      	ldr	r1, [r4, #4]
 8008434:	4637      	mov	r7, r6
 8008436:	c703      	stmia	r7!, {r0, r1}
 8008438:	3408      	adds	r4, #8
 800843a:	4564      	cmp	r4, ip
 800843c:	463e      	mov	r6, r7
 800843e:	d1f7      	bne.n	8008430 <__utoa+0x10>
 8008440:	7921      	ldrb	r1, [r4, #4]
 8008442:	7139      	strb	r1, [r7, #4]
 8008444:	1e91      	subs	r1, r2, #2
 8008446:	6820      	ldr	r0, [r4, #0]
 8008448:	6038      	str	r0, [r7, #0]
 800844a:	2922      	cmp	r1, #34	; 0x22
 800844c:	f04f 0100 	mov.w	r1, #0
 8008450:	d904      	bls.n	800845c <__utoa+0x3c>
 8008452:	7019      	strb	r1, [r3, #0]
 8008454:	460b      	mov	r3, r1
 8008456:	4618      	mov	r0, r3
 8008458:	b00b      	add	sp, #44	; 0x2c
 800845a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800845c:	1e58      	subs	r0, r3, #1
 800845e:	4684      	mov	ip, r0
 8008460:	fbb5 f7f2 	udiv	r7, r5, r2
 8008464:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8008468:	fb02 5617 	mls	r6, r2, r7, r5
 800846c:	4476      	add	r6, lr
 800846e:	460c      	mov	r4, r1
 8008470:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8008474:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8008478:	462e      	mov	r6, r5
 800847a:	42b2      	cmp	r2, r6
 800847c:	f101 0101 	add.w	r1, r1, #1
 8008480:	463d      	mov	r5, r7
 8008482:	d9ed      	bls.n	8008460 <__utoa+0x40>
 8008484:	2200      	movs	r2, #0
 8008486:	545a      	strb	r2, [r3, r1]
 8008488:	1919      	adds	r1, r3, r4
 800848a:	1aa5      	subs	r5, r4, r2
 800848c:	42aa      	cmp	r2, r5
 800848e:	dae2      	bge.n	8008456 <__utoa+0x36>
 8008490:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8008494:	780e      	ldrb	r6, [r1, #0]
 8008496:	7006      	strb	r6, [r0, #0]
 8008498:	3201      	adds	r2, #1
 800849a:	f801 5901 	strb.w	r5, [r1], #-1
 800849e:	e7f4      	b.n	800848a <__utoa+0x6a>
 80084a0:	080099f8 	.word	0x080099f8

080084a4 <__malloc_lock>:
 80084a4:	4801      	ldr	r0, [pc, #4]	; (80084ac <__malloc_lock+0x8>)
 80084a6:	f7ff bf47 	b.w	8008338 <__retarget_lock_acquire_recursive>
 80084aa:	bf00      	nop
 80084ac:	2000486c 	.word	0x2000486c

080084b0 <__malloc_unlock>:
 80084b0:	4801      	ldr	r0, [pc, #4]	; (80084b8 <__malloc_unlock+0x8>)
 80084b2:	f7ff bf42 	b.w	800833a <__retarget_lock_release_recursive>
 80084b6:	bf00      	nop
 80084b8:	2000486c 	.word	0x2000486c

080084bc <_free_r>:
 80084bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084be:	2900      	cmp	r1, #0
 80084c0:	d048      	beq.n	8008554 <_free_r+0x98>
 80084c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084c6:	9001      	str	r0, [sp, #4]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	f1a1 0404 	sub.w	r4, r1, #4
 80084ce:	bfb8      	it	lt
 80084d0:	18e4      	addlt	r4, r4, r3
 80084d2:	f7ff ffe7 	bl	80084a4 <__malloc_lock>
 80084d6:	4a20      	ldr	r2, [pc, #128]	; (8008558 <_free_r+0x9c>)
 80084d8:	9801      	ldr	r0, [sp, #4]
 80084da:	6813      	ldr	r3, [r2, #0]
 80084dc:	4615      	mov	r5, r2
 80084de:	b933      	cbnz	r3, 80084ee <_free_r+0x32>
 80084e0:	6063      	str	r3, [r4, #4]
 80084e2:	6014      	str	r4, [r2, #0]
 80084e4:	b003      	add	sp, #12
 80084e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80084ea:	f7ff bfe1 	b.w	80084b0 <__malloc_unlock>
 80084ee:	42a3      	cmp	r3, r4
 80084f0:	d90b      	bls.n	800850a <_free_r+0x4e>
 80084f2:	6821      	ldr	r1, [r4, #0]
 80084f4:	1862      	adds	r2, r4, r1
 80084f6:	4293      	cmp	r3, r2
 80084f8:	bf04      	itt	eq
 80084fa:	681a      	ldreq	r2, [r3, #0]
 80084fc:	685b      	ldreq	r3, [r3, #4]
 80084fe:	6063      	str	r3, [r4, #4]
 8008500:	bf04      	itt	eq
 8008502:	1852      	addeq	r2, r2, r1
 8008504:	6022      	streq	r2, [r4, #0]
 8008506:	602c      	str	r4, [r5, #0]
 8008508:	e7ec      	b.n	80084e4 <_free_r+0x28>
 800850a:	461a      	mov	r2, r3
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	b10b      	cbz	r3, 8008514 <_free_r+0x58>
 8008510:	42a3      	cmp	r3, r4
 8008512:	d9fa      	bls.n	800850a <_free_r+0x4e>
 8008514:	6811      	ldr	r1, [r2, #0]
 8008516:	1855      	adds	r5, r2, r1
 8008518:	42a5      	cmp	r5, r4
 800851a:	d10b      	bne.n	8008534 <_free_r+0x78>
 800851c:	6824      	ldr	r4, [r4, #0]
 800851e:	4421      	add	r1, r4
 8008520:	1854      	adds	r4, r2, r1
 8008522:	42a3      	cmp	r3, r4
 8008524:	6011      	str	r1, [r2, #0]
 8008526:	d1dd      	bne.n	80084e4 <_free_r+0x28>
 8008528:	681c      	ldr	r4, [r3, #0]
 800852a:	685b      	ldr	r3, [r3, #4]
 800852c:	6053      	str	r3, [r2, #4]
 800852e:	4421      	add	r1, r4
 8008530:	6011      	str	r1, [r2, #0]
 8008532:	e7d7      	b.n	80084e4 <_free_r+0x28>
 8008534:	d902      	bls.n	800853c <_free_r+0x80>
 8008536:	230c      	movs	r3, #12
 8008538:	6003      	str	r3, [r0, #0]
 800853a:	e7d3      	b.n	80084e4 <_free_r+0x28>
 800853c:	6825      	ldr	r5, [r4, #0]
 800853e:	1961      	adds	r1, r4, r5
 8008540:	428b      	cmp	r3, r1
 8008542:	bf04      	itt	eq
 8008544:	6819      	ldreq	r1, [r3, #0]
 8008546:	685b      	ldreq	r3, [r3, #4]
 8008548:	6063      	str	r3, [r4, #4]
 800854a:	bf04      	itt	eq
 800854c:	1949      	addeq	r1, r1, r5
 800854e:	6021      	streq	r1, [r4, #0]
 8008550:	6054      	str	r4, [r2, #4]
 8008552:	e7c7      	b.n	80084e4 <_free_r+0x28>
 8008554:	b003      	add	sp, #12
 8008556:	bd30      	pop	{r4, r5, pc}
 8008558:	200046e8 	.word	0x200046e8

0800855c <_init>:
 800855c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800855e:	bf00      	nop
 8008560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008562:	bc08      	pop	{r3}
 8008564:	469e      	mov	lr, r3
 8008566:	4770      	bx	lr

08008568 <_fini>:
 8008568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800856a:	bf00      	nop
 800856c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800856e:	bc08      	pop	{r3}
 8008570:	469e      	mov	lr, r3
 8008572:	4770      	bx	lr
