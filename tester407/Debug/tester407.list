
tester407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000097c  08008584  08008584  00018584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f00  08008f00  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008f00  08008f00  00018f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f08  08008f08  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f08  08008f08  00018f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f0c  08008f0c  00018f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008f10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          000043f0  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004480  20004480  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d754  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b26  00000000  00000000  0003d814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001558  00000000  00000000  00041340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001418  00000000  00000000  00042898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025d91  00000000  00000000  00043cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019bbf  00000000  00000000  00069a41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7aa3  00000000  00000000  00083600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0015b0a3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005c84  00000000  00000000  0015b0f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800856c 	.word	0x0800856c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	0800856c 	.word	0x0800856c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <_ZN9RV_BUTTONC1EP12GPIO_TypeDeftbb>:
#include "RV_BUTTON.h"

//создание экземпляра класса кнопки, порт, вывод, type (HIGH_PULL / LOW_PULL) и направление dir (NORM_OPEN / NORM_CLOSE)
RV_BUTTON::RV_BUTTON(GPIO_TypeDef *port, uint16_t pin, bool type, bool dir) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	60b9      	str	r1, [r7, #8]
 80004d2:	4611      	mov	r1, r2
 80004d4:	461a      	mov	r2, r3
 80004d6:	460b      	mov	r3, r1
 80004d8:	80fb      	strh	r3, [r7, #6]
 80004da:	4613      	mov	r3, r2
 80004dc:	717b      	strb	r3, [r7, #5]
	_PORT = port;
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	68ba      	ldr	r2, [r7, #8]
 80004e2:	605a      	str	r2, [r3, #4]
	_PIN = pin;
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	88fa      	ldrh	r2, [r7, #6]
 80004e8:	811a      	strh	r2, [r3, #8]
	RV_BUTTON::init();
 80004ea:	68f8      	ldr	r0, [r7, #12]
 80004ec:	f000 f80d 	bl	800050a <_ZN9RV_BUTTON4initEv>
	RV_BUTTON::setType(type);
 80004f0:	797b      	ldrb	r3, [r7, #5]
 80004f2:	4619      	mov	r1, r3
 80004f4:	68f8      	ldr	r0, [r7, #12]
 80004f6:	f000 f82e 	bl	8000556 <_ZN9RV_BUTTON7setTypeEb>
	_inv_state = dir;
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	7e3a      	ldrb	r2, [r7, #24]
 80004fe:	761a      	strb	r2, [r3, #24]
}
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	4618      	mov	r0, r3
 8000504:	3710      	adds	r7, #16
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}

0800050a <_ZN9RV_BUTTON4initEv>:
//инициализация
void RV_BUTTON::init() {
 800050a:	b580      	push	{r7, lr}
 800050c:	b082      	sub	sp, #8
 800050e:	af00      	add	r7, sp, #0
 8000510:	6078      	str	r0, [r7, #4]
	_mode = false;
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	2200      	movs	r2, #0
 8000516:	765a      	strb	r2, [r3, #25]
	btn_timer = 0;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	2200      	movs	r2, #0
 800051c:	615a      	str	r2, [r3, #20]
	btn_counter = 0;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	2200      	movs	r2, #0
 8000522:	741a      	strb	r2, [r3, #16]
	last_counter = 0;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2200      	movs	r2, #0
 8000528:	745a      	strb	r2, [r3, #17]
	_debounce = 120;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	2278      	movs	r2, #120	; 0x78
 800052e:	815a      	strh	r2, [r3, #10]
	_timeout = 500;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000536:	819a      	strh	r2, [r3, #12]
	_step_timeout = 400;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800053e:	81da      	strh	r2, [r3, #14]
	_inv_state = NORM_OPEN;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	2200      	movs	r2, #0
 8000544:	761a      	strb	r2, [r3, #24]
	RV_BUTTON::setType(HIGH_PULL);
 8000546:	2100      	movs	r1, #0
 8000548:	6878      	ldr	r0, [r7, #4]
 800054a:	f000 f804 	bl	8000556 <_ZN9RV_BUTTON7setTypeEb>
}
 800054e:	bf00      	nop
 8000550:	3708      	adds	r7, #8
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}

08000556 <_ZN9RV_BUTTON7setTypeEb>:
//установка таймаута между инкрементами (по умолчанию 400 мс)
void RV_BUTTON::setStepTimeout(uint16_t step_timeout) {
	_step_timeout = step_timeout;
}
//установка типа кнопки (HIGH_PULL / LOW_PULL)
void RV_BUTTON::setType(bool type) {
 8000556:	b480      	push	{r7}
 8000558:	b083      	sub	sp, #12
 800055a:	af00      	add	r7, sp, #0
 800055c:	6078      	str	r0, [r7, #4]
 800055e:	460b      	mov	r3, r1
 8000560:	70fb      	strb	r3, [r7, #3]
	_type = type;
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	78fa      	ldrb	r2, [r7, #3]
 8000566:	769a      	strb	r2, [r3, #26]
}
 8000568:	bf00      	nop
 800056a:	370c      	adds	r7, #12
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr

08000574 <_ZN9RV_BUTTON7isClickEv>:
	}
	else
		return false;
}
//возвращает true при клике. Сбрасывается после вызова
bool RV_BUTTON::isClick() {	
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	if (flags.isOne_f) {
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	785b      	ldrb	r3, [r3, #1]
 8000580:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000584:	b2db      	uxtb	r3, r3
 8000586:	2b00      	cmp	r3, #0
 8000588:	d006      	beq.n	8000598 <_ZN9RV_BUTTON7isClickEv+0x24>
		flags.isOne_f = false;
 800058a:	687a      	ldr	r2, [r7, #4]
 800058c:	7853      	ldrb	r3, [r2, #1]
 800058e:	f36f 0341 	bfc	r3, #1, #1
 8000592:	7053      	strb	r3, [r2, #1]
		return true;
 8000594:	2301      	movs	r3, #1
 8000596:	e000      	b.n	800059a <_ZN9RV_BUTTON7isClickEv+0x26>
	}
	else
		return false;
 8000598:	2300      	movs	r3, #0
}
 800059a:	4618      	mov	r0, r3
 800059c:	370c      	adds	r7, #12
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr

080005a6 <_ZN9RV_BUTTON4tickEv>:
	_mode = true;
	flags.btn_state = state ^ _inv_state;
	_mode = false;
}
//опрос кнопки
void RV_BUTTON::tick() {	
 80005a6:	b580      	push	{r7, lr}
 80005a8:	b082      	sub	sp, #8
 80005aa:	af00      	add	r7, sp, #0
 80005ac:	6078      	str	r0, [r7, #4]
	if (!_mode) flags.btn_state = !HAL_GPIO_ReadPin(_PORT, _PIN) ^ (_inv_state ^ _type);
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	7e5b      	ldrb	r3, [r3, #25]
 80005b2:	f083 0301 	eor.w	r3, r3, #1
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d01e      	beq.n	80005fa <_ZN9RV_BUTTON4tickEv+0x54>
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	685a      	ldr	r2, [r3, #4]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	891b      	ldrh	r3, [r3, #8]
 80005c4:	4619      	mov	r1, r3
 80005c6:	4610      	mov	r0, r2
 80005c8:	f001 fe20 	bl	800220c <HAL_GPIO_ReadPin>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	bf0c      	ite	eq
 80005d2:	2301      	moveq	r3, #1
 80005d4:	2300      	movne	r3, #0
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	4619      	mov	r1, r3
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	7e1a      	ldrb	r2, [r3, #24]
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	7e9b      	ldrb	r3, [r3, #26]
 80005e2:	4053      	eors	r3, r2
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	4299      	cmp	r1, r3
 80005e8:	bf14      	ite	ne
 80005ea:	2301      	movne	r3, #1
 80005ec:	2300      	moveq	r3, #0
 80005ee:	b2d9      	uxtb	r1, r3
 80005f0:	687a      	ldr	r2, [r7, #4]
 80005f2:	7813      	ldrb	r3, [r2, #0]
 80005f4:	f361 0300 	bfi	r3, r1, #0, #1
 80005f8:	7013      	strb	r3, [r2, #0]
	
  if (flags.btn_state && !flags.btn_flag && (HAL_GetTick() - btn_timer >= _debounce)) {
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000602:	b2db      	uxtb	r3, r3
 8000604:	2b00      	cmp	r3, #0
 8000606:	d015      	beq.n	8000634 <_ZN9RV_BUTTON4tickEv+0x8e>
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000610:	b2db      	uxtb	r3, r3
 8000612:	f083 0301 	eor.w	r3, r3, #1
 8000616:	b2db      	uxtb	r3, r3
 8000618:	2b00      	cmp	r3, #0
 800061a:	d00b      	beq.n	8000634 <_ZN9RV_BUTTON4tickEv+0x8e>
 800061c:	f001 fa9c 	bl	8001b58 <HAL_GetTick>
 8000620:	4602      	mov	r2, r0
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	695b      	ldr	r3, [r3, #20]
 8000626:	1ad3      	subs	r3, r2, r3
 8000628:	687a      	ldr	r2, [r7, #4]
 800062a:	8952      	ldrh	r2, [r2, #10]
 800062c:	4293      	cmp	r3, r2
 800062e:	d301      	bcc.n	8000634 <_ZN9RV_BUTTON4tickEv+0x8e>
 8000630:	2301      	movs	r3, #1
 8000632:	e000      	b.n	8000636 <_ZN9RV_BUTTON4tickEv+0x90>
 8000634:	2300      	movs	r3, #0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d019      	beq.n	800066e <_ZN9RV_BUTTON4tickEv+0xc8>
    flags.btn_flag = true;
 800063a:	687a      	ldr	r2, [r7, #4]
 800063c:	7813      	ldrb	r3, [r2, #0]
 800063e:	f043 0302 	orr.w	r3, r3, #2
 8000642:	7013      	strb	r3, [r2, #0]
    btn_counter++;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	7c1b      	ldrb	r3, [r3, #16]
 8000648:	3301      	adds	r3, #1
 800064a:	b2da      	uxtb	r2, r3
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	741a      	strb	r2, [r3, #16]
    btn_timer = HAL_GetTick();
 8000650:	f001 fa82 	bl	8001b58 <HAL_GetTick>
 8000654:	4602      	mov	r2, r0
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	615a      	str	r2, [r3, #20]
    flags.isPress_f = true;
 800065a:	687a      	ldr	r2, [r7, #4]
 800065c:	7813      	ldrb	r3, [r2, #0]
 800065e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000662:	7013      	strb	r3, [r2, #0]
		flags.oneClick_f = true;
 8000664:	687a      	ldr	r2, [r7, #4]
 8000666:	7853      	ldrb	r3, [r2, #1]
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	7053      	strb	r3, [r2, #1]
  }
  if (!flags.btn_state && flags.btn_flag) {
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000676:	b2db      	uxtb	r3, r3
 8000678:	f083 0301 	eor.w	r3, r3, #1
 800067c:	b2db      	uxtb	r3, r3
 800067e:	2b00      	cmp	r3, #0
 8000680:	d030      	beq.n	80006e4 <_ZN9RV_BUTTON4tickEv+0x13e>
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800068a:	b2db      	uxtb	r3, r3
 800068c:	2b00      	cmp	r3, #0
 800068e:	d029      	beq.n	80006e4 <_ZN9RV_BUTTON4tickEv+0x13e>
    flags.btn_flag = false;
 8000690:	687a      	ldr	r2, [r7, #4]
 8000692:	7813      	ldrb	r3, [r2, #0]
 8000694:	f36f 0341 	bfc	r3, #1, #1
 8000698:	7013      	strb	r3, [r2, #0]
    flags.hold_flag = false;
 800069a:	687a      	ldr	r2, [r7, #4]
 800069c:	7813      	ldrb	r3, [r2, #0]
 800069e:	f36f 0382 	bfc	r3, #2, #1
 80006a2:	7013      	strb	r3, [r2, #0]
    flags.isRelease_f = true;
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	7813      	ldrb	r3, [r2, #0]
 80006a8:	f043 0320 	orr.w	r3, r3, #32
 80006ac:	7013      	strb	r3, [r2, #0]
		btn_timer = HAL_GetTick();
 80006ae:	f001 fa53 	bl	8001b58 <HAL_GetTick>
 80006b2:	4602      	mov	r2, r0
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	615a      	str	r2, [r3, #20]
		flags.step_flag = false;
 80006b8:	687a      	ldr	r2, [r7, #4]
 80006ba:	7813      	ldrb	r3, [r2, #0]
 80006bc:	f36f 13c7 	bfc	r3, #7, #1
 80006c0:	7013      	strb	r3, [r2, #0]
		if (flags.oneClick_f) {
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	785b      	ldrb	r3, [r3, #1]
 80006c6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d009      	beq.n	80006e4 <_ZN9RV_BUTTON4tickEv+0x13e>
			flags.oneClick_f = false;
 80006d0:	687a      	ldr	r2, [r7, #4]
 80006d2:	7853      	ldrb	r3, [r2, #1]
 80006d4:	f36f 0300 	bfc	r3, #0, #1
 80006d8:	7053      	strb	r3, [r2, #1]
			flags.isOne_f = true;
 80006da:	687a      	ldr	r2, [r7, #4]
 80006dc:	7853      	ldrb	r3, [r2, #1]
 80006de:	f043 0302 	orr.w	r3, r3, #2
 80006e2:	7053      	strb	r3, [r2, #1]
		}
  }
  if (flags.btn_flag && flags.btn_state && (HAL_GetTick() - btn_timer >= _timeout) && !flags.hold_flag) {
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d01c      	beq.n	800072c <_ZN9RV_BUTTON4tickEv+0x186>
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d015      	beq.n	800072c <_ZN9RV_BUTTON4tickEv+0x186>
 8000700:	f001 fa2a 	bl	8001b58 <HAL_GetTick>
 8000704:	4602      	mov	r2, r0
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	695b      	ldr	r3, [r3, #20]
 800070a:	1ad3      	subs	r3, r2, r3
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	8992      	ldrh	r2, [r2, #12]
 8000710:	4293      	cmp	r3, r2
 8000712:	d30b      	bcc.n	800072c <_ZN9RV_BUTTON4tickEv+0x186>
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800071c:	b2db      	uxtb	r3, r3
 800071e:	f083 0301 	eor.w	r3, r3, #1
 8000722:	b2db      	uxtb	r3, r3
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <_ZN9RV_BUTTON4tickEv+0x186>
 8000728:	2301      	movs	r3, #1
 800072a:	e000      	b.n	800072e <_ZN9RV_BUTTON4tickEv+0x188>
 800072c:	2300      	movs	r3, #0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d01b      	beq.n	800076a <_ZN9RV_BUTTON4tickEv+0x1c4>
    flags.hold_flag = true;
 8000732:	687a      	ldr	r2, [r7, #4]
 8000734:	7813      	ldrb	r3, [r2, #0]
 8000736:	f043 0304 	orr.w	r3, r3, #4
 800073a:	7013      	strb	r3, [r2, #0]
    btn_counter = 0;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	2200      	movs	r2, #0
 8000740:	741a      	strb	r2, [r3, #16]
    flags.isHolded_f = true;
 8000742:	687a      	ldr	r2, [r7, #4]
 8000744:	7813      	ldrb	r3, [r2, #0]
 8000746:	f043 0310 	orr.w	r3, r3, #16
 800074a:	7013      	strb	r3, [r2, #0]
		flags.step_flag = true;
 800074c:	687a      	ldr	r2, [r7, #4]
 800074e:	7813      	ldrb	r3, [r2, #0]
 8000750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000754:	7013      	strb	r3, [r2, #0]
		flags.oneClick_f = false;
 8000756:	687a      	ldr	r2, [r7, #4]
 8000758:	7853      	ldrb	r3, [r2, #1]
 800075a:	f36f 0300 	bfc	r3, #0, #1
 800075e:	7053      	strb	r3, [r2, #1]
		btn_timer = HAL_GetTick();
 8000760:	f001 f9fa 	bl	8001b58 <HAL_GetTick>
 8000764:	4602      	mov	r2, r0
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	615a      	str	r2, [r3, #20]
  }
  
  if ((HAL_GetTick() - btn_timer >= _timeout) && (btn_counter != 0)) {    
 800076a:	f001 f9f5 	bl	8001b58 <HAL_GetTick>
 800076e:	4602      	mov	r2, r0
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	695b      	ldr	r3, [r3, #20]
 8000774:	1ad3      	subs	r3, r2, r3
 8000776:	687a      	ldr	r2, [r7, #4]
 8000778:	8992      	ldrh	r2, [r2, #12]
 800077a:	4293      	cmp	r3, r2
 800077c:	d305      	bcc.n	800078a <_ZN9RV_BUTTON4tickEv+0x1e4>
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	7c1b      	ldrb	r3, [r3, #16]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <_ZN9RV_BUTTON4tickEv+0x1e4>
 8000786:	2301      	movs	r3, #1
 8000788:	e000      	b.n	800078c <_ZN9RV_BUTTON4tickEv+0x1e6>
 800078a:	2300      	movs	r3, #0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d00b      	beq.n	80007a8 <_ZN9RV_BUTTON4tickEv+0x202>
    last_counter = btn_counter;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	7c1a      	ldrb	r2, [r3, #16]
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	745a      	strb	r2, [r3, #17]
    btn_counter = 0;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2200      	movs	r2, #0
 800079c:	741a      	strb	r2, [r3, #16]
		flags.counter_flag = true;
 800079e:	687a      	ldr	r2, [r7, #4]
 80007a0:	7813      	ldrb	r3, [r2, #0]
 80007a2:	f043 0308 	orr.w	r3, r3, #8
 80007a6:	7013      	strb	r3, [r2, #0]
  }
}
 80007a8:	bf00      	nop
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80007b0:	b480      	push	{r7}
 80007b2:	b085      	sub	sp, #20
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	60b9      	str	r1, [r7, #8]
 80007ba:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	4a07      	ldr	r2, [pc, #28]	; (80007dc <vApplicationGetIdleTaskMemory+0x2c>)
 80007c0:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 80007c2:	68bb      	ldr	r3, [r7, #8]
 80007c4:	4a06      	ldr	r2, [pc, #24]	; (80007e0 <vApplicationGetIdleTaskMemory+0x30>)
 80007c6:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2280      	movs	r2, #128	; 0x80
 80007cc:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 80007ce:	bf00      	nop
 80007d0:	3714      	adds	r7, #20
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	200002e4 	.word	0x200002e4
 80007e0:	20000398 	.word	0x20000398

080007e4 <_Z16MX_FREERTOS_Initv>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80007e4:	b5b0      	push	{r4, r5, r7, lr}
 80007e6:	b096      	sub	sp, #88	; 0x58
 80007e8:	af00      	add	r7, sp, #0
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of testTask */
  osThreadDef(testTask, TestTask, osPriorityNormal, 0, 256);
 80007ea:	4b1d      	ldr	r3, [pc, #116]	; (8000860 <_Z16MX_FREERTOS_Initv+0x7c>)
 80007ec:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80007f0:	461d      	mov	r5, r3
 80007f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  testTaskHandle = osThreadCreate(osThread(testTask), NULL);
 80007fe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000802:	2100      	movs	r1, #0
 8000804:	4618      	mov	r0, r3
 8000806:	f006 fb06 	bl	8006e16 <osThreadCreate>
 800080a:	4603      	mov	r3, r0
 800080c:	4a15      	ldr	r2, [pc, #84]	; (8000864 <_Z16MX_FREERTOS_Initv+0x80>)
 800080e:	6013      	str	r3, [r2, #0]

  /* definition and creation of lcdTask */
  osThreadDef(lcdTask, LCDTask, osPriorityNormal, 0, 256);
 8000810:	4b15      	ldr	r3, [pc, #84]	; (8000868 <_Z16MX_FREERTOS_Initv+0x84>)
 8000812:	f107 0420 	add.w	r4, r7, #32
 8000816:	461d      	mov	r5, r3
 8000818:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800081a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800081c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000820:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  lcdTaskHandle = osThreadCreate(osThread(lcdTask), NULL);
 8000824:	f107 0320 	add.w	r3, r7, #32
 8000828:	2100      	movs	r1, #0
 800082a:	4618      	mov	r0, r3
 800082c:	f006 faf3 	bl	8006e16 <osThreadCreate>
 8000830:	4603      	mov	r3, r0
 8000832:	4a0e      	ldr	r2, [pc, #56]	; (800086c <_Z16MX_FREERTOS_Initv+0x88>)
 8000834:	6013      	str	r3, [r2, #0]

  /* definition and creation of I2C_Task */
  osThreadDef(I2C_Task, i2c_Task, osPriorityNormal, 0, 128);
 8000836:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <_Z16MX_FREERTOS_Initv+0x8c>)
 8000838:	1d3c      	adds	r4, r7, #4
 800083a:	461d      	mov	r5, r3
 800083c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800083e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000840:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000844:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  I2C_TaskHandle = osThreadCreate(osThread(I2C_Task), NULL);
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	2100      	movs	r1, #0
 800084c:	4618      	mov	r0, r3
 800084e:	f006 fae2 	bl	8006e16 <osThreadCreate>
 8000852:	4603      	mov	r3, r0
 8000854:	4a07      	ldr	r2, [pc, #28]	; (8000874 <_Z16MX_FREERTOS_Initv+0x90>)
 8000856:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000858:	bf00      	nop
 800085a:	3758      	adds	r7, #88	; 0x58
 800085c:	46bd      	mov	sp, r7
 800085e:	bdb0      	pop	{r4, r5, r7, pc}
 8000860:	080085a4 	.word	0x080085a4
 8000864:	200002d8 	.word	0x200002d8
 8000868:	080085c0 	.word	0x080085c0
 800086c:	200002dc 	.word	0x200002dc
 8000870:	080085dc 	.word	0x080085dc
 8000874:	200002e0 	.word	0x200002e0

08000878 <_Z8TestTaskPKv>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_TestTask */
void TestTask(void const * argument)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b088      	sub	sp, #32
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TestTask */

	uint32_t timeOutUART = 50;
 8000880:	2332      	movs	r3, #50	; 0x32
 8000882:	61fb      	str	r3, [r7, #28]
	uint8_t snum[5];
	//команды uart
	uint8_t cmdASIC[7] = { 0x55, 0xAA, 0x52, 0x05, 0x00, 0x00, 0x0A };
 8000884:	4a4b      	ldr	r2, [pc, #300]	; (80009b4 <_Z8TestTaskPKv+0x13c>)
 8000886:	f107 030c 	add.w	r3, r7, #12
 800088a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800088e:	6018      	str	r0, [r3, #0]
 8000890:	3304      	adds	r3, #4
 8000892:	8019      	strh	r1, [r3, #0]
 8000894:	3302      	adds	r3, #2
 8000896:	0c0a      	lsrs	r2, r1, #16
 8000898:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(RST_ASIC_GPIO_Port, RST_ASIC_Pin, GPIO_PIN_RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008a0:	4845      	ldr	r0, [pc, #276]	; (80009b8 <_Z8TestTaskPKv+0x140>)
 80008a2:	f001 fccb 	bl	800223c <HAL_GPIO_WritePin>


	/* Infinite loop */
	for (;;) {
		if (start && ready) {
 80008a6:	4b45      	ldr	r3, [pc, #276]	; (80009bc <_Z8TestTaskPKv+0x144>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d0fb      	beq.n	80008a6 <_Z8TestTaskPKv+0x2e>
 80008ae:	4b44      	ldr	r3, [pc, #272]	; (80009c0 <_Z8TestTaskPKv+0x148>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d0f7      	beq.n	80008a6 <_Z8TestTaskPKv+0x2e>
			counter_bytes = 0;
 80008b6:	4b43      	ldr	r3, [pc, #268]	; (80009c4 <_Z8TestTaskPKv+0x14c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(RST_ASIC_GPIO_Port, RST_ASIC_Pin, GPIO_PIN_RESET);
 80008bc:	2200      	movs	r2, #0
 80008be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008c2:	483d      	ldr	r0, [pc, #244]	; (80009b8 <_Z8TestTaskPKv+0x140>)
 80008c4:	f001 fcba 	bl	800223c <HAL_GPIO_WritePin>
			osDelay(4);
 80008c8:	2004      	movs	r0, #4
 80008ca:	f006 faf0 	bl	8006eae <osDelay>
			HAL_GPIO_WritePin(RST_ASIC_GPIO_Port, RST_ASIC_Pin, GPIO_PIN_SET);
 80008ce:	2201      	movs	r2, #1
 80008d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008d4:	4838      	ldr	r0, [pc, #224]	; (80009b8 <_Z8TestTaskPKv+0x140>)
 80008d6:	f001 fcb1 	bl	800223c <HAL_GPIO_WritePin>
			osDelay(1200);
 80008da:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80008de:	f006 fae6 	bl	8006eae <osDelay>

			//цикл опроса
			while (start) {
 80008e2:	4b36      	ldr	r3, [pc, #216]	; (80009bc <_Z8TestTaskPKv+0x144>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d0dd      	beq.n	80008a6 <_Z8TestTaskPKv+0x2e>

				//сброс асиков
				HAL_GPIO_WritePin(RST_ASIC_GPIO_Port, RST_ASIC_Pin, GPIO_PIN_RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008f0:	4831      	ldr	r0, [pc, #196]	; (80009b8 <_Z8TestTaskPKv+0x140>)
 80008f2:	f001 fca3 	bl	800223c <HAL_GPIO_WritePin>
				osDelay(500);
 80008f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008fa:	f006 fad8 	bl	8006eae <osDelay>
				HAL_GPIO_WritePin(RST_ASIC_GPIO_Port, RST_ASIC_Pin, GPIO_PIN_SET);
 80008fe:	2201      	movs	r2, #1
 8000900:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000904:	482c      	ldr	r0, [pc, #176]	; (80009b8 <_Z8TestTaskPKv+0x140>)
 8000906:	f001 fc99 	bl	800223c <HAL_GPIO_WritePin>
				osDelay(500);
 800090a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800090e:	f006 face 	bl	8006eae <osDelay>

				status_uart = HAL_UART_Receive_IT(&huart6, readASIC, 1);
 8000912:	2201      	movs	r2, #1
 8000914:	492c      	ldr	r1, [pc, #176]	; (80009c8 <_Z8TestTaskPKv+0x150>)
 8000916:	482d      	ldr	r0, [pc, #180]	; (80009cc <_Z8TestTaskPKv+0x154>)
 8000918:	f005 fad3 	bl	8005ec2 <HAL_UART_Receive_IT>
 800091c:	4603      	mov	r3, r0
 800091e:	461a      	mov	r2, r3
 8000920:	4b2b      	ldr	r3, [pc, #172]	; (80009d0 <_Z8TestTaskPKv+0x158>)
 8000922:	701a      	strb	r2, [r3, #0]
				status_uart = HAL_UART_Transmit(&huart1, cmdASIC, 7, 20);
 8000924:	f107 010c 	add.w	r1, r7, #12
 8000928:	2314      	movs	r3, #20
 800092a:	2207      	movs	r2, #7
 800092c:	4829      	ldr	r0, [pc, #164]	; (80009d4 <_Z8TestTaskPKv+0x15c>)
 800092e:	f005 fa36 	bl	8005d9e <HAL_UART_Transmit>
 8000932:	4603      	mov	r3, r0
 8000934:	461a      	mov	r2, r3
 8000936:	4b26      	ldr	r3, [pc, #152]	; (80009d0 <_Z8TestTaskPKv+0x158>)
 8000938:	701a      	strb	r2, [r3, #0]

				//запускаем таймер
				status_uartTIM = 1;
 800093a:	4b27      	ldr	r3, [pc, #156]	; (80009d8 <_Z8TestTaskPKv+0x160>)
 800093c:	2201      	movs	r2, #1
 800093e:	701a      	strb	r2, [r3, #0]
				// ожидать таймаута по уарту
				while(uartTIM < timeOutUART){
 8000940:	4b26      	ldr	r3, [pc, #152]	; (80009dc <_Z8TestTaskPKv+0x164>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	69fa      	ldr	r2, [r7, #28]
 8000946:	429a      	cmp	r2, r3
 8000948:	d903      	bls.n	8000952 <_Z8TestTaskPKv+0xda>
					osDelay(1);
 800094a:	2001      	movs	r0, #1
 800094c:	f006 faaf 	bl	8006eae <osDelay>
				while(uartTIM < timeOutUART){
 8000950:	e7f6      	b.n	8000940 <_Z8TestTaskPKv+0xc8>
				}
				uartTIM = 0;
 8000952:	4b22      	ldr	r3, [pc, #136]	; (80009dc <_Z8TestTaskPKv+0x164>)
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
				status_uartTIM = 0;
 8000958:	4b1f      	ldr	r3, [pc, #124]	; (80009d8 <_Z8TestTaskPKv+0x160>)
 800095a:	2200      	movs	r2, #0
 800095c:	701a      	strb	r2, [r3, #0]

				// все данные пришли отключаем уарт
				HAL_UART_AbortReceive(&huart6);
 800095e:	481b      	ldr	r0, [pc, #108]	; (80009cc <_Z8TestTaskPKv+0x154>)
 8000960:	f005 fadf 	bl	8005f22 <HAL_UART_AbortReceive>

				//проверить пришедшие данные сравненией с шаблоном

				//посчитать количесво асиков

				pre_count_ASIC = counter_bytes / 9;
 8000964:	4b17      	ldr	r3, [pc, #92]	; (80009c4 <_Z8TestTaskPKv+0x14c>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a1d      	ldr	r2, [pc, #116]	; (80009e0 <_Z8TestTaskPKv+0x168>)
 800096a:	fba2 2303 	umull	r2, r3, r2, r3
 800096e:	085b      	lsrs	r3, r3, #1
 8000970:	4a1c      	ldr	r2, [pc, #112]	; (80009e4 <_Z8TestTaskPKv+0x16c>)
 8000972:	6013      	str	r3, [r2, #0]
				itoa(pre_count_ASIC, (char*)snum, 10);
 8000974:	4b1b      	ldr	r3, [pc, #108]	; (80009e4 <_Z8TestTaskPKv+0x16c>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4618      	mov	r0, r3
 800097a:	f107 0314 	add.w	r3, r7, #20
 800097e:	220a      	movs	r2, #10
 8000980:	4619      	mov	r1, r3
 8000982:	f007 fcdf 	bl	8008344 <itoa>
				OLED_Clear();
 8000986:	f000 fdc2 	bl	800150e <_Z10OLED_Clearv>
				OLED_ShowString(0,0,snum,16);
 800098a:	f107 0214 	add.w	r2, r7, #20
 800098e:	2310      	movs	r3, #16
 8000990:	2100      	movs	r1, #0
 8000992:	2000      	movs	r0, #0
 8000994:	f000 fe8e 	bl	80016b4 <_Z15OLED_ShowStringhhPhh>

				counter_bytes = 0;
 8000998:	4b0a      	ldr	r3, [pc, #40]	; (80009c4 <_Z8TestTaskPKv+0x14c>)
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
				memset(readASIC, 0, sizeof readASIC);
 800099e:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80009a2:	2100      	movs	r1, #0
 80009a4:	4808      	ldr	r0, [pc, #32]	; (80009c8 <_Z8TestTaskPKv+0x150>)
 80009a6:	f007 fcd1 	bl	800834c <memset>

				osDelay(200);
 80009aa:	20c8      	movs	r0, #200	; 0xc8
 80009ac:	f006 fa7f 	bl	8006eae <osDelay>
			while (start) {
 80009b0:	e797      	b.n	80008e2 <_Z8TestTaskPKv+0x6a>
 80009b2:	bf00      	nop
 80009b4:	080085f8 	.word	0x080085f8
 80009b8:	40020000 	.word	0x40020000
 80009bc:	200002d4 	.word	0x200002d4
 80009c0:	200002d5 	.word	0x200002d5
 80009c4:	200000b4 	.word	0x200000b4
 80009c8:	200000b8 	.word	0x200000b8
 80009cc:	2000442c 	.word	0x2000442c
 80009d0:	200000ad 	.word	0x200000ad
 80009d4:	200043e8 	.word	0x200043e8
 80009d8:	2000059c 	.word	0x2000059c
 80009dc:	20000598 	.word	0x20000598
 80009e0:	38e38e39 	.word	0x38e38e39
 80009e4:	200000b0 	.word	0x200000b0

080009e8 <_Z7LCDTaskPKv>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_LCDTask */
void LCDTask(void const * argument)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b09c      	sub	sp, #112	; 0x70
 80009ec:	af02      	add	r7, sp, #8
 80009ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LCDTask */

	RV_BUTTON button1(B1_GPIO_Port, B1_Pin, LOW_PULL, NORM_OPEN);
 80009f0:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80009f4:	2300      	movs	r3, #0
 80009f6:	9300      	str	r3, [sp, #0]
 80009f8:	2301      	movs	r3, #1
 80009fa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80009fe:	4929      	ldr	r1, [pc, #164]	; (8000aa4 <_Z7LCDTaskPKv+0xbc>)
 8000a00:	f7ff fd62 	bl	80004c8 <_ZN9RV_BUTTONC1EP12GPIO_TypeDeftbb>
	RV_BUTTON button2(B2_GPIO_Port, B2_Pin, LOW_PULL, NORM_OPEN);
 8000a04:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000a08:	2300      	movs	r3, #0
 8000a0a:	9300      	str	r3, [sp, #0]
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a12:	4925      	ldr	r1, [pc, #148]	; (8000aa8 <_Z7LCDTaskPKv+0xc0>)
 8000a14:	f7ff fd58 	bl	80004c8 <_ZN9RV_BUTTONC1EP12GPIO_TypeDeftbb>
	RV_BUTTON button3(B3_GPIO_Port, B3_Pin, LOW_PULL, NORM_OPEN);
 8000a18:	f107 0014 	add.w	r0, r7, #20
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	9300      	str	r3, [sp, #0]
 8000a20:	2301      	movs	r3, #1
 8000a22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a26:	4920      	ldr	r1, [pc, #128]	; (8000aa8 <_Z7LCDTaskPKv+0xc0>)
 8000a28:	f7ff fd4e 	bl	80004c8 <_ZN9RV_BUTTONC1EP12GPIO_TypeDeftbb>

	uint8_t A[]="Старт";
 8000a2c:	4a1f      	ldr	r2, [pc, #124]	; (8000aac <_Z7LCDTaskPKv+0xc4>)
 8000a2e:	f107 0308 	add.w	r3, r7, #8
 8000a32:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a34:	c303      	stmia	r3!, {r0, r1}
 8000a36:	801a      	strh	r2, [r3, #0]
 8000a38:	3302      	adds	r3, #2
 8000a3a:	0c12      	lsrs	r2, r2, #16
 8000a3c:	701a      	strb	r2, [r3, #0]
	//нициализировать oled-экран
	OLED_Init();
 8000a3e:	f000 fd5d 	bl	80014fc <_Z9OLED_Initv>
	//Включите OLED-дисплей
	OLED_Display_On();
 8000a42:	f000 fd8d 	bl	8001560 <_Z15OLED_Display_Onv>
	//Очисти экран
	OLED_Clear();
 8000a46:	f000 fd62 	bl	800150e <_Z10OLED_Clearv>
//	OLED_ShowNum(10,10,10,8,8);
//	OLED_ShowChar(0, 0,'C',16);
	OLED_ShowString(0,0,A,16);
 8000a4a:	f107 0208 	add.w	r2, r7, #8
 8000a4e:	2310      	movs	r3, #16
 8000a50:	2100      	movs	r1, #0
 8000a52:	2000      	movs	r0, #0
 8000a54:	f000 fe2e 	bl	80016b4 <_Z15OLED_ShowStringhhPhh>
//	OLED_Clearrow(2);
//	OLED_Clearrow(3);

/* Infinite loop */
for (;;) {
	button1.tick();
 8000a58:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff fda2 	bl	80005a6 <_ZN9RV_BUTTON4tickEv>
	button2.tick();
 8000a62:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff fd9d 	bl	80005a6 <_ZN9RV_BUTTON4tickEv>
	button3.tick();
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff fd98 	bl	80005a6 <_ZN9RV_BUTTON4tickEv>

	if (button1.isClick() ){
 8000a76:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f7ff fd7a 	bl	8000574 <_ZN9RV_BUTTON7isClickEv>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d00a      	beq.n	8000a9c <_Z7LCDTaskPKv+0xb4>
		if (start == 0) {
 8000a86:	4b0a      	ldr	r3, [pc, #40]	; (8000ab0 <_Z7LCDTaskPKv+0xc8>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d103      	bne.n	8000a96 <_Z7LCDTaskPKv+0xae>
			start = 1;
 8000a8e:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <_Z7LCDTaskPKv+0xc8>)
 8000a90:	2201      	movs	r2, #1
 8000a92:	701a      	strb	r2, [r3, #0]
 8000a94:	e002      	b.n	8000a9c <_Z7LCDTaskPKv+0xb4>
		}else {
			start = 0;
 8000a96:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <_Z7LCDTaskPKv+0xc8>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	701a      	strb	r2, [r3, #0]
		}

	}

	osDelay(1);
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	f006 fa06 	bl	8006eae <osDelay>
	button1.tick();
 8000aa2:	e7d9      	b.n	8000a58 <_Z7LCDTaskPKv+0x70>
 8000aa4:	40020000 	.word	0x40020000
 8000aa8:	40020800 	.word	0x40020800
 8000aac:	08008600 	.word	0x08008600
 8000ab0:	200002d4 	.word	0x200002d4

08000ab4 <_Z8i2c_TaskPKv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_i2c_Task */
void i2c_Task(void const * argument)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b09a      	sub	sp, #104	; 0x68
 8000ab8:	af02      	add	r7, sp, #8
 8000aba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN i2c_Task */

	//команды i2c
	uint16_t addr = 0x20;
 8000abc:	2320      	movs	r3, #32
 8000abe:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	addr = addr<<1;
 8000ac2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8000ac6:	005b      	lsls	r3, r3, #1
 8000ac8:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

	GPIO_PinState plug = GPIO_PIN_RESET;
 8000acc:	2300      	movs	r3, #0
 8000ace:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59

	uint8_t cmdStart_1[6] = { 0x55, 0xAA, 0x04, 0x07, 0x00, 0x0B };
 8000ad2:	4ad0      	ldr	r2, [pc, #832]	; (8000e14 <_Z8i2c_TaskPKv+0x360>)
 8000ad4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000ad8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000adc:	6018      	str	r0, [r3, #0]
 8000ade:	3304      	adds	r3, #4
 8000ae0:	8019      	strh	r1, [r3, #0]
	uint8_t cmdRead_1[2] = { 0x00 };// 0x07 0x01
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	uint8_t cmdStart_2[6] = { 0x55, 0xAA, 0x04, 0x06, 0x00, 0x0A };
 8000ae8:	4acb      	ldr	r2, [pc, #812]	; (8000e18 <_Z8i2c_TaskPKv+0x364>)
 8000aea:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000aee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000af2:	6018      	str	r0, [r3, #0]
 8000af4:	3304      	adds	r3, #4
 8000af6:	8019      	strh	r1, [r3, #0]
	uint8_t cmdRead_2[2] = { 0x00 };// 0x06 0x01
 8000af8:	2300      	movs	r3, #0
 8000afa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

	uint8_t cmdStart_3[9] = { 0x55, 0xAA, 0x07, 0x10, 0x19, 0x00, 0x00, 0x00, 0x30 };
 8000afe:	4ac7      	ldr	r2, [pc, #796]	; (8000e1c <_Z8i2c_TaskPKv+0x368>)
 8000b00:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b04:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b06:	c303      	stmia	r3!, {r0, r1}
 8000b08:	701a      	strb	r2, [r3, #0]
	uint8_t cmdRead_3[2] = { 0x00 };// 0x10 0x01
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	863b      	strh	r3, [r7, #48]	; 0x30

	uint8_t cmdStart_4[7] = { 0x55, 0xAA, 0x05, 0x15, 0x01, 0x00, 0x1B };
 8000b0e:	4ac4      	ldr	r2, [pc, #784]	; (8000e20 <_Z8i2c_TaskPKv+0x36c>)
 8000b10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b18:	6018      	str	r0, [r3, #0]
 8000b1a:	3304      	adds	r3, #4
 8000b1c:	8019      	strh	r1, [r3, #0]
 8000b1e:	3302      	adds	r3, #2
 8000b20:	0c0a      	lsrs	r2, r1, #16
 8000b22:	701a      	strb	r2, [r3, #0]
	uint8_t cmdRead_4[2] = { 0x00 };// 0x15 0x01
 8000b24:	2300      	movs	r3, #0
 8000b26:	84bb      	strh	r3, [r7, #36]	; 0x24

	uint8_t cmdStop[7] = { 0x55, 0xAA, 0x05, 0x15, 0x00, 0x00, 0x1A };
 8000b28:	4abe      	ldr	r2, [pc, #760]	; (8000e24 <_Z8i2c_TaskPKv+0x370>)
 8000b2a:	f107 031c 	add.w	r3, r7, #28
 8000b2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b32:	6018      	str	r0, [r3, #0]
 8000b34:	3304      	adds	r3, #4
 8000b36:	8019      	strh	r1, [r3, #0]
 8000b38:	3302      	adds	r3, #2
 8000b3a:	0c0a      	lsrs	r2, r1, #16
 8000b3c:	701a      	strb	r2, [r3, #0]
	uint8_t cmdRead_stop[2] = { 0x00 };// 0x15 0x01
 8000b3e:	2300      	movs	r3, #0
 8000b40:	833b      	strh	r3, [r7, #24]

	uint8_t cmdRefresh[6] = { 0x55, 0xAA, 0x04, 0x16, 0x00, 0x1A };
 8000b42:	4ab9      	ldr	r2, [pc, #740]	; (8000e28 <_Z8i2c_TaskPKv+0x374>)
 8000b44:	f107 0310 	add.w	r3, r7, #16
 8000b48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b4c:	6018      	str	r0, [r3, #0]
 8000b4e:	3304      	adds	r3, #4
 8000b50:	8019      	strh	r1, [r3, #0]
	uint8_t cmdRead_Refresh[6] = { 0x00 };// 0x06 0x16 0x01 0x00 0x00 0x1D
 8000b52:	2300      	movs	r3, #0
 8000b54:	60bb      	str	r3, [r7, #8]
 8000b56:	2300      	movs	r3, #0
 8000b58:	81bb      	strh	r3, [r7, #12]


	HAL_GPIO_WritePin(A0_GPIO_Port, A0_Pin, GPIO_PIN_RESET);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2102      	movs	r1, #2
 8000b5e:	48b3      	ldr	r0, [pc, #716]	; (8000e2c <_Z8i2c_TaskPKv+0x378>)
 8000b60:	f001 fb6c 	bl	800223c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, GPIO_PIN_RESET);
 8000b64:	2200      	movs	r2, #0
 8000b66:	2101      	movs	r1, #1
 8000b68:	48b0      	ldr	r0, [pc, #704]	; (8000e2c <_Z8i2c_TaskPKv+0x378>)
 8000b6a:	f001 fb67 	bl	800223c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, GPIO_PIN_RESET);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2104      	movs	r1, #4
 8000b72:	48ae      	ldr	r0, [pc, #696]	; (8000e2c <_Z8i2c_TaskPKv+0x378>)
 8000b74:	f001 fb62 	bl	800223c <HAL_GPIO_WritePin>


	plug = HAL_GPIO_ReadPin(PLUG_GPIO_Port, PLUG_Pin);
 8000b78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b7c:	48ac      	ldr	r0, [pc, #688]	; (8000e30 <_Z8i2c_TaskPKv+0x37c>)
 8000b7e:	f001 fb45 	bl	800220c <HAL_GPIO_ReadPin>
 8000b82:	4603      	mov	r3, r0
 8000b84:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59

  /* Infinite loop */
  for(;;)
  {

	  if (start && plug) {
 8000b88:	4baa      	ldr	r3, [pc, #680]	; (8000e34 <_Z8i2c_TaskPKv+0x380>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d0fb      	beq.n	8000b88 <_Z8i2c_TaskPKv+0xd4>
 8000b90:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d0f7      	beq.n	8000b88 <_Z8i2c_TaskPKv+0xd4>
					status_i2c = HAL_I2C_Master_Transmit(&hi2c1, addr, cmdStart_1, 6, 20);
 8000b98:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000b9c:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000ba0:	2314      	movs	r3, #20
 8000ba2:	9300      	str	r3, [sp, #0]
 8000ba4:	2306      	movs	r3, #6
 8000ba6:	48a4      	ldr	r0, [pc, #656]	; (8000e38 <_Z8i2c_TaskPKv+0x384>)
 8000ba8:	f001 fca6 	bl	80024f8 <HAL_I2C_Master_Transmit>
 8000bac:	4603      	mov	r3, r0
 8000bae:	461a      	mov	r2, r3
 8000bb0:	4ba2      	ldr	r3, [pc, #648]	; (8000e3c <_Z8i2c_TaskPKv+0x388>)
 8000bb2:	701a      	strb	r2, [r3, #0]
					osDelay(200);
 8000bb4:	20c8      	movs	r0, #200	; 0xc8
 8000bb6:	f006 f97a 	bl	8006eae <osDelay>
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_1[0], 1, 20);
 8000bba:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8000bbe:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000bc2:	2314      	movs	r3, #20
 8000bc4:	9300      	str	r3, [sp, #0]
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	489b      	ldr	r0, [pc, #620]	; (8000e38 <_Z8i2c_TaskPKv+0x384>)
 8000bca:	f001 fd93 	bl	80026f4 <HAL_I2C_Master_Receive>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	4b9a      	ldr	r3, [pc, #616]	; (8000e3c <_Z8i2c_TaskPKv+0x388>)
 8000bd4:	701a      	strb	r2, [r3, #0]
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_1[1], 1, 20);
 8000bd6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000bda:	1c5a      	adds	r2, r3, #1
 8000bdc:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000be0:	2314      	movs	r3, #20
 8000be2:	9300      	str	r3, [sp, #0]
 8000be4:	2301      	movs	r3, #1
 8000be6:	4894      	ldr	r0, [pc, #592]	; (8000e38 <_Z8i2c_TaskPKv+0x384>)
 8000be8:	f001 fd84 	bl	80026f4 <HAL_I2C_Master_Receive>
 8000bec:	4603      	mov	r3, r0
 8000bee:	461a      	mov	r2, r3
 8000bf0:	4b92      	ldr	r3, [pc, #584]	; (8000e3c <_Z8i2c_TaskPKv+0x388>)
 8000bf2:	701a      	strb	r2, [r3, #0]
					osDelay(300);
 8000bf4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000bf8:	f006 f959 	bl	8006eae <osDelay>

					status_i2c = HAL_I2C_Master_Transmit(&hi2c1, addr, cmdStart_2, 6, 20);
 8000bfc:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000c00:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000c04:	2314      	movs	r3, #20
 8000c06:	9300      	str	r3, [sp, #0]
 8000c08:	2306      	movs	r3, #6
 8000c0a:	488b      	ldr	r0, [pc, #556]	; (8000e38 <_Z8i2c_TaskPKv+0x384>)
 8000c0c:	f001 fc74 	bl	80024f8 <HAL_I2C_Master_Transmit>
 8000c10:	4603      	mov	r3, r0
 8000c12:	461a      	mov	r2, r3
 8000c14:	4b89      	ldr	r3, [pc, #548]	; (8000e3c <_Z8i2c_TaskPKv+0x388>)
 8000c16:	701a      	strb	r2, [r3, #0]
					osDelay(200);
 8000c18:	20c8      	movs	r0, #200	; 0xc8
 8000c1a:	f006 f948 	bl	8006eae <osDelay>
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_2[0], 1, 20);
 8000c1e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000c22:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000c26:	2314      	movs	r3, #20
 8000c28:	9300      	str	r3, [sp, #0]
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	4882      	ldr	r0, [pc, #520]	; (8000e38 <_Z8i2c_TaskPKv+0x384>)
 8000c2e:	f001 fd61 	bl	80026f4 <HAL_I2C_Master_Receive>
 8000c32:	4603      	mov	r3, r0
 8000c34:	461a      	mov	r2, r3
 8000c36:	4b81      	ldr	r3, [pc, #516]	; (8000e3c <_Z8i2c_TaskPKv+0x388>)
 8000c38:	701a      	strb	r2, [r3, #0]
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_2[1], 1, 20);
 8000c3a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c3e:	1c5a      	adds	r2, r3, #1
 8000c40:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000c44:	2314      	movs	r3, #20
 8000c46:	9300      	str	r3, [sp, #0]
 8000c48:	2301      	movs	r3, #1
 8000c4a:	487b      	ldr	r0, [pc, #492]	; (8000e38 <_Z8i2c_TaskPKv+0x384>)
 8000c4c:	f001 fd52 	bl	80026f4 <HAL_I2C_Master_Receive>
 8000c50:	4603      	mov	r3, r0
 8000c52:	461a      	mov	r2, r3
 8000c54:	4b79      	ldr	r3, [pc, #484]	; (8000e3c <_Z8i2c_TaskPKv+0x388>)
 8000c56:	701a      	strb	r2, [r3, #0]
					osDelay(1000);
 8000c58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c5c:	f006 f927 	bl	8006eae <osDelay>

					status_i2c = HAL_I2C_Master_Transmit(&hi2c1, addr, cmdStart_3, 9, 20);
 8000c60:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000c64:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000c68:	2314      	movs	r3, #20
 8000c6a:	9300      	str	r3, [sp, #0]
 8000c6c:	2309      	movs	r3, #9
 8000c6e:	4872      	ldr	r0, [pc, #456]	; (8000e38 <_Z8i2c_TaskPKv+0x384>)
 8000c70:	f001 fc42 	bl	80024f8 <HAL_I2C_Master_Transmit>
 8000c74:	4603      	mov	r3, r0
 8000c76:	461a      	mov	r2, r3
 8000c78:	4b70      	ldr	r3, [pc, #448]	; (8000e3c <_Z8i2c_TaskPKv+0x388>)
 8000c7a:	701a      	strb	r2, [r3, #0]
					osDelay(100);
 8000c7c:	2064      	movs	r0, #100	; 0x64
 8000c7e:	f006 f916 	bl	8006eae <osDelay>
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_3[0], 1, 20);
 8000c82:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000c86:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000c8a:	2314      	movs	r3, #20
 8000c8c:	9300      	str	r3, [sp, #0]
 8000c8e:	2301      	movs	r3, #1
 8000c90:	4869      	ldr	r0, [pc, #420]	; (8000e38 <_Z8i2c_TaskPKv+0x384>)
 8000c92:	f001 fd2f 	bl	80026f4 <HAL_I2C_Master_Receive>
 8000c96:	4603      	mov	r3, r0
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4b68      	ldr	r3, [pc, #416]	; (8000e3c <_Z8i2c_TaskPKv+0x388>)
 8000c9c:	701a      	strb	r2, [r3, #0]
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_3[1], 1, 20);
 8000c9e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ca2:	1c5a      	adds	r2, r3, #1
 8000ca4:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000ca8:	2314      	movs	r3, #20
 8000caa:	9300      	str	r3, [sp, #0]
 8000cac:	2301      	movs	r3, #1
 8000cae:	4862      	ldr	r0, [pc, #392]	; (8000e38 <_Z8i2c_TaskPKv+0x384>)
 8000cb0:	f001 fd20 	bl	80026f4 <HAL_I2C_Master_Receive>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	4b60      	ldr	r3, [pc, #384]	; (8000e3c <_Z8i2c_TaskPKv+0x388>)
 8000cba:	701a      	strb	r2, [r3, #0]
					osDelay(1000);
 8000cbc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cc0:	f006 f8f5 	bl	8006eae <osDelay>

					status_i2c = HAL_I2C_Master_Transmit(&hi2c1, addr, cmdStart_4, 7, 20);
 8000cc4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000cc8:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000ccc:	2314      	movs	r3, #20
 8000cce:	9300      	str	r3, [sp, #0]
 8000cd0:	2307      	movs	r3, #7
 8000cd2:	4859      	ldr	r0, [pc, #356]	; (8000e38 <_Z8i2c_TaskPKv+0x384>)
 8000cd4:	f001 fc10 	bl	80024f8 <HAL_I2C_Master_Transmit>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	461a      	mov	r2, r3
 8000cdc:	4b57      	ldr	r3, [pc, #348]	; (8000e3c <_Z8i2c_TaskPKv+0x388>)
 8000cde:	701a      	strb	r2, [r3, #0]
					osDelay(710);
 8000ce0:	f240 20c6 	movw	r0, #710	; 0x2c6
 8000ce4:	f006 f8e3 	bl	8006eae <osDelay>
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_4[0], 1, 20);
 8000ce8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000cec:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000cf0:	2314      	movs	r3, #20
 8000cf2:	9300      	str	r3, [sp, #0]
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	4850      	ldr	r0, [pc, #320]	; (8000e38 <_Z8i2c_TaskPKv+0x384>)
 8000cf8:	f001 fcfc 	bl	80026f4 <HAL_I2C_Master_Receive>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	461a      	mov	r2, r3
 8000d00:	4b4e      	ldr	r3, [pc, #312]	; (8000e3c <_Z8i2c_TaskPKv+0x388>)
 8000d02:	701a      	strb	r2, [r3, #0]
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_4[1], 1, 20);
 8000d04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d08:	1c5a      	adds	r2, r3, #1
 8000d0a:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000d0e:	2314      	movs	r3, #20
 8000d10:	9300      	str	r3, [sp, #0]
 8000d12:	2301      	movs	r3, #1
 8000d14:	4848      	ldr	r0, [pc, #288]	; (8000e38 <_Z8i2c_TaskPKv+0x384>)
 8000d16:	f001 fced 	bl	80026f4 <HAL_I2C_Master_Receive>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	4b47      	ldr	r3, [pc, #284]	; (8000e3c <_Z8i2c_TaskPKv+0x388>)
 8000d20:	701a      	strb	r2, [r3, #0]


					osDelay(1000);
 8000d22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d26:	f006 f8c2 	bl	8006eae <osDelay>
					//выдать флаг готовности питания
					ready = 1;
 8000d2a:	4b45      	ldr	r3, [pc, #276]	; (8000e40 <_Z8i2c_TaskPKv+0x38c>)
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	701a      	strb	r2, [r3, #0]

					osDelay(3000);
 8000d30:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000d34:	f006 f8bb 	bl	8006eae <osDelay>
					//обновляем пик
					status_i2c = HAL_I2C_Master_Transmit(&hi2c1, addr, cmdRefresh, 6, 20);
 8000d38:	f107 0210 	add.w	r2, r7, #16
 8000d3c:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000d40:	2314      	movs	r3, #20
 8000d42:	9300      	str	r3, [sp, #0]
 8000d44:	2306      	movs	r3, #6
 8000d46:	483c      	ldr	r0, [pc, #240]	; (8000e38 <_Z8i2c_TaskPKv+0x384>)
 8000d48:	f001 fbd6 	bl	80024f8 <HAL_I2C_Master_Transmit>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	461a      	mov	r2, r3
 8000d50:	4b3a      	ldr	r3, [pc, #232]	; (8000e3c <_Z8i2c_TaskPKv+0x388>)
 8000d52:	701a      	strb	r2, [r3, #0]
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, cmdRead_Refresh, 6, 20);
 8000d54:	f107 0208 	add.w	r2, r7, #8
 8000d58:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000d5c:	2314      	movs	r3, #20
 8000d5e:	9300      	str	r3, [sp, #0]
 8000d60:	2306      	movs	r3, #6
 8000d62:	4835      	ldr	r0, [pc, #212]	; (8000e38 <_Z8i2c_TaskPKv+0x384>)
 8000d64:	f001 fcc6 	bl	80026f4 <HAL_I2C_Master_Receive>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	4b33      	ldr	r3, [pc, #204]	; (8000e3c <_Z8i2c_TaskPKv+0x388>)
 8000d6e:	701a      	strb	r2, [r3, #0]

					// запустить цикл обновления до остановки пользователем
					while(start){
 8000d70:	4b30      	ldr	r3, [pc, #192]	; (8000e34 <_Z8i2c_TaskPKv+0x380>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	f000 809c 	beq.w	8000eb2 <_Z8i2c_TaskPKv+0x3fe>
							//обновляем пик
							status_i2c = HAL_I2C_Master_Transmit(&hi2c1, addr, cmdRefresh, 6, 20);
 8000d7a:	f107 0210 	add.w	r2, r7, #16
 8000d7e:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000d82:	2314      	movs	r3, #20
 8000d84:	9300      	str	r3, [sp, #0]
 8000d86:	2306      	movs	r3, #6
 8000d88:	482b      	ldr	r0, [pc, #172]	; (8000e38 <_Z8i2c_TaskPKv+0x384>)
 8000d8a:	f001 fbb5 	bl	80024f8 <HAL_I2C_Master_Transmit>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	461a      	mov	r2, r3
 8000d92:	4b2a      	ldr	r3, [pc, #168]	; (8000e3c <_Z8i2c_TaskPKv+0x388>)
 8000d94:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 8000d96:	200a      	movs	r0, #10
 8000d98:	f006 f889 	bl	8006eae <osDelay>
							status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_Refresh[0], 1, 20);
 8000d9c:	f107 0208 	add.w	r2, r7, #8
 8000da0:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000da4:	2314      	movs	r3, #20
 8000da6:	9300      	str	r3, [sp, #0]
 8000da8:	2301      	movs	r3, #1
 8000daa:	4823      	ldr	r0, [pc, #140]	; (8000e38 <_Z8i2c_TaskPKv+0x384>)
 8000dac:	f001 fca2 	bl	80026f4 <HAL_I2C_Master_Receive>
 8000db0:	4603      	mov	r3, r0
 8000db2:	461a      	mov	r2, r3
 8000db4:	4b21      	ldr	r3, [pc, #132]	; (8000e3c <_Z8i2c_TaskPKv+0x388>)
 8000db6:	701a      	strb	r2, [r3, #0]
							status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_Refresh[1], 1, 20);
 8000db8:	f107 0308 	add.w	r3, r7, #8
 8000dbc:	1c5a      	adds	r2, r3, #1
 8000dbe:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000dc2:	2314      	movs	r3, #20
 8000dc4:	9300      	str	r3, [sp, #0]
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	481b      	ldr	r0, [pc, #108]	; (8000e38 <_Z8i2c_TaskPKv+0x384>)
 8000dca:	f001 fc93 	bl	80026f4 <HAL_I2C_Master_Receive>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	4b1a      	ldr	r3, [pc, #104]	; (8000e3c <_Z8i2c_TaskPKv+0x388>)
 8000dd4:	701a      	strb	r2, [r3, #0]
							status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_Refresh[2], 1, 20);
 8000dd6:	f107 0308 	add.w	r3, r7, #8
 8000dda:	1c9a      	adds	r2, r3, #2
 8000ddc:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000de0:	2314      	movs	r3, #20
 8000de2:	9300      	str	r3, [sp, #0]
 8000de4:	2301      	movs	r3, #1
 8000de6:	4814      	ldr	r0, [pc, #80]	; (8000e38 <_Z8i2c_TaskPKv+0x384>)
 8000de8:	f001 fc84 	bl	80026f4 <HAL_I2C_Master_Receive>
 8000dec:	4603      	mov	r3, r0
 8000dee:	461a      	mov	r2, r3
 8000df0:	4b12      	ldr	r3, [pc, #72]	; (8000e3c <_Z8i2c_TaskPKv+0x388>)
 8000df2:	701a      	strb	r2, [r3, #0]
							status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_Refresh[3], 1, 20);
 8000df4:	f107 0308 	add.w	r3, r7, #8
 8000df8:	1cda      	adds	r2, r3, #3
 8000dfa:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000dfe:	2314      	movs	r3, #20
 8000e00:	9300      	str	r3, [sp, #0]
 8000e02:	2301      	movs	r3, #1
 8000e04:	480c      	ldr	r0, [pc, #48]	; (8000e38 <_Z8i2c_TaskPKv+0x384>)
 8000e06:	f001 fc75 	bl	80026f4 <HAL_I2C_Master_Receive>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <_Z8i2c_TaskPKv+0x388>)
 8000e10:	701a      	strb	r2, [r3, #0]
 8000e12:	e017      	b.n	8000e44 <_Z8i2c_TaskPKv+0x390>
 8000e14:	0800860c 	.word	0x0800860c
 8000e18:	08008614 	.word	0x08008614
 8000e1c:	0800861c 	.word	0x0800861c
 8000e20:	08008628 	.word	0x08008628
 8000e24:	08008630 	.word	0x08008630
 8000e28:	08008638 	.word	0x08008638
 8000e2c:	40020c00 	.word	0x40020c00
 8000e30:	40020800 	.word	0x40020800
 8000e34:	200002d4 	.word	0x200002d4
 8000e38:	2000434c 	.word	0x2000434c
 8000e3c:	200000ac 	.word	0x200000ac
 8000e40:	200002d5 	.word	0x200002d5
							status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_Refresh[4], 1, 20);
 8000e44:	f107 0308 	add.w	r3, r7, #8
 8000e48:	1d1a      	adds	r2, r3, #4
 8000e4a:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000e4e:	2314      	movs	r3, #20
 8000e50:	9300      	str	r3, [sp, #0]
 8000e52:	2301      	movs	r3, #1
 8000e54:	4830      	ldr	r0, [pc, #192]	; (8000f18 <_Z8i2c_TaskPKv+0x464>)
 8000e56:	f001 fc4d 	bl	80026f4 <HAL_I2C_Master_Receive>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	4b2f      	ldr	r3, [pc, #188]	; (8000f1c <_Z8i2c_TaskPKv+0x468>)
 8000e60:	701a      	strb	r2, [r3, #0]
							status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_Refresh[5], 1, 20);
 8000e62:	f107 0308 	add.w	r3, r7, #8
 8000e66:	1d5a      	adds	r2, r3, #5
 8000e68:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000e6c:	2314      	movs	r3, #20
 8000e6e:	9300      	str	r3, [sp, #0]
 8000e70:	2301      	movs	r3, #1
 8000e72:	4829      	ldr	r0, [pc, #164]	; (8000f18 <_Z8i2c_TaskPKv+0x464>)
 8000e74:	f001 fc3e 	bl	80026f4 <HAL_I2C_Master_Receive>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	4b27      	ldr	r3, [pc, #156]	; (8000f1c <_Z8i2c_TaskPKv+0x468>)
 8000e7e:	701a      	strb	r2, [r3, #0]

							for (int var = 0; var < 10000; ++var) {
 8000e80:	2300      	movs	r3, #0
 8000e82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000e84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e86:	f242 720f 	movw	r2, #9999	; 0x270f
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	dc0b      	bgt.n	8000ea6 <_Z8i2c_TaskPKv+0x3f2>
								if(!start){
 8000e8e:	4b24      	ldr	r3, [pc, #144]	; (8000f20 <_Z8i2c_TaskPKv+0x46c>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d006      	beq.n	8000ea4 <_Z8i2c_TaskPKv+0x3f0>
									break;
								}
								osDelay(1);
 8000e96:	2001      	movs	r0, #1
 8000e98:	f006 f809 	bl	8006eae <osDelay>
							for (int var = 0; var < 10000; ++var) {
 8000e9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000ea2:	e7ef      	b.n	8000e84 <_Z8i2c_TaskPKv+0x3d0>
									break;
 8000ea4:	bf00      	nop
							}

							if(!start){
 8000ea6:	4b1e      	ldr	r3, [pc, #120]	; (8000f20 <_Z8i2c_TaskPKv+0x46c>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d000      	beq.n	8000eb0 <_Z8i2c_TaskPKv+0x3fc>
					while(start){
 8000eae:	e75f      	b.n	8000d70 <_Z8i2c_TaskPKv+0x2bc>
									break;
 8000eb0:	bf00      	nop
							}

					}

					// выключение питания
					status_i2c = HAL_I2C_Master_Transmit(&hi2c1, addr, cmdStop, 7, 20);
 8000eb2:	f107 021c 	add.w	r2, r7, #28
 8000eb6:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000eba:	2314      	movs	r3, #20
 8000ebc:	9300      	str	r3, [sp, #0]
 8000ebe:	2307      	movs	r3, #7
 8000ec0:	4815      	ldr	r0, [pc, #84]	; (8000f18 <_Z8i2c_TaskPKv+0x464>)
 8000ec2:	f001 fb19 	bl	80024f8 <HAL_I2C_Master_Transmit>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	461a      	mov	r2, r3
 8000eca:	4b14      	ldr	r3, [pc, #80]	; (8000f1c <_Z8i2c_TaskPKv+0x468>)
 8000ecc:	701a      	strb	r2, [r3, #0]
					osDelay(20);
 8000ece:	2014      	movs	r0, #20
 8000ed0:	f005 ffed 	bl	8006eae <osDelay>
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_stop[0], 1, 20);
 8000ed4:	f107 0218 	add.w	r2, r7, #24
 8000ed8:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000edc:	2314      	movs	r3, #20
 8000ede:	9300      	str	r3, [sp, #0]
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	480d      	ldr	r0, [pc, #52]	; (8000f18 <_Z8i2c_TaskPKv+0x464>)
 8000ee4:	f001 fc06 	bl	80026f4 <HAL_I2C_Master_Receive>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	461a      	mov	r2, r3
 8000eec:	4b0b      	ldr	r3, [pc, #44]	; (8000f1c <_Z8i2c_TaskPKv+0x468>)
 8000eee:	701a      	strb	r2, [r3, #0]
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_stop[1], 1, 20);
 8000ef0:	f107 0318 	add.w	r3, r7, #24
 8000ef4:	1c5a      	adds	r2, r3, #1
 8000ef6:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000efa:	2314      	movs	r3, #20
 8000efc:	9300      	str	r3, [sp, #0]
 8000efe:	2301      	movs	r3, #1
 8000f00:	4805      	ldr	r0, [pc, #20]	; (8000f18 <_Z8i2c_TaskPKv+0x464>)
 8000f02:	f001 fbf7 	bl	80026f4 <HAL_I2C_Master_Receive>
 8000f06:	4603      	mov	r3, r0
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4b04      	ldr	r3, [pc, #16]	; (8000f1c <_Z8i2c_TaskPKv+0x468>)
 8000f0c:	701a      	strb	r2, [r3, #0]
					//выдать флаг отключения питания
					ready = 0;
 8000f0e:	4b05      	ldr	r3, [pc, #20]	; (8000f24 <_Z8i2c_TaskPKv+0x470>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	701a      	strb	r2, [r3, #0]
	  }

  }
 8000f14:	e638      	b.n	8000b88 <_Z8i2c_TaskPKv+0xd4>
 8000f16:	bf00      	nop
 8000f18:	2000434c 	.word	0x2000434c
 8000f1c:	200000ac 	.word	0x200000ac
 8000f20:	200002d4 	.word	0x200002d4
 8000f24:	200002d5 	.word	0x200002d5

08000f28 <HAL_UART_RxCpltCallback>:
  /* USER CODE END i2c_Task */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]

	status_uart = HAL_UART_Receive_IT(&huart6, &readASIC[counter_bytes], 1);
 8000f30:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <HAL_UART_RxCpltCallback+0x3c>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a0c      	ldr	r2, [pc, #48]	; (8000f68 <HAL_UART_RxCpltCallback+0x40>)
 8000f36:	4413      	add	r3, r2
 8000f38:	2201      	movs	r2, #1
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	480b      	ldr	r0, [pc, #44]	; (8000f6c <HAL_UART_RxCpltCallback+0x44>)
 8000f3e:	f004 ffc0 	bl	8005ec2 <HAL_UART_Receive_IT>
 8000f42:	4603      	mov	r3, r0
 8000f44:	461a      	mov	r2, r3
 8000f46:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <HAL_UART_RxCpltCallback+0x48>)
 8000f48:	701a      	strb	r2, [r3, #0]
	counter_bytes++;
 8000f4a:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <HAL_UART_RxCpltCallback+0x3c>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	4a04      	ldr	r2, [pc, #16]	; (8000f64 <HAL_UART_RxCpltCallback+0x3c>)
 8000f52:	6013      	str	r3, [r2, #0]
	uartTIM = 0; //сбрасываем таймер до тех пор пока не придут все данные
 8000f54:	4b07      	ldr	r3, [pc, #28]	; (8000f74 <HAL_UART_RxCpltCallback+0x4c>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	200000b4 	.word	0x200000b4
 8000f68:	200000b8 	.word	0x200000b8
 8000f6c:	2000442c 	.word	0x2000442c
 8000f70:	200000ad 	.word	0x200000ad
 8000f74:	20000598 	.word	0x20000598

08000f78 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08a      	sub	sp, #40	; 0x28
 8000f7c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7e:	f107 0314 	add.w	r3, r7, #20
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]
 8000f8a:	60da      	str	r2, [r3, #12]
 8000f8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	613b      	str	r3, [r7, #16]
 8000f92:	4b4b      	ldr	r3, [pc, #300]	; (80010c0 <MX_GPIO_Init+0x148>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	4a4a      	ldr	r2, [pc, #296]	; (80010c0 <MX_GPIO_Init+0x148>)
 8000f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9e:	4b48      	ldr	r3, [pc, #288]	; (80010c0 <MX_GPIO_Init+0x148>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fa6:	613b      	str	r3, [r7, #16]
 8000fa8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	4b44      	ldr	r3, [pc, #272]	; (80010c0 <MX_GPIO_Init+0x148>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a43      	ldr	r2, [pc, #268]	; (80010c0 <MX_GPIO_Init+0x148>)
 8000fb4:	f043 0304 	orr.w	r3, r3, #4
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b41      	ldr	r3, [pc, #260]	; (80010c0 <MX_GPIO_Init+0x148>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0304 	and.w	r3, r3, #4
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60bb      	str	r3, [r7, #8]
 8000fca:	4b3d      	ldr	r3, [pc, #244]	; (80010c0 <MX_GPIO_Init+0x148>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	4a3c      	ldr	r2, [pc, #240]	; (80010c0 <MX_GPIO_Init+0x148>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd6:	4b3a      	ldr	r3, [pc, #232]	; (80010c0 <MX_GPIO_Init+0x148>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	60bb      	str	r3, [r7, #8]
 8000fe0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	607b      	str	r3, [r7, #4]
 8000fe6:	4b36      	ldr	r3, [pc, #216]	; (80010c0 <MX_GPIO_Init+0x148>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	4a35      	ldr	r2, [pc, #212]	; (80010c0 <MX_GPIO_Init+0x148>)
 8000fec:	f043 0308 	orr.w	r3, r3, #8
 8000ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff2:	4b33      	ldr	r3, [pc, #204]	; (80010c0 <MX_GPIO_Init+0x148>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	f003 0308 	and.w	r3, r3, #8
 8000ffa:	607b      	str	r3, [r7, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	603b      	str	r3, [r7, #0]
 8001002:	4b2f      	ldr	r3, [pc, #188]	; (80010c0 <MX_GPIO_Init+0x148>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	4a2e      	ldr	r2, [pc, #184]	; (80010c0 <MX_GPIO_Init+0x148>)
 8001008:	f043 0302 	orr.w	r3, r3, #2
 800100c:	6313      	str	r3, [r2, #48]	; 0x30
 800100e:	4b2c      	ldr	r3, [pc, #176]	; (80010c0 <MX_GPIO_Init+0x148>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	603b      	str	r3, [r7, #0]
 8001018:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_ASIC_GPIO_Port, RST_ASIC_Pin, GPIO_PIN_SET);
 800101a:	2201      	movs	r2, #1
 800101c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001020:	4828      	ldr	r0, [pc, #160]	; (80010c4 <MX_GPIO_Init+0x14c>)
 8001022:	f001 f90b 	bl	800223c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, A1_Pin|A0_Pin|A2_Pin, GPIO_PIN_SET);
 8001026:	2201      	movs	r2, #1
 8001028:	2107      	movs	r1, #7
 800102a:	4827      	ldr	r0, [pc, #156]	; (80010c8 <MX_GPIO_Init+0x150>)
 800102c:	f001 f906 	bl	800223c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RST_ASIC_Pin;
 8001030:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001034:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001036:	2301      	movs	r3, #1
 8001038:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103e:	2300      	movs	r3, #0
 8001040:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RST_ASIC_GPIO_Port, &GPIO_InitStruct);
 8001042:	f107 0314 	add.w	r3, r7, #20
 8001046:	4619      	mov	r1, r3
 8001048:	481e      	ldr	r0, [pc, #120]	; (80010c4 <MX_GPIO_Init+0x14c>)
 800104a:	f000 ff43 	bl	8001ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800104e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001052:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001054:	2300      	movs	r3, #0
 8001056:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001058:	2301      	movs	r3, #1
 800105a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800105c:	f107 0314 	add.w	r3, r7, #20
 8001060:	4619      	mov	r1, r3
 8001062:	4818      	ldr	r0, [pc, #96]	; (80010c4 <MX_GPIO_Init+0x14c>)
 8001064:	f000 ff36 	bl	8001ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8001068:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800106c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800106e:	2300      	movs	r3, #0
 8001070:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001072:	2301      	movs	r3, #1
 8001074:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	4619      	mov	r1, r3
 800107c:	4813      	ldr	r0, [pc, #76]	; (80010cc <MX_GPIO_Init+0x154>)
 800107e:	f000 ff29 	bl	8001ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PLUG_Pin;
 8001082:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001086:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001088:	2300      	movs	r3, #0
 800108a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PLUG_GPIO_Port, &GPIO_InitStruct);
 8001090:	f107 0314 	add.w	r3, r7, #20
 8001094:	4619      	mov	r1, r3
 8001096:	480d      	ldr	r0, [pc, #52]	; (80010cc <MX_GPIO_Init+0x154>)
 8001098:	f000 ff1c 	bl	8001ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = A1_Pin|A0_Pin|A2_Pin;
 800109c:	2307      	movs	r3, #7
 800109e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a0:	2301      	movs	r3, #1
 80010a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a8:	2300      	movs	r3, #0
 80010aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	4619      	mov	r1, r3
 80010b2:	4805      	ldr	r0, [pc, #20]	; (80010c8 <MX_GPIO_Init+0x150>)
 80010b4:	f000 ff0e 	bl	8001ed4 <HAL_GPIO_Init>

}
 80010b8:	bf00      	nop
 80010ba:	3728      	adds	r7, #40	; 0x28
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40023800 	.word	0x40023800
 80010c4:	40020000 	.word	0x40020000
 80010c8:	40020c00 	.word	0x40020c00
 80010cc:	40020800 	.word	0x40020800

080010d0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010d4:	4b13      	ldr	r3, [pc, #76]	; (8001124 <MX_I2C1_Init+0x54>)
 80010d6:	4a14      	ldr	r2, [pc, #80]	; (8001128 <MX_I2C1_Init+0x58>)
 80010d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 35000;
 80010da:	4b12      	ldr	r3, [pc, #72]	; (8001124 <MX_I2C1_Init+0x54>)
 80010dc:	f648 02b8 	movw	r2, #35000	; 0x88b8
 80010e0:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010e2:	4b10      	ldr	r3, [pc, #64]	; (8001124 <MX_I2C1_Init+0x54>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010e8:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <MX_I2C1_Init+0x54>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010ee:	4b0d      	ldr	r3, [pc, #52]	; (8001124 <MX_I2C1_Init+0x54>)
 80010f0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010f6:	4b0b      	ldr	r3, [pc, #44]	; (8001124 <MX_I2C1_Init+0x54>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010fc:	4b09      	ldr	r3, [pc, #36]	; (8001124 <MX_I2C1_Init+0x54>)
 80010fe:	2200      	movs	r2, #0
 8001100:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001102:	4b08      	ldr	r3, [pc, #32]	; (8001124 <MX_I2C1_Init+0x54>)
 8001104:	2200      	movs	r2, #0
 8001106:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001108:	4b06      	ldr	r3, [pc, #24]	; (8001124 <MX_I2C1_Init+0x54>)
 800110a:	2200      	movs	r2, #0
 800110c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800110e:	4805      	ldr	r0, [pc, #20]	; (8001124 <MX_I2C1_Init+0x54>)
 8001110:	f001 f8ae 	bl	8002270 <HAL_I2C_Init>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 800111a:	f000 f993 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	2000434c 	.word	0x2000434c
 8001128:	40005400 	.word	0x40005400

0800112c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001130:	4b12      	ldr	r3, [pc, #72]	; (800117c <MX_I2C3_Init+0x50>)
 8001132:	4a13      	ldr	r2, [pc, #76]	; (8001180 <MX_I2C3_Init+0x54>)
 8001134:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001136:	4b11      	ldr	r3, [pc, #68]	; (800117c <MX_I2C3_Init+0x50>)
 8001138:	4a12      	ldr	r2, [pc, #72]	; (8001184 <MX_I2C3_Init+0x58>)
 800113a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800113c:	4b0f      	ldr	r3, [pc, #60]	; (800117c <MX_I2C3_Init+0x50>)
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001142:	4b0e      	ldr	r3, [pc, #56]	; (800117c <MX_I2C3_Init+0x50>)
 8001144:	2200      	movs	r2, #0
 8001146:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001148:	4b0c      	ldr	r3, [pc, #48]	; (800117c <MX_I2C3_Init+0x50>)
 800114a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800114e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001150:	4b0a      	ldr	r3, [pc, #40]	; (800117c <MX_I2C3_Init+0x50>)
 8001152:	2200      	movs	r2, #0
 8001154:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001156:	4b09      	ldr	r3, [pc, #36]	; (800117c <MX_I2C3_Init+0x50>)
 8001158:	2200      	movs	r2, #0
 800115a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800115c:	4b07      	ldr	r3, [pc, #28]	; (800117c <MX_I2C3_Init+0x50>)
 800115e:	2200      	movs	r2, #0
 8001160:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001162:	4b06      	ldr	r3, [pc, #24]	; (800117c <MX_I2C3_Init+0x50>)
 8001164:	2200      	movs	r2, #0
 8001166:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001168:	4804      	ldr	r0, [pc, #16]	; (800117c <MX_I2C3_Init+0x50>)
 800116a:	f001 f881 	bl	8002270 <HAL_I2C_Init>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001174:	f000 f966 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}
 800117c:	200042f8 	.word	0x200042f8
 8001180:	40005c00 	.word	0x40005c00
 8001184:	000186a0 	.word	0x000186a0

08001188 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08c      	sub	sp, #48	; 0x30
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 031c 	add.w	r3, r7, #28
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a4a      	ldr	r2, [pc, #296]	; (80012d0 <HAL_I2C_MspInit+0x148>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d12c      	bne.n	8001204 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	61bb      	str	r3, [r7, #24]
 80011ae:	4b49      	ldr	r3, [pc, #292]	; (80012d4 <HAL_I2C_MspInit+0x14c>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	4a48      	ldr	r2, [pc, #288]	; (80012d4 <HAL_I2C_MspInit+0x14c>)
 80011b4:	f043 0302 	orr.w	r3, r3, #2
 80011b8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ba:	4b46      	ldr	r3, [pc, #280]	; (80012d4 <HAL_I2C_MspInit+0x14c>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	61bb      	str	r3, [r7, #24]
 80011c4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011c6:	23c0      	movs	r3, #192	; 0xc0
 80011c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011ca:	2312      	movs	r3, #18
 80011cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d2:	2303      	movs	r3, #3
 80011d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011d6:	2304      	movs	r3, #4
 80011d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011da:	f107 031c 	add.w	r3, r7, #28
 80011de:	4619      	mov	r1, r3
 80011e0:	483d      	ldr	r0, [pc, #244]	; (80012d8 <HAL_I2C_MspInit+0x150>)
 80011e2:	f000 fe77 	bl	8001ed4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	617b      	str	r3, [r7, #20]
 80011ea:	4b3a      	ldr	r3, [pc, #232]	; (80012d4 <HAL_I2C_MspInit+0x14c>)
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	4a39      	ldr	r2, [pc, #228]	; (80012d4 <HAL_I2C_MspInit+0x14c>)
 80011f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011f4:	6413      	str	r3, [r2, #64]	; 0x40
 80011f6:	4b37      	ldr	r3, [pc, #220]	; (80012d4 <HAL_I2C_MspInit+0x14c>)
 80011f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011fe:	617b      	str	r3, [r7, #20]
 8001200:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001202:	e060      	b.n	80012c6 <HAL_I2C_MspInit+0x13e>
  else if(i2cHandle->Instance==I2C3)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a34      	ldr	r2, [pc, #208]	; (80012dc <HAL_I2C_MspInit+0x154>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d15b      	bne.n	80012c6 <HAL_I2C_MspInit+0x13e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	613b      	str	r3, [r7, #16]
 8001212:	4b30      	ldr	r3, [pc, #192]	; (80012d4 <HAL_I2C_MspInit+0x14c>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	4a2f      	ldr	r2, [pc, #188]	; (80012d4 <HAL_I2C_MspInit+0x14c>)
 8001218:	f043 0304 	orr.w	r3, r3, #4
 800121c:	6313      	str	r3, [r2, #48]	; 0x30
 800121e:	4b2d      	ldr	r3, [pc, #180]	; (80012d4 <HAL_I2C_MspInit+0x14c>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	f003 0304 	and.w	r3, r3, #4
 8001226:	613b      	str	r3, [r7, #16]
 8001228:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	60fb      	str	r3, [r7, #12]
 800122e:	4b29      	ldr	r3, [pc, #164]	; (80012d4 <HAL_I2C_MspInit+0x14c>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	4a28      	ldr	r2, [pc, #160]	; (80012d4 <HAL_I2C_MspInit+0x14c>)
 8001234:	f043 0301 	orr.w	r3, r3, #1
 8001238:	6313      	str	r3, [r2, #48]	; 0x30
 800123a:	4b26      	ldr	r3, [pc, #152]	; (80012d4 <HAL_I2C_MspInit+0x14c>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001246:	f44f 7300 	mov.w	r3, #512	; 0x200
 800124a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800124c:	2312      	movs	r3, #18
 800124e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001254:	2303      	movs	r3, #3
 8001256:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001258:	2304      	movs	r3, #4
 800125a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800125c:	f107 031c 	add.w	r3, r7, #28
 8001260:	4619      	mov	r1, r3
 8001262:	481f      	ldr	r0, [pc, #124]	; (80012e0 <HAL_I2C_MspInit+0x158>)
 8001264:	f000 fe36 	bl	8001ed4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001268:	f44f 7380 	mov.w	r3, #256	; 0x100
 800126c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800126e:	2312      	movs	r3, #18
 8001270:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001276:	2303      	movs	r3, #3
 8001278:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800127a:	2304      	movs	r3, #4
 800127c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127e:	f107 031c 	add.w	r3, r7, #28
 8001282:	4619      	mov	r1, r3
 8001284:	4817      	ldr	r0, [pc, #92]	; (80012e4 <HAL_I2C_MspInit+0x15c>)
 8001286:	f000 fe25 	bl	8001ed4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <HAL_I2C_MspInit+0x14c>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	4a10      	ldr	r2, [pc, #64]	; (80012d4 <HAL_I2C_MspInit+0x14c>)
 8001294:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001298:	6413      	str	r3, [r2, #64]	; 0x40
 800129a:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <HAL_I2C_MspInit+0x14c>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 5, 0);
 80012a6:	2200      	movs	r2, #0
 80012a8:	2105      	movs	r1, #5
 80012aa:	2048      	movs	r0, #72	; 0x48
 80012ac:	f000 fd3c 	bl	8001d28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80012b0:	2048      	movs	r0, #72	; 0x48
 80012b2:	f000 fd55 	bl	8001d60 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 5, 0);
 80012b6:	2200      	movs	r2, #0
 80012b8:	2105      	movs	r1, #5
 80012ba:	2049      	movs	r0, #73	; 0x49
 80012bc:	f000 fd34 	bl	8001d28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 80012c0:	2049      	movs	r0, #73	; 0x49
 80012c2:	f000 fd4d 	bl	8001d60 <HAL_NVIC_EnableIRQ>
}
 80012c6:	bf00      	nop
 80012c8:	3730      	adds	r7, #48	; 0x30
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40005400 	.word	0x40005400
 80012d4:	40023800 	.word	0x40023800
 80012d8:	40020400 	.word	0x40020400
 80012dc:	40005c00 	.word	0x40005c00
 80012e0:	40020800 	.word	0x40020800
 80012e4:	40020000 	.word	0x40020000

080012e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012ec:	f000 fbfe 	bl	8001aec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012f0:	f000 f810 	bl	8001314 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012f4:	f7ff fe40 	bl	8000f78 <MX_GPIO_Init>
  MX_I2C1_Init();
 80012f8:	f7ff feea 	bl	80010d0 <MX_I2C1_Init>
  MX_I2C3_Init();
 80012fc:	f7ff ff16 	bl	800112c <MX_I2C3_Init>
  MX_USART1_UART_Init();
 8001300:	f000 fae8 	bl	80018d4 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001304:	f000 fb10 	bl	8001928 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001308:	f7ff fa6c 	bl	80007e4 <_Z16MX_FREERTOS_Initv>
  /* Start scheduler */
  osKernelStart();
 800130c:	f005 fd7c 	bl	8006e08 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001310:	e7fe      	b.n	8001310 <main+0x28>
	...

08001314 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b094      	sub	sp, #80	; 0x50
 8001318:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800131a:	f107 0320 	add.w	r3, r7, #32
 800131e:	2230      	movs	r2, #48	; 0x30
 8001320:	2100      	movs	r1, #0
 8001322:	4618      	mov	r0, r3
 8001324:	f007 f812 	bl	800834c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001328:	f107 030c 	add.w	r3, r7, #12
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001338:	2300      	movs	r3, #0
 800133a:	60bb      	str	r3, [r7, #8]
 800133c:	4b2d      	ldr	r3, [pc, #180]	; (80013f4 <_Z18SystemClock_Configv+0xe0>)
 800133e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001340:	4a2c      	ldr	r2, [pc, #176]	; (80013f4 <_Z18SystemClock_Configv+0xe0>)
 8001342:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001346:	6413      	str	r3, [r2, #64]	; 0x40
 8001348:	4b2a      	ldr	r3, [pc, #168]	; (80013f4 <_Z18SystemClock_Configv+0xe0>)
 800134a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001350:	60bb      	str	r3, [r7, #8]
 8001352:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001354:	2300      	movs	r3, #0
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	4b27      	ldr	r3, [pc, #156]	; (80013f8 <_Z18SystemClock_Configv+0xe4>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a26      	ldr	r2, [pc, #152]	; (80013f8 <_Z18SystemClock_Configv+0xe4>)
 800135e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001362:	6013      	str	r3, [r2, #0]
 8001364:	4b24      	ldr	r3, [pc, #144]	; (80013f8 <_Z18SystemClock_Configv+0xe4>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800136c:	607b      	str	r3, [r7, #4]
 800136e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001370:	2302      	movs	r3, #2
 8001372:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001374:	2301      	movs	r3, #1
 8001376:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001378:	2310      	movs	r3, #16
 800137a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800137c:	2302      	movs	r3, #2
 800137e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001380:	2300      	movs	r3, #0
 8001382:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001384:	2308      	movs	r3, #8
 8001386:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001388:	23a8      	movs	r3, #168	; 0xa8
 800138a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800138c:	2302      	movs	r3, #2
 800138e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001390:	2304      	movs	r3, #4
 8001392:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001394:	f107 0320 	add.w	r3, r7, #32
 8001398:	4618      	mov	r0, r3
 800139a:	f003 fd5f 	bl	8004e5c <HAL_RCC_OscConfig>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	bf14      	ite	ne
 80013a4:	2301      	movne	r3, #1
 80013a6:	2300      	moveq	r3, #0
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 80013ae:	f000 f849 	bl	8001444 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013b2:	230f      	movs	r3, #15
 80013b4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013b6:	2302      	movs	r3, #2
 80013b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ba:	2300      	movs	r3, #0
 80013bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013be:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013ca:	f107 030c 	add.w	r3, r7, #12
 80013ce:	2105      	movs	r1, #5
 80013d0:	4618      	mov	r0, r3
 80013d2:	f003 ffbb 	bl	800534c <HAL_RCC_ClockConfig>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	bf14      	ite	ne
 80013dc:	2301      	movne	r3, #1
 80013de:	2300      	moveq	r3, #0
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 80013e6:	f000 f82d 	bl	8001444 <Error_Handler>
  }
}
 80013ea:	bf00      	nop
 80013ec:	3750      	adds	r7, #80	; 0x50
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40023800 	.word	0x40023800
 80013f8:	40007000 	.word	0x40007000

080013fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	  if (htim->Instance == TIM7) {
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a0b      	ldr	r2, [pc, #44]	; (8001438 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d108      	bne.n	8001420 <HAL_TIM_PeriodElapsedCallback+0x24>
	    if (status_uartTIM) {
 800140e:	4b0b      	ldr	r3, [pc, #44]	; (800143c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d004      	beq.n	8001420 <HAL_TIM_PeriodElapsedCallback+0x24>
	    	uartTIM++;
 8001416:	4b0a      	ldr	r3, [pc, #40]	; (8001440 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	3301      	adds	r3, #1
 800141c:	4a08      	ldr	r2, [pc, #32]	; (8001440 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800141e:	6013      	str	r3, [r2, #0]
		}

	  }

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a04      	ldr	r2, [pc, #16]	; (8001438 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d101      	bne.n	800142e <HAL_TIM_PeriodElapsedCallback+0x32>
    HAL_IncTick();
 800142a:	f000 fb81 	bl	8001b30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40001400 	.word	0x40001400
 800143c:	2000059c 	.word	0x2000059c
 8001440:	20000598 	.word	0x20000598

08001444 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001448:	b672      	cpsid	i
}
 800144a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800144c:	e7fe      	b.n	800144c <Error_Handler+0x8>
	...

08001450 <_Z8WriteCmdv>:
0xC8, 0xD3, 0x00, 0xD5, 0x80, 0xD8, 0x05, 0xD9, 0xF1, 0xDA, 0x12,
					
0xD8, 0x30, 0x8D, 0x14, 0xAF};

void WriteCmd()
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af04      	add	r7, sp, #16
	uint8_t i = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	71fb      	strb	r3, [r7, #7]
	for(i=0; i<27; i++){
 800145a:	2300      	movs	r3, #0
 800145c:	71fb      	strb	r3, [r7, #7]
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	2b1a      	cmp	r3, #26
 8001462:	d812      	bhi.n	800148a <_Z8WriteCmdv+0x3a>
		HAL_I2C_Mem_Write(&hi2c3 ,0x78,0x00,I2C_MEMADD_SIZE_8BIT,CMD_Data+i,1,0x100);
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	4a0b      	ldr	r2, [pc, #44]	; (8001494 <_Z8WriteCmdv+0x44>)
 8001468:	4413      	add	r3, r2
 800146a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800146e:	9202      	str	r2, [sp, #8]
 8001470:	2201      	movs	r2, #1
 8001472:	9201      	str	r2, [sp, #4]
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	2301      	movs	r3, #1
 8001478:	2200      	movs	r2, #0
 800147a:	2178      	movs	r1, #120	; 0x78
 800147c:	4806      	ldr	r0, [pc, #24]	; (8001498 <_Z8WriteCmdv+0x48>)
 800147e:	f001 fb5f 	bl	8002b40 <HAL_I2C_Mem_Write>
	for(i=0; i<27; i++){
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	3301      	adds	r3, #1
 8001486:	71fb      	strb	r3, [r7, #7]
 8001488:	e7e9      	b.n	800145e <_Z8WriteCmdv+0xe>
	}
}
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20000000 	.word	0x20000000
 8001498:	200042f8 	.word	0x200042f8

0800149c <_Z11OLED_WR_CMDh>:

//Записать управляющие команды в устройство
void OLED_WR_CMD(uint8_t cmd)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af04      	add	r7, sp, #16
 80014a2:	4603      	mov	r3, r0
 80014a4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c3 ,0x78,0x00,I2C_MEMADD_SIZE_8BIT,&cmd,1,0x100);
 80014a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014aa:	9302      	str	r3, [sp, #8]
 80014ac:	2301      	movs	r3, #1
 80014ae:	9301      	str	r3, [sp, #4]
 80014b0:	1dfb      	adds	r3, r7, #7
 80014b2:	9300      	str	r3, [sp, #0]
 80014b4:	2301      	movs	r3, #1
 80014b6:	2200      	movs	r2, #0
 80014b8:	2178      	movs	r1, #120	; 0x78
 80014ba:	4803      	ldr	r0, [pc, #12]	; (80014c8 <_Z11OLED_WR_CMDh+0x2c>)
 80014bc:	f001 fb40 	bl	8002b40 <HAL_I2C_Mem_Write>
}
 80014c0:	bf00      	nop
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	200042f8 	.word	0x200042f8

080014cc <_Z12OLED_WR_DATAh>:

//Записать данные на устройство
void OLED_WR_DATA(uint8_t data)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af04      	add	r7, sp, #16
 80014d2:	4603      	mov	r3, r0
 80014d4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c3 ,0x78,0x40,I2C_MEMADD_SIZE_8BIT,&data,1,0x100);
 80014d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014da:	9302      	str	r3, [sp, #8]
 80014dc:	2301      	movs	r3, #1
 80014de:	9301      	str	r3, [sp, #4]
 80014e0:	1dfb      	adds	r3, r7, #7
 80014e2:	9300      	str	r3, [sp, #0]
 80014e4:	2301      	movs	r3, #1
 80014e6:	2240      	movs	r2, #64	; 0x40
 80014e8:	2178      	movs	r1, #120	; 0x78
 80014ea:	4803      	ldr	r0, [pc, #12]	; (80014f8 <_Z12OLED_WR_DATAh+0x2c>)
 80014ec:	f001 fb28 	bl	8002b40 <HAL_I2C_Mem_Write>
}
 80014f0:	bf00      	nop
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	200042f8 	.word	0x200042f8

080014fc <_Z9OLED_Initv>:

//Инициализировать oled-экран
void OLED_Init(void)
{ 	
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
	HAL_Delay(200);
 8001500:	20c8      	movs	r0, #200	; 0xc8
 8001502:	f000 fb35 	bl	8001b70 <HAL_Delay>
	WriteCmd();
 8001506:	f7ff ffa3 	bl	8001450 <_Z8WriteCmdv>
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}

0800150e <_Z10OLED_Clearv>:

//Очисти экран
void OLED_Clear()
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 8001514:	2300      	movs	r3, #0
 8001516:	71fb      	strb	r3, [r7, #7]
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	2b07      	cmp	r3, #7
 800151c:	d81c      	bhi.n	8001558 <_Z10OLED_Clearv+0x4a>
	{  
		OLED_WR_CMD(0xb0+i);
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	3b50      	subs	r3, #80	; 0x50
 8001522:	b2db      	uxtb	r3, r3
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff ffb9 	bl	800149c <_Z11OLED_WR_CMDh>
		OLED_WR_CMD (0x00); 
 800152a:	2000      	movs	r0, #0
 800152c:	f7ff ffb6 	bl	800149c <_Z11OLED_WR_CMDh>
		OLED_WR_CMD (0x10); 
 8001530:	2010      	movs	r0, #16
 8001532:	f7ff ffb3 	bl	800149c <_Z11OLED_WR_CMDh>
		for(n=0;n<128;n++)
 8001536:	2300      	movs	r3, #0
 8001538:	71bb      	strb	r3, [r7, #6]
 800153a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800153e:	2b00      	cmp	r3, #0
 8001540:	db06      	blt.n	8001550 <_Z10OLED_Clearv+0x42>
			OLED_WR_DATA(0);
 8001542:	2000      	movs	r0, #0
 8001544:	f7ff ffc2 	bl	80014cc <_Z12OLED_WR_DATAh>
		for(n=0;n<128;n++)
 8001548:	79bb      	ldrb	r3, [r7, #6]
 800154a:	3301      	adds	r3, #1
 800154c:	71bb      	strb	r3, [r7, #6]
 800154e:	e7f4      	b.n	800153a <_Z10OLED_Clearv+0x2c>
	for(i=0;i<8;i++)  
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	3301      	adds	r3, #1
 8001554:	71fb      	strb	r3, [r7, #7]
 8001556:	e7df      	b.n	8001518 <_Z10OLED_Clearv+0xa>
	} 
}
 8001558:	bf00      	nop
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <_Z15OLED_Display_Onv>:

//Включите OLED-дисплей
void OLED_Display_On(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
	OLED_WR_CMD(0X8D);  //Команда SET DCDC
 8001564:	208d      	movs	r0, #141	; 0x8d
 8001566:	f7ff ff99 	bl	800149c <_Z11OLED_WR_CMDh>
	OLED_WR_CMD(0X14);  //DCDC ON
 800156a:	2014      	movs	r0, #20
 800156c:	f7ff ff96 	bl	800149c <_Z11OLED_WR_CMDh>
	OLED_WR_CMD(0XAF);  //DISPLAY ON
 8001570:	20af      	movs	r0, #175	; 0xaf
 8001572:	f7ff ff93 	bl	800149c <_Z11OLED_WR_CMDh>
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}

0800157a <_Z12OLED_Set_Poshh>:
	OLED_WR_CMD(0X10);  //DCDC OFF
	OLED_WR_CMD(0XAE);  //DISPLAY OFF
}

void OLED_Set_Pos(uint8_t x, uint8_t y) 
{ 	
 800157a:	b580      	push	{r7, lr}
 800157c:	b082      	sub	sp, #8
 800157e:	af00      	add	r7, sp, #0
 8001580:	4603      	mov	r3, r0
 8001582:	460a      	mov	r2, r1
 8001584:	71fb      	strb	r3, [r7, #7]
 8001586:	4613      	mov	r3, r2
 8001588:	71bb      	strb	r3, [r7, #6]
	OLED_WR_CMD(0xb0+y);
 800158a:	79bb      	ldrb	r3, [r7, #6]
 800158c:	3b50      	subs	r3, #80	; 0x50
 800158e:	b2db      	uxtb	r3, r3
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff ff83 	bl	800149c <_Z11OLED_WR_CMDh>
	OLED_WR_CMD(((x&0xf0)>>4)|0x10);
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	091b      	lsrs	r3, r3, #4
 800159a:	b2db      	uxtb	r3, r3
 800159c:	f043 0310 	orr.w	r3, r3, #16
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff ff7a 	bl	800149c <_Z11OLED_WR_CMDh>
	OLED_WR_CMD(x&0x0f);
 80015a8:	79fb      	ldrb	r3, [r7, #7]
 80015aa:	f003 030f 	and.w	r3, r3, #15
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff ff73 	bl	800149c <_Z11OLED_WR_CMDh>
} 
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
	...

080015c0 <_Z13OLED_ShowCharhhhh>:
//x:0~127
//y:0~63
//chr: 0, обратный дисплей; 1, нормальный дисплей
//Char_Size: выберите шрифт 16/12
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t Char_Size)
{      	
 80015c0:	b590      	push	{r4, r7, lr}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4604      	mov	r4, r0
 80015c8:	4608      	mov	r0, r1
 80015ca:	4611      	mov	r1, r2
 80015cc:	461a      	mov	r2, r3
 80015ce:	4623      	mov	r3, r4
 80015d0:	71fb      	strb	r3, [r7, #7]
 80015d2:	4603      	mov	r3, r0
 80015d4:	71bb      	strb	r3, [r7, #6]
 80015d6:	460b      	mov	r3, r1
 80015d8:	717b      	strb	r3, [r7, #5]
 80015da:	4613      	mov	r3, r2
 80015dc:	713b      	strb	r3, [r7, #4]
	unsigned char c=0,i=0;	
 80015de:	2300      	movs	r3, #0
 80015e0:	73bb      	strb	r3, [r7, #14]
 80015e2:	2300      	movs	r3, #0
 80015e4:	73fb      	strb	r3, [r7, #15]
		c=chr-' ';//Получить значение смещения
 80015e6:	797b      	ldrb	r3, [r7, #5]
 80015e8:	3b20      	subs	r3, #32
 80015ea:	73bb      	strb	r3, [r7, #14]
		if(x>128-1){x=0;y=y+2;}
 80015ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	da04      	bge.n	80015fe <_Z13OLED_ShowCharhhhh+0x3e>
 80015f4:	2300      	movs	r3, #0
 80015f6:	71fb      	strb	r3, [r7, #7]
 80015f8:	79bb      	ldrb	r3, [r7, #6]
 80015fa:	3302      	adds	r3, #2
 80015fc:	71bb      	strb	r3, [r7, #6]
		if(Char_Size ==16)
 80015fe:	793b      	ldrb	r3, [r7, #4]
 8001600:	2b10      	cmp	r3, #16
 8001602:	d132      	bne.n	800166a <_Z13OLED_ShowCharhhhh+0xaa>
			{
			OLED_Set_Pos(x,y);	
 8001604:	79ba      	ldrb	r2, [r7, #6]
 8001606:	79fb      	ldrb	r3, [r7, #7]
 8001608:	4611      	mov	r1, r2
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff ffb5 	bl	800157a <_Z12OLED_Set_Poshh>
			for(i=0;i<8;i++)
 8001610:	2300      	movs	r3, #0
 8001612:	73fb      	strb	r3, [r7, #15]
 8001614:	7bfb      	ldrb	r3, [r7, #15]
 8001616:	2b07      	cmp	r3, #7
 8001618:	d80c      	bhi.n	8001634 <_Z13OLED_ShowCharhhhh+0x74>
			OLED_WR_DATA(F8x16[c*16+i]);
 800161a:	7bbb      	ldrb	r3, [r7, #14]
 800161c:	011a      	lsls	r2, r3, #4
 800161e:	7bfb      	ldrb	r3, [r7, #15]
 8001620:	4413      	add	r3, r2
 8001622:	4a22      	ldr	r2, [pc, #136]	; (80016ac <_Z13OLED_ShowCharhhhh+0xec>)
 8001624:	5cd3      	ldrb	r3, [r2, r3]
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff ff50 	bl	80014cc <_Z12OLED_WR_DATAh>
			for(i=0;i<8;i++)
 800162c:	7bfb      	ldrb	r3, [r7, #15]
 800162e:	3301      	adds	r3, #1
 8001630:	73fb      	strb	r3, [r7, #15]
 8001632:	e7ef      	b.n	8001614 <_Z13OLED_ShowCharhhhh+0x54>
			OLED_Set_Pos(x,y+1);
 8001634:	79bb      	ldrb	r3, [r7, #6]
 8001636:	3301      	adds	r3, #1
 8001638:	b2da      	uxtb	r2, r3
 800163a:	79fb      	ldrb	r3, [r7, #7]
 800163c:	4611      	mov	r1, r2
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff ff9b 	bl	800157a <_Z12OLED_Set_Poshh>
			for(i=0;i<8;i++)
 8001644:	2300      	movs	r3, #0
 8001646:	73fb      	strb	r3, [r7, #15]
 8001648:	7bfb      	ldrb	r3, [r7, #15]
 800164a:	2b07      	cmp	r3, #7
 800164c:	d829      	bhi.n	80016a2 <_Z13OLED_ShowCharhhhh+0xe2>
			OLED_WR_DATA(F8x16[c*16+i+8]);
 800164e:	7bbb      	ldrb	r3, [r7, #14]
 8001650:	011a      	lsls	r2, r3, #4
 8001652:	7bfb      	ldrb	r3, [r7, #15]
 8001654:	4413      	add	r3, r2
 8001656:	3308      	adds	r3, #8
 8001658:	4a14      	ldr	r2, [pc, #80]	; (80016ac <_Z13OLED_ShowCharhhhh+0xec>)
 800165a:	5cd3      	ldrb	r3, [r2, r3]
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff ff35 	bl	80014cc <_Z12OLED_WR_DATAh>
			for(i=0;i<8;i++)
 8001662:	7bfb      	ldrb	r3, [r7, #15]
 8001664:	3301      	adds	r3, #1
 8001666:	73fb      	strb	r3, [r7, #15]
 8001668:	e7ee      	b.n	8001648 <_Z13OLED_ShowCharhhhh+0x88>
			}
			else {	
				OLED_Set_Pos(x,y);
 800166a:	79ba      	ldrb	r2, [r7, #6]
 800166c:	79fb      	ldrb	r3, [r7, #7]
 800166e:	4611      	mov	r1, r2
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff ff82 	bl	800157a <_Z12OLED_Set_Poshh>
				for(i=0;i<6;i++)
 8001676:	2300      	movs	r3, #0
 8001678:	73fb      	strb	r3, [r7, #15]
 800167a:	7bfb      	ldrb	r3, [r7, #15]
 800167c:	2b05      	cmp	r3, #5
 800167e:	d810      	bhi.n	80016a2 <_Z13OLED_ShowCharhhhh+0xe2>
				OLED_WR_DATA(F6x8[c][i]);
 8001680:	7bba      	ldrb	r2, [r7, #14]
 8001682:	7bf9      	ldrb	r1, [r7, #15]
 8001684:	480a      	ldr	r0, [pc, #40]	; (80016b0 <_Z13OLED_ShowCharhhhh+0xf0>)
 8001686:	4613      	mov	r3, r2
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	4413      	add	r3, r2
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	4403      	add	r3, r0
 8001690:	440b      	add	r3, r1
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff ff19 	bl	80014cc <_Z12OLED_WR_DATAh>
				for(i=0;i<6;i++)
 800169a:	7bfb      	ldrb	r3, [r7, #15]
 800169c:	3301      	adds	r3, #1
 800169e:	73fb      	strb	r3, [r7, #15]
 80016a0:	e7eb      	b.n	800167a <_Z13OLED_ShowCharhhhh+0xba>
				
			}
}
 80016a2:	bf00      	nop
 80016a4:	3714      	adds	r7, #20
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd90      	pop	{r4, r7, pc}
 80016aa:	bf00      	nop
 80016ac:	08008870 	.word	0x08008870
 80016b0:	08008648 	.word	0x08008648

080016b4 <_Z15OLED_ShowStringhhPhh>:
	 	OLED_ShowChar(x+(size2/2)*t,y,temp+'0',size2); 
	}
} 
//Отобразить символьную строку
void OLED_ShowString(uint8_t x,uint8_t y,uint8_t *chr,uint8_t Char_Size)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	603a      	str	r2, [r7, #0]
 80016bc:	461a      	mov	r2, r3
 80016be:	4603      	mov	r3, r0
 80016c0:	71fb      	strb	r3, [r7, #7]
 80016c2:	460b      	mov	r3, r1
 80016c4:	71bb      	strb	r3, [r7, #6]
 80016c6:	4613      	mov	r3, r2
 80016c8:	717b      	strb	r3, [r7, #5]
	unsigned char j=0;
 80016ca:	2300      	movs	r3, #0
 80016cc:	73fb      	strb	r3, [r7, #15]
	while (chr[j]!='\0')
 80016ce:	7bfb      	ldrb	r3, [r7, #15]
 80016d0:	683a      	ldr	r2, [r7, #0]
 80016d2:	4413      	add	r3, r2
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d017      	beq.n	800170a <_Z15OLED_ShowStringhhPhh+0x56>
	{		OLED_ShowChar(x,y,chr[j],Char_Size);
 80016da:	7bfb      	ldrb	r3, [r7, #15]
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	4413      	add	r3, r2
 80016e0:	781a      	ldrb	r2, [r3, #0]
 80016e2:	797b      	ldrb	r3, [r7, #5]
 80016e4:	79b9      	ldrb	r1, [r7, #6]
 80016e6:	79f8      	ldrb	r0, [r7, #7]
 80016e8:	f7ff ff6a 	bl	80015c0 <_Z13OLED_ShowCharhhhh>
			x+=8;
 80016ec:	79fb      	ldrb	r3, [r7, #7]
 80016ee:	3308      	adds	r3, #8
 80016f0:	71fb      	strb	r3, [r7, #7]
		if(x>120){x=0;y+=2;}
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	2b78      	cmp	r3, #120	; 0x78
 80016f6:	d904      	bls.n	8001702 <_Z15OLED_ShowStringhhPhh+0x4e>
 80016f8:	2300      	movs	r3, #0
 80016fa:	71fb      	strb	r3, [r7, #7]
 80016fc:	79bb      	ldrb	r3, [r7, #6]
 80016fe:	3302      	adds	r3, #2
 8001700:	71bb      	strb	r3, [r7, #6]
			j++;
 8001702:	7bfb      	ldrb	r3, [r7, #15]
 8001704:	3301      	adds	r3, #1
 8001706:	73fb      	strb	r3, [r7, #15]
	while (chr[j]!='\0')
 8001708:	e7e1      	b.n	80016ce <_Z15OLED_ShowStringhhPhh+0x1a>
	}
}
 800170a:	bf00      	nop
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
	...

08001714 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	607b      	str	r3, [r7, #4]
 800171e:	4b12      	ldr	r3, [pc, #72]	; (8001768 <HAL_MspInit+0x54>)
 8001720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001722:	4a11      	ldr	r2, [pc, #68]	; (8001768 <HAL_MspInit+0x54>)
 8001724:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001728:	6453      	str	r3, [r2, #68]	; 0x44
 800172a:	4b0f      	ldr	r3, [pc, #60]	; (8001768 <HAL_MspInit+0x54>)
 800172c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001732:	607b      	str	r3, [r7, #4]
 8001734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	603b      	str	r3, [r7, #0]
 800173a:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <HAL_MspInit+0x54>)
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	4a0a      	ldr	r2, [pc, #40]	; (8001768 <HAL_MspInit+0x54>)
 8001740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001744:	6413      	str	r3, [r2, #64]	; 0x40
 8001746:	4b08      	ldr	r3, [pc, #32]	; (8001768 <HAL_MspInit+0x54>)
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174e:	603b      	str	r3, [r7, #0]
 8001750:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001752:	2200      	movs	r2, #0
 8001754:	210f      	movs	r1, #15
 8001756:	f06f 0001 	mvn.w	r0, #1
 800175a:	f000 fae5 	bl	8001d28 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40023800 	.word	0x40023800

0800176c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08c      	sub	sp, #48	; 0x30
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001774:	2300      	movs	r3, #0
 8001776:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001778:	2300      	movs	r3, #0
 800177a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 800177c:	2200      	movs	r2, #0
 800177e:	6879      	ldr	r1, [r7, #4]
 8001780:	2037      	movs	r0, #55	; 0x37
 8001782:	f000 fad1 	bl	8001d28 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001786:	2037      	movs	r0, #55	; 0x37
 8001788:	f000 faea 	bl	8001d60 <HAL_NVIC_EnableIRQ>

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 800178c:	2300      	movs	r3, #0
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	4b1f      	ldr	r3, [pc, #124]	; (8001810 <HAL_InitTick+0xa4>)
 8001792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001794:	4a1e      	ldr	r2, [pc, #120]	; (8001810 <HAL_InitTick+0xa4>)
 8001796:	f043 0320 	orr.w	r3, r3, #32
 800179a:	6413      	str	r3, [r2, #64]	; 0x40
 800179c:	4b1c      	ldr	r3, [pc, #112]	; (8001810 <HAL_InitTick+0xa4>)
 800179e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a0:	f003 0320 	and.w	r3, r3, #32
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017a8:	f107 0210 	add.w	r2, r7, #16
 80017ac:	f107 0314 	add.w	r3, r7, #20
 80017b0:	4611      	mov	r1, r2
 80017b2:	4618      	mov	r0, r3
 80017b4:	f003 ffc6 	bl	8005744 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80017b8:	f003 ff9c 	bl	80056f4 <HAL_RCC_GetPCLK1Freq>
 80017bc:	4603      	mov	r3, r0
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017c4:	4a13      	ldr	r2, [pc, #76]	; (8001814 <HAL_InitTick+0xa8>)
 80017c6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ca:	0c9b      	lsrs	r3, r3, #18
 80017cc:	3b01      	subs	r3, #1
 80017ce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80017d0:	4b11      	ldr	r3, [pc, #68]	; (8001818 <HAL_InitTick+0xac>)
 80017d2:	4a12      	ldr	r2, [pc, #72]	; (800181c <HAL_InitTick+0xb0>)
 80017d4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 80017d6:	4b10      	ldr	r3, [pc, #64]	; (8001818 <HAL_InitTick+0xac>)
 80017d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017dc:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80017de:	4a0e      	ldr	r2, [pc, #56]	; (8001818 <HAL_InitTick+0xac>)
 80017e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017e2:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 80017e4:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <HAL_InitTick+0xac>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ea:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <HAL_InitTick+0xac>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 80017f0:	4809      	ldr	r0, [pc, #36]	; (8001818 <HAL_InitTick+0xac>)
 80017f2:	f003 ffd9 	bl	80057a8 <HAL_TIM_Base_Init>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d104      	bne.n	8001806 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 80017fc:	4806      	ldr	r0, [pc, #24]	; (8001818 <HAL_InitTick+0xac>)
 80017fe:	f004 f82d 	bl	800585c <HAL_TIM_Base_Start_IT>
 8001802:	4603      	mov	r3, r0
 8001804:	e000      	b.n	8001808 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
}
 8001808:	4618      	mov	r0, r3
 800180a:	3730      	adds	r7, #48	; 0x30
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40023800 	.word	0x40023800
 8001814:	431bde83 	.word	0x431bde83
 8001818:	200043a0 	.word	0x200043a0
 800181c:	40001400 	.word	0x40001400

08001820 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001824:	e7fe      	b.n	8001824 <NMI_Handler+0x4>

08001826 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800182a:	e7fe      	b.n	800182a <HardFault_Handler+0x4>

0800182c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001830:	e7fe      	b.n	8001830 <MemManage_Handler+0x4>

08001832 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001832:	b480      	push	{r7}
 8001834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001836:	e7fe      	b.n	8001836 <BusFault_Handler+0x4>

08001838 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800183c:	e7fe      	b.n	800183c <UsageFault_Handler+0x4>

0800183e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800183e:	b480      	push	{r7}
 8001840:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001850:	4802      	ldr	r0, [pc, #8]	; (800185c <USART1_IRQHandler+0x10>)
 8001852:	f004 fc09 	bl	8006068 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	200043e8 	.word	0x200043e8

08001860 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001864:	4802      	ldr	r0, [pc, #8]	; (8001870 <TIM7_IRQHandler+0x10>)
 8001866:	f004 f869 	bl	800593c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	200043a0 	.word	0x200043a0

08001874 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001878:	4802      	ldr	r0, [pc, #8]	; (8001884 <USART6_IRQHandler+0x10>)
 800187a:	f004 fbf5 	bl	8006068 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	2000442c 	.word	0x2000442c

08001888 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 800188c:	4802      	ldr	r0, [pc, #8]	; (8001898 <I2C3_EV_IRQHandler+0x10>)
 800188e:	f001 fa51 	bl	8002d34 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	200042f8 	.word	0x200042f8

0800189c <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 80018a0:	4802      	ldr	r0, [pc, #8]	; (80018ac <I2C3_ER_IRQHandler+0x10>)
 80018a2:	f001 fbb8 	bl	8003016 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	200042f8 	.word	0x200042f8

080018b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018b4:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <SystemInit+0x20>)
 80018b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ba:	4a05      	ldr	r2, [pc, #20]	; (80018d0 <SystemInit+0x20>)
 80018bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	e000ed00 	.word	0xe000ed00

080018d4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018d8:	4b11      	ldr	r3, [pc, #68]	; (8001920 <MX_USART1_UART_Init+0x4c>)
 80018da:	4a12      	ldr	r2, [pc, #72]	; (8001924 <MX_USART1_UART_Init+0x50>)
 80018dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <MX_USART1_UART_Init+0x4c>)
 80018e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018e6:	4b0e      	ldr	r3, [pc, #56]	; (8001920 <MX_USART1_UART_Init+0x4c>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018ec:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <MX_USART1_UART_Init+0x4c>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018f2:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <MX_USART1_UART_Init+0x4c>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018f8:	4b09      	ldr	r3, [pc, #36]	; (8001920 <MX_USART1_UART_Init+0x4c>)
 80018fa:	220c      	movs	r2, #12
 80018fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018fe:	4b08      	ldr	r3, [pc, #32]	; (8001920 <MX_USART1_UART_Init+0x4c>)
 8001900:	2200      	movs	r2, #0
 8001902:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001904:	4b06      	ldr	r3, [pc, #24]	; (8001920 <MX_USART1_UART_Init+0x4c>)
 8001906:	2200      	movs	r2, #0
 8001908:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800190a:	4805      	ldr	r0, [pc, #20]	; (8001920 <MX_USART1_UART_Init+0x4c>)
 800190c:	f004 f9fa 	bl	8005d04 <HAL_UART_Init>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001916:	f7ff fd95 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	200043e8 	.word	0x200043e8
 8001924:	40011000 	.word	0x40011000

08001928 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800192c:	4b11      	ldr	r3, [pc, #68]	; (8001974 <MX_USART6_UART_Init+0x4c>)
 800192e:	4a12      	ldr	r2, [pc, #72]	; (8001978 <MX_USART6_UART_Init+0x50>)
 8001930:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001932:	4b10      	ldr	r3, [pc, #64]	; (8001974 <MX_USART6_UART_Init+0x4c>)
 8001934:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001938:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800193a:	4b0e      	ldr	r3, [pc, #56]	; (8001974 <MX_USART6_UART_Init+0x4c>)
 800193c:	2200      	movs	r2, #0
 800193e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001940:	4b0c      	ldr	r3, [pc, #48]	; (8001974 <MX_USART6_UART_Init+0x4c>)
 8001942:	2200      	movs	r2, #0
 8001944:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001946:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <MX_USART6_UART_Init+0x4c>)
 8001948:	2200      	movs	r2, #0
 800194a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800194c:	4b09      	ldr	r3, [pc, #36]	; (8001974 <MX_USART6_UART_Init+0x4c>)
 800194e:	220c      	movs	r2, #12
 8001950:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001952:	4b08      	ldr	r3, [pc, #32]	; (8001974 <MX_USART6_UART_Init+0x4c>)
 8001954:	2200      	movs	r2, #0
 8001956:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001958:	4b06      	ldr	r3, [pc, #24]	; (8001974 <MX_USART6_UART_Init+0x4c>)
 800195a:	2200      	movs	r2, #0
 800195c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800195e:	4805      	ldr	r0, [pc, #20]	; (8001974 <MX_USART6_UART_Init+0x4c>)
 8001960:	f004 f9d0 	bl	8005d04 <HAL_UART_Init>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800196a:	f7ff fd6b 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	2000442c 	.word	0x2000442c
 8001978:	40011400 	.word	0x40011400

0800197c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b08c      	sub	sp, #48	; 0x30
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001984:	f107 031c 	add.w	r3, r7, #28
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	60da      	str	r2, [r3, #12]
 8001992:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a3a      	ldr	r2, [pc, #232]	; (8001a84 <HAL_UART_MspInit+0x108>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d135      	bne.n	8001a0a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	61bb      	str	r3, [r7, #24]
 80019a2:	4b39      	ldr	r3, [pc, #228]	; (8001a88 <HAL_UART_MspInit+0x10c>)
 80019a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a6:	4a38      	ldr	r2, [pc, #224]	; (8001a88 <HAL_UART_MspInit+0x10c>)
 80019a8:	f043 0310 	orr.w	r3, r3, #16
 80019ac:	6453      	str	r3, [r2, #68]	; 0x44
 80019ae:	4b36      	ldr	r3, [pc, #216]	; (8001a88 <HAL_UART_MspInit+0x10c>)
 80019b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b2:	f003 0310 	and.w	r3, r3, #16
 80019b6:	61bb      	str	r3, [r7, #24]
 80019b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	617b      	str	r3, [r7, #20]
 80019be:	4b32      	ldr	r3, [pc, #200]	; (8001a88 <HAL_UART_MspInit+0x10c>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	4a31      	ldr	r2, [pc, #196]	; (8001a88 <HAL_UART_MspInit+0x10c>)
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ca:	4b2f      	ldr	r3, [pc, #188]	; (8001a88 <HAL_UART_MspInit+0x10c>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	617b      	str	r3, [r7, #20]
 80019d4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80019d6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80019da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019dc:	2302      	movs	r3, #2
 80019de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e4:	2303      	movs	r3, #3
 80019e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019e8:	2307      	movs	r3, #7
 80019ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ec:	f107 031c 	add.w	r3, r7, #28
 80019f0:	4619      	mov	r1, r3
 80019f2:	4826      	ldr	r0, [pc, #152]	; (8001a8c <HAL_UART_MspInit+0x110>)
 80019f4:	f000 fa6e 	bl	8001ed4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80019f8:	2200      	movs	r2, #0
 80019fa:	2105      	movs	r1, #5
 80019fc:	2025      	movs	r0, #37	; 0x25
 80019fe:	f000 f993 	bl	8001d28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a02:	2025      	movs	r0, #37	; 0x25
 8001a04:	f000 f9ac 	bl	8001d60 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001a08:	e038      	b.n	8001a7c <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART6)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a20      	ldr	r2, [pc, #128]	; (8001a90 <HAL_UART_MspInit+0x114>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d133      	bne.n	8001a7c <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001a14:	2300      	movs	r3, #0
 8001a16:	613b      	str	r3, [r7, #16]
 8001a18:	4b1b      	ldr	r3, [pc, #108]	; (8001a88 <HAL_UART_MspInit+0x10c>)
 8001a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1c:	4a1a      	ldr	r2, [pc, #104]	; (8001a88 <HAL_UART_MspInit+0x10c>)
 8001a1e:	f043 0320 	orr.w	r3, r3, #32
 8001a22:	6453      	str	r3, [r2, #68]	; 0x44
 8001a24:	4b18      	ldr	r3, [pc, #96]	; (8001a88 <HAL_UART_MspInit+0x10c>)
 8001a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a28:	f003 0320 	and.w	r3, r3, #32
 8001a2c:	613b      	str	r3, [r7, #16]
 8001a2e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a30:	2300      	movs	r3, #0
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	4b14      	ldr	r3, [pc, #80]	; (8001a88 <HAL_UART_MspInit+0x10c>)
 8001a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a38:	4a13      	ldr	r2, [pc, #76]	; (8001a88 <HAL_UART_MspInit+0x10c>)
 8001a3a:	f043 0304 	orr.w	r3, r3, #4
 8001a3e:	6313      	str	r3, [r2, #48]	; 0x30
 8001a40:	4b11      	ldr	r3, [pc, #68]	; (8001a88 <HAL_UART_MspInit+0x10c>)
 8001a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a44:	f003 0304 	and.w	r3, r3, #4
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a4c:	23c0      	movs	r3, #192	; 0xc0
 8001a4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a50:	2302      	movs	r3, #2
 8001a52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a54:	2300      	movs	r3, #0
 8001a56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001a5c:	2308      	movs	r3, #8
 8001a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a60:	f107 031c 	add.w	r3, r7, #28
 8001a64:	4619      	mov	r1, r3
 8001a66:	480b      	ldr	r0, [pc, #44]	; (8001a94 <HAL_UART_MspInit+0x118>)
 8001a68:	f000 fa34 	bl	8001ed4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	2105      	movs	r1, #5
 8001a70:	2047      	movs	r0, #71	; 0x47
 8001a72:	f000 f959 	bl	8001d28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001a76:	2047      	movs	r0, #71	; 0x47
 8001a78:	f000 f972 	bl	8001d60 <HAL_NVIC_EnableIRQ>
}
 8001a7c:	bf00      	nop
 8001a7e:	3730      	adds	r7, #48	; 0x30
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40011000 	.word	0x40011000
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	40020000 	.word	0x40020000
 8001a90:	40011400 	.word	0x40011400
 8001a94:	40020800 	.word	0x40020800

08001a98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001a98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ad0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a9c:	480d      	ldr	r0, [pc, #52]	; (8001ad4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a9e:	490e      	ldr	r1, [pc, #56]	; (8001ad8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001aa0:	4a0e      	ldr	r2, [pc, #56]	; (8001adc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001aa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aa4:	e002      	b.n	8001aac <LoopCopyDataInit>

08001aa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aaa:	3304      	adds	r3, #4

08001aac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ab0:	d3f9      	bcc.n	8001aa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ab2:	4a0b      	ldr	r2, [pc, #44]	; (8001ae0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ab4:	4c0b      	ldr	r4, [pc, #44]	; (8001ae4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ab6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ab8:	e001      	b.n	8001abe <LoopFillZerobss>

08001aba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001abc:	3204      	adds	r2, #4

08001abe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001abe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ac0:	d3fb      	bcc.n	8001aba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ac2:	f7ff fef5 	bl	80018b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ac6:	f006 fc01 	bl	80082cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001aca:	f7ff fc0d 	bl	80012e8 <main>
  bx  lr    
 8001ace:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ad0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ad4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ad8:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001adc:	08008f10 	.word	0x08008f10
  ldr r2, =_sbss
 8001ae0:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001ae4:	20004480 	.word	0x20004480

08001ae8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ae8:	e7fe      	b.n	8001ae8 <ADC_IRQHandler>
	...

08001aec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001af0:	4b0e      	ldr	r3, [pc, #56]	; (8001b2c <HAL_Init+0x40>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a0d      	ldr	r2, [pc, #52]	; (8001b2c <HAL_Init+0x40>)
 8001af6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001afa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001afc:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <HAL_Init+0x40>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a0a      	ldr	r2, [pc, #40]	; (8001b2c <HAL_Init+0x40>)
 8001b02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b08:	4b08      	ldr	r3, [pc, #32]	; (8001b2c <HAL_Init+0x40>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a07      	ldr	r2, [pc, #28]	; (8001b2c <HAL_Init+0x40>)
 8001b0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b14:	2003      	movs	r0, #3
 8001b16:	f000 f8fc 	bl	8001d12 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b1a:	200f      	movs	r0, #15
 8001b1c:	f7ff fe26 	bl	800176c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b20:	f7ff fdf8 	bl	8001714 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40023c00 	.word	0x40023c00

08001b30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b34:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <HAL_IncTick+0x20>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	461a      	mov	r2, r3
 8001b3a:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <HAL_IncTick+0x24>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4413      	add	r3, r2
 8001b40:	4a04      	ldr	r2, [pc, #16]	; (8001b54 <HAL_IncTick+0x24>)
 8001b42:	6013      	str	r3, [r2, #0]
}
 8001b44:	bf00      	nop
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	20000024 	.word	0x20000024
 8001b54:	20004470 	.word	0x20004470

08001b58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b5c:	4b03      	ldr	r3, [pc, #12]	; (8001b6c <HAL_GetTick+0x14>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	20004470 	.word	0x20004470

08001b70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b78:	f7ff ffee 	bl	8001b58 <HAL_GetTick>
 8001b7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b88:	d005      	beq.n	8001b96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b8a:	4b0a      	ldr	r3, [pc, #40]	; (8001bb4 <HAL_Delay+0x44>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	4413      	add	r3, r2
 8001b94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b96:	bf00      	nop
 8001b98:	f7ff ffde 	bl	8001b58 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	68fa      	ldr	r2, [r7, #12]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d8f7      	bhi.n	8001b98 <HAL_Delay+0x28>
  {
  }
}
 8001ba8:	bf00      	nop
 8001baa:	bf00      	nop
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000024 	.word	0x20000024

08001bb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f003 0307 	and.w	r3, r3, #7
 8001bc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bc8:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <__NVIC_SetPriorityGrouping+0x44>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bce:	68ba      	ldr	r2, [r7, #8]
 8001bd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001be0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001be8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bea:	4a04      	ldr	r2, [pc, #16]	; (8001bfc <__NVIC_SetPriorityGrouping+0x44>)
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	60d3      	str	r3, [r2, #12]
}
 8001bf0:	bf00      	nop
 8001bf2:	3714      	adds	r7, #20
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	e000ed00 	.word	0xe000ed00

08001c00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c04:	4b04      	ldr	r3, [pc, #16]	; (8001c18 <__NVIC_GetPriorityGrouping+0x18>)
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	0a1b      	lsrs	r3, r3, #8
 8001c0a:	f003 0307 	and.w	r3, r3, #7
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	db0b      	blt.n	8001c46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c2e:	79fb      	ldrb	r3, [r7, #7]
 8001c30:	f003 021f 	and.w	r2, r3, #31
 8001c34:	4907      	ldr	r1, [pc, #28]	; (8001c54 <__NVIC_EnableIRQ+0x38>)
 8001c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3a:	095b      	lsrs	r3, r3, #5
 8001c3c:	2001      	movs	r0, #1
 8001c3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	e000e100 	.word	0xe000e100

08001c58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	6039      	str	r1, [r7, #0]
 8001c62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	db0a      	blt.n	8001c82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	b2da      	uxtb	r2, r3
 8001c70:	490c      	ldr	r1, [pc, #48]	; (8001ca4 <__NVIC_SetPriority+0x4c>)
 8001c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c76:	0112      	lsls	r2, r2, #4
 8001c78:	b2d2      	uxtb	r2, r2
 8001c7a:	440b      	add	r3, r1
 8001c7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c80:	e00a      	b.n	8001c98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	b2da      	uxtb	r2, r3
 8001c86:	4908      	ldr	r1, [pc, #32]	; (8001ca8 <__NVIC_SetPriority+0x50>)
 8001c88:	79fb      	ldrb	r3, [r7, #7]
 8001c8a:	f003 030f 	and.w	r3, r3, #15
 8001c8e:	3b04      	subs	r3, #4
 8001c90:	0112      	lsls	r2, r2, #4
 8001c92:	b2d2      	uxtb	r2, r2
 8001c94:	440b      	add	r3, r1
 8001c96:	761a      	strb	r2, [r3, #24]
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	e000e100 	.word	0xe000e100
 8001ca8:	e000ed00 	.word	0xe000ed00

08001cac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b089      	sub	sp, #36	; 0x24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	f1c3 0307 	rsb	r3, r3, #7
 8001cc6:	2b04      	cmp	r3, #4
 8001cc8:	bf28      	it	cs
 8001cca:	2304      	movcs	r3, #4
 8001ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	3304      	adds	r3, #4
 8001cd2:	2b06      	cmp	r3, #6
 8001cd4:	d902      	bls.n	8001cdc <NVIC_EncodePriority+0x30>
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	3b03      	subs	r3, #3
 8001cda:	e000      	b.n	8001cde <NVIC_EncodePriority+0x32>
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	43da      	mvns	r2, r3
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	401a      	ands	r2, r3
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfe:	43d9      	mvns	r1, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d04:	4313      	orrs	r3, r2
         );
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3724      	adds	r7, #36	; 0x24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b082      	sub	sp, #8
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f7ff ff4c 	bl	8001bb8 <__NVIC_SetPriorityGrouping>
}
 8001d20:	bf00      	nop
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
 8001d34:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d36:	2300      	movs	r3, #0
 8001d38:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d3a:	f7ff ff61 	bl	8001c00 <__NVIC_GetPriorityGrouping>
 8001d3e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	68b9      	ldr	r1, [r7, #8]
 8001d44:	6978      	ldr	r0, [r7, #20]
 8001d46:	f7ff ffb1 	bl	8001cac <NVIC_EncodePriority>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d50:	4611      	mov	r1, r2
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff ff80 	bl	8001c58 <__NVIC_SetPriority>
}
 8001d58:	bf00      	nop
 8001d5a:	3718      	adds	r7, #24
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff ff54 	bl	8001c1c <__NVIC_EnableIRQ>
}
 8001d74:	bf00      	nop
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d88:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d8a:	f7ff fee5 	bl	8001b58 <HAL_GetTick>
 8001d8e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d008      	beq.n	8001dae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2280      	movs	r2, #128	; 0x80
 8001da0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e052      	b.n	8001e54 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f022 0216 	bic.w	r2, r2, #22
 8001dbc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	695a      	ldr	r2, [r3, #20]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001dcc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d103      	bne.n	8001dde <HAL_DMA_Abort+0x62>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d007      	beq.n	8001dee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f022 0208 	bic.w	r2, r2, #8
 8001dec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f022 0201 	bic.w	r2, r2, #1
 8001dfc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dfe:	e013      	b.n	8001e28 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e00:	f7ff feaa 	bl	8001b58 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b05      	cmp	r3, #5
 8001e0c:	d90c      	bls.n	8001e28 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2220      	movs	r2, #32
 8001e12:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2203      	movs	r2, #3
 8001e18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e015      	b.n	8001e54 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1e4      	bne.n	8001e00 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e3a:	223f      	movs	r2, #63	; 0x3f
 8001e3c:	409a      	lsls	r2, r3
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2201      	movs	r2, #1
 8001e46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d004      	beq.n	8001e7a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2280      	movs	r2, #128	; 0x80
 8001e74:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e00c      	b.n	8001e94 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2205      	movs	r2, #5
 8001e7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f022 0201 	bic.w	r2, r2, #1
 8001e90:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001eae:	b2db      	uxtb	r3, r3
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b089      	sub	sp, #36	; 0x24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eea:	2300      	movs	r3, #0
 8001eec:	61fb      	str	r3, [r7, #28]
 8001eee:	e16b      	b.n	80021c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	697a      	ldr	r2, [r7, #20]
 8001f00:	4013      	ands	r3, r2
 8001f02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	f040 815a 	bne.w	80021c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f003 0303 	and.w	r3, r3, #3
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d005      	beq.n	8001f26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d130      	bne.n	8001f88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	2203      	movs	r2, #3
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	43db      	mvns	r3, r3
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	68da      	ldr	r2, [r3, #12]
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	43db      	mvns	r3, r3
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	091b      	lsrs	r3, r3, #4
 8001f72:	f003 0201 	and.w	r2, r3, #1
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f003 0303 	and.w	r3, r3, #3
 8001f90:	2b03      	cmp	r3, #3
 8001f92:	d017      	beq.n	8001fc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	2203      	movs	r2, #3
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	689a      	ldr	r2, [r3, #8]
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f003 0303 	and.w	r3, r3, #3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d123      	bne.n	8002018 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	08da      	lsrs	r2, r3, #3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	3208      	adds	r2, #8
 8001fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	f003 0307 	and.w	r3, r3, #7
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	220f      	movs	r2, #15
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	43db      	mvns	r3, r3
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	691a      	ldr	r2, [r3, #16]
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	4313      	orrs	r3, r2
 8002008:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	08da      	lsrs	r2, r3, #3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	3208      	adds	r2, #8
 8002012:	69b9      	ldr	r1, [r7, #24]
 8002014:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	2203      	movs	r2, #3
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	43db      	mvns	r3, r3
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	4013      	ands	r3, r2
 800202e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f003 0203 	and.w	r2, r3, #3
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	4313      	orrs	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002054:	2b00      	cmp	r3, #0
 8002056:	f000 80b4 	beq.w	80021c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800205a:	2300      	movs	r3, #0
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	4b60      	ldr	r3, [pc, #384]	; (80021e0 <HAL_GPIO_Init+0x30c>)
 8002060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002062:	4a5f      	ldr	r2, [pc, #380]	; (80021e0 <HAL_GPIO_Init+0x30c>)
 8002064:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002068:	6453      	str	r3, [r2, #68]	; 0x44
 800206a:	4b5d      	ldr	r3, [pc, #372]	; (80021e0 <HAL_GPIO_Init+0x30c>)
 800206c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002076:	4a5b      	ldr	r2, [pc, #364]	; (80021e4 <HAL_GPIO_Init+0x310>)
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	089b      	lsrs	r3, r3, #2
 800207c:	3302      	adds	r3, #2
 800207e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002082:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	f003 0303 	and.w	r3, r3, #3
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	220f      	movs	r2, #15
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	43db      	mvns	r3, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4013      	ands	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a52      	ldr	r2, [pc, #328]	; (80021e8 <HAL_GPIO_Init+0x314>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d02b      	beq.n	80020fa <HAL_GPIO_Init+0x226>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a51      	ldr	r2, [pc, #324]	; (80021ec <HAL_GPIO_Init+0x318>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d025      	beq.n	80020f6 <HAL_GPIO_Init+0x222>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a50      	ldr	r2, [pc, #320]	; (80021f0 <HAL_GPIO_Init+0x31c>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d01f      	beq.n	80020f2 <HAL_GPIO_Init+0x21e>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a4f      	ldr	r2, [pc, #316]	; (80021f4 <HAL_GPIO_Init+0x320>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d019      	beq.n	80020ee <HAL_GPIO_Init+0x21a>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a4e      	ldr	r2, [pc, #312]	; (80021f8 <HAL_GPIO_Init+0x324>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d013      	beq.n	80020ea <HAL_GPIO_Init+0x216>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a4d      	ldr	r2, [pc, #308]	; (80021fc <HAL_GPIO_Init+0x328>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d00d      	beq.n	80020e6 <HAL_GPIO_Init+0x212>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a4c      	ldr	r2, [pc, #304]	; (8002200 <HAL_GPIO_Init+0x32c>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d007      	beq.n	80020e2 <HAL_GPIO_Init+0x20e>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a4b      	ldr	r2, [pc, #300]	; (8002204 <HAL_GPIO_Init+0x330>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d101      	bne.n	80020de <HAL_GPIO_Init+0x20a>
 80020da:	2307      	movs	r3, #7
 80020dc:	e00e      	b.n	80020fc <HAL_GPIO_Init+0x228>
 80020de:	2308      	movs	r3, #8
 80020e0:	e00c      	b.n	80020fc <HAL_GPIO_Init+0x228>
 80020e2:	2306      	movs	r3, #6
 80020e4:	e00a      	b.n	80020fc <HAL_GPIO_Init+0x228>
 80020e6:	2305      	movs	r3, #5
 80020e8:	e008      	b.n	80020fc <HAL_GPIO_Init+0x228>
 80020ea:	2304      	movs	r3, #4
 80020ec:	e006      	b.n	80020fc <HAL_GPIO_Init+0x228>
 80020ee:	2303      	movs	r3, #3
 80020f0:	e004      	b.n	80020fc <HAL_GPIO_Init+0x228>
 80020f2:	2302      	movs	r3, #2
 80020f4:	e002      	b.n	80020fc <HAL_GPIO_Init+0x228>
 80020f6:	2301      	movs	r3, #1
 80020f8:	e000      	b.n	80020fc <HAL_GPIO_Init+0x228>
 80020fa:	2300      	movs	r3, #0
 80020fc:	69fa      	ldr	r2, [r7, #28]
 80020fe:	f002 0203 	and.w	r2, r2, #3
 8002102:	0092      	lsls	r2, r2, #2
 8002104:	4093      	lsls	r3, r2
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4313      	orrs	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800210c:	4935      	ldr	r1, [pc, #212]	; (80021e4 <HAL_GPIO_Init+0x310>)
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	089b      	lsrs	r3, r3, #2
 8002112:	3302      	adds	r3, #2
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800211a:	4b3b      	ldr	r3, [pc, #236]	; (8002208 <HAL_GPIO_Init+0x334>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	43db      	mvns	r3, r3
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4013      	ands	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d003      	beq.n	800213e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	4313      	orrs	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800213e:	4a32      	ldr	r2, [pc, #200]	; (8002208 <HAL_GPIO_Init+0x334>)
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002144:	4b30      	ldr	r3, [pc, #192]	; (8002208 <HAL_GPIO_Init+0x334>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	43db      	mvns	r3, r3
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	4013      	ands	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d003      	beq.n	8002168 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	4313      	orrs	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002168:	4a27      	ldr	r2, [pc, #156]	; (8002208 <HAL_GPIO_Init+0x334>)
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800216e:	4b26      	ldr	r3, [pc, #152]	; (8002208 <HAL_GPIO_Init+0x334>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	43db      	mvns	r3, r3
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	4013      	ands	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d003      	beq.n	8002192 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	4313      	orrs	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002192:	4a1d      	ldr	r2, [pc, #116]	; (8002208 <HAL_GPIO_Init+0x334>)
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002198:	4b1b      	ldr	r3, [pc, #108]	; (8002208 <HAL_GPIO_Init+0x334>)
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	43db      	mvns	r3, r3
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4013      	ands	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d003      	beq.n	80021bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021bc:	4a12      	ldr	r2, [pc, #72]	; (8002208 <HAL_GPIO_Init+0x334>)
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	3301      	adds	r3, #1
 80021c6:	61fb      	str	r3, [r7, #28]
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	2b0f      	cmp	r3, #15
 80021cc:	f67f ae90 	bls.w	8001ef0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021d0:	bf00      	nop
 80021d2:	bf00      	nop
 80021d4:	3724      	adds	r7, #36	; 0x24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	40023800 	.word	0x40023800
 80021e4:	40013800 	.word	0x40013800
 80021e8:	40020000 	.word	0x40020000
 80021ec:	40020400 	.word	0x40020400
 80021f0:	40020800 	.word	0x40020800
 80021f4:	40020c00 	.word	0x40020c00
 80021f8:	40021000 	.word	0x40021000
 80021fc:	40021400 	.word	0x40021400
 8002200:	40021800 	.word	0x40021800
 8002204:	40021c00 	.word	0x40021c00
 8002208:	40013c00 	.word	0x40013c00

0800220c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	460b      	mov	r3, r1
 8002216:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	691a      	ldr	r2, [r3, #16]
 800221c:	887b      	ldrh	r3, [r7, #2]
 800221e:	4013      	ands	r3, r2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d002      	beq.n	800222a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002224:	2301      	movs	r3, #1
 8002226:	73fb      	strb	r3, [r7, #15]
 8002228:	e001      	b.n	800222e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800222a:	2300      	movs	r3, #0
 800222c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800222e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002230:	4618      	mov	r0, r3
 8002232:	3714      	adds	r7, #20
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	460b      	mov	r3, r1
 8002246:	807b      	strh	r3, [r7, #2]
 8002248:	4613      	mov	r3, r2
 800224a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800224c:	787b      	ldrb	r3, [r7, #1]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d003      	beq.n	800225a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002252:	887a      	ldrh	r2, [r7, #2]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002258:	e003      	b.n	8002262 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800225a:	887b      	ldrh	r3, [r7, #2]
 800225c:	041a      	lsls	r2, r3, #16
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	619a      	str	r2, [r3, #24]
}
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
	...

08002270 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e12b      	b.n	80024da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b00      	cmp	r3, #0
 800228c:	d106      	bne.n	800229c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f7fe ff76 	bl	8001188 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2224      	movs	r2, #36	; 0x24
 80022a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f022 0201 	bic.w	r2, r2, #1
 80022b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022d4:	f003 fa0e 	bl	80056f4 <HAL_RCC_GetPCLK1Freq>
 80022d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	4a81      	ldr	r2, [pc, #516]	; (80024e4 <HAL_I2C_Init+0x274>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d807      	bhi.n	80022f4 <HAL_I2C_Init+0x84>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	4a80      	ldr	r2, [pc, #512]	; (80024e8 <HAL_I2C_Init+0x278>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	bf94      	ite	ls
 80022ec:	2301      	movls	r3, #1
 80022ee:	2300      	movhi	r3, #0
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	e006      	b.n	8002302 <HAL_I2C_Init+0x92>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	4a7d      	ldr	r2, [pc, #500]	; (80024ec <HAL_I2C_Init+0x27c>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	bf94      	ite	ls
 80022fc:	2301      	movls	r3, #1
 80022fe:	2300      	movhi	r3, #0
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e0e7      	b.n	80024da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	4a78      	ldr	r2, [pc, #480]	; (80024f0 <HAL_I2C_Init+0x280>)
 800230e:	fba2 2303 	umull	r2, r3, r2, r3
 8002312:	0c9b      	lsrs	r3, r3, #18
 8002314:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68ba      	ldr	r2, [r7, #8]
 8002326:	430a      	orrs	r2, r1
 8002328:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	4a6a      	ldr	r2, [pc, #424]	; (80024e4 <HAL_I2C_Init+0x274>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d802      	bhi.n	8002344 <HAL_I2C_Init+0xd4>
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	3301      	adds	r3, #1
 8002342:	e009      	b.n	8002358 <HAL_I2C_Init+0xe8>
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800234a:	fb02 f303 	mul.w	r3, r2, r3
 800234e:	4a69      	ldr	r2, [pc, #420]	; (80024f4 <HAL_I2C_Init+0x284>)
 8002350:	fba2 2303 	umull	r2, r3, r2, r3
 8002354:	099b      	lsrs	r3, r3, #6
 8002356:	3301      	adds	r3, #1
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	6812      	ldr	r2, [r2, #0]
 800235c:	430b      	orrs	r3, r1
 800235e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800236a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	495c      	ldr	r1, [pc, #368]	; (80024e4 <HAL_I2C_Init+0x274>)
 8002374:	428b      	cmp	r3, r1
 8002376:	d819      	bhi.n	80023ac <HAL_I2C_Init+0x13c>
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	1e59      	subs	r1, r3, #1
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	fbb1 f3f3 	udiv	r3, r1, r3
 8002386:	1c59      	adds	r1, r3, #1
 8002388:	f640 73fc 	movw	r3, #4092	; 0xffc
 800238c:	400b      	ands	r3, r1
 800238e:	2b00      	cmp	r3, #0
 8002390:	d00a      	beq.n	80023a8 <HAL_I2C_Init+0x138>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	1e59      	subs	r1, r3, #1
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	fbb1 f3f3 	udiv	r3, r1, r3
 80023a0:	3301      	adds	r3, #1
 80023a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023a6:	e051      	b.n	800244c <HAL_I2C_Init+0x1dc>
 80023a8:	2304      	movs	r3, #4
 80023aa:	e04f      	b.n	800244c <HAL_I2C_Init+0x1dc>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d111      	bne.n	80023d8 <HAL_I2C_Init+0x168>
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	1e58      	subs	r0, r3, #1
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6859      	ldr	r1, [r3, #4]
 80023bc:	460b      	mov	r3, r1
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	440b      	add	r3, r1
 80023c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80023c6:	3301      	adds	r3, #1
 80023c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	bf0c      	ite	eq
 80023d0:	2301      	moveq	r3, #1
 80023d2:	2300      	movne	r3, #0
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	e012      	b.n	80023fe <HAL_I2C_Init+0x18e>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	1e58      	subs	r0, r3, #1
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6859      	ldr	r1, [r3, #4]
 80023e0:	460b      	mov	r3, r1
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	440b      	add	r3, r1
 80023e6:	0099      	lsls	r1, r3, #2
 80023e8:	440b      	add	r3, r1
 80023ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80023ee:	3301      	adds	r3, #1
 80023f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	bf0c      	ite	eq
 80023f8:	2301      	moveq	r3, #1
 80023fa:	2300      	movne	r3, #0
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <HAL_I2C_Init+0x196>
 8002402:	2301      	movs	r3, #1
 8002404:	e022      	b.n	800244c <HAL_I2C_Init+0x1dc>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d10e      	bne.n	800242c <HAL_I2C_Init+0x1bc>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	1e58      	subs	r0, r3, #1
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6859      	ldr	r1, [r3, #4]
 8002416:	460b      	mov	r3, r1
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	440b      	add	r3, r1
 800241c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002420:	3301      	adds	r3, #1
 8002422:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002426:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800242a:	e00f      	b.n	800244c <HAL_I2C_Init+0x1dc>
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	1e58      	subs	r0, r3, #1
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6859      	ldr	r1, [r3, #4]
 8002434:	460b      	mov	r3, r1
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	440b      	add	r3, r1
 800243a:	0099      	lsls	r1, r3, #2
 800243c:	440b      	add	r3, r1
 800243e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002442:	3301      	adds	r3, #1
 8002444:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002448:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800244c:	6879      	ldr	r1, [r7, #4]
 800244e:	6809      	ldr	r1, [r1, #0]
 8002450:	4313      	orrs	r3, r2
 8002452:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	69da      	ldr	r2, [r3, #28]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a1b      	ldr	r3, [r3, #32]
 8002466:	431a      	orrs	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	430a      	orrs	r2, r1
 800246e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800247a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	6911      	ldr	r1, [r2, #16]
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	68d2      	ldr	r2, [r2, #12]
 8002486:	4311      	orrs	r1, r2
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	6812      	ldr	r2, [r2, #0]
 800248c:	430b      	orrs	r3, r1
 800248e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	695a      	ldr	r2, [r3, #20]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	431a      	orrs	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	430a      	orrs	r2, r1
 80024aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f042 0201 	orr.w	r2, r2, #1
 80024ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2220      	movs	r2, #32
 80024c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	000186a0 	.word	0x000186a0
 80024e8:	001e847f 	.word	0x001e847f
 80024ec:	003d08ff 	.word	0x003d08ff
 80024f0:	431bde83 	.word	0x431bde83
 80024f4:	10624dd3 	.word	0x10624dd3

080024f8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b088      	sub	sp, #32
 80024fc:	af02      	add	r7, sp, #8
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	607a      	str	r2, [r7, #4]
 8002502:	461a      	mov	r2, r3
 8002504:	460b      	mov	r3, r1
 8002506:	817b      	strh	r3, [r7, #10]
 8002508:	4613      	mov	r3, r2
 800250a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800250c:	f7ff fb24 	bl	8001b58 <HAL_GetTick>
 8002510:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b20      	cmp	r3, #32
 800251c:	f040 80e0 	bne.w	80026e0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	9300      	str	r3, [sp, #0]
 8002524:	2319      	movs	r3, #25
 8002526:	2201      	movs	r2, #1
 8002528:	4970      	ldr	r1, [pc, #448]	; (80026ec <HAL_I2C_Master_Transmit+0x1f4>)
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	f002 fa6c 	bl	8004a08 <I2C_WaitOnFlagUntilTimeout>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002536:	2302      	movs	r3, #2
 8002538:	e0d3      	b.n	80026e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002540:	2b01      	cmp	r3, #1
 8002542:	d101      	bne.n	8002548 <HAL_I2C_Master_Transmit+0x50>
 8002544:	2302      	movs	r3, #2
 8002546:	e0cc      	b.n	80026e2 <HAL_I2C_Master_Transmit+0x1ea>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	2b01      	cmp	r3, #1
 800255c:	d007      	beq.n	800256e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f042 0201 	orr.w	r2, r2, #1
 800256c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800257c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2221      	movs	r2, #33	; 0x21
 8002582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2210      	movs	r2, #16
 800258a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	893a      	ldrh	r2, [r7, #8]
 800259e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	4a50      	ldr	r2, [pc, #320]	; (80026f0 <HAL_I2C_Master_Transmit+0x1f8>)
 80025ae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80025b0:	8979      	ldrh	r1, [r7, #10]
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	6a3a      	ldr	r2, [r7, #32]
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f001 ff98 	bl	80044ec <I2C_MasterRequestWrite>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e08d      	b.n	80026e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025c6:	2300      	movs	r3, #0
 80025c8:	613b      	str	r3, [r7, #16]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	695b      	ldr	r3, [r3, #20]
 80025d0:	613b      	str	r3, [r7, #16]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	613b      	str	r3, [r7, #16]
 80025da:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80025dc:	e066      	b.n	80026ac <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025de:	697a      	ldr	r2, [r7, #20]
 80025e0:	6a39      	ldr	r1, [r7, #32]
 80025e2:	68f8      	ldr	r0, [r7, #12]
 80025e4:	f002 fae6 	bl	8004bb4 <I2C_WaitOnTXEFlagUntilTimeout>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00d      	beq.n	800260a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	2b04      	cmp	r3, #4
 80025f4:	d107      	bne.n	8002606 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002604:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e06b      	b.n	80026e2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260e:	781a      	ldrb	r2, [r3, #0]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261a:	1c5a      	adds	r2, r3, #1
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002624:	b29b      	uxth	r3, r3
 8002626:	3b01      	subs	r3, #1
 8002628:	b29a      	uxth	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002632:	3b01      	subs	r3, #1
 8002634:	b29a      	uxth	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	695b      	ldr	r3, [r3, #20]
 8002640:	f003 0304 	and.w	r3, r3, #4
 8002644:	2b04      	cmp	r3, #4
 8002646:	d11b      	bne.n	8002680 <HAL_I2C_Master_Transmit+0x188>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800264c:	2b00      	cmp	r3, #0
 800264e:	d017      	beq.n	8002680 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002654:	781a      	ldrb	r2, [r3, #0]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002660:	1c5a      	adds	r2, r3, #1
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800266a:	b29b      	uxth	r3, r3
 800266c:	3b01      	subs	r3, #1
 800266e:	b29a      	uxth	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002678:	3b01      	subs	r3, #1
 800267a:	b29a      	uxth	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002680:	697a      	ldr	r2, [r7, #20]
 8002682:	6a39      	ldr	r1, [r7, #32]
 8002684:	68f8      	ldr	r0, [r7, #12]
 8002686:	f002 fad6 	bl	8004c36 <I2C_WaitOnBTFFlagUntilTimeout>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d00d      	beq.n	80026ac <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002694:	2b04      	cmp	r3, #4
 8002696:	d107      	bne.n	80026a8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026a6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e01a      	b.n	80026e2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d194      	bne.n	80025de <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2220      	movs	r2, #32
 80026c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80026dc:	2300      	movs	r3, #0
 80026de:	e000      	b.n	80026e2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80026e0:	2302      	movs	r3, #2
  }
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3718      	adds	r7, #24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	00100002 	.word	0x00100002
 80026f0:	ffff0000 	.word	0xffff0000

080026f4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b08c      	sub	sp, #48	; 0x30
 80026f8:	af02      	add	r7, sp, #8
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	607a      	str	r2, [r7, #4]
 80026fe:	461a      	mov	r2, r3
 8002700:	460b      	mov	r3, r1
 8002702:	817b      	strh	r3, [r7, #10]
 8002704:	4613      	mov	r3, r2
 8002706:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002708:	f7ff fa26 	bl	8001b58 <HAL_GetTick>
 800270c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b20      	cmp	r3, #32
 8002718:	f040 820b 	bne.w	8002b32 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271e:	9300      	str	r3, [sp, #0]
 8002720:	2319      	movs	r3, #25
 8002722:	2201      	movs	r2, #1
 8002724:	497c      	ldr	r1, [pc, #496]	; (8002918 <HAL_I2C_Master_Receive+0x224>)
 8002726:	68f8      	ldr	r0, [r7, #12]
 8002728:	f002 f96e 	bl	8004a08 <I2C_WaitOnFlagUntilTimeout>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002732:	2302      	movs	r3, #2
 8002734:	e1fe      	b.n	8002b34 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800273c:	2b01      	cmp	r3, #1
 800273e:	d101      	bne.n	8002744 <HAL_I2C_Master_Receive+0x50>
 8002740:	2302      	movs	r3, #2
 8002742:	e1f7      	b.n	8002b34 <HAL_I2C_Master_Receive+0x440>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b01      	cmp	r3, #1
 8002758:	d007      	beq.n	800276a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f042 0201 	orr.w	r2, r2, #1
 8002768:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002778:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2222      	movs	r2, #34	; 0x22
 800277e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2210      	movs	r2, #16
 8002786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2200      	movs	r2, #0
 800278e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	893a      	ldrh	r2, [r7, #8]
 800279a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	4a5c      	ldr	r2, [pc, #368]	; (800291c <HAL_I2C_Master_Receive+0x228>)
 80027aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80027ac:	8979      	ldrh	r1, [r7, #10]
 80027ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f001 ff1c 	bl	80045f0 <I2C_MasterRequestRead>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e1b8      	b.n	8002b34 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d113      	bne.n	80027f2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027ca:	2300      	movs	r3, #0
 80027cc:	623b      	str	r3, [r7, #32]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	695b      	ldr	r3, [r3, #20]
 80027d4:	623b      	str	r3, [r7, #32]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	623b      	str	r3, [r7, #32]
 80027de:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ee:	601a      	str	r2, [r3, #0]
 80027f0:	e18c      	b.n	8002b0c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d11b      	bne.n	8002832 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002808:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800280a:	2300      	movs	r3, #0
 800280c:	61fb      	str	r3, [r7, #28]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	61fb      	str	r3, [r7, #28]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	61fb      	str	r3, [r7, #28]
 800281e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	e16c      	b.n	8002b0c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002836:	2b02      	cmp	r3, #2
 8002838:	d11b      	bne.n	8002872 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002848:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002858:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800285a:	2300      	movs	r3, #0
 800285c:	61bb      	str	r3, [r7, #24]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	61bb      	str	r3, [r7, #24]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	61bb      	str	r3, [r7, #24]
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	e14c      	b.n	8002b0c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002880:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002882:	2300      	movs	r3, #0
 8002884:	617b      	str	r3, [r7, #20]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	617b      	str	r3, [r7, #20]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	617b      	str	r3, [r7, #20]
 8002896:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002898:	e138      	b.n	8002b0c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800289e:	2b03      	cmp	r3, #3
 80028a0:	f200 80f1 	bhi.w	8002a86 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d123      	bne.n	80028f4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	f002 fa33 	bl	8004d1c <I2C_WaitOnRXNEFlagUntilTimeout>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e139      	b.n	8002b34 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	691a      	ldr	r2, [r3, #16]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ca:	b2d2      	uxtb	r2, r2
 80028cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d2:	1c5a      	adds	r2, r3, #1
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028dc:	3b01      	subs	r3, #1
 80028de:	b29a      	uxth	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	3b01      	subs	r3, #1
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028f2:	e10b      	b.n	8002b0c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d14e      	bne.n	800299a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002902:	2200      	movs	r2, #0
 8002904:	4906      	ldr	r1, [pc, #24]	; (8002920 <HAL_I2C_Master_Receive+0x22c>)
 8002906:	68f8      	ldr	r0, [r7, #12]
 8002908:	f002 f87e 	bl	8004a08 <I2C_WaitOnFlagUntilTimeout>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d008      	beq.n	8002924 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e10e      	b.n	8002b34 <HAL_I2C_Master_Receive+0x440>
 8002916:	bf00      	nop
 8002918:	00100002 	.word	0x00100002
 800291c:	ffff0000 	.word	0xffff0000
 8002920:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002932:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	691a      	ldr	r2, [r3, #16]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293e:	b2d2      	uxtb	r2, r2
 8002940:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002946:	1c5a      	adds	r2, r3, #1
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002950:	3b01      	subs	r3, #1
 8002952:	b29a      	uxth	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800295c:	b29b      	uxth	r3, r3
 800295e:	3b01      	subs	r3, #1
 8002960:	b29a      	uxth	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	691a      	ldr	r2, [r3, #16]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002978:	1c5a      	adds	r2, r3, #1
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002982:	3b01      	subs	r3, #1
 8002984:	b29a      	uxth	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800298e:	b29b      	uxth	r3, r3
 8002990:	3b01      	subs	r3, #1
 8002992:	b29a      	uxth	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002998:	e0b8      	b.n	8002b0c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800299a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299c:	9300      	str	r3, [sp, #0]
 800299e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a0:	2200      	movs	r2, #0
 80029a2:	4966      	ldr	r1, [pc, #408]	; (8002b3c <HAL_I2C_Master_Receive+0x448>)
 80029a4:	68f8      	ldr	r0, [r7, #12]
 80029a6:	f002 f82f 	bl	8004a08 <I2C_WaitOnFlagUntilTimeout>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e0bf      	b.n	8002b34 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	691a      	ldr	r2, [r3, #16]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ce:	b2d2      	uxtb	r2, r2
 80029d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d6:	1c5a      	adds	r2, r3, #1
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e0:	3b01      	subs	r3, #1
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	3b01      	subs	r3, #1
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f8:	9300      	str	r3, [sp, #0]
 80029fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029fc:	2200      	movs	r2, #0
 80029fe:	494f      	ldr	r1, [pc, #316]	; (8002b3c <HAL_I2C_Master_Receive+0x448>)
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f002 f801 	bl	8004a08 <I2C_WaitOnFlagUntilTimeout>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d001      	beq.n	8002a10 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e091      	b.n	8002b34 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	691a      	ldr	r2, [r3, #16]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2a:	b2d2      	uxtb	r2, r2
 8002a2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a32:	1c5a      	adds	r2, r3, #1
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	691a      	ldr	r2, [r3, #16]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5c:	b2d2      	uxtb	r2, r2
 8002a5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a64:	1c5a      	adds	r2, r3, #1
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a84:	e042      	b.n	8002b0c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a8a:	68f8      	ldr	r0, [r7, #12]
 8002a8c:	f002 f946 	bl	8004d1c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e04c      	b.n	8002b34 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	691a      	ldr	r2, [r3, #16]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa4:	b2d2      	uxtb	r2, r2
 8002aa6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aac:	1c5a      	adds	r2, r3, #1
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	f003 0304 	and.w	r3, r3, #4
 8002ad6:	2b04      	cmp	r3, #4
 8002ad8:	d118      	bne.n	8002b0c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	691a      	ldr	r2, [r3, #16]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae4:	b2d2      	uxtb	r2, r2
 8002ae6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aec:	1c5a      	adds	r2, r3, #1
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002af6:	3b01      	subs	r3, #1
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	3b01      	subs	r3, #1
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	f47f aec2 	bne.w	800289a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2220      	movs	r2, #32
 8002b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	e000      	b.n	8002b34 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002b32:	2302      	movs	r3, #2
  }
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3728      	adds	r7, #40	; 0x28
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	00010004 	.word	0x00010004

08002b40 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b088      	sub	sp, #32
 8002b44:	af02      	add	r7, sp, #8
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	4608      	mov	r0, r1
 8002b4a:	4611      	mov	r1, r2
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	4603      	mov	r3, r0
 8002b50:	817b      	strh	r3, [r7, #10]
 8002b52:	460b      	mov	r3, r1
 8002b54:	813b      	strh	r3, [r7, #8]
 8002b56:	4613      	mov	r3, r2
 8002b58:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b5a:	f7fe fffd 	bl	8001b58 <HAL_GetTick>
 8002b5e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	2b20      	cmp	r3, #32
 8002b6a:	f040 80d9 	bne.w	8002d20 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	9300      	str	r3, [sp, #0]
 8002b72:	2319      	movs	r3, #25
 8002b74:	2201      	movs	r2, #1
 8002b76:	496d      	ldr	r1, [pc, #436]	; (8002d2c <HAL_I2C_Mem_Write+0x1ec>)
 8002b78:	68f8      	ldr	r0, [r7, #12]
 8002b7a:	f001 ff45 	bl	8004a08 <I2C_WaitOnFlagUntilTimeout>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002b84:	2302      	movs	r3, #2
 8002b86:	e0cc      	b.n	8002d22 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d101      	bne.n	8002b96 <HAL_I2C_Mem_Write+0x56>
 8002b92:	2302      	movs	r3, #2
 8002b94:	e0c5      	b.n	8002d22 <HAL_I2C_Mem_Write+0x1e2>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d007      	beq.n	8002bbc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f042 0201 	orr.w	r2, r2, #1
 8002bba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2221      	movs	r2, #33	; 0x21
 8002bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2240      	movs	r2, #64	; 0x40
 8002bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6a3a      	ldr	r2, [r7, #32]
 8002be6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002bec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	4a4d      	ldr	r2, [pc, #308]	; (8002d30 <HAL_I2C_Mem_Write+0x1f0>)
 8002bfc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002bfe:	88f8      	ldrh	r0, [r7, #6]
 8002c00:	893a      	ldrh	r2, [r7, #8]
 8002c02:	8979      	ldrh	r1, [r7, #10]
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	9301      	str	r3, [sp, #4]
 8002c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c0a:	9300      	str	r3, [sp, #0]
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f001 fdbc 	bl	800478c <I2C_RequestMemoryWrite>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d052      	beq.n	8002cc0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e081      	b.n	8002d22 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f001 ffc6 	bl	8004bb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00d      	beq.n	8002c4a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	2b04      	cmp	r3, #4
 8002c34:	d107      	bne.n	8002c46 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c44:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e06b      	b.n	8002d22 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4e:	781a      	ldrb	r2, [r3, #0]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5a:	1c5a      	adds	r2, r3, #1
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c64:	3b01      	subs	r3, #1
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	3b01      	subs	r3, #1
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	695b      	ldr	r3, [r3, #20]
 8002c80:	f003 0304 	and.w	r3, r3, #4
 8002c84:	2b04      	cmp	r3, #4
 8002c86:	d11b      	bne.n	8002cc0 <HAL_I2C_Mem_Write+0x180>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d017      	beq.n	8002cc0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c94:	781a      	ldrb	r2, [r3, #0]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca0:	1c5a      	adds	r2, r3, #1
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002caa:	3b01      	subs	r3, #1
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	3b01      	subs	r3, #1
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d1aa      	bne.n	8002c1e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cc8:	697a      	ldr	r2, [r7, #20]
 8002cca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ccc:	68f8      	ldr	r0, [r7, #12]
 8002cce:	f001 ffb2 	bl	8004c36 <I2C_WaitOnBTFFlagUntilTimeout>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00d      	beq.n	8002cf4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cdc:	2b04      	cmp	r3, #4
 8002cde:	d107      	bne.n	8002cf0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cee:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e016      	b.n	8002d22 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2220      	movs	r2, #32
 8002d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	e000      	b.n	8002d22 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002d20:	2302      	movs	r3, #2
  }
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3718      	adds	r7, #24
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	00100002 	.word	0x00100002
 8002d30:	ffff0000 	.word	0xffff0000

08002d34 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b088      	sub	sp, #32
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d54:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d5c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002d5e:	7bfb      	ldrb	r3, [r7, #15]
 8002d60:	2b10      	cmp	r3, #16
 8002d62:	d003      	beq.n	8002d6c <HAL_I2C_EV_IRQHandler+0x38>
 8002d64:	7bfb      	ldrb	r3, [r7, #15]
 8002d66:	2b40      	cmp	r3, #64	; 0x40
 8002d68:	f040 80c1 	bne.w	8002eee <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d10d      	bne.n	8002da2 <HAL_I2C_EV_IRQHandler+0x6e>
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002d8c:	d003      	beq.n	8002d96 <HAL_I2C_EV_IRQHandler+0x62>
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002d94:	d101      	bne.n	8002d9a <HAL_I2C_EV_IRQHandler+0x66>
 8002d96:	2301      	movs	r3, #1
 8002d98:	e000      	b.n	8002d9c <HAL_I2C_EV_IRQHandler+0x68>
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	f000 8132 	beq.w	8003006 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	f003 0301 	and.w	r3, r3, #1
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00c      	beq.n	8002dc6 <HAL_I2C_EV_IRQHandler+0x92>
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	0a5b      	lsrs	r3, r3, #9
 8002db0:	f003 0301 	and.w	r3, r3, #1
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d006      	beq.n	8002dc6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f002 f834 	bl	8004e26 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 fd79 	bl	80038b6 <I2C_Master_SB>
 8002dc4:	e092      	b.n	8002eec <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	08db      	lsrs	r3, r3, #3
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d009      	beq.n	8002de6 <HAL_I2C_EV_IRQHandler+0xb2>
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	0a5b      	lsrs	r3, r3, #9
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d003      	beq.n	8002de6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 fdef 	bl	80039c2 <I2C_Master_ADD10>
 8002de4:	e082      	b.n	8002eec <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	085b      	lsrs	r3, r3, #1
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d009      	beq.n	8002e06 <HAL_I2C_EV_IRQHandler+0xd2>
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	0a5b      	lsrs	r3, r3, #9
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d003      	beq.n	8002e06 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 fe09 	bl	8003a16 <I2C_Master_ADDR>
 8002e04:	e072      	b.n	8002eec <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	089b      	lsrs	r3, r3, #2
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d03b      	beq.n	8002e8a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e20:	f000 80f3 	beq.w	800300a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	09db      	lsrs	r3, r3, #7
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00f      	beq.n	8002e50 <HAL_I2C_EV_IRQHandler+0x11c>
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	0a9b      	lsrs	r3, r3, #10
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d009      	beq.n	8002e50 <HAL_I2C_EV_IRQHandler+0x11c>
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	089b      	lsrs	r3, r3, #2
 8002e40:	f003 0301 	and.w	r3, r3, #1
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d103      	bne.n	8002e50 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f000 f9f3 	bl	8003234 <I2C_MasterTransmit_TXE>
 8002e4e:	e04d      	b.n	8002eec <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	089b      	lsrs	r3, r3, #2
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f000 80d6 	beq.w	800300a <HAL_I2C_EV_IRQHandler+0x2d6>
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	0a5b      	lsrs	r3, r3, #9
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	f000 80cf 	beq.w	800300a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002e6c:	7bbb      	ldrb	r3, [r7, #14]
 8002e6e:	2b21      	cmp	r3, #33	; 0x21
 8002e70:	d103      	bne.n	8002e7a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 fa7a 	bl	800336c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e78:	e0c7      	b.n	800300a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002e7a:	7bfb      	ldrb	r3, [r7, #15]
 8002e7c:	2b40      	cmp	r3, #64	; 0x40
 8002e7e:	f040 80c4 	bne.w	800300a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 fae8 	bl	8003458 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e88:	e0bf      	b.n	800300a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e98:	f000 80b7 	beq.w	800300a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	099b      	lsrs	r3, r3, #6
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00f      	beq.n	8002ec8 <HAL_I2C_EV_IRQHandler+0x194>
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	0a9b      	lsrs	r3, r3, #10
 8002eac:	f003 0301 	and.w	r3, r3, #1
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d009      	beq.n	8002ec8 <HAL_I2C_EV_IRQHandler+0x194>
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	089b      	lsrs	r3, r3, #2
 8002eb8:	f003 0301 	and.w	r3, r3, #1
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d103      	bne.n	8002ec8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 fb5d 	bl	8003580 <I2C_MasterReceive_RXNE>
 8002ec6:	e011      	b.n	8002eec <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	089b      	lsrs	r3, r3, #2
 8002ecc:	f003 0301 	and.w	r3, r3, #1
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f000 809a 	beq.w	800300a <HAL_I2C_EV_IRQHandler+0x2d6>
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	0a5b      	lsrs	r3, r3, #9
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	f000 8093 	beq.w	800300a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 fbfc 	bl	80036e2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002eea:	e08e      	b.n	800300a <HAL_I2C_EV_IRQHandler+0x2d6>
 8002eec:	e08d      	b.n	800300a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d004      	beq.n	8002f00 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	695b      	ldr	r3, [r3, #20]
 8002efc:	61fb      	str	r3, [r7, #28]
 8002efe:	e007      	b.n	8002f10 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	085b      	lsrs	r3, r3, #1
 8002f14:	f003 0301 	and.w	r3, r3, #1
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d012      	beq.n	8002f42 <HAL_I2C_EV_IRQHandler+0x20e>
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	0a5b      	lsrs	r3, r3, #9
 8002f20:	f003 0301 	and.w	r3, r3, #1
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d00c      	beq.n	8002f42 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d003      	beq.n	8002f38 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002f38:	69b9      	ldr	r1, [r7, #24]
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 ffba 	bl	8003eb4 <I2C_Slave_ADDR>
 8002f40:	e066      	b.n	8003010 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	091b      	lsrs	r3, r3, #4
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d009      	beq.n	8002f62 <HAL_I2C_EV_IRQHandler+0x22e>
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	0a5b      	lsrs	r3, r3, #9
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d003      	beq.n	8002f62 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 fff4 	bl	8003f48 <I2C_Slave_STOPF>
 8002f60:	e056      	b.n	8003010 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002f62:	7bbb      	ldrb	r3, [r7, #14]
 8002f64:	2b21      	cmp	r3, #33	; 0x21
 8002f66:	d002      	beq.n	8002f6e <HAL_I2C_EV_IRQHandler+0x23a>
 8002f68:	7bbb      	ldrb	r3, [r7, #14]
 8002f6a:	2b29      	cmp	r3, #41	; 0x29
 8002f6c:	d125      	bne.n	8002fba <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	09db      	lsrs	r3, r3, #7
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00f      	beq.n	8002f9a <HAL_I2C_EV_IRQHandler+0x266>
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	0a9b      	lsrs	r3, r3, #10
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d009      	beq.n	8002f9a <HAL_I2C_EV_IRQHandler+0x266>
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	089b      	lsrs	r3, r3, #2
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d103      	bne.n	8002f9a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 fed0 	bl	8003d38 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f98:	e039      	b.n	800300e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	089b      	lsrs	r3, r3, #2
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d033      	beq.n	800300e <HAL_I2C_EV_IRQHandler+0x2da>
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	0a5b      	lsrs	r3, r3, #9
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d02d      	beq.n	800300e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 fefd 	bl	8003db2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002fb8:	e029      	b.n	800300e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	099b      	lsrs	r3, r3, #6
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d00f      	beq.n	8002fe6 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	0a9b      	lsrs	r3, r3, #10
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d009      	beq.n	8002fe6 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	089b      	lsrs	r3, r3, #2
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d103      	bne.n	8002fe6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 ff08 	bl	8003df4 <I2C_SlaveReceive_RXNE>
 8002fe4:	e014      	b.n	8003010 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	089b      	lsrs	r3, r3, #2
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00e      	beq.n	8003010 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	0a5b      	lsrs	r3, r3, #9
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d008      	beq.n	8003010 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 ff36 	bl	8003e70 <I2C_SlaveReceive_BTF>
 8003004:	e004      	b.n	8003010 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003006:	bf00      	nop
 8003008:	e002      	b.n	8003010 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800300a:	bf00      	nop
 800300c:	e000      	b.n	8003010 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800300e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003010:	3720      	adds	r7, #32
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b08a      	sub	sp, #40	; 0x28
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	695b      	ldr	r3, [r3, #20]
 8003024:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800302e:	2300      	movs	r3, #0
 8003030:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003038:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800303a:	6a3b      	ldr	r3, [r7, #32]
 800303c:	0a1b      	lsrs	r3, r3, #8
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b00      	cmp	r3, #0
 8003044:	d00e      	beq.n	8003064 <HAL_I2C_ER_IRQHandler+0x4e>
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	0a1b      	lsrs	r3, r3, #8
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b00      	cmp	r3, #0
 8003050:	d008      	beq.n	8003064 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003054:	f043 0301 	orr.w	r3, r3, #1
 8003058:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003062:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003064:	6a3b      	ldr	r3, [r7, #32]
 8003066:	0a5b      	lsrs	r3, r3, #9
 8003068:	f003 0301 	and.w	r3, r3, #1
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00e      	beq.n	800308e <HAL_I2C_ER_IRQHandler+0x78>
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	0a1b      	lsrs	r3, r3, #8
 8003074:	f003 0301 	and.w	r3, r3, #1
 8003078:	2b00      	cmp	r3, #0
 800307a:	d008      	beq.n	800308e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800307c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307e:	f043 0302 	orr.w	r3, r3, #2
 8003082:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800308c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800308e:	6a3b      	ldr	r3, [r7, #32]
 8003090:	0a9b      	lsrs	r3, r3, #10
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	2b00      	cmp	r3, #0
 8003098:	d03f      	beq.n	800311a <HAL_I2C_ER_IRQHandler+0x104>
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	0a1b      	lsrs	r3, r3, #8
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d039      	beq.n	800311a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80030a6:	7efb      	ldrb	r3, [r7, #27]
 80030a8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030b8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030be:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80030c0:	7ebb      	ldrb	r3, [r7, #26]
 80030c2:	2b20      	cmp	r3, #32
 80030c4:	d112      	bne.n	80030ec <HAL_I2C_ER_IRQHandler+0xd6>
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d10f      	bne.n	80030ec <HAL_I2C_ER_IRQHandler+0xd6>
 80030cc:	7cfb      	ldrb	r3, [r7, #19]
 80030ce:	2b21      	cmp	r3, #33	; 0x21
 80030d0:	d008      	beq.n	80030e4 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80030d2:	7cfb      	ldrb	r3, [r7, #19]
 80030d4:	2b29      	cmp	r3, #41	; 0x29
 80030d6:	d005      	beq.n	80030e4 <HAL_I2C_ER_IRQHandler+0xce>
 80030d8:	7cfb      	ldrb	r3, [r7, #19]
 80030da:	2b28      	cmp	r3, #40	; 0x28
 80030dc:	d106      	bne.n	80030ec <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2b21      	cmp	r3, #33	; 0x21
 80030e2:	d103      	bne.n	80030ec <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f001 f85f 	bl	80041a8 <I2C_Slave_AF>
 80030ea:	e016      	b.n	800311a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030f4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80030f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f8:	f043 0304 	orr.w	r3, r3, #4
 80030fc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80030fe:	7efb      	ldrb	r3, [r7, #27]
 8003100:	2b10      	cmp	r3, #16
 8003102:	d002      	beq.n	800310a <HAL_I2C_ER_IRQHandler+0xf4>
 8003104:	7efb      	ldrb	r3, [r7, #27]
 8003106:	2b40      	cmp	r3, #64	; 0x40
 8003108:	d107      	bne.n	800311a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003118:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800311a:	6a3b      	ldr	r3, [r7, #32]
 800311c:	0adb      	lsrs	r3, r3, #11
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00e      	beq.n	8003144 <HAL_I2C_ER_IRQHandler+0x12e>
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	0a1b      	lsrs	r3, r3, #8
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	2b00      	cmp	r3, #0
 8003130:	d008      	beq.n	8003144 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003134:	f043 0308 	orr.w	r3, r3, #8
 8003138:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003142:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003146:	2b00      	cmp	r3, #0
 8003148:	d008      	beq.n	800315c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800314e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003150:	431a      	orrs	r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f001 f896 	bl	8004288 <I2C_ITError>
  }
}
 800315c:	bf00      	nop
 800315e:	3728      	adds	r7, #40	; 0x28
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	460b      	mov	r3, r1
 80031be:	70fb      	strb	r3, [r7, #3]
 80031c0:	4613      	mov	r3, r2
 80031c2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003200:	bf00      	nop
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003228:	bf00      	nop
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003242:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800324a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003250:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003256:	2b00      	cmp	r3, #0
 8003258:	d150      	bne.n	80032fc <I2C_MasterTransmit_TXE+0xc8>
 800325a:	7bfb      	ldrb	r3, [r7, #15]
 800325c:	2b21      	cmp	r3, #33	; 0x21
 800325e:	d14d      	bne.n	80032fc <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	2b08      	cmp	r3, #8
 8003264:	d01d      	beq.n	80032a2 <I2C_MasterTransmit_TXE+0x6e>
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	2b20      	cmp	r3, #32
 800326a:	d01a      	beq.n	80032a2 <I2C_MasterTransmit_TXE+0x6e>
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003272:	d016      	beq.n	80032a2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003282:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2211      	movs	r2, #17
 8003288:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2220      	movs	r2, #32
 8003296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7ff ff62 	bl	8003164 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80032a0:	e060      	b.n	8003364 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	685a      	ldr	r2, [r3, #4]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80032b0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032c0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2220      	movs	r2, #32
 80032cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b40      	cmp	r3, #64	; 0x40
 80032da:	d107      	bne.n	80032ec <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f7ff ff7d 	bl	80031e4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80032ea:	e03b      	b.n	8003364 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f7ff ff35 	bl	8003164 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80032fa:	e033      	b.n	8003364 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80032fc:	7bfb      	ldrb	r3, [r7, #15]
 80032fe:	2b21      	cmp	r3, #33	; 0x21
 8003300:	d005      	beq.n	800330e <I2C_MasterTransmit_TXE+0xda>
 8003302:	7bbb      	ldrb	r3, [r7, #14]
 8003304:	2b40      	cmp	r3, #64	; 0x40
 8003306:	d12d      	bne.n	8003364 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003308:	7bfb      	ldrb	r3, [r7, #15]
 800330a:	2b22      	cmp	r3, #34	; 0x22
 800330c:	d12a      	bne.n	8003364 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003312:	b29b      	uxth	r3, r3
 8003314:	2b00      	cmp	r3, #0
 8003316:	d108      	bne.n	800332a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	685a      	ldr	r2, [r3, #4]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003326:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003328:	e01c      	b.n	8003364 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b40      	cmp	r3, #64	; 0x40
 8003334:	d103      	bne.n	800333e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 f88e 	bl	8003458 <I2C_MemoryTransmit_TXE_BTF>
}
 800333c:	e012      	b.n	8003364 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003342:	781a      	ldrb	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334e:	1c5a      	adds	r2, r3, #1
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003358:	b29b      	uxth	r3, r3
 800335a:	3b01      	subs	r3, #1
 800335c:	b29a      	uxth	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003362:	e7ff      	b.n	8003364 <I2C_MasterTransmit_TXE+0x130>
 8003364:	bf00      	nop
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003378:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b21      	cmp	r3, #33	; 0x21
 8003384:	d164      	bne.n	8003450 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800338a:	b29b      	uxth	r3, r3
 800338c:	2b00      	cmp	r3, #0
 800338e:	d012      	beq.n	80033b6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003394:	781a      	ldrb	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a0:	1c5a      	adds	r2, r3, #1
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	3b01      	subs	r3, #1
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80033b4:	e04c      	b.n	8003450 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2b08      	cmp	r3, #8
 80033ba:	d01d      	beq.n	80033f8 <I2C_MasterTransmit_BTF+0x8c>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2b20      	cmp	r3, #32
 80033c0:	d01a      	beq.n	80033f8 <I2C_MasterTransmit_BTF+0x8c>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033c8:	d016      	beq.n	80033f8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	685a      	ldr	r2, [r3, #4]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80033d8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2211      	movs	r2, #17
 80033de:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2220      	movs	r2, #32
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f7ff feb7 	bl	8003164 <HAL_I2C_MasterTxCpltCallback>
}
 80033f6:	e02b      	b.n	8003450 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	685a      	ldr	r2, [r3, #4]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003406:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003416:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2220      	movs	r2, #32
 8003422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b40      	cmp	r3, #64	; 0x40
 8003430:	d107      	bne.n	8003442 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f7ff fed2 	bl	80031e4 <HAL_I2C_MemTxCpltCallback>
}
 8003440:	e006      	b.n	8003450 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f7ff fe8a 	bl	8003164 <HAL_I2C_MasterTxCpltCallback>
}
 8003450:	bf00      	nop
 8003452:	3710      	adds	r7, #16
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003466:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800346c:	2b00      	cmp	r3, #0
 800346e:	d11d      	bne.n	80034ac <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003474:	2b01      	cmp	r3, #1
 8003476:	d10b      	bne.n	8003490 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800347c:	b2da      	uxtb	r2, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003488:	1c9a      	adds	r2, r3, #2
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800348e:	e073      	b.n	8003578 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003494:	b29b      	uxth	r3, r3
 8003496:	121b      	asrs	r3, r3, #8
 8003498:	b2da      	uxtb	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034a4:	1c5a      	adds	r2, r3, #1
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80034aa:	e065      	b.n	8003578 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d10b      	bne.n	80034cc <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034b8:	b2da      	uxtb	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034c4:	1c5a      	adds	r2, r3, #1
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80034ca:	e055      	b.n	8003578 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d151      	bne.n	8003578 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80034d4:	7bfb      	ldrb	r3, [r7, #15]
 80034d6:	2b22      	cmp	r3, #34	; 0x22
 80034d8:	d10d      	bne.n	80034f6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034e8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ee:	1c5a      	adds	r2, r3, #1
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80034f4:	e040      	b.n	8003578 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d015      	beq.n	800352c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003500:	7bfb      	ldrb	r3, [r7, #15]
 8003502:	2b21      	cmp	r3, #33	; 0x21
 8003504:	d112      	bne.n	800352c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350a:	781a      	ldrb	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003516:	1c5a      	adds	r2, r3, #1
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003520:	b29b      	uxth	r3, r3
 8003522:	3b01      	subs	r3, #1
 8003524:	b29a      	uxth	r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800352a:	e025      	b.n	8003578 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003530:	b29b      	uxth	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d120      	bne.n	8003578 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003536:	7bfb      	ldrb	r3, [r7, #15]
 8003538:	2b21      	cmp	r3, #33	; 0x21
 800353a:	d11d      	bne.n	8003578 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	685a      	ldr	r2, [r3, #4]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800354a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800355a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2220      	movs	r2, #32
 8003566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f7ff fe36 	bl	80031e4 <HAL_I2C_MemTxCpltCallback>
}
 8003578:	bf00      	nop
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2b22      	cmp	r3, #34	; 0x22
 8003592:	f040 80a2 	bne.w	80036da <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800359a:	b29b      	uxth	r3, r3
 800359c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2b03      	cmp	r3, #3
 80035a2:	d921      	bls.n	80035e8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	691a      	ldr	r2, [r3, #16]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ae:	b2d2      	uxtb	r2, r2
 80035b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b6:	1c5a      	adds	r2, r3, #1
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	3b01      	subs	r3, #1
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	2b03      	cmp	r3, #3
 80035d2:	f040 8082 	bne.w	80036da <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	685a      	ldr	r2, [r3, #4]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035e4:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80035e6:	e078      	b.n	80036da <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d074      	beq.n	80036da <I2C_MasterReceive_RXNE+0x15a>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d002      	beq.n	80035fc <I2C_MasterReceive_RXNE+0x7c>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d16e      	bne.n	80036da <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f001 fb5b 	bl	8004cb8 <I2C_WaitOnSTOPRequestThroughIT>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d142      	bne.n	800368e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003616:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	685a      	ldr	r2, [r3, #4]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003626:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	691a      	ldr	r2, [r3, #16]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003632:	b2d2      	uxtb	r2, r2
 8003634:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363a:	1c5a      	adds	r2, r3, #1
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003644:	b29b      	uxth	r3, r3
 8003646:	3b01      	subs	r3, #1
 8003648:	b29a      	uxth	r2, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2220      	movs	r2, #32
 8003652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b40      	cmp	r3, #64	; 0x40
 8003660:	d10a      	bne.n	8003678 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f7ff fdc1 	bl	80031f8 <HAL_I2C_MemRxCpltCallback>
}
 8003676:	e030      	b.n	80036da <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2212      	movs	r2, #18
 8003684:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f7ff fd76 	bl	8003178 <HAL_I2C_MasterRxCpltCallback>
}
 800368c:	e025      	b.n	80036da <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800369c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	691a      	ldr	r2, [r3, #16]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a8:	b2d2      	uxtb	r2, r2
 80036aa:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b0:	1c5a      	adds	r2, r3, #1
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	3b01      	subs	r3, #1
 80036be:	b29a      	uxth	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2220      	movs	r2, #32
 80036c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f7ff fd99 	bl	800320c <HAL_I2C_ErrorCallback>
}
 80036da:	bf00      	nop
 80036dc:	3710      	adds	r7, #16
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b084      	sub	sp, #16
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ee:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	2b04      	cmp	r3, #4
 80036f8:	d11b      	bne.n	8003732 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	685a      	ldr	r2, [r3, #4]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003708:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	691a      	ldr	r2, [r3, #16]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003714:	b2d2      	uxtb	r2, r2
 8003716:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371c:	1c5a      	adds	r2, r3, #1
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003726:	b29b      	uxth	r3, r3
 8003728:	3b01      	subs	r3, #1
 800372a:	b29a      	uxth	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003730:	e0bd      	b.n	80038ae <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003736:	b29b      	uxth	r3, r3
 8003738:	2b03      	cmp	r3, #3
 800373a:	d129      	bne.n	8003790 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	685a      	ldr	r2, [r3, #4]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800374a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2b04      	cmp	r3, #4
 8003750:	d00a      	beq.n	8003768 <I2C_MasterReceive_BTF+0x86>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2b02      	cmp	r3, #2
 8003756:	d007      	beq.n	8003768 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003766:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	691a      	ldr	r2, [r3, #16]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003772:	b2d2      	uxtb	r2, r2
 8003774:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377a:	1c5a      	adds	r2, r3, #1
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003784:	b29b      	uxth	r3, r3
 8003786:	3b01      	subs	r3, #1
 8003788:	b29a      	uxth	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800378e:	e08e      	b.n	80038ae <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003794:	b29b      	uxth	r3, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d176      	bne.n	8003888 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2b01      	cmp	r3, #1
 800379e:	d002      	beq.n	80037a6 <I2C_MasterReceive_BTF+0xc4>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2b10      	cmp	r3, #16
 80037a4:	d108      	bne.n	80037b8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037b4:	601a      	str	r2, [r3, #0]
 80037b6:	e019      	b.n	80037ec <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2b04      	cmp	r3, #4
 80037bc:	d002      	beq.n	80037c4 <I2C_MasterReceive_BTF+0xe2>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d108      	bne.n	80037d6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037d2:	601a      	str	r2, [r3, #0]
 80037d4:	e00a      	b.n	80037ec <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2b10      	cmp	r3, #16
 80037da:	d007      	beq.n	80037ec <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037ea:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	691a      	ldr	r2, [r3, #16]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f6:	b2d2      	uxtb	r2, r2
 80037f8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fe:	1c5a      	adds	r2, r3, #1
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003808:	b29b      	uxth	r3, r3
 800380a:	3b01      	subs	r3, #1
 800380c:	b29a      	uxth	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	691a      	ldr	r2, [r3, #16]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381c:	b2d2      	uxtb	r2, r2
 800381e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003824:	1c5a      	adds	r2, r3, #1
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800382e:	b29b      	uxth	r3, r3
 8003830:	3b01      	subs	r3, #1
 8003832:	b29a      	uxth	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	685a      	ldr	r2, [r3, #4]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003846:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2220      	movs	r2, #32
 800384c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003856:	b2db      	uxtb	r3, r3
 8003858:	2b40      	cmp	r3, #64	; 0x40
 800385a:	d10a      	bne.n	8003872 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f7ff fcc4 	bl	80031f8 <HAL_I2C_MemRxCpltCallback>
}
 8003870:	e01d      	b.n	80038ae <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2212      	movs	r2, #18
 800387e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f7ff fc79 	bl	8003178 <HAL_I2C_MasterRxCpltCallback>
}
 8003886:	e012      	b.n	80038ae <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	691a      	ldr	r2, [r3, #16]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003892:	b2d2      	uxtb	r2, r2
 8003894:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389a:	1c5a      	adds	r2, r3, #1
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	3b01      	subs	r3, #1
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80038ae:	bf00      	nop
 80038b0:	3710      	adds	r7, #16
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80038b6:	b480      	push	{r7}
 80038b8:	b083      	sub	sp, #12
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b40      	cmp	r3, #64	; 0x40
 80038c8:	d117      	bne.n	80038fa <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d109      	bne.n	80038e6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	461a      	mov	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80038e2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80038e4:	e067      	b.n	80039b6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	f043 0301 	orr.w	r3, r3, #1
 80038f0:	b2da      	uxtb	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	611a      	str	r2, [r3, #16]
}
 80038f8:	e05d      	b.n	80039b6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003902:	d133      	bne.n	800396c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b21      	cmp	r3, #33	; 0x21
 800390e:	d109      	bne.n	8003924 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003914:	b2db      	uxtb	r3, r3
 8003916:	461a      	mov	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003920:	611a      	str	r2, [r3, #16]
 8003922:	e008      	b.n	8003936 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003928:	b2db      	uxtb	r3, r3
 800392a:	f043 0301 	orr.w	r3, r3, #1
 800392e:	b2da      	uxtb	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800393a:	2b00      	cmp	r3, #0
 800393c:	d004      	beq.n	8003948 <I2C_Master_SB+0x92>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003944:	2b00      	cmp	r3, #0
 8003946:	d108      	bne.n	800395a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394c:	2b00      	cmp	r3, #0
 800394e:	d032      	beq.n	80039b6 <I2C_Master_SB+0x100>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003956:	2b00      	cmp	r3, #0
 8003958:	d02d      	beq.n	80039b6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	685a      	ldr	r2, [r3, #4]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003968:	605a      	str	r2, [r3, #4]
}
 800396a:	e024      	b.n	80039b6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003970:	2b00      	cmp	r3, #0
 8003972:	d10e      	bne.n	8003992 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003978:	b29b      	uxth	r3, r3
 800397a:	11db      	asrs	r3, r3, #7
 800397c:	b2db      	uxtb	r3, r3
 800397e:	f003 0306 	and.w	r3, r3, #6
 8003982:	b2db      	uxtb	r3, r3
 8003984:	f063 030f 	orn	r3, r3, #15
 8003988:	b2da      	uxtb	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	611a      	str	r2, [r3, #16]
}
 8003990:	e011      	b.n	80039b6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003996:	2b01      	cmp	r3, #1
 8003998:	d10d      	bne.n	80039b6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399e:	b29b      	uxth	r3, r3
 80039a0:	11db      	asrs	r3, r3, #7
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	f003 0306 	and.w	r3, r3, #6
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	f063 030e 	orn	r3, r3, #14
 80039ae:	b2da      	uxtb	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	611a      	str	r2, [r3, #16]
}
 80039b6:	bf00      	nop
 80039b8:	370c      	adds	r7, #12
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr

080039c2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80039c2:	b480      	push	{r7}
 80039c4:	b083      	sub	sp, #12
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ce:	b2da      	uxtb	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d004      	beq.n	80039e8 <I2C_Master_ADD10+0x26>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d108      	bne.n	80039fa <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00c      	beq.n	8003a0a <I2C_Master_ADD10+0x48>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d007      	beq.n	8003a0a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	685a      	ldr	r2, [r3, #4]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a08:	605a      	str	r2, [r3, #4]
  }
}
 8003a0a:	bf00      	nop
 8003a0c:	370c      	adds	r7, #12
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr

08003a16 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003a16:	b480      	push	{r7}
 8003a18:	b091      	sub	sp, #68	; 0x44
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a24:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a32:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	2b22      	cmp	r3, #34	; 0x22
 8003a3e:	f040 8169 	bne.w	8003d14 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d10f      	bne.n	8003a6a <I2C_Master_ADDR+0x54>
 8003a4a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003a4e:	2b40      	cmp	r3, #64	; 0x40
 8003a50:	d10b      	bne.n	8003a6a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a52:	2300      	movs	r3, #0
 8003a54:	633b      	str	r3, [r7, #48]	; 0x30
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	633b      	str	r3, [r7, #48]	; 0x30
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	633b      	str	r3, [r7, #48]	; 0x30
 8003a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a68:	e160      	b.n	8003d2c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d11d      	bne.n	8003aae <I2C_Master_ADDR+0x98>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003a7a:	d118      	bne.n	8003aae <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003aa0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aa6:	1c5a      	adds	r2, r3, #1
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	651a      	str	r2, [r3, #80]	; 0x50
 8003aac:	e13e      	b.n	8003d2c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d113      	bne.n	8003ae0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ab8:	2300      	movs	r3, #0
 8003aba:	62bb      	str	r3, [r7, #40]	; 0x28
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	62bb      	str	r3, [r7, #40]	; 0x28
 8003acc:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003adc:	601a      	str	r2, [r3, #0]
 8003ade:	e115      	b.n	8003d0c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	f040 808a 	bne.w	8003c00 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003af2:	d137      	bne.n	8003b64 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b02:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b12:	d113      	bne.n	8003b3c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b22:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b24:	2300      	movs	r3, #0
 8003b26:	627b      	str	r3, [r7, #36]	; 0x24
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	627b      	str	r3, [r7, #36]	; 0x24
 8003b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3a:	e0e7      	b.n	8003d0c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	623b      	str	r3, [r7, #32]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	623b      	str	r3, [r7, #32]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	623b      	str	r3, [r7, #32]
 8003b50:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b60:	601a      	str	r2, [r3, #0]
 8003b62:	e0d3      	b.n	8003d0c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b66:	2b08      	cmp	r3, #8
 8003b68:	d02e      	beq.n	8003bc8 <I2C_Master_ADDR+0x1b2>
 8003b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b6c:	2b20      	cmp	r3, #32
 8003b6e:	d02b      	beq.n	8003bc8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b72:	2b12      	cmp	r3, #18
 8003b74:	d102      	bne.n	8003b7c <I2C_Master_ADDR+0x166>
 8003b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d125      	bne.n	8003bc8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b7e:	2b04      	cmp	r3, #4
 8003b80:	d00e      	beq.n	8003ba0 <I2C_Master_ADDR+0x18a>
 8003b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d00b      	beq.n	8003ba0 <I2C_Master_ADDR+0x18a>
 8003b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b8a:	2b10      	cmp	r3, #16
 8003b8c:	d008      	beq.n	8003ba0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b9c:	601a      	str	r2, [r3, #0]
 8003b9e:	e007      	b.n	8003bb0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003bae:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	61fb      	str	r3, [r7, #28]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	61fb      	str	r3, [r7, #28]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	61fb      	str	r3, [r7, #28]
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	e0a1      	b.n	8003d0c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bd6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bd8:	2300      	movs	r3, #0
 8003bda:	61bb      	str	r3, [r7, #24]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	61bb      	str	r3, [r7, #24]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	61bb      	str	r3, [r7, #24]
 8003bec:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bfc:	601a      	str	r2, [r3, #0]
 8003bfe:	e085      	b.n	8003d0c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d14d      	bne.n	8003ca6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c0c:	2b04      	cmp	r3, #4
 8003c0e:	d016      	beq.n	8003c3e <I2C_Master_ADDR+0x228>
 8003c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d013      	beq.n	8003c3e <I2C_Master_ADDR+0x228>
 8003c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c18:	2b10      	cmp	r3, #16
 8003c1a:	d010      	beq.n	8003c3e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c2a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c3a:	601a      	str	r2, [r3, #0]
 8003c3c:	e007      	b.n	8003c4e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c4c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c5c:	d117      	bne.n	8003c8e <I2C_Master_ADDR+0x278>
 8003c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c64:	d00b      	beq.n	8003c7e <I2C_Master_ADDR+0x268>
 8003c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d008      	beq.n	8003c7e <I2C_Master_ADDR+0x268>
 8003c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c6e:	2b08      	cmp	r3, #8
 8003c70:	d005      	beq.n	8003c7e <I2C_Master_ADDR+0x268>
 8003c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c74:	2b10      	cmp	r3, #16
 8003c76:	d002      	beq.n	8003c7e <I2C_Master_ADDR+0x268>
 8003c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c7a:	2b20      	cmp	r3, #32
 8003c7c:	d107      	bne.n	8003c8e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	685a      	ldr	r2, [r3, #4]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c8c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c8e:	2300      	movs	r3, #0
 8003c90:	617b      	str	r3, [r7, #20]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	695b      	ldr	r3, [r3, #20]
 8003c98:	617b      	str	r3, [r7, #20]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	617b      	str	r3, [r7, #20]
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	e032      	b.n	8003d0c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cb4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cc4:	d117      	bne.n	8003cf6 <I2C_Master_ADDR+0x2e0>
 8003cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ccc:	d00b      	beq.n	8003ce6 <I2C_Master_ADDR+0x2d0>
 8003cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d008      	beq.n	8003ce6 <I2C_Master_ADDR+0x2d0>
 8003cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd6:	2b08      	cmp	r3, #8
 8003cd8:	d005      	beq.n	8003ce6 <I2C_Master_ADDR+0x2d0>
 8003cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cdc:	2b10      	cmp	r3, #16
 8003cde:	d002      	beq.n	8003ce6 <I2C_Master_ADDR+0x2d0>
 8003ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce2:	2b20      	cmp	r3, #32
 8003ce4:	d107      	bne.n	8003cf6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	685a      	ldr	r2, [r3, #4]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003cf4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	613b      	str	r3, [r7, #16]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	695b      	ldr	r3, [r3, #20]
 8003d00:	613b      	str	r3, [r7, #16]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	613b      	str	r3, [r7, #16]
 8003d0a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003d12:	e00b      	b.n	8003d2c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d14:	2300      	movs	r3, #0
 8003d16:	60fb      	str	r3, [r7, #12]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	60fb      	str	r3, [r7, #12]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	60fb      	str	r3, [r7, #12]
 8003d28:	68fb      	ldr	r3, [r7, #12]
}
 8003d2a:	e7ff      	b.n	8003d2c <I2C_Master_ADDR+0x316>
 8003d2c:	bf00      	nop
 8003d2e:	3744      	adds	r7, #68	; 0x44
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d46:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d02b      	beq.n	8003daa <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d56:	781a      	ldrb	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d62:	1c5a      	adds	r2, r3, #1
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	b29a      	uxth	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d114      	bne.n	8003daa <I2C_SlaveTransmit_TXE+0x72>
 8003d80:	7bfb      	ldrb	r3, [r7, #15]
 8003d82:	2b29      	cmp	r3, #41	; 0x29
 8003d84:	d111      	bne.n	8003daa <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	685a      	ldr	r2, [r3, #4]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d94:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2221      	movs	r2, #33	; 0x21
 8003d9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2228      	movs	r2, #40	; 0x28
 8003da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f7ff f9f1 	bl	800318c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003daa:	bf00      	nop
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003db2:	b480      	push	{r7}
 8003db4:	b083      	sub	sp, #12
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d011      	beq.n	8003de8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc8:	781a      	ldrb	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd4:	1c5a      	adds	r2, r3, #1
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	3b01      	subs	r3, #1
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e02:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d02c      	beq.n	8003e68 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	691a      	ldr	r2, [r3, #16]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e18:	b2d2      	uxtb	r2, r2
 8003e1a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e20:	1c5a      	adds	r2, r3, #1
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d114      	bne.n	8003e68 <I2C_SlaveReceive_RXNE+0x74>
 8003e3e:	7bfb      	ldrb	r3, [r7, #15]
 8003e40:	2b2a      	cmp	r3, #42	; 0x2a
 8003e42:	d111      	bne.n	8003e68 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	685a      	ldr	r2, [r3, #4]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e52:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2222      	movs	r2, #34	; 0x22
 8003e58:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2228      	movs	r2, #40	; 0x28
 8003e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f7ff f99c 	bl	80031a0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003e68:	bf00      	nop
 8003e6a:	3710      	adds	r7, #16
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d012      	beq.n	8003ea8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	691a      	ldr	r2, [r3, #16]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8c:	b2d2      	uxtb	r2, r2
 8003e8e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e94:	1c5a      	adds	r2, r3, #1
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	b29a      	uxth	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ece:	2b28      	cmp	r3, #40	; 0x28
 8003ed0:	d127      	bne.n	8003f22 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	685a      	ldr	r2, [r3, #4]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ee0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	089b      	lsrs	r3, r3, #2
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d101      	bne.n	8003ef2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	09db      	lsrs	r3, r3, #7
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d103      	bne.n	8003f06 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	81bb      	strh	r3, [r7, #12]
 8003f04:	e002      	b.n	8003f0c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003f14:	89ba      	ldrh	r2, [r7, #12]
 8003f16:	7bfb      	ldrb	r3, [r7, #15]
 8003f18:	4619      	mov	r1, r3
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7ff f94a 	bl	80031b4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003f20:	e00e      	b.n	8003f40 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f22:	2300      	movs	r3, #0
 8003f24:	60bb      	str	r3, [r7, #8]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	695b      	ldr	r3, [r3, #20]
 8003f2c:	60bb      	str	r3, [r7, #8]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	60bb      	str	r3, [r7, #8]
 8003f36:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003f40:	bf00      	nop
 8003f42:	3710      	adds	r7, #16
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f56:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	685a      	ldr	r2, [r3, #4]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f66:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003f68:	2300      	movs	r3, #0
 8003f6a:	60bb      	str	r3, [r7, #8]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	695b      	ldr	r3, [r3, #20]
 8003f72:	60bb      	str	r3, [r7, #8]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f042 0201 	orr.w	r2, r2, #1
 8003f82:	601a      	str	r2, [r3, #0]
 8003f84:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f94:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fa0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fa4:	d172      	bne.n	800408c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003fa6:	7bfb      	ldrb	r3, [r7, #15]
 8003fa8:	2b22      	cmp	r3, #34	; 0x22
 8003faa:	d002      	beq.n	8003fb2 <I2C_Slave_STOPF+0x6a>
 8003fac:	7bfb      	ldrb	r3, [r7, #15]
 8003fae:	2b2a      	cmp	r3, #42	; 0x2a
 8003fb0:	d135      	bne.n	800401e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d005      	beq.n	8003fd6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fce:	f043 0204 	orr.w	r2, r3, #4
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	685a      	ldr	r2, [r3, #4]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fe4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fd ff58 	bl	8001ea0 <HAL_DMA_GetState>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d049      	beq.n	800408a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffa:	4a69      	ldr	r2, [pc, #420]	; (80041a0 <I2C_Slave_STOPF+0x258>)
 8003ffc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004002:	4618      	mov	r0, r3
 8004004:	f7fd ff2a 	bl	8001e5c <HAL_DMA_Abort_IT>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d03d      	beq.n	800408a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004018:	4610      	mov	r0, r2
 800401a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800401c:	e035      	b.n	800408a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	b29a      	uxth	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004030:	b29b      	uxth	r3, r3
 8004032:	2b00      	cmp	r3, #0
 8004034:	d005      	beq.n	8004042 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403a:	f043 0204 	orr.w	r2, r3, #4
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	685a      	ldr	r2, [r3, #4]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004050:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004056:	4618      	mov	r0, r3
 8004058:	f7fd ff22 	bl	8001ea0 <HAL_DMA_GetState>
 800405c:	4603      	mov	r3, r0
 800405e:	2b01      	cmp	r3, #1
 8004060:	d014      	beq.n	800408c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004066:	4a4e      	ldr	r2, [pc, #312]	; (80041a0 <I2C_Slave_STOPF+0x258>)
 8004068:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800406e:	4618      	mov	r0, r3
 8004070:	f7fd fef4 	bl	8001e5c <HAL_DMA_Abort_IT>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d008      	beq.n	800408c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800407e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004084:	4610      	mov	r0, r2
 8004086:	4798      	blx	r3
 8004088:	e000      	b.n	800408c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800408a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004090:	b29b      	uxth	r3, r3
 8004092:	2b00      	cmp	r3, #0
 8004094:	d03e      	beq.n	8004114 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	695b      	ldr	r3, [r3, #20]
 800409c:	f003 0304 	and.w	r3, r3, #4
 80040a0:	2b04      	cmp	r3, #4
 80040a2:	d112      	bne.n	80040ca <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	691a      	ldr	r2, [r3, #16]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ae:	b2d2      	uxtb	r2, r2
 80040b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b6:	1c5a      	adds	r2, r3, #1
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	3b01      	subs	r3, #1
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	695b      	ldr	r3, [r3, #20]
 80040d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d4:	2b40      	cmp	r3, #64	; 0x40
 80040d6:	d112      	bne.n	80040fe <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	691a      	ldr	r2, [r3, #16]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e2:	b2d2      	uxtb	r2, r2
 80040e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ea:	1c5a      	adds	r2, r3, #1
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	3b01      	subs	r3, #1
 80040f8:	b29a      	uxth	r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004102:	b29b      	uxth	r3, r3
 8004104:	2b00      	cmp	r3, #0
 8004106:	d005      	beq.n	8004114 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410c:	f043 0204 	orr.w	r2, r3, #4
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004118:	2b00      	cmp	r3, #0
 800411a:	d003      	beq.n	8004124 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 f8b3 	bl	8004288 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004122:	e039      	b.n	8004198 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004124:	7bfb      	ldrb	r3, [r7, #15]
 8004126:	2b2a      	cmp	r3, #42	; 0x2a
 8004128:	d109      	bne.n	800413e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2228      	movs	r2, #40	; 0x28
 8004134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f7ff f831 	bl	80031a0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004144:	b2db      	uxtb	r3, r3
 8004146:	2b28      	cmp	r3, #40	; 0x28
 8004148:	d111      	bne.n	800416e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a15      	ldr	r2, [pc, #84]	; (80041a4 <I2C_Slave_STOPF+0x25c>)
 800414e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2220      	movs	r2, #32
 800415a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f7ff f832 	bl	80031d0 <HAL_I2C_ListenCpltCallback>
}
 800416c:	e014      	b.n	8004198 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004172:	2b22      	cmp	r3, #34	; 0x22
 8004174:	d002      	beq.n	800417c <I2C_Slave_STOPF+0x234>
 8004176:	7bfb      	ldrb	r3, [r7, #15]
 8004178:	2b22      	cmp	r3, #34	; 0x22
 800417a:	d10d      	bne.n	8004198 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2220      	movs	r2, #32
 8004186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f7ff f804 	bl	80031a0 <HAL_I2C_SlaveRxCpltCallback>
}
 8004198:	bf00      	nop
 800419a:	3710      	adds	r7, #16
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	080048b9 	.word	0x080048b9
 80041a4:	ffff0000 	.word	0xffff0000

080041a8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041b6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041bc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	2b08      	cmp	r3, #8
 80041c2:	d002      	beq.n	80041ca <I2C_Slave_AF+0x22>
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	2b20      	cmp	r3, #32
 80041c8:	d129      	bne.n	800421e <I2C_Slave_AF+0x76>
 80041ca:	7bfb      	ldrb	r3, [r7, #15]
 80041cc:	2b28      	cmp	r3, #40	; 0x28
 80041ce:	d126      	bne.n	800421e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a2c      	ldr	r2, [pc, #176]	; (8004284 <I2C_Slave_AF+0xdc>)
 80041d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80041e4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041ee:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041fe:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2220      	movs	r2, #32
 800420a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f7fe ffda 	bl	80031d0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800421c:	e02e      	b.n	800427c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800421e:	7bfb      	ldrb	r3, [r7, #15]
 8004220:	2b21      	cmp	r3, #33	; 0x21
 8004222:	d126      	bne.n	8004272 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a17      	ldr	r2, [pc, #92]	; (8004284 <I2C_Slave_AF+0xdc>)
 8004228:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2221      	movs	r2, #33	; 0x21
 800422e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2220      	movs	r2, #32
 8004234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685a      	ldr	r2, [r3, #4]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800424e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004258:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004268:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f7fe ff8e 	bl	800318c <HAL_I2C_SlaveTxCpltCallback>
}
 8004270:	e004      	b.n	800427c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800427a:	615a      	str	r2, [r3, #20]
}
 800427c:	bf00      	nop
 800427e:	3710      	adds	r7, #16
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	ffff0000 	.word	0xffff0000

08004288 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004296:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800429e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80042a0:	7bbb      	ldrb	r3, [r7, #14]
 80042a2:	2b10      	cmp	r3, #16
 80042a4:	d002      	beq.n	80042ac <I2C_ITError+0x24>
 80042a6:	7bbb      	ldrb	r3, [r7, #14]
 80042a8:	2b40      	cmp	r3, #64	; 0x40
 80042aa:	d10a      	bne.n	80042c2 <I2C_ITError+0x3a>
 80042ac:	7bfb      	ldrb	r3, [r7, #15]
 80042ae:	2b22      	cmp	r3, #34	; 0x22
 80042b0:	d107      	bne.n	80042c2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042c0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80042c2:	7bfb      	ldrb	r3, [r7, #15]
 80042c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80042c8:	2b28      	cmp	r3, #40	; 0x28
 80042ca:	d107      	bne.n	80042dc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2228      	movs	r2, #40	; 0x28
 80042d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80042da:	e015      	b.n	8004308 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042ea:	d00a      	beq.n	8004302 <I2C_ITError+0x7a>
 80042ec:	7bfb      	ldrb	r3, [r7, #15]
 80042ee:	2b60      	cmp	r3, #96	; 0x60
 80042f0:	d007      	beq.n	8004302 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2220      	movs	r2, #32
 80042f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004312:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004316:	d162      	bne.n	80043de <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	685a      	ldr	r2, [r3, #4]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004326:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800432c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b01      	cmp	r3, #1
 8004334:	d020      	beq.n	8004378 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800433a:	4a6a      	ldr	r2, [pc, #424]	; (80044e4 <I2C_ITError+0x25c>)
 800433c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004342:	4618      	mov	r0, r3
 8004344:	f7fd fd8a 	bl	8001e5c <HAL_DMA_Abort_IT>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	f000 8089 	beq.w	8004462 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f022 0201 	bic.w	r2, r2, #1
 800435e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2220      	movs	r2, #32
 8004364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800436c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004372:	4610      	mov	r0, r2
 8004374:	4798      	blx	r3
 8004376:	e074      	b.n	8004462 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437c:	4a59      	ldr	r2, [pc, #356]	; (80044e4 <I2C_ITError+0x25c>)
 800437e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004384:	4618      	mov	r0, r3
 8004386:	f7fd fd69 	bl	8001e5c <HAL_DMA_Abort_IT>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d068      	beq.n	8004462 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	695b      	ldr	r3, [r3, #20]
 8004396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800439a:	2b40      	cmp	r3, #64	; 0x40
 800439c:	d10b      	bne.n	80043b6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	691a      	ldr	r2, [r3, #16]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a8:	b2d2      	uxtb	r2, r2
 80043aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b0:	1c5a      	adds	r2, r3, #1
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f022 0201 	bic.w	r2, r2, #1
 80043c4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2220      	movs	r2, #32
 80043ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80043d8:	4610      	mov	r0, r2
 80043da:	4798      	blx	r3
 80043dc:	e041      	b.n	8004462 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	2b60      	cmp	r3, #96	; 0x60
 80043e8:	d125      	bne.n	8004436 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2220      	movs	r2, #32
 80043ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004402:	2b40      	cmp	r3, #64	; 0x40
 8004404:	d10b      	bne.n	800441e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	691a      	ldr	r2, [r3, #16]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004410:	b2d2      	uxtb	r2, r2
 8004412:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004418:	1c5a      	adds	r2, r3, #1
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f022 0201 	bic.w	r2, r2, #1
 800442c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f7fe fef6 	bl	8003220 <HAL_I2C_AbortCpltCallback>
 8004434:	e015      	b.n	8004462 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	695b      	ldr	r3, [r3, #20]
 800443c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004440:	2b40      	cmp	r3, #64	; 0x40
 8004442:	d10b      	bne.n	800445c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	691a      	ldr	r2, [r3, #16]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444e:	b2d2      	uxtb	r2, r2
 8004450:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004456:	1c5a      	adds	r2, r3, #1
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f7fe fed5 	bl	800320c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004466:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	2b00      	cmp	r3, #0
 8004470:	d10e      	bne.n	8004490 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004478:	2b00      	cmp	r3, #0
 800447a:	d109      	bne.n	8004490 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004482:	2b00      	cmp	r3, #0
 8004484:	d104      	bne.n	8004490 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800448c:	2b00      	cmp	r3, #0
 800448e:	d007      	beq.n	80044a0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	685a      	ldr	r2, [r3, #4]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800449e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044a6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ac:	f003 0304 	and.w	r3, r3, #4
 80044b0:	2b04      	cmp	r3, #4
 80044b2:	d113      	bne.n	80044dc <I2C_ITError+0x254>
 80044b4:	7bfb      	ldrb	r3, [r7, #15]
 80044b6:	2b28      	cmp	r3, #40	; 0x28
 80044b8:	d110      	bne.n	80044dc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a0a      	ldr	r2, [pc, #40]	; (80044e8 <I2C_ITError+0x260>)
 80044be:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2220      	movs	r2, #32
 80044ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f7fe fe7a 	bl	80031d0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80044dc:	bf00      	nop
 80044de:	3710      	adds	r7, #16
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	080048b9 	.word	0x080048b9
 80044e8:	ffff0000 	.word	0xffff0000

080044ec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b088      	sub	sp, #32
 80044f0:	af02      	add	r7, sp, #8
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	607a      	str	r2, [r7, #4]
 80044f6:	603b      	str	r3, [r7, #0]
 80044f8:	460b      	mov	r3, r1
 80044fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004500:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	2b08      	cmp	r3, #8
 8004506:	d006      	beq.n	8004516 <I2C_MasterRequestWrite+0x2a>
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	2b01      	cmp	r3, #1
 800450c:	d003      	beq.n	8004516 <I2C_MasterRequestWrite+0x2a>
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004514:	d108      	bne.n	8004528 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004524:	601a      	str	r2, [r3, #0]
 8004526:	e00b      	b.n	8004540 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452c:	2b12      	cmp	r3, #18
 800452e:	d107      	bne.n	8004540 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800453e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	9300      	str	r3, [sp, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	f000 fa5b 	bl	8004a08 <I2C_WaitOnFlagUntilTimeout>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00d      	beq.n	8004574 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004562:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004566:	d103      	bne.n	8004570 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800456e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e035      	b.n	80045e0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800457c:	d108      	bne.n	8004590 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800457e:	897b      	ldrh	r3, [r7, #10]
 8004580:	b2db      	uxtb	r3, r3
 8004582:	461a      	mov	r2, r3
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800458c:	611a      	str	r2, [r3, #16]
 800458e:	e01b      	b.n	80045c8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004590:	897b      	ldrh	r3, [r7, #10]
 8004592:	11db      	asrs	r3, r3, #7
 8004594:	b2db      	uxtb	r3, r3
 8004596:	f003 0306 	and.w	r3, r3, #6
 800459a:	b2db      	uxtb	r3, r3
 800459c:	f063 030f 	orn	r3, r3, #15
 80045a0:	b2da      	uxtb	r2, r3
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	490e      	ldr	r1, [pc, #56]	; (80045e8 <I2C_MasterRequestWrite+0xfc>)
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f000 fa81 	bl	8004ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d001      	beq.n	80045be <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e010      	b.n	80045e0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80045be:	897b      	ldrh	r3, [r7, #10]
 80045c0:	b2da      	uxtb	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	4907      	ldr	r1, [pc, #28]	; (80045ec <I2C_MasterRequestWrite+0x100>)
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f000 fa71 	bl	8004ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d001      	beq.n	80045de <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e000      	b.n	80045e0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3718      	adds	r7, #24
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	00010008 	.word	0x00010008
 80045ec:	00010002 	.word	0x00010002

080045f0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b088      	sub	sp, #32
 80045f4:	af02      	add	r7, sp, #8
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	607a      	str	r2, [r7, #4]
 80045fa:	603b      	str	r3, [r7, #0]
 80045fc:	460b      	mov	r3, r1
 80045fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004604:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004614:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	2b08      	cmp	r3, #8
 800461a:	d006      	beq.n	800462a <I2C_MasterRequestRead+0x3a>
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d003      	beq.n	800462a <I2C_MasterRequestRead+0x3a>
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004628:	d108      	bne.n	800463c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004638:	601a      	str	r2, [r3, #0]
 800463a:	e00b      	b.n	8004654 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004640:	2b11      	cmp	r3, #17
 8004642:	d107      	bne.n	8004654 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004652:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	9300      	str	r3, [sp, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	f000 f9d1 	bl	8004a08 <I2C_WaitOnFlagUntilTimeout>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00d      	beq.n	8004688 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004676:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800467a:	d103      	bne.n	8004684 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004682:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	e079      	b.n	800477c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	691b      	ldr	r3, [r3, #16]
 800468c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004690:	d108      	bne.n	80046a4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004692:	897b      	ldrh	r3, [r7, #10]
 8004694:	b2db      	uxtb	r3, r3
 8004696:	f043 0301 	orr.w	r3, r3, #1
 800469a:	b2da      	uxtb	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	611a      	str	r2, [r3, #16]
 80046a2:	e05f      	b.n	8004764 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80046a4:	897b      	ldrh	r3, [r7, #10]
 80046a6:	11db      	asrs	r3, r3, #7
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	f003 0306 	and.w	r3, r3, #6
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	f063 030f 	orn	r3, r3, #15
 80046b4:	b2da      	uxtb	r2, r3
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	4930      	ldr	r1, [pc, #192]	; (8004784 <I2C_MasterRequestRead+0x194>)
 80046c2:	68f8      	ldr	r0, [r7, #12]
 80046c4:	f000 f9f7 	bl	8004ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d001      	beq.n	80046d2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e054      	b.n	800477c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80046d2:	897b      	ldrh	r3, [r7, #10]
 80046d4:	b2da      	uxtb	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	4929      	ldr	r1, [pc, #164]	; (8004788 <I2C_MasterRequestRead+0x198>)
 80046e2:	68f8      	ldr	r0, [r7, #12]
 80046e4:	f000 f9e7 	bl	8004ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d001      	beq.n	80046f2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e044      	b.n	800477c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046f2:	2300      	movs	r3, #0
 80046f4:	613b      	str	r3, [r7, #16]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	695b      	ldr	r3, [r3, #20]
 80046fc:	613b      	str	r3, [r7, #16]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	613b      	str	r3, [r7, #16]
 8004706:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004716:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	9300      	str	r3, [sp, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f000 f96f 	bl	8004a08 <I2C_WaitOnFlagUntilTimeout>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00d      	beq.n	800474c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800473a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800473e:	d103      	bne.n	8004748 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004746:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e017      	b.n	800477c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800474c:	897b      	ldrh	r3, [r7, #10]
 800474e:	11db      	asrs	r3, r3, #7
 8004750:	b2db      	uxtb	r3, r3
 8004752:	f003 0306 	and.w	r3, r3, #6
 8004756:	b2db      	uxtb	r3, r3
 8004758:	f063 030e 	orn	r3, r3, #14
 800475c:	b2da      	uxtb	r2, r3
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	4907      	ldr	r1, [pc, #28]	; (8004788 <I2C_MasterRequestRead+0x198>)
 800476a:	68f8      	ldr	r0, [r7, #12]
 800476c:	f000 f9a3 	bl	8004ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d001      	beq.n	800477a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e000      	b.n	800477c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	3718      	adds	r7, #24
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	00010008 	.word	0x00010008
 8004788:	00010002 	.word	0x00010002

0800478c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b088      	sub	sp, #32
 8004790:	af02      	add	r7, sp, #8
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	4608      	mov	r0, r1
 8004796:	4611      	mov	r1, r2
 8004798:	461a      	mov	r2, r3
 800479a:	4603      	mov	r3, r0
 800479c:	817b      	strh	r3, [r7, #10]
 800479e:	460b      	mov	r3, r1
 80047a0:	813b      	strh	r3, [r7, #8]
 80047a2:	4613      	mov	r3, r2
 80047a4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b8:	9300      	str	r3, [sp, #0]
 80047ba:	6a3b      	ldr	r3, [r7, #32]
 80047bc:	2200      	movs	r2, #0
 80047be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	f000 f920 	bl	8004a08 <I2C_WaitOnFlagUntilTimeout>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00d      	beq.n	80047ea <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047dc:	d103      	bne.n	80047e6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e05f      	b.n	80048aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80047ea:	897b      	ldrh	r3, [r7, #10]
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	461a      	mov	r2, r3
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80047f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fc:	6a3a      	ldr	r2, [r7, #32]
 80047fe:	492d      	ldr	r1, [pc, #180]	; (80048b4 <I2C_RequestMemoryWrite+0x128>)
 8004800:	68f8      	ldr	r0, [r7, #12]
 8004802:	f000 f958 	bl	8004ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d001      	beq.n	8004810 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e04c      	b.n	80048aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004810:	2300      	movs	r3, #0
 8004812:	617b      	str	r3, [r7, #20]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	617b      	str	r3, [r7, #20]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	617b      	str	r3, [r7, #20]
 8004824:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004828:	6a39      	ldr	r1, [r7, #32]
 800482a:	68f8      	ldr	r0, [r7, #12]
 800482c:	f000 f9c2 	bl	8004bb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00d      	beq.n	8004852 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483a:	2b04      	cmp	r3, #4
 800483c:	d107      	bne.n	800484e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800484c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e02b      	b.n	80048aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004852:	88fb      	ldrh	r3, [r7, #6]
 8004854:	2b01      	cmp	r3, #1
 8004856:	d105      	bne.n	8004864 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004858:	893b      	ldrh	r3, [r7, #8]
 800485a:	b2da      	uxtb	r2, r3
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	611a      	str	r2, [r3, #16]
 8004862:	e021      	b.n	80048a8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004864:	893b      	ldrh	r3, [r7, #8]
 8004866:	0a1b      	lsrs	r3, r3, #8
 8004868:	b29b      	uxth	r3, r3
 800486a:	b2da      	uxtb	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004874:	6a39      	ldr	r1, [r7, #32]
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	f000 f99c 	bl	8004bb4 <I2C_WaitOnTXEFlagUntilTimeout>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00d      	beq.n	800489e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004886:	2b04      	cmp	r3, #4
 8004888:	d107      	bne.n	800489a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004898:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e005      	b.n	80048aa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800489e:	893b      	ldrh	r3, [r7, #8]
 80048a0:	b2da      	uxtb	r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3718      	adds	r7, #24
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	00010002 	.word	0x00010002

080048b8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b086      	sub	sp, #24
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80048c0:	2300      	movs	r3, #0
 80048c2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048d0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80048d2:	4b4b      	ldr	r3, [pc, #300]	; (8004a00 <I2C_DMAAbort+0x148>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	08db      	lsrs	r3, r3, #3
 80048d8:	4a4a      	ldr	r2, [pc, #296]	; (8004a04 <I2C_DMAAbort+0x14c>)
 80048da:	fba2 2303 	umull	r2, r3, r2, r3
 80048de:	0a1a      	lsrs	r2, r3, #8
 80048e0:	4613      	mov	r3, r2
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	4413      	add	r3, r2
 80048e6:	00da      	lsls	r2, r3, #3
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d106      	bne.n	8004900 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f6:	f043 0220 	orr.w	r2, r3, #32
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80048fe:	e00a      	b.n	8004916 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	3b01      	subs	r3, #1
 8004904:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004910:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004914:	d0ea      	beq.n	80048ec <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800491a:	2b00      	cmp	r3, #0
 800491c:	d003      	beq.n	8004926 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004922:	2200      	movs	r2, #0
 8004924:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492a:	2b00      	cmp	r3, #0
 800492c:	d003      	beq.n	8004936 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004932:	2200      	movs	r2, #0
 8004934:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004944:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	2200      	movs	r2, #0
 800494a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004950:	2b00      	cmp	r3, #0
 8004952:	d003      	beq.n	800495c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004958:	2200      	movs	r2, #0
 800495a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004960:	2b00      	cmp	r3, #0
 8004962:	d003      	beq.n	800496c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004968:	2200      	movs	r2, #0
 800496a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f022 0201 	bic.w	r2, r2, #1
 800497a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004982:	b2db      	uxtb	r3, r3
 8004984:	2b60      	cmp	r3, #96	; 0x60
 8004986:	d10e      	bne.n	80049a6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	2220      	movs	r2, #32
 800498c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	2200      	movs	r2, #0
 8004994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	2200      	movs	r2, #0
 800499c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800499e:	6978      	ldr	r0, [r7, #20]
 80049a0:	f7fe fc3e 	bl	8003220 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80049a4:	e027      	b.n	80049f6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80049a6:	7cfb      	ldrb	r3, [r7, #19]
 80049a8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80049ac:	2b28      	cmp	r3, #40	; 0x28
 80049ae:	d117      	bne.n	80049e0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f042 0201 	orr.w	r2, r2, #1
 80049be:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049ce:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	2200      	movs	r2, #0
 80049d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	2228      	movs	r2, #40	; 0x28
 80049da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80049de:	e007      	b.n	80049f0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	2220      	movs	r2, #32
 80049e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80049f0:	6978      	ldr	r0, [r7, #20]
 80049f2:	f7fe fc0b 	bl	800320c <HAL_I2C_ErrorCallback>
}
 80049f6:	bf00      	nop
 80049f8:	3718      	adds	r7, #24
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	2000001c 	.word	0x2000001c
 8004a04:	14f8b589 	.word	0x14f8b589

08004a08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	603b      	str	r3, [r7, #0]
 8004a14:	4613      	mov	r3, r2
 8004a16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a18:	e025      	b.n	8004a66 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a20:	d021      	beq.n	8004a66 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a22:	f7fd f899 	bl	8001b58 <HAL_GetTick>
 8004a26:	4602      	mov	r2, r0
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	683a      	ldr	r2, [r7, #0]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d302      	bcc.n	8004a38 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d116      	bne.n	8004a66 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2220      	movs	r2, #32
 8004a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a52:	f043 0220 	orr.w	r2, r3, #32
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e023      	b.n	8004aae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	0c1b      	lsrs	r3, r3, #16
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d10d      	bne.n	8004a8c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	43da      	mvns	r2, r3
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	bf0c      	ite	eq
 8004a82:	2301      	moveq	r3, #1
 8004a84:	2300      	movne	r3, #0
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	461a      	mov	r2, r3
 8004a8a:	e00c      	b.n	8004aa6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	43da      	mvns	r2, r3
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	4013      	ands	r3, r2
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	bf0c      	ite	eq
 8004a9e:	2301      	moveq	r3, #1
 8004aa0:	2300      	movne	r3, #0
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	79fb      	ldrb	r3, [r7, #7]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d0b6      	beq.n	8004a1a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3710      	adds	r7, #16
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004ab6:	b580      	push	{r7, lr}
 8004ab8:	b084      	sub	sp, #16
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	60f8      	str	r0, [r7, #12]
 8004abe:	60b9      	str	r1, [r7, #8]
 8004ac0:	607a      	str	r2, [r7, #4]
 8004ac2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ac4:	e051      	b.n	8004b6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	695b      	ldr	r3, [r3, #20]
 8004acc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ad0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ad4:	d123      	bne.n	8004b1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ae4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004aee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2220      	movs	r2, #32
 8004afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0a:	f043 0204 	orr.w	r2, r3, #4
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e046      	b.n	8004bac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b24:	d021      	beq.n	8004b6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b26:	f7fd f817 	bl	8001b58 <HAL_GetTick>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d302      	bcc.n	8004b3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d116      	bne.n	8004b6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2220      	movs	r2, #32
 8004b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b56:	f043 0220 	orr.w	r2, r3, #32
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e020      	b.n	8004bac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	0c1b      	lsrs	r3, r3, #16
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d10c      	bne.n	8004b8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	695b      	ldr	r3, [r3, #20]
 8004b7a:	43da      	mvns	r2, r3
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	4013      	ands	r3, r2
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	bf14      	ite	ne
 8004b86:	2301      	movne	r3, #1
 8004b88:	2300      	moveq	r3, #0
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	e00b      	b.n	8004ba6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	699b      	ldr	r3, [r3, #24]
 8004b94:	43da      	mvns	r2, r3
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	4013      	ands	r3, r2
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	bf14      	ite	ne
 8004ba0:	2301      	movne	r3, #1
 8004ba2:	2300      	moveq	r3, #0
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d18d      	bne.n	8004ac6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3710      	adds	r7, #16
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	60b9      	str	r1, [r7, #8]
 8004bbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bc0:	e02d      	b.n	8004c1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004bc2:	68f8      	ldr	r0, [r7, #12]
 8004bc4:	f000 f900 	bl	8004dc8 <I2C_IsAcknowledgeFailed>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d001      	beq.n	8004bd2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e02d      	b.n	8004c2e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd8:	d021      	beq.n	8004c1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bda:	f7fc ffbd 	bl	8001b58 <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	68ba      	ldr	r2, [r7, #8]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d302      	bcc.n	8004bf0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d116      	bne.n	8004c1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2220      	movs	r2, #32
 8004bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0a:	f043 0220 	orr.w	r2, r3, #32
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e007      	b.n	8004c2e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	695b      	ldr	r3, [r3, #20]
 8004c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c28:	2b80      	cmp	r3, #128	; 0x80
 8004c2a:	d1ca      	bne.n	8004bc2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3710      	adds	r7, #16
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}

08004c36 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b084      	sub	sp, #16
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	60f8      	str	r0, [r7, #12]
 8004c3e:	60b9      	str	r1, [r7, #8]
 8004c40:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c42:	e02d      	b.n	8004ca0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c44:	68f8      	ldr	r0, [r7, #12]
 8004c46:	f000 f8bf 	bl	8004dc8 <I2C_IsAcknowledgeFailed>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d001      	beq.n	8004c54 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e02d      	b.n	8004cb0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c5a:	d021      	beq.n	8004ca0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c5c:	f7fc ff7c 	bl	8001b58 <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	68ba      	ldr	r2, [r7, #8]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d302      	bcc.n	8004c72 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d116      	bne.n	8004ca0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2220      	movs	r2, #32
 8004c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8c:	f043 0220 	orr.w	r2, r3, #32
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e007      	b.n	8004cb0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	695b      	ldr	r3, [r3, #20]
 8004ca6:	f003 0304 	and.w	r3, r3, #4
 8004caa:	2b04      	cmp	r3, #4
 8004cac:	d1ca      	bne.n	8004c44 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3710      	adds	r7, #16
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b085      	sub	sp, #20
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004cc4:	4b13      	ldr	r3, [pc, #76]	; (8004d14 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	08db      	lsrs	r3, r3, #3
 8004cca:	4a13      	ldr	r2, [pc, #76]	; (8004d18 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd0:	0a1a      	lsrs	r2, r3, #8
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	4413      	add	r3, r2
 8004cd8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d107      	bne.n	8004cf6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cea:	f043 0220 	orr.w	r2, r3, #32
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e008      	b.n	8004d08 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d04:	d0e9      	beq.n	8004cda <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004d06:	2300      	movs	r3, #0
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3714      	adds	r7, #20
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr
 8004d14:	2000001c 	.word	0x2000001c
 8004d18:	14f8b589 	.word	0x14f8b589

08004d1c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d28:	e042      	b.n	8004db0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	695b      	ldr	r3, [r3, #20]
 8004d30:	f003 0310 	and.w	r3, r3, #16
 8004d34:	2b10      	cmp	r3, #16
 8004d36:	d119      	bne.n	8004d6c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f06f 0210 	mvn.w	r2, #16
 8004d40:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2200      	movs	r2, #0
 8004d46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2220      	movs	r2, #32
 8004d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e029      	b.n	8004dc0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d6c:	f7fc fef4 	bl	8001b58 <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	68ba      	ldr	r2, [r7, #8]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d302      	bcc.n	8004d82 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d116      	bne.n	8004db0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2200      	movs	r2, #0
 8004d86:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2220      	movs	r2, #32
 8004d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9c:	f043 0220 	orr.w	r2, r3, #32
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e007      	b.n	8004dc0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dba:	2b40      	cmp	r3, #64	; 0x40
 8004dbc:	d1b5      	bne.n	8004d2a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004dbe:	2300      	movs	r3, #0
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3710      	adds	r7, #16
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dde:	d11b      	bne.n	8004e18 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004de8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2220      	movs	r2, #32
 8004df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e04:	f043 0204 	orr.w	r2, r3, #4
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e000      	b.n	8004e1a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	370c      	adds	r7, #12
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr

08004e26 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004e26:	b480      	push	{r7}
 8004e28:	b083      	sub	sp, #12
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e32:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004e36:	d103      	bne.n	8004e40 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004e3e:	e007      	b.n	8004e50 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e44:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004e48:	d102      	bne.n	8004e50 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2208      	movs	r2, #8
 8004e4e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004e50:	bf00      	nop
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d101      	bne.n	8004e6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e264      	b.n	8005338 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d075      	beq.n	8004f66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e7a:	4ba3      	ldr	r3, [pc, #652]	; (8005108 <HAL_RCC_OscConfig+0x2ac>)
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	f003 030c 	and.w	r3, r3, #12
 8004e82:	2b04      	cmp	r3, #4
 8004e84:	d00c      	beq.n	8004ea0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e86:	4ba0      	ldr	r3, [pc, #640]	; (8005108 <HAL_RCC_OscConfig+0x2ac>)
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e8e:	2b08      	cmp	r3, #8
 8004e90:	d112      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e92:	4b9d      	ldr	r3, [pc, #628]	; (8005108 <HAL_RCC_OscConfig+0x2ac>)
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e9e:	d10b      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ea0:	4b99      	ldr	r3, [pc, #612]	; (8005108 <HAL_RCC_OscConfig+0x2ac>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d05b      	beq.n	8004f64 <HAL_RCC_OscConfig+0x108>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d157      	bne.n	8004f64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e23f      	b.n	8005338 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ec0:	d106      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x74>
 8004ec2:	4b91      	ldr	r3, [pc, #580]	; (8005108 <HAL_RCC_OscConfig+0x2ac>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a90      	ldr	r2, [pc, #576]	; (8005108 <HAL_RCC_OscConfig+0x2ac>)
 8004ec8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ecc:	6013      	str	r3, [r2, #0]
 8004ece:	e01d      	b.n	8004f0c <HAL_RCC_OscConfig+0xb0>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ed8:	d10c      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x98>
 8004eda:	4b8b      	ldr	r3, [pc, #556]	; (8005108 <HAL_RCC_OscConfig+0x2ac>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a8a      	ldr	r2, [pc, #552]	; (8005108 <HAL_RCC_OscConfig+0x2ac>)
 8004ee0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ee4:	6013      	str	r3, [r2, #0]
 8004ee6:	4b88      	ldr	r3, [pc, #544]	; (8005108 <HAL_RCC_OscConfig+0x2ac>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a87      	ldr	r2, [pc, #540]	; (8005108 <HAL_RCC_OscConfig+0x2ac>)
 8004eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ef0:	6013      	str	r3, [r2, #0]
 8004ef2:	e00b      	b.n	8004f0c <HAL_RCC_OscConfig+0xb0>
 8004ef4:	4b84      	ldr	r3, [pc, #528]	; (8005108 <HAL_RCC_OscConfig+0x2ac>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a83      	ldr	r2, [pc, #524]	; (8005108 <HAL_RCC_OscConfig+0x2ac>)
 8004efa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004efe:	6013      	str	r3, [r2, #0]
 8004f00:	4b81      	ldr	r3, [pc, #516]	; (8005108 <HAL_RCC_OscConfig+0x2ac>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a80      	ldr	r2, [pc, #512]	; (8005108 <HAL_RCC_OscConfig+0x2ac>)
 8004f06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d013      	beq.n	8004f3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f14:	f7fc fe20 	bl	8001b58 <HAL_GetTick>
 8004f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f1a:	e008      	b.n	8004f2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f1c:	f7fc fe1c 	bl	8001b58 <HAL_GetTick>
 8004f20:	4602      	mov	r2, r0
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	2b64      	cmp	r3, #100	; 0x64
 8004f28:	d901      	bls.n	8004f2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e204      	b.n	8005338 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f2e:	4b76      	ldr	r3, [pc, #472]	; (8005108 <HAL_RCC_OscConfig+0x2ac>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d0f0      	beq.n	8004f1c <HAL_RCC_OscConfig+0xc0>
 8004f3a:	e014      	b.n	8004f66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f3c:	f7fc fe0c 	bl	8001b58 <HAL_GetTick>
 8004f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f42:	e008      	b.n	8004f56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f44:	f7fc fe08 	bl	8001b58 <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	2b64      	cmp	r3, #100	; 0x64
 8004f50:	d901      	bls.n	8004f56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e1f0      	b.n	8005338 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f56:	4b6c      	ldr	r3, [pc, #432]	; (8005108 <HAL_RCC_OscConfig+0x2ac>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1f0      	bne.n	8004f44 <HAL_RCC_OscConfig+0xe8>
 8004f62:	e000      	b.n	8004f66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0302 	and.w	r3, r3, #2
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d063      	beq.n	800503a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f72:	4b65      	ldr	r3, [pc, #404]	; (8005108 <HAL_RCC_OscConfig+0x2ac>)
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	f003 030c 	and.w	r3, r3, #12
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d00b      	beq.n	8004f96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f7e:	4b62      	ldr	r3, [pc, #392]	; (8005108 <HAL_RCC_OscConfig+0x2ac>)
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f86:	2b08      	cmp	r3, #8
 8004f88:	d11c      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f8a:	4b5f      	ldr	r3, [pc, #380]	; (8005108 <HAL_RCC_OscConfig+0x2ac>)
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d116      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f96:	4b5c      	ldr	r3, [pc, #368]	; (8005108 <HAL_RCC_OscConfig+0x2ac>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0302 	and.w	r3, r3, #2
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d005      	beq.n	8004fae <HAL_RCC_OscConfig+0x152>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d001      	beq.n	8004fae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e1c4      	b.n	8005338 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fae:	4b56      	ldr	r3, [pc, #344]	; (8005108 <HAL_RCC_OscConfig+0x2ac>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	00db      	lsls	r3, r3, #3
 8004fbc:	4952      	ldr	r1, [pc, #328]	; (8005108 <HAL_RCC_OscConfig+0x2ac>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fc2:	e03a      	b.n	800503a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d020      	beq.n	800500e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fcc:	4b4f      	ldr	r3, [pc, #316]	; (800510c <HAL_RCC_OscConfig+0x2b0>)
 8004fce:	2201      	movs	r2, #1
 8004fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd2:	f7fc fdc1 	bl	8001b58 <HAL_GetTick>
 8004fd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fd8:	e008      	b.n	8004fec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fda:	f7fc fdbd 	bl	8001b58 <HAL_GetTick>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d901      	bls.n	8004fec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	e1a5      	b.n	8005338 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fec:	4b46      	ldr	r3, [pc, #280]	; (8005108 <HAL_RCC_OscConfig+0x2ac>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0302 	and.w	r3, r3, #2
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d0f0      	beq.n	8004fda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ff8:	4b43      	ldr	r3, [pc, #268]	; (8005108 <HAL_RCC_OscConfig+0x2ac>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	00db      	lsls	r3, r3, #3
 8005006:	4940      	ldr	r1, [pc, #256]	; (8005108 <HAL_RCC_OscConfig+0x2ac>)
 8005008:	4313      	orrs	r3, r2
 800500a:	600b      	str	r3, [r1, #0]
 800500c:	e015      	b.n	800503a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800500e:	4b3f      	ldr	r3, [pc, #252]	; (800510c <HAL_RCC_OscConfig+0x2b0>)
 8005010:	2200      	movs	r2, #0
 8005012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005014:	f7fc fda0 	bl	8001b58 <HAL_GetTick>
 8005018:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800501a:	e008      	b.n	800502e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800501c:	f7fc fd9c 	bl	8001b58 <HAL_GetTick>
 8005020:	4602      	mov	r2, r0
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	2b02      	cmp	r3, #2
 8005028:	d901      	bls.n	800502e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e184      	b.n	8005338 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800502e:	4b36      	ldr	r3, [pc, #216]	; (8005108 <HAL_RCC_OscConfig+0x2ac>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0302 	and.w	r3, r3, #2
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1f0      	bne.n	800501c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0308 	and.w	r3, r3, #8
 8005042:	2b00      	cmp	r3, #0
 8005044:	d030      	beq.n	80050a8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	695b      	ldr	r3, [r3, #20]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d016      	beq.n	800507c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800504e:	4b30      	ldr	r3, [pc, #192]	; (8005110 <HAL_RCC_OscConfig+0x2b4>)
 8005050:	2201      	movs	r2, #1
 8005052:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005054:	f7fc fd80 	bl	8001b58 <HAL_GetTick>
 8005058:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800505a:	e008      	b.n	800506e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800505c:	f7fc fd7c 	bl	8001b58 <HAL_GetTick>
 8005060:	4602      	mov	r2, r0
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	2b02      	cmp	r3, #2
 8005068:	d901      	bls.n	800506e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e164      	b.n	8005338 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800506e:	4b26      	ldr	r3, [pc, #152]	; (8005108 <HAL_RCC_OscConfig+0x2ac>)
 8005070:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005072:	f003 0302 	and.w	r3, r3, #2
 8005076:	2b00      	cmp	r3, #0
 8005078:	d0f0      	beq.n	800505c <HAL_RCC_OscConfig+0x200>
 800507a:	e015      	b.n	80050a8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800507c:	4b24      	ldr	r3, [pc, #144]	; (8005110 <HAL_RCC_OscConfig+0x2b4>)
 800507e:	2200      	movs	r2, #0
 8005080:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005082:	f7fc fd69 	bl	8001b58 <HAL_GetTick>
 8005086:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005088:	e008      	b.n	800509c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800508a:	f7fc fd65 	bl	8001b58 <HAL_GetTick>
 800508e:	4602      	mov	r2, r0
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	2b02      	cmp	r3, #2
 8005096:	d901      	bls.n	800509c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e14d      	b.n	8005338 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800509c:	4b1a      	ldr	r3, [pc, #104]	; (8005108 <HAL_RCC_OscConfig+0x2ac>)
 800509e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050a0:	f003 0302 	and.w	r3, r3, #2
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d1f0      	bne.n	800508a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0304 	and.w	r3, r3, #4
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	f000 80a0 	beq.w	80051f6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050b6:	2300      	movs	r3, #0
 80050b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050ba:	4b13      	ldr	r3, [pc, #76]	; (8005108 <HAL_RCC_OscConfig+0x2ac>)
 80050bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d10f      	bne.n	80050e6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050c6:	2300      	movs	r3, #0
 80050c8:	60bb      	str	r3, [r7, #8]
 80050ca:	4b0f      	ldr	r3, [pc, #60]	; (8005108 <HAL_RCC_OscConfig+0x2ac>)
 80050cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ce:	4a0e      	ldr	r2, [pc, #56]	; (8005108 <HAL_RCC_OscConfig+0x2ac>)
 80050d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050d4:	6413      	str	r3, [r2, #64]	; 0x40
 80050d6:	4b0c      	ldr	r3, [pc, #48]	; (8005108 <HAL_RCC_OscConfig+0x2ac>)
 80050d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050de:	60bb      	str	r3, [r7, #8]
 80050e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050e2:	2301      	movs	r3, #1
 80050e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050e6:	4b0b      	ldr	r3, [pc, #44]	; (8005114 <HAL_RCC_OscConfig+0x2b8>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d121      	bne.n	8005136 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050f2:	4b08      	ldr	r3, [pc, #32]	; (8005114 <HAL_RCC_OscConfig+0x2b8>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a07      	ldr	r2, [pc, #28]	; (8005114 <HAL_RCC_OscConfig+0x2b8>)
 80050f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050fe:	f7fc fd2b 	bl	8001b58 <HAL_GetTick>
 8005102:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005104:	e011      	b.n	800512a <HAL_RCC_OscConfig+0x2ce>
 8005106:	bf00      	nop
 8005108:	40023800 	.word	0x40023800
 800510c:	42470000 	.word	0x42470000
 8005110:	42470e80 	.word	0x42470e80
 8005114:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005118:	f7fc fd1e 	bl	8001b58 <HAL_GetTick>
 800511c:	4602      	mov	r2, r0
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	2b02      	cmp	r3, #2
 8005124:	d901      	bls.n	800512a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	e106      	b.n	8005338 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800512a:	4b85      	ldr	r3, [pc, #532]	; (8005340 <HAL_RCC_OscConfig+0x4e4>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005132:	2b00      	cmp	r3, #0
 8005134:	d0f0      	beq.n	8005118 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	2b01      	cmp	r3, #1
 800513c:	d106      	bne.n	800514c <HAL_RCC_OscConfig+0x2f0>
 800513e:	4b81      	ldr	r3, [pc, #516]	; (8005344 <HAL_RCC_OscConfig+0x4e8>)
 8005140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005142:	4a80      	ldr	r2, [pc, #512]	; (8005344 <HAL_RCC_OscConfig+0x4e8>)
 8005144:	f043 0301 	orr.w	r3, r3, #1
 8005148:	6713      	str	r3, [r2, #112]	; 0x70
 800514a:	e01c      	b.n	8005186 <HAL_RCC_OscConfig+0x32a>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	2b05      	cmp	r3, #5
 8005152:	d10c      	bne.n	800516e <HAL_RCC_OscConfig+0x312>
 8005154:	4b7b      	ldr	r3, [pc, #492]	; (8005344 <HAL_RCC_OscConfig+0x4e8>)
 8005156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005158:	4a7a      	ldr	r2, [pc, #488]	; (8005344 <HAL_RCC_OscConfig+0x4e8>)
 800515a:	f043 0304 	orr.w	r3, r3, #4
 800515e:	6713      	str	r3, [r2, #112]	; 0x70
 8005160:	4b78      	ldr	r3, [pc, #480]	; (8005344 <HAL_RCC_OscConfig+0x4e8>)
 8005162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005164:	4a77      	ldr	r2, [pc, #476]	; (8005344 <HAL_RCC_OscConfig+0x4e8>)
 8005166:	f043 0301 	orr.w	r3, r3, #1
 800516a:	6713      	str	r3, [r2, #112]	; 0x70
 800516c:	e00b      	b.n	8005186 <HAL_RCC_OscConfig+0x32a>
 800516e:	4b75      	ldr	r3, [pc, #468]	; (8005344 <HAL_RCC_OscConfig+0x4e8>)
 8005170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005172:	4a74      	ldr	r2, [pc, #464]	; (8005344 <HAL_RCC_OscConfig+0x4e8>)
 8005174:	f023 0301 	bic.w	r3, r3, #1
 8005178:	6713      	str	r3, [r2, #112]	; 0x70
 800517a:	4b72      	ldr	r3, [pc, #456]	; (8005344 <HAL_RCC_OscConfig+0x4e8>)
 800517c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800517e:	4a71      	ldr	r2, [pc, #452]	; (8005344 <HAL_RCC_OscConfig+0x4e8>)
 8005180:	f023 0304 	bic.w	r3, r3, #4
 8005184:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d015      	beq.n	80051ba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800518e:	f7fc fce3 	bl	8001b58 <HAL_GetTick>
 8005192:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005194:	e00a      	b.n	80051ac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005196:	f7fc fcdf 	bl	8001b58 <HAL_GetTick>
 800519a:	4602      	mov	r2, r0
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d901      	bls.n	80051ac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e0c5      	b.n	8005338 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051ac:	4b65      	ldr	r3, [pc, #404]	; (8005344 <HAL_RCC_OscConfig+0x4e8>)
 80051ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051b0:	f003 0302 	and.w	r3, r3, #2
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d0ee      	beq.n	8005196 <HAL_RCC_OscConfig+0x33a>
 80051b8:	e014      	b.n	80051e4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051ba:	f7fc fccd 	bl	8001b58 <HAL_GetTick>
 80051be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051c0:	e00a      	b.n	80051d8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051c2:	f7fc fcc9 	bl	8001b58 <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d901      	bls.n	80051d8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80051d4:	2303      	movs	r3, #3
 80051d6:	e0af      	b.n	8005338 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051d8:	4b5a      	ldr	r3, [pc, #360]	; (8005344 <HAL_RCC_OscConfig+0x4e8>)
 80051da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051dc:	f003 0302 	and.w	r3, r3, #2
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d1ee      	bne.n	80051c2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051e4:	7dfb      	ldrb	r3, [r7, #23]
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d105      	bne.n	80051f6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051ea:	4b56      	ldr	r3, [pc, #344]	; (8005344 <HAL_RCC_OscConfig+0x4e8>)
 80051ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ee:	4a55      	ldr	r2, [pc, #340]	; (8005344 <HAL_RCC_OscConfig+0x4e8>)
 80051f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	f000 809b 	beq.w	8005336 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005200:	4b50      	ldr	r3, [pc, #320]	; (8005344 <HAL_RCC_OscConfig+0x4e8>)
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	f003 030c 	and.w	r3, r3, #12
 8005208:	2b08      	cmp	r3, #8
 800520a:	d05c      	beq.n	80052c6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	2b02      	cmp	r3, #2
 8005212:	d141      	bne.n	8005298 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005214:	4b4c      	ldr	r3, [pc, #304]	; (8005348 <HAL_RCC_OscConfig+0x4ec>)
 8005216:	2200      	movs	r2, #0
 8005218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800521a:	f7fc fc9d 	bl	8001b58 <HAL_GetTick>
 800521e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005220:	e008      	b.n	8005234 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005222:	f7fc fc99 	bl	8001b58 <HAL_GetTick>
 8005226:	4602      	mov	r2, r0
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	2b02      	cmp	r3, #2
 800522e:	d901      	bls.n	8005234 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	e081      	b.n	8005338 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005234:	4b43      	ldr	r3, [pc, #268]	; (8005344 <HAL_RCC_OscConfig+0x4e8>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d1f0      	bne.n	8005222 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	69da      	ldr	r2, [r3, #28]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a1b      	ldr	r3, [r3, #32]
 8005248:	431a      	orrs	r2, r3
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524e:	019b      	lsls	r3, r3, #6
 8005250:	431a      	orrs	r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005256:	085b      	lsrs	r3, r3, #1
 8005258:	3b01      	subs	r3, #1
 800525a:	041b      	lsls	r3, r3, #16
 800525c:	431a      	orrs	r2, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005262:	061b      	lsls	r3, r3, #24
 8005264:	4937      	ldr	r1, [pc, #220]	; (8005344 <HAL_RCC_OscConfig+0x4e8>)
 8005266:	4313      	orrs	r3, r2
 8005268:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800526a:	4b37      	ldr	r3, [pc, #220]	; (8005348 <HAL_RCC_OscConfig+0x4ec>)
 800526c:	2201      	movs	r2, #1
 800526e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005270:	f7fc fc72 	bl	8001b58 <HAL_GetTick>
 8005274:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005276:	e008      	b.n	800528a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005278:	f7fc fc6e 	bl	8001b58 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	2b02      	cmp	r3, #2
 8005284:	d901      	bls.n	800528a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e056      	b.n	8005338 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800528a:	4b2e      	ldr	r3, [pc, #184]	; (8005344 <HAL_RCC_OscConfig+0x4e8>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005292:	2b00      	cmp	r3, #0
 8005294:	d0f0      	beq.n	8005278 <HAL_RCC_OscConfig+0x41c>
 8005296:	e04e      	b.n	8005336 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005298:	4b2b      	ldr	r3, [pc, #172]	; (8005348 <HAL_RCC_OscConfig+0x4ec>)
 800529a:	2200      	movs	r2, #0
 800529c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800529e:	f7fc fc5b 	bl	8001b58 <HAL_GetTick>
 80052a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052a4:	e008      	b.n	80052b8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052a6:	f7fc fc57 	bl	8001b58 <HAL_GetTick>
 80052aa:	4602      	mov	r2, r0
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d901      	bls.n	80052b8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80052b4:	2303      	movs	r3, #3
 80052b6:	e03f      	b.n	8005338 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052b8:	4b22      	ldr	r3, [pc, #136]	; (8005344 <HAL_RCC_OscConfig+0x4e8>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d1f0      	bne.n	80052a6 <HAL_RCC_OscConfig+0x44a>
 80052c4:	e037      	b.n	8005336 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d101      	bne.n	80052d2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e032      	b.n	8005338 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80052d2:	4b1c      	ldr	r3, [pc, #112]	; (8005344 <HAL_RCC_OscConfig+0x4e8>)
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	699b      	ldr	r3, [r3, #24]
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d028      	beq.n	8005332 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d121      	bne.n	8005332 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d11a      	bne.n	8005332 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005302:	4013      	ands	r3, r2
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005308:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800530a:	4293      	cmp	r3, r2
 800530c:	d111      	bne.n	8005332 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005318:	085b      	lsrs	r3, r3, #1
 800531a:	3b01      	subs	r3, #1
 800531c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800531e:	429a      	cmp	r2, r3
 8005320:	d107      	bne.n	8005332 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800532c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800532e:	429a      	cmp	r2, r3
 8005330:	d001      	beq.n	8005336 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e000      	b.n	8005338 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	3718      	adds	r7, #24
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}
 8005340:	40007000 	.word	0x40007000
 8005344:	40023800 	.word	0x40023800
 8005348:	42470060 	.word	0x42470060

0800534c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d101      	bne.n	8005360 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	e0cc      	b.n	80054fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005360:	4b68      	ldr	r3, [pc, #416]	; (8005504 <HAL_RCC_ClockConfig+0x1b8>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0307 	and.w	r3, r3, #7
 8005368:	683a      	ldr	r2, [r7, #0]
 800536a:	429a      	cmp	r2, r3
 800536c:	d90c      	bls.n	8005388 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800536e:	4b65      	ldr	r3, [pc, #404]	; (8005504 <HAL_RCC_ClockConfig+0x1b8>)
 8005370:	683a      	ldr	r2, [r7, #0]
 8005372:	b2d2      	uxtb	r2, r2
 8005374:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005376:	4b63      	ldr	r3, [pc, #396]	; (8005504 <HAL_RCC_ClockConfig+0x1b8>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0307 	and.w	r3, r3, #7
 800537e:	683a      	ldr	r2, [r7, #0]
 8005380:	429a      	cmp	r2, r3
 8005382:	d001      	beq.n	8005388 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e0b8      	b.n	80054fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0302 	and.w	r3, r3, #2
 8005390:	2b00      	cmp	r3, #0
 8005392:	d020      	beq.n	80053d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0304 	and.w	r3, r3, #4
 800539c:	2b00      	cmp	r3, #0
 800539e:	d005      	beq.n	80053ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053a0:	4b59      	ldr	r3, [pc, #356]	; (8005508 <HAL_RCC_ClockConfig+0x1bc>)
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	4a58      	ldr	r2, [pc, #352]	; (8005508 <HAL_RCC_ClockConfig+0x1bc>)
 80053a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80053aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0308 	and.w	r3, r3, #8
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d005      	beq.n	80053c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053b8:	4b53      	ldr	r3, [pc, #332]	; (8005508 <HAL_RCC_ClockConfig+0x1bc>)
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	4a52      	ldr	r2, [pc, #328]	; (8005508 <HAL_RCC_ClockConfig+0x1bc>)
 80053be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80053c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053c4:	4b50      	ldr	r3, [pc, #320]	; (8005508 <HAL_RCC_ClockConfig+0x1bc>)
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	494d      	ldr	r1, [pc, #308]	; (8005508 <HAL_RCC_ClockConfig+0x1bc>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0301 	and.w	r3, r3, #1
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d044      	beq.n	800546c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d107      	bne.n	80053fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053ea:	4b47      	ldr	r3, [pc, #284]	; (8005508 <HAL_RCC_ClockConfig+0x1bc>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d119      	bne.n	800542a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e07f      	b.n	80054fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	2b02      	cmp	r3, #2
 8005400:	d003      	beq.n	800540a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005406:	2b03      	cmp	r3, #3
 8005408:	d107      	bne.n	800541a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800540a:	4b3f      	ldr	r3, [pc, #252]	; (8005508 <HAL_RCC_ClockConfig+0x1bc>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005412:	2b00      	cmp	r3, #0
 8005414:	d109      	bne.n	800542a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e06f      	b.n	80054fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800541a:	4b3b      	ldr	r3, [pc, #236]	; (8005508 <HAL_RCC_ClockConfig+0x1bc>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 0302 	and.w	r3, r3, #2
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e067      	b.n	80054fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800542a:	4b37      	ldr	r3, [pc, #220]	; (8005508 <HAL_RCC_ClockConfig+0x1bc>)
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	f023 0203 	bic.w	r2, r3, #3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	4934      	ldr	r1, [pc, #208]	; (8005508 <HAL_RCC_ClockConfig+0x1bc>)
 8005438:	4313      	orrs	r3, r2
 800543a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800543c:	f7fc fb8c 	bl	8001b58 <HAL_GetTick>
 8005440:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005442:	e00a      	b.n	800545a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005444:	f7fc fb88 	bl	8001b58 <HAL_GetTick>
 8005448:	4602      	mov	r2, r0
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005452:	4293      	cmp	r3, r2
 8005454:	d901      	bls.n	800545a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e04f      	b.n	80054fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800545a:	4b2b      	ldr	r3, [pc, #172]	; (8005508 <HAL_RCC_ClockConfig+0x1bc>)
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	f003 020c 	and.w	r2, r3, #12
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	429a      	cmp	r2, r3
 800546a:	d1eb      	bne.n	8005444 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800546c:	4b25      	ldr	r3, [pc, #148]	; (8005504 <HAL_RCC_ClockConfig+0x1b8>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0307 	and.w	r3, r3, #7
 8005474:	683a      	ldr	r2, [r7, #0]
 8005476:	429a      	cmp	r2, r3
 8005478:	d20c      	bcs.n	8005494 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800547a:	4b22      	ldr	r3, [pc, #136]	; (8005504 <HAL_RCC_ClockConfig+0x1b8>)
 800547c:	683a      	ldr	r2, [r7, #0]
 800547e:	b2d2      	uxtb	r2, r2
 8005480:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005482:	4b20      	ldr	r3, [pc, #128]	; (8005504 <HAL_RCC_ClockConfig+0x1b8>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 0307 	and.w	r3, r3, #7
 800548a:	683a      	ldr	r2, [r7, #0]
 800548c:	429a      	cmp	r2, r3
 800548e:	d001      	beq.n	8005494 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e032      	b.n	80054fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0304 	and.w	r3, r3, #4
 800549c:	2b00      	cmp	r3, #0
 800549e:	d008      	beq.n	80054b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054a0:	4b19      	ldr	r3, [pc, #100]	; (8005508 <HAL_RCC_ClockConfig+0x1bc>)
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	4916      	ldr	r1, [pc, #88]	; (8005508 <HAL_RCC_ClockConfig+0x1bc>)
 80054ae:	4313      	orrs	r3, r2
 80054b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 0308 	and.w	r3, r3, #8
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d009      	beq.n	80054d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054be:	4b12      	ldr	r3, [pc, #72]	; (8005508 <HAL_RCC_ClockConfig+0x1bc>)
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	00db      	lsls	r3, r3, #3
 80054cc:	490e      	ldr	r1, [pc, #56]	; (8005508 <HAL_RCC_ClockConfig+0x1bc>)
 80054ce:	4313      	orrs	r3, r2
 80054d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80054d2:	f000 f821 	bl	8005518 <HAL_RCC_GetSysClockFreq>
 80054d6:	4602      	mov	r2, r0
 80054d8:	4b0b      	ldr	r3, [pc, #44]	; (8005508 <HAL_RCC_ClockConfig+0x1bc>)
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	091b      	lsrs	r3, r3, #4
 80054de:	f003 030f 	and.w	r3, r3, #15
 80054e2:	490a      	ldr	r1, [pc, #40]	; (800550c <HAL_RCC_ClockConfig+0x1c0>)
 80054e4:	5ccb      	ldrb	r3, [r1, r3]
 80054e6:	fa22 f303 	lsr.w	r3, r2, r3
 80054ea:	4a09      	ldr	r2, [pc, #36]	; (8005510 <HAL_RCC_ClockConfig+0x1c4>)
 80054ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80054ee:	4b09      	ldr	r3, [pc, #36]	; (8005514 <HAL_RCC_ClockConfig+0x1c8>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4618      	mov	r0, r3
 80054f4:	f7fc f93a 	bl	800176c <HAL_InitTick>

  return HAL_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3710      	adds	r7, #16
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	40023c00 	.word	0x40023c00
 8005508:	40023800 	.word	0x40023800
 800550c:	08008e60 	.word	0x08008e60
 8005510:	2000001c 	.word	0x2000001c
 8005514:	20000020 	.word	0x20000020

08005518 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005518:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800551c:	b084      	sub	sp, #16
 800551e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005520:	2300      	movs	r3, #0
 8005522:	607b      	str	r3, [r7, #4]
 8005524:	2300      	movs	r3, #0
 8005526:	60fb      	str	r3, [r7, #12]
 8005528:	2300      	movs	r3, #0
 800552a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800552c:	2300      	movs	r3, #0
 800552e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005530:	4b67      	ldr	r3, [pc, #412]	; (80056d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	f003 030c 	and.w	r3, r3, #12
 8005538:	2b08      	cmp	r3, #8
 800553a:	d00d      	beq.n	8005558 <HAL_RCC_GetSysClockFreq+0x40>
 800553c:	2b08      	cmp	r3, #8
 800553e:	f200 80bd 	bhi.w	80056bc <HAL_RCC_GetSysClockFreq+0x1a4>
 8005542:	2b00      	cmp	r3, #0
 8005544:	d002      	beq.n	800554c <HAL_RCC_GetSysClockFreq+0x34>
 8005546:	2b04      	cmp	r3, #4
 8005548:	d003      	beq.n	8005552 <HAL_RCC_GetSysClockFreq+0x3a>
 800554a:	e0b7      	b.n	80056bc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800554c:	4b61      	ldr	r3, [pc, #388]	; (80056d4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800554e:	60bb      	str	r3, [r7, #8]
       break;
 8005550:	e0b7      	b.n	80056c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005552:	4b61      	ldr	r3, [pc, #388]	; (80056d8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005554:	60bb      	str	r3, [r7, #8]
      break;
 8005556:	e0b4      	b.n	80056c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005558:	4b5d      	ldr	r3, [pc, #372]	; (80056d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005560:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005562:	4b5b      	ldr	r3, [pc, #364]	; (80056d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800556a:	2b00      	cmp	r3, #0
 800556c:	d04d      	beq.n	800560a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800556e:	4b58      	ldr	r3, [pc, #352]	; (80056d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	099b      	lsrs	r3, r3, #6
 8005574:	461a      	mov	r2, r3
 8005576:	f04f 0300 	mov.w	r3, #0
 800557a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800557e:	f04f 0100 	mov.w	r1, #0
 8005582:	ea02 0800 	and.w	r8, r2, r0
 8005586:	ea03 0901 	and.w	r9, r3, r1
 800558a:	4640      	mov	r0, r8
 800558c:	4649      	mov	r1, r9
 800558e:	f04f 0200 	mov.w	r2, #0
 8005592:	f04f 0300 	mov.w	r3, #0
 8005596:	014b      	lsls	r3, r1, #5
 8005598:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800559c:	0142      	lsls	r2, r0, #5
 800559e:	4610      	mov	r0, r2
 80055a0:	4619      	mov	r1, r3
 80055a2:	ebb0 0008 	subs.w	r0, r0, r8
 80055a6:	eb61 0109 	sbc.w	r1, r1, r9
 80055aa:	f04f 0200 	mov.w	r2, #0
 80055ae:	f04f 0300 	mov.w	r3, #0
 80055b2:	018b      	lsls	r3, r1, #6
 80055b4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80055b8:	0182      	lsls	r2, r0, #6
 80055ba:	1a12      	subs	r2, r2, r0
 80055bc:	eb63 0301 	sbc.w	r3, r3, r1
 80055c0:	f04f 0000 	mov.w	r0, #0
 80055c4:	f04f 0100 	mov.w	r1, #0
 80055c8:	00d9      	lsls	r1, r3, #3
 80055ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80055ce:	00d0      	lsls	r0, r2, #3
 80055d0:	4602      	mov	r2, r0
 80055d2:	460b      	mov	r3, r1
 80055d4:	eb12 0208 	adds.w	r2, r2, r8
 80055d8:	eb43 0309 	adc.w	r3, r3, r9
 80055dc:	f04f 0000 	mov.w	r0, #0
 80055e0:	f04f 0100 	mov.w	r1, #0
 80055e4:	0259      	lsls	r1, r3, #9
 80055e6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80055ea:	0250      	lsls	r0, r2, #9
 80055ec:	4602      	mov	r2, r0
 80055ee:	460b      	mov	r3, r1
 80055f0:	4610      	mov	r0, r2
 80055f2:	4619      	mov	r1, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	461a      	mov	r2, r3
 80055f8:	f04f 0300 	mov.w	r3, #0
 80055fc:	f7fa fde8 	bl	80001d0 <__aeabi_uldivmod>
 8005600:	4602      	mov	r2, r0
 8005602:	460b      	mov	r3, r1
 8005604:	4613      	mov	r3, r2
 8005606:	60fb      	str	r3, [r7, #12]
 8005608:	e04a      	b.n	80056a0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800560a:	4b31      	ldr	r3, [pc, #196]	; (80056d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	099b      	lsrs	r3, r3, #6
 8005610:	461a      	mov	r2, r3
 8005612:	f04f 0300 	mov.w	r3, #0
 8005616:	f240 10ff 	movw	r0, #511	; 0x1ff
 800561a:	f04f 0100 	mov.w	r1, #0
 800561e:	ea02 0400 	and.w	r4, r2, r0
 8005622:	ea03 0501 	and.w	r5, r3, r1
 8005626:	4620      	mov	r0, r4
 8005628:	4629      	mov	r1, r5
 800562a:	f04f 0200 	mov.w	r2, #0
 800562e:	f04f 0300 	mov.w	r3, #0
 8005632:	014b      	lsls	r3, r1, #5
 8005634:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005638:	0142      	lsls	r2, r0, #5
 800563a:	4610      	mov	r0, r2
 800563c:	4619      	mov	r1, r3
 800563e:	1b00      	subs	r0, r0, r4
 8005640:	eb61 0105 	sbc.w	r1, r1, r5
 8005644:	f04f 0200 	mov.w	r2, #0
 8005648:	f04f 0300 	mov.w	r3, #0
 800564c:	018b      	lsls	r3, r1, #6
 800564e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005652:	0182      	lsls	r2, r0, #6
 8005654:	1a12      	subs	r2, r2, r0
 8005656:	eb63 0301 	sbc.w	r3, r3, r1
 800565a:	f04f 0000 	mov.w	r0, #0
 800565e:	f04f 0100 	mov.w	r1, #0
 8005662:	00d9      	lsls	r1, r3, #3
 8005664:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005668:	00d0      	lsls	r0, r2, #3
 800566a:	4602      	mov	r2, r0
 800566c:	460b      	mov	r3, r1
 800566e:	1912      	adds	r2, r2, r4
 8005670:	eb45 0303 	adc.w	r3, r5, r3
 8005674:	f04f 0000 	mov.w	r0, #0
 8005678:	f04f 0100 	mov.w	r1, #0
 800567c:	0299      	lsls	r1, r3, #10
 800567e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005682:	0290      	lsls	r0, r2, #10
 8005684:	4602      	mov	r2, r0
 8005686:	460b      	mov	r3, r1
 8005688:	4610      	mov	r0, r2
 800568a:	4619      	mov	r1, r3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	461a      	mov	r2, r3
 8005690:	f04f 0300 	mov.w	r3, #0
 8005694:	f7fa fd9c 	bl	80001d0 <__aeabi_uldivmod>
 8005698:	4602      	mov	r2, r0
 800569a:	460b      	mov	r3, r1
 800569c:	4613      	mov	r3, r2
 800569e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80056a0:	4b0b      	ldr	r3, [pc, #44]	; (80056d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	0c1b      	lsrs	r3, r3, #16
 80056a6:	f003 0303 	and.w	r3, r3, #3
 80056aa:	3301      	adds	r3, #1
 80056ac:	005b      	lsls	r3, r3, #1
 80056ae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b8:	60bb      	str	r3, [r7, #8]
      break;
 80056ba:	e002      	b.n	80056c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80056bc:	4b05      	ldr	r3, [pc, #20]	; (80056d4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80056be:	60bb      	str	r3, [r7, #8]
      break;
 80056c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056c2:	68bb      	ldr	r3, [r7, #8]
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3710      	adds	r7, #16
 80056c8:	46bd      	mov	sp, r7
 80056ca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80056ce:	bf00      	nop
 80056d0:	40023800 	.word	0x40023800
 80056d4:	00f42400 	.word	0x00f42400
 80056d8:	007a1200 	.word	0x007a1200

080056dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056dc:	b480      	push	{r7}
 80056de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056e0:	4b03      	ldr	r3, [pc, #12]	; (80056f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80056e2:	681b      	ldr	r3, [r3, #0]
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr
 80056ee:	bf00      	nop
 80056f0:	2000001c 	.word	0x2000001c

080056f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80056f8:	f7ff fff0 	bl	80056dc <HAL_RCC_GetHCLKFreq>
 80056fc:	4602      	mov	r2, r0
 80056fe:	4b05      	ldr	r3, [pc, #20]	; (8005714 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	0a9b      	lsrs	r3, r3, #10
 8005704:	f003 0307 	and.w	r3, r3, #7
 8005708:	4903      	ldr	r1, [pc, #12]	; (8005718 <HAL_RCC_GetPCLK1Freq+0x24>)
 800570a:	5ccb      	ldrb	r3, [r1, r3]
 800570c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005710:	4618      	mov	r0, r3
 8005712:	bd80      	pop	{r7, pc}
 8005714:	40023800 	.word	0x40023800
 8005718:	08008e70 	.word	0x08008e70

0800571c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005720:	f7ff ffdc 	bl	80056dc <HAL_RCC_GetHCLKFreq>
 8005724:	4602      	mov	r2, r0
 8005726:	4b05      	ldr	r3, [pc, #20]	; (800573c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	0b5b      	lsrs	r3, r3, #13
 800572c:	f003 0307 	and.w	r3, r3, #7
 8005730:	4903      	ldr	r1, [pc, #12]	; (8005740 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005732:	5ccb      	ldrb	r3, [r1, r3]
 8005734:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005738:	4618      	mov	r0, r3
 800573a:	bd80      	pop	{r7, pc}
 800573c:	40023800 	.word	0x40023800
 8005740:	08008e70 	.word	0x08008e70

08005744 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	220f      	movs	r2, #15
 8005752:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005754:	4b12      	ldr	r3, [pc, #72]	; (80057a0 <HAL_RCC_GetClockConfig+0x5c>)
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	f003 0203 	and.w	r2, r3, #3
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005760:	4b0f      	ldr	r3, [pc, #60]	; (80057a0 <HAL_RCC_GetClockConfig+0x5c>)
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800576c:	4b0c      	ldr	r3, [pc, #48]	; (80057a0 <HAL_RCC_GetClockConfig+0x5c>)
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005778:	4b09      	ldr	r3, [pc, #36]	; (80057a0 <HAL_RCC_GetClockConfig+0x5c>)
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	08db      	lsrs	r3, r3, #3
 800577e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005786:	4b07      	ldr	r3, [pc, #28]	; (80057a4 <HAL_RCC_GetClockConfig+0x60>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 0207 	and.w	r2, r3, #7
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	601a      	str	r2, [r3, #0]
}
 8005792:	bf00      	nop
 8005794:	370c      	adds	r7, #12
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop
 80057a0:	40023800 	.word	0x40023800
 80057a4:	40023c00 	.word	0x40023c00

080057a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b082      	sub	sp, #8
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d101      	bne.n	80057ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e041      	b.n	800583e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d106      	bne.n	80057d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 f839 	bl	8005846 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2202      	movs	r2, #2
 80057d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	3304      	adds	r3, #4
 80057e4:	4619      	mov	r1, r3
 80057e6:	4610      	mov	r0, r2
 80057e8:	f000 f9d8 	bl	8005b9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3708      	adds	r7, #8
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005846:	b480      	push	{r7}
 8005848:	b083      	sub	sp, #12
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800584e:	bf00      	nop
 8005850:	370c      	adds	r7, #12
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr
	...

0800585c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800585c:	b480      	push	{r7}
 800585e:	b085      	sub	sp, #20
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800586a:	b2db      	uxtb	r3, r3
 800586c:	2b01      	cmp	r3, #1
 800586e:	d001      	beq.n	8005874 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	e04e      	b.n	8005912 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2202      	movs	r2, #2
 8005878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68da      	ldr	r2, [r3, #12]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f042 0201 	orr.w	r2, r2, #1
 800588a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a23      	ldr	r2, [pc, #140]	; (8005920 <HAL_TIM_Base_Start_IT+0xc4>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d022      	beq.n	80058dc <HAL_TIM_Base_Start_IT+0x80>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800589e:	d01d      	beq.n	80058dc <HAL_TIM_Base_Start_IT+0x80>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a1f      	ldr	r2, [pc, #124]	; (8005924 <HAL_TIM_Base_Start_IT+0xc8>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d018      	beq.n	80058dc <HAL_TIM_Base_Start_IT+0x80>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a1e      	ldr	r2, [pc, #120]	; (8005928 <HAL_TIM_Base_Start_IT+0xcc>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d013      	beq.n	80058dc <HAL_TIM_Base_Start_IT+0x80>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a1c      	ldr	r2, [pc, #112]	; (800592c <HAL_TIM_Base_Start_IT+0xd0>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d00e      	beq.n	80058dc <HAL_TIM_Base_Start_IT+0x80>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a1b      	ldr	r2, [pc, #108]	; (8005930 <HAL_TIM_Base_Start_IT+0xd4>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d009      	beq.n	80058dc <HAL_TIM_Base_Start_IT+0x80>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a19      	ldr	r2, [pc, #100]	; (8005934 <HAL_TIM_Base_Start_IT+0xd8>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d004      	beq.n	80058dc <HAL_TIM_Base_Start_IT+0x80>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a18      	ldr	r2, [pc, #96]	; (8005938 <HAL_TIM_Base_Start_IT+0xdc>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d111      	bne.n	8005900 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	f003 0307 	and.w	r3, r3, #7
 80058e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2b06      	cmp	r3, #6
 80058ec:	d010      	beq.n	8005910 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f042 0201 	orr.w	r2, r2, #1
 80058fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058fe:	e007      	b.n	8005910 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f042 0201 	orr.w	r2, r2, #1
 800590e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	3714      	adds	r7, #20
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr
 800591e:	bf00      	nop
 8005920:	40010000 	.word	0x40010000
 8005924:	40000400 	.word	0x40000400
 8005928:	40000800 	.word	0x40000800
 800592c:	40000c00 	.word	0x40000c00
 8005930:	40010400 	.word	0x40010400
 8005934:	40014000 	.word	0x40014000
 8005938:	40001800 	.word	0x40001800

0800593c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	f003 0302 	and.w	r3, r3, #2
 800594e:	2b02      	cmp	r3, #2
 8005950:	d122      	bne.n	8005998 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	f003 0302 	and.w	r3, r3, #2
 800595c:	2b02      	cmp	r3, #2
 800595e:	d11b      	bne.n	8005998 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f06f 0202 	mvn.w	r2, #2
 8005968:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2201      	movs	r2, #1
 800596e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	f003 0303 	and.w	r3, r3, #3
 800597a:	2b00      	cmp	r3, #0
 800597c:	d003      	beq.n	8005986 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 f8ee 	bl	8005b60 <HAL_TIM_IC_CaptureCallback>
 8005984:	e005      	b.n	8005992 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 f8e0 	bl	8005b4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 f8f1 	bl	8005b74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	f003 0304 	and.w	r3, r3, #4
 80059a2:	2b04      	cmp	r3, #4
 80059a4:	d122      	bne.n	80059ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	f003 0304 	and.w	r3, r3, #4
 80059b0:	2b04      	cmp	r3, #4
 80059b2:	d11b      	bne.n	80059ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f06f 0204 	mvn.w	r2, #4
 80059bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2202      	movs	r2, #2
 80059c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	699b      	ldr	r3, [r3, #24]
 80059ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d003      	beq.n	80059da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 f8c4 	bl	8005b60 <HAL_TIM_IC_CaptureCallback>
 80059d8:	e005      	b.n	80059e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 f8b6 	bl	8005b4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f000 f8c7 	bl	8005b74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	f003 0308 	and.w	r3, r3, #8
 80059f6:	2b08      	cmp	r3, #8
 80059f8:	d122      	bne.n	8005a40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	f003 0308 	and.w	r3, r3, #8
 8005a04:	2b08      	cmp	r3, #8
 8005a06:	d11b      	bne.n	8005a40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f06f 0208 	mvn.w	r2, #8
 8005a10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2204      	movs	r2, #4
 8005a16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	69db      	ldr	r3, [r3, #28]
 8005a1e:	f003 0303 	and.w	r3, r3, #3
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d003      	beq.n	8005a2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 f89a 	bl	8005b60 <HAL_TIM_IC_CaptureCallback>
 8005a2c:	e005      	b.n	8005a3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 f88c 	bl	8005b4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f000 f89d 	bl	8005b74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	f003 0310 	and.w	r3, r3, #16
 8005a4a:	2b10      	cmp	r3, #16
 8005a4c:	d122      	bne.n	8005a94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	f003 0310 	and.w	r3, r3, #16
 8005a58:	2b10      	cmp	r3, #16
 8005a5a:	d11b      	bne.n	8005a94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f06f 0210 	mvn.w	r2, #16
 8005a64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2208      	movs	r2, #8
 8005a6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	69db      	ldr	r3, [r3, #28]
 8005a72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d003      	beq.n	8005a82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 f870 	bl	8005b60 <HAL_TIM_IC_CaptureCallback>
 8005a80:	e005      	b.n	8005a8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 f862 	bl	8005b4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f000 f873 	bl	8005b74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	f003 0301 	and.w	r3, r3, #1
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d10e      	bne.n	8005ac0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	f003 0301 	and.w	r3, r3, #1
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d107      	bne.n	8005ac0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f06f 0201 	mvn.w	r2, #1
 8005ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f7fb fc9e 	bl	80013fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aca:	2b80      	cmp	r3, #128	; 0x80
 8005acc:	d10e      	bne.n	8005aec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ad8:	2b80      	cmp	r3, #128	; 0x80
 8005ada:	d107      	bne.n	8005aec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 f902 	bl	8005cf0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005af6:	2b40      	cmp	r3, #64	; 0x40
 8005af8:	d10e      	bne.n	8005b18 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b04:	2b40      	cmp	r3, #64	; 0x40
 8005b06:	d107      	bne.n	8005b18 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 f838 	bl	8005b88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	f003 0320 	and.w	r3, r3, #32
 8005b22:	2b20      	cmp	r3, #32
 8005b24:	d10e      	bne.n	8005b44 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	f003 0320 	and.w	r3, r3, #32
 8005b30:	2b20      	cmp	r3, #32
 8005b32:	d107      	bne.n	8005b44 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f06f 0220 	mvn.w	r2, #32
 8005b3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 f8cc 	bl	8005cdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b44:	bf00      	nop
 8005b46:	3708      	adds	r7, #8
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b54:	bf00      	nop
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b083      	sub	sp, #12
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b68:	bf00      	nop
 8005b6a:	370c      	adds	r7, #12
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b7c:	bf00      	nop
 8005b7e:	370c      	adds	r7, #12
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b90:	bf00      	nop
 8005b92:	370c      	adds	r7, #12
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b085      	sub	sp, #20
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a40      	ldr	r2, [pc, #256]	; (8005cb0 <TIM_Base_SetConfig+0x114>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d013      	beq.n	8005bdc <TIM_Base_SetConfig+0x40>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bba:	d00f      	beq.n	8005bdc <TIM_Base_SetConfig+0x40>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a3d      	ldr	r2, [pc, #244]	; (8005cb4 <TIM_Base_SetConfig+0x118>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d00b      	beq.n	8005bdc <TIM_Base_SetConfig+0x40>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a3c      	ldr	r2, [pc, #240]	; (8005cb8 <TIM_Base_SetConfig+0x11c>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d007      	beq.n	8005bdc <TIM_Base_SetConfig+0x40>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a3b      	ldr	r2, [pc, #236]	; (8005cbc <TIM_Base_SetConfig+0x120>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d003      	beq.n	8005bdc <TIM_Base_SetConfig+0x40>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4a3a      	ldr	r2, [pc, #232]	; (8005cc0 <TIM_Base_SetConfig+0x124>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d108      	bne.n	8005bee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005be2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a2f      	ldr	r2, [pc, #188]	; (8005cb0 <TIM_Base_SetConfig+0x114>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d02b      	beq.n	8005c4e <TIM_Base_SetConfig+0xb2>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bfc:	d027      	beq.n	8005c4e <TIM_Base_SetConfig+0xb2>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a2c      	ldr	r2, [pc, #176]	; (8005cb4 <TIM_Base_SetConfig+0x118>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d023      	beq.n	8005c4e <TIM_Base_SetConfig+0xb2>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a2b      	ldr	r2, [pc, #172]	; (8005cb8 <TIM_Base_SetConfig+0x11c>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d01f      	beq.n	8005c4e <TIM_Base_SetConfig+0xb2>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a2a      	ldr	r2, [pc, #168]	; (8005cbc <TIM_Base_SetConfig+0x120>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d01b      	beq.n	8005c4e <TIM_Base_SetConfig+0xb2>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a29      	ldr	r2, [pc, #164]	; (8005cc0 <TIM_Base_SetConfig+0x124>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d017      	beq.n	8005c4e <TIM_Base_SetConfig+0xb2>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a28      	ldr	r2, [pc, #160]	; (8005cc4 <TIM_Base_SetConfig+0x128>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d013      	beq.n	8005c4e <TIM_Base_SetConfig+0xb2>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a27      	ldr	r2, [pc, #156]	; (8005cc8 <TIM_Base_SetConfig+0x12c>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d00f      	beq.n	8005c4e <TIM_Base_SetConfig+0xb2>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a26      	ldr	r2, [pc, #152]	; (8005ccc <TIM_Base_SetConfig+0x130>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d00b      	beq.n	8005c4e <TIM_Base_SetConfig+0xb2>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a25      	ldr	r2, [pc, #148]	; (8005cd0 <TIM_Base_SetConfig+0x134>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d007      	beq.n	8005c4e <TIM_Base_SetConfig+0xb2>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a24      	ldr	r2, [pc, #144]	; (8005cd4 <TIM_Base_SetConfig+0x138>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d003      	beq.n	8005c4e <TIM_Base_SetConfig+0xb2>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a23      	ldr	r2, [pc, #140]	; (8005cd8 <TIM_Base_SetConfig+0x13c>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d108      	bne.n	8005c60 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	695b      	ldr	r3, [r3, #20]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	68fa      	ldr	r2, [r7, #12]
 8005c72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	689a      	ldr	r2, [r3, #8]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a0a      	ldr	r2, [pc, #40]	; (8005cb0 <TIM_Base_SetConfig+0x114>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d003      	beq.n	8005c94 <TIM_Base_SetConfig+0xf8>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a0c      	ldr	r2, [pc, #48]	; (8005cc0 <TIM_Base_SetConfig+0x124>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d103      	bne.n	8005c9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	691a      	ldr	r2, [r3, #16]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	615a      	str	r2, [r3, #20]
}
 8005ca2:	bf00      	nop
 8005ca4:	3714      	adds	r7, #20
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop
 8005cb0:	40010000 	.word	0x40010000
 8005cb4:	40000400 	.word	0x40000400
 8005cb8:	40000800 	.word	0x40000800
 8005cbc:	40000c00 	.word	0x40000c00
 8005cc0:	40010400 	.word	0x40010400
 8005cc4:	40014000 	.word	0x40014000
 8005cc8:	40014400 	.word	0x40014400
 8005ccc:	40014800 	.word	0x40014800
 8005cd0:	40001800 	.word	0x40001800
 8005cd4:	40001c00 	.word	0x40001c00
 8005cd8:	40002000 	.word	0x40002000

08005cdc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ce4:	bf00      	nop
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005cf8:	bf00      	nop
 8005cfa:	370c      	adds	r7, #12
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b082      	sub	sp, #8
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d101      	bne.n	8005d16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e03f      	b.n	8005d96 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d106      	bne.n	8005d30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f7fb fe26 	bl	800197c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2224      	movs	r2, #36	; 0x24
 8005d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68da      	ldr	r2, [r3, #12]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 fe7d 	bl	8006a48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	691a      	ldr	r2, [r3, #16]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	695a      	ldr	r2, [r3, #20]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68da      	ldr	r2, [r3, #12]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2220      	movs	r2, #32
 8005d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2220      	movs	r2, #32
 8005d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d94:	2300      	movs	r3, #0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3708      	adds	r7, #8
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}

08005d9e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d9e:	b580      	push	{r7, lr}
 8005da0:	b08a      	sub	sp, #40	; 0x28
 8005da2:	af02      	add	r7, sp, #8
 8005da4:	60f8      	str	r0, [r7, #12]
 8005da6:	60b9      	str	r1, [r7, #8]
 8005da8:	603b      	str	r3, [r7, #0]
 8005daa:	4613      	mov	r3, r2
 8005dac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005dae:	2300      	movs	r3, #0
 8005db0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	2b20      	cmp	r3, #32
 8005dbc:	d17c      	bne.n	8005eb8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d002      	beq.n	8005dca <HAL_UART_Transmit+0x2c>
 8005dc4:	88fb      	ldrh	r3, [r7, #6]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d101      	bne.n	8005dce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e075      	b.n	8005eba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d101      	bne.n	8005ddc <HAL_UART_Transmit+0x3e>
 8005dd8:	2302      	movs	r3, #2
 8005dda:	e06e      	b.n	8005eba <HAL_UART_Transmit+0x11c>
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2200      	movs	r2, #0
 8005de8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2221      	movs	r2, #33	; 0x21
 8005dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005df2:	f7fb feb1 	bl	8001b58 <HAL_GetTick>
 8005df6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	88fa      	ldrh	r2, [r7, #6]
 8005dfc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	88fa      	ldrh	r2, [r7, #6]
 8005e02:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e0c:	d108      	bne.n	8005e20 <HAL_UART_Transmit+0x82>
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	691b      	ldr	r3, [r3, #16]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d104      	bne.n	8005e20 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005e16:	2300      	movs	r3, #0
 8005e18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	61bb      	str	r3, [r7, #24]
 8005e1e:	e003      	b.n	8005e28 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e24:	2300      	movs	r3, #0
 8005e26:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005e30:	e02a      	b.n	8005e88 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	9300      	str	r3, [sp, #0]
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	2180      	movs	r1, #128	; 0x80
 8005e3c:	68f8      	ldr	r0, [r7, #12]
 8005e3e:	f000 fbc1 	bl	80065c4 <UART_WaitOnFlagUntilTimeout>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d001      	beq.n	8005e4c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005e48:	2303      	movs	r3, #3
 8005e4a:	e036      	b.n	8005eba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d10b      	bne.n	8005e6a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	881b      	ldrh	r3, [r3, #0]
 8005e56:	461a      	mov	r2, r3
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e60:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	3302      	adds	r3, #2
 8005e66:	61bb      	str	r3, [r7, #24]
 8005e68:	e007      	b.n	8005e7a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	781a      	ldrb	r2, [r3, #0]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	3301      	adds	r3, #1
 8005e78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	3b01      	subs	r3, #1
 8005e82:	b29a      	uxth	r2, r3
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d1cf      	bne.n	8005e32 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	9300      	str	r3, [sp, #0]
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	2140      	movs	r1, #64	; 0x40
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	f000 fb91 	bl	80065c4 <UART_WaitOnFlagUntilTimeout>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d001      	beq.n	8005eac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005ea8:	2303      	movs	r3, #3
 8005eaa:	e006      	b.n	8005eba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2220      	movs	r2, #32
 8005eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	e000      	b.n	8005eba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005eb8:	2302      	movs	r3, #2
  }
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3720      	adds	r7, #32
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ec2:	b580      	push	{r7, lr}
 8005ec4:	b084      	sub	sp, #16
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	60f8      	str	r0, [r7, #12]
 8005eca:	60b9      	str	r1, [r7, #8]
 8005ecc:	4613      	mov	r3, r2
 8005ece:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	2b20      	cmp	r3, #32
 8005eda:	d11d      	bne.n	8005f18 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d002      	beq.n	8005ee8 <HAL_UART_Receive_IT+0x26>
 8005ee2:	88fb      	ldrh	r3, [r7, #6]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d101      	bne.n	8005eec <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e016      	b.n	8005f1a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d101      	bne.n	8005efa <HAL_UART_Receive_IT+0x38>
 8005ef6:	2302      	movs	r3, #2
 8005ef8:	e00f      	b.n	8005f1a <HAL_UART_Receive_IT+0x58>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2201      	movs	r2, #1
 8005efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2200      	movs	r2, #0
 8005f06:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005f08:	88fb      	ldrh	r3, [r7, #6]
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	68b9      	ldr	r1, [r7, #8]
 8005f0e:	68f8      	ldr	r0, [r7, #12]
 8005f10:	f000 fbc6 	bl	80066a0 <UART_Start_Receive_IT>
 8005f14:	4603      	mov	r3, r0
 8005f16:	e000      	b.n	8005f1a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005f18:	2302      	movs	r3, #2
  }
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3710      	adds	r7, #16
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}

08005f22 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8005f22:	b580      	push	{r7, lr}
 8005f24:	b09a      	sub	sp, #104	; 0x68
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	330c      	adds	r3, #12
 8005f30:	64bb      	str	r3, [r7, #72]	; 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f34:	e853 3f00 	ldrex	r3, [r3]
 8005f38:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005f3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f40:	667b      	str	r3, [r7, #100]	; 0x64
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	330c      	adds	r3, #12
 8005f48:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005f4a:	657a      	str	r2, [r7, #84]	; 0x54
 8005f4c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f4e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f50:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005f52:	e841 2300 	strex	r3, r2, [r1]
 8005f56:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005f58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d1e5      	bne.n	8005f2a <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	3314      	adds	r3, #20
 8005f64:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f68:	e853 3f00 	ldrex	r3, [r3]
 8005f6c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f70:	f023 0301 	bic.w	r3, r3, #1
 8005f74:	663b      	str	r3, [r7, #96]	; 0x60
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	3314      	adds	r3, #20
 8005f7c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005f7e:	643a      	str	r2, [r7, #64]	; 0x40
 8005f80:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f82:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f86:	e841 2300 	strex	r3, r2, [r1]
 8005f8a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d1e5      	bne.n	8005f5e <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d119      	bne.n	8005fce <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	330c      	adds	r3, #12
 8005fa0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa2:	6a3b      	ldr	r3, [r7, #32]
 8005fa4:	e853 3f00 	ldrex	r3, [r3]
 8005fa8:	61fb      	str	r3, [r7, #28]
   return(result);
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	f023 0310 	bic.w	r3, r3, #16
 8005fb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	330c      	adds	r3, #12
 8005fb8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005fba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005fbc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fc2:	e841 2300 	strex	r3, r2, [r1]
 8005fc6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d1e5      	bne.n	8005f9a <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	695b      	ldr	r3, [r3, #20]
 8005fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fd8:	2b40      	cmp	r3, #64	; 0x40
 8005fda:	d136      	bne.n	800604a <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	3314      	adds	r3, #20
 8005fe2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	e853 3f00 	ldrex	r3, [r3]
 8005fea:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ff2:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	3314      	adds	r3, #20
 8005ffa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ffc:	61ba      	str	r2, [r7, #24]
 8005ffe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006000:	6979      	ldr	r1, [r7, #20]
 8006002:	69ba      	ldr	r2, [r7, #24]
 8006004:	e841 2300 	strex	r3, r2, [r1]
 8006008:	613b      	str	r3, [r7, #16]
   return(result);
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d1e5      	bne.n	8005fdc <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006014:	2b00      	cmp	r3, #0
 8006016:	d018      	beq.n	800604a <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800601c:	2200      	movs	r2, #0
 800601e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006024:	4618      	mov	r0, r3
 8006026:	f7fb fea9 	bl	8001d7c <HAL_DMA_Abort>
 800602a:	4603      	mov	r3, r0
 800602c:	2b00      	cmp	r3, #0
 800602e:	d00c      	beq.n	800604a <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006034:	4618      	mov	r0, r3
 8006036:	f7fb ff41 	bl	8001ebc <HAL_DMA_GetError>
 800603a:	4603      	mov	r3, r0
 800603c:	2b20      	cmp	r3, #32
 800603e:	d104      	bne.n	800604a <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2210      	movs	r2, #16
 8006044:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8006046:	2303      	movs	r3, #3
 8006048:	e00a      	b.n	8006060 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2220      	movs	r2, #32
 8006054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800605e:	2300      	movs	r3, #0
}
 8006060:	4618      	mov	r0, r3
 8006062:	3768      	adds	r7, #104	; 0x68
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b0ba      	sub	sp, #232	; 0xe8
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	695b      	ldr	r3, [r3, #20]
 800608a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800608e:	2300      	movs	r3, #0
 8006090:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006094:	2300      	movs	r3, #0
 8006096:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800609a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800609e:	f003 030f 	and.w	r3, r3, #15
 80060a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80060a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d10f      	bne.n	80060ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80060ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060b2:	f003 0320 	and.w	r3, r3, #32
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d009      	beq.n	80060ce <HAL_UART_IRQHandler+0x66>
 80060ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060be:	f003 0320 	and.w	r3, r3, #32
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d003      	beq.n	80060ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 fc03 	bl	80068d2 <UART_Receive_IT>
      return;
 80060cc:	e256      	b.n	800657c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80060ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	f000 80de 	beq.w	8006294 <HAL_UART_IRQHandler+0x22c>
 80060d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060dc:	f003 0301 	and.w	r3, r3, #1
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d106      	bne.n	80060f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80060e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060e8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	f000 80d1 	beq.w	8006294 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80060f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060f6:	f003 0301 	and.w	r3, r3, #1
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d00b      	beq.n	8006116 <HAL_UART_IRQHandler+0xae>
 80060fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006106:	2b00      	cmp	r3, #0
 8006108:	d005      	beq.n	8006116 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610e:	f043 0201 	orr.w	r2, r3, #1
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800611a:	f003 0304 	and.w	r3, r3, #4
 800611e:	2b00      	cmp	r3, #0
 8006120:	d00b      	beq.n	800613a <HAL_UART_IRQHandler+0xd2>
 8006122:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006126:	f003 0301 	and.w	r3, r3, #1
 800612a:	2b00      	cmp	r3, #0
 800612c:	d005      	beq.n	800613a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006132:	f043 0202 	orr.w	r2, r3, #2
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800613a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800613e:	f003 0302 	and.w	r3, r3, #2
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00b      	beq.n	800615e <HAL_UART_IRQHandler+0xf6>
 8006146:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800614a:	f003 0301 	and.w	r3, r3, #1
 800614e:	2b00      	cmp	r3, #0
 8006150:	d005      	beq.n	800615e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006156:	f043 0204 	orr.w	r2, r3, #4
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800615e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006162:	f003 0308 	and.w	r3, r3, #8
 8006166:	2b00      	cmp	r3, #0
 8006168:	d011      	beq.n	800618e <HAL_UART_IRQHandler+0x126>
 800616a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800616e:	f003 0320 	and.w	r3, r3, #32
 8006172:	2b00      	cmp	r3, #0
 8006174:	d105      	bne.n	8006182 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006176:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800617a:	f003 0301 	and.w	r3, r3, #1
 800617e:	2b00      	cmp	r3, #0
 8006180:	d005      	beq.n	800618e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006186:	f043 0208 	orr.w	r2, r3, #8
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006192:	2b00      	cmp	r3, #0
 8006194:	f000 81ed 	beq.w	8006572 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006198:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800619c:	f003 0320 	and.w	r3, r3, #32
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d008      	beq.n	80061b6 <HAL_UART_IRQHandler+0x14e>
 80061a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061a8:	f003 0320 	and.w	r3, r3, #32
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d002      	beq.n	80061b6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f000 fb8e 	bl	80068d2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	695b      	ldr	r3, [r3, #20]
 80061bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061c0:	2b40      	cmp	r3, #64	; 0x40
 80061c2:	bf0c      	ite	eq
 80061c4:	2301      	moveq	r3, #1
 80061c6:	2300      	movne	r3, #0
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d2:	f003 0308 	and.w	r3, r3, #8
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d103      	bne.n	80061e2 <HAL_UART_IRQHandler+0x17a>
 80061da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d04f      	beq.n	8006282 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 fa96 	bl	8006714 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	695b      	ldr	r3, [r3, #20]
 80061ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061f2:	2b40      	cmp	r3, #64	; 0x40
 80061f4:	d141      	bne.n	800627a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	3314      	adds	r3, #20
 80061fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006200:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006204:	e853 3f00 	ldrex	r3, [r3]
 8006208:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800620c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006210:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006214:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	3314      	adds	r3, #20
 800621e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006222:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006226:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800622e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006232:	e841 2300 	strex	r3, r2, [r1]
 8006236:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800623a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d1d9      	bne.n	80061f6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006246:	2b00      	cmp	r3, #0
 8006248:	d013      	beq.n	8006272 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800624e:	4a7d      	ldr	r2, [pc, #500]	; (8006444 <HAL_UART_IRQHandler+0x3dc>)
 8006250:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006256:	4618      	mov	r0, r3
 8006258:	f7fb fe00 	bl	8001e5c <HAL_DMA_Abort_IT>
 800625c:	4603      	mov	r3, r0
 800625e:	2b00      	cmp	r3, #0
 8006260:	d016      	beq.n	8006290 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006266:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800626c:	4610      	mov	r0, r2
 800626e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006270:	e00e      	b.n	8006290 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 f990 	bl	8006598 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006278:	e00a      	b.n	8006290 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 f98c 	bl	8006598 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006280:	e006      	b.n	8006290 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 f988 	bl	8006598 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800628e:	e170      	b.n	8006572 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006290:	bf00      	nop
    return;
 8006292:	e16e      	b.n	8006572 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006298:	2b01      	cmp	r3, #1
 800629a:	f040 814a 	bne.w	8006532 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800629e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062a2:	f003 0310 	and.w	r3, r3, #16
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	f000 8143 	beq.w	8006532 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80062ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062b0:	f003 0310 	and.w	r3, r3, #16
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	f000 813c 	beq.w	8006532 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80062ba:	2300      	movs	r3, #0
 80062bc:	60bb      	str	r3, [r7, #8]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	60bb      	str	r3, [r7, #8]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	60bb      	str	r3, [r7, #8]
 80062ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	695b      	ldr	r3, [r3, #20]
 80062d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062da:	2b40      	cmp	r3, #64	; 0x40
 80062dc:	f040 80b4 	bne.w	8006448 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80062ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	f000 8140 	beq.w	8006576 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80062fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80062fe:	429a      	cmp	r2, r3
 8006300:	f080 8139 	bcs.w	8006576 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800630a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006310:	69db      	ldr	r3, [r3, #28]
 8006312:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006316:	f000 8088 	beq.w	800642a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	330c      	adds	r3, #12
 8006320:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006324:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006328:	e853 3f00 	ldrex	r3, [r3]
 800632c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006330:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006334:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006338:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	330c      	adds	r3, #12
 8006342:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006346:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800634a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800634e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006352:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006356:	e841 2300 	strex	r3, r2, [r1]
 800635a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800635e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006362:	2b00      	cmp	r3, #0
 8006364:	d1d9      	bne.n	800631a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	3314      	adds	r3, #20
 800636c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800636e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006370:	e853 3f00 	ldrex	r3, [r3]
 8006374:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006376:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006378:	f023 0301 	bic.w	r3, r3, #1
 800637c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	3314      	adds	r3, #20
 8006386:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800638a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800638e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006390:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006392:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006396:	e841 2300 	strex	r3, r2, [r1]
 800639a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800639c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d1e1      	bne.n	8006366 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	3314      	adds	r3, #20
 80063a8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063ac:	e853 3f00 	ldrex	r3, [r3]
 80063b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80063b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	3314      	adds	r3, #20
 80063c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80063c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80063c8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80063cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80063ce:	e841 2300 	strex	r3, r2, [r1]
 80063d2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80063d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d1e3      	bne.n	80063a2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2220      	movs	r2, #32
 80063de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	330c      	adds	r3, #12
 80063ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063f2:	e853 3f00 	ldrex	r3, [r3]
 80063f6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80063f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063fa:	f023 0310 	bic.w	r3, r3, #16
 80063fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	330c      	adds	r3, #12
 8006408:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800640c:	65ba      	str	r2, [r7, #88]	; 0x58
 800640e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006410:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006412:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006414:	e841 2300 	strex	r3, r2, [r1]
 8006418:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800641a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800641c:	2b00      	cmp	r3, #0
 800641e:	d1e3      	bne.n	80063e8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006424:	4618      	mov	r0, r3
 8006426:	f7fb fca9 	bl	8001d7c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006432:	b29b      	uxth	r3, r3
 8006434:	1ad3      	subs	r3, r2, r3
 8006436:	b29b      	uxth	r3, r3
 8006438:	4619      	mov	r1, r3
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 f8b6 	bl	80065ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006440:	e099      	b.n	8006576 <HAL_UART_IRQHandler+0x50e>
 8006442:	bf00      	nop
 8006444:	080067db 	.word	0x080067db
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006450:	b29b      	uxth	r3, r3
 8006452:	1ad3      	subs	r3, r2, r3
 8006454:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800645c:	b29b      	uxth	r3, r3
 800645e:	2b00      	cmp	r3, #0
 8006460:	f000 808b 	beq.w	800657a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006464:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006468:	2b00      	cmp	r3, #0
 800646a:	f000 8086 	beq.w	800657a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	330c      	adds	r3, #12
 8006474:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006478:	e853 3f00 	ldrex	r3, [r3]
 800647c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800647e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006480:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006484:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	330c      	adds	r3, #12
 800648e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006492:	647a      	str	r2, [r7, #68]	; 0x44
 8006494:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006496:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006498:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800649a:	e841 2300 	strex	r3, r2, [r1]
 800649e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80064a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d1e3      	bne.n	800646e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	3314      	adds	r3, #20
 80064ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b0:	e853 3f00 	ldrex	r3, [r3]
 80064b4:	623b      	str	r3, [r7, #32]
   return(result);
 80064b6:	6a3b      	ldr	r3, [r7, #32]
 80064b8:	f023 0301 	bic.w	r3, r3, #1
 80064bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	3314      	adds	r3, #20
 80064c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80064ca:	633a      	str	r2, [r7, #48]	; 0x30
 80064cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064d2:	e841 2300 	strex	r3, r2, [r1]
 80064d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80064d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d1e3      	bne.n	80064a6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2220      	movs	r2, #32
 80064e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	330c      	adds	r3, #12
 80064f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	e853 3f00 	ldrex	r3, [r3]
 80064fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f023 0310 	bic.w	r3, r3, #16
 8006502:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	330c      	adds	r3, #12
 800650c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006510:	61fa      	str	r2, [r7, #28]
 8006512:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006514:	69b9      	ldr	r1, [r7, #24]
 8006516:	69fa      	ldr	r2, [r7, #28]
 8006518:	e841 2300 	strex	r3, r2, [r1]
 800651c:	617b      	str	r3, [r7, #20]
   return(result);
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d1e3      	bne.n	80064ec <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006524:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006528:	4619      	mov	r1, r3
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 f83e 	bl	80065ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006530:	e023      	b.n	800657a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800653a:	2b00      	cmp	r3, #0
 800653c:	d009      	beq.n	8006552 <HAL_UART_IRQHandler+0x4ea>
 800653e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006546:	2b00      	cmp	r3, #0
 8006548:	d003      	beq.n	8006552 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 f959 	bl	8006802 <UART_Transmit_IT>
    return;
 8006550:	e014      	b.n	800657c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00e      	beq.n	800657c <HAL_UART_IRQHandler+0x514>
 800655e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006566:	2b00      	cmp	r3, #0
 8006568:	d008      	beq.n	800657c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 f999 	bl	80068a2 <UART_EndTransmit_IT>
    return;
 8006570:	e004      	b.n	800657c <HAL_UART_IRQHandler+0x514>
    return;
 8006572:	bf00      	nop
 8006574:	e002      	b.n	800657c <HAL_UART_IRQHandler+0x514>
      return;
 8006576:	bf00      	nop
 8006578:	e000      	b.n	800657c <HAL_UART_IRQHandler+0x514>
      return;
 800657a:	bf00      	nop
  }
}
 800657c:	37e8      	adds	r7, #232	; 0xe8
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop

08006584 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006584:	b480      	push	{r7}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800658c:	bf00      	nop
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006598:	b480      	push	{r7}
 800659a:	b083      	sub	sp, #12
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80065a0:	bf00      	nop
 80065a2:	370c      	adds	r7, #12
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr

080065ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	460b      	mov	r3, r1
 80065b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80065b8:	bf00      	nop
 80065ba:	370c      	adds	r7, #12
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b090      	sub	sp, #64	; 0x40
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	603b      	str	r3, [r7, #0]
 80065d0:	4613      	mov	r3, r2
 80065d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065d4:	e050      	b.n	8006678 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065dc:	d04c      	beq.n	8006678 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80065de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d007      	beq.n	80065f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80065e4:	f7fb fab8 	bl	8001b58 <HAL_GetTick>
 80065e8:	4602      	mov	r2, r0
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	1ad3      	subs	r3, r2, r3
 80065ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d241      	bcs.n	8006678 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	330c      	adds	r3, #12
 80065fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065fe:	e853 3f00 	ldrex	r3, [r3]
 8006602:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006606:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800660a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	330c      	adds	r3, #12
 8006612:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006614:	637a      	str	r2, [r7, #52]	; 0x34
 8006616:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006618:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800661a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800661c:	e841 2300 	strex	r3, r2, [r1]
 8006620:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006624:	2b00      	cmp	r3, #0
 8006626:	d1e5      	bne.n	80065f4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	3314      	adds	r3, #20
 800662e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	e853 3f00 	ldrex	r3, [r3]
 8006636:	613b      	str	r3, [r7, #16]
   return(result);
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	f023 0301 	bic.w	r3, r3, #1
 800663e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	3314      	adds	r3, #20
 8006646:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006648:	623a      	str	r2, [r7, #32]
 800664a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664c:	69f9      	ldr	r1, [r7, #28]
 800664e:	6a3a      	ldr	r2, [r7, #32]
 8006650:	e841 2300 	strex	r3, r2, [r1]
 8006654:	61bb      	str	r3, [r7, #24]
   return(result);
 8006656:	69bb      	ldr	r3, [r7, #24]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d1e5      	bne.n	8006628 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2220      	movs	r2, #32
 8006660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2220      	movs	r2, #32
 8006668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2200      	movs	r2, #0
 8006670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006674:	2303      	movs	r3, #3
 8006676:	e00f      	b.n	8006698 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	4013      	ands	r3, r2
 8006682:	68ba      	ldr	r2, [r7, #8]
 8006684:	429a      	cmp	r2, r3
 8006686:	bf0c      	ite	eq
 8006688:	2301      	moveq	r3, #1
 800668a:	2300      	movne	r3, #0
 800668c:	b2db      	uxtb	r3, r3
 800668e:	461a      	mov	r2, r3
 8006690:	79fb      	ldrb	r3, [r7, #7]
 8006692:	429a      	cmp	r2, r3
 8006694:	d09f      	beq.n	80065d6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006696:	2300      	movs	r3, #0
}
 8006698:	4618      	mov	r0, r3
 800669a:	3740      	adds	r7, #64	; 0x40
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b085      	sub	sp, #20
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	4613      	mov	r3, r2
 80066ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	68ba      	ldr	r2, [r7, #8]
 80066b2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	88fa      	ldrh	r2, [r7, #6]
 80066b8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	88fa      	ldrh	r2, [r7, #6]
 80066be:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2200      	movs	r2, #0
 80066c4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2222      	movs	r2, #34	; 0x22
 80066ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2200      	movs	r2, #0
 80066d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	68da      	ldr	r2, [r3, #12]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066e4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	695a      	ldr	r2, [r3, #20]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f042 0201 	orr.w	r2, r2, #1
 80066f4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	68da      	ldr	r2, [r3, #12]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f042 0220 	orr.w	r2, r2, #32
 8006704:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006706:	2300      	movs	r3, #0
}
 8006708:	4618      	mov	r0, r3
 800670a:	3714      	adds	r7, #20
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr

08006714 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006714:	b480      	push	{r7}
 8006716:	b095      	sub	sp, #84	; 0x54
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	330c      	adds	r3, #12
 8006722:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006726:	e853 3f00 	ldrex	r3, [r3]
 800672a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800672c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800672e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006732:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	330c      	adds	r3, #12
 800673a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800673c:	643a      	str	r2, [r7, #64]	; 0x40
 800673e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006740:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006742:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006744:	e841 2300 	strex	r3, r2, [r1]
 8006748:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800674a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800674c:	2b00      	cmp	r3, #0
 800674e:	d1e5      	bne.n	800671c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	3314      	adds	r3, #20
 8006756:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006758:	6a3b      	ldr	r3, [r7, #32]
 800675a:	e853 3f00 	ldrex	r3, [r3]
 800675e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	f023 0301 	bic.w	r3, r3, #1
 8006766:	64bb      	str	r3, [r7, #72]	; 0x48
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	3314      	adds	r3, #20
 800676e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006770:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006772:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006774:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006776:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006778:	e841 2300 	strex	r3, r2, [r1]
 800677c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800677e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006780:	2b00      	cmp	r3, #0
 8006782:	d1e5      	bne.n	8006750 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006788:	2b01      	cmp	r3, #1
 800678a:	d119      	bne.n	80067c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	330c      	adds	r3, #12
 8006792:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	e853 3f00 	ldrex	r3, [r3]
 800679a:	60bb      	str	r3, [r7, #8]
   return(result);
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	f023 0310 	bic.w	r3, r3, #16
 80067a2:	647b      	str	r3, [r7, #68]	; 0x44
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	330c      	adds	r3, #12
 80067aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80067ac:	61ba      	str	r2, [r7, #24]
 80067ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b0:	6979      	ldr	r1, [r7, #20]
 80067b2:	69ba      	ldr	r2, [r7, #24]
 80067b4:	e841 2300 	strex	r3, r2, [r1]
 80067b8:	613b      	str	r3, [r7, #16]
   return(result);
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d1e5      	bne.n	800678c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2220      	movs	r2, #32
 80067c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80067ce:	bf00      	nop
 80067d0:	3754      	adds	r7, #84	; 0x54
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr

080067da <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80067da:	b580      	push	{r7, lr}
 80067dc:	b084      	sub	sp, #16
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2200      	movs	r2, #0
 80067ec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2200      	movs	r2, #0
 80067f2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80067f4:	68f8      	ldr	r0, [r7, #12]
 80067f6:	f7ff fecf 	bl	8006598 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067fa:	bf00      	nop
 80067fc:	3710      	adds	r7, #16
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}

08006802 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006802:	b480      	push	{r7}
 8006804:	b085      	sub	sp, #20
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006810:	b2db      	uxtb	r3, r3
 8006812:	2b21      	cmp	r3, #33	; 0x21
 8006814:	d13e      	bne.n	8006894 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800681e:	d114      	bne.n	800684a <UART_Transmit_IT+0x48>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d110      	bne.n	800684a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6a1b      	ldr	r3, [r3, #32]
 800682c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	881b      	ldrh	r3, [r3, #0]
 8006832:	461a      	mov	r2, r3
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800683c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a1b      	ldr	r3, [r3, #32]
 8006842:	1c9a      	adds	r2, r3, #2
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	621a      	str	r2, [r3, #32]
 8006848:	e008      	b.n	800685c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a1b      	ldr	r3, [r3, #32]
 800684e:	1c59      	adds	r1, r3, #1
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	6211      	str	r1, [r2, #32]
 8006854:	781a      	ldrb	r2, [r3, #0]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006860:	b29b      	uxth	r3, r3
 8006862:	3b01      	subs	r3, #1
 8006864:	b29b      	uxth	r3, r3
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	4619      	mov	r1, r3
 800686a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800686c:	2b00      	cmp	r3, #0
 800686e:	d10f      	bne.n	8006890 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	68da      	ldr	r2, [r3, #12]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800687e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68da      	ldr	r2, [r3, #12]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800688e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006890:	2300      	movs	r3, #0
 8006892:	e000      	b.n	8006896 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006894:	2302      	movs	r3, #2
  }
}
 8006896:	4618      	mov	r0, r3
 8006898:	3714      	adds	r7, #20
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr

080068a2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80068a2:	b580      	push	{r7, lr}
 80068a4:	b082      	sub	sp, #8
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	68da      	ldr	r2, [r3, #12]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068b8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2220      	movs	r2, #32
 80068be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f7ff fe5e 	bl	8006584 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3708      	adds	r7, #8
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}

080068d2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80068d2:	b580      	push	{r7, lr}
 80068d4:	b08c      	sub	sp, #48	; 0x30
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	2b22      	cmp	r3, #34	; 0x22
 80068e4:	f040 80ab 	bne.w	8006a3e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068f0:	d117      	bne.n	8006922 <UART_Receive_IT+0x50>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d113      	bne.n	8006922 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80068fa:	2300      	movs	r3, #0
 80068fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006902:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	b29b      	uxth	r3, r3
 800690c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006910:	b29a      	uxth	r2, r3
 8006912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006914:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800691a:	1c9a      	adds	r2, r3, #2
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	629a      	str	r2, [r3, #40]	; 0x28
 8006920:	e026      	b.n	8006970 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006926:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006928:	2300      	movs	r3, #0
 800692a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006934:	d007      	beq.n	8006946 <UART_Receive_IT+0x74>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d10a      	bne.n	8006954 <UART_Receive_IT+0x82>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d106      	bne.n	8006954 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	b2da      	uxtb	r2, r3
 800694e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006950:	701a      	strb	r2, [r3, #0]
 8006952:	e008      	b.n	8006966 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	b2db      	uxtb	r3, r3
 800695c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006960:	b2da      	uxtb	r2, r3
 8006962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006964:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800696a:	1c5a      	adds	r2, r3, #1
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006974:	b29b      	uxth	r3, r3
 8006976:	3b01      	subs	r3, #1
 8006978:	b29b      	uxth	r3, r3
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	4619      	mov	r1, r3
 800697e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006980:	2b00      	cmp	r3, #0
 8006982:	d15a      	bne.n	8006a3a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	68da      	ldr	r2, [r3, #12]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f022 0220 	bic.w	r2, r2, #32
 8006992:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	68da      	ldr	r2, [r3, #12]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80069a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	695a      	ldr	r2, [r3, #20]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f022 0201 	bic.w	r2, r2, #1
 80069b2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2220      	movs	r2, #32
 80069b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d135      	bne.n	8006a30 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	330c      	adds	r3, #12
 80069d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	e853 3f00 	ldrex	r3, [r3]
 80069d8:	613b      	str	r3, [r7, #16]
   return(result);
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	f023 0310 	bic.w	r3, r3, #16
 80069e0:	627b      	str	r3, [r7, #36]	; 0x24
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	330c      	adds	r3, #12
 80069e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069ea:	623a      	str	r2, [r7, #32]
 80069ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ee:	69f9      	ldr	r1, [r7, #28]
 80069f0:	6a3a      	ldr	r2, [r7, #32]
 80069f2:	e841 2300 	strex	r3, r2, [r1]
 80069f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80069f8:	69bb      	ldr	r3, [r7, #24]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d1e5      	bne.n	80069ca <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f003 0310 	and.w	r3, r3, #16
 8006a08:	2b10      	cmp	r3, #16
 8006a0a:	d10a      	bne.n	8006a22 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	60fb      	str	r3, [r7, #12]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	60fb      	str	r3, [r7, #12]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	60fb      	str	r3, [r7, #12]
 8006a20:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006a26:	4619      	mov	r1, r3
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f7ff fdbf 	bl	80065ac <HAL_UARTEx_RxEventCallback>
 8006a2e:	e002      	b.n	8006a36 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f7fa fa79 	bl	8000f28 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006a36:	2300      	movs	r3, #0
 8006a38:	e002      	b.n	8006a40 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	e000      	b.n	8006a40 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006a3e:	2302      	movs	r3, #2
  }
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3730      	adds	r7, #48	; 0x30
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a4c:	b09f      	sub	sp, #124	; 0x7c
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	691b      	ldr	r3, [r3, #16]
 8006a58:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006a5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a5e:	68d9      	ldr	r1, [r3, #12]
 8006a60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	ea40 0301 	orr.w	r3, r0, r1
 8006a68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006a6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a6c:	689a      	ldr	r2, [r3, #8]
 8006a6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a70:	691b      	ldr	r3, [r3, #16]
 8006a72:	431a      	orrs	r2, r3
 8006a74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a76:	695b      	ldr	r3, [r3, #20]
 8006a78:	431a      	orrs	r2, r3
 8006a7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a7c:	69db      	ldr	r3, [r3, #28]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006a82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006a8c:	f021 010c 	bic.w	r1, r1, #12
 8006a90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a96:	430b      	orrs	r3, r1
 8006a98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	695b      	ldr	r3, [r3, #20]
 8006aa0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006aa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aa6:	6999      	ldr	r1, [r3, #24]
 8006aa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	ea40 0301 	orr.w	r3, r0, r1
 8006ab0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006ab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	4bc5      	ldr	r3, [pc, #788]	; (8006dcc <UART_SetConfig+0x384>)
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d004      	beq.n	8006ac6 <UART_SetConfig+0x7e>
 8006abc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	4bc3      	ldr	r3, [pc, #780]	; (8006dd0 <UART_SetConfig+0x388>)
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d103      	bne.n	8006ace <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006ac6:	f7fe fe29 	bl	800571c <HAL_RCC_GetPCLK2Freq>
 8006aca:	6778      	str	r0, [r7, #116]	; 0x74
 8006acc:	e002      	b.n	8006ad4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006ace:	f7fe fe11 	bl	80056f4 <HAL_RCC_GetPCLK1Freq>
 8006ad2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ad4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ad6:	69db      	ldr	r3, [r3, #28]
 8006ad8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006adc:	f040 80b6 	bne.w	8006c4c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006ae0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ae2:	461c      	mov	r4, r3
 8006ae4:	f04f 0500 	mov.w	r5, #0
 8006ae8:	4622      	mov	r2, r4
 8006aea:	462b      	mov	r3, r5
 8006aec:	1891      	adds	r1, r2, r2
 8006aee:	6439      	str	r1, [r7, #64]	; 0x40
 8006af0:	415b      	adcs	r3, r3
 8006af2:	647b      	str	r3, [r7, #68]	; 0x44
 8006af4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006af8:	1912      	adds	r2, r2, r4
 8006afa:	eb45 0303 	adc.w	r3, r5, r3
 8006afe:	f04f 0000 	mov.w	r0, #0
 8006b02:	f04f 0100 	mov.w	r1, #0
 8006b06:	00d9      	lsls	r1, r3, #3
 8006b08:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006b0c:	00d0      	lsls	r0, r2, #3
 8006b0e:	4602      	mov	r2, r0
 8006b10:	460b      	mov	r3, r1
 8006b12:	1911      	adds	r1, r2, r4
 8006b14:	6639      	str	r1, [r7, #96]	; 0x60
 8006b16:	416b      	adcs	r3, r5
 8006b18:	667b      	str	r3, [r7, #100]	; 0x64
 8006b1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	461a      	mov	r2, r3
 8006b20:	f04f 0300 	mov.w	r3, #0
 8006b24:	1891      	adds	r1, r2, r2
 8006b26:	63b9      	str	r1, [r7, #56]	; 0x38
 8006b28:	415b      	adcs	r3, r3
 8006b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006b30:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006b34:	f7f9 fb4c 	bl	80001d0 <__aeabi_uldivmod>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	460b      	mov	r3, r1
 8006b3c:	4ba5      	ldr	r3, [pc, #660]	; (8006dd4 <UART_SetConfig+0x38c>)
 8006b3e:	fba3 2302 	umull	r2, r3, r3, r2
 8006b42:	095b      	lsrs	r3, r3, #5
 8006b44:	011e      	lsls	r6, r3, #4
 8006b46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b48:	461c      	mov	r4, r3
 8006b4a:	f04f 0500 	mov.w	r5, #0
 8006b4e:	4622      	mov	r2, r4
 8006b50:	462b      	mov	r3, r5
 8006b52:	1891      	adds	r1, r2, r2
 8006b54:	6339      	str	r1, [r7, #48]	; 0x30
 8006b56:	415b      	adcs	r3, r3
 8006b58:	637b      	str	r3, [r7, #52]	; 0x34
 8006b5a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006b5e:	1912      	adds	r2, r2, r4
 8006b60:	eb45 0303 	adc.w	r3, r5, r3
 8006b64:	f04f 0000 	mov.w	r0, #0
 8006b68:	f04f 0100 	mov.w	r1, #0
 8006b6c:	00d9      	lsls	r1, r3, #3
 8006b6e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006b72:	00d0      	lsls	r0, r2, #3
 8006b74:	4602      	mov	r2, r0
 8006b76:	460b      	mov	r3, r1
 8006b78:	1911      	adds	r1, r2, r4
 8006b7a:	65b9      	str	r1, [r7, #88]	; 0x58
 8006b7c:	416b      	adcs	r3, r5
 8006b7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	461a      	mov	r2, r3
 8006b86:	f04f 0300 	mov.w	r3, #0
 8006b8a:	1891      	adds	r1, r2, r2
 8006b8c:	62b9      	str	r1, [r7, #40]	; 0x28
 8006b8e:	415b      	adcs	r3, r3
 8006b90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006b96:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006b9a:	f7f9 fb19 	bl	80001d0 <__aeabi_uldivmod>
 8006b9e:	4602      	mov	r2, r0
 8006ba0:	460b      	mov	r3, r1
 8006ba2:	4b8c      	ldr	r3, [pc, #560]	; (8006dd4 <UART_SetConfig+0x38c>)
 8006ba4:	fba3 1302 	umull	r1, r3, r3, r2
 8006ba8:	095b      	lsrs	r3, r3, #5
 8006baa:	2164      	movs	r1, #100	; 0x64
 8006bac:	fb01 f303 	mul.w	r3, r1, r3
 8006bb0:	1ad3      	subs	r3, r2, r3
 8006bb2:	00db      	lsls	r3, r3, #3
 8006bb4:	3332      	adds	r3, #50	; 0x32
 8006bb6:	4a87      	ldr	r2, [pc, #540]	; (8006dd4 <UART_SetConfig+0x38c>)
 8006bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8006bbc:	095b      	lsrs	r3, r3, #5
 8006bbe:	005b      	lsls	r3, r3, #1
 8006bc0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006bc4:	441e      	add	r6, r3
 8006bc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f04f 0100 	mov.w	r1, #0
 8006bce:	4602      	mov	r2, r0
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	1894      	adds	r4, r2, r2
 8006bd4:	623c      	str	r4, [r7, #32]
 8006bd6:	415b      	adcs	r3, r3
 8006bd8:	627b      	str	r3, [r7, #36]	; 0x24
 8006bda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006bde:	1812      	adds	r2, r2, r0
 8006be0:	eb41 0303 	adc.w	r3, r1, r3
 8006be4:	f04f 0400 	mov.w	r4, #0
 8006be8:	f04f 0500 	mov.w	r5, #0
 8006bec:	00dd      	lsls	r5, r3, #3
 8006bee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006bf2:	00d4      	lsls	r4, r2, #3
 8006bf4:	4622      	mov	r2, r4
 8006bf6:	462b      	mov	r3, r5
 8006bf8:	1814      	adds	r4, r2, r0
 8006bfa:	653c      	str	r4, [r7, #80]	; 0x50
 8006bfc:	414b      	adcs	r3, r1
 8006bfe:	657b      	str	r3, [r7, #84]	; 0x54
 8006c00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	461a      	mov	r2, r3
 8006c06:	f04f 0300 	mov.w	r3, #0
 8006c0a:	1891      	adds	r1, r2, r2
 8006c0c:	61b9      	str	r1, [r7, #24]
 8006c0e:	415b      	adcs	r3, r3
 8006c10:	61fb      	str	r3, [r7, #28]
 8006c12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c16:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006c1a:	f7f9 fad9 	bl	80001d0 <__aeabi_uldivmod>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	460b      	mov	r3, r1
 8006c22:	4b6c      	ldr	r3, [pc, #432]	; (8006dd4 <UART_SetConfig+0x38c>)
 8006c24:	fba3 1302 	umull	r1, r3, r3, r2
 8006c28:	095b      	lsrs	r3, r3, #5
 8006c2a:	2164      	movs	r1, #100	; 0x64
 8006c2c:	fb01 f303 	mul.w	r3, r1, r3
 8006c30:	1ad3      	subs	r3, r2, r3
 8006c32:	00db      	lsls	r3, r3, #3
 8006c34:	3332      	adds	r3, #50	; 0x32
 8006c36:	4a67      	ldr	r2, [pc, #412]	; (8006dd4 <UART_SetConfig+0x38c>)
 8006c38:	fba2 2303 	umull	r2, r3, r2, r3
 8006c3c:	095b      	lsrs	r3, r3, #5
 8006c3e:	f003 0207 	and.w	r2, r3, #7
 8006c42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4432      	add	r2, r6
 8006c48:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006c4a:	e0b9      	b.n	8006dc0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c4e:	461c      	mov	r4, r3
 8006c50:	f04f 0500 	mov.w	r5, #0
 8006c54:	4622      	mov	r2, r4
 8006c56:	462b      	mov	r3, r5
 8006c58:	1891      	adds	r1, r2, r2
 8006c5a:	6139      	str	r1, [r7, #16]
 8006c5c:	415b      	adcs	r3, r3
 8006c5e:	617b      	str	r3, [r7, #20]
 8006c60:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006c64:	1912      	adds	r2, r2, r4
 8006c66:	eb45 0303 	adc.w	r3, r5, r3
 8006c6a:	f04f 0000 	mov.w	r0, #0
 8006c6e:	f04f 0100 	mov.w	r1, #0
 8006c72:	00d9      	lsls	r1, r3, #3
 8006c74:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006c78:	00d0      	lsls	r0, r2, #3
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	460b      	mov	r3, r1
 8006c7e:	eb12 0804 	adds.w	r8, r2, r4
 8006c82:	eb43 0905 	adc.w	r9, r3, r5
 8006c86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f04f 0100 	mov.w	r1, #0
 8006c90:	f04f 0200 	mov.w	r2, #0
 8006c94:	f04f 0300 	mov.w	r3, #0
 8006c98:	008b      	lsls	r3, r1, #2
 8006c9a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006c9e:	0082      	lsls	r2, r0, #2
 8006ca0:	4640      	mov	r0, r8
 8006ca2:	4649      	mov	r1, r9
 8006ca4:	f7f9 fa94 	bl	80001d0 <__aeabi_uldivmod>
 8006ca8:	4602      	mov	r2, r0
 8006caa:	460b      	mov	r3, r1
 8006cac:	4b49      	ldr	r3, [pc, #292]	; (8006dd4 <UART_SetConfig+0x38c>)
 8006cae:	fba3 2302 	umull	r2, r3, r3, r2
 8006cb2:	095b      	lsrs	r3, r3, #5
 8006cb4:	011e      	lsls	r6, r3, #4
 8006cb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f04f 0100 	mov.w	r1, #0
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	460b      	mov	r3, r1
 8006cc2:	1894      	adds	r4, r2, r2
 8006cc4:	60bc      	str	r4, [r7, #8]
 8006cc6:	415b      	adcs	r3, r3
 8006cc8:	60fb      	str	r3, [r7, #12]
 8006cca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006cce:	1812      	adds	r2, r2, r0
 8006cd0:	eb41 0303 	adc.w	r3, r1, r3
 8006cd4:	f04f 0400 	mov.w	r4, #0
 8006cd8:	f04f 0500 	mov.w	r5, #0
 8006cdc:	00dd      	lsls	r5, r3, #3
 8006cde:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006ce2:	00d4      	lsls	r4, r2, #3
 8006ce4:	4622      	mov	r2, r4
 8006ce6:	462b      	mov	r3, r5
 8006ce8:	1814      	adds	r4, r2, r0
 8006cea:	64bc      	str	r4, [r7, #72]	; 0x48
 8006cec:	414b      	adcs	r3, r1
 8006cee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f04f 0100 	mov.w	r1, #0
 8006cfa:	f04f 0200 	mov.w	r2, #0
 8006cfe:	f04f 0300 	mov.w	r3, #0
 8006d02:	008b      	lsls	r3, r1, #2
 8006d04:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006d08:	0082      	lsls	r2, r0, #2
 8006d0a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006d0e:	f7f9 fa5f 	bl	80001d0 <__aeabi_uldivmod>
 8006d12:	4602      	mov	r2, r0
 8006d14:	460b      	mov	r3, r1
 8006d16:	4b2f      	ldr	r3, [pc, #188]	; (8006dd4 <UART_SetConfig+0x38c>)
 8006d18:	fba3 1302 	umull	r1, r3, r3, r2
 8006d1c:	095b      	lsrs	r3, r3, #5
 8006d1e:	2164      	movs	r1, #100	; 0x64
 8006d20:	fb01 f303 	mul.w	r3, r1, r3
 8006d24:	1ad3      	subs	r3, r2, r3
 8006d26:	011b      	lsls	r3, r3, #4
 8006d28:	3332      	adds	r3, #50	; 0x32
 8006d2a:	4a2a      	ldr	r2, [pc, #168]	; (8006dd4 <UART_SetConfig+0x38c>)
 8006d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8006d30:	095b      	lsrs	r3, r3, #5
 8006d32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d36:	441e      	add	r6, r3
 8006d38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f04f 0100 	mov.w	r1, #0
 8006d40:	4602      	mov	r2, r0
 8006d42:	460b      	mov	r3, r1
 8006d44:	1894      	adds	r4, r2, r2
 8006d46:	603c      	str	r4, [r7, #0]
 8006d48:	415b      	adcs	r3, r3
 8006d4a:	607b      	str	r3, [r7, #4]
 8006d4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d50:	1812      	adds	r2, r2, r0
 8006d52:	eb41 0303 	adc.w	r3, r1, r3
 8006d56:	f04f 0400 	mov.w	r4, #0
 8006d5a:	f04f 0500 	mov.w	r5, #0
 8006d5e:	00dd      	lsls	r5, r3, #3
 8006d60:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006d64:	00d4      	lsls	r4, r2, #3
 8006d66:	4622      	mov	r2, r4
 8006d68:	462b      	mov	r3, r5
 8006d6a:	eb12 0a00 	adds.w	sl, r2, r0
 8006d6e:	eb43 0b01 	adc.w	fp, r3, r1
 8006d72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	4618      	mov	r0, r3
 8006d78:	f04f 0100 	mov.w	r1, #0
 8006d7c:	f04f 0200 	mov.w	r2, #0
 8006d80:	f04f 0300 	mov.w	r3, #0
 8006d84:	008b      	lsls	r3, r1, #2
 8006d86:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006d8a:	0082      	lsls	r2, r0, #2
 8006d8c:	4650      	mov	r0, sl
 8006d8e:	4659      	mov	r1, fp
 8006d90:	f7f9 fa1e 	bl	80001d0 <__aeabi_uldivmod>
 8006d94:	4602      	mov	r2, r0
 8006d96:	460b      	mov	r3, r1
 8006d98:	4b0e      	ldr	r3, [pc, #56]	; (8006dd4 <UART_SetConfig+0x38c>)
 8006d9a:	fba3 1302 	umull	r1, r3, r3, r2
 8006d9e:	095b      	lsrs	r3, r3, #5
 8006da0:	2164      	movs	r1, #100	; 0x64
 8006da2:	fb01 f303 	mul.w	r3, r1, r3
 8006da6:	1ad3      	subs	r3, r2, r3
 8006da8:	011b      	lsls	r3, r3, #4
 8006daa:	3332      	adds	r3, #50	; 0x32
 8006dac:	4a09      	ldr	r2, [pc, #36]	; (8006dd4 <UART_SetConfig+0x38c>)
 8006dae:	fba2 2303 	umull	r2, r3, r2, r3
 8006db2:	095b      	lsrs	r3, r3, #5
 8006db4:	f003 020f 	and.w	r2, r3, #15
 8006db8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4432      	add	r2, r6
 8006dbe:	609a      	str	r2, [r3, #8]
}
 8006dc0:	bf00      	nop
 8006dc2:	377c      	adds	r7, #124	; 0x7c
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dca:	bf00      	nop
 8006dcc:	40011000 	.word	0x40011000
 8006dd0:	40011400 	.word	0x40011400
 8006dd4:	51eb851f 	.word	0x51eb851f

08006dd8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b085      	sub	sp, #20
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	4603      	mov	r3, r0
 8006de0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006de2:	2300      	movs	r3, #0
 8006de4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006de6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006dea:	2b84      	cmp	r3, #132	; 0x84
 8006dec:	d005      	beq.n	8006dfa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006dee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	4413      	add	r3, r2
 8006df6:	3303      	adds	r3, #3
 8006df8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3714      	adds	r7, #20
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006e0c:	f000 faf6 	bl	80073fc <vTaskStartScheduler>
  
  return osOK;
 8006e10:	2300      	movs	r3, #0
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	bd80      	pop	{r7, pc}

08006e16 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006e16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e18:	b089      	sub	sp, #36	; 0x24
 8006e1a:	af04      	add	r7, sp, #16
 8006e1c:	6078      	str	r0, [r7, #4]
 8006e1e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	695b      	ldr	r3, [r3, #20]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d020      	beq.n	8006e6a <osThreadCreate+0x54>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	699b      	ldr	r3, [r3, #24]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d01c      	beq.n	8006e6a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	685c      	ldr	r4, [r3, #4]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681d      	ldr	r5, [r3, #0]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	691e      	ldr	r6, [r3, #16]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006e42:	4618      	mov	r0, r3
 8006e44:	f7ff ffc8 	bl	8006dd8 <makeFreeRtosPriority>
 8006e48:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	695b      	ldr	r3, [r3, #20]
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006e52:	9202      	str	r2, [sp, #8]
 8006e54:	9301      	str	r3, [sp, #4]
 8006e56:	9100      	str	r1, [sp, #0]
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	4632      	mov	r2, r6
 8006e5c:	4629      	mov	r1, r5
 8006e5e:	4620      	mov	r0, r4
 8006e60:	f000 f8ed 	bl	800703e <xTaskCreateStatic>
 8006e64:	4603      	mov	r3, r0
 8006e66:	60fb      	str	r3, [r7, #12]
 8006e68:	e01c      	b.n	8006ea4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	685c      	ldr	r4, [r3, #4]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006e76:	b29e      	uxth	r6, r3
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f7ff ffaa 	bl	8006dd8 <makeFreeRtosPriority>
 8006e84:	4602      	mov	r2, r0
 8006e86:	f107 030c 	add.w	r3, r7, #12
 8006e8a:	9301      	str	r3, [sp, #4]
 8006e8c:	9200      	str	r2, [sp, #0]
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	4632      	mov	r2, r6
 8006e92:	4629      	mov	r1, r5
 8006e94:	4620      	mov	r0, r4
 8006e96:	f000 f92f 	bl	80070f8 <xTaskCreate>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d001      	beq.n	8006ea4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	e000      	b.n	8006ea6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3714      	adds	r7, #20
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006eae <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006eae:	b580      	push	{r7, lr}
 8006eb0:	b084      	sub	sp, #16
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d001      	beq.n	8006ec4 <osDelay+0x16>
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	e000      	b.n	8006ec6 <osDelay+0x18>
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f000 fa64 	bl	8007394 <vTaskDelay>
  
  return osOK;
 8006ecc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3710      	adds	r7, #16
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}

08006ed6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006ed6:	b480      	push	{r7}
 8006ed8:	b083      	sub	sp, #12
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f103 0208 	add.w	r2, r3, #8
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f04f 32ff 	mov.w	r2, #4294967295
 8006eee:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f103 0208 	add.w	r2, r3, #8
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f103 0208 	add.w	r2, r3, #8
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006f0a:	bf00      	nop
 8006f0c:	370c      	adds	r7, #12
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr

08006f16 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006f16:	b480      	push	{r7}
 8006f18:	b083      	sub	sp, #12
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006f24:	bf00      	nop
 8006f26:	370c      	adds	r7, #12
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr

08006f30 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f30:	b480      	push	{r7}
 8006f32:	b085      	sub	sp, #20
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	68fa      	ldr	r2, [r7, #12]
 8006f44:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	689a      	ldr	r2, [r3, #8]
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	683a      	ldr	r2, [r7, #0]
 8006f54:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	683a      	ldr	r2, [r7, #0]
 8006f5a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	1c5a      	adds	r2, r3, #1
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	601a      	str	r2, [r3, #0]
}
 8006f6c:	bf00      	nop
 8006f6e:	3714      	adds	r7, #20
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr

08006f78 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b085      	sub	sp, #20
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f8e:	d103      	bne.n	8006f98 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	691b      	ldr	r3, [r3, #16]
 8006f94:	60fb      	str	r3, [r7, #12]
 8006f96:	e00c      	b.n	8006fb2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	3308      	adds	r3, #8
 8006f9c:	60fb      	str	r3, [r7, #12]
 8006f9e:	e002      	b.n	8006fa6 <vListInsert+0x2e>
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	60fb      	str	r3, [r7, #12]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	68ba      	ldr	r2, [r7, #8]
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d2f6      	bcs.n	8006fa0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	685a      	ldr	r2, [r3, #4]
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	683a      	ldr	r2, [r7, #0]
 8006fc0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	68fa      	ldr	r2, [r7, #12]
 8006fc6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	683a      	ldr	r2, [r7, #0]
 8006fcc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	1c5a      	adds	r2, r3, #1
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	601a      	str	r2, [r3, #0]
}
 8006fde:	bf00      	nop
 8006fe0:	3714      	adds	r7, #20
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr

08006fea <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006fea:	b480      	push	{r7}
 8006fec:	b085      	sub	sp, #20
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	691b      	ldr	r3, [r3, #16]
 8006ff6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	6892      	ldr	r2, [r2, #8]
 8007000:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	6852      	ldr	r2, [r2, #4]
 800700a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	687a      	ldr	r2, [r7, #4]
 8007012:	429a      	cmp	r2, r3
 8007014:	d103      	bne.n	800701e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	689a      	ldr	r2, [r3, #8]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	1e5a      	subs	r2, r3, #1
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
}
 8007032:	4618      	mov	r0, r3
 8007034:	3714      	adds	r7, #20
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr

0800703e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800703e:	b580      	push	{r7, lr}
 8007040:	b08e      	sub	sp, #56	; 0x38
 8007042:	af04      	add	r7, sp, #16
 8007044:	60f8      	str	r0, [r7, #12]
 8007046:	60b9      	str	r1, [r7, #8]
 8007048:	607a      	str	r2, [r7, #4]
 800704a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800704c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800704e:	2b00      	cmp	r3, #0
 8007050:	d10a      	bne.n	8007068 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007056:	f383 8811 	msr	BASEPRI, r3
 800705a:	f3bf 8f6f 	isb	sy
 800705e:	f3bf 8f4f 	dsb	sy
 8007062:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007064:	bf00      	nop
 8007066:	e7fe      	b.n	8007066 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706a:	2b00      	cmp	r3, #0
 800706c:	d10a      	bne.n	8007084 <xTaskCreateStatic+0x46>
	__asm volatile
 800706e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007072:	f383 8811 	msr	BASEPRI, r3
 8007076:	f3bf 8f6f 	isb	sy
 800707a:	f3bf 8f4f 	dsb	sy
 800707e:	61fb      	str	r3, [r7, #28]
}
 8007080:	bf00      	nop
 8007082:	e7fe      	b.n	8007082 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007084:	23b4      	movs	r3, #180	; 0xb4
 8007086:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	2bb4      	cmp	r3, #180	; 0xb4
 800708c:	d00a      	beq.n	80070a4 <xTaskCreateStatic+0x66>
	__asm volatile
 800708e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007092:	f383 8811 	msr	BASEPRI, r3
 8007096:	f3bf 8f6f 	isb	sy
 800709a:	f3bf 8f4f 	dsb	sy
 800709e:	61bb      	str	r3, [r7, #24]
}
 80070a0:	bf00      	nop
 80070a2:	e7fe      	b.n	80070a2 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80070a4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80070a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d01e      	beq.n	80070ea <xTaskCreateStatic+0xac>
 80070ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d01b      	beq.n	80070ea <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80070b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80070b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070ba:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80070bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070be:	2202      	movs	r2, #2
 80070c0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80070c4:	2300      	movs	r3, #0
 80070c6:	9303      	str	r3, [sp, #12]
 80070c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ca:	9302      	str	r3, [sp, #8]
 80070cc:	f107 0314 	add.w	r3, r7, #20
 80070d0:	9301      	str	r3, [sp, #4]
 80070d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d4:	9300      	str	r3, [sp, #0]
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	68b9      	ldr	r1, [r7, #8]
 80070dc:	68f8      	ldr	r0, [r7, #12]
 80070de:	f000 f851 	bl	8007184 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80070e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80070e4:	f000 f8ec 	bl	80072c0 <prvAddNewTaskToReadyList>
 80070e8:	e001      	b.n	80070ee <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80070ea:	2300      	movs	r3, #0
 80070ec:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80070ee:	697b      	ldr	r3, [r7, #20]
	}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3728      	adds	r7, #40	; 0x28
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b08c      	sub	sp, #48	; 0x30
 80070fc:	af04      	add	r7, sp, #16
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	60b9      	str	r1, [r7, #8]
 8007102:	603b      	str	r3, [r7, #0]
 8007104:	4613      	mov	r3, r2
 8007106:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007108:	88fb      	ldrh	r3, [r7, #6]
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	4618      	mov	r0, r3
 800710e:	f000 fef3 	bl	8007ef8 <pvPortMalloc>
 8007112:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d00e      	beq.n	8007138 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800711a:	20b4      	movs	r0, #180	; 0xb4
 800711c:	f000 feec 	bl	8007ef8 <pvPortMalloc>
 8007120:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007122:	69fb      	ldr	r3, [r7, #28]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d003      	beq.n	8007130 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007128:	69fb      	ldr	r3, [r7, #28]
 800712a:	697a      	ldr	r2, [r7, #20]
 800712c:	631a      	str	r2, [r3, #48]	; 0x30
 800712e:	e005      	b.n	800713c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007130:	6978      	ldr	r0, [r7, #20]
 8007132:	f000 ffad 	bl	8008090 <vPortFree>
 8007136:	e001      	b.n	800713c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007138:	2300      	movs	r3, #0
 800713a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800713c:	69fb      	ldr	r3, [r7, #28]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d017      	beq.n	8007172 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007142:	69fb      	ldr	r3, [r7, #28]
 8007144:	2200      	movs	r2, #0
 8007146:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800714a:	88fa      	ldrh	r2, [r7, #6]
 800714c:	2300      	movs	r3, #0
 800714e:	9303      	str	r3, [sp, #12]
 8007150:	69fb      	ldr	r3, [r7, #28]
 8007152:	9302      	str	r3, [sp, #8]
 8007154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007156:	9301      	str	r3, [sp, #4]
 8007158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800715a:	9300      	str	r3, [sp, #0]
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	68b9      	ldr	r1, [r7, #8]
 8007160:	68f8      	ldr	r0, [r7, #12]
 8007162:	f000 f80f 	bl	8007184 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007166:	69f8      	ldr	r0, [r7, #28]
 8007168:	f000 f8aa 	bl	80072c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800716c:	2301      	movs	r3, #1
 800716e:	61bb      	str	r3, [r7, #24]
 8007170:	e002      	b.n	8007178 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007172:	f04f 33ff 	mov.w	r3, #4294967295
 8007176:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007178:	69bb      	ldr	r3, [r7, #24]
	}
 800717a:	4618      	mov	r0, r3
 800717c:	3720      	adds	r7, #32
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
	...

08007184 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b088      	sub	sp, #32
 8007188:	af00      	add	r7, sp, #0
 800718a:	60f8      	str	r0, [r7, #12]
 800718c:	60b9      	str	r1, [r7, #8]
 800718e:	607a      	str	r2, [r7, #4]
 8007190:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007194:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800719c:	3b01      	subs	r3, #1
 800719e:	009b      	lsls	r3, r3, #2
 80071a0:	4413      	add	r3, r2
 80071a2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80071a4:	69bb      	ldr	r3, [r7, #24]
 80071a6:	f023 0307 	bic.w	r3, r3, #7
 80071aa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80071ac:	69bb      	ldr	r3, [r7, #24]
 80071ae:	f003 0307 	and.w	r3, r3, #7
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d00a      	beq.n	80071cc <prvInitialiseNewTask+0x48>
	__asm volatile
 80071b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ba:	f383 8811 	msr	BASEPRI, r3
 80071be:	f3bf 8f6f 	isb	sy
 80071c2:	f3bf 8f4f 	dsb	sy
 80071c6:	617b      	str	r3, [r7, #20]
}
 80071c8:	bf00      	nop
 80071ca:	e7fe      	b.n	80071ca <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d01f      	beq.n	8007212 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80071d2:	2300      	movs	r3, #0
 80071d4:	61fb      	str	r3, [r7, #28]
 80071d6:	e012      	b.n	80071fe <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80071d8:	68ba      	ldr	r2, [r7, #8]
 80071da:	69fb      	ldr	r3, [r7, #28]
 80071dc:	4413      	add	r3, r2
 80071de:	7819      	ldrb	r1, [r3, #0]
 80071e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071e2:	69fb      	ldr	r3, [r7, #28]
 80071e4:	4413      	add	r3, r2
 80071e6:	3334      	adds	r3, #52	; 0x34
 80071e8:	460a      	mov	r2, r1
 80071ea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80071ec:	68ba      	ldr	r2, [r7, #8]
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	4413      	add	r3, r2
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d006      	beq.n	8007206 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80071f8:	69fb      	ldr	r3, [r7, #28]
 80071fa:	3301      	adds	r3, #1
 80071fc:	61fb      	str	r3, [r7, #28]
 80071fe:	69fb      	ldr	r3, [r7, #28]
 8007200:	2b0f      	cmp	r3, #15
 8007202:	d9e9      	bls.n	80071d8 <prvInitialiseNewTask+0x54>
 8007204:	e000      	b.n	8007208 <prvInitialiseNewTask+0x84>
			{
				break;
 8007206:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800720a:	2200      	movs	r2, #0
 800720c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007210:	e003      	b.n	800721a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007214:	2200      	movs	r2, #0
 8007216:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800721a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800721c:	2b06      	cmp	r3, #6
 800721e:	d901      	bls.n	8007224 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007220:	2306      	movs	r3, #6
 8007222:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007226:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007228:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800722a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800722c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800722e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007232:	2200      	movs	r2, #0
 8007234:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007238:	3304      	adds	r3, #4
 800723a:	4618      	mov	r0, r3
 800723c:	f7ff fe6b 	bl	8006f16 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007242:	3318      	adds	r3, #24
 8007244:	4618      	mov	r0, r3
 8007246:	f7ff fe66 	bl	8006f16 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800724a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800724c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800724e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007252:	f1c3 0207 	rsb	r2, r3, #7
 8007256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007258:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800725a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800725c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800725e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007262:	2200      	movs	r2, #0
 8007264:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800726a:	2200      	movs	r2, #0
 800726c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007272:	334c      	adds	r3, #76	; 0x4c
 8007274:	2260      	movs	r2, #96	; 0x60
 8007276:	2100      	movs	r1, #0
 8007278:	4618      	mov	r0, r3
 800727a:	f001 f867 	bl	800834c <memset>
 800727e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007280:	4a0c      	ldr	r2, [pc, #48]	; (80072b4 <prvInitialiseNewTask+0x130>)
 8007282:	651a      	str	r2, [r3, #80]	; 0x50
 8007284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007286:	4a0c      	ldr	r2, [pc, #48]	; (80072b8 <prvInitialiseNewTask+0x134>)
 8007288:	655a      	str	r2, [r3, #84]	; 0x54
 800728a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800728c:	4a0b      	ldr	r2, [pc, #44]	; (80072bc <prvInitialiseNewTask+0x138>)
 800728e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007290:	683a      	ldr	r2, [r7, #0]
 8007292:	68f9      	ldr	r1, [r7, #12]
 8007294:	69b8      	ldr	r0, [r7, #24]
 8007296:	f000 fc1f 	bl	8007ad8 <pxPortInitialiseStack>
 800729a:	4602      	mov	r2, r0
 800729c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800729e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80072a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d002      	beq.n	80072ac <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80072a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072aa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80072ac:	bf00      	nop
 80072ae:	3720      	adds	r7, #32
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	08008e98 	.word	0x08008e98
 80072b8:	08008eb8 	.word	0x08008eb8
 80072bc:	08008e78 	.word	0x08008e78

080072c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b082      	sub	sp, #8
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80072c8:	f000 fd34 	bl	8007d34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80072cc:	4b2a      	ldr	r3, [pc, #168]	; (8007378 <prvAddNewTaskToReadyList+0xb8>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	3301      	adds	r3, #1
 80072d2:	4a29      	ldr	r2, [pc, #164]	; (8007378 <prvAddNewTaskToReadyList+0xb8>)
 80072d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80072d6:	4b29      	ldr	r3, [pc, #164]	; (800737c <prvAddNewTaskToReadyList+0xbc>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d109      	bne.n	80072f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80072de:	4a27      	ldr	r2, [pc, #156]	; (800737c <prvAddNewTaskToReadyList+0xbc>)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80072e4:	4b24      	ldr	r3, [pc, #144]	; (8007378 <prvAddNewTaskToReadyList+0xb8>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d110      	bne.n	800730e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80072ec:	f000 facc 	bl	8007888 <prvInitialiseTaskLists>
 80072f0:	e00d      	b.n	800730e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80072f2:	4b23      	ldr	r3, [pc, #140]	; (8007380 <prvAddNewTaskToReadyList+0xc0>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d109      	bne.n	800730e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80072fa:	4b20      	ldr	r3, [pc, #128]	; (800737c <prvAddNewTaskToReadyList+0xbc>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007304:	429a      	cmp	r2, r3
 8007306:	d802      	bhi.n	800730e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007308:	4a1c      	ldr	r2, [pc, #112]	; (800737c <prvAddNewTaskToReadyList+0xbc>)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800730e:	4b1d      	ldr	r3, [pc, #116]	; (8007384 <prvAddNewTaskToReadyList+0xc4>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	3301      	adds	r3, #1
 8007314:	4a1b      	ldr	r2, [pc, #108]	; (8007384 <prvAddNewTaskToReadyList+0xc4>)
 8007316:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800731c:	2201      	movs	r2, #1
 800731e:	409a      	lsls	r2, r3
 8007320:	4b19      	ldr	r3, [pc, #100]	; (8007388 <prvAddNewTaskToReadyList+0xc8>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4313      	orrs	r3, r2
 8007326:	4a18      	ldr	r2, [pc, #96]	; (8007388 <prvAddNewTaskToReadyList+0xc8>)
 8007328:	6013      	str	r3, [r2, #0]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800732e:	4613      	mov	r3, r2
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	4413      	add	r3, r2
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	4a15      	ldr	r2, [pc, #84]	; (800738c <prvAddNewTaskToReadyList+0xcc>)
 8007338:	441a      	add	r2, r3
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	3304      	adds	r3, #4
 800733e:	4619      	mov	r1, r3
 8007340:	4610      	mov	r0, r2
 8007342:	f7ff fdf5 	bl	8006f30 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007346:	f000 fd25 	bl	8007d94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800734a:	4b0d      	ldr	r3, [pc, #52]	; (8007380 <prvAddNewTaskToReadyList+0xc0>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d00e      	beq.n	8007370 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007352:	4b0a      	ldr	r3, [pc, #40]	; (800737c <prvAddNewTaskToReadyList+0xbc>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800735c:	429a      	cmp	r2, r3
 800735e:	d207      	bcs.n	8007370 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007360:	4b0b      	ldr	r3, [pc, #44]	; (8007390 <prvAddNewTaskToReadyList+0xd0>)
 8007362:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007366:	601a      	str	r2, [r3, #0]
 8007368:	f3bf 8f4f 	dsb	sy
 800736c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007370:	bf00      	nop
 8007372:	3708      	adds	r7, #8
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}
 8007378:	200006a0 	.word	0x200006a0
 800737c:	200005a0 	.word	0x200005a0
 8007380:	200006ac 	.word	0x200006ac
 8007384:	200006bc 	.word	0x200006bc
 8007388:	200006a8 	.word	0x200006a8
 800738c:	200005a4 	.word	0x200005a4
 8007390:	e000ed04 	.word	0xe000ed04

08007394 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800739c:	2300      	movs	r3, #0
 800739e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d017      	beq.n	80073d6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80073a6:	4b13      	ldr	r3, [pc, #76]	; (80073f4 <vTaskDelay+0x60>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d00a      	beq.n	80073c4 <vTaskDelay+0x30>
	__asm volatile
 80073ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b2:	f383 8811 	msr	BASEPRI, r3
 80073b6:	f3bf 8f6f 	isb	sy
 80073ba:	f3bf 8f4f 	dsb	sy
 80073be:	60bb      	str	r3, [r7, #8]
}
 80073c0:	bf00      	nop
 80073c2:	e7fe      	b.n	80073c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80073c4:	f000 f884 	bl	80074d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80073c8:	2100      	movs	r1, #0
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 fb1e 	bl	8007a0c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80073d0:	f000 f88c 	bl	80074ec <xTaskResumeAll>
 80073d4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d107      	bne.n	80073ec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80073dc:	4b06      	ldr	r3, [pc, #24]	; (80073f8 <vTaskDelay+0x64>)
 80073de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073e2:	601a      	str	r2, [r3, #0]
 80073e4:	f3bf 8f4f 	dsb	sy
 80073e8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80073ec:	bf00      	nop
 80073ee:	3710      	adds	r7, #16
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}
 80073f4:	200006c8 	.word	0x200006c8
 80073f8:	e000ed04 	.word	0xe000ed04

080073fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b08a      	sub	sp, #40	; 0x28
 8007400:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007402:	2300      	movs	r3, #0
 8007404:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007406:	2300      	movs	r3, #0
 8007408:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800740a:	463a      	mov	r2, r7
 800740c:	1d39      	adds	r1, r7, #4
 800740e:	f107 0308 	add.w	r3, r7, #8
 8007412:	4618      	mov	r0, r3
 8007414:	f7f9 f9cc 	bl	80007b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007418:	6839      	ldr	r1, [r7, #0]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	68ba      	ldr	r2, [r7, #8]
 800741e:	9202      	str	r2, [sp, #8]
 8007420:	9301      	str	r3, [sp, #4]
 8007422:	2300      	movs	r3, #0
 8007424:	9300      	str	r3, [sp, #0]
 8007426:	2300      	movs	r3, #0
 8007428:	460a      	mov	r2, r1
 800742a:	4921      	ldr	r1, [pc, #132]	; (80074b0 <vTaskStartScheduler+0xb4>)
 800742c:	4821      	ldr	r0, [pc, #132]	; (80074b4 <vTaskStartScheduler+0xb8>)
 800742e:	f7ff fe06 	bl	800703e <xTaskCreateStatic>
 8007432:	4603      	mov	r3, r0
 8007434:	4a20      	ldr	r2, [pc, #128]	; (80074b8 <vTaskStartScheduler+0xbc>)
 8007436:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007438:	4b1f      	ldr	r3, [pc, #124]	; (80074b8 <vTaskStartScheduler+0xbc>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d002      	beq.n	8007446 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007440:	2301      	movs	r3, #1
 8007442:	617b      	str	r3, [r7, #20]
 8007444:	e001      	b.n	800744a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007446:	2300      	movs	r3, #0
 8007448:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	2b01      	cmp	r3, #1
 800744e:	d11b      	bne.n	8007488 <vTaskStartScheduler+0x8c>
	__asm volatile
 8007450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007454:	f383 8811 	msr	BASEPRI, r3
 8007458:	f3bf 8f6f 	isb	sy
 800745c:	f3bf 8f4f 	dsb	sy
 8007460:	613b      	str	r3, [r7, #16]
}
 8007462:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007464:	4b15      	ldr	r3, [pc, #84]	; (80074bc <vTaskStartScheduler+0xc0>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	334c      	adds	r3, #76	; 0x4c
 800746a:	4a15      	ldr	r2, [pc, #84]	; (80074c0 <vTaskStartScheduler+0xc4>)
 800746c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800746e:	4b15      	ldr	r3, [pc, #84]	; (80074c4 <vTaskStartScheduler+0xc8>)
 8007470:	f04f 32ff 	mov.w	r2, #4294967295
 8007474:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007476:	4b14      	ldr	r3, [pc, #80]	; (80074c8 <vTaskStartScheduler+0xcc>)
 8007478:	2201      	movs	r2, #1
 800747a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800747c:	4b13      	ldr	r3, [pc, #76]	; (80074cc <vTaskStartScheduler+0xd0>)
 800747e:	2200      	movs	r2, #0
 8007480:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007482:	f000 fbb5 	bl	8007bf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007486:	e00e      	b.n	80074a6 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800748e:	d10a      	bne.n	80074a6 <vTaskStartScheduler+0xaa>
	__asm volatile
 8007490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007494:	f383 8811 	msr	BASEPRI, r3
 8007498:	f3bf 8f6f 	isb	sy
 800749c:	f3bf 8f4f 	dsb	sy
 80074a0:	60fb      	str	r3, [r7, #12]
}
 80074a2:	bf00      	nop
 80074a4:	e7fe      	b.n	80074a4 <vTaskStartScheduler+0xa8>
}
 80074a6:	bf00      	nop
 80074a8:	3718      	adds	r7, #24
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
 80074ae:	bf00      	nop
 80074b0:	08008640 	.word	0x08008640
 80074b4:	08007859 	.word	0x08007859
 80074b8:	200006c4 	.word	0x200006c4
 80074bc:	200005a0 	.word	0x200005a0
 80074c0:	2000002c 	.word	0x2000002c
 80074c4:	200006c0 	.word	0x200006c0
 80074c8:	200006ac 	.word	0x200006ac
 80074cc:	200006a4 	.word	0x200006a4

080074d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80074d0:	b480      	push	{r7}
 80074d2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80074d4:	4b04      	ldr	r3, [pc, #16]	; (80074e8 <vTaskSuspendAll+0x18>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	3301      	adds	r3, #1
 80074da:	4a03      	ldr	r2, [pc, #12]	; (80074e8 <vTaskSuspendAll+0x18>)
 80074dc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80074de:	bf00      	nop
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr
 80074e8:	200006c8 	.word	0x200006c8

080074ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b084      	sub	sp, #16
 80074f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80074f2:	2300      	movs	r3, #0
 80074f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80074f6:	2300      	movs	r3, #0
 80074f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80074fa:	4b41      	ldr	r3, [pc, #260]	; (8007600 <xTaskResumeAll+0x114>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d10a      	bne.n	8007518 <xTaskResumeAll+0x2c>
	__asm volatile
 8007502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007506:	f383 8811 	msr	BASEPRI, r3
 800750a:	f3bf 8f6f 	isb	sy
 800750e:	f3bf 8f4f 	dsb	sy
 8007512:	603b      	str	r3, [r7, #0]
}
 8007514:	bf00      	nop
 8007516:	e7fe      	b.n	8007516 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007518:	f000 fc0c 	bl	8007d34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800751c:	4b38      	ldr	r3, [pc, #224]	; (8007600 <xTaskResumeAll+0x114>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	3b01      	subs	r3, #1
 8007522:	4a37      	ldr	r2, [pc, #220]	; (8007600 <xTaskResumeAll+0x114>)
 8007524:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007526:	4b36      	ldr	r3, [pc, #216]	; (8007600 <xTaskResumeAll+0x114>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d161      	bne.n	80075f2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800752e:	4b35      	ldr	r3, [pc, #212]	; (8007604 <xTaskResumeAll+0x118>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d05d      	beq.n	80075f2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007536:	e02e      	b.n	8007596 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007538:	4b33      	ldr	r3, [pc, #204]	; (8007608 <xTaskResumeAll+0x11c>)
 800753a:	68db      	ldr	r3, [r3, #12]
 800753c:	68db      	ldr	r3, [r3, #12]
 800753e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	3318      	adds	r3, #24
 8007544:	4618      	mov	r0, r3
 8007546:	f7ff fd50 	bl	8006fea <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	3304      	adds	r3, #4
 800754e:	4618      	mov	r0, r3
 8007550:	f7ff fd4b 	bl	8006fea <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007558:	2201      	movs	r2, #1
 800755a:	409a      	lsls	r2, r3
 800755c:	4b2b      	ldr	r3, [pc, #172]	; (800760c <xTaskResumeAll+0x120>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4313      	orrs	r3, r2
 8007562:	4a2a      	ldr	r2, [pc, #168]	; (800760c <xTaskResumeAll+0x120>)
 8007564:	6013      	str	r3, [r2, #0]
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800756a:	4613      	mov	r3, r2
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	4413      	add	r3, r2
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	4a27      	ldr	r2, [pc, #156]	; (8007610 <xTaskResumeAll+0x124>)
 8007574:	441a      	add	r2, r3
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	3304      	adds	r3, #4
 800757a:	4619      	mov	r1, r3
 800757c:	4610      	mov	r0, r2
 800757e:	f7ff fcd7 	bl	8006f30 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007586:	4b23      	ldr	r3, [pc, #140]	; (8007614 <xTaskResumeAll+0x128>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800758c:	429a      	cmp	r2, r3
 800758e:	d302      	bcc.n	8007596 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007590:	4b21      	ldr	r3, [pc, #132]	; (8007618 <xTaskResumeAll+0x12c>)
 8007592:	2201      	movs	r2, #1
 8007594:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007596:	4b1c      	ldr	r3, [pc, #112]	; (8007608 <xTaskResumeAll+0x11c>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d1cc      	bne.n	8007538 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d001      	beq.n	80075a8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80075a4:	f000 fa12 	bl	80079cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80075a8:	4b1c      	ldr	r3, [pc, #112]	; (800761c <xTaskResumeAll+0x130>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d010      	beq.n	80075d6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80075b4:	f000 f836 	bl	8007624 <xTaskIncrementTick>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d002      	beq.n	80075c4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80075be:	4b16      	ldr	r3, [pc, #88]	; (8007618 <xTaskResumeAll+0x12c>)
 80075c0:	2201      	movs	r2, #1
 80075c2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	3b01      	subs	r3, #1
 80075c8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d1f1      	bne.n	80075b4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80075d0:	4b12      	ldr	r3, [pc, #72]	; (800761c <xTaskResumeAll+0x130>)
 80075d2:	2200      	movs	r2, #0
 80075d4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80075d6:	4b10      	ldr	r3, [pc, #64]	; (8007618 <xTaskResumeAll+0x12c>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d009      	beq.n	80075f2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80075de:	2301      	movs	r3, #1
 80075e0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80075e2:	4b0f      	ldr	r3, [pc, #60]	; (8007620 <xTaskResumeAll+0x134>)
 80075e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075e8:	601a      	str	r2, [r3, #0]
 80075ea:	f3bf 8f4f 	dsb	sy
 80075ee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80075f2:	f000 fbcf 	bl	8007d94 <vPortExitCritical>

	return xAlreadyYielded;
 80075f6:	68bb      	ldr	r3, [r7, #8]
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3710      	adds	r7, #16
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}
 8007600:	200006c8 	.word	0x200006c8
 8007604:	200006a0 	.word	0x200006a0
 8007608:	20000660 	.word	0x20000660
 800760c:	200006a8 	.word	0x200006a8
 8007610:	200005a4 	.word	0x200005a4
 8007614:	200005a0 	.word	0x200005a0
 8007618:	200006b4 	.word	0x200006b4
 800761c:	200006b0 	.word	0x200006b0
 8007620:	e000ed04 	.word	0xe000ed04

08007624 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b086      	sub	sp, #24
 8007628:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800762a:	2300      	movs	r3, #0
 800762c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800762e:	4b4e      	ldr	r3, [pc, #312]	; (8007768 <xTaskIncrementTick+0x144>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	2b00      	cmp	r3, #0
 8007634:	f040 808e 	bne.w	8007754 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007638:	4b4c      	ldr	r3, [pc, #304]	; (800776c <xTaskIncrementTick+0x148>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	3301      	adds	r3, #1
 800763e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007640:	4a4a      	ldr	r2, [pc, #296]	; (800776c <xTaskIncrementTick+0x148>)
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d120      	bne.n	800768e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800764c:	4b48      	ldr	r3, [pc, #288]	; (8007770 <xTaskIncrementTick+0x14c>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d00a      	beq.n	800766c <xTaskIncrementTick+0x48>
	__asm volatile
 8007656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800765a:	f383 8811 	msr	BASEPRI, r3
 800765e:	f3bf 8f6f 	isb	sy
 8007662:	f3bf 8f4f 	dsb	sy
 8007666:	603b      	str	r3, [r7, #0]
}
 8007668:	bf00      	nop
 800766a:	e7fe      	b.n	800766a <xTaskIncrementTick+0x46>
 800766c:	4b40      	ldr	r3, [pc, #256]	; (8007770 <xTaskIncrementTick+0x14c>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	60fb      	str	r3, [r7, #12]
 8007672:	4b40      	ldr	r3, [pc, #256]	; (8007774 <xTaskIncrementTick+0x150>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a3e      	ldr	r2, [pc, #248]	; (8007770 <xTaskIncrementTick+0x14c>)
 8007678:	6013      	str	r3, [r2, #0]
 800767a:	4a3e      	ldr	r2, [pc, #248]	; (8007774 <xTaskIncrementTick+0x150>)
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	6013      	str	r3, [r2, #0]
 8007680:	4b3d      	ldr	r3, [pc, #244]	; (8007778 <xTaskIncrementTick+0x154>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	3301      	adds	r3, #1
 8007686:	4a3c      	ldr	r2, [pc, #240]	; (8007778 <xTaskIncrementTick+0x154>)
 8007688:	6013      	str	r3, [r2, #0]
 800768a:	f000 f99f 	bl	80079cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800768e:	4b3b      	ldr	r3, [pc, #236]	; (800777c <xTaskIncrementTick+0x158>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	693a      	ldr	r2, [r7, #16]
 8007694:	429a      	cmp	r2, r3
 8007696:	d348      	bcc.n	800772a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007698:	4b35      	ldr	r3, [pc, #212]	; (8007770 <xTaskIncrementTick+0x14c>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d104      	bne.n	80076ac <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076a2:	4b36      	ldr	r3, [pc, #216]	; (800777c <xTaskIncrementTick+0x158>)
 80076a4:	f04f 32ff 	mov.w	r2, #4294967295
 80076a8:	601a      	str	r2, [r3, #0]
					break;
 80076aa:	e03e      	b.n	800772a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076ac:	4b30      	ldr	r3, [pc, #192]	; (8007770 <xTaskIncrementTick+0x14c>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	68db      	ldr	r3, [r3, #12]
 80076b2:	68db      	ldr	r3, [r3, #12]
 80076b4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80076bc:	693a      	ldr	r2, [r7, #16]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d203      	bcs.n	80076cc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80076c4:	4a2d      	ldr	r2, [pc, #180]	; (800777c <xTaskIncrementTick+0x158>)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80076ca:	e02e      	b.n	800772a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	3304      	adds	r3, #4
 80076d0:	4618      	mov	r0, r3
 80076d2:	f7ff fc8a 	bl	8006fea <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d004      	beq.n	80076e8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	3318      	adds	r3, #24
 80076e2:	4618      	mov	r0, r3
 80076e4:	f7ff fc81 	bl	8006fea <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ec:	2201      	movs	r2, #1
 80076ee:	409a      	lsls	r2, r3
 80076f0:	4b23      	ldr	r3, [pc, #140]	; (8007780 <xTaskIncrementTick+0x15c>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4313      	orrs	r3, r2
 80076f6:	4a22      	ldr	r2, [pc, #136]	; (8007780 <xTaskIncrementTick+0x15c>)
 80076f8:	6013      	str	r3, [r2, #0]
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076fe:	4613      	mov	r3, r2
 8007700:	009b      	lsls	r3, r3, #2
 8007702:	4413      	add	r3, r2
 8007704:	009b      	lsls	r3, r3, #2
 8007706:	4a1f      	ldr	r2, [pc, #124]	; (8007784 <xTaskIncrementTick+0x160>)
 8007708:	441a      	add	r2, r3
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	3304      	adds	r3, #4
 800770e:	4619      	mov	r1, r3
 8007710:	4610      	mov	r0, r2
 8007712:	f7ff fc0d 	bl	8006f30 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800771a:	4b1b      	ldr	r3, [pc, #108]	; (8007788 <xTaskIncrementTick+0x164>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007720:	429a      	cmp	r2, r3
 8007722:	d3b9      	bcc.n	8007698 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007724:	2301      	movs	r3, #1
 8007726:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007728:	e7b6      	b.n	8007698 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800772a:	4b17      	ldr	r3, [pc, #92]	; (8007788 <xTaskIncrementTick+0x164>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007730:	4914      	ldr	r1, [pc, #80]	; (8007784 <xTaskIncrementTick+0x160>)
 8007732:	4613      	mov	r3, r2
 8007734:	009b      	lsls	r3, r3, #2
 8007736:	4413      	add	r3, r2
 8007738:	009b      	lsls	r3, r3, #2
 800773a:	440b      	add	r3, r1
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	2b01      	cmp	r3, #1
 8007740:	d901      	bls.n	8007746 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007742:	2301      	movs	r3, #1
 8007744:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007746:	4b11      	ldr	r3, [pc, #68]	; (800778c <xTaskIncrementTick+0x168>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d007      	beq.n	800775e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800774e:	2301      	movs	r3, #1
 8007750:	617b      	str	r3, [r7, #20]
 8007752:	e004      	b.n	800775e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007754:	4b0e      	ldr	r3, [pc, #56]	; (8007790 <xTaskIncrementTick+0x16c>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	3301      	adds	r3, #1
 800775a:	4a0d      	ldr	r2, [pc, #52]	; (8007790 <xTaskIncrementTick+0x16c>)
 800775c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800775e:	697b      	ldr	r3, [r7, #20]
}
 8007760:	4618      	mov	r0, r3
 8007762:	3718      	adds	r7, #24
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}
 8007768:	200006c8 	.word	0x200006c8
 800776c:	200006a4 	.word	0x200006a4
 8007770:	20000658 	.word	0x20000658
 8007774:	2000065c 	.word	0x2000065c
 8007778:	200006b8 	.word	0x200006b8
 800777c:	200006c0 	.word	0x200006c0
 8007780:	200006a8 	.word	0x200006a8
 8007784:	200005a4 	.word	0x200005a4
 8007788:	200005a0 	.word	0x200005a0
 800778c:	200006b4 	.word	0x200006b4
 8007790:	200006b0 	.word	0x200006b0

08007794 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007794:	b480      	push	{r7}
 8007796:	b087      	sub	sp, #28
 8007798:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800779a:	4b29      	ldr	r3, [pc, #164]	; (8007840 <vTaskSwitchContext+0xac>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d003      	beq.n	80077aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80077a2:	4b28      	ldr	r3, [pc, #160]	; (8007844 <vTaskSwitchContext+0xb0>)
 80077a4:	2201      	movs	r2, #1
 80077a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80077a8:	e044      	b.n	8007834 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80077aa:	4b26      	ldr	r3, [pc, #152]	; (8007844 <vTaskSwitchContext+0xb0>)
 80077ac:	2200      	movs	r2, #0
 80077ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077b0:	4b25      	ldr	r3, [pc, #148]	; (8007848 <vTaskSwitchContext+0xb4>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	fab3 f383 	clz	r3, r3
 80077bc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80077be:	7afb      	ldrb	r3, [r7, #11]
 80077c0:	f1c3 031f 	rsb	r3, r3, #31
 80077c4:	617b      	str	r3, [r7, #20]
 80077c6:	4921      	ldr	r1, [pc, #132]	; (800784c <vTaskSwitchContext+0xb8>)
 80077c8:	697a      	ldr	r2, [r7, #20]
 80077ca:	4613      	mov	r3, r2
 80077cc:	009b      	lsls	r3, r3, #2
 80077ce:	4413      	add	r3, r2
 80077d0:	009b      	lsls	r3, r3, #2
 80077d2:	440b      	add	r3, r1
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d10a      	bne.n	80077f0 <vTaskSwitchContext+0x5c>
	__asm volatile
 80077da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077de:	f383 8811 	msr	BASEPRI, r3
 80077e2:	f3bf 8f6f 	isb	sy
 80077e6:	f3bf 8f4f 	dsb	sy
 80077ea:	607b      	str	r3, [r7, #4]
}
 80077ec:	bf00      	nop
 80077ee:	e7fe      	b.n	80077ee <vTaskSwitchContext+0x5a>
 80077f0:	697a      	ldr	r2, [r7, #20]
 80077f2:	4613      	mov	r3, r2
 80077f4:	009b      	lsls	r3, r3, #2
 80077f6:	4413      	add	r3, r2
 80077f8:	009b      	lsls	r3, r3, #2
 80077fa:	4a14      	ldr	r2, [pc, #80]	; (800784c <vTaskSwitchContext+0xb8>)
 80077fc:	4413      	add	r3, r2
 80077fe:	613b      	str	r3, [r7, #16]
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	685a      	ldr	r2, [r3, #4]
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	605a      	str	r2, [r3, #4]
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	685a      	ldr	r2, [r3, #4]
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	3308      	adds	r3, #8
 8007812:	429a      	cmp	r2, r3
 8007814:	d104      	bne.n	8007820 <vTaskSwitchContext+0x8c>
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	685a      	ldr	r2, [r3, #4]
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	605a      	str	r2, [r3, #4]
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	68db      	ldr	r3, [r3, #12]
 8007826:	4a0a      	ldr	r2, [pc, #40]	; (8007850 <vTaskSwitchContext+0xbc>)
 8007828:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800782a:	4b09      	ldr	r3, [pc, #36]	; (8007850 <vTaskSwitchContext+0xbc>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	334c      	adds	r3, #76	; 0x4c
 8007830:	4a08      	ldr	r2, [pc, #32]	; (8007854 <vTaskSwitchContext+0xc0>)
 8007832:	6013      	str	r3, [r2, #0]
}
 8007834:	bf00      	nop
 8007836:	371c      	adds	r7, #28
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr
 8007840:	200006c8 	.word	0x200006c8
 8007844:	200006b4 	.word	0x200006b4
 8007848:	200006a8 	.word	0x200006a8
 800784c:	200005a4 	.word	0x200005a4
 8007850:	200005a0 	.word	0x200005a0
 8007854:	2000002c 	.word	0x2000002c

08007858 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b082      	sub	sp, #8
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007860:	f000 f852 	bl	8007908 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007864:	4b06      	ldr	r3, [pc, #24]	; (8007880 <prvIdleTask+0x28>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	2b01      	cmp	r3, #1
 800786a:	d9f9      	bls.n	8007860 <prvIdleTask+0x8>
			{
				taskYIELD();
 800786c:	4b05      	ldr	r3, [pc, #20]	; (8007884 <prvIdleTask+0x2c>)
 800786e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007872:	601a      	str	r2, [r3, #0]
 8007874:	f3bf 8f4f 	dsb	sy
 8007878:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800787c:	e7f0      	b.n	8007860 <prvIdleTask+0x8>
 800787e:	bf00      	nop
 8007880:	200005a4 	.word	0x200005a4
 8007884:	e000ed04 	.word	0xe000ed04

08007888 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b082      	sub	sp, #8
 800788c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800788e:	2300      	movs	r3, #0
 8007890:	607b      	str	r3, [r7, #4]
 8007892:	e00c      	b.n	80078ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007894:	687a      	ldr	r2, [r7, #4]
 8007896:	4613      	mov	r3, r2
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	4413      	add	r3, r2
 800789c:	009b      	lsls	r3, r3, #2
 800789e:	4a12      	ldr	r2, [pc, #72]	; (80078e8 <prvInitialiseTaskLists+0x60>)
 80078a0:	4413      	add	r3, r2
 80078a2:	4618      	mov	r0, r3
 80078a4:	f7ff fb17 	bl	8006ed6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	3301      	adds	r3, #1
 80078ac:	607b      	str	r3, [r7, #4]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2b06      	cmp	r3, #6
 80078b2:	d9ef      	bls.n	8007894 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80078b4:	480d      	ldr	r0, [pc, #52]	; (80078ec <prvInitialiseTaskLists+0x64>)
 80078b6:	f7ff fb0e 	bl	8006ed6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80078ba:	480d      	ldr	r0, [pc, #52]	; (80078f0 <prvInitialiseTaskLists+0x68>)
 80078bc:	f7ff fb0b 	bl	8006ed6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80078c0:	480c      	ldr	r0, [pc, #48]	; (80078f4 <prvInitialiseTaskLists+0x6c>)
 80078c2:	f7ff fb08 	bl	8006ed6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80078c6:	480c      	ldr	r0, [pc, #48]	; (80078f8 <prvInitialiseTaskLists+0x70>)
 80078c8:	f7ff fb05 	bl	8006ed6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80078cc:	480b      	ldr	r0, [pc, #44]	; (80078fc <prvInitialiseTaskLists+0x74>)
 80078ce:	f7ff fb02 	bl	8006ed6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80078d2:	4b0b      	ldr	r3, [pc, #44]	; (8007900 <prvInitialiseTaskLists+0x78>)
 80078d4:	4a05      	ldr	r2, [pc, #20]	; (80078ec <prvInitialiseTaskLists+0x64>)
 80078d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80078d8:	4b0a      	ldr	r3, [pc, #40]	; (8007904 <prvInitialiseTaskLists+0x7c>)
 80078da:	4a05      	ldr	r2, [pc, #20]	; (80078f0 <prvInitialiseTaskLists+0x68>)
 80078dc:	601a      	str	r2, [r3, #0]
}
 80078de:	bf00      	nop
 80078e0:	3708      	adds	r7, #8
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}
 80078e6:	bf00      	nop
 80078e8:	200005a4 	.word	0x200005a4
 80078ec:	20000630 	.word	0x20000630
 80078f0:	20000644 	.word	0x20000644
 80078f4:	20000660 	.word	0x20000660
 80078f8:	20000674 	.word	0x20000674
 80078fc:	2000068c 	.word	0x2000068c
 8007900:	20000658 	.word	0x20000658
 8007904:	2000065c 	.word	0x2000065c

08007908 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800790e:	e019      	b.n	8007944 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007910:	f000 fa10 	bl	8007d34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007914:	4b10      	ldr	r3, [pc, #64]	; (8007958 <prvCheckTasksWaitingTermination+0x50>)
 8007916:	68db      	ldr	r3, [r3, #12]
 8007918:	68db      	ldr	r3, [r3, #12]
 800791a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	3304      	adds	r3, #4
 8007920:	4618      	mov	r0, r3
 8007922:	f7ff fb62 	bl	8006fea <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007926:	4b0d      	ldr	r3, [pc, #52]	; (800795c <prvCheckTasksWaitingTermination+0x54>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	3b01      	subs	r3, #1
 800792c:	4a0b      	ldr	r2, [pc, #44]	; (800795c <prvCheckTasksWaitingTermination+0x54>)
 800792e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007930:	4b0b      	ldr	r3, [pc, #44]	; (8007960 <prvCheckTasksWaitingTermination+0x58>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	3b01      	subs	r3, #1
 8007936:	4a0a      	ldr	r2, [pc, #40]	; (8007960 <prvCheckTasksWaitingTermination+0x58>)
 8007938:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800793a:	f000 fa2b 	bl	8007d94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 f810 	bl	8007964 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007944:	4b06      	ldr	r3, [pc, #24]	; (8007960 <prvCheckTasksWaitingTermination+0x58>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d1e1      	bne.n	8007910 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800794c:	bf00      	nop
 800794e:	bf00      	nop
 8007950:	3708      	adds	r7, #8
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}
 8007956:	bf00      	nop
 8007958:	20000674 	.word	0x20000674
 800795c:	200006a0 	.word	0x200006a0
 8007960:	20000688 	.word	0x20000688

08007964 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007964:	b580      	push	{r7, lr}
 8007966:	b084      	sub	sp, #16
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	334c      	adds	r3, #76	; 0x4c
 8007970:	4618      	mov	r0, r3
 8007972:	f000 fd01 	bl	8008378 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800797c:	2b00      	cmp	r3, #0
 800797e:	d108      	bne.n	8007992 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007984:	4618      	mov	r0, r3
 8007986:	f000 fb83 	bl	8008090 <vPortFree>
				vPortFree( pxTCB );
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 fb80 	bl	8008090 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007990:	e018      	b.n	80079c4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007998:	2b01      	cmp	r3, #1
 800799a:	d103      	bne.n	80079a4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 fb77 	bl	8008090 <vPortFree>
	}
 80079a2:	e00f      	b.n	80079c4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80079aa:	2b02      	cmp	r3, #2
 80079ac:	d00a      	beq.n	80079c4 <prvDeleteTCB+0x60>
	__asm volatile
 80079ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b2:	f383 8811 	msr	BASEPRI, r3
 80079b6:	f3bf 8f6f 	isb	sy
 80079ba:	f3bf 8f4f 	dsb	sy
 80079be:	60fb      	str	r3, [r7, #12]
}
 80079c0:	bf00      	nop
 80079c2:	e7fe      	b.n	80079c2 <prvDeleteTCB+0x5e>
	}
 80079c4:	bf00      	nop
 80079c6:	3710      	adds	r7, #16
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80079cc:	b480      	push	{r7}
 80079ce:	b083      	sub	sp, #12
 80079d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079d2:	4b0c      	ldr	r3, [pc, #48]	; (8007a04 <prvResetNextTaskUnblockTime+0x38>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d104      	bne.n	80079e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80079dc:	4b0a      	ldr	r3, [pc, #40]	; (8007a08 <prvResetNextTaskUnblockTime+0x3c>)
 80079de:	f04f 32ff 	mov.w	r2, #4294967295
 80079e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80079e4:	e008      	b.n	80079f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079e6:	4b07      	ldr	r3, [pc, #28]	; (8007a04 <prvResetNextTaskUnblockTime+0x38>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	68db      	ldr	r3, [r3, #12]
 80079ec:	68db      	ldr	r3, [r3, #12]
 80079ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	4a04      	ldr	r2, [pc, #16]	; (8007a08 <prvResetNextTaskUnblockTime+0x3c>)
 80079f6:	6013      	str	r3, [r2, #0]
}
 80079f8:	bf00      	nop
 80079fa:	370c      	adds	r7, #12
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr
 8007a04:	20000658 	.word	0x20000658
 8007a08:	200006c0 	.word	0x200006c0

08007a0c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b084      	sub	sp, #16
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007a16:	4b29      	ldr	r3, [pc, #164]	; (8007abc <prvAddCurrentTaskToDelayedList+0xb0>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a1c:	4b28      	ldr	r3, [pc, #160]	; (8007ac0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	3304      	adds	r3, #4
 8007a22:	4618      	mov	r0, r3
 8007a24:	f7ff fae1 	bl	8006fea <uxListRemove>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d10b      	bne.n	8007a46 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007a2e:	4b24      	ldr	r3, [pc, #144]	; (8007ac0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a34:	2201      	movs	r2, #1
 8007a36:	fa02 f303 	lsl.w	r3, r2, r3
 8007a3a:	43da      	mvns	r2, r3
 8007a3c:	4b21      	ldr	r3, [pc, #132]	; (8007ac4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4013      	ands	r3, r2
 8007a42:	4a20      	ldr	r2, [pc, #128]	; (8007ac4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007a44:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a4c:	d10a      	bne.n	8007a64 <prvAddCurrentTaskToDelayedList+0x58>
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d007      	beq.n	8007a64 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a54:	4b1a      	ldr	r3, [pc, #104]	; (8007ac0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	3304      	adds	r3, #4
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	481a      	ldr	r0, [pc, #104]	; (8007ac8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007a5e:	f7ff fa67 	bl	8006f30 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007a62:	e026      	b.n	8007ab2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007a64:	68fa      	ldr	r2, [r7, #12]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4413      	add	r3, r2
 8007a6a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007a6c:	4b14      	ldr	r3, [pc, #80]	; (8007ac0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	68ba      	ldr	r2, [r7, #8]
 8007a72:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007a74:	68ba      	ldr	r2, [r7, #8]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d209      	bcs.n	8007a90 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a7c:	4b13      	ldr	r3, [pc, #76]	; (8007acc <prvAddCurrentTaskToDelayedList+0xc0>)
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	4b0f      	ldr	r3, [pc, #60]	; (8007ac0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	3304      	adds	r3, #4
 8007a86:	4619      	mov	r1, r3
 8007a88:	4610      	mov	r0, r2
 8007a8a:	f7ff fa75 	bl	8006f78 <vListInsert>
}
 8007a8e:	e010      	b.n	8007ab2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a90:	4b0f      	ldr	r3, [pc, #60]	; (8007ad0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007a92:	681a      	ldr	r2, [r3, #0]
 8007a94:	4b0a      	ldr	r3, [pc, #40]	; (8007ac0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	3304      	adds	r3, #4
 8007a9a:	4619      	mov	r1, r3
 8007a9c:	4610      	mov	r0, r2
 8007a9e:	f7ff fa6b 	bl	8006f78 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007aa2:	4b0c      	ldr	r3, [pc, #48]	; (8007ad4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	68ba      	ldr	r2, [r7, #8]
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d202      	bcs.n	8007ab2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007aac:	4a09      	ldr	r2, [pc, #36]	; (8007ad4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	6013      	str	r3, [r2, #0]
}
 8007ab2:	bf00      	nop
 8007ab4:	3710      	adds	r7, #16
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}
 8007aba:	bf00      	nop
 8007abc:	200006a4 	.word	0x200006a4
 8007ac0:	200005a0 	.word	0x200005a0
 8007ac4:	200006a8 	.word	0x200006a8
 8007ac8:	2000068c 	.word	0x2000068c
 8007acc:	2000065c 	.word	0x2000065c
 8007ad0:	20000658 	.word	0x20000658
 8007ad4:	200006c0 	.word	0x200006c0

08007ad8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b085      	sub	sp, #20
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	60b9      	str	r1, [r7, #8]
 8007ae2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	3b04      	subs	r3, #4
 8007ae8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007af0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	3b04      	subs	r3, #4
 8007af6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	f023 0201 	bic.w	r2, r3, #1
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	3b04      	subs	r3, #4
 8007b06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007b08:	4a0c      	ldr	r2, [pc, #48]	; (8007b3c <pxPortInitialiseStack+0x64>)
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	3b14      	subs	r3, #20
 8007b12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007b14:	687a      	ldr	r2, [r7, #4]
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	3b04      	subs	r3, #4
 8007b1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f06f 0202 	mvn.w	r2, #2
 8007b26:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	3b20      	subs	r3, #32
 8007b2c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3714      	adds	r7, #20
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr
 8007b3c:	08007b41 	.word	0x08007b41

08007b40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007b40:	b480      	push	{r7}
 8007b42:	b085      	sub	sp, #20
 8007b44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007b46:	2300      	movs	r3, #0
 8007b48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007b4a:	4b12      	ldr	r3, [pc, #72]	; (8007b94 <prvTaskExitError+0x54>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b52:	d00a      	beq.n	8007b6a <prvTaskExitError+0x2a>
	__asm volatile
 8007b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b58:	f383 8811 	msr	BASEPRI, r3
 8007b5c:	f3bf 8f6f 	isb	sy
 8007b60:	f3bf 8f4f 	dsb	sy
 8007b64:	60fb      	str	r3, [r7, #12]
}
 8007b66:	bf00      	nop
 8007b68:	e7fe      	b.n	8007b68 <prvTaskExitError+0x28>
	__asm volatile
 8007b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b6e:	f383 8811 	msr	BASEPRI, r3
 8007b72:	f3bf 8f6f 	isb	sy
 8007b76:	f3bf 8f4f 	dsb	sy
 8007b7a:	60bb      	str	r3, [r7, #8]
}
 8007b7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007b7e:	bf00      	nop
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d0fc      	beq.n	8007b80 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007b86:	bf00      	nop
 8007b88:	bf00      	nop
 8007b8a:	3714      	adds	r7, #20
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr
 8007b94:	20000028 	.word	0x20000028
	...

08007ba0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007ba0:	4b07      	ldr	r3, [pc, #28]	; (8007bc0 <pxCurrentTCBConst2>)
 8007ba2:	6819      	ldr	r1, [r3, #0]
 8007ba4:	6808      	ldr	r0, [r1, #0]
 8007ba6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007baa:	f380 8809 	msr	PSP, r0
 8007bae:	f3bf 8f6f 	isb	sy
 8007bb2:	f04f 0000 	mov.w	r0, #0
 8007bb6:	f380 8811 	msr	BASEPRI, r0
 8007bba:	4770      	bx	lr
 8007bbc:	f3af 8000 	nop.w

08007bc0 <pxCurrentTCBConst2>:
 8007bc0:	200005a0 	.word	0x200005a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007bc4:	bf00      	nop
 8007bc6:	bf00      	nop

08007bc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007bc8:	4808      	ldr	r0, [pc, #32]	; (8007bec <prvPortStartFirstTask+0x24>)
 8007bca:	6800      	ldr	r0, [r0, #0]
 8007bcc:	6800      	ldr	r0, [r0, #0]
 8007bce:	f380 8808 	msr	MSP, r0
 8007bd2:	f04f 0000 	mov.w	r0, #0
 8007bd6:	f380 8814 	msr	CONTROL, r0
 8007bda:	b662      	cpsie	i
 8007bdc:	b661      	cpsie	f
 8007bde:	f3bf 8f4f 	dsb	sy
 8007be2:	f3bf 8f6f 	isb	sy
 8007be6:	df00      	svc	0
 8007be8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007bea:	bf00      	nop
 8007bec:	e000ed08 	.word	0xe000ed08

08007bf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b086      	sub	sp, #24
 8007bf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007bf6:	4b46      	ldr	r3, [pc, #280]	; (8007d10 <xPortStartScheduler+0x120>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a46      	ldr	r2, [pc, #280]	; (8007d14 <xPortStartScheduler+0x124>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d10a      	bne.n	8007c16 <xPortStartScheduler+0x26>
	__asm volatile
 8007c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c04:	f383 8811 	msr	BASEPRI, r3
 8007c08:	f3bf 8f6f 	isb	sy
 8007c0c:	f3bf 8f4f 	dsb	sy
 8007c10:	613b      	str	r3, [r7, #16]
}
 8007c12:	bf00      	nop
 8007c14:	e7fe      	b.n	8007c14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007c16:	4b3e      	ldr	r3, [pc, #248]	; (8007d10 <xPortStartScheduler+0x120>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a3f      	ldr	r2, [pc, #252]	; (8007d18 <xPortStartScheduler+0x128>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d10a      	bne.n	8007c36 <xPortStartScheduler+0x46>
	__asm volatile
 8007c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c24:	f383 8811 	msr	BASEPRI, r3
 8007c28:	f3bf 8f6f 	isb	sy
 8007c2c:	f3bf 8f4f 	dsb	sy
 8007c30:	60fb      	str	r3, [r7, #12]
}
 8007c32:	bf00      	nop
 8007c34:	e7fe      	b.n	8007c34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007c36:	4b39      	ldr	r3, [pc, #228]	; (8007d1c <xPortStartScheduler+0x12c>)
 8007c38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	b2db      	uxtb	r3, r3
 8007c40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	22ff      	movs	r2, #255	; 0xff
 8007c46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007c50:	78fb      	ldrb	r3, [r7, #3]
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007c58:	b2da      	uxtb	r2, r3
 8007c5a:	4b31      	ldr	r3, [pc, #196]	; (8007d20 <xPortStartScheduler+0x130>)
 8007c5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007c5e:	4b31      	ldr	r3, [pc, #196]	; (8007d24 <xPortStartScheduler+0x134>)
 8007c60:	2207      	movs	r2, #7
 8007c62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c64:	e009      	b.n	8007c7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007c66:	4b2f      	ldr	r3, [pc, #188]	; (8007d24 <xPortStartScheduler+0x134>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	3b01      	subs	r3, #1
 8007c6c:	4a2d      	ldr	r2, [pc, #180]	; (8007d24 <xPortStartScheduler+0x134>)
 8007c6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007c70:	78fb      	ldrb	r3, [r7, #3]
 8007c72:	b2db      	uxtb	r3, r3
 8007c74:	005b      	lsls	r3, r3, #1
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c7a:	78fb      	ldrb	r3, [r7, #3]
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c82:	2b80      	cmp	r3, #128	; 0x80
 8007c84:	d0ef      	beq.n	8007c66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007c86:	4b27      	ldr	r3, [pc, #156]	; (8007d24 <xPortStartScheduler+0x134>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f1c3 0307 	rsb	r3, r3, #7
 8007c8e:	2b04      	cmp	r3, #4
 8007c90:	d00a      	beq.n	8007ca8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c96:	f383 8811 	msr	BASEPRI, r3
 8007c9a:	f3bf 8f6f 	isb	sy
 8007c9e:	f3bf 8f4f 	dsb	sy
 8007ca2:	60bb      	str	r3, [r7, #8]
}
 8007ca4:	bf00      	nop
 8007ca6:	e7fe      	b.n	8007ca6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007ca8:	4b1e      	ldr	r3, [pc, #120]	; (8007d24 <xPortStartScheduler+0x134>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	021b      	lsls	r3, r3, #8
 8007cae:	4a1d      	ldr	r2, [pc, #116]	; (8007d24 <xPortStartScheduler+0x134>)
 8007cb0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007cb2:	4b1c      	ldr	r3, [pc, #112]	; (8007d24 <xPortStartScheduler+0x134>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007cba:	4a1a      	ldr	r2, [pc, #104]	; (8007d24 <xPortStartScheduler+0x134>)
 8007cbc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	b2da      	uxtb	r2, r3
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007cc6:	4b18      	ldr	r3, [pc, #96]	; (8007d28 <xPortStartScheduler+0x138>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a17      	ldr	r2, [pc, #92]	; (8007d28 <xPortStartScheduler+0x138>)
 8007ccc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007cd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007cd2:	4b15      	ldr	r3, [pc, #84]	; (8007d28 <xPortStartScheduler+0x138>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a14      	ldr	r2, [pc, #80]	; (8007d28 <xPortStartScheduler+0x138>)
 8007cd8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007cdc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007cde:	f000 f8dd 	bl	8007e9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007ce2:	4b12      	ldr	r3, [pc, #72]	; (8007d2c <xPortStartScheduler+0x13c>)
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007ce8:	f000 f8fc 	bl	8007ee4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007cec:	4b10      	ldr	r3, [pc, #64]	; (8007d30 <xPortStartScheduler+0x140>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a0f      	ldr	r2, [pc, #60]	; (8007d30 <xPortStartScheduler+0x140>)
 8007cf2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007cf6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007cf8:	f7ff ff66 	bl	8007bc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007cfc:	f7ff fd4a 	bl	8007794 <vTaskSwitchContext>
	prvTaskExitError();
 8007d00:	f7ff ff1e 	bl	8007b40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007d04:	2300      	movs	r3, #0
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3718      	adds	r7, #24
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}
 8007d0e:	bf00      	nop
 8007d10:	e000ed00 	.word	0xe000ed00
 8007d14:	410fc271 	.word	0x410fc271
 8007d18:	410fc270 	.word	0x410fc270
 8007d1c:	e000e400 	.word	0xe000e400
 8007d20:	200006cc 	.word	0x200006cc
 8007d24:	200006d0 	.word	0x200006d0
 8007d28:	e000ed20 	.word	0xe000ed20
 8007d2c:	20000028 	.word	0x20000028
 8007d30:	e000ef34 	.word	0xe000ef34

08007d34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007d34:	b480      	push	{r7}
 8007d36:	b083      	sub	sp, #12
 8007d38:	af00      	add	r7, sp, #0
	__asm volatile
 8007d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d3e:	f383 8811 	msr	BASEPRI, r3
 8007d42:	f3bf 8f6f 	isb	sy
 8007d46:	f3bf 8f4f 	dsb	sy
 8007d4a:	607b      	str	r3, [r7, #4]
}
 8007d4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007d4e:	4b0f      	ldr	r3, [pc, #60]	; (8007d8c <vPortEnterCritical+0x58>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	3301      	adds	r3, #1
 8007d54:	4a0d      	ldr	r2, [pc, #52]	; (8007d8c <vPortEnterCritical+0x58>)
 8007d56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007d58:	4b0c      	ldr	r3, [pc, #48]	; (8007d8c <vPortEnterCritical+0x58>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d10f      	bne.n	8007d80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007d60:	4b0b      	ldr	r3, [pc, #44]	; (8007d90 <vPortEnterCritical+0x5c>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	b2db      	uxtb	r3, r3
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d00a      	beq.n	8007d80 <vPortEnterCritical+0x4c>
	__asm volatile
 8007d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d6e:	f383 8811 	msr	BASEPRI, r3
 8007d72:	f3bf 8f6f 	isb	sy
 8007d76:	f3bf 8f4f 	dsb	sy
 8007d7a:	603b      	str	r3, [r7, #0]
}
 8007d7c:	bf00      	nop
 8007d7e:	e7fe      	b.n	8007d7e <vPortEnterCritical+0x4a>
	}
}
 8007d80:	bf00      	nop
 8007d82:	370c      	adds	r7, #12
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr
 8007d8c:	20000028 	.word	0x20000028
 8007d90:	e000ed04 	.word	0xe000ed04

08007d94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007d9a:	4b12      	ldr	r3, [pc, #72]	; (8007de4 <vPortExitCritical+0x50>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d10a      	bne.n	8007db8 <vPortExitCritical+0x24>
	__asm volatile
 8007da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da6:	f383 8811 	msr	BASEPRI, r3
 8007daa:	f3bf 8f6f 	isb	sy
 8007dae:	f3bf 8f4f 	dsb	sy
 8007db2:	607b      	str	r3, [r7, #4]
}
 8007db4:	bf00      	nop
 8007db6:	e7fe      	b.n	8007db6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007db8:	4b0a      	ldr	r3, [pc, #40]	; (8007de4 <vPortExitCritical+0x50>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	3b01      	subs	r3, #1
 8007dbe:	4a09      	ldr	r2, [pc, #36]	; (8007de4 <vPortExitCritical+0x50>)
 8007dc0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007dc2:	4b08      	ldr	r3, [pc, #32]	; (8007de4 <vPortExitCritical+0x50>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d105      	bne.n	8007dd6 <vPortExitCritical+0x42>
 8007dca:	2300      	movs	r3, #0
 8007dcc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007dd4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007dd6:	bf00      	nop
 8007dd8:	370c      	adds	r7, #12
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr
 8007de2:	bf00      	nop
 8007de4:	20000028 	.word	0x20000028
	...

08007df0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007df0:	f3ef 8009 	mrs	r0, PSP
 8007df4:	f3bf 8f6f 	isb	sy
 8007df8:	4b15      	ldr	r3, [pc, #84]	; (8007e50 <pxCurrentTCBConst>)
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	f01e 0f10 	tst.w	lr, #16
 8007e00:	bf08      	it	eq
 8007e02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007e06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e0a:	6010      	str	r0, [r2, #0]
 8007e0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007e10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007e14:	f380 8811 	msr	BASEPRI, r0
 8007e18:	f3bf 8f4f 	dsb	sy
 8007e1c:	f3bf 8f6f 	isb	sy
 8007e20:	f7ff fcb8 	bl	8007794 <vTaskSwitchContext>
 8007e24:	f04f 0000 	mov.w	r0, #0
 8007e28:	f380 8811 	msr	BASEPRI, r0
 8007e2c:	bc09      	pop	{r0, r3}
 8007e2e:	6819      	ldr	r1, [r3, #0]
 8007e30:	6808      	ldr	r0, [r1, #0]
 8007e32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e36:	f01e 0f10 	tst.w	lr, #16
 8007e3a:	bf08      	it	eq
 8007e3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007e40:	f380 8809 	msr	PSP, r0
 8007e44:	f3bf 8f6f 	isb	sy
 8007e48:	4770      	bx	lr
 8007e4a:	bf00      	nop
 8007e4c:	f3af 8000 	nop.w

08007e50 <pxCurrentTCBConst>:
 8007e50:	200005a0 	.word	0x200005a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007e54:	bf00      	nop
 8007e56:	bf00      	nop

08007e58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
	__asm volatile
 8007e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e62:	f383 8811 	msr	BASEPRI, r3
 8007e66:	f3bf 8f6f 	isb	sy
 8007e6a:	f3bf 8f4f 	dsb	sy
 8007e6e:	607b      	str	r3, [r7, #4]
}
 8007e70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007e72:	f7ff fbd7 	bl	8007624 <xTaskIncrementTick>
 8007e76:	4603      	mov	r3, r0
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d003      	beq.n	8007e84 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007e7c:	4b06      	ldr	r3, [pc, #24]	; (8007e98 <SysTick_Handler+0x40>)
 8007e7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e82:	601a      	str	r2, [r3, #0]
 8007e84:	2300      	movs	r3, #0
 8007e86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	f383 8811 	msr	BASEPRI, r3
}
 8007e8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007e90:	bf00      	nop
 8007e92:	3708      	adds	r7, #8
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}
 8007e98:	e000ed04 	.word	0xe000ed04

08007e9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007ea0:	4b0b      	ldr	r3, [pc, #44]	; (8007ed0 <vPortSetupTimerInterrupt+0x34>)
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007ea6:	4b0b      	ldr	r3, [pc, #44]	; (8007ed4 <vPortSetupTimerInterrupt+0x38>)
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007eac:	4b0a      	ldr	r3, [pc, #40]	; (8007ed8 <vPortSetupTimerInterrupt+0x3c>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a0a      	ldr	r2, [pc, #40]	; (8007edc <vPortSetupTimerInterrupt+0x40>)
 8007eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8007eb6:	099b      	lsrs	r3, r3, #6
 8007eb8:	4a09      	ldr	r2, [pc, #36]	; (8007ee0 <vPortSetupTimerInterrupt+0x44>)
 8007eba:	3b01      	subs	r3, #1
 8007ebc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007ebe:	4b04      	ldr	r3, [pc, #16]	; (8007ed0 <vPortSetupTimerInterrupt+0x34>)
 8007ec0:	2207      	movs	r2, #7
 8007ec2:	601a      	str	r2, [r3, #0]
}
 8007ec4:	bf00      	nop
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr
 8007ece:	bf00      	nop
 8007ed0:	e000e010 	.word	0xe000e010
 8007ed4:	e000e018 	.word	0xe000e018
 8007ed8:	2000001c 	.word	0x2000001c
 8007edc:	10624dd3 	.word	0x10624dd3
 8007ee0:	e000e014 	.word	0xe000e014

08007ee4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007ee4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007ef4 <vPortEnableVFP+0x10>
 8007ee8:	6801      	ldr	r1, [r0, #0]
 8007eea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007eee:	6001      	str	r1, [r0, #0]
 8007ef0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007ef2:	bf00      	nop
 8007ef4:	e000ed88 	.word	0xe000ed88

08007ef8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b08a      	sub	sp, #40	; 0x28
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007f00:	2300      	movs	r3, #0
 8007f02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007f04:	f7ff fae4 	bl	80074d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007f08:	4b5b      	ldr	r3, [pc, #364]	; (8008078 <pvPortMalloc+0x180>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d101      	bne.n	8007f14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007f10:	f000 f920 	bl	8008154 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007f14:	4b59      	ldr	r3, [pc, #356]	; (800807c <pvPortMalloc+0x184>)
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	4013      	ands	r3, r2
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	f040 8093 	bne.w	8008048 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d01d      	beq.n	8007f64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007f28:	2208      	movs	r2, #8
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	4413      	add	r3, r2
 8007f2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f003 0307 	and.w	r3, r3, #7
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d014      	beq.n	8007f64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f023 0307 	bic.w	r3, r3, #7
 8007f40:	3308      	adds	r3, #8
 8007f42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f003 0307 	and.w	r3, r3, #7
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d00a      	beq.n	8007f64 <pvPortMalloc+0x6c>
	__asm volatile
 8007f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f52:	f383 8811 	msr	BASEPRI, r3
 8007f56:	f3bf 8f6f 	isb	sy
 8007f5a:	f3bf 8f4f 	dsb	sy
 8007f5e:	617b      	str	r3, [r7, #20]
}
 8007f60:	bf00      	nop
 8007f62:	e7fe      	b.n	8007f62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d06e      	beq.n	8008048 <pvPortMalloc+0x150>
 8007f6a:	4b45      	ldr	r3, [pc, #276]	; (8008080 <pvPortMalloc+0x188>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d869      	bhi.n	8008048 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007f74:	4b43      	ldr	r3, [pc, #268]	; (8008084 <pvPortMalloc+0x18c>)
 8007f76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007f78:	4b42      	ldr	r3, [pc, #264]	; (8008084 <pvPortMalloc+0x18c>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f7e:	e004      	b.n	8007f8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	687a      	ldr	r2, [r7, #4]
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d903      	bls.n	8007f9c <pvPortMalloc+0xa4>
 8007f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d1f1      	bne.n	8007f80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007f9c:	4b36      	ldr	r3, [pc, #216]	; (8008078 <pvPortMalloc+0x180>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d050      	beq.n	8008048 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007fa6:	6a3b      	ldr	r3, [r7, #32]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	2208      	movs	r2, #8
 8007fac:	4413      	add	r3, r2
 8007fae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	6a3b      	ldr	r3, [r7, #32]
 8007fb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fba:	685a      	ldr	r2, [r3, #4]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	1ad2      	subs	r2, r2, r3
 8007fc0:	2308      	movs	r3, #8
 8007fc2:	005b      	lsls	r3, r3, #1
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d91f      	bls.n	8008008 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	4413      	add	r3, r2
 8007fce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007fd0:	69bb      	ldr	r3, [r7, #24]
 8007fd2:	f003 0307 	and.w	r3, r3, #7
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d00a      	beq.n	8007ff0 <pvPortMalloc+0xf8>
	__asm volatile
 8007fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fde:	f383 8811 	msr	BASEPRI, r3
 8007fe2:	f3bf 8f6f 	isb	sy
 8007fe6:	f3bf 8f4f 	dsb	sy
 8007fea:	613b      	str	r3, [r7, #16]
}
 8007fec:	bf00      	nop
 8007fee:	e7fe      	b.n	8007fee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff2:	685a      	ldr	r2, [r3, #4]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	1ad2      	subs	r2, r2, r3
 8007ff8:	69bb      	ldr	r3, [r7, #24]
 8007ffa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008002:	69b8      	ldr	r0, [r7, #24]
 8008004:	f000 f908 	bl	8008218 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008008:	4b1d      	ldr	r3, [pc, #116]	; (8008080 <pvPortMalloc+0x188>)
 800800a:	681a      	ldr	r2, [r3, #0]
 800800c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	1ad3      	subs	r3, r2, r3
 8008012:	4a1b      	ldr	r2, [pc, #108]	; (8008080 <pvPortMalloc+0x188>)
 8008014:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008016:	4b1a      	ldr	r3, [pc, #104]	; (8008080 <pvPortMalloc+0x188>)
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	4b1b      	ldr	r3, [pc, #108]	; (8008088 <pvPortMalloc+0x190>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	429a      	cmp	r2, r3
 8008020:	d203      	bcs.n	800802a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008022:	4b17      	ldr	r3, [pc, #92]	; (8008080 <pvPortMalloc+0x188>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a18      	ldr	r2, [pc, #96]	; (8008088 <pvPortMalloc+0x190>)
 8008028:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800802a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802c:	685a      	ldr	r2, [r3, #4]
 800802e:	4b13      	ldr	r3, [pc, #76]	; (800807c <pvPortMalloc+0x184>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	431a      	orrs	r2, r3
 8008034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008036:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803a:	2200      	movs	r2, #0
 800803c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800803e:	4b13      	ldr	r3, [pc, #76]	; (800808c <pvPortMalloc+0x194>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	3301      	adds	r3, #1
 8008044:	4a11      	ldr	r2, [pc, #68]	; (800808c <pvPortMalloc+0x194>)
 8008046:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008048:	f7ff fa50 	bl	80074ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800804c:	69fb      	ldr	r3, [r7, #28]
 800804e:	f003 0307 	and.w	r3, r3, #7
 8008052:	2b00      	cmp	r3, #0
 8008054:	d00a      	beq.n	800806c <pvPortMalloc+0x174>
	__asm volatile
 8008056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800805a:	f383 8811 	msr	BASEPRI, r3
 800805e:	f3bf 8f6f 	isb	sy
 8008062:	f3bf 8f4f 	dsb	sy
 8008066:	60fb      	str	r3, [r7, #12]
}
 8008068:	bf00      	nop
 800806a:	e7fe      	b.n	800806a <pvPortMalloc+0x172>
	return pvReturn;
 800806c:	69fb      	ldr	r3, [r7, #28]
}
 800806e:	4618      	mov	r0, r3
 8008070:	3728      	adds	r7, #40	; 0x28
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
 8008076:	bf00      	nop
 8008078:	200042dc 	.word	0x200042dc
 800807c:	200042f0 	.word	0x200042f0
 8008080:	200042e0 	.word	0x200042e0
 8008084:	200042d4 	.word	0x200042d4
 8008088:	200042e4 	.word	0x200042e4
 800808c:	200042e8 	.word	0x200042e8

08008090 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b086      	sub	sp, #24
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d04d      	beq.n	800813e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80080a2:	2308      	movs	r3, #8
 80080a4:	425b      	negs	r3, r3
 80080a6:	697a      	ldr	r2, [r7, #20]
 80080a8:	4413      	add	r3, r2
 80080aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	685a      	ldr	r2, [r3, #4]
 80080b4:	4b24      	ldr	r3, [pc, #144]	; (8008148 <vPortFree+0xb8>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4013      	ands	r3, r2
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d10a      	bne.n	80080d4 <vPortFree+0x44>
	__asm volatile
 80080be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c2:	f383 8811 	msr	BASEPRI, r3
 80080c6:	f3bf 8f6f 	isb	sy
 80080ca:	f3bf 8f4f 	dsb	sy
 80080ce:	60fb      	str	r3, [r7, #12]
}
 80080d0:	bf00      	nop
 80080d2:	e7fe      	b.n	80080d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d00a      	beq.n	80080f2 <vPortFree+0x62>
	__asm volatile
 80080dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e0:	f383 8811 	msr	BASEPRI, r3
 80080e4:	f3bf 8f6f 	isb	sy
 80080e8:	f3bf 8f4f 	dsb	sy
 80080ec:	60bb      	str	r3, [r7, #8]
}
 80080ee:	bf00      	nop
 80080f0:	e7fe      	b.n	80080f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	685a      	ldr	r2, [r3, #4]
 80080f6:	4b14      	ldr	r3, [pc, #80]	; (8008148 <vPortFree+0xb8>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4013      	ands	r3, r2
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d01e      	beq.n	800813e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d11a      	bne.n	800813e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	685a      	ldr	r2, [r3, #4]
 800810c:	4b0e      	ldr	r3, [pc, #56]	; (8008148 <vPortFree+0xb8>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	43db      	mvns	r3, r3
 8008112:	401a      	ands	r2, r3
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008118:	f7ff f9da 	bl	80074d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	685a      	ldr	r2, [r3, #4]
 8008120:	4b0a      	ldr	r3, [pc, #40]	; (800814c <vPortFree+0xbc>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4413      	add	r3, r2
 8008126:	4a09      	ldr	r2, [pc, #36]	; (800814c <vPortFree+0xbc>)
 8008128:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800812a:	6938      	ldr	r0, [r7, #16]
 800812c:	f000 f874 	bl	8008218 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008130:	4b07      	ldr	r3, [pc, #28]	; (8008150 <vPortFree+0xc0>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	3301      	adds	r3, #1
 8008136:	4a06      	ldr	r2, [pc, #24]	; (8008150 <vPortFree+0xc0>)
 8008138:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800813a:	f7ff f9d7 	bl	80074ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800813e:	bf00      	nop
 8008140:	3718      	adds	r7, #24
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}
 8008146:	bf00      	nop
 8008148:	200042f0 	.word	0x200042f0
 800814c:	200042e0 	.word	0x200042e0
 8008150:	200042ec 	.word	0x200042ec

08008154 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008154:	b480      	push	{r7}
 8008156:	b085      	sub	sp, #20
 8008158:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800815a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800815e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008160:	4b27      	ldr	r3, [pc, #156]	; (8008200 <prvHeapInit+0xac>)
 8008162:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f003 0307 	and.w	r3, r3, #7
 800816a:	2b00      	cmp	r3, #0
 800816c:	d00c      	beq.n	8008188 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	3307      	adds	r3, #7
 8008172:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f023 0307 	bic.w	r3, r3, #7
 800817a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800817c:	68ba      	ldr	r2, [r7, #8]
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	1ad3      	subs	r3, r2, r3
 8008182:	4a1f      	ldr	r2, [pc, #124]	; (8008200 <prvHeapInit+0xac>)
 8008184:	4413      	add	r3, r2
 8008186:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800818c:	4a1d      	ldr	r2, [pc, #116]	; (8008204 <prvHeapInit+0xb0>)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008192:	4b1c      	ldr	r3, [pc, #112]	; (8008204 <prvHeapInit+0xb0>)
 8008194:	2200      	movs	r2, #0
 8008196:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	68ba      	ldr	r2, [r7, #8]
 800819c:	4413      	add	r3, r2
 800819e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80081a0:	2208      	movs	r2, #8
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	1a9b      	subs	r3, r3, r2
 80081a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f023 0307 	bic.w	r3, r3, #7
 80081ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	4a15      	ldr	r2, [pc, #84]	; (8008208 <prvHeapInit+0xb4>)
 80081b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80081b6:	4b14      	ldr	r3, [pc, #80]	; (8008208 <prvHeapInit+0xb4>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	2200      	movs	r2, #0
 80081bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80081be:	4b12      	ldr	r3, [pc, #72]	; (8008208 <prvHeapInit+0xb4>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	2200      	movs	r2, #0
 80081c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	68fa      	ldr	r2, [r7, #12]
 80081ce:	1ad2      	subs	r2, r2, r3
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80081d4:	4b0c      	ldr	r3, [pc, #48]	; (8008208 <prvHeapInit+0xb4>)
 80081d6:	681a      	ldr	r2, [r3, #0]
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	4a0a      	ldr	r2, [pc, #40]	; (800820c <prvHeapInit+0xb8>)
 80081e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	4a09      	ldr	r2, [pc, #36]	; (8008210 <prvHeapInit+0xbc>)
 80081ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80081ec:	4b09      	ldr	r3, [pc, #36]	; (8008214 <prvHeapInit+0xc0>)
 80081ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80081f2:	601a      	str	r2, [r3, #0]
}
 80081f4:	bf00      	nop
 80081f6:	3714      	adds	r7, #20
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr
 8008200:	200006d4 	.word	0x200006d4
 8008204:	200042d4 	.word	0x200042d4
 8008208:	200042dc 	.word	0x200042dc
 800820c:	200042e4 	.word	0x200042e4
 8008210:	200042e0 	.word	0x200042e0
 8008214:	200042f0 	.word	0x200042f0

08008218 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008218:	b480      	push	{r7}
 800821a:	b085      	sub	sp, #20
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008220:	4b28      	ldr	r3, [pc, #160]	; (80082c4 <prvInsertBlockIntoFreeList+0xac>)
 8008222:	60fb      	str	r3, [r7, #12]
 8008224:	e002      	b.n	800822c <prvInsertBlockIntoFreeList+0x14>
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	60fb      	str	r3, [r7, #12]
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	687a      	ldr	r2, [r7, #4]
 8008232:	429a      	cmp	r2, r3
 8008234:	d8f7      	bhi.n	8008226 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	68ba      	ldr	r2, [r7, #8]
 8008240:	4413      	add	r3, r2
 8008242:	687a      	ldr	r2, [r7, #4]
 8008244:	429a      	cmp	r2, r3
 8008246:	d108      	bne.n	800825a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	685a      	ldr	r2, [r3, #4]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	685b      	ldr	r3, [r3, #4]
 8008250:	441a      	add	r2, r3
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	68ba      	ldr	r2, [r7, #8]
 8008264:	441a      	add	r2, r3
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	429a      	cmp	r2, r3
 800826c:	d118      	bne.n	80082a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681a      	ldr	r2, [r3, #0]
 8008272:	4b15      	ldr	r3, [pc, #84]	; (80082c8 <prvInsertBlockIntoFreeList+0xb0>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	429a      	cmp	r2, r3
 8008278:	d00d      	beq.n	8008296 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	685a      	ldr	r2, [r3, #4]
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	441a      	add	r2, r3
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	681a      	ldr	r2, [r3, #0]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	601a      	str	r2, [r3, #0]
 8008294:	e008      	b.n	80082a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008296:	4b0c      	ldr	r3, [pc, #48]	; (80082c8 <prvInsertBlockIntoFreeList+0xb0>)
 8008298:	681a      	ldr	r2, [r3, #0]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	601a      	str	r2, [r3, #0]
 800829e:	e003      	b.n	80082a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681a      	ldr	r2, [r3, #0]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80082a8:	68fa      	ldr	r2, [r7, #12]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	429a      	cmp	r2, r3
 80082ae:	d002      	beq.n	80082b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80082b6:	bf00      	nop
 80082b8:	3714      	adds	r7, #20
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr
 80082c2:	bf00      	nop
 80082c4:	200042d4 	.word	0x200042d4
 80082c8:	200042dc 	.word	0x200042dc

080082cc <__libc_init_array>:
 80082cc:	b570      	push	{r4, r5, r6, lr}
 80082ce:	4d0d      	ldr	r5, [pc, #52]	; (8008304 <__libc_init_array+0x38>)
 80082d0:	4c0d      	ldr	r4, [pc, #52]	; (8008308 <__libc_init_array+0x3c>)
 80082d2:	1b64      	subs	r4, r4, r5
 80082d4:	10a4      	asrs	r4, r4, #2
 80082d6:	2600      	movs	r6, #0
 80082d8:	42a6      	cmp	r6, r4
 80082da:	d109      	bne.n	80082f0 <__libc_init_array+0x24>
 80082dc:	4d0b      	ldr	r5, [pc, #44]	; (800830c <__libc_init_array+0x40>)
 80082de:	4c0c      	ldr	r4, [pc, #48]	; (8008310 <__libc_init_array+0x44>)
 80082e0:	f000 f944 	bl	800856c <_init>
 80082e4:	1b64      	subs	r4, r4, r5
 80082e6:	10a4      	asrs	r4, r4, #2
 80082e8:	2600      	movs	r6, #0
 80082ea:	42a6      	cmp	r6, r4
 80082ec:	d105      	bne.n	80082fa <__libc_init_array+0x2e>
 80082ee:	bd70      	pop	{r4, r5, r6, pc}
 80082f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80082f4:	4798      	blx	r3
 80082f6:	3601      	adds	r6, #1
 80082f8:	e7ee      	b.n	80082d8 <__libc_init_array+0xc>
 80082fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80082fe:	4798      	blx	r3
 8008300:	3601      	adds	r6, #1
 8008302:	e7f2      	b.n	80082ea <__libc_init_array+0x1e>
 8008304:	08008f08 	.word	0x08008f08
 8008308:	08008f08 	.word	0x08008f08
 800830c:	08008f08 	.word	0x08008f08
 8008310:	08008f0c 	.word	0x08008f0c

08008314 <__itoa>:
 8008314:	1e93      	subs	r3, r2, #2
 8008316:	2b22      	cmp	r3, #34	; 0x22
 8008318:	b510      	push	{r4, lr}
 800831a:	460c      	mov	r4, r1
 800831c:	d904      	bls.n	8008328 <__itoa+0x14>
 800831e:	2300      	movs	r3, #0
 8008320:	700b      	strb	r3, [r1, #0]
 8008322:	461c      	mov	r4, r3
 8008324:	4620      	mov	r0, r4
 8008326:	bd10      	pop	{r4, pc}
 8008328:	2a0a      	cmp	r2, #10
 800832a:	d109      	bne.n	8008340 <__itoa+0x2c>
 800832c:	2800      	cmp	r0, #0
 800832e:	da07      	bge.n	8008340 <__itoa+0x2c>
 8008330:	232d      	movs	r3, #45	; 0x2d
 8008332:	700b      	strb	r3, [r1, #0]
 8008334:	4240      	negs	r0, r0
 8008336:	2101      	movs	r1, #1
 8008338:	4421      	add	r1, r4
 800833a:	f000 f879 	bl	8008430 <__utoa>
 800833e:	e7f1      	b.n	8008324 <__itoa+0x10>
 8008340:	2100      	movs	r1, #0
 8008342:	e7f9      	b.n	8008338 <__itoa+0x24>

08008344 <itoa>:
 8008344:	f7ff bfe6 	b.w	8008314 <__itoa>

08008348 <__retarget_lock_acquire_recursive>:
 8008348:	4770      	bx	lr

0800834a <__retarget_lock_release_recursive>:
 800834a:	4770      	bx	lr

0800834c <memset>:
 800834c:	4402      	add	r2, r0
 800834e:	4603      	mov	r3, r0
 8008350:	4293      	cmp	r3, r2
 8008352:	d100      	bne.n	8008356 <memset+0xa>
 8008354:	4770      	bx	lr
 8008356:	f803 1b01 	strb.w	r1, [r3], #1
 800835a:	e7f9      	b.n	8008350 <memset+0x4>

0800835c <cleanup_glue>:
 800835c:	b538      	push	{r3, r4, r5, lr}
 800835e:	460c      	mov	r4, r1
 8008360:	6809      	ldr	r1, [r1, #0]
 8008362:	4605      	mov	r5, r0
 8008364:	b109      	cbz	r1, 800836a <cleanup_glue+0xe>
 8008366:	f7ff fff9 	bl	800835c <cleanup_glue>
 800836a:	4621      	mov	r1, r4
 800836c:	4628      	mov	r0, r5
 800836e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008372:	f000 b8ab 	b.w	80084cc <_free_r>
	...

08008378 <_reclaim_reent>:
 8008378:	4b2c      	ldr	r3, [pc, #176]	; (800842c <_reclaim_reent+0xb4>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4283      	cmp	r3, r0
 800837e:	b570      	push	{r4, r5, r6, lr}
 8008380:	4604      	mov	r4, r0
 8008382:	d051      	beq.n	8008428 <_reclaim_reent+0xb0>
 8008384:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008386:	b143      	cbz	r3, 800839a <_reclaim_reent+0x22>
 8008388:	68db      	ldr	r3, [r3, #12]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d14a      	bne.n	8008424 <_reclaim_reent+0xac>
 800838e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008390:	6819      	ldr	r1, [r3, #0]
 8008392:	b111      	cbz	r1, 800839a <_reclaim_reent+0x22>
 8008394:	4620      	mov	r0, r4
 8008396:	f000 f899 	bl	80084cc <_free_r>
 800839a:	6961      	ldr	r1, [r4, #20]
 800839c:	b111      	cbz	r1, 80083a4 <_reclaim_reent+0x2c>
 800839e:	4620      	mov	r0, r4
 80083a0:	f000 f894 	bl	80084cc <_free_r>
 80083a4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80083a6:	b111      	cbz	r1, 80083ae <_reclaim_reent+0x36>
 80083a8:	4620      	mov	r0, r4
 80083aa:	f000 f88f 	bl	80084cc <_free_r>
 80083ae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80083b0:	b111      	cbz	r1, 80083b8 <_reclaim_reent+0x40>
 80083b2:	4620      	mov	r0, r4
 80083b4:	f000 f88a 	bl	80084cc <_free_r>
 80083b8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80083ba:	b111      	cbz	r1, 80083c2 <_reclaim_reent+0x4a>
 80083bc:	4620      	mov	r0, r4
 80083be:	f000 f885 	bl	80084cc <_free_r>
 80083c2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80083c4:	b111      	cbz	r1, 80083cc <_reclaim_reent+0x54>
 80083c6:	4620      	mov	r0, r4
 80083c8:	f000 f880 	bl	80084cc <_free_r>
 80083cc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80083ce:	b111      	cbz	r1, 80083d6 <_reclaim_reent+0x5e>
 80083d0:	4620      	mov	r0, r4
 80083d2:	f000 f87b 	bl	80084cc <_free_r>
 80083d6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80083d8:	b111      	cbz	r1, 80083e0 <_reclaim_reent+0x68>
 80083da:	4620      	mov	r0, r4
 80083dc:	f000 f876 	bl	80084cc <_free_r>
 80083e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083e2:	b111      	cbz	r1, 80083ea <_reclaim_reent+0x72>
 80083e4:	4620      	mov	r0, r4
 80083e6:	f000 f871 	bl	80084cc <_free_r>
 80083ea:	69a3      	ldr	r3, [r4, #24]
 80083ec:	b1e3      	cbz	r3, 8008428 <_reclaim_reent+0xb0>
 80083ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80083f0:	4620      	mov	r0, r4
 80083f2:	4798      	blx	r3
 80083f4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80083f6:	b1b9      	cbz	r1, 8008428 <_reclaim_reent+0xb0>
 80083f8:	4620      	mov	r0, r4
 80083fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80083fe:	f7ff bfad 	b.w	800835c <cleanup_glue>
 8008402:	5949      	ldr	r1, [r1, r5]
 8008404:	b941      	cbnz	r1, 8008418 <_reclaim_reent+0xa0>
 8008406:	3504      	adds	r5, #4
 8008408:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800840a:	2d80      	cmp	r5, #128	; 0x80
 800840c:	68d9      	ldr	r1, [r3, #12]
 800840e:	d1f8      	bne.n	8008402 <_reclaim_reent+0x8a>
 8008410:	4620      	mov	r0, r4
 8008412:	f000 f85b 	bl	80084cc <_free_r>
 8008416:	e7ba      	b.n	800838e <_reclaim_reent+0x16>
 8008418:	680e      	ldr	r6, [r1, #0]
 800841a:	4620      	mov	r0, r4
 800841c:	f000 f856 	bl	80084cc <_free_r>
 8008420:	4631      	mov	r1, r6
 8008422:	e7ef      	b.n	8008404 <_reclaim_reent+0x8c>
 8008424:	2500      	movs	r5, #0
 8008426:	e7ef      	b.n	8008408 <_reclaim_reent+0x90>
 8008428:	bd70      	pop	{r4, r5, r6, pc}
 800842a:	bf00      	nop
 800842c:	2000002c 	.word	0x2000002c

08008430 <__utoa>:
 8008430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008432:	4c1f      	ldr	r4, [pc, #124]	; (80084b0 <__utoa+0x80>)
 8008434:	b08b      	sub	sp, #44	; 0x2c
 8008436:	4605      	mov	r5, r0
 8008438:	460b      	mov	r3, r1
 800843a:	466e      	mov	r6, sp
 800843c:	f104 0c20 	add.w	ip, r4, #32
 8008440:	6820      	ldr	r0, [r4, #0]
 8008442:	6861      	ldr	r1, [r4, #4]
 8008444:	4637      	mov	r7, r6
 8008446:	c703      	stmia	r7!, {r0, r1}
 8008448:	3408      	adds	r4, #8
 800844a:	4564      	cmp	r4, ip
 800844c:	463e      	mov	r6, r7
 800844e:	d1f7      	bne.n	8008440 <__utoa+0x10>
 8008450:	7921      	ldrb	r1, [r4, #4]
 8008452:	7139      	strb	r1, [r7, #4]
 8008454:	1e91      	subs	r1, r2, #2
 8008456:	6820      	ldr	r0, [r4, #0]
 8008458:	6038      	str	r0, [r7, #0]
 800845a:	2922      	cmp	r1, #34	; 0x22
 800845c:	f04f 0100 	mov.w	r1, #0
 8008460:	d904      	bls.n	800846c <__utoa+0x3c>
 8008462:	7019      	strb	r1, [r3, #0]
 8008464:	460b      	mov	r3, r1
 8008466:	4618      	mov	r0, r3
 8008468:	b00b      	add	sp, #44	; 0x2c
 800846a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800846c:	1e58      	subs	r0, r3, #1
 800846e:	4684      	mov	ip, r0
 8008470:	fbb5 f7f2 	udiv	r7, r5, r2
 8008474:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8008478:	fb02 5617 	mls	r6, r2, r7, r5
 800847c:	4476      	add	r6, lr
 800847e:	460c      	mov	r4, r1
 8008480:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8008484:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8008488:	462e      	mov	r6, r5
 800848a:	42b2      	cmp	r2, r6
 800848c:	f101 0101 	add.w	r1, r1, #1
 8008490:	463d      	mov	r5, r7
 8008492:	d9ed      	bls.n	8008470 <__utoa+0x40>
 8008494:	2200      	movs	r2, #0
 8008496:	545a      	strb	r2, [r3, r1]
 8008498:	1919      	adds	r1, r3, r4
 800849a:	1aa5      	subs	r5, r4, r2
 800849c:	42aa      	cmp	r2, r5
 800849e:	dae2      	bge.n	8008466 <__utoa+0x36>
 80084a0:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80084a4:	780e      	ldrb	r6, [r1, #0]
 80084a6:	7006      	strb	r6, [r0, #0]
 80084a8:	3201      	adds	r2, #1
 80084aa:	f801 5901 	strb.w	r5, [r1], #-1
 80084ae:	e7f4      	b.n	800849a <__utoa+0x6a>
 80084b0:	08008ed8 	.word	0x08008ed8

080084b4 <__malloc_lock>:
 80084b4:	4801      	ldr	r0, [pc, #4]	; (80084bc <__malloc_lock+0x8>)
 80084b6:	f7ff bf47 	b.w	8008348 <__retarget_lock_acquire_recursive>
 80084ba:	bf00      	nop
 80084bc:	20004478 	.word	0x20004478

080084c0 <__malloc_unlock>:
 80084c0:	4801      	ldr	r0, [pc, #4]	; (80084c8 <__malloc_unlock+0x8>)
 80084c2:	f7ff bf42 	b.w	800834a <__retarget_lock_release_recursive>
 80084c6:	bf00      	nop
 80084c8:	20004478 	.word	0x20004478

080084cc <_free_r>:
 80084cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084ce:	2900      	cmp	r1, #0
 80084d0:	d048      	beq.n	8008564 <_free_r+0x98>
 80084d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084d6:	9001      	str	r0, [sp, #4]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	f1a1 0404 	sub.w	r4, r1, #4
 80084de:	bfb8      	it	lt
 80084e0:	18e4      	addlt	r4, r4, r3
 80084e2:	f7ff ffe7 	bl	80084b4 <__malloc_lock>
 80084e6:	4a20      	ldr	r2, [pc, #128]	; (8008568 <_free_r+0x9c>)
 80084e8:	9801      	ldr	r0, [sp, #4]
 80084ea:	6813      	ldr	r3, [r2, #0]
 80084ec:	4615      	mov	r5, r2
 80084ee:	b933      	cbnz	r3, 80084fe <_free_r+0x32>
 80084f0:	6063      	str	r3, [r4, #4]
 80084f2:	6014      	str	r4, [r2, #0]
 80084f4:	b003      	add	sp, #12
 80084f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80084fa:	f7ff bfe1 	b.w	80084c0 <__malloc_unlock>
 80084fe:	42a3      	cmp	r3, r4
 8008500:	d90b      	bls.n	800851a <_free_r+0x4e>
 8008502:	6821      	ldr	r1, [r4, #0]
 8008504:	1862      	adds	r2, r4, r1
 8008506:	4293      	cmp	r3, r2
 8008508:	bf04      	itt	eq
 800850a:	681a      	ldreq	r2, [r3, #0]
 800850c:	685b      	ldreq	r3, [r3, #4]
 800850e:	6063      	str	r3, [r4, #4]
 8008510:	bf04      	itt	eq
 8008512:	1852      	addeq	r2, r2, r1
 8008514:	6022      	streq	r2, [r4, #0]
 8008516:	602c      	str	r4, [r5, #0]
 8008518:	e7ec      	b.n	80084f4 <_free_r+0x28>
 800851a:	461a      	mov	r2, r3
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	b10b      	cbz	r3, 8008524 <_free_r+0x58>
 8008520:	42a3      	cmp	r3, r4
 8008522:	d9fa      	bls.n	800851a <_free_r+0x4e>
 8008524:	6811      	ldr	r1, [r2, #0]
 8008526:	1855      	adds	r5, r2, r1
 8008528:	42a5      	cmp	r5, r4
 800852a:	d10b      	bne.n	8008544 <_free_r+0x78>
 800852c:	6824      	ldr	r4, [r4, #0]
 800852e:	4421      	add	r1, r4
 8008530:	1854      	adds	r4, r2, r1
 8008532:	42a3      	cmp	r3, r4
 8008534:	6011      	str	r1, [r2, #0]
 8008536:	d1dd      	bne.n	80084f4 <_free_r+0x28>
 8008538:	681c      	ldr	r4, [r3, #0]
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	6053      	str	r3, [r2, #4]
 800853e:	4421      	add	r1, r4
 8008540:	6011      	str	r1, [r2, #0]
 8008542:	e7d7      	b.n	80084f4 <_free_r+0x28>
 8008544:	d902      	bls.n	800854c <_free_r+0x80>
 8008546:	230c      	movs	r3, #12
 8008548:	6003      	str	r3, [r0, #0]
 800854a:	e7d3      	b.n	80084f4 <_free_r+0x28>
 800854c:	6825      	ldr	r5, [r4, #0]
 800854e:	1961      	adds	r1, r4, r5
 8008550:	428b      	cmp	r3, r1
 8008552:	bf04      	itt	eq
 8008554:	6819      	ldreq	r1, [r3, #0]
 8008556:	685b      	ldreq	r3, [r3, #4]
 8008558:	6063      	str	r3, [r4, #4]
 800855a:	bf04      	itt	eq
 800855c:	1949      	addeq	r1, r1, r5
 800855e:	6021      	streq	r1, [r4, #0]
 8008560:	6054      	str	r4, [r2, #4]
 8008562:	e7c7      	b.n	80084f4 <_free_r+0x28>
 8008564:	b003      	add	sp, #12
 8008566:	bd30      	pop	{r4, r5, pc}
 8008568:	200042f4 	.word	0x200042f4

0800856c <_init>:
 800856c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800856e:	bf00      	nop
 8008570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008572:	bc08      	pop	{r3}
 8008574:	469e      	mov	lr, r3
 8008576:	4770      	bx	lr

08008578 <_fini>:
 8008578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800857a:	bf00      	nop
 800857c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800857e:	bc08      	pop	{r3}
 8008580:	469e      	mov	lr, r3
 8008582:	4770      	bx	lr
