
tester407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000772c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  080078bc  080078bc  000178bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079c4  080079c4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080079c4  080079c4  000179c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079cc  080079cc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079cc  080079cc  000179cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079d0  080079d0  000179d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080079d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          000043e8  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000445c  2000445c  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b3c8  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034d7  00000000  00000000  0003b46c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001410  00000000  00000000  0003e948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012f0  00000000  00000000  0003fd58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023412  00000000  00000000  00041048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018248  00000000  00000000  0006445a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d52c6  00000000  00000000  0007c6a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00151968  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000056c4  00000000  00000000  001519bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080078a4 	.word	0x080078a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080078a4 	.word	0x080078a4

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	60b9      	str	r1, [r7, #8]
 80004d2:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	4a07      	ldr	r2, [pc, #28]	; (80004f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80004d8:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004da:	68bb      	ldr	r3, [r7, #8]
 80004dc:	4a06      	ldr	r2, [pc, #24]	; (80004f8 <vApplicationGetIdleTaskMemory+0x30>)
 80004de:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	2280      	movs	r2, #128	; 0x80
 80004e4:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 80004e6:	bf00      	nop
 80004e8:	3714      	adds	r7, #20
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	200002b8 	.word	0x200002b8
 80004f8:	2000036c 	.word	0x2000036c

080004fc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80004fc:	b5b0      	push	{r4, r5, r7, lr}
 80004fe:	b08e      	sub	sp, #56	; 0x38
 8000500:	af00      	add	r7, sp, #0
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of testTask */
  osThreadDef(testTask, TestTask, osPriorityNormal, 0, 256);
 8000502:	4b14      	ldr	r3, [pc, #80]	; (8000554 <MX_FREERTOS_Init+0x58>)
 8000504:	f107 041c 	add.w	r4, r7, #28
 8000508:	461d      	mov	r5, r3
 800050a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800050c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800050e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000512:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  testTaskHandle = osThreadCreate(osThread(testTask), NULL);
 8000516:	f107 031c 	add.w	r3, r7, #28
 800051a:	2100      	movs	r1, #0
 800051c:	4618      	mov	r0, r3
 800051e:	f005 fe74 	bl	800620a <osThreadCreate>
 8000522:	4603      	mov	r3, r0
 8000524:	4a0c      	ldr	r2, [pc, #48]	; (8000558 <MX_FREERTOS_Init+0x5c>)
 8000526:	6013      	str	r3, [r2, #0]

  /* definition and creation of lcdTask */
  osThreadDef(lcdTask, LCDTask, osPriorityNormal, 0, 256);
 8000528:	4b0c      	ldr	r3, [pc, #48]	; (800055c <MX_FREERTOS_Init+0x60>)
 800052a:	463c      	mov	r4, r7
 800052c:	461d      	mov	r5, r3
 800052e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000530:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000532:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000536:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  lcdTaskHandle = osThreadCreate(osThread(lcdTask), NULL);
 800053a:	463b      	mov	r3, r7
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f005 fe63 	bl	800620a <osThreadCreate>
 8000544:	4603      	mov	r3, r0
 8000546:	4a06      	ldr	r2, [pc, #24]	; (8000560 <MX_FREERTOS_Init+0x64>)
 8000548:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800054a:	bf00      	nop
 800054c:	3738      	adds	r7, #56	; 0x38
 800054e:	46bd      	mov	sp, r7
 8000550:	bdb0      	pop	{r4, r5, r7, pc}
 8000552:	bf00      	nop
 8000554:	080078d0 	.word	0x080078d0
 8000558:	200042d0 	.word	0x200042d0
 800055c:	080078ec 	.word	0x080078ec
 8000560:	200042c8 	.word	0x200042c8

08000564 <TestTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_TestTask */
void TestTask(void const * argument)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b09c      	sub	sp, #112	; 0x70
 8000568:	af02      	add	r7, sp, #8
 800056a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TestTask */

	//команды i2c
	uint16_t addr = 0x20;
 800056c:	2320      	movs	r3, #32
 800056e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
	addr = addr<<1;
 8000572:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8000576:	005b      	lsls	r3, r3, #1
 8000578:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

	uint8_t cmdStart_1[6] = { 0x55, 0xAA, 0x04, 0x07, 0x00, 0x0B };
 800057c:	4aab      	ldr	r2, [pc, #684]	; (800082c <TestTask+0x2c8>)
 800057e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000582:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000586:	6018      	str	r0, [r3, #0]
 8000588:	3304      	adds	r3, #4
 800058a:	8019      	strh	r1, [r3, #0]
	uint8_t cmdRead_1[2] = { 0x00 };// 0x07 0x01
 800058c:	2300      	movs	r3, #0
 800058e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54

	uint8_t cmdStart_2[6] = { 0x55, 0xAA, 0x04, 0x06, 0x00, 0x0A };
 8000592:	4aa7      	ldr	r2, [pc, #668]	; (8000830 <TestTask+0x2cc>)
 8000594:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000598:	e892 0003 	ldmia.w	r2, {r0, r1}
 800059c:	6018      	str	r0, [r3, #0]
 800059e:	3304      	adds	r3, #4
 80005a0:	8019      	strh	r1, [r3, #0]
	uint8_t cmdRead_2[2] = { 0x00 };// 0x06 0x01
 80005a2:	2300      	movs	r3, #0
 80005a4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

	uint8_t cmdStart_3[9] = { 0x55, 0xAA, 0x07, 0x10, 0x19, 0x00, 0x00, 0x00, 0x30 };
 80005a8:	4aa2      	ldr	r2, [pc, #648]	; (8000834 <TestTask+0x2d0>)
 80005aa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80005b0:	c303      	stmia	r3!, {r0, r1}
 80005b2:	701a      	strb	r2, [r3, #0]
	uint8_t cmdRead_3[2] = { 0x00 };// 0x10 0x01
 80005b4:	2300      	movs	r3, #0
 80005b6:	873b      	strh	r3, [r7, #56]	; 0x38

	uint8_t cmdStart_4[7] = { 0x55, 0xAA, 0x05, 0x15, 0x01, 0x00, 0x1B };
 80005b8:	4a9f      	ldr	r2, [pc, #636]	; (8000838 <TestTask+0x2d4>)
 80005ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005c2:	6018      	str	r0, [r3, #0]
 80005c4:	3304      	adds	r3, #4
 80005c6:	8019      	strh	r1, [r3, #0]
 80005c8:	3302      	adds	r3, #2
 80005ca:	0c0a      	lsrs	r2, r1, #16
 80005cc:	701a      	strb	r2, [r3, #0]
	uint8_t cmdRead_4[2] = { 0x00 };// 0x15 0x01
 80005ce:	2300      	movs	r3, #0
 80005d0:	85bb      	strh	r3, [r7, #44]	; 0x2c

	uint8_t cmdStop[7] = { 0x55, 0xAA, 0x05, 0x15, 0x00, 0x00, 0x1A };
 80005d2:	4a9a      	ldr	r2, [pc, #616]	; (800083c <TestTask+0x2d8>)
 80005d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005dc:	6018      	str	r0, [r3, #0]
 80005de:	3304      	adds	r3, #4
 80005e0:	8019      	strh	r1, [r3, #0]
 80005e2:	3302      	adds	r3, #2
 80005e4:	0c0a      	lsrs	r2, r1, #16
 80005e6:	701a      	strb	r2, [r3, #0]
	uint8_t cmdRead_stop[2] = { 0x00 };// 0x15 0x01
 80005e8:	2300      	movs	r3, #0
 80005ea:	843b      	strh	r3, [r7, #32]

	uint8_t cmdRefresh[6] = { 0x55, 0xAA, 0x04, 0x16, 0x00, 0x1A };
 80005ec:	4a94      	ldr	r2, [pc, #592]	; (8000840 <TestTask+0x2dc>)
 80005ee:	f107 0318 	add.w	r3, r7, #24
 80005f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005f6:	6018      	str	r0, [r3, #0]
 80005f8:	3304      	adds	r3, #4
 80005fa:	8019      	strh	r1, [r3, #0]
	uint8_t cmdRead_Refresh[6] = { 0x00 };// 0x06 0x16 0x01 0x00 0x00 0x1D
 80005fc:	2300      	movs	r3, #0
 80005fe:	613b      	str	r3, [r7, #16]
 8000600:	2300      	movs	r3, #0
 8000602:	82bb      	strh	r3, [r7, #20]



	//команды uart
	uint8_t cmdASIC[7] = { 0x55, 0xAA, 0x52, 0x05, 0x00, 0x00, 0x0A };
 8000604:	4a8f      	ldr	r2, [pc, #572]	; (8000844 <TestTask+0x2e0>)
 8000606:	f107 0308 	add.w	r3, r7, #8
 800060a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800060e:	6018      	str	r0, [r3, #0]
 8000610:	3304      	adds	r3, #4
 8000612:	8019      	strh	r1, [r3, #0]
 8000614:	3302      	adds	r3, #2
 8000616:	0c0a      	lsrs	r2, r1, #16
 8000618:	701a      	strb	r2, [r3, #0]
	GPIO_PinState plug = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61

	HAL_GPIO_WritePin(RST_ASIC_GPIO_Port, RST_ASIC_Pin, GPIO_PIN_RESET);
 8000620:	2200      	movs	r2, #0
 8000622:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000626:	4888      	ldr	r0, [pc, #544]	; (8000848 <TestTask+0x2e4>)
 8000628:	f001 f992 	bl	8001950 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A0_GPIO_Port, A0_Pin, GPIO_PIN_RESET);
 800062c:	2200      	movs	r2, #0
 800062e:	2102      	movs	r1, #2
 8000630:	4886      	ldr	r0, [pc, #536]	; (800084c <TestTask+0x2e8>)
 8000632:	f001 f98d 	bl	8001950 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, GPIO_PIN_RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	2101      	movs	r1, #1
 800063a:	4884      	ldr	r0, [pc, #528]	; (800084c <TestTask+0x2e8>)
 800063c:	f001 f988 	bl	8001950 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, GPIO_PIN_RESET);
 8000640:	2200      	movs	r2, #0
 8000642:	2104      	movs	r1, #4
 8000644:	4881      	ldr	r0, [pc, #516]	; (800084c <TestTask+0x2e8>)
 8000646:	f001 f983 	bl	8001950 <HAL_GPIO_WritePin>

	plug = HAL_GPIO_ReadPin(PLUG_GPIO_Port, PLUG_Pin);
 800064a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800064e:	4880      	ldr	r0, [pc, #512]	; (8000850 <TestTask+0x2ec>)
 8000650:	f001 f966 	bl	8001920 <HAL_GPIO_ReadPin>
 8000654:	4603      	mov	r3, r0
 8000656:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61

	/* Infinite loop */
	for (;;) {
		if (start) {
 800065a:	4b7e      	ldr	r3, [pc, #504]	; (8000854 <TestTask+0x2f0>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d0fb      	beq.n	800065a <TestTask+0xf6>
			counter_bytes = 0;
 8000662:	4b7d      	ldr	r3, [pc, #500]	; (8000858 <TestTask+0x2f4>)
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(RST_ASIC_GPIO_Port, RST_ASIC_Pin, GPIO_PIN_RESET);
 8000668:	2200      	movs	r2, #0
 800066a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800066e:	4876      	ldr	r0, [pc, #472]	; (8000848 <TestTask+0x2e4>)
 8000670:	f001 f96e 	bl	8001950 <HAL_GPIO_WritePin>
			osDelay(4);
 8000674:	2004      	movs	r0, #4
 8000676:	f005 fe14 	bl	80062a2 <osDelay>
			start = 0;
 800067a:	4b76      	ldr	r3, [pc, #472]	; (8000854 <TestTask+0x2f0>)
 800067c:	2200      	movs	r2, #0
 800067e:	701a      	strb	r2, [r3, #0]

			status_i2c = HAL_I2C_Master_Transmit(&hi2c1, addr, cmdStart_1, 6, 20);
 8000680:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000684:	f8b7 1062 	ldrh.w	r1, [r7, #98]	; 0x62
 8000688:	2314      	movs	r3, #20
 800068a:	9300      	str	r3, [sp, #0]
 800068c:	2306      	movs	r3, #6
 800068e:	4873      	ldr	r0, [pc, #460]	; (800085c <TestTask+0x2f8>)
 8000690:	f001 fabc 	bl	8001c0c <HAL_I2C_Master_Transmit>
 8000694:	4603      	mov	r3, r0
 8000696:	461a      	mov	r2, r3
 8000698:	4b71      	ldr	r3, [pc, #452]	; (8000860 <TestTask+0x2fc>)
 800069a:	701a      	strb	r2, [r3, #0]
			osDelay(200);
 800069c:	20c8      	movs	r0, #200	; 0xc8
 800069e:	f005 fe00 	bl	80062a2 <osDelay>
			status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_1[0], 1, 20);
 80006a2:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80006a6:	f8b7 1062 	ldrh.w	r1, [r7, #98]	; 0x62
 80006aa:	2314      	movs	r3, #20
 80006ac:	9300      	str	r3, [sp, #0]
 80006ae:	2301      	movs	r3, #1
 80006b0:	486a      	ldr	r0, [pc, #424]	; (800085c <TestTask+0x2f8>)
 80006b2:	f001 fba9 	bl	8001e08 <HAL_I2C_Master_Receive>
 80006b6:	4603      	mov	r3, r0
 80006b8:	461a      	mov	r2, r3
 80006ba:	4b69      	ldr	r3, [pc, #420]	; (8000860 <TestTask+0x2fc>)
 80006bc:	701a      	strb	r2, [r3, #0]
			status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_1[1], 1, 20);
 80006be:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80006c2:	1c5a      	adds	r2, r3, #1
 80006c4:	f8b7 1062 	ldrh.w	r1, [r7, #98]	; 0x62
 80006c8:	2314      	movs	r3, #20
 80006ca:	9300      	str	r3, [sp, #0]
 80006cc:	2301      	movs	r3, #1
 80006ce:	4863      	ldr	r0, [pc, #396]	; (800085c <TestTask+0x2f8>)
 80006d0:	f001 fb9a 	bl	8001e08 <HAL_I2C_Master_Receive>
 80006d4:	4603      	mov	r3, r0
 80006d6:	461a      	mov	r2, r3
 80006d8:	4b61      	ldr	r3, [pc, #388]	; (8000860 <TestTask+0x2fc>)
 80006da:	701a      	strb	r2, [r3, #0]
			osDelay(300);
 80006dc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80006e0:	f005 fddf 	bl	80062a2 <osDelay>

			status_i2c = HAL_I2C_Master_Transmit(&hi2c1, addr, cmdStart_2, 6, 20);
 80006e4:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80006e8:	f8b7 1062 	ldrh.w	r1, [r7, #98]	; 0x62
 80006ec:	2314      	movs	r3, #20
 80006ee:	9300      	str	r3, [sp, #0]
 80006f0:	2306      	movs	r3, #6
 80006f2:	485a      	ldr	r0, [pc, #360]	; (800085c <TestTask+0x2f8>)
 80006f4:	f001 fa8a 	bl	8001c0c <HAL_I2C_Master_Transmit>
 80006f8:	4603      	mov	r3, r0
 80006fa:	461a      	mov	r2, r3
 80006fc:	4b58      	ldr	r3, [pc, #352]	; (8000860 <TestTask+0x2fc>)
 80006fe:	701a      	strb	r2, [r3, #0]
			osDelay(200);
 8000700:	20c8      	movs	r0, #200	; 0xc8
 8000702:	f005 fdce 	bl	80062a2 <osDelay>
			status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_2[0], 1, 20);
 8000706:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800070a:	f8b7 1062 	ldrh.w	r1, [r7, #98]	; 0x62
 800070e:	2314      	movs	r3, #20
 8000710:	9300      	str	r3, [sp, #0]
 8000712:	2301      	movs	r3, #1
 8000714:	4851      	ldr	r0, [pc, #324]	; (800085c <TestTask+0x2f8>)
 8000716:	f001 fb77 	bl	8001e08 <HAL_I2C_Master_Receive>
 800071a:	4603      	mov	r3, r0
 800071c:	461a      	mov	r2, r3
 800071e:	4b50      	ldr	r3, [pc, #320]	; (8000860 <TestTask+0x2fc>)
 8000720:	701a      	strb	r2, [r3, #0]
			status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_2[1], 1, 20);
 8000722:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000726:	1c5a      	adds	r2, r3, #1
 8000728:	f8b7 1062 	ldrh.w	r1, [r7, #98]	; 0x62
 800072c:	2314      	movs	r3, #20
 800072e:	9300      	str	r3, [sp, #0]
 8000730:	2301      	movs	r3, #1
 8000732:	484a      	ldr	r0, [pc, #296]	; (800085c <TestTask+0x2f8>)
 8000734:	f001 fb68 	bl	8001e08 <HAL_I2C_Master_Receive>
 8000738:	4603      	mov	r3, r0
 800073a:	461a      	mov	r2, r3
 800073c:	4b48      	ldr	r3, [pc, #288]	; (8000860 <TestTask+0x2fc>)
 800073e:	701a      	strb	r2, [r3, #0]
			osDelay(1000);
 8000740:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000744:	f005 fdad 	bl	80062a2 <osDelay>

			status_i2c = HAL_I2C_Master_Transmit(&hi2c1, addr, cmdStart_3, 9, 20);
 8000748:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800074c:	f8b7 1062 	ldrh.w	r1, [r7, #98]	; 0x62
 8000750:	2314      	movs	r3, #20
 8000752:	9300      	str	r3, [sp, #0]
 8000754:	2309      	movs	r3, #9
 8000756:	4841      	ldr	r0, [pc, #260]	; (800085c <TestTask+0x2f8>)
 8000758:	f001 fa58 	bl	8001c0c <HAL_I2C_Master_Transmit>
 800075c:	4603      	mov	r3, r0
 800075e:	461a      	mov	r2, r3
 8000760:	4b3f      	ldr	r3, [pc, #252]	; (8000860 <TestTask+0x2fc>)
 8000762:	701a      	strb	r2, [r3, #0]
			osDelay(100);
 8000764:	2064      	movs	r0, #100	; 0x64
 8000766:	f005 fd9c 	bl	80062a2 <osDelay>
			status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_3[0], 1, 20);
 800076a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800076e:	f8b7 1062 	ldrh.w	r1, [r7, #98]	; 0x62
 8000772:	2314      	movs	r3, #20
 8000774:	9300      	str	r3, [sp, #0]
 8000776:	2301      	movs	r3, #1
 8000778:	4838      	ldr	r0, [pc, #224]	; (800085c <TestTask+0x2f8>)
 800077a:	f001 fb45 	bl	8001e08 <HAL_I2C_Master_Receive>
 800077e:	4603      	mov	r3, r0
 8000780:	461a      	mov	r2, r3
 8000782:	4b37      	ldr	r3, [pc, #220]	; (8000860 <TestTask+0x2fc>)
 8000784:	701a      	strb	r2, [r3, #0]
			status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_3[1], 1, 20);
 8000786:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800078a:	1c5a      	adds	r2, r3, #1
 800078c:	f8b7 1062 	ldrh.w	r1, [r7, #98]	; 0x62
 8000790:	2314      	movs	r3, #20
 8000792:	9300      	str	r3, [sp, #0]
 8000794:	2301      	movs	r3, #1
 8000796:	4831      	ldr	r0, [pc, #196]	; (800085c <TestTask+0x2f8>)
 8000798:	f001 fb36 	bl	8001e08 <HAL_I2C_Master_Receive>
 800079c:	4603      	mov	r3, r0
 800079e:	461a      	mov	r2, r3
 80007a0:	4b2f      	ldr	r3, [pc, #188]	; (8000860 <TestTask+0x2fc>)
 80007a2:	701a      	strb	r2, [r3, #0]
			osDelay(1000);
 80007a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007a8:	f005 fd7b 	bl	80062a2 <osDelay>

			status_i2c = HAL_I2C_Master_Transmit(&hi2c1, addr, cmdStart_4, 7, 20);
 80007ac:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80007b0:	f8b7 1062 	ldrh.w	r1, [r7, #98]	; 0x62
 80007b4:	2314      	movs	r3, #20
 80007b6:	9300      	str	r3, [sp, #0]
 80007b8:	2307      	movs	r3, #7
 80007ba:	4828      	ldr	r0, [pc, #160]	; (800085c <TestTask+0x2f8>)
 80007bc:	f001 fa26 	bl	8001c0c <HAL_I2C_Master_Transmit>
 80007c0:	4603      	mov	r3, r0
 80007c2:	461a      	mov	r2, r3
 80007c4:	4b26      	ldr	r3, [pc, #152]	; (8000860 <TestTask+0x2fc>)
 80007c6:	701a      	strb	r2, [r3, #0]
			osDelay(710);
 80007c8:	f240 20c6 	movw	r0, #710	; 0x2c6
 80007cc:	f005 fd69 	bl	80062a2 <osDelay>
			status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_4[0], 1, 20);
 80007d0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80007d4:	f8b7 1062 	ldrh.w	r1, [r7, #98]	; 0x62
 80007d8:	2314      	movs	r3, #20
 80007da:	9300      	str	r3, [sp, #0]
 80007dc:	2301      	movs	r3, #1
 80007de:	481f      	ldr	r0, [pc, #124]	; (800085c <TestTask+0x2f8>)
 80007e0:	f001 fb12 	bl	8001e08 <HAL_I2C_Master_Receive>
 80007e4:	4603      	mov	r3, r0
 80007e6:	461a      	mov	r2, r3
 80007e8:	4b1d      	ldr	r3, [pc, #116]	; (8000860 <TestTask+0x2fc>)
 80007ea:	701a      	strb	r2, [r3, #0]
			status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_4[1], 1, 20);
 80007ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007f0:	1c5a      	adds	r2, r3, #1
 80007f2:	f8b7 1062 	ldrh.w	r1, [r7, #98]	; 0x62
 80007f6:	2314      	movs	r3, #20
 80007f8:	9300      	str	r3, [sp, #0]
 80007fa:	2301      	movs	r3, #1
 80007fc:	4817      	ldr	r0, [pc, #92]	; (800085c <TestTask+0x2f8>)
 80007fe:	f001 fb03 	bl	8001e08 <HAL_I2C_Master_Receive>
 8000802:	4603      	mov	r3, r0
 8000804:	461a      	mov	r2, r3
 8000806:	4b16      	ldr	r3, [pc, #88]	; (8000860 <TestTask+0x2fc>)
 8000808:	701a      	strb	r2, [r3, #0]

			osDelay(1000);
 800080a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800080e:	f005 fd48 	bl	80062a2 <osDelay>

			HAL_GPIO_WritePin(RST_ASIC_GPIO_Port, RST_ASIC_Pin, GPIO_PIN_SET);
 8000812:	2201      	movs	r2, #1
 8000814:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000818:	480b      	ldr	r0, [pc, #44]	; (8000848 <TestTask+0x2e4>)
 800081a:	f001 f899 	bl	8001950 <HAL_GPIO_WritePin>
			osDelay(1200);
 800081e:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000822:	f005 fd3e 	bl	80062a2 <osDelay>


			//цикл опроса
			for (int var = 0; var < 100; ++var) {
 8000826:	2300      	movs	r3, #0
 8000828:	667b      	str	r3, [r7, #100]	; 0x64
 800082a:	e060      	b.n	80008ee <TestTask+0x38a>
 800082c:	08007908 	.word	0x08007908
 8000830:	08007910 	.word	0x08007910
 8000834:	08007918 	.word	0x08007918
 8000838:	08007924 	.word	0x08007924
 800083c:	0800792c 	.word	0x0800792c
 8000840:	08007934 	.word	0x08007934
 8000844:	0800793c 	.word	0x0800793c
 8000848:	40020000 	.word	0x40020000
 800084c:	40020c00 	.word	0x40020c00
 8000850:	40020800 	.word	0x40020800
 8000854:	200002b4 	.word	0x200002b4
 8000858:	20000094 	.word	0x20000094
 800085c:	20004328 	.word	0x20004328
 8000860:	200042cc 	.word	0x200042cc

				//сброс асиков
				HAL_GPIO_WritePin(RST_ASIC_GPIO_Port, RST_ASIC_Pin, GPIO_PIN_RESET);
 8000864:	2200      	movs	r2, #0
 8000866:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800086a:	483a      	ldr	r0, [pc, #232]	; (8000954 <TestTask+0x3f0>)
 800086c:	f001 f870 	bl	8001950 <HAL_GPIO_WritePin>
				osDelay(500);
 8000870:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000874:	f005 fd15 	bl	80062a2 <osDelay>
				HAL_GPIO_WritePin(RST_ASIC_GPIO_Port, RST_ASIC_Pin, GPIO_PIN_SET);
 8000878:	2201      	movs	r2, #1
 800087a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800087e:	4835      	ldr	r0, [pc, #212]	; (8000954 <TestTask+0x3f0>)
 8000880:	f001 f866 	bl	8001950 <HAL_GPIO_WritePin>
				osDelay(500);
 8000884:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000888:	f005 fd0b 	bl	80062a2 <osDelay>

				status_uart = HAL_UART_Receive_IT(&huart6, readASIC, 1);
 800088c:	2201      	movs	r2, #1
 800088e:	4932      	ldr	r1, [pc, #200]	; (8000958 <TestTask+0x3f4>)
 8000890:	4832      	ldr	r0, [pc, #200]	; (800095c <TestTask+0x3f8>)
 8000892:	f004 fd10 	bl	80052b6 <HAL_UART_Receive_IT>
 8000896:	4603      	mov	r3, r0
 8000898:	461a      	mov	r2, r3
 800089a:	4b31      	ldr	r3, [pc, #196]	; (8000960 <TestTask+0x3fc>)
 800089c:	701a      	strb	r2, [r3, #0]
				status_uart = HAL_UART_Transmit(&huart1, cmdASIC, 7, 20);
 800089e:	f107 0108 	add.w	r1, r7, #8
 80008a2:	2314      	movs	r3, #20
 80008a4:	2207      	movs	r2, #7
 80008a6:	482f      	ldr	r0, [pc, #188]	; (8000964 <TestTask+0x400>)
 80008a8:	f004 fc73 	bl	8005192 <HAL_UART_Transmit>
 80008ac:	4603      	mov	r3, r0
 80008ae:	461a      	mov	r2, r3
 80008b0:	4b2b      	ldr	r3, [pc, #172]	; (8000960 <TestTask+0x3fc>)
 80008b2:	701a      	strb	r2, [r3, #0]

				osDelay(150);
 80008b4:	2096      	movs	r0, #150	; 0x96
 80008b6:	f005 fcf4 	bl	80062a2 <osDelay>

				HAL_UART_AbortReceive(&huart6);
 80008ba:	4828      	ldr	r0, [pc, #160]	; (800095c <TestTask+0x3f8>)
 80008bc:	f004 fd2b 	bl	8005316 <HAL_UART_AbortReceive>

				//посчитать количесво асиков
				pre_count_ASIC = counter_bytes / 9;
 80008c0:	4b29      	ldr	r3, [pc, #164]	; (8000968 <TestTask+0x404>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a29      	ldr	r2, [pc, #164]	; (800096c <TestTask+0x408>)
 80008c6:	fba2 2303 	umull	r2, r3, r2, r3
 80008ca:	085b      	lsrs	r3, r3, #1
 80008cc:	4a28      	ldr	r2, [pc, #160]	; (8000970 <TestTask+0x40c>)
 80008ce:	6013      	str	r3, [r2, #0]
				counter_bytes = 0;
 80008d0:	4b25      	ldr	r3, [pc, #148]	; (8000968 <TestTask+0x404>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
				memset(readASIC, 0, sizeof readASIC);
 80008d6:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80008da:	2100      	movs	r1, #0
 80008dc:	481e      	ldr	r0, [pc, #120]	; (8000958 <TestTask+0x3f4>)
 80008de:	f006 ff13 	bl	8007708 <memset>

				//подать команду на пик что бы не отключил питание
				osDelay(200);
 80008e2:	20c8      	movs	r0, #200	; 0xc8
 80008e4:	f005 fcdd 	bl	80062a2 <osDelay>
			for (int var = 0; var < 100; ++var) {
 80008e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80008ea:	3301      	adds	r3, #1
 80008ec:	667b      	str	r3, [r7, #100]	; 0x64
 80008ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80008f0:	2b63      	cmp	r3, #99	; 0x63
 80008f2:	ddb7      	ble.n	8000864 <TestTask+0x300>

				// создать програмный таймер который будет обновлять пик
			}

			status_i2c = HAL_I2C_Master_Transmit(&hi2c1, addr, cmdStop, 7, 20);
 80008f4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80008f8:	f8b7 1062 	ldrh.w	r1, [r7, #98]	; 0x62
 80008fc:	2314      	movs	r3, #20
 80008fe:	9300      	str	r3, [sp, #0]
 8000900:	2307      	movs	r3, #7
 8000902:	481c      	ldr	r0, [pc, #112]	; (8000974 <TestTask+0x410>)
 8000904:	f001 f982 	bl	8001c0c <HAL_I2C_Master_Transmit>
 8000908:	4603      	mov	r3, r0
 800090a:	461a      	mov	r2, r3
 800090c:	4b1a      	ldr	r3, [pc, #104]	; (8000978 <TestTask+0x414>)
 800090e:	701a      	strb	r2, [r3, #0]
			osDelay(20);
 8000910:	2014      	movs	r0, #20
 8000912:	f005 fcc6 	bl	80062a2 <osDelay>
			status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_stop[0], 1, 20);
 8000916:	f107 0220 	add.w	r2, r7, #32
 800091a:	f8b7 1062 	ldrh.w	r1, [r7, #98]	; 0x62
 800091e:	2314      	movs	r3, #20
 8000920:	9300      	str	r3, [sp, #0]
 8000922:	2301      	movs	r3, #1
 8000924:	4813      	ldr	r0, [pc, #76]	; (8000974 <TestTask+0x410>)
 8000926:	f001 fa6f 	bl	8001e08 <HAL_I2C_Master_Receive>
 800092a:	4603      	mov	r3, r0
 800092c:	461a      	mov	r2, r3
 800092e:	4b12      	ldr	r3, [pc, #72]	; (8000978 <TestTask+0x414>)
 8000930:	701a      	strb	r2, [r3, #0]
			status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_stop[1], 1, 20);
 8000932:	f107 0320 	add.w	r3, r7, #32
 8000936:	1c5a      	adds	r2, r3, #1
 8000938:	f8b7 1062 	ldrh.w	r1, [r7, #98]	; 0x62
 800093c:	2314      	movs	r3, #20
 800093e:	9300      	str	r3, [sp, #0]
 8000940:	2301      	movs	r3, #1
 8000942:	480c      	ldr	r0, [pc, #48]	; (8000974 <TestTask+0x410>)
 8000944:	f001 fa60 	bl	8001e08 <HAL_I2C_Master_Receive>
 8000948:	4603      	mov	r3, r0
 800094a:	461a      	mov	r2, r3
 800094c:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <TestTask+0x414>)
 800094e:	701a      	strb	r2, [r3, #0]
		if (start) {
 8000950:	e683      	b.n	800065a <TestTask+0xf6>
 8000952:	bf00      	nop
 8000954:	40020000 	.word	0x40020000
 8000958:	20000098 	.word	0x20000098
 800095c:	20004408 	.word	0x20004408
 8000960:	200042c4 	.word	0x200042c4
 8000964:	200043c4 	.word	0x200043c4
 8000968:	20000094 	.word	0x20000094
 800096c:	38e38e39 	.word	0x38e38e39
 8000970:	20000090 	.word	0x20000090
 8000974:	20004328 	.word	0x20004328
 8000978:	200042cc 	.word	0x200042cc

0800097c <LCDTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_LCDTask */
void LCDTask(void const * argument)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
/* Infinite loop */
for (;;) {
	//if (condition) {
	//	status_i2c = HAL_I2C_Master_Transmit(&hi2c3, (addr <<1), &cmdStart_1[0], 1, 20);
	//}
	osDelay(1);
 8000984:	2001      	movs	r0, #1
 8000986:	f005 fc8c 	bl	80062a2 <osDelay>
 800098a:	e7fb      	b.n	8000984 <LCDTask+0x8>

0800098c <HAL_UART_RxCpltCallback>:
  /* USER CODE END LCDTask */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]

	status_uart = HAL_UART_Receive_IT(&huart6, &readASIC[counter_bytes], 1);
 8000994:	4b0a      	ldr	r3, [pc, #40]	; (80009c0 <HAL_UART_RxCpltCallback+0x34>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a0a      	ldr	r2, [pc, #40]	; (80009c4 <HAL_UART_RxCpltCallback+0x38>)
 800099a:	4413      	add	r3, r2
 800099c:	2201      	movs	r2, #1
 800099e:	4619      	mov	r1, r3
 80009a0:	4809      	ldr	r0, [pc, #36]	; (80009c8 <HAL_UART_RxCpltCallback+0x3c>)
 80009a2:	f004 fc88 	bl	80052b6 <HAL_UART_Receive_IT>
 80009a6:	4603      	mov	r3, r0
 80009a8:	461a      	mov	r2, r3
 80009aa:	4b08      	ldr	r3, [pc, #32]	; (80009cc <HAL_UART_RxCpltCallback+0x40>)
 80009ac:	701a      	strb	r2, [r3, #0]
	counter_bytes++;
 80009ae:	4b04      	ldr	r3, [pc, #16]	; (80009c0 <HAL_UART_RxCpltCallback+0x34>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	3301      	adds	r3, #1
 80009b4:	4a02      	ldr	r2, [pc, #8]	; (80009c0 <HAL_UART_RxCpltCallback+0x34>)
 80009b6:	6013      	str	r3, [r2, #0]
}
 80009b8:	bf00      	nop
 80009ba:	3708      	adds	r7, #8
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	20000094 	.word	0x20000094
 80009c4:	20000098 	.word	0x20000098
 80009c8:	20004408 	.word	0x20004408
 80009cc:	200042c4 	.word	0x200042c4

080009d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08a      	sub	sp, #40	; 0x28
 80009d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d6:	f107 0314 	add.w	r3, r7, #20
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]
 80009e2:	60da      	str	r2, [r3, #12]
 80009e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	613b      	str	r3, [r7, #16]
 80009ea:	4b4b      	ldr	r3, [pc, #300]	; (8000b18 <MX_GPIO_Init+0x148>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a4a      	ldr	r2, [pc, #296]	; (8000b18 <MX_GPIO_Init+0x148>)
 80009f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b48      	ldr	r3, [pc, #288]	; (8000b18 <MX_GPIO_Init+0x148>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009fe:	613b      	str	r3, [r7, #16]
 8000a00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	4b44      	ldr	r3, [pc, #272]	; (8000b18 <MX_GPIO_Init+0x148>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a43      	ldr	r2, [pc, #268]	; (8000b18 <MX_GPIO_Init+0x148>)
 8000a0c:	f043 0304 	orr.w	r3, r3, #4
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b41      	ldr	r3, [pc, #260]	; (8000b18 <MX_GPIO_Init+0x148>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0304 	and.w	r3, r3, #4
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60bb      	str	r3, [r7, #8]
 8000a22:	4b3d      	ldr	r3, [pc, #244]	; (8000b18 <MX_GPIO_Init+0x148>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a3c      	ldr	r2, [pc, #240]	; (8000b18 <MX_GPIO_Init+0x148>)
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b3a      	ldr	r3, [pc, #232]	; (8000b18 <MX_GPIO_Init+0x148>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	4b36      	ldr	r3, [pc, #216]	; (8000b18 <MX_GPIO_Init+0x148>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a35      	ldr	r2, [pc, #212]	; (8000b18 <MX_GPIO_Init+0x148>)
 8000a44:	f043 0308 	orr.w	r3, r3, #8
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b33      	ldr	r3, [pc, #204]	; (8000b18 <MX_GPIO_Init+0x148>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0308 	and.w	r3, r3, #8
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	603b      	str	r3, [r7, #0]
 8000a5a:	4b2f      	ldr	r3, [pc, #188]	; (8000b18 <MX_GPIO_Init+0x148>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a2e      	ldr	r2, [pc, #184]	; (8000b18 <MX_GPIO_Init+0x148>)
 8000a60:	f043 0302 	orr.w	r3, r3, #2
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b2c      	ldr	r3, [pc, #176]	; (8000b18 <MX_GPIO_Init+0x148>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0302 	and.w	r3, r3, #2
 8000a6e:	603b      	str	r3, [r7, #0]
 8000a70:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_ASIC_GPIO_Port, RST_ASIC_Pin, GPIO_PIN_SET);
 8000a72:	2201      	movs	r2, #1
 8000a74:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a78:	4828      	ldr	r0, [pc, #160]	; (8000b1c <MX_GPIO_Init+0x14c>)
 8000a7a:	f000 ff69 	bl	8001950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, A1_Pin|A0_Pin|A2_Pin, GPIO_PIN_SET);
 8000a7e:	2201      	movs	r2, #1
 8000a80:	2107      	movs	r1, #7
 8000a82:	4827      	ldr	r0, [pc, #156]	; (8000b20 <MX_GPIO_Init+0x150>)
 8000a84:	f000 ff64 	bl	8001950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RST_ASIC_Pin;
 8000a88:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a96:	2300      	movs	r3, #0
 8000a98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RST_ASIC_GPIO_Port, &GPIO_InitStruct);
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	481e      	ldr	r0, [pc, #120]	; (8000b1c <MX_GPIO_Init+0x14c>)
 8000aa2:	f000 fda1 	bl	80015e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000aa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000aaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4818      	ldr	r0, [pc, #96]	; (8000b1c <MX_GPIO_Init+0x14c>)
 8000abc:	f000 fd94 	bl	80015e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000ac0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ac4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aca:	2301      	movs	r3, #1
 8000acc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ace:	f107 0314 	add.w	r3, r7, #20
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4813      	ldr	r0, [pc, #76]	; (8000b24 <MX_GPIO_Init+0x154>)
 8000ad6:	f000 fd87 	bl	80015e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PLUG_Pin;
 8000ada:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ade:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PLUG_GPIO_Port, &GPIO_InitStruct);
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	4619      	mov	r1, r3
 8000aee:	480d      	ldr	r0, [pc, #52]	; (8000b24 <MX_GPIO_Init+0x154>)
 8000af0:	f000 fd7a 	bl	80015e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = A1_Pin|A0_Pin|A2_Pin;
 8000af4:	2307      	movs	r3, #7
 8000af6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af8:	2301      	movs	r3, #1
 8000afa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b00:	2300      	movs	r3, #0
 8000b02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4805      	ldr	r0, [pc, #20]	; (8000b20 <MX_GPIO_Init+0x150>)
 8000b0c:	f000 fd6c 	bl	80015e8 <HAL_GPIO_Init>

}
 8000b10:	bf00      	nop
 8000b12:	3728      	adds	r7, #40	; 0x28
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	40020000 	.word	0x40020000
 8000b20:	40020c00 	.word	0x40020c00
 8000b24:	40020800 	.word	0x40020800

08000b28 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b2c:	4b13      	ldr	r3, [pc, #76]	; (8000b7c <MX_I2C1_Init+0x54>)
 8000b2e:	4a14      	ldr	r2, [pc, #80]	; (8000b80 <MX_I2C1_Init+0x58>)
 8000b30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 35000;
 8000b32:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <MX_I2C1_Init+0x54>)
 8000b34:	f648 02b8 	movw	r2, #35000	; 0x88b8
 8000b38:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b3a:	4b10      	ldr	r3, [pc, #64]	; (8000b7c <MX_I2C1_Init+0x54>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b40:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <MX_I2C1_Init+0x54>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b46:	4b0d      	ldr	r3, [pc, #52]	; (8000b7c <MX_I2C1_Init+0x54>)
 8000b48:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b4c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <MX_I2C1_Init+0x54>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b54:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <MX_I2C1_Init+0x54>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b5a:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <MX_I2C1_Init+0x54>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b60:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <MX_I2C1_Init+0x54>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b66:	4805      	ldr	r0, [pc, #20]	; (8000b7c <MX_I2C1_Init+0x54>)
 8000b68:	f000 ff0c 	bl	8001984 <HAL_I2C_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8000b72:	f000 f977 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20004328 	.word	0x20004328
 8000b80:	40005400 	.word	0x40005400

08000b84 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000b88:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <MX_I2C3_Init+0x50>)
 8000b8a:	4a13      	ldr	r2, [pc, #76]	; (8000bd8 <MX_I2C3_Init+0x54>)
 8000b8c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000b8e:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <MX_I2C3_Init+0x50>)
 8000b90:	4a12      	ldr	r2, [pc, #72]	; (8000bdc <MX_I2C3_Init+0x58>)
 8000b92:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b94:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <MX_I2C3_Init+0x50>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <MX_I2C3_Init+0x50>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <MX_I2C3_Init+0x50>)
 8000ba2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ba6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ba8:	4b0a      	ldr	r3, [pc, #40]	; (8000bd4 <MX_I2C3_Init+0x50>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000bae:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <MX_I2C3_Init+0x50>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bb4:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <MX_I2C3_Init+0x50>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bba:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <MX_I2C3_Init+0x50>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000bc0:	4804      	ldr	r0, [pc, #16]	; (8000bd4 <MX_I2C3_Init+0x50>)
 8000bc2:	f000 fedf 	bl	8001984 <HAL_I2C_Init>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000bcc:	f000 f94a 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	200042d4 	.word	0x200042d4
 8000bd8:	40005c00 	.word	0x40005c00
 8000bdc:	000186a0 	.word	0x000186a0

08000be0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08c      	sub	sp, #48	; 0x30
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be8:	f107 031c 	add.w	r3, r7, #28
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
 8000bf6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a4a      	ldr	r2, [pc, #296]	; (8000d28 <HAL_I2C_MspInit+0x148>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d12c      	bne.n	8000c5c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	61bb      	str	r3, [r7, #24]
 8000c06:	4b49      	ldr	r3, [pc, #292]	; (8000d2c <HAL_I2C_MspInit+0x14c>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a48      	ldr	r2, [pc, #288]	; (8000d2c <HAL_I2C_MspInit+0x14c>)
 8000c0c:	f043 0302 	orr.w	r3, r3, #2
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b46      	ldr	r3, [pc, #280]	; (8000d2c <HAL_I2C_MspInit+0x14c>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0302 	and.w	r3, r3, #2
 8000c1a:	61bb      	str	r3, [r7, #24]
 8000c1c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c1e:	23c0      	movs	r3, #192	; 0xc0
 8000c20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c22:	2312      	movs	r3, #18
 8000c24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c2e:	2304      	movs	r3, #4
 8000c30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c32:	f107 031c 	add.w	r3, r7, #28
 8000c36:	4619      	mov	r1, r3
 8000c38:	483d      	ldr	r0, [pc, #244]	; (8000d30 <HAL_I2C_MspInit+0x150>)
 8000c3a:	f000 fcd5 	bl	80015e8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	617b      	str	r3, [r7, #20]
 8000c42:	4b3a      	ldr	r3, [pc, #232]	; (8000d2c <HAL_I2C_MspInit+0x14c>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	4a39      	ldr	r2, [pc, #228]	; (8000d2c <HAL_I2C_MspInit+0x14c>)
 8000c48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c4e:	4b37      	ldr	r3, [pc, #220]	; (8000d2c <HAL_I2C_MspInit+0x14c>)
 8000c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c56:	617b      	str	r3, [r7, #20]
 8000c58:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000c5a:	e060      	b.n	8000d1e <HAL_I2C_MspInit+0x13e>
  else if(i2cHandle->Instance==I2C3)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a34      	ldr	r2, [pc, #208]	; (8000d34 <HAL_I2C_MspInit+0x154>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d15b      	bne.n	8000d1e <HAL_I2C_MspInit+0x13e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	613b      	str	r3, [r7, #16]
 8000c6a:	4b30      	ldr	r3, [pc, #192]	; (8000d2c <HAL_I2C_MspInit+0x14c>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a2f      	ldr	r2, [pc, #188]	; (8000d2c <HAL_I2C_MspInit+0x14c>)
 8000c70:	f043 0304 	orr.w	r3, r3, #4
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b2d      	ldr	r3, [pc, #180]	; (8000d2c <HAL_I2C_MspInit+0x14c>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f003 0304 	and.w	r3, r3, #4
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	4b29      	ldr	r3, [pc, #164]	; (8000d2c <HAL_I2C_MspInit+0x14c>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a28      	ldr	r2, [pc, #160]	; (8000d2c <HAL_I2C_MspInit+0x14c>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b26      	ldr	r3, [pc, #152]	; (8000d2c <HAL_I2C_MspInit+0x14c>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ca2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ca4:	2312      	movs	r3, #18
 8000ca6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cac:	2303      	movs	r3, #3
 8000cae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000cb0:	2304      	movs	r3, #4
 8000cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb4:	f107 031c 	add.w	r3, r7, #28
 8000cb8:	4619      	mov	r1, r3
 8000cba:	481f      	ldr	r0, [pc, #124]	; (8000d38 <HAL_I2C_MspInit+0x158>)
 8000cbc:	f000 fc94 	bl	80015e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000cc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cc6:	2312      	movs	r3, #18
 8000cc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000cd2:	2304      	movs	r3, #4
 8000cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd6:	f107 031c 	add.w	r3, r7, #28
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4817      	ldr	r0, [pc, #92]	; (8000d3c <HAL_I2C_MspInit+0x15c>)
 8000cde:	f000 fc83 	bl	80015e8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60bb      	str	r3, [r7, #8]
 8000ce6:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <HAL_I2C_MspInit+0x14c>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cea:	4a10      	ldr	r2, [pc, #64]	; (8000d2c <HAL_I2C_MspInit+0x14c>)
 8000cec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <HAL_I2C_MspInit+0x14c>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000cfa:	60bb      	str	r3, [r7, #8]
 8000cfc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 5, 0);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2105      	movs	r1, #5
 8000d02:	2048      	movs	r0, #72	; 0x48
 8000d04:	f000 fb9a 	bl	800143c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8000d08:	2048      	movs	r0, #72	; 0x48
 8000d0a:	f000 fbb3 	bl	8001474 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 5, 0);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2105      	movs	r1, #5
 8000d12:	2049      	movs	r0, #73	; 0x49
 8000d14:	f000 fb92 	bl	800143c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8000d18:	2049      	movs	r0, #73	; 0x49
 8000d1a:	f000 fbab 	bl	8001474 <HAL_NVIC_EnableIRQ>
}
 8000d1e:	bf00      	nop
 8000d20:	3730      	adds	r7, #48	; 0x30
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40005400 	.word	0x40005400
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40020400 	.word	0x40020400
 8000d34:	40005c00 	.word	0x40005c00
 8000d38:	40020800 	.word	0x40020800
 8000d3c:	40020000 	.word	0x40020000

08000d40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d44:	f000 fa80 	bl	8001248 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d48:	f000 f810 	bl	8000d6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d4c:	f7ff fe40 	bl	80009d0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d50:	f7ff feea 	bl	8000b28 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000d54:	f7ff ff16 	bl	8000b84 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 8000d58:	f000 f96a 	bl	8001030 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000d5c:	f000 f992 	bl	8001084 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000d60:	f7ff fbcc 	bl	80004fc <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000d64:	f005 fa4a 	bl	80061fc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d68:	e7fe      	b.n	8000d68 <main+0x28>
	...

08000d6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b094      	sub	sp, #80	; 0x50
 8000d70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d72:	f107 0320 	add.w	r3, r7, #32
 8000d76:	2230      	movs	r2, #48	; 0x30
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f006 fcc4 	bl	8007708 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d80:	f107 030c 	add.w	r3, r7, #12
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d90:	2300      	movs	r3, #0
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	4b28      	ldr	r3, [pc, #160]	; (8000e38 <SystemClock_Config+0xcc>)
 8000d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d98:	4a27      	ldr	r2, [pc, #156]	; (8000e38 <SystemClock_Config+0xcc>)
 8000d9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000da0:	4b25      	ldr	r3, [pc, #148]	; (8000e38 <SystemClock_Config+0xcc>)
 8000da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da8:	60bb      	str	r3, [r7, #8]
 8000daa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dac:	2300      	movs	r3, #0
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	4b22      	ldr	r3, [pc, #136]	; (8000e3c <SystemClock_Config+0xd0>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a21      	ldr	r2, [pc, #132]	; (8000e3c <SystemClock_Config+0xd0>)
 8000db6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dba:	6013      	str	r3, [r2, #0]
 8000dbc:	4b1f      	ldr	r3, [pc, #124]	; (8000e3c <SystemClock_Config+0xd0>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dc4:	607b      	str	r3, [r7, #4]
 8000dc6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dd0:	2310      	movs	r3, #16
 8000dd2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ddc:	2308      	movs	r3, #8
 8000dde:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000de0:	23a8      	movs	r3, #168	; 0xa8
 8000de2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000de4:	2302      	movs	r3, #2
 8000de6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000de8:	2304      	movs	r3, #4
 8000dea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dec:	f107 0320 	add.w	r3, r7, #32
 8000df0:	4618      	mov	r0, r3
 8000df2:	f003 fa2d 	bl	8004250 <HAL_RCC_OscConfig>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000dfc:	f000 f832 	bl	8000e64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e00:	230f      	movs	r3, #15
 8000e02:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e04:	2302      	movs	r3, #2
 8000e06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e0c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e10:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e16:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e18:	f107 030c 	add.w	r3, r7, #12
 8000e1c:	2105      	movs	r1, #5
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f003 fc8e 	bl	8004740 <HAL_RCC_ClockConfig>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000e2a:	f000 f81b 	bl	8000e64 <Error_Handler>
  }
}
 8000e2e:	bf00      	nop
 8000e30:	3750      	adds	r7, #80	; 0x50
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40007000 	.word	0x40007000

08000e40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a04      	ldr	r2, [pc, #16]	; (8000e60 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d101      	bne.n	8000e56 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e52:	f000 fa1b 	bl	800128c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40001400 	.word	0x40001400

08000e64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e68:	b672      	cpsid	i
}
 8000e6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e6c:	e7fe      	b.n	8000e6c <Error_Handler+0x8>
	...

08000e70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	607b      	str	r3, [r7, #4]
 8000e7a:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <HAL_MspInit+0x54>)
 8000e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7e:	4a11      	ldr	r2, [pc, #68]	; (8000ec4 <HAL_MspInit+0x54>)
 8000e80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e84:	6453      	str	r3, [r2, #68]	; 0x44
 8000e86:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <HAL_MspInit+0x54>)
 8000e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e8e:	607b      	str	r3, [r7, #4]
 8000e90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	603b      	str	r3, [r7, #0]
 8000e96:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <HAL_MspInit+0x54>)
 8000e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ec4 <HAL_MspInit+0x54>)
 8000e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ea2:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <HAL_MspInit+0x54>)
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eaa:	603b      	str	r3, [r7, #0]
 8000eac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	210f      	movs	r1, #15
 8000eb2:	f06f 0001 	mvn.w	r0, #1
 8000eb6:	f000 fac1 	bl	800143c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40023800 	.word	0x40023800

08000ec8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08c      	sub	sp, #48	; 0x30
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	6879      	ldr	r1, [r7, #4]
 8000edc:	2037      	movs	r0, #55	; 0x37
 8000ede:	f000 faad 	bl	800143c <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000ee2:	2037      	movs	r0, #55	; 0x37
 8000ee4:	f000 fac6 	bl	8001474 <HAL_NVIC_EnableIRQ>

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000ee8:	2300      	movs	r3, #0
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	4b1f      	ldr	r3, [pc, #124]	; (8000f6c <HAL_InitTick+0xa4>)
 8000eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef0:	4a1e      	ldr	r2, [pc, #120]	; (8000f6c <HAL_InitTick+0xa4>)
 8000ef2:	f043 0320 	orr.w	r3, r3, #32
 8000ef6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef8:	4b1c      	ldr	r3, [pc, #112]	; (8000f6c <HAL_InitTick+0xa4>)
 8000efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efc:	f003 0320 	and.w	r3, r3, #32
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f04:	f107 0210 	add.w	r2, r7, #16
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	4611      	mov	r1, r2
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f003 fe12 	bl	8004b38 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000f14:	f003 fde8 	bl	8004ae8 <HAL_RCC_GetPCLK1Freq>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f20:	4a13      	ldr	r2, [pc, #76]	; (8000f70 <HAL_InitTick+0xa8>)
 8000f22:	fba2 2303 	umull	r2, r3, r2, r3
 8000f26:	0c9b      	lsrs	r3, r3, #18
 8000f28:	3b01      	subs	r3, #1
 8000f2a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000f2c:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <HAL_InitTick+0xac>)
 8000f2e:	4a12      	ldr	r2, [pc, #72]	; (8000f78 <HAL_InitTick+0xb0>)
 8000f30:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000f32:	4b10      	ldr	r3, [pc, #64]	; (8000f74 <HAL_InitTick+0xac>)
 8000f34:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f38:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000f3a:	4a0e      	ldr	r2, [pc, #56]	; (8000f74 <HAL_InitTick+0xac>)
 8000f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f3e:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000f40:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <HAL_InitTick+0xac>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f46:	4b0b      	ldr	r3, [pc, #44]	; (8000f74 <HAL_InitTick+0xac>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000f4c:	4809      	ldr	r0, [pc, #36]	; (8000f74 <HAL_InitTick+0xac>)
 8000f4e:	f003 fe25 	bl	8004b9c <HAL_TIM_Base_Init>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d104      	bne.n	8000f62 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000f58:	4806      	ldr	r0, [pc, #24]	; (8000f74 <HAL_InitTick+0xac>)
 8000f5a:	f003 fe79 	bl	8004c50 <HAL_TIM_Base_Start_IT>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	e000      	b.n	8000f64 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3730      	adds	r7, #48	; 0x30
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	431bde83 	.word	0x431bde83
 8000f74:	2000437c 	.word	0x2000437c
 8000f78:	40001400 	.word	0x40001400

08000f7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f80:	e7fe      	b.n	8000f80 <NMI_Handler+0x4>

08000f82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f86:	e7fe      	b.n	8000f86 <HardFault_Handler+0x4>

08000f88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f8c:	e7fe      	b.n	8000f8c <MemManage_Handler+0x4>

08000f8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f92:	e7fe      	b.n	8000f92 <BusFault_Handler+0x4>

08000f94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <UsageFault_Handler+0x4>

08000f9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000fac:	4802      	ldr	r0, [pc, #8]	; (8000fb8 <USART1_IRQHandler+0x10>)
 8000fae:	f004 fa55 	bl	800545c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	200043c4 	.word	0x200043c4

08000fbc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000fc0:	4802      	ldr	r0, [pc, #8]	; (8000fcc <TIM7_IRQHandler+0x10>)
 8000fc2:	f003 feb5 	bl	8004d30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	2000437c 	.word	0x2000437c

08000fd0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000fd4:	4802      	ldr	r0, [pc, #8]	; (8000fe0 <USART6_IRQHandler+0x10>)
 8000fd6:	f004 fa41 	bl	800545c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20004408 	.word	0x20004408

08000fe4 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8000fe8:	4802      	ldr	r0, [pc, #8]	; (8000ff4 <I2C3_EV_IRQHandler+0x10>)
 8000fea:	f001 f933 	bl	8002254 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200042d4 	.word	0x200042d4

08000ff8 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8000ffc:	4802      	ldr	r0, [pc, #8]	; (8001008 <I2C3_ER_IRQHandler+0x10>)
 8000ffe:	f001 fa9a 	bl	8002536 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	200042d4 	.word	0x200042d4

0800100c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <SystemInit+0x20>)
 8001012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001016:	4a05      	ldr	r2, [pc, #20]	; (800102c <SystemInit+0x20>)
 8001018:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800101c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001034:	4b11      	ldr	r3, [pc, #68]	; (800107c <MX_USART1_UART_Init+0x4c>)
 8001036:	4a12      	ldr	r2, [pc, #72]	; (8001080 <MX_USART1_UART_Init+0x50>)
 8001038:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800103a:	4b10      	ldr	r3, [pc, #64]	; (800107c <MX_USART1_UART_Init+0x4c>)
 800103c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001040:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001042:	4b0e      	ldr	r3, [pc, #56]	; (800107c <MX_USART1_UART_Init+0x4c>)
 8001044:	2200      	movs	r2, #0
 8001046:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001048:	4b0c      	ldr	r3, [pc, #48]	; (800107c <MX_USART1_UART_Init+0x4c>)
 800104a:	2200      	movs	r2, #0
 800104c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800104e:	4b0b      	ldr	r3, [pc, #44]	; (800107c <MX_USART1_UART_Init+0x4c>)
 8001050:	2200      	movs	r2, #0
 8001052:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001054:	4b09      	ldr	r3, [pc, #36]	; (800107c <MX_USART1_UART_Init+0x4c>)
 8001056:	220c      	movs	r2, #12
 8001058:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800105a:	4b08      	ldr	r3, [pc, #32]	; (800107c <MX_USART1_UART_Init+0x4c>)
 800105c:	2200      	movs	r2, #0
 800105e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001060:	4b06      	ldr	r3, [pc, #24]	; (800107c <MX_USART1_UART_Init+0x4c>)
 8001062:	2200      	movs	r2, #0
 8001064:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001066:	4805      	ldr	r0, [pc, #20]	; (800107c <MX_USART1_UART_Init+0x4c>)
 8001068:	f004 f846 	bl	80050f8 <HAL_UART_Init>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001072:	f7ff fef7 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	200043c4 	.word	0x200043c4
 8001080:	40011000 	.word	0x40011000

08001084 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001088:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <MX_USART6_UART_Init+0x4c>)
 800108a:	4a12      	ldr	r2, [pc, #72]	; (80010d4 <MX_USART6_UART_Init+0x50>)
 800108c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800108e:	4b10      	ldr	r3, [pc, #64]	; (80010d0 <MX_USART6_UART_Init+0x4c>)
 8001090:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001094:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001096:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <MX_USART6_UART_Init+0x4c>)
 8001098:	2200      	movs	r2, #0
 800109a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800109c:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <MX_USART6_UART_Init+0x4c>)
 800109e:	2200      	movs	r2, #0
 80010a0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80010a2:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <MX_USART6_UART_Init+0x4c>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80010a8:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <MX_USART6_UART_Init+0x4c>)
 80010aa:	220c      	movs	r2, #12
 80010ac:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ae:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <MX_USART6_UART_Init+0x4c>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80010b4:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <MX_USART6_UART_Init+0x4c>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80010ba:	4805      	ldr	r0, [pc, #20]	; (80010d0 <MX_USART6_UART_Init+0x4c>)
 80010bc:	f004 f81c 	bl	80050f8 <HAL_UART_Init>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80010c6:	f7ff fecd 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20004408 	.word	0x20004408
 80010d4:	40011400 	.word	0x40011400

080010d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08c      	sub	sp, #48	; 0x30
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e0:	f107 031c 	add.w	r3, r7, #28
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a3a      	ldr	r2, [pc, #232]	; (80011e0 <HAL_UART_MspInit+0x108>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d135      	bne.n	8001166 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	61bb      	str	r3, [r7, #24]
 80010fe:	4b39      	ldr	r3, [pc, #228]	; (80011e4 <HAL_UART_MspInit+0x10c>)
 8001100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001102:	4a38      	ldr	r2, [pc, #224]	; (80011e4 <HAL_UART_MspInit+0x10c>)
 8001104:	f043 0310 	orr.w	r3, r3, #16
 8001108:	6453      	str	r3, [r2, #68]	; 0x44
 800110a:	4b36      	ldr	r3, [pc, #216]	; (80011e4 <HAL_UART_MspInit+0x10c>)
 800110c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110e:	f003 0310 	and.w	r3, r3, #16
 8001112:	61bb      	str	r3, [r7, #24]
 8001114:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
 800111a:	4b32      	ldr	r3, [pc, #200]	; (80011e4 <HAL_UART_MspInit+0x10c>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a31      	ldr	r2, [pc, #196]	; (80011e4 <HAL_UART_MspInit+0x10c>)
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b2f      	ldr	r3, [pc, #188]	; (80011e4 <HAL_UART_MspInit+0x10c>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	617b      	str	r3, [r7, #20]
 8001130:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001132:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001136:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001138:	2302      	movs	r3, #2
 800113a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001140:	2303      	movs	r3, #3
 8001142:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001144:	2307      	movs	r3, #7
 8001146:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001148:	f107 031c 	add.w	r3, r7, #28
 800114c:	4619      	mov	r1, r3
 800114e:	4826      	ldr	r0, [pc, #152]	; (80011e8 <HAL_UART_MspInit+0x110>)
 8001150:	f000 fa4a 	bl	80015e8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001154:	2200      	movs	r2, #0
 8001156:	2105      	movs	r1, #5
 8001158:	2025      	movs	r0, #37	; 0x25
 800115a:	f000 f96f 	bl	800143c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800115e:	2025      	movs	r0, #37	; 0x25
 8001160:	f000 f988 	bl	8001474 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001164:	e038      	b.n	80011d8 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART6)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a20      	ldr	r2, [pc, #128]	; (80011ec <HAL_UART_MspInit+0x114>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d133      	bne.n	80011d8 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001170:	2300      	movs	r3, #0
 8001172:	613b      	str	r3, [r7, #16]
 8001174:	4b1b      	ldr	r3, [pc, #108]	; (80011e4 <HAL_UART_MspInit+0x10c>)
 8001176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001178:	4a1a      	ldr	r2, [pc, #104]	; (80011e4 <HAL_UART_MspInit+0x10c>)
 800117a:	f043 0320 	orr.w	r3, r3, #32
 800117e:	6453      	str	r3, [r2, #68]	; 0x44
 8001180:	4b18      	ldr	r3, [pc, #96]	; (80011e4 <HAL_UART_MspInit+0x10c>)
 8001182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001184:	f003 0320 	and.w	r3, r3, #32
 8001188:	613b      	str	r3, [r7, #16]
 800118a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800118c:	2300      	movs	r3, #0
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <HAL_UART_MspInit+0x10c>)
 8001192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001194:	4a13      	ldr	r2, [pc, #76]	; (80011e4 <HAL_UART_MspInit+0x10c>)
 8001196:	f043 0304 	orr.w	r3, r3, #4
 800119a:	6313      	str	r3, [r2, #48]	; 0x30
 800119c:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <HAL_UART_MspInit+0x10c>)
 800119e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a0:	f003 0304 	and.w	r3, r3, #4
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011a8:	23c0      	movs	r3, #192	; 0xc0
 80011aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ac:	2302      	movs	r3, #2
 80011ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b4:	2303      	movs	r3, #3
 80011b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80011b8:	2308      	movs	r3, #8
 80011ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011bc:	f107 031c 	add.w	r3, r7, #28
 80011c0:	4619      	mov	r1, r3
 80011c2:	480b      	ldr	r0, [pc, #44]	; (80011f0 <HAL_UART_MspInit+0x118>)
 80011c4:	f000 fa10 	bl	80015e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80011c8:	2200      	movs	r2, #0
 80011ca:	2105      	movs	r1, #5
 80011cc:	2047      	movs	r0, #71	; 0x47
 80011ce:	f000 f935 	bl	800143c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80011d2:	2047      	movs	r0, #71	; 0x47
 80011d4:	f000 f94e 	bl	8001474 <HAL_NVIC_EnableIRQ>
}
 80011d8:	bf00      	nop
 80011da:	3730      	adds	r7, #48	; 0x30
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40011000 	.word	0x40011000
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40020000 	.word	0x40020000
 80011ec:	40011400 	.word	0x40011400
 80011f0:	40020800 	.word	0x40020800

080011f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800122c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011f8:	480d      	ldr	r0, [pc, #52]	; (8001230 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011fa:	490e      	ldr	r1, [pc, #56]	; (8001234 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011fc:	4a0e      	ldr	r2, [pc, #56]	; (8001238 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001200:	e002      	b.n	8001208 <LoopCopyDataInit>

08001202 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001202:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001204:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001206:	3304      	adds	r3, #4

08001208 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001208:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800120a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800120c:	d3f9      	bcc.n	8001202 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800120e:	4a0b      	ldr	r2, [pc, #44]	; (800123c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001210:	4c0b      	ldr	r4, [pc, #44]	; (8001240 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001212:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001214:	e001      	b.n	800121a <LoopFillZerobss>

08001216 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001216:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001218:	3204      	adds	r2, #4

0800121a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800121a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800121c:	d3fb      	bcc.n	8001216 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800121e:	f7ff fef5 	bl	800100c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001222:	f006 fa4b 	bl	80076bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001226:	f7ff fd8b 	bl	8000d40 <main>
  bx  lr    
 800122a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800122c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001230:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001234:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001238:	080079d4 	.word	0x080079d4
  ldr r2, =_sbss
 800123c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001240:	2000445c 	.word	0x2000445c

08001244 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001244:	e7fe      	b.n	8001244 <ADC_IRQHandler>
	...

08001248 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800124c:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <HAL_Init+0x40>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a0d      	ldr	r2, [pc, #52]	; (8001288 <HAL_Init+0x40>)
 8001252:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001256:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001258:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <HAL_Init+0x40>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a0a      	ldr	r2, [pc, #40]	; (8001288 <HAL_Init+0x40>)
 800125e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001262:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001264:	4b08      	ldr	r3, [pc, #32]	; (8001288 <HAL_Init+0x40>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a07      	ldr	r2, [pc, #28]	; (8001288 <HAL_Init+0x40>)
 800126a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800126e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001270:	2003      	movs	r0, #3
 8001272:	f000 f8d8 	bl	8001426 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001276:	200f      	movs	r0, #15
 8001278:	f7ff fe26 	bl	8000ec8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800127c:	f7ff fdf8 	bl	8000e70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40023c00 	.word	0x40023c00

0800128c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001290:	4b06      	ldr	r3, [pc, #24]	; (80012ac <HAL_IncTick+0x20>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	461a      	mov	r2, r3
 8001296:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <HAL_IncTick+0x24>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4413      	add	r3, r2
 800129c:	4a04      	ldr	r2, [pc, #16]	; (80012b0 <HAL_IncTick+0x24>)
 800129e:	6013      	str	r3, [r2, #0]
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	20000008 	.word	0x20000008
 80012b0:	2000444c 	.word	0x2000444c

080012b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  return uwTick;
 80012b8:	4b03      	ldr	r3, [pc, #12]	; (80012c8 <HAL_GetTick+0x14>)
 80012ba:	681b      	ldr	r3, [r3, #0]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	2000444c 	.word	0x2000444c

080012cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012dc:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <__NVIC_SetPriorityGrouping+0x44>)
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012e2:	68ba      	ldr	r2, [r7, #8]
 80012e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012e8:	4013      	ands	r3, r2
 80012ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012fe:	4a04      	ldr	r2, [pc, #16]	; (8001310 <__NVIC_SetPriorityGrouping+0x44>)
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	60d3      	str	r3, [r2, #12]
}
 8001304:	bf00      	nop
 8001306:	3714      	adds	r7, #20
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001318:	4b04      	ldr	r3, [pc, #16]	; (800132c <__NVIC_GetPriorityGrouping+0x18>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	0a1b      	lsrs	r3, r3, #8
 800131e:	f003 0307 	and.w	r3, r3, #7
}
 8001322:	4618      	mov	r0, r3
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800133a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133e:	2b00      	cmp	r3, #0
 8001340:	db0b      	blt.n	800135a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	f003 021f 	and.w	r2, r3, #31
 8001348:	4907      	ldr	r1, [pc, #28]	; (8001368 <__NVIC_EnableIRQ+0x38>)
 800134a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134e:	095b      	lsrs	r3, r3, #5
 8001350:	2001      	movs	r0, #1
 8001352:	fa00 f202 	lsl.w	r2, r0, r2
 8001356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800135a:	bf00      	nop
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	e000e100 	.word	0xe000e100

0800136c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	6039      	str	r1, [r7, #0]
 8001376:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137c:	2b00      	cmp	r3, #0
 800137e:	db0a      	blt.n	8001396 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	b2da      	uxtb	r2, r3
 8001384:	490c      	ldr	r1, [pc, #48]	; (80013b8 <__NVIC_SetPriority+0x4c>)
 8001386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138a:	0112      	lsls	r2, r2, #4
 800138c:	b2d2      	uxtb	r2, r2
 800138e:	440b      	add	r3, r1
 8001390:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001394:	e00a      	b.n	80013ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	b2da      	uxtb	r2, r3
 800139a:	4908      	ldr	r1, [pc, #32]	; (80013bc <__NVIC_SetPriority+0x50>)
 800139c:	79fb      	ldrb	r3, [r7, #7]
 800139e:	f003 030f 	and.w	r3, r3, #15
 80013a2:	3b04      	subs	r3, #4
 80013a4:	0112      	lsls	r2, r2, #4
 80013a6:	b2d2      	uxtb	r2, r2
 80013a8:	440b      	add	r3, r1
 80013aa:	761a      	strb	r2, [r3, #24]
}
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	e000e100 	.word	0xe000e100
 80013bc:	e000ed00 	.word	0xe000ed00

080013c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b089      	sub	sp, #36	; 0x24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	f003 0307 	and.w	r3, r3, #7
 80013d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	f1c3 0307 	rsb	r3, r3, #7
 80013da:	2b04      	cmp	r3, #4
 80013dc:	bf28      	it	cs
 80013de:	2304      	movcs	r3, #4
 80013e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	3304      	adds	r3, #4
 80013e6:	2b06      	cmp	r3, #6
 80013e8:	d902      	bls.n	80013f0 <NVIC_EncodePriority+0x30>
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	3b03      	subs	r3, #3
 80013ee:	e000      	b.n	80013f2 <NVIC_EncodePriority+0x32>
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f4:	f04f 32ff 	mov.w	r2, #4294967295
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	43da      	mvns	r2, r3
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	401a      	ands	r2, r3
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001408:	f04f 31ff 	mov.w	r1, #4294967295
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	fa01 f303 	lsl.w	r3, r1, r3
 8001412:	43d9      	mvns	r1, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001418:	4313      	orrs	r3, r2
         );
}
 800141a:	4618      	mov	r0, r3
 800141c:	3724      	adds	r7, #36	; 0x24
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr

08001426 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b082      	sub	sp, #8
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f7ff ff4c 	bl	80012cc <__NVIC_SetPriorityGrouping>
}
 8001434:	bf00      	nop
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
 8001448:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800144a:	2300      	movs	r3, #0
 800144c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800144e:	f7ff ff61 	bl	8001314 <__NVIC_GetPriorityGrouping>
 8001452:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	68b9      	ldr	r1, [r7, #8]
 8001458:	6978      	ldr	r0, [r7, #20]
 800145a:	f7ff ffb1 	bl	80013c0 <NVIC_EncodePriority>
 800145e:	4602      	mov	r2, r0
 8001460:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001464:	4611      	mov	r1, r2
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff ff80 	bl	800136c <__NVIC_SetPriority>
}
 800146c:	bf00      	nop
 800146e:	3718      	adds	r7, #24
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800147e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff ff54 	bl	8001330 <__NVIC_EnableIRQ>
}
 8001488:	bf00      	nop
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800149c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800149e:	f7ff ff09 	bl	80012b4 <HAL_GetTick>
 80014a2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d008      	beq.n	80014c2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2280      	movs	r2, #128	; 0x80
 80014b4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e052      	b.n	8001568 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f022 0216 	bic.w	r2, r2, #22
 80014d0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	695a      	ldr	r2, [r3, #20]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014e0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d103      	bne.n	80014f2 <HAL_DMA_Abort+0x62>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d007      	beq.n	8001502 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f022 0208 	bic.w	r2, r2, #8
 8001500:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f022 0201 	bic.w	r2, r2, #1
 8001510:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001512:	e013      	b.n	800153c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001514:	f7ff fece 	bl	80012b4 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	2b05      	cmp	r3, #5
 8001520:	d90c      	bls.n	800153c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2220      	movs	r2, #32
 8001526:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2203      	movs	r2, #3
 800152c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e015      	b.n	8001568 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	2b00      	cmp	r3, #0
 8001548:	d1e4      	bne.n	8001514 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800154e:	223f      	movs	r2, #63	; 0x3f
 8001550:	409a      	lsls	r2, r3
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2201      	movs	r2, #1
 800155a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001566:	2300      	movs	r3, #0
}
 8001568:	4618      	mov	r0, r3
 800156a:	3710      	adds	r7, #16
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800157e:	b2db      	uxtb	r3, r3
 8001580:	2b02      	cmp	r3, #2
 8001582:	d004      	beq.n	800158e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2280      	movs	r2, #128	; 0x80
 8001588:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e00c      	b.n	80015a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2205      	movs	r2, #5
 8001592:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f022 0201 	bic.w	r2, r2, #1
 80015a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015a6:	2300      	movs	r3, #0
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015c2:	b2db      	uxtb	r3, r3
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80015dc:	4618      	mov	r0, r3
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b089      	sub	sp, #36	; 0x24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015f2:	2300      	movs	r3, #0
 80015f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015f6:	2300      	movs	r3, #0
 80015f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015fa:	2300      	movs	r3, #0
 80015fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015fe:	2300      	movs	r3, #0
 8001600:	61fb      	str	r3, [r7, #28]
 8001602:	e16b      	b.n	80018dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001604:	2201      	movs	r2, #1
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	697a      	ldr	r2, [r7, #20]
 8001614:	4013      	ands	r3, r2
 8001616:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001618:	693a      	ldr	r2, [r7, #16]
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	429a      	cmp	r2, r3
 800161e:	f040 815a 	bne.w	80018d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f003 0303 	and.w	r3, r3, #3
 800162a:	2b01      	cmp	r3, #1
 800162c:	d005      	beq.n	800163a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001636:	2b02      	cmp	r3, #2
 8001638:	d130      	bne.n	800169c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	2203      	movs	r2, #3
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	43db      	mvns	r3, r3
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	4013      	ands	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	68da      	ldr	r2, [r3, #12]
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	4313      	orrs	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001670:	2201      	movs	r2, #1
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	43db      	mvns	r3, r3
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	4013      	ands	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	091b      	lsrs	r3, r3, #4
 8001686:	f003 0201 	and.w	r2, r3, #1
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	4313      	orrs	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f003 0303 	and.w	r3, r3, #3
 80016a4:	2b03      	cmp	r3, #3
 80016a6:	d017      	beq.n	80016d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	2203      	movs	r2, #3
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	43db      	mvns	r3, r3
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	4013      	ands	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	689a      	ldr	r2, [r3, #8]
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f003 0303 	and.w	r3, r3, #3
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d123      	bne.n	800172c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	08da      	lsrs	r2, r3, #3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3208      	adds	r2, #8
 80016ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	f003 0307 	and.w	r3, r3, #7
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	220f      	movs	r2, #15
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	43db      	mvns	r3, r3
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	4013      	ands	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	691a      	ldr	r2, [r3, #16]
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	f003 0307 	and.w	r3, r3, #7
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	4313      	orrs	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	08da      	lsrs	r2, r3, #3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	3208      	adds	r2, #8
 8001726:	69b9      	ldr	r1, [r7, #24]
 8001728:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	2203      	movs	r2, #3
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	43db      	mvns	r3, r3
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	4013      	ands	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f003 0203 	and.w	r2, r3, #3
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	4313      	orrs	r3, r2
 8001758:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001768:	2b00      	cmp	r3, #0
 800176a:	f000 80b4 	beq.w	80018d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	4b60      	ldr	r3, [pc, #384]	; (80018f4 <HAL_GPIO_Init+0x30c>)
 8001774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001776:	4a5f      	ldr	r2, [pc, #380]	; (80018f4 <HAL_GPIO_Init+0x30c>)
 8001778:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800177c:	6453      	str	r3, [r2, #68]	; 0x44
 800177e:	4b5d      	ldr	r3, [pc, #372]	; (80018f4 <HAL_GPIO_Init+0x30c>)
 8001780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001782:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800178a:	4a5b      	ldr	r2, [pc, #364]	; (80018f8 <HAL_GPIO_Init+0x310>)
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	089b      	lsrs	r3, r3, #2
 8001790:	3302      	adds	r3, #2
 8001792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001796:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	f003 0303 	and.w	r3, r3, #3
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	220f      	movs	r2, #15
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	43db      	mvns	r3, r3
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	4013      	ands	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a52      	ldr	r2, [pc, #328]	; (80018fc <HAL_GPIO_Init+0x314>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d02b      	beq.n	800180e <HAL_GPIO_Init+0x226>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a51      	ldr	r2, [pc, #324]	; (8001900 <HAL_GPIO_Init+0x318>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d025      	beq.n	800180a <HAL_GPIO_Init+0x222>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a50      	ldr	r2, [pc, #320]	; (8001904 <HAL_GPIO_Init+0x31c>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d01f      	beq.n	8001806 <HAL_GPIO_Init+0x21e>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a4f      	ldr	r2, [pc, #316]	; (8001908 <HAL_GPIO_Init+0x320>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d019      	beq.n	8001802 <HAL_GPIO_Init+0x21a>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a4e      	ldr	r2, [pc, #312]	; (800190c <HAL_GPIO_Init+0x324>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d013      	beq.n	80017fe <HAL_GPIO_Init+0x216>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a4d      	ldr	r2, [pc, #308]	; (8001910 <HAL_GPIO_Init+0x328>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d00d      	beq.n	80017fa <HAL_GPIO_Init+0x212>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a4c      	ldr	r2, [pc, #304]	; (8001914 <HAL_GPIO_Init+0x32c>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d007      	beq.n	80017f6 <HAL_GPIO_Init+0x20e>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a4b      	ldr	r2, [pc, #300]	; (8001918 <HAL_GPIO_Init+0x330>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d101      	bne.n	80017f2 <HAL_GPIO_Init+0x20a>
 80017ee:	2307      	movs	r3, #7
 80017f0:	e00e      	b.n	8001810 <HAL_GPIO_Init+0x228>
 80017f2:	2308      	movs	r3, #8
 80017f4:	e00c      	b.n	8001810 <HAL_GPIO_Init+0x228>
 80017f6:	2306      	movs	r3, #6
 80017f8:	e00a      	b.n	8001810 <HAL_GPIO_Init+0x228>
 80017fa:	2305      	movs	r3, #5
 80017fc:	e008      	b.n	8001810 <HAL_GPIO_Init+0x228>
 80017fe:	2304      	movs	r3, #4
 8001800:	e006      	b.n	8001810 <HAL_GPIO_Init+0x228>
 8001802:	2303      	movs	r3, #3
 8001804:	e004      	b.n	8001810 <HAL_GPIO_Init+0x228>
 8001806:	2302      	movs	r3, #2
 8001808:	e002      	b.n	8001810 <HAL_GPIO_Init+0x228>
 800180a:	2301      	movs	r3, #1
 800180c:	e000      	b.n	8001810 <HAL_GPIO_Init+0x228>
 800180e:	2300      	movs	r3, #0
 8001810:	69fa      	ldr	r2, [r7, #28]
 8001812:	f002 0203 	and.w	r2, r2, #3
 8001816:	0092      	lsls	r2, r2, #2
 8001818:	4093      	lsls	r3, r2
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	4313      	orrs	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001820:	4935      	ldr	r1, [pc, #212]	; (80018f8 <HAL_GPIO_Init+0x310>)
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	089b      	lsrs	r3, r3, #2
 8001826:	3302      	adds	r3, #2
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800182e:	4b3b      	ldr	r3, [pc, #236]	; (800191c <HAL_GPIO_Init+0x334>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	43db      	mvns	r3, r3
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	4013      	ands	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d003      	beq.n	8001852 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	4313      	orrs	r3, r2
 8001850:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001852:	4a32      	ldr	r2, [pc, #200]	; (800191c <HAL_GPIO_Init+0x334>)
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001858:	4b30      	ldr	r3, [pc, #192]	; (800191c <HAL_GPIO_Init+0x334>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	43db      	mvns	r3, r3
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	4013      	ands	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d003      	beq.n	800187c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	4313      	orrs	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800187c:	4a27      	ldr	r2, [pc, #156]	; (800191c <HAL_GPIO_Init+0x334>)
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001882:	4b26      	ldr	r3, [pc, #152]	; (800191c <HAL_GPIO_Init+0x334>)
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	43db      	mvns	r3, r3
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	4013      	ands	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d003      	beq.n	80018a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018a6:	4a1d      	ldr	r2, [pc, #116]	; (800191c <HAL_GPIO_Init+0x334>)
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018ac:	4b1b      	ldr	r3, [pc, #108]	; (800191c <HAL_GPIO_Init+0x334>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	43db      	mvns	r3, r3
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4013      	ands	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d003      	beq.n	80018d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018d0:	4a12      	ldr	r2, [pc, #72]	; (800191c <HAL_GPIO_Init+0x334>)
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	3301      	adds	r3, #1
 80018da:	61fb      	str	r3, [r7, #28]
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	2b0f      	cmp	r3, #15
 80018e0:	f67f ae90 	bls.w	8001604 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018e4:	bf00      	nop
 80018e6:	bf00      	nop
 80018e8:	3724      	adds	r7, #36	; 0x24
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	40023800 	.word	0x40023800
 80018f8:	40013800 	.word	0x40013800
 80018fc:	40020000 	.word	0x40020000
 8001900:	40020400 	.word	0x40020400
 8001904:	40020800 	.word	0x40020800
 8001908:	40020c00 	.word	0x40020c00
 800190c:	40021000 	.word	0x40021000
 8001910:	40021400 	.word	0x40021400
 8001914:	40021800 	.word	0x40021800
 8001918:	40021c00 	.word	0x40021c00
 800191c:	40013c00 	.word	0x40013c00

08001920 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	460b      	mov	r3, r1
 800192a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	691a      	ldr	r2, [r3, #16]
 8001930:	887b      	ldrh	r3, [r7, #2]
 8001932:	4013      	ands	r3, r2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d002      	beq.n	800193e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001938:	2301      	movs	r3, #1
 800193a:	73fb      	strb	r3, [r7, #15]
 800193c:	e001      	b.n	8001942 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800193e:	2300      	movs	r3, #0
 8001940:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001942:	7bfb      	ldrb	r3, [r7, #15]
}
 8001944:	4618      	mov	r0, r3
 8001946:	3714      	adds	r7, #20
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	460b      	mov	r3, r1
 800195a:	807b      	strh	r3, [r7, #2]
 800195c:	4613      	mov	r3, r2
 800195e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001960:	787b      	ldrb	r3, [r7, #1]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d003      	beq.n	800196e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001966:	887a      	ldrh	r2, [r7, #2]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800196c:	e003      	b.n	8001976 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800196e:	887b      	ldrh	r3, [r7, #2]
 8001970:	041a      	lsls	r2, r3, #16
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	619a      	str	r2, [r3, #24]
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
	...

08001984 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d101      	bne.n	8001996 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e12b      	b.n	8001bee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d106      	bne.n	80019b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f7ff f918 	bl	8000be0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2224      	movs	r2, #36	; 0x24
 80019b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f022 0201 	bic.w	r2, r2, #1
 80019c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80019d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80019e8:	f003 f87e 	bl	8004ae8 <HAL_RCC_GetPCLK1Freq>
 80019ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	4a81      	ldr	r2, [pc, #516]	; (8001bf8 <HAL_I2C_Init+0x274>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d807      	bhi.n	8001a08 <HAL_I2C_Init+0x84>
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	4a80      	ldr	r2, [pc, #512]	; (8001bfc <HAL_I2C_Init+0x278>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	bf94      	ite	ls
 8001a00:	2301      	movls	r3, #1
 8001a02:	2300      	movhi	r3, #0
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	e006      	b.n	8001a16 <HAL_I2C_Init+0x92>
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	4a7d      	ldr	r2, [pc, #500]	; (8001c00 <HAL_I2C_Init+0x27c>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	bf94      	ite	ls
 8001a10:	2301      	movls	r3, #1
 8001a12:	2300      	movhi	r3, #0
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e0e7      	b.n	8001bee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	4a78      	ldr	r2, [pc, #480]	; (8001c04 <HAL_I2C_Init+0x280>)
 8001a22:	fba2 2303 	umull	r2, r3, r2, r3
 8001a26:	0c9b      	lsrs	r3, r3, #18
 8001a28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	68ba      	ldr	r2, [r7, #8]
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	6a1b      	ldr	r3, [r3, #32]
 8001a44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	4a6a      	ldr	r2, [pc, #424]	; (8001bf8 <HAL_I2C_Init+0x274>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d802      	bhi.n	8001a58 <HAL_I2C_Init+0xd4>
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	3301      	adds	r3, #1
 8001a56:	e009      	b.n	8001a6c <HAL_I2C_Init+0xe8>
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a5e:	fb02 f303 	mul.w	r3, r2, r3
 8001a62:	4a69      	ldr	r2, [pc, #420]	; (8001c08 <HAL_I2C_Init+0x284>)
 8001a64:	fba2 2303 	umull	r2, r3, r2, r3
 8001a68:	099b      	lsrs	r3, r3, #6
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	6812      	ldr	r2, [r2, #0]
 8001a70:	430b      	orrs	r3, r1
 8001a72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	69db      	ldr	r3, [r3, #28]
 8001a7a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001a7e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	495c      	ldr	r1, [pc, #368]	; (8001bf8 <HAL_I2C_Init+0x274>)
 8001a88:	428b      	cmp	r3, r1
 8001a8a:	d819      	bhi.n	8001ac0 <HAL_I2C_Init+0x13c>
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	1e59      	subs	r1, r3, #1
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a9a:	1c59      	adds	r1, r3, #1
 8001a9c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001aa0:	400b      	ands	r3, r1
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d00a      	beq.n	8001abc <HAL_I2C_Init+0x138>
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	1e59      	subs	r1, r3, #1
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aba:	e051      	b.n	8001b60 <HAL_I2C_Init+0x1dc>
 8001abc:	2304      	movs	r3, #4
 8001abe:	e04f      	b.n	8001b60 <HAL_I2C_Init+0x1dc>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d111      	bne.n	8001aec <HAL_I2C_Init+0x168>
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	1e58      	subs	r0, r3, #1
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6859      	ldr	r1, [r3, #4]
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	440b      	add	r3, r1
 8001ad6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ada:	3301      	adds	r3, #1
 8001adc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	bf0c      	ite	eq
 8001ae4:	2301      	moveq	r3, #1
 8001ae6:	2300      	movne	r3, #0
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	e012      	b.n	8001b12 <HAL_I2C_Init+0x18e>
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	1e58      	subs	r0, r3, #1
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6859      	ldr	r1, [r3, #4]
 8001af4:	460b      	mov	r3, r1
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	440b      	add	r3, r1
 8001afa:	0099      	lsls	r1, r3, #2
 8001afc:	440b      	add	r3, r1
 8001afe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b02:	3301      	adds	r3, #1
 8001b04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	bf0c      	ite	eq
 8001b0c:	2301      	moveq	r3, #1
 8001b0e:	2300      	movne	r3, #0
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <HAL_I2C_Init+0x196>
 8001b16:	2301      	movs	r3, #1
 8001b18:	e022      	b.n	8001b60 <HAL_I2C_Init+0x1dc>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d10e      	bne.n	8001b40 <HAL_I2C_Init+0x1bc>
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	1e58      	subs	r0, r3, #1
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6859      	ldr	r1, [r3, #4]
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	440b      	add	r3, r1
 8001b30:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b34:	3301      	adds	r3, #1
 8001b36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b3e:	e00f      	b.n	8001b60 <HAL_I2C_Init+0x1dc>
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	1e58      	subs	r0, r3, #1
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6859      	ldr	r1, [r3, #4]
 8001b48:	460b      	mov	r3, r1
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	440b      	add	r3, r1
 8001b4e:	0099      	lsls	r1, r3, #2
 8001b50:	440b      	add	r3, r1
 8001b52:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b56:	3301      	adds	r3, #1
 8001b58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b60:	6879      	ldr	r1, [r7, #4]
 8001b62:	6809      	ldr	r1, [r1, #0]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	69da      	ldr	r2, [r3, #28]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a1b      	ldr	r3, [r3, #32]
 8001b7a:	431a      	orrs	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	430a      	orrs	r2, r1
 8001b82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001b8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	6911      	ldr	r1, [r2, #16]
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	68d2      	ldr	r2, [r2, #12]
 8001b9a:	4311      	orrs	r1, r2
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	6812      	ldr	r2, [r2, #0]
 8001ba0:	430b      	orrs	r3, r1
 8001ba2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	695a      	ldr	r2, [r3, #20]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	431a      	orrs	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f042 0201 	orr.w	r2, r2, #1
 8001bce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2220      	movs	r2, #32
 8001bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	000186a0 	.word	0x000186a0
 8001bfc:	001e847f 	.word	0x001e847f
 8001c00:	003d08ff 	.word	0x003d08ff
 8001c04:	431bde83 	.word	0x431bde83
 8001c08:	10624dd3 	.word	0x10624dd3

08001c0c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b088      	sub	sp, #32
 8001c10:	af02      	add	r7, sp, #8
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	607a      	str	r2, [r7, #4]
 8001c16:	461a      	mov	r2, r3
 8001c18:	460b      	mov	r3, r1
 8001c1a:	817b      	strh	r3, [r7, #10]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c20:	f7ff fb48 	bl	80012b4 <HAL_GetTick>
 8001c24:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b20      	cmp	r3, #32
 8001c30:	f040 80e0 	bne.w	8001df4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	9300      	str	r3, [sp, #0]
 8001c38:	2319      	movs	r3, #25
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	4970      	ldr	r1, [pc, #448]	; (8001e00 <HAL_I2C_Master_Transmit+0x1f4>)
 8001c3e:	68f8      	ldr	r0, [r7, #12]
 8001c40:	f002 f8dc 	bl	8003dfc <I2C_WaitOnFlagUntilTimeout>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	e0d3      	b.n	8001df6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d101      	bne.n	8001c5c <HAL_I2C_Master_Transmit+0x50>
 8001c58:	2302      	movs	r3, #2
 8001c5a:	e0cc      	b.n	8001df6 <HAL_I2C_Master_Transmit+0x1ea>
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d007      	beq.n	8001c82 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f042 0201 	orr.w	r2, r2, #1
 8001c80:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c90:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2221      	movs	r2, #33	; 0x21
 8001c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2210      	movs	r2, #16
 8001c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	893a      	ldrh	r2, [r7, #8]
 8001cb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	4a50      	ldr	r2, [pc, #320]	; (8001e04 <HAL_I2C_Master_Transmit+0x1f8>)
 8001cc2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001cc4:	8979      	ldrh	r1, [r7, #10]
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	6a3a      	ldr	r2, [r7, #32]
 8001cca:	68f8      	ldr	r0, [r7, #12]
 8001ccc:	f001 fe9e 	bl	8003a0c <I2C_MasterRequestWrite>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e08d      	b.n	8001df6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cda:	2300      	movs	r3, #0
 8001cdc:	613b      	str	r3, [r7, #16]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	695b      	ldr	r3, [r3, #20]
 8001ce4:	613b      	str	r3, [r7, #16]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	613b      	str	r3, [r7, #16]
 8001cee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001cf0:	e066      	b.n	8001dc0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cf2:	697a      	ldr	r2, [r7, #20]
 8001cf4:	6a39      	ldr	r1, [r7, #32]
 8001cf6:	68f8      	ldr	r0, [r7, #12]
 8001cf8:	f002 f956 	bl	8003fa8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d00d      	beq.n	8001d1e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	d107      	bne.n	8001d1a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d18:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e06b      	b.n	8001df6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d22:	781a      	ldrb	r2, [r3, #0]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2e:	1c5a      	adds	r2, r3, #1
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	b29a      	uxth	r2, r3
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d46:	3b01      	subs	r3, #1
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	695b      	ldr	r3, [r3, #20]
 8001d54:	f003 0304 	and.w	r3, r3, #4
 8001d58:	2b04      	cmp	r3, #4
 8001d5a:	d11b      	bne.n	8001d94 <HAL_I2C_Master_Transmit+0x188>
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d017      	beq.n	8001d94 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d68:	781a      	ldrb	r2, [r3, #0]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d74:	1c5a      	adds	r2, r3, #1
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	3b01      	subs	r3, #1
 8001d82:	b29a      	uxth	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d8c:	3b01      	subs	r3, #1
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d94:	697a      	ldr	r2, [r7, #20]
 8001d96:	6a39      	ldr	r1, [r7, #32]
 8001d98:	68f8      	ldr	r0, [r7, #12]
 8001d9a:	f002 f946 	bl	800402a <I2C_WaitOnBTFFlagUntilTimeout>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d00d      	beq.n	8001dc0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da8:	2b04      	cmp	r3, #4
 8001daa:	d107      	bne.n	8001dbc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e01a      	b.n	8001df6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d194      	bne.n	8001cf2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2220      	movs	r2, #32
 8001ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001df0:	2300      	movs	r3, #0
 8001df2:	e000      	b.n	8001df6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001df4:	2302      	movs	r3, #2
  }
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3718      	adds	r7, #24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	00100002 	.word	0x00100002
 8001e04:	ffff0000 	.word	0xffff0000

08001e08 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b08c      	sub	sp, #48	; 0x30
 8001e0c:	af02      	add	r7, sp, #8
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	607a      	str	r2, [r7, #4]
 8001e12:	461a      	mov	r2, r3
 8001e14:	460b      	mov	r3, r1
 8001e16:	817b      	strh	r3, [r7, #10]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e1c:	f7ff fa4a 	bl	80012b4 <HAL_GetTick>
 8001e20:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b20      	cmp	r3, #32
 8001e2c:	f040 820b 	bne.w	8002246 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e32:	9300      	str	r3, [sp, #0]
 8001e34:	2319      	movs	r3, #25
 8001e36:	2201      	movs	r2, #1
 8001e38:	497c      	ldr	r1, [pc, #496]	; (800202c <HAL_I2C_Master_Receive+0x224>)
 8001e3a:	68f8      	ldr	r0, [r7, #12]
 8001e3c:	f001 ffde 	bl	8003dfc <I2C_WaitOnFlagUntilTimeout>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001e46:	2302      	movs	r3, #2
 8001e48:	e1fe      	b.n	8002248 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d101      	bne.n	8001e58 <HAL_I2C_Master_Receive+0x50>
 8001e54:	2302      	movs	r3, #2
 8001e56:	e1f7      	b.n	8002248 <HAL_I2C_Master_Receive+0x440>
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d007      	beq.n	8001e7e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f042 0201 	orr.w	r2, r2, #1
 8001e7c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e8c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2222      	movs	r2, #34	; 0x22
 8001e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2210      	movs	r2, #16
 8001e9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	893a      	ldrh	r2, [r7, #8]
 8001eae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eb4:	b29a      	uxth	r2, r3
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	4a5c      	ldr	r2, [pc, #368]	; (8002030 <HAL_I2C_Master_Receive+0x228>)
 8001ebe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001ec0:	8979      	ldrh	r1, [r7, #10]
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ec6:	68f8      	ldr	r0, [r7, #12]
 8001ec8:	f001 fe22 	bl	8003b10 <I2C_MasterRequestRead>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e1b8      	b.n	8002248 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d113      	bne.n	8001f06 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ede:	2300      	movs	r3, #0
 8001ee0:	623b      	str	r3, [r7, #32]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	695b      	ldr	r3, [r3, #20]
 8001ee8:	623b      	str	r3, [r7, #32]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	623b      	str	r3, [r7, #32]
 8001ef2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	e18c      	b.n	8002220 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d11b      	bne.n	8001f46 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f1e:	2300      	movs	r3, #0
 8001f20:	61fb      	str	r3, [r7, #28]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	695b      	ldr	r3, [r3, #20]
 8001f28:	61fb      	str	r3, [r7, #28]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	61fb      	str	r3, [r7, #28]
 8001f32:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	e16c      	b.n	8002220 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d11b      	bne.n	8001f86 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f5c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f6e:	2300      	movs	r3, #0
 8001f70:	61bb      	str	r3, [r7, #24]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	695b      	ldr	r3, [r3, #20]
 8001f78:	61bb      	str	r3, [r7, #24]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	61bb      	str	r3, [r7, #24]
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	e14c      	b.n	8002220 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	695b      	ldr	r3, [r3, #20]
 8001fa0:	617b      	str	r3, [r7, #20]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	617b      	str	r3, [r7, #20]
 8001faa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001fac:	e138      	b.n	8002220 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fb2:	2b03      	cmp	r3, #3
 8001fb4:	f200 80f1 	bhi.w	800219a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d123      	bne.n	8002008 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fc2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001fc4:	68f8      	ldr	r0, [r7, #12]
 8001fc6:	f002 f8a3 	bl	8004110 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e139      	b.n	8002248 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	691a      	ldr	r2, [r3, #16]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fde:	b2d2      	uxtb	r2, r2
 8001fe0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe6:	1c5a      	adds	r2, r3, #1
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ff0:	3b01      	subs	r3, #1
 8001ff2:	b29a      	uxth	r2, r3
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	3b01      	subs	r3, #1
 8002000:	b29a      	uxth	r2, r3
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002006:	e10b      	b.n	8002220 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800200c:	2b02      	cmp	r3, #2
 800200e:	d14e      	bne.n	80020ae <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002012:	9300      	str	r3, [sp, #0]
 8002014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002016:	2200      	movs	r2, #0
 8002018:	4906      	ldr	r1, [pc, #24]	; (8002034 <HAL_I2C_Master_Receive+0x22c>)
 800201a:	68f8      	ldr	r0, [r7, #12]
 800201c:	f001 feee 	bl	8003dfc <I2C_WaitOnFlagUntilTimeout>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d008      	beq.n	8002038 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e10e      	b.n	8002248 <HAL_I2C_Master_Receive+0x440>
 800202a:	bf00      	nop
 800202c:	00100002 	.word	0x00100002
 8002030:	ffff0000 	.word	0xffff0000
 8002034:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002046:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	691a      	ldr	r2, [r3, #16]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002052:	b2d2      	uxtb	r2, r2
 8002054:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205a:	1c5a      	adds	r2, r3, #1
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002064:	3b01      	subs	r3, #1
 8002066:	b29a      	uxth	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002070:	b29b      	uxth	r3, r3
 8002072:	3b01      	subs	r3, #1
 8002074:	b29a      	uxth	r2, r3
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	691a      	ldr	r2, [r3, #16]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002084:	b2d2      	uxtb	r2, r2
 8002086:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208c:	1c5a      	adds	r2, r3, #1
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002096:	3b01      	subs	r3, #1
 8002098:	b29a      	uxth	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	3b01      	subs	r3, #1
 80020a6:	b29a      	uxth	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80020ac:	e0b8      	b.n	8002220 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	9300      	str	r3, [sp, #0]
 80020b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020b4:	2200      	movs	r2, #0
 80020b6:	4966      	ldr	r1, [pc, #408]	; (8002250 <HAL_I2C_Master_Receive+0x448>)
 80020b8:	68f8      	ldr	r0, [r7, #12]
 80020ba:	f001 fe9f 	bl	8003dfc <I2C_WaitOnFlagUntilTimeout>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e0bf      	b.n	8002248 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	691a      	ldr	r2, [r3, #16]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e2:	b2d2      	uxtb	r2, r2
 80020e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ea:	1c5a      	adds	r2, r3, #1
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f4:	3b01      	subs	r3, #1
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002100:	b29b      	uxth	r3, r3
 8002102:	3b01      	subs	r3, #1
 8002104:	b29a      	uxth	r2, r3
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800210a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210c:	9300      	str	r3, [sp, #0]
 800210e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002110:	2200      	movs	r2, #0
 8002112:	494f      	ldr	r1, [pc, #316]	; (8002250 <HAL_I2C_Master_Receive+0x448>)
 8002114:	68f8      	ldr	r0, [r7, #12]
 8002116:	f001 fe71 	bl	8003dfc <I2C_WaitOnFlagUntilTimeout>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e091      	b.n	8002248 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002132:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	691a      	ldr	r2, [r3, #16]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213e:	b2d2      	uxtb	r2, r2
 8002140:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002146:	1c5a      	adds	r2, r3, #1
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002150:	3b01      	subs	r3, #1
 8002152:	b29a      	uxth	r2, r3
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800215c:	b29b      	uxth	r3, r3
 800215e:	3b01      	subs	r3, #1
 8002160:	b29a      	uxth	r2, r3
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	691a      	ldr	r2, [r3, #16]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002170:	b2d2      	uxtb	r2, r2
 8002172:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002178:	1c5a      	adds	r2, r3, #1
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002182:	3b01      	subs	r3, #1
 8002184:	b29a      	uxth	r2, r3
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800218e:	b29b      	uxth	r3, r3
 8002190:	3b01      	subs	r3, #1
 8002192:	b29a      	uxth	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002198:	e042      	b.n	8002220 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800219a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800219c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800219e:	68f8      	ldr	r0, [r7, #12]
 80021a0:	f001 ffb6 	bl	8004110 <I2C_WaitOnRXNEFlagUntilTimeout>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e04c      	b.n	8002248 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	691a      	ldr	r2, [r3, #16]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b8:	b2d2      	uxtb	r2, r2
 80021ba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c0:	1c5a      	adds	r2, r3, #1
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ca:	3b01      	subs	r3, #1
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	3b01      	subs	r3, #1
 80021da:	b29a      	uxth	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	695b      	ldr	r3, [r3, #20]
 80021e6:	f003 0304 	and.w	r3, r3, #4
 80021ea:	2b04      	cmp	r3, #4
 80021ec:	d118      	bne.n	8002220 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	691a      	ldr	r2, [r3, #16]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f8:	b2d2      	uxtb	r2, r2
 80021fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002200:	1c5a      	adds	r2, r3, #1
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800220a:	3b01      	subs	r3, #1
 800220c:	b29a      	uxth	r2, r3
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002216:	b29b      	uxth	r3, r3
 8002218:	3b01      	subs	r3, #1
 800221a:	b29a      	uxth	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002224:	2b00      	cmp	r3, #0
 8002226:	f47f aec2 	bne.w	8001fae <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2220      	movs	r2, #32
 800222e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002242:	2300      	movs	r3, #0
 8002244:	e000      	b.n	8002248 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002246:	2302      	movs	r3, #2
  }
}
 8002248:	4618      	mov	r0, r3
 800224a:	3728      	adds	r7, #40	; 0x28
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	00010004 	.word	0x00010004

08002254 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b088      	sub	sp, #32
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800225c:	2300      	movs	r3, #0
 800225e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002274:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800227c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800227e:	7bfb      	ldrb	r3, [r7, #15]
 8002280:	2b10      	cmp	r3, #16
 8002282:	d003      	beq.n	800228c <HAL_I2C_EV_IRQHandler+0x38>
 8002284:	7bfb      	ldrb	r3, [r7, #15]
 8002286:	2b40      	cmp	r3, #64	; 0x40
 8002288:	f040 80c1 	bne.w	800240e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d10d      	bne.n	80022c2 <HAL_I2C_EV_IRQHandler+0x6e>
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80022ac:	d003      	beq.n	80022b6 <HAL_I2C_EV_IRQHandler+0x62>
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80022b4:	d101      	bne.n	80022ba <HAL_I2C_EV_IRQHandler+0x66>
 80022b6:	2301      	movs	r3, #1
 80022b8:	e000      	b.n	80022bc <HAL_I2C_EV_IRQHandler+0x68>
 80022ba:	2300      	movs	r3, #0
 80022bc:	2b01      	cmp	r3, #1
 80022be:	f000 8132 	beq.w	8002526 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d00c      	beq.n	80022e6 <HAL_I2C_EV_IRQHandler+0x92>
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	0a5b      	lsrs	r3, r3, #9
 80022d0:	f003 0301 	and.w	r3, r3, #1
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d006      	beq.n	80022e6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f001 ff9e 	bl	800421a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 fd79 	bl	8002dd6 <I2C_Master_SB>
 80022e4:	e092      	b.n	800240c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	08db      	lsrs	r3, r3, #3
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d009      	beq.n	8002306 <HAL_I2C_EV_IRQHandler+0xb2>
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	0a5b      	lsrs	r3, r3, #9
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d003      	beq.n	8002306 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 fdef 	bl	8002ee2 <I2C_Master_ADD10>
 8002304:	e082      	b.n	800240c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	085b      	lsrs	r3, r3, #1
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b00      	cmp	r3, #0
 8002310:	d009      	beq.n	8002326 <HAL_I2C_EV_IRQHandler+0xd2>
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	0a5b      	lsrs	r3, r3, #9
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	2b00      	cmp	r3, #0
 800231c:	d003      	beq.n	8002326 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 fe09 	bl	8002f36 <I2C_Master_ADDR>
 8002324:	e072      	b.n	800240c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	089b      	lsrs	r3, r3, #2
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b00      	cmp	r3, #0
 8002330:	d03b      	beq.n	80023aa <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800233c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002340:	f000 80f3 	beq.w	800252a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	09db      	lsrs	r3, r3, #7
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	2b00      	cmp	r3, #0
 800234e:	d00f      	beq.n	8002370 <HAL_I2C_EV_IRQHandler+0x11c>
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	0a9b      	lsrs	r3, r3, #10
 8002354:	f003 0301 	and.w	r3, r3, #1
 8002358:	2b00      	cmp	r3, #0
 800235a:	d009      	beq.n	8002370 <HAL_I2C_EV_IRQHandler+0x11c>
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	089b      	lsrs	r3, r3, #2
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	2b00      	cmp	r3, #0
 8002366:	d103      	bne.n	8002370 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f000 f9f3 	bl	8002754 <I2C_MasterTransmit_TXE>
 800236e:	e04d      	b.n	800240c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	089b      	lsrs	r3, r3, #2
 8002374:	f003 0301 	and.w	r3, r3, #1
 8002378:	2b00      	cmp	r3, #0
 800237a:	f000 80d6 	beq.w	800252a <HAL_I2C_EV_IRQHandler+0x2d6>
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	0a5b      	lsrs	r3, r3, #9
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b00      	cmp	r3, #0
 8002388:	f000 80cf 	beq.w	800252a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800238c:	7bbb      	ldrb	r3, [r7, #14]
 800238e:	2b21      	cmp	r3, #33	; 0x21
 8002390:	d103      	bne.n	800239a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 fa7a 	bl	800288c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002398:	e0c7      	b.n	800252a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800239a:	7bfb      	ldrb	r3, [r7, #15]
 800239c:	2b40      	cmp	r3, #64	; 0x40
 800239e:	f040 80c4 	bne.w	800252a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f000 fae8 	bl	8002978 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80023a8:	e0bf      	b.n	800252a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023b8:	f000 80b7 	beq.w	800252a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	099b      	lsrs	r3, r3, #6
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d00f      	beq.n	80023e8 <HAL_I2C_EV_IRQHandler+0x194>
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	0a9b      	lsrs	r3, r3, #10
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d009      	beq.n	80023e8 <HAL_I2C_EV_IRQHandler+0x194>
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	089b      	lsrs	r3, r3, #2
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d103      	bne.n	80023e8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f000 fb5d 	bl	8002aa0 <I2C_MasterReceive_RXNE>
 80023e6:	e011      	b.n	800240c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	089b      	lsrs	r3, r3, #2
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f000 809a 	beq.w	800252a <HAL_I2C_EV_IRQHandler+0x2d6>
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	0a5b      	lsrs	r3, r3, #9
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b00      	cmp	r3, #0
 8002400:	f000 8093 	beq.w	800252a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f000 fbfc 	bl	8002c02 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800240a:	e08e      	b.n	800252a <HAL_I2C_EV_IRQHandler+0x2d6>
 800240c:	e08d      	b.n	800252a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	2b00      	cmp	r3, #0
 8002414:	d004      	beq.n	8002420 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	695b      	ldr	r3, [r3, #20]
 800241c:	61fb      	str	r3, [r7, #28]
 800241e:	e007      	b.n	8002430 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	085b      	lsrs	r3, r3, #1
 8002434:	f003 0301 	and.w	r3, r3, #1
 8002438:	2b00      	cmp	r3, #0
 800243a:	d012      	beq.n	8002462 <HAL_I2C_EV_IRQHandler+0x20e>
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	0a5b      	lsrs	r3, r3, #9
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	2b00      	cmp	r3, #0
 8002446:	d00c      	beq.n	8002462 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244c:	2b00      	cmp	r3, #0
 800244e:	d003      	beq.n	8002458 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002458:	69b9      	ldr	r1, [r7, #24]
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 ffba 	bl	80033d4 <I2C_Slave_ADDR>
 8002460:	e066      	b.n	8002530 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	091b      	lsrs	r3, r3, #4
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	2b00      	cmp	r3, #0
 800246c:	d009      	beq.n	8002482 <HAL_I2C_EV_IRQHandler+0x22e>
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	0a5b      	lsrs	r3, r3, #9
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b00      	cmp	r3, #0
 8002478:	d003      	beq.n	8002482 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f000 fff4 	bl	8003468 <I2C_Slave_STOPF>
 8002480:	e056      	b.n	8002530 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002482:	7bbb      	ldrb	r3, [r7, #14]
 8002484:	2b21      	cmp	r3, #33	; 0x21
 8002486:	d002      	beq.n	800248e <HAL_I2C_EV_IRQHandler+0x23a>
 8002488:	7bbb      	ldrb	r3, [r7, #14]
 800248a:	2b29      	cmp	r3, #41	; 0x29
 800248c:	d125      	bne.n	80024da <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	09db      	lsrs	r3, r3, #7
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00f      	beq.n	80024ba <HAL_I2C_EV_IRQHandler+0x266>
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	0a9b      	lsrs	r3, r3, #10
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d009      	beq.n	80024ba <HAL_I2C_EV_IRQHandler+0x266>
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	089b      	lsrs	r3, r3, #2
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d103      	bne.n	80024ba <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 fed0 	bl	8003258 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80024b8:	e039      	b.n	800252e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	089b      	lsrs	r3, r3, #2
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d033      	beq.n	800252e <HAL_I2C_EV_IRQHandler+0x2da>
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	0a5b      	lsrs	r3, r3, #9
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d02d      	beq.n	800252e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 fefd 	bl	80032d2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80024d8:	e029      	b.n	800252e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	099b      	lsrs	r3, r3, #6
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00f      	beq.n	8002506 <HAL_I2C_EV_IRQHandler+0x2b2>
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	0a9b      	lsrs	r3, r3, #10
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d009      	beq.n	8002506 <HAL_I2C_EV_IRQHandler+0x2b2>
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	089b      	lsrs	r3, r3, #2
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d103      	bne.n	8002506 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 ff08 	bl	8003314 <I2C_SlaveReceive_RXNE>
 8002504:	e014      	b.n	8002530 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	089b      	lsrs	r3, r3, #2
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00e      	beq.n	8002530 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	0a5b      	lsrs	r3, r3, #9
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	2b00      	cmp	r3, #0
 800251c:	d008      	beq.n	8002530 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 ff36 	bl	8003390 <I2C_SlaveReceive_BTF>
 8002524:	e004      	b.n	8002530 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002526:	bf00      	nop
 8002528:	e002      	b.n	8002530 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800252a:	bf00      	nop
 800252c:	e000      	b.n	8002530 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800252e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002530:	3720      	adds	r7, #32
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b08a      	sub	sp, #40	; 0x28
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	695b      	ldr	r3, [r3, #20]
 8002544:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800254e:	2300      	movs	r3, #0
 8002550:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002558:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800255a:	6a3b      	ldr	r3, [r7, #32]
 800255c:	0a1b      	lsrs	r3, r3, #8
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00e      	beq.n	8002584 <HAL_I2C_ER_IRQHandler+0x4e>
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	0a1b      	lsrs	r3, r3, #8
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	2b00      	cmp	r3, #0
 8002570:	d008      	beq.n	8002584 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002574:	f043 0301 	orr.w	r3, r3, #1
 8002578:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002582:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002584:	6a3b      	ldr	r3, [r7, #32]
 8002586:	0a5b      	lsrs	r3, r3, #9
 8002588:	f003 0301 	and.w	r3, r3, #1
 800258c:	2b00      	cmp	r3, #0
 800258e:	d00e      	beq.n	80025ae <HAL_I2C_ER_IRQHandler+0x78>
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	0a1b      	lsrs	r3, r3, #8
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	2b00      	cmp	r3, #0
 800259a:	d008      	beq.n	80025ae <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259e:	f043 0302 	orr.w	r3, r3, #2
 80025a2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80025ac:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80025ae:	6a3b      	ldr	r3, [r7, #32]
 80025b0:	0a9b      	lsrs	r3, r3, #10
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d03f      	beq.n	800263a <HAL_I2C_ER_IRQHandler+0x104>
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	0a1b      	lsrs	r3, r3, #8
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d039      	beq.n	800263a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80025c6:	7efb      	ldrb	r3, [r7, #27]
 80025c8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025d8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80025e0:	7ebb      	ldrb	r3, [r7, #26]
 80025e2:	2b20      	cmp	r3, #32
 80025e4:	d112      	bne.n	800260c <HAL_I2C_ER_IRQHandler+0xd6>
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d10f      	bne.n	800260c <HAL_I2C_ER_IRQHandler+0xd6>
 80025ec:	7cfb      	ldrb	r3, [r7, #19]
 80025ee:	2b21      	cmp	r3, #33	; 0x21
 80025f0:	d008      	beq.n	8002604 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80025f2:	7cfb      	ldrb	r3, [r7, #19]
 80025f4:	2b29      	cmp	r3, #41	; 0x29
 80025f6:	d005      	beq.n	8002604 <HAL_I2C_ER_IRQHandler+0xce>
 80025f8:	7cfb      	ldrb	r3, [r7, #19]
 80025fa:	2b28      	cmp	r3, #40	; 0x28
 80025fc:	d106      	bne.n	800260c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2b21      	cmp	r3, #33	; 0x21
 8002602:	d103      	bne.n	800260c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f001 f85f 	bl	80036c8 <I2C_Slave_AF>
 800260a:	e016      	b.n	800263a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002614:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002618:	f043 0304 	orr.w	r3, r3, #4
 800261c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800261e:	7efb      	ldrb	r3, [r7, #27]
 8002620:	2b10      	cmp	r3, #16
 8002622:	d002      	beq.n	800262a <HAL_I2C_ER_IRQHandler+0xf4>
 8002624:	7efb      	ldrb	r3, [r7, #27]
 8002626:	2b40      	cmp	r3, #64	; 0x40
 8002628:	d107      	bne.n	800263a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002638:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800263a:	6a3b      	ldr	r3, [r7, #32]
 800263c:	0adb      	lsrs	r3, r3, #11
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00e      	beq.n	8002664 <HAL_I2C_ER_IRQHandler+0x12e>
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	0a1b      	lsrs	r3, r3, #8
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b00      	cmp	r3, #0
 8002650:	d008      	beq.n	8002664 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002654:	f043 0308 	orr.w	r3, r3, #8
 8002658:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002662:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002666:	2b00      	cmp	r3, #0
 8002668:	d008      	beq.n	800267c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800266e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002670:	431a      	orrs	r2, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f001 f896 	bl	80037a8 <I2C_ITError>
  }
}
 800267c:	bf00      	nop
 800267e:	3728      	adds	r7, #40	; 0x28
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	460b      	mov	r3, r1
 80026de:	70fb      	strb	r3, [r7, #3]
 80026e0:	4613      	mov	r3, r2
 80026e2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800270c:	bf00      	nop
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002762:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800276a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002770:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002776:	2b00      	cmp	r3, #0
 8002778:	d150      	bne.n	800281c <I2C_MasterTransmit_TXE+0xc8>
 800277a:	7bfb      	ldrb	r3, [r7, #15]
 800277c:	2b21      	cmp	r3, #33	; 0x21
 800277e:	d14d      	bne.n	800281c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	2b08      	cmp	r3, #8
 8002784:	d01d      	beq.n	80027c2 <I2C_MasterTransmit_TXE+0x6e>
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	2b20      	cmp	r3, #32
 800278a:	d01a      	beq.n	80027c2 <I2C_MasterTransmit_TXE+0x6e>
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002792:	d016      	beq.n	80027c2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	685a      	ldr	r2, [r3, #4]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80027a2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2211      	movs	r2, #17
 80027a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2220      	movs	r2, #32
 80027b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f7ff ff62 	bl	8002684 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80027c0:	e060      	b.n	8002884 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80027d0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027e0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2220      	movs	r2, #32
 80027ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	2b40      	cmp	r3, #64	; 0x40
 80027fa:	d107      	bne.n	800280c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f7ff ff7d 	bl	8002704 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800280a:	e03b      	b.n	8002884 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f7ff ff35 	bl	8002684 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800281a:	e033      	b.n	8002884 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800281c:	7bfb      	ldrb	r3, [r7, #15]
 800281e:	2b21      	cmp	r3, #33	; 0x21
 8002820:	d005      	beq.n	800282e <I2C_MasterTransmit_TXE+0xda>
 8002822:	7bbb      	ldrb	r3, [r7, #14]
 8002824:	2b40      	cmp	r3, #64	; 0x40
 8002826:	d12d      	bne.n	8002884 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002828:	7bfb      	ldrb	r3, [r7, #15]
 800282a:	2b22      	cmp	r3, #34	; 0x22
 800282c:	d12a      	bne.n	8002884 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002832:	b29b      	uxth	r3, r3
 8002834:	2b00      	cmp	r3, #0
 8002836:	d108      	bne.n	800284a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	685a      	ldr	r2, [r3, #4]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002846:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002848:	e01c      	b.n	8002884 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b40      	cmp	r3, #64	; 0x40
 8002854:	d103      	bne.n	800285e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 f88e 	bl	8002978 <I2C_MemoryTransmit_TXE_BTF>
}
 800285c:	e012      	b.n	8002884 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002862:	781a      	ldrb	r2, [r3, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286e:	1c5a      	adds	r2, r3, #1
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002878:	b29b      	uxth	r3, r3
 800287a:	3b01      	subs	r3, #1
 800287c:	b29a      	uxth	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002882:	e7ff      	b.n	8002884 <I2C_MasterTransmit_TXE+0x130>
 8002884:	bf00      	nop
 8002886:	3710      	adds	r7, #16
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002898:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b21      	cmp	r3, #33	; 0x21
 80028a4:	d164      	bne.n	8002970 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d012      	beq.n	80028d6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b4:	781a      	ldrb	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c0:	1c5a      	adds	r2, r3, #1
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	3b01      	subs	r3, #1
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80028d4:	e04c      	b.n	8002970 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2b08      	cmp	r3, #8
 80028da:	d01d      	beq.n	8002918 <I2C_MasterTransmit_BTF+0x8c>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2b20      	cmp	r3, #32
 80028e0:	d01a      	beq.n	8002918 <I2C_MasterTransmit_BTF+0x8c>
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028e8:	d016      	beq.n	8002918 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	685a      	ldr	r2, [r3, #4]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80028f8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2211      	movs	r2, #17
 80028fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2220      	movs	r2, #32
 800290c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f7ff feb7 	bl	8002684 <HAL_I2C_MasterTxCpltCallback>
}
 8002916:	e02b      	b.n	8002970 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	685a      	ldr	r2, [r3, #4]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002926:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002936:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2220      	movs	r2, #32
 8002942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b40      	cmp	r3, #64	; 0x40
 8002950:	d107      	bne.n	8002962 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f7ff fed2 	bl	8002704 <HAL_I2C_MemTxCpltCallback>
}
 8002960:	e006      	b.n	8002970 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f7ff fe8a 	bl	8002684 <HAL_I2C_MasterTxCpltCallback>
}
 8002970:	bf00      	nop
 8002972:	3710      	adds	r7, #16
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002986:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800298c:	2b00      	cmp	r3, #0
 800298e:	d11d      	bne.n	80029cc <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002994:	2b01      	cmp	r3, #1
 8002996:	d10b      	bne.n	80029b0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800299c:	b2da      	uxtb	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029a8:	1c9a      	adds	r2, r3, #2
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80029ae:	e073      	b.n	8002a98 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	121b      	asrs	r3, r3, #8
 80029b8:	b2da      	uxtb	r2, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029c4:	1c5a      	adds	r2, r3, #1
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80029ca:	e065      	b.n	8002a98 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d10b      	bne.n	80029ec <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029d8:	b2da      	uxtb	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029e4:	1c5a      	adds	r2, r3, #1
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80029ea:	e055      	b.n	8002a98 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d151      	bne.n	8002a98 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80029f4:	7bfb      	ldrb	r3, [r7, #15]
 80029f6:	2b22      	cmp	r3, #34	; 0x22
 80029f8:	d10d      	bne.n	8002a16 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a08:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a0e:	1c5a      	adds	r2, r3, #1
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002a14:	e040      	b.n	8002a98 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d015      	beq.n	8002a4c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002a20:	7bfb      	ldrb	r3, [r7, #15]
 8002a22:	2b21      	cmp	r3, #33	; 0x21
 8002a24:	d112      	bne.n	8002a4c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2a:	781a      	ldrb	r2, [r3, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a36:	1c5a      	adds	r2, r3, #1
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	3b01      	subs	r3, #1
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002a4a:	e025      	b.n	8002a98 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d120      	bne.n	8002a98 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002a56:	7bfb      	ldrb	r3, [r7, #15]
 8002a58:	2b21      	cmp	r3, #33	; 0x21
 8002a5a:	d11d      	bne.n	8002a98 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	685a      	ldr	r2, [r3, #4]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a6a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a7a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2220      	movs	r2, #32
 8002a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f7ff fe36 	bl	8002704 <HAL_I2C_MemTxCpltCallback>
}
 8002a98:	bf00      	nop
 8002a9a:	3710      	adds	r7, #16
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	2b22      	cmp	r3, #34	; 0x22
 8002ab2:	f040 80a2 	bne.w	8002bfa <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2b03      	cmp	r3, #3
 8002ac2:	d921      	bls.n	8002b08 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	691a      	ldr	r2, [r3, #16]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ace:	b2d2      	uxtb	r2, r2
 8002ad0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad6:	1c5a      	adds	r2, r3, #1
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	2b03      	cmp	r3, #3
 8002af2:	f040 8082 	bne.w	8002bfa <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	685a      	ldr	r2, [r3, #4]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b04:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8002b06:	e078      	b.n	8002bfa <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d074      	beq.n	8002bfa <I2C_MasterReceive_RXNE+0x15a>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d002      	beq.n	8002b1c <I2C_MasterReceive_RXNE+0x7c>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d16e      	bne.n	8002bfa <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f001 fac5 	bl	80040ac <I2C_WaitOnSTOPRequestThroughIT>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d142      	bne.n	8002bae <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b36:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	685a      	ldr	r2, [r3, #4]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002b46:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	691a      	ldr	r2, [r3, #16]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b52:	b2d2      	uxtb	r2, r2
 8002b54:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5a:	1c5a      	adds	r2, r3, #1
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	3b01      	subs	r3, #1
 8002b68:	b29a      	uxth	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2220      	movs	r2, #32
 8002b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b40      	cmp	r3, #64	; 0x40
 8002b80:	d10a      	bne.n	8002b98 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f7ff fdc1 	bl	8002718 <HAL_I2C_MemRxCpltCallback>
}
 8002b96:	e030      	b.n	8002bfa <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2212      	movs	r2, #18
 8002ba4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f7ff fd76 	bl	8002698 <HAL_I2C_MasterRxCpltCallback>
}
 8002bac:	e025      	b.n	8002bfa <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	685a      	ldr	r2, [r3, #4]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002bbc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	691a      	ldr	r2, [r3, #16]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc8:	b2d2      	uxtb	r2, r2
 8002bca:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd0:	1c5a      	adds	r2, r3, #1
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2220      	movs	r2, #32
 8002be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f7ff fd99 	bl	800272c <HAL_I2C_ErrorCallback>
}
 8002bfa:	bf00      	nop
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b084      	sub	sp, #16
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	2b04      	cmp	r3, #4
 8002c18:	d11b      	bne.n	8002c52 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	685a      	ldr	r2, [r3, #4]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c28:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	691a      	ldr	r2, [r3, #16]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c34:	b2d2      	uxtb	r2, r2
 8002c36:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3c:	1c5a      	adds	r2, r3, #1
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	b29a      	uxth	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002c50:	e0bd      	b.n	8002dce <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	2b03      	cmp	r3, #3
 8002c5a:	d129      	bne.n	8002cb0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	685a      	ldr	r2, [r3, #4]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c6a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2b04      	cmp	r3, #4
 8002c70:	d00a      	beq.n	8002c88 <I2C_MasterReceive_BTF+0x86>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d007      	beq.n	8002c88 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c86:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	691a      	ldr	r2, [r3, #16]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c92:	b2d2      	uxtb	r2, r2
 8002c94:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9a:	1c5a      	adds	r2, r3, #1
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002cae:	e08e      	b.n	8002dce <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d176      	bne.n	8002da8 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d002      	beq.n	8002cc6 <I2C_MasterReceive_BTF+0xc4>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2b10      	cmp	r3, #16
 8002cc4:	d108      	bne.n	8002cd8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	e019      	b.n	8002d0c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2b04      	cmp	r3, #4
 8002cdc:	d002      	beq.n	8002ce4 <I2C_MasterReceive_BTF+0xe2>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d108      	bne.n	8002cf6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002cf2:	601a      	str	r2, [r3, #0]
 8002cf4:	e00a      	b.n	8002d0c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2b10      	cmp	r3, #16
 8002cfa:	d007      	beq.n	8002d0c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d0a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	691a      	ldr	r2, [r3, #16]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d16:	b2d2      	uxtb	r2, r2
 8002d18:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1e:	1c5a      	adds	r2, r3, #1
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	691a      	ldr	r2, [r3, #16]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3c:	b2d2      	uxtb	r2, r2
 8002d3e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	1c5a      	adds	r2, r3, #1
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	3b01      	subs	r3, #1
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002d66:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2220      	movs	r2, #32
 8002d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2b40      	cmp	r3, #64	; 0x40
 8002d7a:	d10a      	bne.n	8002d92 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f7ff fcc4 	bl	8002718 <HAL_I2C_MemRxCpltCallback>
}
 8002d90:	e01d      	b.n	8002dce <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2212      	movs	r2, #18
 8002d9e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f7ff fc79 	bl	8002698 <HAL_I2C_MasterRxCpltCallback>
}
 8002da6:	e012      	b.n	8002dce <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	691a      	ldr	r2, [r3, #16]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db2:	b2d2      	uxtb	r2, r2
 8002db4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dba:	1c5a      	adds	r2, r3, #1
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	b29a      	uxth	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002dce:	bf00      	nop
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	b083      	sub	sp, #12
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b40      	cmp	r3, #64	; 0x40
 8002de8:	d117      	bne.n	8002e1a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d109      	bne.n	8002e06 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	461a      	mov	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e02:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002e04:	e067      	b.n	8002ed6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	f043 0301 	orr.w	r3, r3, #1
 8002e10:	b2da      	uxtb	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	611a      	str	r2, [r3, #16]
}
 8002e18:	e05d      	b.n	8002ed6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e22:	d133      	bne.n	8002e8c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	2b21      	cmp	r3, #33	; 0x21
 8002e2e:	d109      	bne.n	8002e44 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	461a      	mov	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e40:	611a      	str	r2, [r3, #16]
 8002e42:	e008      	b.n	8002e56 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	f043 0301 	orr.w	r3, r3, #1
 8002e4e:	b2da      	uxtb	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d004      	beq.n	8002e68 <I2C_Master_SB+0x92>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d108      	bne.n	8002e7a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d032      	beq.n	8002ed6 <I2C_Master_SB+0x100>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d02d      	beq.n	8002ed6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e88:	605a      	str	r2, [r3, #4]
}
 8002e8a:	e024      	b.n	8002ed6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d10e      	bne.n	8002eb2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	11db      	asrs	r3, r3, #7
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	f003 0306 	and.w	r3, r3, #6
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	f063 030f 	orn	r3, r3, #15
 8002ea8:	b2da      	uxtb	r2, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	611a      	str	r2, [r3, #16]
}
 8002eb0:	e011      	b.n	8002ed6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d10d      	bne.n	8002ed6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	11db      	asrs	r3, r3, #7
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	f003 0306 	and.w	r3, r3, #6
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	f063 030e 	orn	r3, r3, #14
 8002ece:	b2da      	uxtb	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	611a      	str	r2, [r3, #16]
}
 8002ed6:	bf00      	nop
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr

08002ee2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	b083      	sub	sp, #12
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eee:	b2da      	uxtb	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d004      	beq.n	8002f08 <I2C_Master_ADD10+0x26>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d108      	bne.n	8002f1a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d00c      	beq.n	8002f2a <I2C_Master_ADD10+0x48>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d007      	beq.n	8002f2a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	685a      	ldr	r2, [r3, #4]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f28:	605a      	str	r2, [r3, #4]
  }
}
 8002f2a:	bf00      	nop
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr

08002f36 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002f36:	b480      	push	{r7}
 8002f38:	b091      	sub	sp, #68	; 0x44
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f52:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2b22      	cmp	r3, #34	; 0x22
 8002f5e:	f040 8169 	bne.w	8003234 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10f      	bne.n	8002f8a <I2C_Master_ADDR+0x54>
 8002f6a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002f6e:	2b40      	cmp	r3, #64	; 0x40
 8002f70:	d10b      	bne.n	8002f8a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f72:	2300      	movs	r3, #0
 8002f74:	633b      	str	r3, [r7, #48]	; 0x30
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	695b      	ldr	r3, [r3, #20]
 8002f7c:	633b      	str	r3, [r7, #48]	; 0x30
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	633b      	str	r3, [r7, #48]	; 0x30
 8002f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f88:	e160      	b.n	800324c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d11d      	bne.n	8002fce <I2C_Master_ADDR+0x98>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002f9a:	d118      	bne.n	8002fce <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fc0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fc6:	1c5a      	adds	r2, r3, #1
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	651a      	str	r2, [r3, #80]	; 0x50
 8002fcc:	e13e      	b.n	800324c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d113      	bne.n	8003000 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fd8:	2300      	movs	r3, #0
 8002fda:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fec:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ffc:	601a      	str	r2, [r3, #0]
 8002ffe:	e115      	b.n	800322c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003004:	b29b      	uxth	r3, r3
 8003006:	2b01      	cmp	r3, #1
 8003008:	f040 808a 	bne.w	8003120 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800300c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800300e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003012:	d137      	bne.n	8003084 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003022:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800302e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003032:	d113      	bne.n	800305c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003042:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003044:	2300      	movs	r3, #0
 8003046:	627b      	str	r3, [r7, #36]	; 0x24
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	627b      	str	r3, [r7, #36]	; 0x24
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	627b      	str	r3, [r7, #36]	; 0x24
 8003058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305a:	e0e7      	b.n	800322c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800305c:	2300      	movs	r3, #0
 800305e:	623b      	str	r3, [r7, #32]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	623b      	str	r3, [r7, #32]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	623b      	str	r3, [r7, #32]
 8003070:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003080:	601a      	str	r2, [r3, #0]
 8003082:	e0d3      	b.n	800322c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003086:	2b08      	cmp	r3, #8
 8003088:	d02e      	beq.n	80030e8 <I2C_Master_ADDR+0x1b2>
 800308a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800308c:	2b20      	cmp	r3, #32
 800308e:	d02b      	beq.n	80030e8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003092:	2b12      	cmp	r3, #18
 8003094:	d102      	bne.n	800309c <I2C_Master_ADDR+0x166>
 8003096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003098:	2b01      	cmp	r3, #1
 800309a:	d125      	bne.n	80030e8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800309c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800309e:	2b04      	cmp	r3, #4
 80030a0:	d00e      	beq.n	80030c0 <I2C_Master_ADDR+0x18a>
 80030a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d00b      	beq.n	80030c0 <I2C_Master_ADDR+0x18a>
 80030a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030aa:	2b10      	cmp	r3, #16
 80030ac:	d008      	beq.n	80030c0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030bc:	601a      	str	r2, [r3, #0]
 80030be:	e007      	b.n	80030d0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80030ce:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030d0:	2300      	movs	r3, #0
 80030d2:	61fb      	str	r3, [r7, #28]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	61fb      	str	r3, [r7, #28]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	61fb      	str	r3, [r7, #28]
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	e0a1      	b.n	800322c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030f6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030f8:	2300      	movs	r3, #0
 80030fa:	61bb      	str	r3, [r7, #24]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	61bb      	str	r3, [r7, #24]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	61bb      	str	r3, [r7, #24]
 800310c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800311c:	601a      	str	r2, [r3, #0]
 800311e:	e085      	b.n	800322c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003124:	b29b      	uxth	r3, r3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d14d      	bne.n	80031c6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800312a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800312c:	2b04      	cmp	r3, #4
 800312e:	d016      	beq.n	800315e <I2C_Master_ADDR+0x228>
 8003130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003132:	2b02      	cmp	r3, #2
 8003134:	d013      	beq.n	800315e <I2C_Master_ADDR+0x228>
 8003136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003138:	2b10      	cmp	r3, #16
 800313a:	d010      	beq.n	800315e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800314a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800315a:	601a      	str	r2, [r3, #0]
 800315c:	e007      	b.n	800316e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800316c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003178:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800317c:	d117      	bne.n	80031ae <I2C_Master_ADDR+0x278>
 800317e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003180:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003184:	d00b      	beq.n	800319e <I2C_Master_ADDR+0x268>
 8003186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003188:	2b01      	cmp	r3, #1
 800318a:	d008      	beq.n	800319e <I2C_Master_ADDR+0x268>
 800318c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800318e:	2b08      	cmp	r3, #8
 8003190:	d005      	beq.n	800319e <I2C_Master_ADDR+0x268>
 8003192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003194:	2b10      	cmp	r3, #16
 8003196:	d002      	beq.n	800319e <I2C_Master_ADDR+0x268>
 8003198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800319a:	2b20      	cmp	r3, #32
 800319c:	d107      	bne.n	80031ae <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80031ac:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031ae:	2300      	movs	r3, #0
 80031b0:	617b      	str	r3, [r7, #20]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	695b      	ldr	r3, [r3, #20]
 80031b8:	617b      	str	r3, [r7, #20]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	617b      	str	r3, [r7, #20]
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	e032      	b.n	800322c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031d4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031e4:	d117      	bne.n	8003216 <I2C_Master_ADDR+0x2e0>
 80031e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031ec:	d00b      	beq.n	8003206 <I2C_Master_ADDR+0x2d0>
 80031ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d008      	beq.n	8003206 <I2C_Master_ADDR+0x2d0>
 80031f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f6:	2b08      	cmp	r3, #8
 80031f8:	d005      	beq.n	8003206 <I2C_Master_ADDR+0x2d0>
 80031fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031fc:	2b10      	cmp	r3, #16
 80031fe:	d002      	beq.n	8003206 <I2C_Master_ADDR+0x2d0>
 8003200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003202:	2b20      	cmp	r3, #32
 8003204:	d107      	bne.n	8003216 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003214:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003216:	2300      	movs	r3, #0
 8003218:	613b      	str	r3, [r7, #16]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	695b      	ldr	r3, [r3, #20]
 8003220:	613b      	str	r3, [r7, #16]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	613b      	str	r3, [r7, #16]
 800322a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003232:	e00b      	b.n	800324c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003234:	2300      	movs	r3, #0
 8003236:	60fb      	str	r3, [r7, #12]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	60fb      	str	r3, [r7, #12]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	60fb      	str	r3, [r7, #12]
 8003248:	68fb      	ldr	r3, [r7, #12]
}
 800324a:	e7ff      	b.n	800324c <I2C_Master_ADDR+0x316>
 800324c:	bf00      	nop
 800324e:	3744      	adds	r7, #68	; 0x44
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003266:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800326c:	b29b      	uxth	r3, r3
 800326e:	2b00      	cmp	r3, #0
 8003270:	d02b      	beq.n	80032ca <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003276:	781a      	ldrb	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003282:	1c5a      	adds	r2, r3, #1
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800328c:	b29b      	uxth	r3, r3
 800328e:	3b01      	subs	r3, #1
 8003290:	b29a      	uxth	r2, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800329a:	b29b      	uxth	r3, r3
 800329c:	2b00      	cmp	r3, #0
 800329e:	d114      	bne.n	80032ca <I2C_SlaveTransmit_TXE+0x72>
 80032a0:	7bfb      	ldrb	r3, [r7, #15]
 80032a2:	2b29      	cmp	r3, #41	; 0x29
 80032a4:	d111      	bne.n	80032ca <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	685a      	ldr	r2, [r3, #4]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032b4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2221      	movs	r2, #33	; 0x21
 80032ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2228      	movs	r2, #40	; 0x28
 80032c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f7ff f9f1 	bl	80026ac <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80032ca:	bf00      	nop
 80032cc:	3710      	adds	r7, #16
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80032d2:	b480      	push	{r7}
 80032d4:	b083      	sub	sp, #12
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032de:	b29b      	uxth	r3, r3
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d011      	beq.n	8003308 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e8:	781a      	ldrb	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f4:	1c5a      	adds	r2, r3, #1
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032fe:	b29b      	uxth	r3, r3
 8003300:	3b01      	subs	r3, #1
 8003302:	b29a      	uxth	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003308:	bf00      	nop
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003322:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003328:	b29b      	uxth	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d02c      	beq.n	8003388 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	691a      	ldr	r2, [r3, #16]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003338:	b2d2      	uxtb	r2, r2
 800333a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003340:	1c5a      	adds	r2, r3, #1
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800334a:	b29b      	uxth	r3, r3
 800334c:	3b01      	subs	r3, #1
 800334e:	b29a      	uxth	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003358:	b29b      	uxth	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	d114      	bne.n	8003388 <I2C_SlaveReceive_RXNE+0x74>
 800335e:	7bfb      	ldrb	r3, [r7, #15]
 8003360:	2b2a      	cmp	r3, #42	; 0x2a
 8003362:	d111      	bne.n	8003388 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	685a      	ldr	r2, [r3, #4]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003372:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2222      	movs	r2, #34	; 0x22
 8003378:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2228      	movs	r2, #40	; 0x28
 800337e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f7ff f99c 	bl	80026c0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003388:	bf00      	nop
 800338a:	3710      	adds	r7, #16
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800339c:	b29b      	uxth	r3, r3
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d012      	beq.n	80033c8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	691a      	ldr	r2, [r3, #16]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ac:	b2d2      	uxtb	r2, r2
 80033ae:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b4:	1c5a      	adds	r2, r3, #1
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033be:	b29b      	uxth	r3, r3
 80033c0:	3b01      	subs	r3, #1
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80033de:	2300      	movs	r3, #0
 80033e0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80033ee:	2b28      	cmp	r3, #40	; 0x28
 80033f0:	d127      	bne.n	8003442 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	685a      	ldr	r2, [r3, #4]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003400:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	089b      	lsrs	r3, r3, #2
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800340e:	2301      	movs	r3, #1
 8003410:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	09db      	lsrs	r3, r3, #7
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b00      	cmp	r3, #0
 800341c:	d103      	bne.n	8003426 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	81bb      	strh	r3, [r7, #12]
 8003424:	e002      	b.n	800342c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003434:	89ba      	ldrh	r2, [r7, #12]
 8003436:	7bfb      	ldrb	r3, [r7, #15]
 8003438:	4619      	mov	r1, r3
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f7ff f94a 	bl	80026d4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003440:	e00e      	b.n	8003460 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003442:	2300      	movs	r3, #0
 8003444:	60bb      	str	r3, [r7, #8]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	695b      	ldr	r3, [r3, #20]
 800344c:	60bb      	str	r3, [r7, #8]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	60bb      	str	r3, [r7, #8]
 8003456:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003460:	bf00      	nop
 8003462:	3710      	adds	r7, #16
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003476:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	685a      	ldr	r2, [r3, #4]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003486:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003488:	2300      	movs	r3, #0
 800348a:	60bb      	str	r3, [r7, #8]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	695b      	ldr	r3, [r3, #20]
 8003492:	60bb      	str	r3, [r7, #8]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f042 0201 	orr.w	r2, r2, #1
 80034a2:	601a      	str	r2, [r3, #0]
 80034a4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034b4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034c4:	d172      	bne.n	80035ac <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80034c6:	7bfb      	ldrb	r3, [r7, #15]
 80034c8:	2b22      	cmp	r3, #34	; 0x22
 80034ca:	d002      	beq.n	80034d2 <I2C_Slave_STOPF+0x6a>
 80034cc:	7bfb      	ldrb	r3, [r7, #15]
 80034ce:	2b2a      	cmp	r3, #42	; 0x2a
 80034d0:	d135      	bne.n	800353e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	b29a      	uxth	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d005      	beq.n	80034f6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ee:	f043 0204 	orr.w	r2, r3, #4
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	685a      	ldr	r2, [r3, #4]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003504:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350a:	4618      	mov	r0, r3
 800350c:	f7fe f852 	bl	80015b4 <HAL_DMA_GetState>
 8003510:	4603      	mov	r3, r0
 8003512:	2b01      	cmp	r3, #1
 8003514:	d049      	beq.n	80035aa <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800351a:	4a69      	ldr	r2, [pc, #420]	; (80036c0 <I2C_Slave_STOPF+0x258>)
 800351c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003522:	4618      	mov	r0, r3
 8003524:	f7fe f824 	bl	8001570 <HAL_DMA_Abort_IT>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d03d      	beq.n	80035aa <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003538:	4610      	mov	r0, r2
 800353a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800353c:	e035      	b.n	80035aa <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	b29a      	uxth	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003550:	b29b      	uxth	r3, r3
 8003552:	2b00      	cmp	r3, #0
 8003554:	d005      	beq.n	8003562 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	f043 0204 	orr.w	r2, r3, #4
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	685a      	ldr	r2, [r3, #4]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003570:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003576:	4618      	mov	r0, r3
 8003578:	f7fe f81c 	bl	80015b4 <HAL_DMA_GetState>
 800357c:	4603      	mov	r3, r0
 800357e:	2b01      	cmp	r3, #1
 8003580:	d014      	beq.n	80035ac <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003586:	4a4e      	ldr	r2, [pc, #312]	; (80036c0 <I2C_Slave_STOPF+0x258>)
 8003588:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800358e:	4618      	mov	r0, r3
 8003590:	f7fd ffee 	bl	8001570 <HAL_DMA_Abort_IT>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d008      	beq.n	80035ac <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800359e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80035a4:	4610      	mov	r0, r2
 80035a6:	4798      	blx	r3
 80035a8:	e000      	b.n	80035ac <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80035aa:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d03e      	beq.n	8003634 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	695b      	ldr	r3, [r3, #20]
 80035bc:	f003 0304 	and.w	r3, r3, #4
 80035c0:	2b04      	cmp	r3, #4
 80035c2:	d112      	bne.n	80035ea <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	691a      	ldr	r2, [r3, #16]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ce:	b2d2      	uxtb	r2, r2
 80035d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d6:	1c5a      	adds	r2, r3, #1
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	3b01      	subs	r3, #1
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	695b      	ldr	r3, [r3, #20]
 80035f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f4:	2b40      	cmp	r3, #64	; 0x40
 80035f6:	d112      	bne.n	800361e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	691a      	ldr	r2, [r3, #16]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003602:	b2d2      	uxtb	r2, r2
 8003604:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360a:	1c5a      	adds	r2, r3, #1
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003614:	b29b      	uxth	r3, r3
 8003616:	3b01      	subs	r3, #1
 8003618:	b29a      	uxth	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003622:	b29b      	uxth	r3, r3
 8003624:	2b00      	cmp	r3, #0
 8003626:	d005      	beq.n	8003634 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362c:	f043 0204 	orr.w	r2, r3, #4
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003638:	2b00      	cmp	r3, #0
 800363a:	d003      	beq.n	8003644 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f000 f8b3 	bl	80037a8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003642:	e039      	b.n	80036b8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003644:	7bfb      	ldrb	r3, [r7, #15]
 8003646:	2b2a      	cmp	r3, #42	; 0x2a
 8003648:	d109      	bne.n	800365e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2228      	movs	r2, #40	; 0x28
 8003654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f7ff f831 	bl	80026c0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b28      	cmp	r3, #40	; 0x28
 8003668:	d111      	bne.n	800368e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a15      	ldr	r2, [pc, #84]	; (80036c4 <I2C_Slave_STOPF+0x25c>)
 800366e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2220      	movs	r2, #32
 800367a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f7ff f832 	bl	80026f0 <HAL_I2C_ListenCpltCallback>
}
 800368c:	e014      	b.n	80036b8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003692:	2b22      	cmp	r3, #34	; 0x22
 8003694:	d002      	beq.n	800369c <I2C_Slave_STOPF+0x234>
 8003696:	7bfb      	ldrb	r3, [r7, #15]
 8003698:	2b22      	cmp	r3, #34	; 0x22
 800369a:	d10d      	bne.n	80036b8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2220      	movs	r2, #32
 80036a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f7ff f804 	bl	80026c0 <HAL_I2C_SlaveRxCpltCallback>
}
 80036b8:	bf00      	nop
 80036ba:	3710      	adds	r7, #16
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	08003cad 	.word	0x08003cad
 80036c4:	ffff0000 	.word	0xffff0000

080036c8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036dc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	2b08      	cmp	r3, #8
 80036e2:	d002      	beq.n	80036ea <I2C_Slave_AF+0x22>
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	2b20      	cmp	r3, #32
 80036e8:	d129      	bne.n	800373e <I2C_Slave_AF+0x76>
 80036ea:	7bfb      	ldrb	r3, [r7, #15]
 80036ec:	2b28      	cmp	r3, #40	; 0x28
 80036ee:	d126      	bne.n	800373e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a2c      	ldr	r2, [pc, #176]	; (80037a4 <I2C_Slave_AF+0xdc>)
 80036f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	685a      	ldr	r2, [r3, #4]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003704:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800370e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800371e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2220      	movs	r2, #32
 800372a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f7fe ffda 	bl	80026f0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800373c:	e02e      	b.n	800379c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800373e:	7bfb      	ldrb	r3, [r7, #15]
 8003740:	2b21      	cmp	r3, #33	; 0x21
 8003742:	d126      	bne.n	8003792 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a17      	ldr	r2, [pc, #92]	; (80037a4 <I2C_Slave_AF+0xdc>)
 8003748:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2221      	movs	r2, #33	; 0x21
 800374e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2220      	movs	r2, #32
 8003754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	685a      	ldr	r2, [r3, #4]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800376e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003778:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003788:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f7fe ff8e 	bl	80026ac <HAL_I2C_SlaveTxCpltCallback>
}
 8003790:	e004      	b.n	800379c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800379a:	615a      	str	r2, [r3, #20]
}
 800379c:	bf00      	nop
 800379e:	3710      	adds	r7, #16
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	ffff0000 	.word	0xffff0000

080037a8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037b6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037be:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80037c0:	7bbb      	ldrb	r3, [r7, #14]
 80037c2:	2b10      	cmp	r3, #16
 80037c4:	d002      	beq.n	80037cc <I2C_ITError+0x24>
 80037c6:	7bbb      	ldrb	r3, [r7, #14]
 80037c8:	2b40      	cmp	r3, #64	; 0x40
 80037ca:	d10a      	bne.n	80037e2 <I2C_ITError+0x3a>
 80037cc:	7bfb      	ldrb	r3, [r7, #15]
 80037ce:	2b22      	cmp	r3, #34	; 0x22
 80037d0:	d107      	bne.n	80037e2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037e0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80037e2:	7bfb      	ldrb	r3, [r7, #15]
 80037e4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80037e8:	2b28      	cmp	r3, #40	; 0x28
 80037ea:	d107      	bne.n	80037fc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2228      	movs	r2, #40	; 0x28
 80037f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80037fa:	e015      	b.n	8003828 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003806:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800380a:	d00a      	beq.n	8003822 <I2C_ITError+0x7a>
 800380c:	7bfb      	ldrb	r3, [r7, #15]
 800380e:	2b60      	cmp	r3, #96	; 0x60
 8003810:	d007      	beq.n	8003822 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2220      	movs	r2, #32
 8003816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003832:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003836:	d162      	bne.n	80038fe <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	685a      	ldr	r2, [r3, #4]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003846:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800384c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b01      	cmp	r3, #1
 8003854:	d020      	beq.n	8003898 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800385a:	4a6a      	ldr	r2, [pc, #424]	; (8003a04 <I2C_ITError+0x25c>)
 800385c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003862:	4618      	mov	r0, r3
 8003864:	f7fd fe84 	bl	8001570 <HAL_DMA_Abort_IT>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	f000 8089 	beq.w	8003982 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f022 0201 	bic.w	r2, r2, #1
 800387e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2220      	movs	r2, #32
 8003884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800388c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003892:	4610      	mov	r0, r2
 8003894:	4798      	blx	r3
 8003896:	e074      	b.n	8003982 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389c:	4a59      	ldr	r2, [pc, #356]	; (8003a04 <I2C_ITError+0x25c>)
 800389e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7fd fe63 	bl	8001570 <HAL_DMA_Abort_IT>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d068      	beq.n	8003982 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ba:	2b40      	cmp	r3, #64	; 0x40
 80038bc:	d10b      	bne.n	80038d6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	691a      	ldr	r2, [r3, #16]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c8:	b2d2      	uxtb	r2, r2
 80038ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d0:	1c5a      	adds	r2, r3, #1
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f022 0201 	bic.w	r2, r2, #1
 80038e4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2220      	movs	r2, #32
 80038ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80038f8:	4610      	mov	r0, r2
 80038fa:	4798      	blx	r3
 80038fc:	e041      	b.n	8003982 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b60      	cmp	r3, #96	; 0x60
 8003908:	d125      	bne.n	8003956 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2220      	movs	r2, #32
 800390e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003922:	2b40      	cmp	r3, #64	; 0x40
 8003924:	d10b      	bne.n	800393e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	691a      	ldr	r2, [r3, #16]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003930:	b2d2      	uxtb	r2, r2
 8003932:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003938:	1c5a      	adds	r2, r3, #1
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f022 0201 	bic.w	r2, r2, #1
 800394c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7fe fef6 	bl	8002740 <HAL_I2C_AbortCpltCallback>
 8003954:	e015      	b.n	8003982 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	695b      	ldr	r3, [r3, #20]
 800395c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003960:	2b40      	cmp	r3, #64	; 0x40
 8003962:	d10b      	bne.n	800397c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	691a      	ldr	r2, [r3, #16]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396e:	b2d2      	uxtb	r2, r2
 8003970:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003976:	1c5a      	adds	r2, r3, #1
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f7fe fed5 	bl	800272c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003986:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10e      	bne.n	80039b0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003998:	2b00      	cmp	r3, #0
 800399a:	d109      	bne.n	80039b0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d104      	bne.n	80039b0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d007      	beq.n	80039c0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	685a      	ldr	r2, [r3, #4]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80039be:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039c6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039cc:	f003 0304 	and.w	r3, r3, #4
 80039d0:	2b04      	cmp	r3, #4
 80039d2:	d113      	bne.n	80039fc <I2C_ITError+0x254>
 80039d4:	7bfb      	ldrb	r3, [r7, #15]
 80039d6:	2b28      	cmp	r3, #40	; 0x28
 80039d8:	d110      	bne.n	80039fc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a0a      	ldr	r2, [pc, #40]	; (8003a08 <I2C_ITError+0x260>)
 80039de:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2220      	movs	r2, #32
 80039ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f7fe fe7a 	bl	80026f0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80039fc:	bf00      	nop
 80039fe:	3710      	adds	r7, #16
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	08003cad 	.word	0x08003cad
 8003a08:	ffff0000 	.word	0xffff0000

08003a0c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b088      	sub	sp, #32
 8003a10:	af02      	add	r7, sp, #8
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	607a      	str	r2, [r7, #4]
 8003a16:	603b      	str	r3, [r7, #0]
 8003a18:	460b      	mov	r3, r1
 8003a1a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a20:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	2b08      	cmp	r3, #8
 8003a26:	d006      	beq.n	8003a36 <I2C_MasterRequestWrite+0x2a>
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d003      	beq.n	8003a36 <I2C_MasterRequestWrite+0x2a>
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a34:	d108      	bne.n	8003a48 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a44:	601a      	str	r2, [r3, #0]
 8003a46:	e00b      	b.n	8003a60 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4c:	2b12      	cmp	r3, #18
 8003a4e:	d107      	bne.n	8003a60 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a5e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	9300      	str	r3, [sp, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a6c:	68f8      	ldr	r0, [r7, #12]
 8003a6e:	f000 f9c5 	bl	8003dfc <I2C_WaitOnFlagUntilTimeout>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d00d      	beq.n	8003a94 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a86:	d103      	bne.n	8003a90 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a8e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e035      	b.n	8003b00 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a9c:	d108      	bne.n	8003ab0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a9e:	897b      	ldrh	r3, [r7, #10]
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003aac:	611a      	str	r2, [r3, #16]
 8003aae:	e01b      	b.n	8003ae8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003ab0:	897b      	ldrh	r3, [r7, #10]
 8003ab2:	11db      	asrs	r3, r3, #7
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	f003 0306 	and.w	r3, r3, #6
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	f063 030f 	orn	r3, r3, #15
 8003ac0:	b2da      	uxtb	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	490e      	ldr	r1, [pc, #56]	; (8003b08 <I2C_MasterRequestWrite+0xfc>)
 8003ace:	68f8      	ldr	r0, [r7, #12]
 8003ad0:	f000 f9eb 	bl	8003eaa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e010      	b.n	8003b00 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003ade:	897b      	ldrh	r3, [r7, #10]
 8003ae0:	b2da      	uxtb	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	4907      	ldr	r1, [pc, #28]	; (8003b0c <I2C_MasterRequestWrite+0x100>)
 8003aee:	68f8      	ldr	r0, [r7, #12]
 8003af0:	f000 f9db 	bl	8003eaa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e000      	b.n	8003b00 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3718      	adds	r7, #24
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	00010008 	.word	0x00010008
 8003b0c:	00010002 	.word	0x00010002

08003b10 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b088      	sub	sp, #32
 8003b14:	af02      	add	r7, sp, #8
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	607a      	str	r2, [r7, #4]
 8003b1a:	603b      	str	r3, [r7, #0]
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b24:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b34:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	2b08      	cmp	r3, #8
 8003b3a:	d006      	beq.n	8003b4a <I2C_MasterRequestRead+0x3a>
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d003      	beq.n	8003b4a <I2C_MasterRequestRead+0x3a>
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b48:	d108      	bne.n	8003b5c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b58:	601a      	str	r2, [r3, #0]
 8003b5a:	e00b      	b.n	8003b74 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b60:	2b11      	cmp	r3, #17
 8003b62:	d107      	bne.n	8003b74 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b72:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	9300      	str	r3, [sp, #0]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b80:	68f8      	ldr	r0, [r7, #12]
 8003b82:	f000 f93b 	bl	8003dfc <I2C_WaitOnFlagUntilTimeout>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00d      	beq.n	8003ba8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b9a:	d103      	bne.n	8003ba4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ba2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e079      	b.n	8003c9c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bb0:	d108      	bne.n	8003bc4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003bb2:	897b      	ldrh	r3, [r7, #10]
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	f043 0301 	orr.w	r3, r3, #1
 8003bba:	b2da      	uxtb	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	611a      	str	r2, [r3, #16]
 8003bc2:	e05f      	b.n	8003c84 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003bc4:	897b      	ldrh	r3, [r7, #10]
 8003bc6:	11db      	asrs	r3, r3, #7
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	f003 0306 	and.w	r3, r3, #6
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	f063 030f 	orn	r3, r3, #15
 8003bd4:	b2da      	uxtb	r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	4930      	ldr	r1, [pc, #192]	; (8003ca4 <I2C_MasterRequestRead+0x194>)
 8003be2:	68f8      	ldr	r0, [r7, #12]
 8003be4:	f000 f961 	bl	8003eaa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e054      	b.n	8003c9c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003bf2:	897b      	ldrh	r3, [r7, #10]
 8003bf4:	b2da      	uxtb	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	4929      	ldr	r1, [pc, #164]	; (8003ca8 <I2C_MasterRequestRead+0x198>)
 8003c02:	68f8      	ldr	r0, [r7, #12]
 8003c04:	f000 f951 	bl	8003eaa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e044      	b.n	8003c9c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c12:	2300      	movs	r3, #0
 8003c14:	613b      	str	r3, [r7, #16]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	695b      	ldr	r3, [r3, #20]
 8003c1c:	613b      	str	r3, [r7, #16]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	613b      	str	r3, [r7, #16]
 8003c26:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c36:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f000 f8d9 	bl	8003dfc <I2C_WaitOnFlagUntilTimeout>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d00d      	beq.n	8003c6c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c5e:	d103      	bne.n	8003c68 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c66:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e017      	b.n	8003c9c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003c6c:	897b      	ldrh	r3, [r7, #10]
 8003c6e:	11db      	asrs	r3, r3, #7
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	f003 0306 	and.w	r3, r3, #6
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	f063 030e 	orn	r3, r3, #14
 8003c7c:	b2da      	uxtb	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	4907      	ldr	r1, [pc, #28]	; (8003ca8 <I2C_MasterRequestRead+0x198>)
 8003c8a:	68f8      	ldr	r0, [r7, #12]
 8003c8c:	f000 f90d 	bl	8003eaa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d001      	beq.n	8003c9a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e000      	b.n	8003c9c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3718      	adds	r7, #24
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	00010008 	.word	0x00010008
 8003ca8:	00010002 	.word	0x00010002

08003cac <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b086      	sub	sp, #24
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cbc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cc4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003cc6:	4b4b      	ldr	r3, [pc, #300]	; (8003df4 <I2C_DMAAbort+0x148>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	08db      	lsrs	r3, r3, #3
 8003ccc:	4a4a      	ldr	r2, [pc, #296]	; (8003df8 <I2C_DMAAbort+0x14c>)
 8003cce:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd2:	0a1a      	lsrs	r2, r3, #8
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	4413      	add	r3, r2
 8003cda:	00da      	lsls	r2, r3, #3
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d106      	bne.n	8003cf4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cea:	f043 0220 	orr.w	r2, r3, #32
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003cf2:	e00a      	b.n	8003d0a <I2C_DMAAbort+0x5e>
    }
    count--;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d08:	d0ea      	beq.n	8003ce0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d003      	beq.n	8003d1a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d16:	2200      	movs	r2, #0
 8003d18:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d003      	beq.n	8003d2a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d26:	2200      	movs	r2, #0
 8003d28:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d38:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d003      	beq.n	8003d50 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d003      	beq.n	8003d60 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f022 0201 	bic.w	r2, r2, #1
 8003d6e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2b60      	cmp	r3, #96	; 0x60
 8003d7a:	d10e      	bne.n	8003d9a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	2220      	movs	r2, #32
 8003d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003d92:	6978      	ldr	r0, [r7, #20]
 8003d94:	f7fe fcd4 	bl	8002740 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003d98:	e027      	b.n	8003dea <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d9a:	7cfb      	ldrb	r3, [r7, #19]
 8003d9c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003da0:	2b28      	cmp	r3, #40	; 0x28
 8003da2:	d117      	bne.n	8003dd4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f042 0201 	orr.w	r2, r2, #1
 8003db2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003dc2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	2228      	movs	r2, #40	; 0x28
 8003dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003dd2:	e007      	b.n	8003de4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	2220      	movs	r2, #32
 8003dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003de4:	6978      	ldr	r0, [r7, #20]
 8003de6:	f7fe fca1 	bl	800272c <HAL_I2C_ErrorCallback>
}
 8003dea:	bf00      	nop
 8003dec:	3718      	adds	r7, #24
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	20000000 	.word	0x20000000
 8003df8:	14f8b589 	.word	0x14f8b589

08003dfc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	603b      	str	r3, [r7, #0]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e0c:	e025      	b.n	8003e5a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e14:	d021      	beq.n	8003e5a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e16:	f7fd fa4d 	bl	80012b4 <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d302      	bcc.n	8003e2c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d116      	bne.n	8003e5a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2220      	movs	r2, #32
 8003e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	f043 0220 	orr.w	r2, r3, #32
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e023      	b.n	8003ea2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	0c1b      	lsrs	r3, r3, #16
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d10d      	bne.n	8003e80 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	43da      	mvns	r2, r3
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	4013      	ands	r3, r2
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	bf0c      	ite	eq
 8003e76:	2301      	moveq	r3, #1
 8003e78:	2300      	movne	r3, #0
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	e00c      	b.n	8003e9a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	43da      	mvns	r2, r3
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	bf0c      	ite	eq
 8003e92:	2301      	moveq	r3, #1
 8003e94:	2300      	movne	r3, #0
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	461a      	mov	r2, r3
 8003e9a:	79fb      	ldrb	r3, [r7, #7]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d0b6      	beq.n	8003e0e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ea0:	2300      	movs	r3, #0
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3710      	adds	r7, #16
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b084      	sub	sp, #16
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	60f8      	str	r0, [r7, #12]
 8003eb2:	60b9      	str	r1, [r7, #8]
 8003eb4:	607a      	str	r2, [r7, #4]
 8003eb6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003eb8:	e051      	b.n	8003f5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ec4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ec8:	d123      	bne.n	8003f12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ed8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ee2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2220      	movs	r2, #32
 8003eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efe:	f043 0204 	orr.w	r2, r3, #4
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e046      	b.n	8003fa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f18:	d021      	beq.n	8003f5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f1a:	f7fd f9cb 	bl	80012b4 <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d302      	bcc.n	8003f30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d116      	bne.n	8003f5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2200      	movs	r2, #0
 8003f34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2220      	movs	r2, #32
 8003f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4a:	f043 0220 	orr.w	r2, r3, #32
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e020      	b.n	8003fa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	0c1b      	lsrs	r3, r3, #16
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d10c      	bne.n	8003f82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	43da      	mvns	r2, r3
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	4013      	ands	r3, r2
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	bf14      	ite	ne
 8003f7a:	2301      	movne	r3, #1
 8003f7c:	2300      	moveq	r3, #0
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	e00b      	b.n	8003f9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	43da      	mvns	r2, r3
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	bf14      	ite	ne
 8003f94:	2301      	movne	r3, #1
 8003f96:	2300      	moveq	r3, #0
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d18d      	bne.n	8003eba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3710      	adds	r7, #16
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fb4:	e02d      	b.n	8004012 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003fb6:	68f8      	ldr	r0, [r7, #12]
 8003fb8:	f000 f900 	bl	80041bc <I2C_IsAcknowledgeFailed>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d001      	beq.n	8003fc6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e02d      	b.n	8004022 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fcc:	d021      	beq.n	8004012 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fce:	f7fd f971 	bl	80012b4 <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	68ba      	ldr	r2, [r7, #8]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d302      	bcc.n	8003fe4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d116      	bne.n	8004012 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2220      	movs	r2, #32
 8003fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffe:	f043 0220 	orr.w	r2, r3, #32
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e007      	b.n	8004022 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800401c:	2b80      	cmp	r3, #128	; 0x80
 800401e:	d1ca      	bne.n	8003fb6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3710      	adds	r7, #16
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}

0800402a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800402a:	b580      	push	{r7, lr}
 800402c:	b084      	sub	sp, #16
 800402e:	af00      	add	r7, sp, #0
 8004030:	60f8      	str	r0, [r7, #12]
 8004032:	60b9      	str	r1, [r7, #8]
 8004034:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004036:	e02d      	b.n	8004094 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004038:	68f8      	ldr	r0, [r7, #12]
 800403a:	f000 f8bf 	bl	80041bc <I2C_IsAcknowledgeFailed>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d001      	beq.n	8004048 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e02d      	b.n	80040a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800404e:	d021      	beq.n	8004094 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004050:	f7fd f930 	bl	80012b4 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	68ba      	ldr	r2, [r7, #8]
 800405c:	429a      	cmp	r2, r3
 800405e:	d302      	bcc.n	8004066 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d116      	bne.n	8004094 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2220      	movs	r2, #32
 8004070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004080:	f043 0220 	orr.w	r2, r3, #32
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e007      	b.n	80040a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	f003 0304 	and.w	r3, r3, #4
 800409e:	2b04      	cmp	r3, #4
 80040a0:	d1ca      	bne.n	8004038 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3710      	adds	r7, #16
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80040b4:	2300      	movs	r3, #0
 80040b6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80040b8:	4b13      	ldr	r3, [pc, #76]	; (8004108 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	08db      	lsrs	r3, r3, #3
 80040be:	4a13      	ldr	r2, [pc, #76]	; (800410c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80040c0:	fba2 2303 	umull	r2, r3, r2, r3
 80040c4:	0a1a      	lsrs	r2, r3, #8
 80040c6:	4613      	mov	r3, r2
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	4413      	add	r3, r2
 80040cc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	3b01      	subs	r3, #1
 80040d2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d107      	bne.n	80040ea <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040de:	f043 0220 	orr.w	r2, r3, #32
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e008      	b.n	80040fc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040f8:	d0e9      	beq.n	80040ce <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80040fa:	2300      	movs	r3, #0
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3714      	adds	r7, #20
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr
 8004108:	20000000 	.word	0x20000000
 800410c:	14f8b589 	.word	0x14f8b589

08004110 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800411c:	e042      	b.n	80041a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	695b      	ldr	r3, [r3, #20]
 8004124:	f003 0310 	and.w	r3, r3, #16
 8004128:	2b10      	cmp	r3, #16
 800412a:	d119      	bne.n	8004160 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f06f 0210 	mvn.w	r2, #16
 8004134:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2220      	movs	r2, #32
 8004140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e029      	b.n	80041b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004160:	f7fd f8a8 	bl	80012b4 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	68ba      	ldr	r2, [r7, #8]
 800416c:	429a      	cmp	r2, r3
 800416e:	d302      	bcc.n	8004176 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d116      	bne.n	80041a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2220      	movs	r2, #32
 8004180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004190:	f043 0220 	orr.w	r2, r3, #32
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e007      	b.n	80041b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ae:	2b40      	cmp	r3, #64	; 0x40
 80041b0:	d1b5      	bne.n	800411e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3710      	adds	r7, #16
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041d2:	d11b      	bne.n	800420c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041dc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2220      	movs	r2, #32
 80041e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f8:	f043 0204 	orr.w	r2, r3, #4
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e000      	b.n	800420e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	370c      	adds	r7, #12
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr

0800421a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800421a:	b480      	push	{r7}
 800421c:	b083      	sub	sp, #12
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004226:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800422a:	d103      	bne.n	8004234 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004232:	e007      	b.n	8004244 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004238:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800423c:	d102      	bne.n	8004244 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2208      	movs	r2, #8
 8004242:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004244:	bf00      	nop
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b086      	sub	sp, #24
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e264      	b.n	800472c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	2b00      	cmp	r3, #0
 800426c:	d075      	beq.n	800435a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800426e:	4ba3      	ldr	r3, [pc, #652]	; (80044fc <HAL_RCC_OscConfig+0x2ac>)
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f003 030c 	and.w	r3, r3, #12
 8004276:	2b04      	cmp	r3, #4
 8004278:	d00c      	beq.n	8004294 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800427a:	4ba0      	ldr	r3, [pc, #640]	; (80044fc <HAL_RCC_OscConfig+0x2ac>)
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004282:	2b08      	cmp	r3, #8
 8004284:	d112      	bne.n	80042ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004286:	4b9d      	ldr	r3, [pc, #628]	; (80044fc <HAL_RCC_OscConfig+0x2ac>)
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800428e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004292:	d10b      	bne.n	80042ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004294:	4b99      	ldr	r3, [pc, #612]	; (80044fc <HAL_RCC_OscConfig+0x2ac>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d05b      	beq.n	8004358 <HAL_RCC_OscConfig+0x108>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d157      	bne.n	8004358 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e23f      	b.n	800472c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042b4:	d106      	bne.n	80042c4 <HAL_RCC_OscConfig+0x74>
 80042b6:	4b91      	ldr	r3, [pc, #580]	; (80044fc <HAL_RCC_OscConfig+0x2ac>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a90      	ldr	r2, [pc, #576]	; (80044fc <HAL_RCC_OscConfig+0x2ac>)
 80042bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042c0:	6013      	str	r3, [r2, #0]
 80042c2:	e01d      	b.n	8004300 <HAL_RCC_OscConfig+0xb0>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042cc:	d10c      	bne.n	80042e8 <HAL_RCC_OscConfig+0x98>
 80042ce:	4b8b      	ldr	r3, [pc, #556]	; (80044fc <HAL_RCC_OscConfig+0x2ac>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a8a      	ldr	r2, [pc, #552]	; (80044fc <HAL_RCC_OscConfig+0x2ac>)
 80042d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042d8:	6013      	str	r3, [r2, #0]
 80042da:	4b88      	ldr	r3, [pc, #544]	; (80044fc <HAL_RCC_OscConfig+0x2ac>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a87      	ldr	r2, [pc, #540]	; (80044fc <HAL_RCC_OscConfig+0x2ac>)
 80042e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042e4:	6013      	str	r3, [r2, #0]
 80042e6:	e00b      	b.n	8004300 <HAL_RCC_OscConfig+0xb0>
 80042e8:	4b84      	ldr	r3, [pc, #528]	; (80044fc <HAL_RCC_OscConfig+0x2ac>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a83      	ldr	r2, [pc, #524]	; (80044fc <HAL_RCC_OscConfig+0x2ac>)
 80042ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042f2:	6013      	str	r3, [r2, #0]
 80042f4:	4b81      	ldr	r3, [pc, #516]	; (80044fc <HAL_RCC_OscConfig+0x2ac>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a80      	ldr	r2, [pc, #512]	; (80044fc <HAL_RCC_OscConfig+0x2ac>)
 80042fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d013      	beq.n	8004330 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004308:	f7fc ffd4 	bl	80012b4 <HAL_GetTick>
 800430c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800430e:	e008      	b.n	8004322 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004310:	f7fc ffd0 	bl	80012b4 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b64      	cmp	r3, #100	; 0x64
 800431c:	d901      	bls.n	8004322 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e204      	b.n	800472c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004322:	4b76      	ldr	r3, [pc, #472]	; (80044fc <HAL_RCC_OscConfig+0x2ac>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d0f0      	beq.n	8004310 <HAL_RCC_OscConfig+0xc0>
 800432e:	e014      	b.n	800435a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004330:	f7fc ffc0 	bl	80012b4 <HAL_GetTick>
 8004334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004336:	e008      	b.n	800434a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004338:	f7fc ffbc 	bl	80012b4 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b64      	cmp	r3, #100	; 0x64
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e1f0      	b.n	800472c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800434a:	4b6c      	ldr	r3, [pc, #432]	; (80044fc <HAL_RCC_OscConfig+0x2ac>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1f0      	bne.n	8004338 <HAL_RCC_OscConfig+0xe8>
 8004356:	e000      	b.n	800435a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004358:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0302 	and.w	r3, r3, #2
 8004362:	2b00      	cmp	r3, #0
 8004364:	d063      	beq.n	800442e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004366:	4b65      	ldr	r3, [pc, #404]	; (80044fc <HAL_RCC_OscConfig+0x2ac>)
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f003 030c 	and.w	r3, r3, #12
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00b      	beq.n	800438a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004372:	4b62      	ldr	r3, [pc, #392]	; (80044fc <HAL_RCC_OscConfig+0x2ac>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800437a:	2b08      	cmp	r3, #8
 800437c:	d11c      	bne.n	80043b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800437e:	4b5f      	ldr	r3, [pc, #380]	; (80044fc <HAL_RCC_OscConfig+0x2ac>)
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d116      	bne.n	80043b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800438a:	4b5c      	ldr	r3, [pc, #368]	; (80044fc <HAL_RCC_OscConfig+0x2ac>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d005      	beq.n	80043a2 <HAL_RCC_OscConfig+0x152>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d001      	beq.n	80043a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e1c4      	b.n	800472c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043a2:	4b56      	ldr	r3, [pc, #344]	; (80044fc <HAL_RCC_OscConfig+0x2ac>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	00db      	lsls	r3, r3, #3
 80043b0:	4952      	ldr	r1, [pc, #328]	; (80044fc <HAL_RCC_OscConfig+0x2ac>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043b6:	e03a      	b.n	800442e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d020      	beq.n	8004402 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043c0:	4b4f      	ldr	r3, [pc, #316]	; (8004500 <HAL_RCC_OscConfig+0x2b0>)
 80043c2:	2201      	movs	r2, #1
 80043c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c6:	f7fc ff75 	bl	80012b4 <HAL_GetTick>
 80043ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043cc:	e008      	b.n	80043e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043ce:	f7fc ff71 	bl	80012b4 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d901      	bls.n	80043e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e1a5      	b.n	800472c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043e0:	4b46      	ldr	r3, [pc, #280]	; (80044fc <HAL_RCC_OscConfig+0x2ac>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0302 	and.w	r3, r3, #2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d0f0      	beq.n	80043ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ec:	4b43      	ldr	r3, [pc, #268]	; (80044fc <HAL_RCC_OscConfig+0x2ac>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	00db      	lsls	r3, r3, #3
 80043fa:	4940      	ldr	r1, [pc, #256]	; (80044fc <HAL_RCC_OscConfig+0x2ac>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	600b      	str	r3, [r1, #0]
 8004400:	e015      	b.n	800442e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004402:	4b3f      	ldr	r3, [pc, #252]	; (8004500 <HAL_RCC_OscConfig+0x2b0>)
 8004404:	2200      	movs	r2, #0
 8004406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004408:	f7fc ff54 	bl	80012b4 <HAL_GetTick>
 800440c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800440e:	e008      	b.n	8004422 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004410:	f7fc ff50 	bl	80012b4 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b02      	cmp	r3, #2
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e184      	b.n	800472c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004422:	4b36      	ldr	r3, [pc, #216]	; (80044fc <HAL_RCC_OscConfig+0x2ac>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1f0      	bne.n	8004410 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0308 	and.w	r3, r3, #8
 8004436:	2b00      	cmp	r3, #0
 8004438:	d030      	beq.n	800449c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d016      	beq.n	8004470 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004442:	4b30      	ldr	r3, [pc, #192]	; (8004504 <HAL_RCC_OscConfig+0x2b4>)
 8004444:	2201      	movs	r2, #1
 8004446:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004448:	f7fc ff34 	bl	80012b4 <HAL_GetTick>
 800444c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800444e:	e008      	b.n	8004462 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004450:	f7fc ff30 	bl	80012b4 <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	2b02      	cmp	r3, #2
 800445c:	d901      	bls.n	8004462 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e164      	b.n	800472c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004462:	4b26      	ldr	r3, [pc, #152]	; (80044fc <HAL_RCC_OscConfig+0x2ac>)
 8004464:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d0f0      	beq.n	8004450 <HAL_RCC_OscConfig+0x200>
 800446e:	e015      	b.n	800449c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004470:	4b24      	ldr	r3, [pc, #144]	; (8004504 <HAL_RCC_OscConfig+0x2b4>)
 8004472:	2200      	movs	r2, #0
 8004474:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004476:	f7fc ff1d 	bl	80012b4 <HAL_GetTick>
 800447a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800447c:	e008      	b.n	8004490 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800447e:	f7fc ff19 	bl	80012b4 <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	2b02      	cmp	r3, #2
 800448a:	d901      	bls.n	8004490 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e14d      	b.n	800472c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004490:	4b1a      	ldr	r3, [pc, #104]	; (80044fc <HAL_RCC_OscConfig+0x2ac>)
 8004492:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004494:	f003 0302 	and.w	r3, r3, #2
 8004498:	2b00      	cmp	r3, #0
 800449a:	d1f0      	bne.n	800447e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0304 	and.w	r3, r3, #4
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	f000 80a0 	beq.w	80045ea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044aa:	2300      	movs	r3, #0
 80044ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044ae:	4b13      	ldr	r3, [pc, #76]	; (80044fc <HAL_RCC_OscConfig+0x2ac>)
 80044b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d10f      	bne.n	80044da <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044ba:	2300      	movs	r3, #0
 80044bc:	60bb      	str	r3, [r7, #8]
 80044be:	4b0f      	ldr	r3, [pc, #60]	; (80044fc <HAL_RCC_OscConfig+0x2ac>)
 80044c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c2:	4a0e      	ldr	r2, [pc, #56]	; (80044fc <HAL_RCC_OscConfig+0x2ac>)
 80044c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044c8:	6413      	str	r3, [r2, #64]	; 0x40
 80044ca:	4b0c      	ldr	r3, [pc, #48]	; (80044fc <HAL_RCC_OscConfig+0x2ac>)
 80044cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044d2:	60bb      	str	r3, [r7, #8]
 80044d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044d6:	2301      	movs	r3, #1
 80044d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044da:	4b0b      	ldr	r3, [pc, #44]	; (8004508 <HAL_RCC_OscConfig+0x2b8>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d121      	bne.n	800452a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044e6:	4b08      	ldr	r3, [pc, #32]	; (8004508 <HAL_RCC_OscConfig+0x2b8>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a07      	ldr	r2, [pc, #28]	; (8004508 <HAL_RCC_OscConfig+0x2b8>)
 80044ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044f2:	f7fc fedf 	bl	80012b4 <HAL_GetTick>
 80044f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044f8:	e011      	b.n	800451e <HAL_RCC_OscConfig+0x2ce>
 80044fa:	bf00      	nop
 80044fc:	40023800 	.word	0x40023800
 8004500:	42470000 	.word	0x42470000
 8004504:	42470e80 	.word	0x42470e80
 8004508:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800450c:	f7fc fed2 	bl	80012b4 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b02      	cmp	r3, #2
 8004518:	d901      	bls.n	800451e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e106      	b.n	800472c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800451e:	4b85      	ldr	r3, [pc, #532]	; (8004734 <HAL_RCC_OscConfig+0x4e4>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004526:	2b00      	cmp	r3, #0
 8004528:	d0f0      	beq.n	800450c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	2b01      	cmp	r3, #1
 8004530:	d106      	bne.n	8004540 <HAL_RCC_OscConfig+0x2f0>
 8004532:	4b81      	ldr	r3, [pc, #516]	; (8004738 <HAL_RCC_OscConfig+0x4e8>)
 8004534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004536:	4a80      	ldr	r2, [pc, #512]	; (8004738 <HAL_RCC_OscConfig+0x4e8>)
 8004538:	f043 0301 	orr.w	r3, r3, #1
 800453c:	6713      	str	r3, [r2, #112]	; 0x70
 800453e:	e01c      	b.n	800457a <HAL_RCC_OscConfig+0x32a>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	2b05      	cmp	r3, #5
 8004546:	d10c      	bne.n	8004562 <HAL_RCC_OscConfig+0x312>
 8004548:	4b7b      	ldr	r3, [pc, #492]	; (8004738 <HAL_RCC_OscConfig+0x4e8>)
 800454a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800454c:	4a7a      	ldr	r2, [pc, #488]	; (8004738 <HAL_RCC_OscConfig+0x4e8>)
 800454e:	f043 0304 	orr.w	r3, r3, #4
 8004552:	6713      	str	r3, [r2, #112]	; 0x70
 8004554:	4b78      	ldr	r3, [pc, #480]	; (8004738 <HAL_RCC_OscConfig+0x4e8>)
 8004556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004558:	4a77      	ldr	r2, [pc, #476]	; (8004738 <HAL_RCC_OscConfig+0x4e8>)
 800455a:	f043 0301 	orr.w	r3, r3, #1
 800455e:	6713      	str	r3, [r2, #112]	; 0x70
 8004560:	e00b      	b.n	800457a <HAL_RCC_OscConfig+0x32a>
 8004562:	4b75      	ldr	r3, [pc, #468]	; (8004738 <HAL_RCC_OscConfig+0x4e8>)
 8004564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004566:	4a74      	ldr	r2, [pc, #464]	; (8004738 <HAL_RCC_OscConfig+0x4e8>)
 8004568:	f023 0301 	bic.w	r3, r3, #1
 800456c:	6713      	str	r3, [r2, #112]	; 0x70
 800456e:	4b72      	ldr	r3, [pc, #456]	; (8004738 <HAL_RCC_OscConfig+0x4e8>)
 8004570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004572:	4a71      	ldr	r2, [pc, #452]	; (8004738 <HAL_RCC_OscConfig+0x4e8>)
 8004574:	f023 0304 	bic.w	r3, r3, #4
 8004578:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d015      	beq.n	80045ae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004582:	f7fc fe97 	bl	80012b4 <HAL_GetTick>
 8004586:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004588:	e00a      	b.n	80045a0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800458a:	f7fc fe93 	bl	80012b4 <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	f241 3288 	movw	r2, #5000	; 0x1388
 8004598:	4293      	cmp	r3, r2
 800459a:	d901      	bls.n	80045a0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e0c5      	b.n	800472c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045a0:	4b65      	ldr	r3, [pc, #404]	; (8004738 <HAL_RCC_OscConfig+0x4e8>)
 80045a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a4:	f003 0302 	and.w	r3, r3, #2
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d0ee      	beq.n	800458a <HAL_RCC_OscConfig+0x33a>
 80045ac:	e014      	b.n	80045d8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045ae:	f7fc fe81 	bl	80012b4 <HAL_GetTick>
 80045b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045b4:	e00a      	b.n	80045cc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045b6:	f7fc fe7d 	bl	80012b4 <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d901      	bls.n	80045cc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	e0af      	b.n	800472c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045cc:	4b5a      	ldr	r3, [pc, #360]	; (8004738 <HAL_RCC_OscConfig+0x4e8>)
 80045ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d0:	f003 0302 	and.w	r3, r3, #2
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d1ee      	bne.n	80045b6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045d8:	7dfb      	ldrb	r3, [r7, #23]
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d105      	bne.n	80045ea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045de:	4b56      	ldr	r3, [pc, #344]	; (8004738 <HAL_RCC_OscConfig+0x4e8>)
 80045e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e2:	4a55      	ldr	r2, [pc, #340]	; (8004738 <HAL_RCC_OscConfig+0x4e8>)
 80045e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	699b      	ldr	r3, [r3, #24]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	f000 809b 	beq.w	800472a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045f4:	4b50      	ldr	r3, [pc, #320]	; (8004738 <HAL_RCC_OscConfig+0x4e8>)
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f003 030c 	and.w	r3, r3, #12
 80045fc:	2b08      	cmp	r3, #8
 80045fe:	d05c      	beq.n	80046ba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	2b02      	cmp	r3, #2
 8004606:	d141      	bne.n	800468c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004608:	4b4c      	ldr	r3, [pc, #304]	; (800473c <HAL_RCC_OscConfig+0x4ec>)
 800460a:	2200      	movs	r2, #0
 800460c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800460e:	f7fc fe51 	bl	80012b4 <HAL_GetTick>
 8004612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004614:	e008      	b.n	8004628 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004616:	f7fc fe4d 	bl	80012b4 <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	2b02      	cmp	r3, #2
 8004622:	d901      	bls.n	8004628 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e081      	b.n	800472c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004628:	4b43      	ldr	r3, [pc, #268]	; (8004738 <HAL_RCC_OscConfig+0x4e8>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d1f0      	bne.n	8004616 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	69da      	ldr	r2, [r3, #28]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a1b      	ldr	r3, [r3, #32]
 800463c:	431a      	orrs	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004642:	019b      	lsls	r3, r3, #6
 8004644:	431a      	orrs	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800464a:	085b      	lsrs	r3, r3, #1
 800464c:	3b01      	subs	r3, #1
 800464e:	041b      	lsls	r3, r3, #16
 8004650:	431a      	orrs	r2, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004656:	061b      	lsls	r3, r3, #24
 8004658:	4937      	ldr	r1, [pc, #220]	; (8004738 <HAL_RCC_OscConfig+0x4e8>)
 800465a:	4313      	orrs	r3, r2
 800465c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800465e:	4b37      	ldr	r3, [pc, #220]	; (800473c <HAL_RCC_OscConfig+0x4ec>)
 8004660:	2201      	movs	r2, #1
 8004662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004664:	f7fc fe26 	bl	80012b4 <HAL_GetTick>
 8004668:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800466a:	e008      	b.n	800467e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800466c:	f7fc fe22 	bl	80012b4 <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	2b02      	cmp	r3, #2
 8004678:	d901      	bls.n	800467e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e056      	b.n	800472c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800467e:	4b2e      	ldr	r3, [pc, #184]	; (8004738 <HAL_RCC_OscConfig+0x4e8>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d0f0      	beq.n	800466c <HAL_RCC_OscConfig+0x41c>
 800468a:	e04e      	b.n	800472a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800468c:	4b2b      	ldr	r3, [pc, #172]	; (800473c <HAL_RCC_OscConfig+0x4ec>)
 800468e:	2200      	movs	r2, #0
 8004690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004692:	f7fc fe0f 	bl	80012b4 <HAL_GetTick>
 8004696:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004698:	e008      	b.n	80046ac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800469a:	f7fc fe0b 	bl	80012b4 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d901      	bls.n	80046ac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e03f      	b.n	800472c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046ac:	4b22      	ldr	r3, [pc, #136]	; (8004738 <HAL_RCC_OscConfig+0x4e8>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d1f0      	bne.n	800469a <HAL_RCC_OscConfig+0x44a>
 80046b8:	e037      	b.n	800472a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	699b      	ldr	r3, [r3, #24]
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d101      	bne.n	80046c6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e032      	b.n	800472c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80046c6:	4b1c      	ldr	r3, [pc, #112]	; (8004738 <HAL_RCC_OscConfig+0x4e8>)
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	699b      	ldr	r3, [r3, #24]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d028      	beq.n	8004726 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046de:	429a      	cmp	r2, r3
 80046e0:	d121      	bne.n	8004726 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d11a      	bne.n	8004726 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80046f6:	4013      	ands	r3, r2
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80046fc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046fe:	4293      	cmp	r3, r2
 8004700:	d111      	bne.n	8004726 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800470c:	085b      	lsrs	r3, r3, #1
 800470e:	3b01      	subs	r3, #1
 8004710:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004712:	429a      	cmp	r2, r3
 8004714:	d107      	bne.n	8004726 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004720:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004722:	429a      	cmp	r2, r3
 8004724:	d001      	beq.n	800472a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e000      	b.n	800472c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800472a:	2300      	movs	r3, #0
}
 800472c:	4618      	mov	r0, r3
 800472e:	3718      	adds	r7, #24
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	40007000 	.word	0x40007000
 8004738:	40023800 	.word	0x40023800
 800473c:	42470060 	.word	0x42470060

08004740 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d101      	bne.n	8004754 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e0cc      	b.n	80048ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004754:	4b68      	ldr	r3, [pc, #416]	; (80048f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0307 	and.w	r3, r3, #7
 800475c:	683a      	ldr	r2, [r7, #0]
 800475e:	429a      	cmp	r2, r3
 8004760:	d90c      	bls.n	800477c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004762:	4b65      	ldr	r3, [pc, #404]	; (80048f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004764:	683a      	ldr	r2, [r7, #0]
 8004766:	b2d2      	uxtb	r2, r2
 8004768:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800476a:	4b63      	ldr	r3, [pc, #396]	; (80048f8 <HAL_RCC_ClockConfig+0x1b8>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0307 	and.w	r3, r3, #7
 8004772:	683a      	ldr	r2, [r7, #0]
 8004774:	429a      	cmp	r2, r3
 8004776:	d001      	beq.n	800477c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e0b8      	b.n	80048ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	2b00      	cmp	r3, #0
 8004786:	d020      	beq.n	80047ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0304 	and.w	r3, r3, #4
 8004790:	2b00      	cmp	r3, #0
 8004792:	d005      	beq.n	80047a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004794:	4b59      	ldr	r3, [pc, #356]	; (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	4a58      	ldr	r2, [pc, #352]	; (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 800479a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800479e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0308 	and.w	r3, r3, #8
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d005      	beq.n	80047b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047ac:	4b53      	ldr	r3, [pc, #332]	; (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	4a52      	ldr	r2, [pc, #328]	; (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 80047b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80047b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047b8:	4b50      	ldr	r3, [pc, #320]	; (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	494d      	ldr	r1, [pc, #308]	; (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d044      	beq.n	8004860 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d107      	bne.n	80047ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047de:	4b47      	ldr	r3, [pc, #284]	; (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d119      	bne.n	800481e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e07f      	b.n	80048ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d003      	beq.n	80047fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047fa:	2b03      	cmp	r3, #3
 80047fc:	d107      	bne.n	800480e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047fe:	4b3f      	ldr	r3, [pc, #252]	; (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d109      	bne.n	800481e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e06f      	b.n	80048ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800480e:	4b3b      	ldr	r3, [pc, #236]	; (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0302 	and.w	r3, r3, #2
 8004816:	2b00      	cmp	r3, #0
 8004818:	d101      	bne.n	800481e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e067      	b.n	80048ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800481e:	4b37      	ldr	r3, [pc, #220]	; (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f023 0203 	bic.w	r2, r3, #3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	4934      	ldr	r1, [pc, #208]	; (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 800482c:	4313      	orrs	r3, r2
 800482e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004830:	f7fc fd40 	bl	80012b4 <HAL_GetTick>
 8004834:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004836:	e00a      	b.n	800484e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004838:	f7fc fd3c 	bl	80012b4 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	f241 3288 	movw	r2, #5000	; 0x1388
 8004846:	4293      	cmp	r3, r2
 8004848:	d901      	bls.n	800484e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e04f      	b.n	80048ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800484e:	4b2b      	ldr	r3, [pc, #172]	; (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f003 020c 	and.w	r2, r3, #12
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	429a      	cmp	r2, r3
 800485e:	d1eb      	bne.n	8004838 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004860:	4b25      	ldr	r3, [pc, #148]	; (80048f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0307 	and.w	r3, r3, #7
 8004868:	683a      	ldr	r2, [r7, #0]
 800486a:	429a      	cmp	r2, r3
 800486c:	d20c      	bcs.n	8004888 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800486e:	4b22      	ldr	r3, [pc, #136]	; (80048f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004870:	683a      	ldr	r2, [r7, #0]
 8004872:	b2d2      	uxtb	r2, r2
 8004874:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004876:	4b20      	ldr	r3, [pc, #128]	; (80048f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0307 	and.w	r3, r3, #7
 800487e:	683a      	ldr	r2, [r7, #0]
 8004880:	429a      	cmp	r2, r3
 8004882:	d001      	beq.n	8004888 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e032      	b.n	80048ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0304 	and.w	r3, r3, #4
 8004890:	2b00      	cmp	r3, #0
 8004892:	d008      	beq.n	80048a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004894:	4b19      	ldr	r3, [pc, #100]	; (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	4916      	ldr	r1, [pc, #88]	; (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0308 	and.w	r3, r3, #8
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d009      	beq.n	80048c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048b2:	4b12      	ldr	r3, [pc, #72]	; (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	00db      	lsls	r3, r3, #3
 80048c0:	490e      	ldr	r1, [pc, #56]	; (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80048c6:	f000 f821 	bl	800490c <HAL_RCC_GetSysClockFreq>
 80048ca:	4602      	mov	r2, r0
 80048cc:	4b0b      	ldr	r3, [pc, #44]	; (80048fc <HAL_RCC_ClockConfig+0x1bc>)
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	091b      	lsrs	r3, r3, #4
 80048d2:	f003 030f 	and.w	r3, r3, #15
 80048d6:	490a      	ldr	r1, [pc, #40]	; (8004900 <HAL_RCC_ClockConfig+0x1c0>)
 80048d8:	5ccb      	ldrb	r3, [r1, r3]
 80048da:	fa22 f303 	lsr.w	r3, r2, r3
 80048de:	4a09      	ldr	r2, [pc, #36]	; (8004904 <HAL_RCC_ClockConfig+0x1c4>)
 80048e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80048e2:	4b09      	ldr	r3, [pc, #36]	; (8004908 <HAL_RCC_ClockConfig+0x1c8>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7fc faee 	bl	8000ec8 <HAL_InitTick>

  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3710      	adds	r7, #16
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	40023c00 	.word	0x40023c00
 80048fc:	40023800 	.word	0x40023800
 8004900:	0800794c 	.word	0x0800794c
 8004904:	20000000 	.word	0x20000000
 8004908:	20000004 	.word	0x20000004

0800490c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800490c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004910:	b084      	sub	sp, #16
 8004912:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004914:	2300      	movs	r3, #0
 8004916:	607b      	str	r3, [r7, #4]
 8004918:	2300      	movs	r3, #0
 800491a:	60fb      	str	r3, [r7, #12]
 800491c:	2300      	movs	r3, #0
 800491e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004920:	2300      	movs	r3, #0
 8004922:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004924:	4b67      	ldr	r3, [pc, #412]	; (8004ac4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f003 030c 	and.w	r3, r3, #12
 800492c:	2b08      	cmp	r3, #8
 800492e:	d00d      	beq.n	800494c <HAL_RCC_GetSysClockFreq+0x40>
 8004930:	2b08      	cmp	r3, #8
 8004932:	f200 80bd 	bhi.w	8004ab0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004936:	2b00      	cmp	r3, #0
 8004938:	d002      	beq.n	8004940 <HAL_RCC_GetSysClockFreq+0x34>
 800493a:	2b04      	cmp	r3, #4
 800493c:	d003      	beq.n	8004946 <HAL_RCC_GetSysClockFreq+0x3a>
 800493e:	e0b7      	b.n	8004ab0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004940:	4b61      	ldr	r3, [pc, #388]	; (8004ac8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004942:	60bb      	str	r3, [r7, #8]
       break;
 8004944:	e0b7      	b.n	8004ab6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004946:	4b61      	ldr	r3, [pc, #388]	; (8004acc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004948:	60bb      	str	r3, [r7, #8]
      break;
 800494a:	e0b4      	b.n	8004ab6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800494c:	4b5d      	ldr	r3, [pc, #372]	; (8004ac4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004954:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004956:	4b5b      	ldr	r3, [pc, #364]	; (8004ac4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d04d      	beq.n	80049fe <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004962:	4b58      	ldr	r3, [pc, #352]	; (8004ac4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	099b      	lsrs	r3, r3, #6
 8004968:	461a      	mov	r2, r3
 800496a:	f04f 0300 	mov.w	r3, #0
 800496e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004972:	f04f 0100 	mov.w	r1, #0
 8004976:	ea02 0800 	and.w	r8, r2, r0
 800497a:	ea03 0901 	and.w	r9, r3, r1
 800497e:	4640      	mov	r0, r8
 8004980:	4649      	mov	r1, r9
 8004982:	f04f 0200 	mov.w	r2, #0
 8004986:	f04f 0300 	mov.w	r3, #0
 800498a:	014b      	lsls	r3, r1, #5
 800498c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004990:	0142      	lsls	r2, r0, #5
 8004992:	4610      	mov	r0, r2
 8004994:	4619      	mov	r1, r3
 8004996:	ebb0 0008 	subs.w	r0, r0, r8
 800499a:	eb61 0109 	sbc.w	r1, r1, r9
 800499e:	f04f 0200 	mov.w	r2, #0
 80049a2:	f04f 0300 	mov.w	r3, #0
 80049a6:	018b      	lsls	r3, r1, #6
 80049a8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80049ac:	0182      	lsls	r2, r0, #6
 80049ae:	1a12      	subs	r2, r2, r0
 80049b0:	eb63 0301 	sbc.w	r3, r3, r1
 80049b4:	f04f 0000 	mov.w	r0, #0
 80049b8:	f04f 0100 	mov.w	r1, #0
 80049bc:	00d9      	lsls	r1, r3, #3
 80049be:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80049c2:	00d0      	lsls	r0, r2, #3
 80049c4:	4602      	mov	r2, r0
 80049c6:	460b      	mov	r3, r1
 80049c8:	eb12 0208 	adds.w	r2, r2, r8
 80049cc:	eb43 0309 	adc.w	r3, r3, r9
 80049d0:	f04f 0000 	mov.w	r0, #0
 80049d4:	f04f 0100 	mov.w	r1, #0
 80049d8:	0259      	lsls	r1, r3, #9
 80049da:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80049de:	0250      	lsls	r0, r2, #9
 80049e0:	4602      	mov	r2, r0
 80049e2:	460b      	mov	r3, r1
 80049e4:	4610      	mov	r0, r2
 80049e6:	4619      	mov	r1, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	461a      	mov	r2, r3
 80049ec:	f04f 0300 	mov.w	r3, #0
 80049f0:	f7fb fbee 	bl	80001d0 <__aeabi_uldivmod>
 80049f4:	4602      	mov	r2, r0
 80049f6:	460b      	mov	r3, r1
 80049f8:	4613      	mov	r3, r2
 80049fa:	60fb      	str	r3, [r7, #12]
 80049fc:	e04a      	b.n	8004a94 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049fe:	4b31      	ldr	r3, [pc, #196]	; (8004ac4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	099b      	lsrs	r3, r3, #6
 8004a04:	461a      	mov	r2, r3
 8004a06:	f04f 0300 	mov.w	r3, #0
 8004a0a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004a0e:	f04f 0100 	mov.w	r1, #0
 8004a12:	ea02 0400 	and.w	r4, r2, r0
 8004a16:	ea03 0501 	and.w	r5, r3, r1
 8004a1a:	4620      	mov	r0, r4
 8004a1c:	4629      	mov	r1, r5
 8004a1e:	f04f 0200 	mov.w	r2, #0
 8004a22:	f04f 0300 	mov.w	r3, #0
 8004a26:	014b      	lsls	r3, r1, #5
 8004a28:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004a2c:	0142      	lsls	r2, r0, #5
 8004a2e:	4610      	mov	r0, r2
 8004a30:	4619      	mov	r1, r3
 8004a32:	1b00      	subs	r0, r0, r4
 8004a34:	eb61 0105 	sbc.w	r1, r1, r5
 8004a38:	f04f 0200 	mov.w	r2, #0
 8004a3c:	f04f 0300 	mov.w	r3, #0
 8004a40:	018b      	lsls	r3, r1, #6
 8004a42:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004a46:	0182      	lsls	r2, r0, #6
 8004a48:	1a12      	subs	r2, r2, r0
 8004a4a:	eb63 0301 	sbc.w	r3, r3, r1
 8004a4e:	f04f 0000 	mov.w	r0, #0
 8004a52:	f04f 0100 	mov.w	r1, #0
 8004a56:	00d9      	lsls	r1, r3, #3
 8004a58:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a5c:	00d0      	lsls	r0, r2, #3
 8004a5e:	4602      	mov	r2, r0
 8004a60:	460b      	mov	r3, r1
 8004a62:	1912      	adds	r2, r2, r4
 8004a64:	eb45 0303 	adc.w	r3, r5, r3
 8004a68:	f04f 0000 	mov.w	r0, #0
 8004a6c:	f04f 0100 	mov.w	r1, #0
 8004a70:	0299      	lsls	r1, r3, #10
 8004a72:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004a76:	0290      	lsls	r0, r2, #10
 8004a78:	4602      	mov	r2, r0
 8004a7a:	460b      	mov	r3, r1
 8004a7c:	4610      	mov	r0, r2
 8004a7e:	4619      	mov	r1, r3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	461a      	mov	r2, r3
 8004a84:	f04f 0300 	mov.w	r3, #0
 8004a88:	f7fb fba2 	bl	80001d0 <__aeabi_uldivmod>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	460b      	mov	r3, r1
 8004a90:	4613      	mov	r3, r2
 8004a92:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a94:	4b0b      	ldr	r3, [pc, #44]	; (8004ac4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	0c1b      	lsrs	r3, r3, #16
 8004a9a:	f003 0303 	and.w	r3, r3, #3
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	005b      	lsls	r3, r3, #1
 8004aa2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aac:	60bb      	str	r3, [r7, #8]
      break;
 8004aae:	e002      	b.n	8004ab6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ab0:	4b05      	ldr	r3, [pc, #20]	; (8004ac8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004ab2:	60bb      	str	r3, [r7, #8]
      break;
 8004ab4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ab6:	68bb      	ldr	r3, [r7, #8]
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3710      	adds	r7, #16
 8004abc:	46bd      	mov	sp, r7
 8004abe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004ac2:	bf00      	nop
 8004ac4:	40023800 	.word	0x40023800
 8004ac8:	00f42400 	.word	0x00f42400
 8004acc:	007a1200 	.word	0x007a1200

08004ad0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ad4:	4b03      	ldr	r3, [pc, #12]	; (8004ae4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	20000000 	.word	0x20000000

08004ae8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004aec:	f7ff fff0 	bl	8004ad0 <HAL_RCC_GetHCLKFreq>
 8004af0:	4602      	mov	r2, r0
 8004af2:	4b05      	ldr	r3, [pc, #20]	; (8004b08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	0a9b      	lsrs	r3, r3, #10
 8004af8:	f003 0307 	and.w	r3, r3, #7
 8004afc:	4903      	ldr	r1, [pc, #12]	; (8004b0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004afe:	5ccb      	ldrb	r3, [r1, r3]
 8004b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	40023800 	.word	0x40023800
 8004b0c:	0800795c 	.word	0x0800795c

08004b10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b14:	f7ff ffdc 	bl	8004ad0 <HAL_RCC_GetHCLKFreq>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	4b05      	ldr	r3, [pc, #20]	; (8004b30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	0b5b      	lsrs	r3, r3, #13
 8004b20:	f003 0307 	and.w	r3, r3, #7
 8004b24:	4903      	ldr	r1, [pc, #12]	; (8004b34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b26:	5ccb      	ldrb	r3, [r1, r3]
 8004b28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	40023800 	.word	0x40023800
 8004b34:	0800795c 	.word	0x0800795c

08004b38 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	220f      	movs	r2, #15
 8004b46:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004b48:	4b12      	ldr	r3, [pc, #72]	; (8004b94 <HAL_RCC_GetClockConfig+0x5c>)
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f003 0203 	and.w	r2, r3, #3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004b54:	4b0f      	ldr	r3, [pc, #60]	; (8004b94 <HAL_RCC_GetClockConfig+0x5c>)
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004b60:	4b0c      	ldr	r3, [pc, #48]	; (8004b94 <HAL_RCC_GetClockConfig+0x5c>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004b6c:	4b09      	ldr	r3, [pc, #36]	; (8004b94 <HAL_RCC_GetClockConfig+0x5c>)
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	08db      	lsrs	r3, r3, #3
 8004b72:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004b7a:	4b07      	ldr	r3, [pc, #28]	; (8004b98 <HAL_RCC_GetClockConfig+0x60>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0207 	and.w	r2, r3, #7
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	601a      	str	r2, [r3, #0]
}
 8004b86:	bf00      	nop
 8004b88:	370c      	adds	r7, #12
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	40023800 	.word	0x40023800
 8004b98:	40023c00 	.word	0x40023c00

08004b9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d101      	bne.n	8004bae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e041      	b.n	8004c32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d106      	bne.n	8004bc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 f839 	bl	8004c3a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2202      	movs	r2, #2
 8004bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	3304      	adds	r3, #4
 8004bd8:	4619      	mov	r1, r3
 8004bda:	4610      	mov	r0, r2
 8004bdc:	f000 f9d8 	bl	8004f90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3708      	adds	r7, #8
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}

08004c3a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004c3a:	b480      	push	{r7}
 8004c3c:	b083      	sub	sp, #12
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004c42:	bf00      	nop
 8004c44:	370c      	adds	r7, #12
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr
	...

08004c50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b085      	sub	sp, #20
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d001      	beq.n	8004c68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e04e      	b.n	8004d06 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2202      	movs	r2, #2
 8004c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68da      	ldr	r2, [r3, #12]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f042 0201 	orr.w	r2, r2, #1
 8004c7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a23      	ldr	r2, [pc, #140]	; (8004d14 <HAL_TIM_Base_Start_IT+0xc4>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d022      	beq.n	8004cd0 <HAL_TIM_Base_Start_IT+0x80>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c92:	d01d      	beq.n	8004cd0 <HAL_TIM_Base_Start_IT+0x80>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a1f      	ldr	r2, [pc, #124]	; (8004d18 <HAL_TIM_Base_Start_IT+0xc8>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d018      	beq.n	8004cd0 <HAL_TIM_Base_Start_IT+0x80>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a1e      	ldr	r2, [pc, #120]	; (8004d1c <HAL_TIM_Base_Start_IT+0xcc>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d013      	beq.n	8004cd0 <HAL_TIM_Base_Start_IT+0x80>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a1c      	ldr	r2, [pc, #112]	; (8004d20 <HAL_TIM_Base_Start_IT+0xd0>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d00e      	beq.n	8004cd0 <HAL_TIM_Base_Start_IT+0x80>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a1b      	ldr	r2, [pc, #108]	; (8004d24 <HAL_TIM_Base_Start_IT+0xd4>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d009      	beq.n	8004cd0 <HAL_TIM_Base_Start_IT+0x80>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a19      	ldr	r2, [pc, #100]	; (8004d28 <HAL_TIM_Base_Start_IT+0xd8>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d004      	beq.n	8004cd0 <HAL_TIM_Base_Start_IT+0x80>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a18      	ldr	r2, [pc, #96]	; (8004d2c <HAL_TIM_Base_Start_IT+0xdc>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d111      	bne.n	8004cf4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f003 0307 	and.w	r3, r3, #7
 8004cda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2b06      	cmp	r3, #6
 8004ce0:	d010      	beq.n	8004d04 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f042 0201 	orr.w	r2, r2, #1
 8004cf0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cf2:	e007      	b.n	8004d04 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f042 0201 	orr.w	r2, r2, #1
 8004d02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3714      	adds	r7, #20
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	40010000 	.word	0x40010000
 8004d18:	40000400 	.word	0x40000400
 8004d1c:	40000800 	.word	0x40000800
 8004d20:	40000c00 	.word	0x40000c00
 8004d24:	40010400 	.word	0x40010400
 8004d28:	40014000 	.word	0x40014000
 8004d2c:	40001800 	.word	0x40001800

08004d30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b082      	sub	sp, #8
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d122      	bne.n	8004d8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	f003 0302 	and.w	r3, r3, #2
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d11b      	bne.n	8004d8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f06f 0202 	mvn.w	r2, #2
 8004d5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2201      	movs	r2, #1
 8004d62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	699b      	ldr	r3, [r3, #24]
 8004d6a:	f003 0303 	and.w	r3, r3, #3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d003      	beq.n	8004d7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 f8ee 	bl	8004f54 <HAL_TIM_IC_CaptureCallback>
 8004d78:	e005      	b.n	8004d86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 f8e0 	bl	8004f40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f000 f8f1 	bl	8004f68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	f003 0304 	and.w	r3, r3, #4
 8004d96:	2b04      	cmp	r3, #4
 8004d98:	d122      	bne.n	8004de0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	f003 0304 	and.w	r3, r3, #4
 8004da4:	2b04      	cmp	r3, #4
 8004da6:	d11b      	bne.n	8004de0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f06f 0204 	mvn.w	r2, #4
 8004db0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2202      	movs	r2, #2
 8004db6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	699b      	ldr	r3, [r3, #24]
 8004dbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d003      	beq.n	8004dce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 f8c4 	bl	8004f54 <HAL_TIM_IC_CaptureCallback>
 8004dcc:	e005      	b.n	8004dda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 f8b6 	bl	8004f40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 f8c7 	bl	8004f68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	f003 0308 	and.w	r3, r3, #8
 8004dea:	2b08      	cmp	r3, #8
 8004dec:	d122      	bne.n	8004e34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	f003 0308 	and.w	r3, r3, #8
 8004df8:	2b08      	cmp	r3, #8
 8004dfa:	d11b      	bne.n	8004e34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f06f 0208 	mvn.w	r2, #8
 8004e04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2204      	movs	r2, #4
 8004e0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	69db      	ldr	r3, [r3, #28]
 8004e12:	f003 0303 	and.w	r3, r3, #3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d003      	beq.n	8004e22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 f89a 	bl	8004f54 <HAL_TIM_IC_CaptureCallback>
 8004e20:	e005      	b.n	8004e2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 f88c 	bl	8004f40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f000 f89d 	bl	8004f68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	f003 0310 	and.w	r3, r3, #16
 8004e3e:	2b10      	cmp	r3, #16
 8004e40:	d122      	bne.n	8004e88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	f003 0310 	and.w	r3, r3, #16
 8004e4c:	2b10      	cmp	r3, #16
 8004e4e:	d11b      	bne.n	8004e88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f06f 0210 	mvn.w	r2, #16
 8004e58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2208      	movs	r2, #8
 8004e5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	69db      	ldr	r3, [r3, #28]
 8004e66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d003      	beq.n	8004e76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f000 f870 	bl	8004f54 <HAL_TIM_IC_CaptureCallback>
 8004e74:	e005      	b.n	8004e82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 f862 	bl	8004f40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 f873 	bl	8004f68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	f003 0301 	and.w	r3, r3, #1
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d10e      	bne.n	8004eb4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	f003 0301 	and.w	r3, r3, #1
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d107      	bne.n	8004eb4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f06f 0201 	mvn.w	r2, #1
 8004eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f7fb ffc6 	bl	8000e40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ebe:	2b80      	cmp	r3, #128	; 0x80
 8004ec0:	d10e      	bne.n	8004ee0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ecc:	2b80      	cmp	r3, #128	; 0x80
 8004ece:	d107      	bne.n	8004ee0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ed8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 f902 	bl	80050e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eea:	2b40      	cmp	r3, #64	; 0x40
 8004eec:	d10e      	bne.n	8004f0c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef8:	2b40      	cmp	r3, #64	; 0x40
 8004efa:	d107      	bne.n	8004f0c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 f838 	bl	8004f7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	f003 0320 	and.w	r3, r3, #32
 8004f16:	2b20      	cmp	r3, #32
 8004f18:	d10e      	bne.n	8004f38 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	f003 0320 	and.w	r3, r3, #32
 8004f24:	2b20      	cmp	r3, #32
 8004f26:	d107      	bne.n	8004f38 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f06f 0220 	mvn.w	r2, #32
 8004f30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 f8cc 	bl	80050d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f38:	bf00      	nop
 8004f3a:	3708      	adds	r7, #8
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f5c:	bf00      	nop
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f84:	bf00      	nop
 8004f86:	370c      	adds	r7, #12
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b085      	sub	sp, #20
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a40      	ldr	r2, [pc, #256]	; (80050a4 <TIM_Base_SetConfig+0x114>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d013      	beq.n	8004fd0 <TIM_Base_SetConfig+0x40>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fae:	d00f      	beq.n	8004fd0 <TIM_Base_SetConfig+0x40>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a3d      	ldr	r2, [pc, #244]	; (80050a8 <TIM_Base_SetConfig+0x118>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d00b      	beq.n	8004fd0 <TIM_Base_SetConfig+0x40>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a3c      	ldr	r2, [pc, #240]	; (80050ac <TIM_Base_SetConfig+0x11c>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d007      	beq.n	8004fd0 <TIM_Base_SetConfig+0x40>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a3b      	ldr	r2, [pc, #236]	; (80050b0 <TIM_Base_SetConfig+0x120>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d003      	beq.n	8004fd0 <TIM_Base_SetConfig+0x40>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a3a      	ldr	r2, [pc, #232]	; (80050b4 <TIM_Base_SetConfig+0x124>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d108      	bne.n	8004fe2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a2f      	ldr	r2, [pc, #188]	; (80050a4 <TIM_Base_SetConfig+0x114>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d02b      	beq.n	8005042 <TIM_Base_SetConfig+0xb2>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ff0:	d027      	beq.n	8005042 <TIM_Base_SetConfig+0xb2>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a2c      	ldr	r2, [pc, #176]	; (80050a8 <TIM_Base_SetConfig+0x118>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d023      	beq.n	8005042 <TIM_Base_SetConfig+0xb2>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a2b      	ldr	r2, [pc, #172]	; (80050ac <TIM_Base_SetConfig+0x11c>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d01f      	beq.n	8005042 <TIM_Base_SetConfig+0xb2>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a2a      	ldr	r2, [pc, #168]	; (80050b0 <TIM_Base_SetConfig+0x120>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d01b      	beq.n	8005042 <TIM_Base_SetConfig+0xb2>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a29      	ldr	r2, [pc, #164]	; (80050b4 <TIM_Base_SetConfig+0x124>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d017      	beq.n	8005042 <TIM_Base_SetConfig+0xb2>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a28      	ldr	r2, [pc, #160]	; (80050b8 <TIM_Base_SetConfig+0x128>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d013      	beq.n	8005042 <TIM_Base_SetConfig+0xb2>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a27      	ldr	r2, [pc, #156]	; (80050bc <TIM_Base_SetConfig+0x12c>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d00f      	beq.n	8005042 <TIM_Base_SetConfig+0xb2>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a26      	ldr	r2, [pc, #152]	; (80050c0 <TIM_Base_SetConfig+0x130>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d00b      	beq.n	8005042 <TIM_Base_SetConfig+0xb2>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a25      	ldr	r2, [pc, #148]	; (80050c4 <TIM_Base_SetConfig+0x134>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d007      	beq.n	8005042 <TIM_Base_SetConfig+0xb2>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a24      	ldr	r2, [pc, #144]	; (80050c8 <TIM_Base_SetConfig+0x138>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d003      	beq.n	8005042 <TIM_Base_SetConfig+0xb2>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a23      	ldr	r2, [pc, #140]	; (80050cc <TIM_Base_SetConfig+0x13c>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d108      	bne.n	8005054 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005048:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	68fa      	ldr	r2, [r7, #12]
 8005050:	4313      	orrs	r3, r2
 8005052:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	695b      	ldr	r3, [r3, #20]
 800505e:	4313      	orrs	r3, r2
 8005060:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	689a      	ldr	r2, [r3, #8]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a0a      	ldr	r2, [pc, #40]	; (80050a4 <TIM_Base_SetConfig+0x114>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d003      	beq.n	8005088 <TIM_Base_SetConfig+0xf8>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a0c      	ldr	r2, [pc, #48]	; (80050b4 <TIM_Base_SetConfig+0x124>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d103      	bne.n	8005090 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	691a      	ldr	r2, [r3, #16]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	615a      	str	r2, [r3, #20]
}
 8005096:	bf00      	nop
 8005098:	3714      	adds	r7, #20
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	40010000 	.word	0x40010000
 80050a8:	40000400 	.word	0x40000400
 80050ac:	40000800 	.word	0x40000800
 80050b0:	40000c00 	.word	0x40000c00
 80050b4:	40010400 	.word	0x40010400
 80050b8:	40014000 	.word	0x40014000
 80050bc:	40014400 	.word	0x40014400
 80050c0:	40014800 	.word	0x40014800
 80050c4:	40001800 	.word	0x40001800
 80050c8:	40001c00 	.word	0x40001c00
 80050cc:	40002000 	.word	0x40002000

080050d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050d8:	bf00      	nop
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050ec:	bf00      	nop
 80050ee:	370c      	adds	r7, #12
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b082      	sub	sp, #8
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d101      	bne.n	800510a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e03f      	b.n	800518a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005110:	b2db      	uxtb	r3, r3
 8005112:	2b00      	cmp	r3, #0
 8005114:	d106      	bne.n	8005124 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f7fb ffda 	bl	80010d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2224      	movs	r2, #36	; 0x24
 8005128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68da      	ldr	r2, [r3, #12]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800513a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 fe7d 	bl	8005e3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	691a      	ldr	r2, [r3, #16]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005150:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	695a      	ldr	r2, [r3, #20]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005160:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68da      	ldr	r2, [r3, #12]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005170:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2220      	movs	r2, #32
 800517c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2220      	movs	r2, #32
 8005184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3708      	adds	r7, #8
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}

08005192 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005192:	b580      	push	{r7, lr}
 8005194:	b08a      	sub	sp, #40	; 0x28
 8005196:	af02      	add	r7, sp, #8
 8005198:	60f8      	str	r0, [r7, #12]
 800519a:	60b9      	str	r1, [r7, #8]
 800519c:	603b      	str	r3, [r7, #0]
 800519e:	4613      	mov	r3, r2
 80051a0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80051a2:	2300      	movs	r3, #0
 80051a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	2b20      	cmp	r3, #32
 80051b0:	d17c      	bne.n	80052ac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d002      	beq.n	80051be <HAL_UART_Transmit+0x2c>
 80051b8:	88fb      	ldrh	r3, [r7, #6]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d101      	bne.n	80051c2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e075      	b.n	80052ae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d101      	bne.n	80051d0 <HAL_UART_Transmit+0x3e>
 80051cc:	2302      	movs	r3, #2
 80051ce:	e06e      	b.n	80052ae <HAL_UART_Transmit+0x11c>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2221      	movs	r2, #33	; 0x21
 80051e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051e6:	f7fc f865 	bl	80012b4 <HAL_GetTick>
 80051ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	88fa      	ldrh	r2, [r7, #6]
 80051f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	88fa      	ldrh	r2, [r7, #6]
 80051f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005200:	d108      	bne.n	8005214 <HAL_UART_Transmit+0x82>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d104      	bne.n	8005214 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800520a:	2300      	movs	r3, #0
 800520c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	61bb      	str	r3, [r7, #24]
 8005212:	e003      	b.n	800521c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005218:	2300      	movs	r3, #0
 800521a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005224:	e02a      	b.n	800527c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	9300      	str	r3, [sp, #0]
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	2200      	movs	r2, #0
 800522e:	2180      	movs	r1, #128	; 0x80
 8005230:	68f8      	ldr	r0, [r7, #12]
 8005232:	f000 fbc1 	bl	80059b8 <UART_WaitOnFlagUntilTimeout>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d001      	beq.n	8005240 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e036      	b.n	80052ae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d10b      	bne.n	800525e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005246:	69bb      	ldr	r3, [r7, #24]
 8005248:	881b      	ldrh	r3, [r3, #0]
 800524a:	461a      	mov	r2, r3
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005254:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	3302      	adds	r3, #2
 800525a:	61bb      	str	r3, [r7, #24]
 800525c:	e007      	b.n	800526e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	781a      	ldrb	r2, [r3, #0]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	3301      	adds	r3, #1
 800526c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005272:	b29b      	uxth	r3, r3
 8005274:	3b01      	subs	r3, #1
 8005276:	b29a      	uxth	r2, r3
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005280:	b29b      	uxth	r3, r3
 8005282:	2b00      	cmp	r3, #0
 8005284:	d1cf      	bne.n	8005226 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	9300      	str	r3, [sp, #0]
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	2200      	movs	r2, #0
 800528e:	2140      	movs	r1, #64	; 0x40
 8005290:	68f8      	ldr	r0, [r7, #12]
 8005292:	f000 fb91 	bl	80059b8 <UART_WaitOnFlagUntilTimeout>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d001      	beq.n	80052a0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	e006      	b.n	80052ae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2220      	movs	r2, #32
 80052a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80052a8:	2300      	movs	r3, #0
 80052aa:	e000      	b.n	80052ae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80052ac:	2302      	movs	r3, #2
  }
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3720      	adds	r7, #32
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}

080052b6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052b6:	b580      	push	{r7, lr}
 80052b8:	b084      	sub	sp, #16
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	60f8      	str	r0, [r7, #12]
 80052be:	60b9      	str	r1, [r7, #8]
 80052c0:	4613      	mov	r3, r2
 80052c2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	2b20      	cmp	r3, #32
 80052ce:	d11d      	bne.n	800530c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d002      	beq.n	80052dc <HAL_UART_Receive_IT+0x26>
 80052d6:	88fb      	ldrh	r3, [r7, #6]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d101      	bne.n	80052e0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e016      	b.n	800530e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d101      	bne.n	80052ee <HAL_UART_Receive_IT+0x38>
 80052ea:	2302      	movs	r3, #2
 80052ec:	e00f      	b.n	800530e <HAL_UART_Receive_IT+0x58>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2200      	movs	r2, #0
 80052fa:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80052fc:	88fb      	ldrh	r3, [r7, #6]
 80052fe:	461a      	mov	r2, r3
 8005300:	68b9      	ldr	r1, [r7, #8]
 8005302:	68f8      	ldr	r0, [r7, #12]
 8005304:	f000 fbc6 	bl	8005a94 <UART_Start_Receive_IT>
 8005308:	4603      	mov	r3, r0
 800530a:	e000      	b.n	800530e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800530c:	2302      	movs	r3, #2
  }
}
 800530e:	4618      	mov	r0, r3
 8005310:	3710      	adds	r7, #16
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}

08005316 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8005316:	b580      	push	{r7, lr}
 8005318:	b09a      	sub	sp, #104	; 0x68
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	330c      	adds	r3, #12
 8005324:	64bb      	str	r3, [r7, #72]	; 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005326:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005328:	e853 3f00 	ldrex	r3, [r3]
 800532c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800532e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005330:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005334:	667b      	str	r3, [r7, #100]	; 0x64
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	330c      	adds	r3, #12
 800533c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800533e:	657a      	str	r2, [r7, #84]	; 0x54
 8005340:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005342:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005344:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005346:	e841 2300 	strex	r3, r2, [r1]
 800534a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800534c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1e5      	bne.n	800531e <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	3314      	adds	r3, #20
 8005358:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800535a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800535c:	e853 3f00 	ldrex	r3, [r3]
 8005360:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005364:	f023 0301 	bic.w	r3, r3, #1
 8005368:	663b      	str	r3, [r7, #96]	; 0x60
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	3314      	adds	r3, #20
 8005370:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005372:	643a      	str	r2, [r7, #64]	; 0x40
 8005374:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005376:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005378:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800537a:	e841 2300 	strex	r3, r2, [r1]
 800537e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005382:	2b00      	cmp	r3, #0
 8005384:	d1e5      	bne.n	8005352 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538a:	2b01      	cmp	r3, #1
 800538c:	d119      	bne.n	80053c2 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	330c      	adds	r3, #12
 8005394:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005396:	6a3b      	ldr	r3, [r7, #32]
 8005398:	e853 3f00 	ldrex	r3, [r3]
 800539c:	61fb      	str	r3, [r7, #28]
   return(result);
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	f023 0310 	bic.w	r3, r3, #16
 80053a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	330c      	adds	r3, #12
 80053ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80053ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053b6:	e841 2300 	strex	r3, r2, [r1]
 80053ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d1e5      	bne.n	800538e <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	695b      	ldr	r3, [r3, #20]
 80053c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053cc:	2b40      	cmp	r3, #64	; 0x40
 80053ce:	d136      	bne.n	800543e <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	3314      	adds	r3, #20
 80053d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	e853 3f00 	ldrex	r3, [r3]
 80053de:	60bb      	str	r3, [r7, #8]
   return(result);
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	3314      	adds	r3, #20
 80053ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80053f0:	61ba      	str	r2, [r7, #24]
 80053f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f4:	6979      	ldr	r1, [r7, #20]
 80053f6:	69ba      	ldr	r2, [r7, #24]
 80053f8:	e841 2300 	strex	r3, r2, [r1]
 80053fc:	613b      	str	r3, [r7, #16]
   return(result);
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d1e5      	bne.n	80053d0 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005408:	2b00      	cmp	r3, #0
 800540a:	d018      	beq.n	800543e <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005410:	2200      	movs	r2, #0
 8005412:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005418:	4618      	mov	r0, r3
 800541a:	f7fc f839 	bl	8001490 <HAL_DMA_Abort>
 800541e:	4603      	mov	r3, r0
 8005420:	2b00      	cmp	r3, #0
 8005422:	d00c      	beq.n	800543e <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005428:	4618      	mov	r0, r3
 800542a:	f7fc f8d1 	bl	80015d0 <HAL_DMA_GetError>
 800542e:	4603      	mov	r3, r0
 8005430:	2b20      	cmp	r3, #32
 8005432:	d104      	bne.n	800543e <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2210      	movs	r2, #16
 8005438:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e00a      	b.n	8005454 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2220      	movs	r2, #32
 8005448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8005452:	2300      	movs	r3, #0
}
 8005454:	4618      	mov	r0, r3
 8005456:	3768      	adds	r7, #104	; 0x68
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b0ba      	sub	sp, #232	; 0xe8
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	695b      	ldr	r3, [r3, #20]
 800547e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005482:	2300      	movs	r3, #0
 8005484:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005488:	2300      	movs	r3, #0
 800548a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800548e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005492:	f003 030f 	and.w	r3, r3, #15
 8005496:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800549a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d10f      	bne.n	80054c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80054a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054a6:	f003 0320 	and.w	r3, r3, #32
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d009      	beq.n	80054c2 <HAL_UART_IRQHandler+0x66>
 80054ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054b2:	f003 0320 	and.w	r3, r3, #32
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d003      	beq.n	80054c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 fc03 	bl	8005cc6 <UART_Receive_IT>
      return;
 80054c0:	e256      	b.n	8005970 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80054c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	f000 80de 	beq.w	8005688 <HAL_UART_IRQHandler+0x22c>
 80054cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054d0:	f003 0301 	and.w	r3, r3, #1
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d106      	bne.n	80054e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80054d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054dc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	f000 80d1 	beq.w	8005688 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80054e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054ea:	f003 0301 	and.w	r3, r3, #1
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d00b      	beq.n	800550a <HAL_UART_IRQHandler+0xae>
 80054f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d005      	beq.n	800550a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005502:	f043 0201 	orr.w	r2, r3, #1
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800550a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800550e:	f003 0304 	and.w	r3, r3, #4
 8005512:	2b00      	cmp	r3, #0
 8005514:	d00b      	beq.n	800552e <HAL_UART_IRQHandler+0xd2>
 8005516:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800551a:	f003 0301 	and.w	r3, r3, #1
 800551e:	2b00      	cmp	r3, #0
 8005520:	d005      	beq.n	800552e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005526:	f043 0202 	orr.w	r2, r3, #2
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800552e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005532:	f003 0302 	and.w	r3, r3, #2
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00b      	beq.n	8005552 <HAL_UART_IRQHandler+0xf6>
 800553a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800553e:	f003 0301 	and.w	r3, r3, #1
 8005542:	2b00      	cmp	r3, #0
 8005544:	d005      	beq.n	8005552 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554a:	f043 0204 	orr.w	r2, r3, #4
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005556:	f003 0308 	and.w	r3, r3, #8
 800555a:	2b00      	cmp	r3, #0
 800555c:	d011      	beq.n	8005582 <HAL_UART_IRQHandler+0x126>
 800555e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005562:	f003 0320 	and.w	r3, r3, #32
 8005566:	2b00      	cmp	r3, #0
 8005568:	d105      	bne.n	8005576 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800556a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800556e:	f003 0301 	and.w	r3, r3, #1
 8005572:	2b00      	cmp	r3, #0
 8005574:	d005      	beq.n	8005582 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557a:	f043 0208 	orr.w	r2, r3, #8
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005586:	2b00      	cmp	r3, #0
 8005588:	f000 81ed 	beq.w	8005966 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800558c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005590:	f003 0320 	and.w	r3, r3, #32
 8005594:	2b00      	cmp	r3, #0
 8005596:	d008      	beq.n	80055aa <HAL_UART_IRQHandler+0x14e>
 8005598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800559c:	f003 0320 	and.w	r3, r3, #32
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d002      	beq.n	80055aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 fb8e 	bl	8005cc6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	695b      	ldr	r3, [r3, #20]
 80055b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b4:	2b40      	cmp	r3, #64	; 0x40
 80055b6:	bf0c      	ite	eq
 80055b8:	2301      	moveq	r3, #1
 80055ba:	2300      	movne	r3, #0
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c6:	f003 0308 	and.w	r3, r3, #8
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d103      	bne.n	80055d6 <HAL_UART_IRQHandler+0x17a>
 80055ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d04f      	beq.n	8005676 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 fa96 	bl	8005b08 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055e6:	2b40      	cmp	r3, #64	; 0x40
 80055e8:	d141      	bne.n	800566e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	3314      	adds	r3, #20
 80055f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80055f8:	e853 3f00 	ldrex	r3, [r3]
 80055fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005600:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005604:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005608:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	3314      	adds	r3, #20
 8005612:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005616:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800561a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005622:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005626:	e841 2300 	strex	r3, r2, [r1]
 800562a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800562e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1d9      	bne.n	80055ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800563a:	2b00      	cmp	r3, #0
 800563c:	d013      	beq.n	8005666 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005642:	4a7d      	ldr	r2, [pc, #500]	; (8005838 <HAL_UART_IRQHandler+0x3dc>)
 8005644:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800564a:	4618      	mov	r0, r3
 800564c:	f7fb ff90 	bl	8001570 <HAL_DMA_Abort_IT>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d016      	beq.n	8005684 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800565a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005660:	4610      	mov	r0, r2
 8005662:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005664:	e00e      	b.n	8005684 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 f990 	bl	800598c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800566c:	e00a      	b.n	8005684 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 f98c 	bl	800598c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005674:	e006      	b.n	8005684 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 f988 	bl	800598c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005682:	e170      	b.n	8005966 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005684:	bf00      	nop
    return;
 8005686:	e16e      	b.n	8005966 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800568c:	2b01      	cmp	r3, #1
 800568e:	f040 814a 	bne.w	8005926 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005696:	f003 0310 	and.w	r3, r3, #16
 800569a:	2b00      	cmp	r3, #0
 800569c:	f000 8143 	beq.w	8005926 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80056a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056a4:	f003 0310 	and.w	r3, r3, #16
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	f000 813c 	beq.w	8005926 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80056ae:	2300      	movs	r3, #0
 80056b0:	60bb      	str	r3, [r7, #8]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	60bb      	str	r3, [r7, #8]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	60bb      	str	r3, [r7, #8]
 80056c2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	695b      	ldr	r3, [r3, #20]
 80056ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ce:	2b40      	cmp	r3, #64	; 0x40
 80056d0:	f040 80b4 	bne.w	800583c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80056e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	f000 8140 	beq.w	800596a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80056ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80056f2:	429a      	cmp	r2, r3
 80056f4:	f080 8139 	bcs.w	800596a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80056fe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005704:	69db      	ldr	r3, [r3, #28]
 8005706:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800570a:	f000 8088 	beq.w	800581e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	330c      	adds	r3, #12
 8005714:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005718:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800571c:	e853 3f00 	ldrex	r3, [r3]
 8005720:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005724:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005728:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800572c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	330c      	adds	r3, #12
 8005736:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800573a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800573e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005742:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005746:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800574a:	e841 2300 	strex	r3, r2, [r1]
 800574e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005752:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1d9      	bne.n	800570e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	3314      	adds	r3, #20
 8005760:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005762:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005764:	e853 3f00 	ldrex	r3, [r3]
 8005768:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800576a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800576c:	f023 0301 	bic.w	r3, r3, #1
 8005770:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	3314      	adds	r3, #20
 800577a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800577e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005782:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005784:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005786:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800578a:	e841 2300 	strex	r3, r2, [r1]
 800578e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005790:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1e1      	bne.n	800575a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	3314      	adds	r3, #20
 800579c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80057a0:	e853 3f00 	ldrex	r3, [r3]
 80057a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80057a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	3314      	adds	r3, #20
 80057b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80057ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 80057bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80057c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80057c2:	e841 2300 	strex	r3, r2, [r1]
 80057c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80057c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1e3      	bne.n	8005796 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2220      	movs	r2, #32
 80057d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	330c      	adds	r3, #12
 80057e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057e6:	e853 3f00 	ldrex	r3, [r3]
 80057ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80057ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057ee:	f023 0310 	bic.w	r3, r3, #16
 80057f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	330c      	adds	r3, #12
 80057fc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005800:	65ba      	str	r2, [r7, #88]	; 0x58
 8005802:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005804:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005806:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005808:	e841 2300 	strex	r3, r2, [r1]
 800580c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800580e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005810:	2b00      	cmp	r3, #0
 8005812:	d1e3      	bne.n	80057dc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005818:	4618      	mov	r0, r3
 800581a:	f7fb fe39 	bl	8001490 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005826:	b29b      	uxth	r3, r3
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	b29b      	uxth	r3, r3
 800582c:	4619      	mov	r1, r3
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 f8b6 	bl	80059a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005834:	e099      	b.n	800596a <HAL_UART_IRQHandler+0x50e>
 8005836:	bf00      	nop
 8005838:	08005bcf 	.word	0x08005bcf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005844:	b29b      	uxth	r3, r3
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005850:	b29b      	uxth	r3, r3
 8005852:	2b00      	cmp	r3, #0
 8005854:	f000 808b 	beq.w	800596e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005858:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800585c:	2b00      	cmp	r3, #0
 800585e:	f000 8086 	beq.w	800596e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	330c      	adds	r3, #12
 8005868:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800586c:	e853 3f00 	ldrex	r3, [r3]
 8005870:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005874:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005878:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	330c      	adds	r3, #12
 8005882:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005886:	647a      	str	r2, [r7, #68]	; 0x44
 8005888:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800588c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800588e:	e841 2300 	strex	r3, r2, [r1]
 8005892:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1e3      	bne.n	8005862 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	3314      	adds	r3, #20
 80058a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a4:	e853 3f00 	ldrex	r3, [r3]
 80058a8:	623b      	str	r3, [r7, #32]
   return(result);
 80058aa:	6a3b      	ldr	r3, [r7, #32]
 80058ac:	f023 0301 	bic.w	r3, r3, #1
 80058b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	3314      	adds	r3, #20
 80058ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80058be:	633a      	str	r2, [r7, #48]	; 0x30
 80058c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058c6:	e841 2300 	strex	r3, r2, [r1]
 80058ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80058cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d1e3      	bne.n	800589a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2220      	movs	r2, #32
 80058d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	330c      	adds	r3, #12
 80058e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	e853 3f00 	ldrex	r3, [r3]
 80058ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f023 0310 	bic.w	r3, r3, #16
 80058f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	330c      	adds	r3, #12
 8005900:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005904:	61fa      	str	r2, [r7, #28]
 8005906:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005908:	69b9      	ldr	r1, [r7, #24]
 800590a:	69fa      	ldr	r2, [r7, #28]
 800590c:	e841 2300 	strex	r3, r2, [r1]
 8005910:	617b      	str	r3, [r7, #20]
   return(result);
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d1e3      	bne.n	80058e0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005918:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800591c:	4619      	mov	r1, r3
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 f83e 	bl	80059a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005924:	e023      	b.n	800596e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800592a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800592e:	2b00      	cmp	r3, #0
 8005930:	d009      	beq.n	8005946 <HAL_UART_IRQHandler+0x4ea>
 8005932:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800593a:	2b00      	cmp	r3, #0
 800593c:	d003      	beq.n	8005946 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 f959 	bl	8005bf6 <UART_Transmit_IT>
    return;
 8005944:	e014      	b.n	8005970 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800594a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800594e:	2b00      	cmp	r3, #0
 8005950:	d00e      	beq.n	8005970 <HAL_UART_IRQHandler+0x514>
 8005952:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800595a:	2b00      	cmp	r3, #0
 800595c:	d008      	beq.n	8005970 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 f999 	bl	8005c96 <UART_EndTransmit_IT>
    return;
 8005964:	e004      	b.n	8005970 <HAL_UART_IRQHandler+0x514>
    return;
 8005966:	bf00      	nop
 8005968:	e002      	b.n	8005970 <HAL_UART_IRQHandler+0x514>
      return;
 800596a:	bf00      	nop
 800596c:	e000      	b.n	8005970 <HAL_UART_IRQHandler+0x514>
      return;
 800596e:	bf00      	nop
  }
}
 8005970:	37e8      	adds	r7, #232	; 0xe8
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop

08005978 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005980:	bf00      	nop
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005994:	bf00      	nop
 8005996:	370c      	adds	r7, #12
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr

080059a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	460b      	mov	r3, r1
 80059aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80059ac:	bf00      	nop
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b090      	sub	sp, #64	; 0x40
 80059bc:	af00      	add	r7, sp, #0
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	603b      	str	r3, [r7, #0]
 80059c4:	4613      	mov	r3, r2
 80059c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059c8:	e050      	b.n	8005a6c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059d0:	d04c      	beq.n	8005a6c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80059d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d007      	beq.n	80059e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80059d8:	f7fb fc6c 	bl	80012b4 <HAL_GetTick>
 80059dc:	4602      	mov	r2, r0
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d241      	bcs.n	8005a6c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	330c      	adds	r3, #12
 80059ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f2:	e853 3f00 	ldrex	r3, [r3]
 80059f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80059fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	330c      	adds	r3, #12
 8005a06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005a08:	637a      	str	r2, [r7, #52]	; 0x34
 8005a0a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a10:	e841 2300 	strex	r3, r2, [r1]
 8005a14:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d1e5      	bne.n	80059e8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	3314      	adds	r3, #20
 8005a22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	e853 3f00 	ldrex	r3, [r3]
 8005a2a:	613b      	str	r3, [r7, #16]
   return(result);
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	f023 0301 	bic.w	r3, r3, #1
 8005a32:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	3314      	adds	r3, #20
 8005a3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a3c:	623a      	str	r2, [r7, #32]
 8005a3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a40:	69f9      	ldr	r1, [r7, #28]
 8005a42:	6a3a      	ldr	r2, [r7, #32]
 8005a44:	e841 2300 	strex	r3, r2, [r1]
 8005a48:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d1e5      	bne.n	8005a1c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2220      	movs	r2, #32
 8005a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2220      	movs	r2, #32
 8005a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005a68:	2303      	movs	r3, #3
 8005a6a:	e00f      	b.n	8005a8c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	4013      	ands	r3, r2
 8005a76:	68ba      	ldr	r2, [r7, #8]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	bf0c      	ite	eq
 8005a7c:	2301      	moveq	r3, #1
 8005a7e:	2300      	movne	r3, #0
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	461a      	mov	r2, r3
 8005a84:	79fb      	ldrb	r3, [r7, #7]
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d09f      	beq.n	80059ca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3740      	adds	r7, #64	; 0x40
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	68ba      	ldr	r2, [r7, #8]
 8005aa6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	88fa      	ldrh	r2, [r7, #6]
 8005aac:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	88fa      	ldrh	r2, [r7, #6]
 8005ab2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2222      	movs	r2, #34	; 0x22
 8005abe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68da      	ldr	r2, [r3, #12]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ad8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	695a      	ldr	r2, [r3, #20]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f042 0201 	orr.w	r2, r2, #1
 8005ae8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68da      	ldr	r2, [r3, #12]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f042 0220 	orr.w	r2, r2, #32
 8005af8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005afa:	2300      	movs	r3, #0
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3714      	adds	r7, #20
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b095      	sub	sp, #84	; 0x54
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	330c      	adds	r3, #12
 8005b16:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b1a:	e853 3f00 	ldrex	r3, [r3]
 8005b1e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b22:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	330c      	adds	r3, #12
 8005b2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b30:	643a      	str	r2, [r7, #64]	; 0x40
 8005b32:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b34:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b38:	e841 2300 	strex	r3, r2, [r1]
 8005b3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d1e5      	bne.n	8005b10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	3314      	adds	r3, #20
 8005b4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b4c:	6a3b      	ldr	r3, [r7, #32]
 8005b4e:	e853 3f00 	ldrex	r3, [r3]
 8005b52:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	f023 0301 	bic.w	r3, r3, #1
 8005b5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	3314      	adds	r3, #20
 8005b62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b64:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b6c:	e841 2300 	strex	r3, r2, [r1]
 8005b70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d1e5      	bne.n	8005b44 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d119      	bne.n	8005bb4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	330c      	adds	r3, #12
 8005b86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	e853 3f00 	ldrex	r3, [r3]
 8005b8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	f023 0310 	bic.w	r3, r3, #16
 8005b96:	647b      	str	r3, [r7, #68]	; 0x44
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	330c      	adds	r3, #12
 8005b9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ba0:	61ba      	str	r2, [r7, #24]
 8005ba2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba4:	6979      	ldr	r1, [r7, #20]
 8005ba6:	69ba      	ldr	r2, [r7, #24]
 8005ba8:	e841 2300 	strex	r3, r2, [r1]
 8005bac:	613b      	str	r3, [r7, #16]
   return(result);
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d1e5      	bne.n	8005b80 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2220      	movs	r2, #32
 8005bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005bc2:	bf00      	nop
 8005bc4:	3754      	adds	r7, #84	; 0x54
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr

08005bce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005bce:	b580      	push	{r7, lr}
 8005bd0:	b084      	sub	sp, #16
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bda:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2200      	movs	r2, #0
 8005be0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005be8:	68f8      	ldr	r0, [r7, #12]
 8005bea:	f7ff fecf 	bl	800598c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bee:	bf00      	nop
 8005bf0:	3710      	adds	r7, #16
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}

08005bf6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005bf6:	b480      	push	{r7}
 8005bf8:	b085      	sub	sp, #20
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	2b21      	cmp	r3, #33	; 0x21
 8005c08:	d13e      	bne.n	8005c88 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c12:	d114      	bne.n	8005c3e <UART_Transmit_IT+0x48>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	691b      	ldr	r3, [r3, #16]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d110      	bne.n	8005c3e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6a1b      	ldr	r3, [r3, #32]
 8005c20:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	881b      	ldrh	r3, [r3, #0]
 8005c26:	461a      	mov	r2, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c30:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a1b      	ldr	r3, [r3, #32]
 8005c36:	1c9a      	adds	r2, r3, #2
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	621a      	str	r2, [r3, #32]
 8005c3c:	e008      	b.n	8005c50 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a1b      	ldr	r3, [r3, #32]
 8005c42:	1c59      	adds	r1, r3, #1
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	6211      	str	r1, [r2, #32]
 8005c48:	781a      	ldrb	r2, [r3, #0]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	3b01      	subs	r3, #1
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d10f      	bne.n	8005c84 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68da      	ldr	r2, [r3, #12]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c72:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68da      	ldr	r2, [r3, #12]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c82:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005c84:	2300      	movs	r3, #0
 8005c86:	e000      	b.n	8005c8a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005c88:	2302      	movs	r3, #2
  }
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3714      	adds	r7, #20
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr

08005c96 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c96:	b580      	push	{r7, lr}
 8005c98:	b082      	sub	sp, #8
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	68da      	ldr	r2, [r3, #12]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2220      	movs	r2, #32
 8005cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f7ff fe5e 	bl	8005978 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3708      	adds	r7, #8
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}

08005cc6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005cc6:	b580      	push	{r7, lr}
 8005cc8:	b08c      	sub	sp, #48	; 0x30
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	2b22      	cmp	r3, #34	; 0x22
 8005cd8:	f040 80ab 	bne.w	8005e32 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ce4:	d117      	bne.n	8005d16 <UART_Receive_IT+0x50>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d113      	bne.n	8005d16 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d04:	b29a      	uxth	r2, r3
 8005d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d08:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d0e:	1c9a      	adds	r2, r3, #2
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	629a      	str	r2, [r3, #40]	; 0x28
 8005d14:	e026      	b.n	8005d64 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d28:	d007      	beq.n	8005d3a <UART_Receive_IT+0x74>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d10a      	bne.n	8005d48 <UART_Receive_IT+0x82>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d106      	bne.n	8005d48 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	b2da      	uxtb	r2, r3
 8005d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d44:	701a      	strb	r2, [r3, #0]
 8005d46:	e008      	b.n	8005d5a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d54:	b2da      	uxtb	r2, r3
 8005d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d58:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d5e:	1c5a      	adds	r2, r3, #1
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	4619      	mov	r1, r3
 8005d72:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d15a      	bne.n	8005e2e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	68da      	ldr	r2, [r3, #12]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f022 0220 	bic.w	r2, r2, #32
 8005d86:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68da      	ldr	r2, [r3, #12]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	695a      	ldr	r2, [r3, #20]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f022 0201 	bic.w	r2, r2, #1
 8005da6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2220      	movs	r2, #32
 8005dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d135      	bne.n	8005e24 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	330c      	adds	r3, #12
 8005dc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	e853 3f00 	ldrex	r3, [r3]
 8005dcc:	613b      	str	r3, [r7, #16]
   return(result);
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	f023 0310 	bic.w	r3, r3, #16
 8005dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	330c      	adds	r3, #12
 8005ddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dde:	623a      	str	r2, [r7, #32]
 8005de0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de2:	69f9      	ldr	r1, [r7, #28]
 8005de4:	6a3a      	ldr	r2, [r7, #32]
 8005de6:	e841 2300 	strex	r3, r2, [r1]
 8005dea:	61bb      	str	r3, [r7, #24]
   return(result);
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d1e5      	bne.n	8005dbe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 0310 	and.w	r3, r3, #16
 8005dfc:	2b10      	cmp	r3, #16
 8005dfe:	d10a      	bne.n	8005e16 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e00:	2300      	movs	r3, #0
 8005e02:	60fb      	str	r3, [r7, #12]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	60fb      	str	r3, [r7, #12]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	60fb      	str	r3, [r7, #12]
 8005e14:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f7ff fdbf 	bl	80059a0 <HAL_UARTEx_RxEventCallback>
 8005e22:	e002      	b.n	8005e2a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f7fa fdb1 	bl	800098c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	e002      	b.n	8005e34 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	e000      	b.n	8005e34 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005e32:	2302      	movs	r3, #2
  }
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3730      	adds	r7, #48	; 0x30
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e40:	b09f      	sub	sp, #124	; 0x7c
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	691b      	ldr	r3, [r3, #16]
 8005e4c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005e50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e52:	68d9      	ldr	r1, [r3, #12]
 8005e54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	ea40 0301 	orr.w	r3, r0, r1
 8005e5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e60:	689a      	ldr	r2, [r3, #8]
 8005e62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e64:	691b      	ldr	r3, [r3, #16]
 8005e66:	431a      	orrs	r2, r3
 8005e68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e6a:	695b      	ldr	r3, [r3, #20]
 8005e6c:	431a      	orrs	r2, r3
 8005e6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e70:	69db      	ldr	r3, [r3, #28]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005e76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005e80:	f021 010c 	bic.w	r1, r1, #12
 8005e84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e8a:	430b      	orrs	r3, r1
 8005e8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	695b      	ldr	r3, [r3, #20]
 8005e94:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005e98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e9a:	6999      	ldr	r1, [r3, #24]
 8005e9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	ea40 0301 	orr.w	r3, r0, r1
 8005ea4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ea6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	4bc5      	ldr	r3, [pc, #788]	; (80061c0 <UART_SetConfig+0x384>)
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d004      	beq.n	8005eba <UART_SetConfig+0x7e>
 8005eb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	4bc3      	ldr	r3, [pc, #780]	; (80061c4 <UART_SetConfig+0x388>)
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d103      	bne.n	8005ec2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005eba:	f7fe fe29 	bl	8004b10 <HAL_RCC_GetPCLK2Freq>
 8005ebe:	6778      	str	r0, [r7, #116]	; 0x74
 8005ec0:	e002      	b.n	8005ec8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005ec2:	f7fe fe11 	bl	8004ae8 <HAL_RCC_GetPCLK1Freq>
 8005ec6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ec8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eca:	69db      	ldr	r3, [r3, #28]
 8005ecc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ed0:	f040 80b6 	bne.w	8006040 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ed4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ed6:	461c      	mov	r4, r3
 8005ed8:	f04f 0500 	mov.w	r5, #0
 8005edc:	4622      	mov	r2, r4
 8005ede:	462b      	mov	r3, r5
 8005ee0:	1891      	adds	r1, r2, r2
 8005ee2:	6439      	str	r1, [r7, #64]	; 0x40
 8005ee4:	415b      	adcs	r3, r3
 8005ee6:	647b      	str	r3, [r7, #68]	; 0x44
 8005ee8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005eec:	1912      	adds	r2, r2, r4
 8005eee:	eb45 0303 	adc.w	r3, r5, r3
 8005ef2:	f04f 0000 	mov.w	r0, #0
 8005ef6:	f04f 0100 	mov.w	r1, #0
 8005efa:	00d9      	lsls	r1, r3, #3
 8005efc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f00:	00d0      	lsls	r0, r2, #3
 8005f02:	4602      	mov	r2, r0
 8005f04:	460b      	mov	r3, r1
 8005f06:	1911      	adds	r1, r2, r4
 8005f08:	6639      	str	r1, [r7, #96]	; 0x60
 8005f0a:	416b      	adcs	r3, r5
 8005f0c:	667b      	str	r3, [r7, #100]	; 0x64
 8005f0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	461a      	mov	r2, r3
 8005f14:	f04f 0300 	mov.w	r3, #0
 8005f18:	1891      	adds	r1, r2, r2
 8005f1a:	63b9      	str	r1, [r7, #56]	; 0x38
 8005f1c:	415b      	adcs	r3, r3
 8005f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005f24:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005f28:	f7fa f952 	bl	80001d0 <__aeabi_uldivmod>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	460b      	mov	r3, r1
 8005f30:	4ba5      	ldr	r3, [pc, #660]	; (80061c8 <UART_SetConfig+0x38c>)
 8005f32:	fba3 2302 	umull	r2, r3, r3, r2
 8005f36:	095b      	lsrs	r3, r3, #5
 8005f38:	011e      	lsls	r6, r3, #4
 8005f3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f3c:	461c      	mov	r4, r3
 8005f3e:	f04f 0500 	mov.w	r5, #0
 8005f42:	4622      	mov	r2, r4
 8005f44:	462b      	mov	r3, r5
 8005f46:	1891      	adds	r1, r2, r2
 8005f48:	6339      	str	r1, [r7, #48]	; 0x30
 8005f4a:	415b      	adcs	r3, r3
 8005f4c:	637b      	str	r3, [r7, #52]	; 0x34
 8005f4e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005f52:	1912      	adds	r2, r2, r4
 8005f54:	eb45 0303 	adc.w	r3, r5, r3
 8005f58:	f04f 0000 	mov.w	r0, #0
 8005f5c:	f04f 0100 	mov.w	r1, #0
 8005f60:	00d9      	lsls	r1, r3, #3
 8005f62:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f66:	00d0      	lsls	r0, r2, #3
 8005f68:	4602      	mov	r2, r0
 8005f6a:	460b      	mov	r3, r1
 8005f6c:	1911      	adds	r1, r2, r4
 8005f6e:	65b9      	str	r1, [r7, #88]	; 0x58
 8005f70:	416b      	adcs	r3, r5
 8005f72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	461a      	mov	r2, r3
 8005f7a:	f04f 0300 	mov.w	r3, #0
 8005f7e:	1891      	adds	r1, r2, r2
 8005f80:	62b9      	str	r1, [r7, #40]	; 0x28
 8005f82:	415b      	adcs	r3, r3
 8005f84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005f8a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005f8e:	f7fa f91f 	bl	80001d0 <__aeabi_uldivmod>
 8005f92:	4602      	mov	r2, r0
 8005f94:	460b      	mov	r3, r1
 8005f96:	4b8c      	ldr	r3, [pc, #560]	; (80061c8 <UART_SetConfig+0x38c>)
 8005f98:	fba3 1302 	umull	r1, r3, r3, r2
 8005f9c:	095b      	lsrs	r3, r3, #5
 8005f9e:	2164      	movs	r1, #100	; 0x64
 8005fa0:	fb01 f303 	mul.w	r3, r1, r3
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	00db      	lsls	r3, r3, #3
 8005fa8:	3332      	adds	r3, #50	; 0x32
 8005faa:	4a87      	ldr	r2, [pc, #540]	; (80061c8 <UART_SetConfig+0x38c>)
 8005fac:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb0:	095b      	lsrs	r3, r3, #5
 8005fb2:	005b      	lsls	r3, r3, #1
 8005fb4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005fb8:	441e      	add	r6, r3
 8005fba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f04f 0100 	mov.w	r1, #0
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	460b      	mov	r3, r1
 8005fc6:	1894      	adds	r4, r2, r2
 8005fc8:	623c      	str	r4, [r7, #32]
 8005fca:	415b      	adcs	r3, r3
 8005fcc:	627b      	str	r3, [r7, #36]	; 0x24
 8005fce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005fd2:	1812      	adds	r2, r2, r0
 8005fd4:	eb41 0303 	adc.w	r3, r1, r3
 8005fd8:	f04f 0400 	mov.w	r4, #0
 8005fdc:	f04f 0500 	mov.w	r5, #0
 8005fe0:	00dd      	lsls	r5, r3, #3
 8005fe2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005fe6:	00d4      	lsls	r4, r2, #3
 8005fe8:	4622      	mov	r2, r4
 8005fea:	462b      	mov	r3, r5
 8005fec:	1814      	adds	r4, r2, r0
 8005fee:	653c      	str	r4, [r7, #80]	; 0x50
 8005ff0:	414b      	adcs	r3, r1
 8005ff2:	657b      	str	r3, [r7, #84]	; 0x54
 8005ff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	f04f 0300 	mov.w	r3, #0
 8005ffe:	1891      	adds	r1, r2, r2
 8006000:	61b9      	str	r1, [r7, #24]
 8006002:	415b      	adcs	r3, r3
 8006004:	61fb      	str	r3, [r7, #28]
 8006006:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800600a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800600e:	f7fa f8df 	bl	80001d0 <__aeabi_uldivmod>
 8006012:	4602      	mov	r2, r0
 8006014:	460b      	mov	r3, r1
 8006016:	4b6c      	ldr	r3, [pc, #432]	; (80061c8 <UART_SetConfig+0x38c>)
 8006018:	fba3 1302 	umull	r1, r3, r3, r2
 800601c:	095b      	lsrs	r3, r3, #5
 800601e:	2164      	movs	r1, #100	; 0x64
 8006020:	fb01 f303 	mul.w	r3, r1, r3
 8006024:	1ad3      	subs	r3, r2, r3
 8006026:	00db      	lsls	r3, r3, #3
 8006028:	3332      	adds	r3, #50	; 0x32
 800602a:	4a67      	ldr	r2, [pc, #412]	; (80061c8 <UART_SetConfig+0x38c>)
 800602c:	fba2 2303 	umull	r2, r3, r2, r3
 8006030:	095b      	lsrs	r3, r3, #5
 8006032:	f003 0207 	and.w	r2, r3, #7
 8006036:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4432      	add	r2, r6
 800603c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800603e:	e0b9      	b.n	80061b4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006040:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006042:	461c      	mov	r4, r3
 8006044:	f04f 0500 	mov.w	r5, #0
 8006048:	4622      	mov	r2, r4
 800604a:	462b      	mov	r3, r5
 800604c:	1891      	adds	r1, r2, r2
 800604e:	6139      	str	r1, [r7, #16]
 8006050:	415b      	adcs	r3, r3
 8006052:	617b      	str	r3, [r7, #20]
 8006054:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006058:	1912      	adds	r2, r2, r4
 800605a:	eb45 0303 	adc.w	r3, r5, r3
 800605e:	f04f 0000 	mov.w	r0, #0
 8006062:	f04f 0100 	mov.w	r1, #0
 8006066:	00d9      	lsls	r1, r3, #3
 8006068:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800606c:	00d0      	lsls	r0, r2, #3
 800606e:	4602      	mov	r2, r0
 8006070:	460b      	mov	r3, r1
 8006072:	eb12 0804 	adds.w	r8, r2, r4
 8006076:	eb43 0905 	adc.w	r9, r3, r5
 800607a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	4618      	mov	r0, r3
 8006080:	f04f 0100 	mov.w	r1, #0
 8006084:	f04f 0200 	mov.w	r2, #0
 8006088:	f04f 0300 	mov.w	r3, #0
 800608c:	008b      	lsls	r3, r1, #2
 800608e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006092:	0082      	lsls	r2, r0, #2
 8006094:	4640      	mov	r0, r8
 8006096:	4649      	mov	r1, r9
 8006098:	f7fa f89a 	bl	80001d0 <__aeabi_uldivmod>
 800609c:	4602      	mov	r2, r0
 800609e:	460b      	mov	r3, r1
 80060a0:	4b49      	ldr	r3, [pc, #292]	; (80061c8 <UART_SetConfig+0x38c>)
 80060a2:	fba3 2302 	umull	r2, r3, r3, r2
 80060a6:	095b      	lsrs	r3, r3, #5
 80060a8:	011e      	lsls	r6, r3, #4
 80060aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060ac:	4618      	mov	r0, r3
 80060ae:	f04f 0100 	mov.w	r1, #0
 80060b2:	4602      	mov	r2, r0
 80060b4:	460b      	mov	r3, r1
 80060b6:	1894      	adds	r4, r2, r2
 80060b8:	60bc      	str	r4, [r7, #8]
 80060ba:	415b      	adcs	r3, r3
 80060bc:	60fb      	str	r3, [r7, #12]
 80060be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80060c2:	1812      	adds	r2, r2, r0
 80060c4:	eb41 0303 	adc.w	r3, r1, r3
 80060c8:	f04f 0400 	mov.w	r4, #0
 80060cc:	f04f 0500 	mov.w	r5, #0
 80060d0:	00dd      	lsls	r5, r3, #3
 80060d2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80060d6:	00d4      	lsls	r4, r2, #3
 80060d8:	4622      	mov	r2, r4
 80060da:	462b      	mov	r3, r5
 80060dc:	1814      	adds	r4, r2, r0
 80060de:	64bc      	str	r4, [r7, #72]	; 0x48
 80060e0:	414b      	adcs	r3, r1
 80060e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	4618      	mov	r0, r3
 80060ea:	f04f 0100 	mov.w	r1, #0
 80060ee:	f04f 0200 	mov.w	r2, #0
 80060f2:	f04f 0300 	mov.w	r3, #0
 80060f6:	008b      	lsls	r3, r1, #2
 80060f8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80060fc:	0082      	lsls	r2, r0, #2
 80060fe:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006102:	f7fa f865 	bl	80001d0 <__aeabi_uldivmod>
 8006106:	4602      	mov	r2, r0
 8006108:	460b      	mov	r3, r1
 800610a:	4b2f      	ldr	r3, [pc, #188]	; (80061c8 <UART_SetConfig+0x38c>)
 800610c:	fba3 1302 	umull	r1, r3, r3, r2
 8006110:	095b      	lsrs	r3, r3, #5
 8006112:	2164      	movs	r1, #100	; 0x64
 8006114:	fb01 f303 	mul.w	r3, r1, r3
 8006118:	1ad3      	subs	r3, r2, r3
 800611a:	011b      	lsls	r3, r3, #4
 800611c:	3332      	adds	r3, #50	; 0x32
 800611e:	4a2a      	ldr	r2, [pc, #168]	; (80061c8 <UART_SetConfig+0x38c>)
 8006120:	fba2 2303 	umull	r2, r3, r2, r3
 8006124:	095b      	lsrs	r3, r3, #5
 8006126:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800612a:	441e      	add	r6, r3
 800612c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800612e:	4618      	mov	r0, r3
 8006130:	f04f 0100 	mov.w	r1, #0
 8006134:	4602      	mov	r2, r0
 8006136:	460b      	mov	r3, r1
 8006138:	1894      	adds	r4, r2, r2
 800613a:	603c      	str	r4, [r7, #0]
 800613c:	415b      	adcs	r3, r3
 800613e:	607b      	str	r3, [r7, #4]
 8006140:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006144:	1812      	adds	r2, r2, r0
 8006146:	eb41 0303 	adc.w	r3, r1, r3
 800614a:	f04f 0400 	mov.w	r4, #0
 800614e:	f04f 0500 	mov.w	r5, #0
 8006152:	00dd      	lsls	r5, r3, #3
 8006154:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006158:	00d4      	lsls	r4, r2, #3
 800615a:	4622      	mov	r2, r4
 800615c:	462b      	mov	r3, r5
 800615e:	eb12 0a00 	adds.w	sl, r2, r0
 8006162:	eb43 0b01 	adc.w	fp, r3, r1
 8006166:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	4618      	mov	r0, r3
 800616c:	f04f 0100 	mov.w	r1, #0
 8006170:	f04f 0200 	mov.w	r2, #0
 8006174:	f04f 0300 	mov.w	r3, #0
 8006178:	008b      	lsls	r3, r1, #2
 800617a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800617e:	0082      	lsls	r2, r0, #2
 8006180:	4650      	mov	r0, sl
 8006182:	4659      	mov	r1, fp
 8006184:	f7fa f824 	bl	80001d0 <__aeabi_uldivmod>
 8006188:	4602      	mov	r2, r0
 800618a:	460b      	mov	r3, r1
 800618c:	4b0e      	ldr	r3, [pc, #56]	; (80061c8 <UART_SetConfig+0x38c>)
 800618e:	fba3 1302 	umull	r1, r3, r3, r2
 8006192:	095b      	lsrs	r3, r3, #5
 8006194:	2164      	movs	r1, #100	; 0x64
 8006196:	fb01 f303 	mul.w	r3, r1, r3
 800619a:	1ad3      	subs	r3, r2, r3
 800619c:	011b      	lsls	r3, r3, #4
 800619e:	3332      	adds	r3, #50	; 0x32
 80061a0:	4a09      	ldr	r2, [pc, #36]	; (80061c8 <UART_SetConfig+0x38c>)
 80061a2:	fba2 2303 	umull	r2, r3, r2, r3
 80061a6:	095b      	lsrs	r3, r3, #5
 80061a8:	f003 020f 	and.w	r2, r3, #15
 80061ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4432      	add	r2, r6
 80061b2:	609a      	str	r2, [r3, #8]
}
 80061b4:	bf00      	nop
 80061b6:	377c      	adds	r7, #124	; 0x7c
 80061b8:	46bd      	mov	sp, r7
 80061ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061be:	bf00      	nop
 80061c0:	40011000 	.word	0x40011000
 80061c4:	40011400 	.word	0x40011400
 80061c8:	51eb851f 	.word	0x51eb851f

080061cc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b085      	sub	sp, #20
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	4603      	mov	r3, r0
 80061d4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80061d6:	2300      	movs	r3, #0
 80061d8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80061da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80061de:	2b84      	cmp	r3, #132	; 0x84
 80061e0:	d005      	beq.n	80061ee <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80061e2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	4413      	add	r3, r2
 80061ea:	3303      	adds	r3, #3
 80061ec:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80061ee:	68fb      	ldr	r3, [r7, #12]
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3714      	adds	r7, #20
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006200:	f000 faf6 	bl	80067f0 <vTaskStartScheduler>
  
  return osOK;
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	bd80      	pop	{r7, pc}

0800620a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800620a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800620c:	b089      	sub	sp, #36	; 0x24
 800620e:	af04      	add	r7, sp, #16
 8006210:	6078      	str	r0, [r7, #4]
 8006212:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	695b      	ldr	r3, [r3, #20]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d020      	beq.n	800625e <osThreadCreate+0x54>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	699b      	ldr	r3, [r3, #24]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d01c      	beq.n	800625e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	685c      	ldr	r4, [r3, #4]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681d      	ldr	r5, [r3, #0]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	691e      	ldr	r6, [r3, #16]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006236:	4618      	mov	r0, r3
 8006238:	f7ff ffc8 	bl	80061cc <makeFreeRtosPriority>
 800623c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	695b      	ldr	r3, [r3, #20]
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006246:	9202      	str	r2, [sp, #8]
 8006248:	9301      	str	r3, [sp, #4]
 800624a:	9100      	str	r1, [sp, #0]
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	4632      	mov	r2, r6
 8006250:	4629      	mov	r1, r5
 8006252:	4620      	mov	r0, r4
 8006254:	f000 f8ed 	bl	8006432 <xTaskCreateStatic>
 8006258:	4603      	mov	r3, r0
 800625a:	60fb      	str	r3, [r7, #12]
 800625c:	e01c      	b.n	8006298 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	685c      	ldr	r4, [r3, #4]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800626a:	b29e      	uxth	r6, r3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006272:	4618      	mov	r0, r3
 8006274:	f7ff ffaa 	bl	80061cc <makeFreeRtosPriority>
 8006278:	4602      	mov	r2, r0
 800627a:	f107 030c 	add.w	r3, r7, #12
 800627e:	9301      	str	r3, [sp, #4]
 8006280:	9200      	str	r2, [sp, #0]
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	4632      	mov	r2, r6
 8006286:	4629      	mov	r1, r5
 8006288:	4620      	mov	r0, r4
 800628a:	f000 f92f 	bl	80064ec <xTaskCreate>
 800628e:	4603      	mov	r3, r0
 8006290:	2b01      	cmp	r3, #1
 8006292:	d001      	beq.n	8006298 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006294:	2300      	movs	r3, #0
 8006296:	e000      	b.n	800629a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006298:	68fb      	ldr	r3, [r7, #12]
}
 800629a:	4618      	mov	r0, r3
 800629c:	3714      	adds	r7, #20
 800629e:	46bd      	mov	sp, r7
 80062a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080062a2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80062a2:	b580      	push	{r7, lr}
 80062a4:	b084      	sub	sp, #16
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d001      	beq.n	80062b8 <osDelay+0x16>
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	e000      	b.n	80062ba <osDelay+0x18>
 80062b8:	2301      	movs	r3, #1
 80062ba:	4618      	mov	r0, r3
 80062bc:	f000 fa64 	bl	8006788 <vTaskDelay>
  
  return osOK;
 80062c0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3710      	adds	r7, #16
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}

080062ca <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80062ca:	b480      	push	{r7}
 80062cc:	b083      	sub	sp, #12
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f103 0208 	add.w	r2, r3, #8
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f04f 32ff 	mov.w	r2, #4294967295
 80062e2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f103 0208 	add.w	r2, r3, #8
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f103 0208 	add.w	r2, r3, #8
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80062fe:	bf00      	nop
 8006300:	370c      	adds	r7, #12
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr

0800630a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800630a:	b480      	push	{r7}
 800630c:	b083      	sub	sp, #12
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006318:	bf00      	nop
 800631a:	370c      	adds	r7, #12
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr

08006324 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006324:	b480      	push	{r7}
 8006326:	b085      	sub	sp, #20
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	68fa      	ldr	r2, [r7, #12]
 8006338:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	689a      	ldr	r2, [r3, #8]
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	683a      	ldr	r2, [r7, #0]
 8006348:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	683a      	ldr	r2, [r7, #0]
 800634e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	1c5a      	adds	r2, r3, #1
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	601a      	str	r2, [r3, #0]
}
 8006360:	bf00      	nop
 8006362:	3714      	adds	r7, #20
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800636c:	b480      	push	{r7}
 800636e:	b085      	sub	sp, #20
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006382:	d103      	bne.n	800638c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	691b      	ldr	r3, [r3, #16]
 8006388:	60fb      	str	r3, [r7, #12]
 800638a:	e00c      	b.n	80063a6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	3308      	adds	r3, #8
 8006390:	60fb      	str	r3, [r7, #12]
 8006392:	e002      	b.n	800639a <vListInsert+0x2e>
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	60fb      	str	r3, [r7, #12]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68ba      	ldr	r2, [r7, #8]
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d2f6      	bcs.n	8006394 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	685a      	ldr	r2, [r3, #4]
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	683a      	ldr	r2, [r7, #0]
 80063b4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	683a      	ldr	r2, [r7, #0]
 80063c0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	1c5a      	adds	r2, r3, #1
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	601a      	str	r2, [r3, #0]
}
 80063d2:	bf00      	nop
 80063d4:	3714      	adds	r7, #20
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr

080063de <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80063de:	b480      	push	{r7}
 80063e0:	b085      	sub	sp, #20
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	6892      	ldr	r2, [r2, #8]
 80063f4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	6852      	ldr	r2, [r2, #4]
 80063fe:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	429a      	cmp	r2, r3
 8006408:	d103      	bne.n	8006412 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	689a      	ldr	r2, [r3, #8]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	1e5a      	subs	r2, r3, #1
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
}
 8006426:	4618      	mov	r0, r3
 8006428:	3714      	adds	r7, #20
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr

08006432 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006432:	b580      	push	{r7, lr}
 8006434:	b08e      	sub	sp, #56	; 0x38
 8006436:	af04      	add	r7, sp, #16
 8006438:	60f8      	str	r0, [r7, #12]
 800643a:	60b9      	str	r1, [r7, #8]
 800643c:	607a      	str	r2, [r7, #4]
 800643e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006442:	2b00      	cmp	r3, #0
 8006444:	d10a      	bne.n	800645c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644a:	f383 8811 	msr	BASEPRI, r3
 800644e:	f3bf 8f6f 	isb	sy
 8006452:	f3bf 8f4f 	dsb	sy
 8006456:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006458:	bf00      	nop
 800645a:	e7fe      	b.n	800645a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800645c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800645e:	2b00      	cmp	r3, #0
 8006460:	d10a      	bne.n	8006478 <xTaskCreateStatic+0x46>
	__asm volatile
 8006462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006466:	f383 8811 	msr	BASEPRI, r3
 800646a:	f3bf 8f6f 	isb	sy
 800646e:	f3bf 8f4f 	dsb	sy
 8006472:	61fb      	str	r3, [r7, #28]
}
 8006474:	bf00      	nop
 8006476:	e7fe      	b.n	8006476 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006478:	23b4      	movs	r3, #180	; 0xb4
 800647a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	2bb4      	cmp	r3, #180	; 0xb4
 8006480:	d00a      	beq.n	8006498 <xTaskCreateStatic+0x66>
	__asm volatile
 8006482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006486:	f383 8811 	msr	BASEPRI, r3
 800648a:	f3bf 8f6f 	isb	sy
 800648e:	f3bf 8f4f 	dsb	sy
 8006492:	61bb      	str	r3, [r7, #24]
}
 8006494:	bf00      	nop
 8006496:	e7fe      	b.n	8006496 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006498:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800649a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800649c:	2b00      	cmp	r3, #0
 800649e:	d01e      	beq.n	80064de <xTaskCreateStatic+0xac>
 80064a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d01b      	beq.n	80064de <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80064a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064a8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80064aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064ae:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80064b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b2:	2202      	movs	r2, #2
 80064b4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80064b8:	2300      	movs	r3, #0
 80064ba:	9303      	str	r3, [sp, #12]
 80064bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064be:	9302      	str	r3, [sp, #8]
 80064c0:	f107 0314 	add.w	r3, r7, #20
 80064c4:	9301      	str	r3, [sp, #4]
 80064c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c8:	9300      	str	r3, [sp, #0]
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	68b9      	ldr	r1, [r7, #8]
 80064d0:	68f8      	ldr	r0, [r7, #12]
 80064d2:	f000 f851 	bl	8006578 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80064d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80064d8:	f000 f8ec 	bl	80066b4 <prvAddNewTaskToReadyList>
 80064dc:	e001      	b.n	80064e2 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80064de:	2300      	movs	r3, #0
 80064e0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80064e2:	697b      	ldr	r3, [r7, #20]
	}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3728      	adds	r7, #40	; 0x28
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b08c      	sub	sp, #48	; 0x30
 80064f0:	af04      	add	r7, sp, #16
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	60b9      	str	r1, [r7, #8]
 80064f6:	603b      	str	r3, [r7, #0]
 80064f8:	4613      	mov	r3, r2
 80064fa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80064fc:	88fb      	ldrh	r3, [r7, #6]
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	4618      	mov	r0, r3
 8006502:	f000 fef1 	bl	80072e8 <pvPortMalloc>
 8006506:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d00e      	beq.n	800652c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800650e:	20b4      	movs	r0, #180	; 0xb4
 8006510:	f000 feea 	bl	80072e8 <pvPortMalloc>
 8006514:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d003      	beq.n	8006524 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	697a      	ldr	r2, [r7, #20]
 8006520:	631a      	str	r2, [r3, #48]	; 0x30
 8006522:	e005      	b.n	8006530 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006524:	6978      	ldr	r0, [r7, #20]
 8006526:	f000 ffab 	bl	8007480 <vPortFree>
 800652a:	e001      	b.n	8006530 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800652c:	2300      	movs	r3, #0
 800652e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006530:	69fb      	ldr	r3, [r7, #28]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d017      	beq.n	8006566 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006536:	69fb      	ldr	r3, [r7, #28]
 8006538:	2200      	movs	r2, #0
 800653a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800653e:	88fa      	ldrh	r2, [r7, #6]
 8006540:	2300      	movs	r3, #0
 8006542:	9303      	str	r3, [sp, #12]
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	9302      	str	r3, [sp, #8]
 8006548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800654a:	9301      	str	r3, [sp, #4]
 800654c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800654e:	9300      	str	r3, [sp, #0]
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	68b9      	ldr	r1, [r7, #8]
 8006554:	68f8      	ldr	r0, [r7, #12]
 8006556:	f000 f80f 	bl	8006578 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800655a:	69f8      	ldr	r0, [r7, #28]
 800655c:	f000 f8aa 	bl	80066b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006560:	2301      	movs	r3, #1
 8006562:	61bb      	str	r3, [r7, #24]
 8006564:	e002      	b.n	800656c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006566:	f04f 33ff 	mov.w	r3, #4294967295
 800656a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800656c:	69bb      	ldr	r3, [r7, #24]
	}
 800656e:	4618      	mov	r0, r3
 8006570:	3720      	adds	r7, #32
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
	...

08006578 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b088      	sub	sp, #32
 800657c:	af00      	add	r7, sp, #0
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	607a      	str	r2, [r7, #4]
 8006584:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006588:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006590:	3b01      	subs	r3, #1
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	4413      	add	r3, r2
 8006596:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	f023 0307 	bic.w	r3, r3, #7
 800659e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	f003 0307 	and.w	r3, r3, #7
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d00a      	beq.n	80065c0 <prvInitialiseNewTask+0x48>
	__asm volatile
 80065aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ae:	f383 8811 	msr	BASEPRI, r3
 80065b2:	f3bf 8f6f 	isb	sy
 80065b6:	f3bf 8f4f 	dsb	sy
 80065ba:	617b      	str	r3, [r7, #20]
}
 80065bc:	bf00      	nop
 80065be:	e7fe      	b.n	80065be <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d01f      	beq.n	8006606 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80065c6:	2300      	movs	r3, #0
 80065c8:	61fb      	str	r3, [r7, #28]
 80065ca:	e012      	b.n	80065f2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80065cc:	68ba      	ldr	r2, [r7, #8]
 80065ce:	69fb      	ldr	r3, [r7, #28]
 80065d0:	4413      	add	r3, r2
 80065d2:	7819      	ldrb	r1, [r3, #0]
 80065d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065d6:	69fb      	ldr	r3, [r7, #28]
 80065d8:	4413      	add	r3, r2
 80065da:	3334      	adds	r3, #52	; 0x34
 80065dc:	460a      	mov	r2, r1
 80065de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80065e0:	68ba      	ldr	r2, [r7, #8]
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	4413      	add	r3, r2
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d006      	beq.n	80065fa <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	3301      	adds	r3, #1
 80065f0:	61fb      	str	r3, [r7, #28]
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	2b0f      	cmp	r3, #15
 80065f6:	d9e9      	bls.n	80065cc <prvInitialiseNewTask+0x54>
 80065f8:	e000      	b.n	80065fc <prvInitialiseNewTask+0x84>
			{
				break;
 80065fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80065fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fe:	2200      	movs	r2, #0
 8006600:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006604:	e003      	b.n	800660e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006608:	2200      	movs	r2, #0
 800660a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800660e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006610:	2b06      	cmp	r3, #6
 8006612:	d901      	bls.n	8006618 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006614:	2306      	movs	r3, #6
 8006616:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800661c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800661e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006620:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006622:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006626:	2200      	movs	r2, #0
 8006628:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800662a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662c:	3304      	adds	r3, #4
 800662e:	4618      	mov	r0, r3
 8006630:	f7ff fe6b 	bl	800630a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006636:	3318      	adds	r3, #24
 8006638:	4618      	mov	r0, r3
 800663a:	f7ff fe66 	bl	800630a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800663e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006640:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006642:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006646:	f1c3 0207 	rsb	r2, r3, #7
 800664a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800664e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006650:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006652:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006656:	2200      	movs	r2, #0
 8006658:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800665c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800665e:	2200      	movs	r2, #0
 8006660:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006666:	334c      	adds	r3, #76	; 0x4c
 8006668:	2260      	movs	r2, #96	; 0x60
 800666a:	2100      	movs	r1, #0
 800666c:	4618      	mov	r0, r3
 800666e:	f001 f84b 	bl	8007708 <memset>
 8006672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006674:	4a0c      	ldr	r2, [pc, #48]	; (80066a8 <prvInitialiseNewTask+0x130>)
 8006676:	651a      	str	r2, [r3, #80]	; 0x50
 8006678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800667a:	4a0c      	ldr	r2, [pc, #48]	; (80066ac <prvInitialiseNewTask+0x134>)
 800667c:	655a      	str	r2, [r3, #84]	; 0x54
 800667e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006680:	4a0b      	ldr	r2, [pc, #44]	; (80066b0 <prvInitialiseNewTask+0x138>)
 8006682:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006684:	683a      	ldr	r2, [r7, #0]
 8006686:	68f9      	ldr	r1, [r7, #12]
 8006688:	69b8      	ldr	r0, [r7, #24]
 800668a:	f000 fc1f 	bl	8006ecc <pxPortInitialiseStack>
 800668e:	4602      	mov	r2, r0
 8006690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006692:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006696:	2b00      	cmp	r3, #0
 8006698:	d002      	beq.n	80066a0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800669a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800669c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800669e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066a0:	bf00      	nop
 80066a2:	3720      	adds	r7, #32
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	08007984 	.word	0x08007984
 80066ac:	080079a4 	.word	0x080079a4
 80066b0:	08007964 	.word	0x08007964

080066b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80066bc:	f000 fd32 	bl	8007124 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80066c0:	4b2a      	ldr	r3, [pc, #168]	; (800676c <prvAddNewTaskToReadyList+0xb8>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	3301      	adds	r3, #1
 80066c6:	4a29      	ldr	r2, [pc, #164]	; (800676c <prvAddNewTaskToReadyList+0xb8>)
 80066c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80066ca:	4b29      	ldr	r3, [pc, #164]	; (8006770 <prvAddNewTaskToReadyList+0xbc>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d109      	bne.n	80066e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80066d2:	4a27      	ldr	r2, [pc, #156]	; (8006770 <prvAddNewTaskToReadyList+0xbc>)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80066d8:	4b24      	ldr	r3, [pc, #144]	; (800676c <prvAddNewTaskToReadyList+0xb8>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d110      	bne.n	8006702 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80066e0:	f000 facc 	bl	8006c7c <prvInitialiseTaskLists>
 80066e4:	e00d      	b.n	8006702 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80066e6:	4b23      	ldr	r3, [pc, #140]	; (8006774 <prvAddNewTaskToReadyList+0xc0>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d109      	bne.n	8006702 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80066ee:	4b20      	ldr	r3, [pc, #128]	; (8006770 <prvAddNewTaskToReadyList+0xbc>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d802      	bhi.n	8006702 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80066fc:	4a1c      	ldr	r2, [pc, #112]	; (8006770 <prvAddNewTaskToReadyList+0xbc>)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006702:	4b1d      	ldr	r3, [pc, #116]	; (8006778 <prvAddNewTaskToReadyList+0xc4>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	3301      	adds	r3, #1
 8006708:	4a1b      	ldr	r2, [pc, #108]	; (8006778 <prvAddNewTaskToReadyList+0xc4>)
 800670a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006710:	2201      	movs	r2, #1
 8006712:	409a      	lsls	r2, r3
 8006714:	4b19      	ldr	r3, [pc, #100]	; (800677c <prvAddNewTaskToReadyList+0xc8>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4313      	orrs	r3, r2
 800671a:	4a18      	ldr	r2, [pc, #96]	; (800677c <prvAddNewTaskToReadyList+0xc8>)
 800671c:	6013      	str	r3, [r2, #0]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006722:	4613      	mov	r3, r2
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	4413      	add	r3, r2
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	4a15      	ldr	r2, [pc, #84]	; (8006780 <prvAddNewTaskToReadyList+0xcc>)
 800672c:	441a      	add	r2, r3
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	3304      	adds	r3, #4
 8006732:	4619      	mov	r1, r3
 8006734:	4610      	mov	r0, r2
 8006736:	f7ff fdf5 	bl	8006324 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800673a:	f000 fd23 	bl	8007184 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800673e:	4b0d      	ldr	r3, [pc, #52]	; (8006774 <prvAddNewTaskToReadyList+0xc0>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d00e      	beq.n	8006764 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006746:	4b0a      	ldr	r3, [pc, #40]	; (8006770 <prvAddNewTaskToReadyList+0xbc>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006750:	429a      	cmp	r2, r3
 8006752:	d207      	bcs.n	8006764 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006754:	4b0b      	ldr	r3, [pc, #44]	; (8006784 <prvAddNewTaskToReadyList+0xd0>)
 8006756:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800675a:	601a      	str	r2, [r3, #0]
 800675c:	f3bf 8f4f 	dsb	sy
 8006760:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006764:	bf00      	nop
 8006766:	3708      	adds	r7, #8
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}
 800676c:	2000066c 	.word	0x2000066c
 8006770:	2000056c 	.word	0x2000056c
 8006774:	20000678 	.word	0x20000678
 8006778:	20000688 	.word	0x20000688
 800677c:	20000674 	.word	0x20000674
 8006780:	20000570 	.word	0x20000570
 8006784:	e000ed04 	.word	0xe000ed04

08006788 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006790:	2300      	movs	r3, #0
 8006792:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d017      	beq.n	80067ca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800679a:	4b13      	ldr	r3, [pc, #76]	; (80067e8 <vTaskDelay+0x60>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00a      	beq.n	80067b8 <vTaskDelay+0x30>
	__asm volatile
 80067a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a6:	f383 8811 	msr	BASEPRI, r3
 80067aa:	f3bf 8f6f 	isb	sy
 80067ae:	f3bf 8f4f 	dsb	sy
 80067b2:	60bb      	str	r3, [r7, #8]
}
 80067b4:	bf00      	nop
 80067b6:	e7fe      	b.n	80067b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80067b8:	f000 f884 	bl	80068c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80067bc:	2100      	movs	r1, #0
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 fb1e 	bl	8006e00 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80067c4:	f000 f88c 	bl	80068e0 <xTaskResumeAll>
 80067c8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d107      	bne.n	80067e0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80067d0:	4b06      	ldr	r3, [pc, #24]	; (80067ec <vTaskDelay+0x64>)
 80067d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067d6:	601a      	str	r2, [r3, #0]
 80067d8:	f3bf 8f4f 	dsb	sy
 80067dc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80067e0:	bf00      	nop
 80067e2:	3710      	adds	r7, #16
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	20000694 	.word	0x20000694
 80067ec:	e000ed04 	.word	0xe000ed04

080067f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b08a      	sub	sp, #40	; 0x28
 80067f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80067f6:	2300      	movs	r3, #0
 80067f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80067fa:	2300      	movs	r3, #0
 80067fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80067fe:	463a      	mov	r2, r7
 8006800:	1d39      	adds	r1, r7, #4
 8006802:	f107 0308 	add.w	r3, r7, #8
 8006806:	4618      	mov	r0, r3
 8006808:	f7f9 fe5e 	bl	80004c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800680c:	6839      	ldr	r1, [r7, #0]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	68ba      	ldr	r2, [r7, #8]
 8006812:	9202      	str	r2, [sp, #8]
 8006814:	9301      	str	r3, [sp, #4]
 8006816:	2300      	movs	r3, #0
 8006818:	9300      	str	r3, [sp, #0]
 800681a:	2300      	movs	r3, #0
 800681c:	460a      	mov	r2, r1
 800681e:	4921      	ldr	r1, [pc, #132]	; (80068a4 <vTaskStartScheduler+0xb4>)
 8006820:	4821      	ldr	r0, [pc, #132]	; (80068a8 <vTaskStartScheduler+0xb8>)
 8006822:	f7ff fe06 	bl	8006432 <xTaskCreateStatic>
 8006826:	4603      	mov	r3, r0
 8006828:	4a20      	ldr	r2, [pc, #128]	; (80068ac <vTaskStartScheduler+0xbc>)
 800682a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800682c:	4b1f      	ldr	r3, [pc, #124]	; (80068ac <vTaskStartScheduler+0xbc>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d002      	beq.n	800683a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006834:	2301      	movs	r3, #1
 8006836:	617b      	str	r3, [r7, #20]
 8006838:	e001      	b.n	800683e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800683a:	2300      	movs	r3, #0
 800683c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	2b01      	cmp	r3, #1
 8006842:	d11b      	bne.n	800687c <vTaskStartScheduler+0x8c>
	__asm volatile
 8006844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006848:	f383 8811 	msr	BASEPRI, r3
 800684c:	f3bf 8f6f 	isb	sy
 8006850:	f3bf 8f4f 	dsb	sy
 8006854:	613b      	str	r3, [r7, #16]
}
 8006856:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006858:	4b15      	ldr	r3, [pc, #84]	; (80068b0 <vTaskStartScheduler+0xc0>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	334c      	adds	r3, #76	; 0x4c
 800685e:	4a15      	ldr	r2, [pc, #84]	; (80068b4 <vTaskStartScheduler+0xc4>)
 8006860:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006862:	4b15      	ldr	r3, [pc, #84]	; (80068b8 <vTaskStartScheduler+0xc8>)
 8006864:	f04f 32ff 	mov.w	r2, #4294967295
 8006868:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800686a:	4b14      	ldr	r3, [pc, #80]	; (80068bc <vTaskStartScheduler+0xcc>)
 800686c:	2201      	movs	r2, #1
 800686e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006870:	4b13      	ldr	r3, [pc, #76]	; (80068c0 <vTaskStartScheduler+0xd0>)
 8006872:	2200      	movs	r2, #0
 8006874:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006876:	f000 fbb3 	bl	8006fe0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800687a:	e00e      	b.n	800689a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006882:	d10a      	bne.n	800689a <vTaskStartScheduler+0xaa>
	__asm volatile
 8006884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006888:	f383 8811 	msr	BASEPRI, r3
 800688c:	f3bf 8f6f 	isb	sy
 8006890:	f3bf 8f4f 	dsb	sy
 8006894:	60fb      	str	r3, [r7, #12]
}
 8006896:	bf00      	nop
 8006898:	e7fe      	b.n	8006898 <vTaskStartScheduler+0xa8>
}
 800689a:	bf00      	nop
 800689c:	3718      	adds	r7, #24
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	bf00      	nop
 80068a4:	08007944 	.word	0x08007944
 80068a8:	08006c4d 	.word	0x08006c4d
 80068ac:	20000690 	.word	0x20000690
 80068b0:	2000056c 	.word	0x2000056c
 80068b4:	20000010 	.word	0x20000010
 80068b8:	2000068c 	.word	0x2000068c
 80068bc:	20000678 	.word	0x20000678
 80068c0:	20000670 	.word	0x20000670

080068c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80068c4:	b480      	push	{r7}
 80068c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80068c8:	4b04      	ldr	r3, [pc, #16]	; (80068dc <vTaskSuspendAll+0x18>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	3301      	adds	r3, #1
 80068ce:	4a03      	ldr	r2, [pc, #12]	; (80068dc <vTaskSuspendAll+0x18>)
 80068d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80068d2:	bf00      	nop
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr
 80068dc:	20000694 	.word	0x20000694

080068e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b084      	sub	sp, #16
 80068e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80068e6:	2300      	movs	r3, #0
 80068e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80068ea:	2300      	movs	r3, #0
 80068ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80068ee:	4b41      	ldr	r3, [pc, #260]	; (80069f4 <xTaskResumeAll+0x114>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d10a      	bne.n	800690c <xTaskResumeAll+0x2c>
	__asm volatile
 80068f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068fa:	f383 8811 	msr	BASEPRI, r3
 80068fe:	f3bf 8f6f 	isb	sy
 8006902:	f3bf 8f4f 	dsb	sy
 8006906:	603b      	str	r3, [r7, #0]
}
 8006908:	bf00      	nop
 800690a:	e7fe      	b.n	800690a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800690c:	f000 fc0a 	bl	8007124 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006910:	4b38      	ldr	r3, [pc, #224]	; (80069f4 <xTaskResumeAll+0x114>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	3b01      	subs	r3, #1
 8006916:	4a37      	ldr	r2, [pc, #220]	; (80069f4 <xTaskResumeAll+0x114>)
 8006918:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800691a:	4b36      	ldr	r3, [pc, #216]	; (80069f4 <xTaskResumeAll+0x114>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d161      	bne.n	80069e6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006922:	4b35      	ldr	r3, [pc, #212]	; (80069f8 <xTaskResumeAll+0x118>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d05d      	beq.n	80069e6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800692a:	e02e      	b.n	800698a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800692c:	4b33      	ldr	r3, [pc, #204]	; (80069fc <xTaskResumeAll+0x11c>)
 800692e:	68db      	ldr	r3, [r3, #12]
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	3318      	adds	r3, #24
 8006938:	4618      	mov	r0, r3
 800693a:	f7ff fd50 	bl	80063de <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	3304      	adds	r3, #4
 8006942:	4618      	mov	r0, r3
 8006944:	f7ff fd4b 	bl	80063de <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800694c:	2201      	movs	r2, #1
 800694e:	409a      	lsls	r2, r3
 8006950:	4b2b      	ldr	r3, [pc, #172]	; (8006a00 <xTaskResumeAll+0x120>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4313      	orrs	r3, r2
 8006956:	4a2a      	ldr	r2, [pc, #168]	; (8006a00 <xTaskResumeAll+0x120>)
 8006958:	6013      	str	r3, [r2, #0]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800695e:	4613      	mov	r3, r2
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	4413      	add	r3, r2
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	4a27      	ldr	r2, [pc, #156]	; (8006a04 <xTaskResumeAll+0x124>)
 8006968:	441a      	add	r2, r3
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	3304      	adds	r3, #4
 800696e:	4619      	mov	r1, r3
 8006970:	4610      	mov	r0, r2
 8006972:	f7ff fcd7 	bl	8006324 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800697a:	4b23      	ldr	r3, [pc, #140]	; (8006a08 <xTaskResumeAll+0x128>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006980:	429a      	cmp	r2, r3
 8006982:	d302      	bcc.n	800698a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006984:	4b21      	ldr	r3, [pc, #132]	; (8006a0c <xTaskResumeAll+0x12c>)
 8006986:	2201      	movs	r2, #1
 8006988:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800698a:	4b1c      	ldr	r3, [pc, #112]	; (80069fc <xTaskResumeAll+0x11c>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d1cc      	bne.n	800692c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d001      	beq.n	800699c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006998:	f000 fa12 	bl	8006dc0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800699c:	4b1c      	ldr	r3, [pc, #112]	; (8006a10 <xTaskResumeAll+0x130>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d010      	beq.n	80069ca <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80069a8:	f000 f836 	bl	8006a18 <xTaskIncrementTick>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d002      	beq.n	80069b8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80069b2:	4b16      	ldr	r3, [pc, #88]	; (8006a0c <xTaskResumeAll+0x12c>)
 80069b4:	2201      	movs	r2, #1
 80069b6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	3b01      	subs	r3, #1
 80069bc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d1f1      	bne.n	80069a8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80069c4:	4b12      	ldr	r3, [pc, #72]	; (8006a10 <xTaskResumeAll+0x130>)
 80069c6:	2200      	movs	r2, #0
 80069c8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80069ca:	4b10      	ldr	r3, [pc, #64]	; (8006a0c <xTaskResumeAll+0x12c>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d009      	beq.n	80069e6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80069d2:	2301      	movs	r3, #1
 80069d4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80069d6:	4b0f      	ldr	r3, [pc, #60]	; (8006a14 <xTaskResumeAll+0x134>)
 80069d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069dc:	601a      	str	r2, [r3, #0]
 80069de:	f3bf 8f4f 	dsb	sy
 80069e2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80069e6:	f000 fbcd 	bl	8007184 <vPortExitCritical>

	return xAlreadyYielded;
 80069ea:	68bb      	ldr	r3, [r7, #8]
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3710      	adds	r7, #16
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}
 80069f4:	20000694 	.word	0x20000694
 80069f8:	2000066c 	.word	0x2000066c
 80069fc:	2000062c 	.word	0x2000062c
 8006a00:	20000674 	.word	0x20000674
 8006a04:	20000570 	.word	0x20000570
 8006a08:	2000056c 	.word	0x2000056c
 8006a0c:	20000680 	.word	0x20000680
 8006a10:	2000067c 	.word	0x2000067c
 8006a14:	e000ed04 	.word	0xe000ed04

08006a18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b086      	sub	sp, #24
 8006a1c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a22:	4b4e      	ldr	r3, [pc, #312]	; (8006b5c <xTaskIncrementTick+0x144>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	f040 808e 	bne.w	8006b48 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006a2c:	4b4c      	ldr	r3, [pc, #304]	; (8006b60 <xTaskIncrementTick+0x148>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	3301      	adds	r3, #1
 8006a32:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006a34:	4a4a      	ldr	r2, [pc, #296]	; (8006b60 <xTaskIncrementTick+0x148>)
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d120      	bne.n	8006a82 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006a40:	4b48      	ldr	r3, [pc, #288]	; (8006b64 <xTaskIncrementTick+0x14c>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d00a      	beq.n	8006a60 <xTaskIncrementTick+0x48>
	__asm volatile
 8006a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a4e:	f383 8811 	msr	BASEPRI, r3
 8006a52:	f3bf 8f6f 	isb	sy
 8006a56:	f3bf 8f4f 	dsb	sy
 8006a5a:	603b      	str	r3, [r7, #0]
}
 8006a5c:	bf00      	nop
 8006a5e:	e7fe      	b.n	8006a5e <xTaskIncrementTick+0x46>
 8006a60:	4b40      	ldr	r3, [pc, #256]	; (8006b64 <xTaskIncrementTick+0x14c>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	60fb      	str	r3, [r7, #12]
 8006a66:	4b40      	ldr	r3, [pc, #256]	; (8006b68 <xTaskIncrementTick+0x150>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a3e      	ldr	r2, [pc, #248]	; (8006b64 <xTaskIncrementTick+0x14c>)
 8006a6c:	6013      	str	r3, [r2, #0]
 8006a6e:	4a3e      	ldr	r2, [pc, #248]	; (8006b68 <xTaskIncrementTick+0x150>)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6013      	str	r3, [r2, #0]
 8006a74:	4b3d      	ldr	r3, [pc, #244]	; (8006b6c <xTaskIncrementTick+0x154>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	3301      	adds	r3, #1
 8006a7a:	4a3c      	ldr	r2, [pc, #240]	; (8006b6c <xTaskIncrementTick+0x154>)
 8006a7c:	6013      	str	r3, [r2, #0]
 8006a7e:	f000 f99f 	bl	8006dc0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006a82:	4b3b      	ldr	r3, [pc, #236]	; (8006b70 <xTaskIncrementTick+0x158>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	693a      	ldr	r2, [r7, #16]
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d348      	bcc.n	8006b1e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a8c:	4b35      	ldr	r3, [pc, #212]	; (8006b64 <xTaskIncrementTick+0x14c>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d104      	bne.n	8006aa0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a96:	4b36      	ldr	r3, [pc, #216]	; (8006b70 <xTaskIncrementTick+0x158>)
 8006a98:	f04f 32ff 	mov.w	r2, #4294967295
 8006a9c:	601a      	str	r2, [r3, #0]
					break;
 8006a9e:	e03e      	b.n	8006b1e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006aa0:	4b30      	ldr	r3, [pc, #192]	; (8006b64 <xTaskIncrementTick+0x14c>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006ab0:	693a      	ldr	r2, [r7, #16]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d203      	bcs.n	8006ac0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006ab8:	4a2d      	ldr	r2, [pc, #180]	; (8006b70 <xTaskIncrementTick+0x158>)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006abe:	e02e      	b.n	8006b1e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	3304      	adds	r3, #4
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f7ff fc8a 	bl	80063de <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d004      	beq.n	8006adc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	3318      	adds	r3, #24
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f7ff fc81 	bl	80063de <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	409a      	lsls	r2, r3
 8006ae4:	4b23      	ldr	r3, [pc, #140]	; (8006b74 <xTaskIncrementTick+0x15c>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	4a22      	ldr	r2, [pc, #136]	; (8006b74 <xTaskIncrementTick+0x15c>)
 8006aec:	6013      	str	r3, [r2, #0]
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006af2:	4613      	mov	r3, r2
 8006af4:	009b      	lsls	r3, r3, #2
 8006af6:	4413      	add	r3, r2
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	4a1f      	ldr	r2, [pc, #124]	; (8006b78 <xTaskIncrementTick+0x160>)
 8006afc:	441a      	add	r2, r3
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	3304      	adds	r3, #4
 8006b02:	4619      	mov	r1, r3
 8006b04:	4610      	mov	r0, r2
 8006b06:	f7ff fc0d 	bl	8006324 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b0e:	4b1b      	ldr	r3, [pc, #108]	; (8006b7c <xTaskIncrementTick+0x164>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d3b9      	bcc.n	8006a8c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b1c:	e7b6      	b.n	8006a8c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006b1e:	4b17      	ldr	r3, [pc, #92]	; (8006b7c <xTaskIncrementTick+0x164>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b24:	4914      	ldr	r1, [pc, #80]	; (8006b78 <xTaskIncrementTick+0x160>)
 8006b26:	4613      	mov	r3, r2
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	4413      	add	r3, r2
 8006b2c:	009b      	lsls	r3, r3, #2
 8006b2e:	440b      	add	r3, r1
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d901      	bls.n	8006b3a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006b36:	2301      	movs	r3, #1
 8006b38:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006b3a:	4b11      	ldr	r3, [pc, #68]	; (8006b80 <xTaskIncrementTick+0x168>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d007      	beq.n	8006b52 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006b42:	2301      	movs	r3, #1
 8006b44:	617b      	str	r3, [r7, #20]
 8006b46:	e004      	b.n	8006b52 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006b48:	4b0e      	ldr	r3, [pc, #56]	; (8006b84 <xTaskIncrementTick+0x16c>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	3301      	adds	r3, #1
 8006b4e:	4a0d      	ldr	r2, [pc, #52]	; (8006b84 <xTaskIncrementTick+0x16c>)
 8006b50:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006b52:	697b      	ldr	r3, [r7, #20]
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3718      	adds	r7, #24
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}
 8006b5c:	20000694 	.word	0x20000694
 8006b60:	20000670 	.word	0x20000670
 8006b64:	20000624 	.word	0x20000624
 8006b68:	20000628 	.word	0x20000628
 8006b6c:	20000684 	.word	0x20000684
 8006b70:	2000068c 	.word	0x2000068c
 8006b74:	20000674 	.word	0x20000674
 8006b78:	20000570 	.word	0x20000570
 8006b7c:	2000056c 	.word	0x2000056c
 8006b80:	20000680 	.word	0x20000680
 8006b84:	2000067c 	.word	0x2000067c

08006b88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b087      	sub	sp, #28
 8006b8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006b8e:	4b29      	ldr	r3, [pc, #164]	; (8006c34 <vTaskSwitchContext+0xac>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d003      	beq.n	8006b9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006b96:	4b28      	ldr	r3, [pc, #160]	; (8006c38 <vTaskSwitchContext+0xb0>)
 8006b98:	2201      	movs	r2, #1
 8006b9a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006b9c:	e044      	b.n	8006c28 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8006b9e:	4b26      	ldr	r3, [pc, #152]	; (8006c38 <vTaskSwitchContext+0xb0>)
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ba4:	4b25      	ldr	r3, [pc, #148]	; (8006c3c <vTaskSwitchContext+0xb4>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	fab3 f383 	clz	r3, r3
 8006bb0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006bb2:	7afb      	ldrb	r3, [r7, #11]
 8006bb4:	f1c3 031f 	rsb	r3, r3, #31
 8006bb8:	617b      	str	r3, [r7, #20]
 8006bba:	4921      	ldr	r1, [pc, #132]	; (8006c40 <vTaskSwitchContext+0xb8>)
 8006bbc:	697a      	ldr	r2, [r7, #20]
 8006bbe:	4613      	mov	r3, r2
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	4413      	add	r3, r2
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	440b      	add	r3, r1
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d10a      	bne.n	8006be4 <vTaskSwitchContext+0x5c>
	__asm volatile
 8006bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd2:	f383 8811 	msr	BASEPRI, r3
 8006bd6:	f3bf 8f6f 	isb	sy
 8006bda:	f3bf 8f4f 	dsb	sy
 8006bde:	607b      	str	r3, [r7, #4]
}
 8006be0:	bf00      	nop
 8006be2:	e7fe      	b.n	8006be2 <vTaskSwitchContext+0x5a>
 8006be4:	697a      	ldr	r2, [r7, #20]
 8006be6:	4613      	mov	r3, r2
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	4413      	add	r3, r2
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	4a14      	ldr	r2, [pc, #80]	; (8006c40 <vTaskSwitchContext+0xb8>)
 8006bf0:	4413      	add	r3, r2
 8006bf2:	613b      	str	r3, [r7, #16]
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	685a      	ldr	r2, [r3, #4]
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	605a      	str	r2, [r3, #4]
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	685a      	ldr	r2, [r3, #4]
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	3308      	adds	r3, #8
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d104      	bne.n	8006c14 <vTaskSwitchContext+0x8c>
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	685a      	ldr	r2, [r3, #4]
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	605a      	str	r2, [r3, #4]
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	4a0a      	ldr	r2, [pc, #40]	; (8006c44 <vTaskSwitchContext+0xbc>)
 8006c1c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006c1e:	4b09      	ldr	r3, [pc, #36]	; (8006c44 <vTaskSwitchContext+0xbc>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	334c      	adds	r3, #76	; 0x4c
 8006c24:	4a08      	ldr	r2, [pc, #32]	; (8006c48 <vTaskSwitchContext+0xc0>)
 8006c26:	6013      	str	r3, [r2, #0]
}
 8006c28:	bf00      	nop
 8006c2a:	371c      	adds	r7, #28
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr
 8006c34:	20000694 	.word	0x20000694
 8006c38:	20000680 	.word	0x20000680
 8006c3c:	20000674 	.word	0x20000674
 8006c40:	20000570 	.word	0x20000570
 8006c44:	2000056c 	.word	0x2000056c
 8006c48:	20000010 	.word	0x20000010

08006c4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006c54:	f000 f852 	bl	8006cfc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006c58:	4b06      	ldr	r3, [pc, #24]	; (8006c74 <prvIdleTask+0x28>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d9f9      	bls.n	8006c54 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006c60:	4b05      	ldr	r3, [pc, #20]	; (8006c78 <prvIdleTask+0x2c>)
 8006c62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c66:	601a      	str	r2, [r3, #0]
 8006c68:	f3bf 8f4f 	dsb	sy
 8006c6c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006c70:	e7f0      	b.n	8006c54 <prvIdleTask+0x8>
 8006c72:	bf00      	nop
 8006c74:	20000570 	.word	0x20000570
 8006c78:	e000ed04 	.word	0xe000ed04

08006c7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b082      	sub	sp, #8
 8006c80:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c82:	2300      	movs	r3, #0
 8006c84:	607b      	str	r3, [r7, #4]
 8006c86:	e00c      	b.n	8006ca2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	4613      	mov	r3, r2
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	4413      	add	r3, r2
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	4a12      	ldr	r2, [pc, #72]	; (8006cdc <prvInitialiseTaskLists+0x60>)
 8006c94:	4413      	add	r3, r2
 8006c96:	4618      	mov	r0, r3
 8006c98:	f7ff fb17 	bl	80062ca <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	607b      	str	r3, [r7, #4]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2b06      	cmp	r3, #6
 8006ca6:	d9ef      	bls.n	8006c88 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006ca8:	480d      	ldr	r0, [pc, #52]	; (8006ce0 <prvInitialiseTaskLists+0x64>)
 8006caa:	f7ff fb0e 	bl	80062ca <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006cae:	480d      	ldr	r0, [pc, #52]	; (8006ce4 <prvInitialiseTaskLists+0x68>)
 8006cb0:	f7ff fb0b 	bl	80062ca <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006cb4:	480c      	ldr	r0, [pc, #48]	; (8006ce8 <prvInitialiseTaskLists+0x6c>)
 8006cb6:	f7ff fb08 	bl	80062ca <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006cba:	480c      	ldr	r0, [pc, #48]	; (8006cec <prvInitialiseTaskLists+0x70>)
 8006cbc:	f7ff fb05 	bl	80062ca <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006cc0:	480b      	ldr	r0, [pc, #44]	; (8006cf0 <prvInitialiseTaskLists+0x74>)
 8006cc2:	f7ff fb02 	bl	80062ca <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006cc6:	4b0b      	ldr	r3, [pc, #44]	; (8006cf4 <prvInitialiseTaskLists+0x78>)
 8006cc8:	4a05      	ldr	r2, [pc, #20]	; (8006ce0 <prvInitialiseTaskLists+0x64>)
 8006cca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006ccc:	4b0a      	ldr	r3, [pc, #40]	; (8006cf8 <prvInitialiseTaskLists+0x7c>)
 8006cce:	4a05      	ldr	r2, [pc, #20]	; (8006ce4 <prvInitialiseTaskLists+0x68>)
 8006cd0:	601a      	str	r2, [r3, #0]
}
 8006cd2:	bf00      	nop
 8006cd4:	3708      	adds	r7, #8
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	20000570 	.word	0x20000570
 8006ce0:	200005fc 	.word	0x200005fc
 8006ce4:	20000610 	.word	0x20000610
 8006ce8:	2000062c 	.word	0x2000062c
 8006cec:	20000640 	.word	0x20000640
 8006cf0:	20000658 	.word	0x20000658
 8006cf4:	20000624 	.word	0x20000624
 8006cf8:	20000628 	.word	0x20000628

08006cfc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b082      	sub	sp, #8
 8006d00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d02:	e019      	b.n	8006d38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006d04:	f000 fa0e 	bl	8007124 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d08:	4b10      	ldr	r3, [pc, #64]	; (8006d4c <prvCheckTasksWaitingTermination+0x50>)
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	68db      	ldr	r3, [r3, #12]
 8006d0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	3304      	adds	r3, #4
 8006d14:	4618      	mov	r0, r3
 8006d16:	f7ff fb62 	bl	80063de <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006d1a:	4b0d      	ldr	r3, [pc, #52]	; (8006d50 <prvCheckTasksWaitingTermination+0x54>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	3b01      	subs	r3, #1
 8006d20:	4a0b      	ldr	r2, [pc, #44]	; (8006d50 <prvCheckTasksWaitingTermination+0x54>)
 8006d22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006d24:	4b0b      	ldr	r3, [pc, #44]	; (8006d54 <prvCheckTasksWaitingTermination+0x58>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	3b01      	subs	r3, #1
 8006d2a:	4a0a      	ldr	r2, [pc, #40]	; (8006d54 <prvCheckTasksWaitingTermination+0x58>)
 8006d2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006d2e:	f000 fa29 	bl	8007184 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 f810 	bl	8006d58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d38:	4b06      	ldr	r3, [pc, #24]	; (8006d54 <prvCheckTasksWaitingTermination+0x58>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d1e1      	bne.n	8006d04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006d40:	bf00      	nop
 8006d42:	bf00      	nop
 8006d44:	3708      	adds	r7, #8
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	bf00      	nop
 8006d4c:	20000640 	.word	0x20000640
 8006d50:	2000066c 	.word	0x2000066c
 8006d54:	20000654 	.word	0x20000654

08006d58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b084      	sub	sp, #16
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	334c      	adds	r3, #76	; 0x4c
 8006d64:	4618      	mov	r0, r3
 8006d66:	f000 fce5 	bl	8007734 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d108      	bne.n	8006d86 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f000 fb81 	bl	8007480 <vPortFree>
				vPortFree( pxTCB );
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 fb7e 	bl	8007480 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006d84:	e018      	b.n	8006db8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d103      	bne.n	8006d98 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 fb75 	bl	8007480 <vPortFree>
	}
 8006d96:	e00f      	b.n	8006db8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006d9e:	2b02      	cmp	r3, #2
 8006da0:	d00a      	beq.n	8006db8 <prvDeleteTCB+0x60>
	__asm volatile
 8006da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da6:	f383 8811 	msr	BASEPRI, r3
 8006daa:	f3bf 8f6f 	isb	sy
 8006dae:	f3bf 8f4f 	dsb	sy
 8006db2:	60fb      	str	r3, [r7, #12]
}
 8006db4:	bf00      	nop
 8006db6:	e7fe      	b.n	8006db6 <prvDeleteTCB+0x5e>
	}
 8006db8:	bf00      	nop
 8006dba:	3710      	adds	r7, #16
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b083      	sub	sp, #12
 8006dc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006dc6:	4b0c      	ldr	r3, [pc, #48]	; (8006df8 <prvResetNextTaskUnblockTime+0x38>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d104      	bne.n	8006dda <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006dd0:	4b0a      	ldr	r3, [pc, #40]	; (8006dfc <prvResetNextTaskUnblockTime+0x3c>)
 8006dd2:	f04f 32ff 	mov.w	r2, #4294967295
 8006dd6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006dd8:	e008      	b.n	8006dec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dda:	4b07      	ldr	r3, [pc, #28]	; (8006df8 <prvResetNextTaskUnblockTime+0x38>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	68db      	ldr	r3, [r3, #12]
 8006de0:	68db      	ldr	r3, [r3, #12]
 8006de2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	4a04      	ldr	r2, [pc, #16]	; (8006dfc <prvResetNextTaskUnblockTime+0x3c>)
 8006dea:	6013      	str	r3, [r2, #0]
}
 8006dec:	bf00      	nop
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr
 8006df8:	20000624 	.word	0x20000624
 8006dfc:	2000068c 	.word	0x2000068c

08006e00 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006e0a:	4b29      	ldr	r3, [pc, #164]	; (8006eb0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e10:	4b28      	ldr	r3, [pc, #160]	; (8006eb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	3304      	adds	r3, #4
 8006e16:	4618      	mov	r0, r3
 8006e18:	f7ff fae1 	bl	80063de <uxListRemove>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d10b      	bne.n	8006e3a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006e22:	4b24      	ldr	r3, [pc, #144]	; (8006eb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e28:	2201      	movs	r2, #1
 8006e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e2e:	43da      	mvns	r2, r3
 8006e30:	4b21      	ldr	r3, [pc, #132]	; (8006eb8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4013      	ands	r3, r2
 8006e36:	4a20      	ldr	r2, [pc, #128]	; (8006eb8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006e38:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e40:	d10a      	bne.n	8006e58 <prvAddCurrentTaskToDelayedList+0x58>
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d007      	beq.n	8006e58 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e48:	4b1a      	ldr	r3, [pc, #104]	; (8006eb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	3304      	adds	r3, #4
 8006e4e:	4619      	mov	r1, r3
 8006e50:	481a      	ldr	r0, [pc, #104]	; (8006ebc <prvAddCurrentTaskToDelayedList+0xbc>)
 8006e52:	f7ff fa67 	bl	8006324 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006e56:	e026      	b.n	8006ea6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006e58:	68fa      	ldr	r2, [r7, #12]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4413      	add	r3, r2
 8006e5e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006e60:	4b14      	ldr	r3, [pc, #80]	; (8006eb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	68ba      	ldr	r2, [r7, #8]
 8006e66:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006e68:	68ba      	ldr	r2, [r7, #8]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d209      	bcs.n	8006e84 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e70:	4b13      	ldr	r3, [pc, #76]	; (8006ec0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	4b0f      	ldr	r3, [pc, #60]	; (8006eb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	3304      	adds	r3, #4
 8006e7a:	4619      	mov	r1, r3
 8006e7c:	4610      	mov	r0, r2
 8006e7e:	f7ff fa75 	bl	800636c <vListInsert>
}
 8006e82:	e010      	b.n	8006ea6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e84:	4b0f      	ldr	r3, [pc, #60]	; (8006ec4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	4b0a      	ldr	r3, [pc, #40]	; (8006eb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	3304      	adds	r3, #4
 8006e8e:	4619      	mov	r1, r3
 8006e90:	4610      	mov	r0, r2
 8006e92:	f7ff fa6b 	bl	800636c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006e96:	4b0c      	ldr	r3, [pc, #48]	; (8006ec8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	68ba      	ldr	r2, [r7, #8]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d202      	bcs.n	8006ea6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006ea0:	4a09      	ldr	r2, [pc, #36]	; (8006ec8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	6013      	str	r3, [r2, #0]
}
 8006ea6:	bf00      	nop
 8006ea8:	3710      	adds	r7, #16
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}
 8006eae:	bf00      	nop
 8006eb0:	20000670 	.word	0x20000670
 8006eb4:	2000056c 	.word	0x2000056c
 8006eb8:	20000674 	.word	0x20000674
 8006ebc:	20000658 	.word	0x20000658
 8006ec0:	20000628 	.word	0x20000628
 8006ec4:	20000624 	.word	0x20000624
 8006ec8:	2000068c 	.word	0x2000068c

08006ecc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b085      	sub	sp, #20
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	60f8      	str	r0, [r7, #12]
 8006ed4:	60b9      	str	r1, [r7, #8]
 8006ed6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	3b04      	subs	r3, #4
 8006edc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006ee4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	3b04      	subs	r3, #4
 8006eea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	f023 0201 	bic.w	r2, r3, #1
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	3b04      	subs	r3, #4
 8006efa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006efc:	4a0c      	ldr	r2, [pc, #48]	; (8006f30 <pxPortInitialiseStack+0x64>)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	3b14      	subs	r3, #20
 8006f06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	3b04      	subs	r3, #4
 8006f12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f06f 0202 	mvn.w	r2, #2
 8006f1a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	3b20      	subs	r3, #32
 8006f20:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006f22:	68fb      	ldr	r3, [r7, #12]
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3714      	adds	r7, #20
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr
 8006f30:	08006f35 	.word	0x08006f35

08006f34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006f34:	b480      	push	{r7}
 8006f36:	b085      	sub	sp, #20
 8006f38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006f3e:	4b12      	ldr	r3, [pc, #72]	; (8006f88 <prvTaskExitError+0x54>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f46:	d00a      	beq.n	8006f5e <prvTaskExitError+0x2a>
	__asm volatile
 8006f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f4c:	f383 8811 	msr	BASEPRI, r3
 8006f50:	f3bf 8f6f 	isb	sy
 8006f54:	f3bf 8f4f 	dsb	sy
 8006f58:	60fb      	str	r3, [r7, #12]
}
 8006f5a:	bf00      	nop
 8006f5c:	e7fe      	b.n	8006f5c <prvTaskExitError+0x28>
	__asm volatile
 8006f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f62:	f383 8811 	msr	BASEPRI, r3
 8006f66:	f3bf 8f6f 	isb	sy
 8006f6a:	f3bf 8f4f 	dsb	sy
 8006f6e:	60bb      	str	r3, [r7, #8]
}
 8006f70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006f72:	bf00      	nop
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d0fc      	beq.n	8006f74 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006f7a:	bf00      	nop
 8006f7c:	bf00      	nop
 8006f7e:	3714      	adds	r7, #20
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr
 8006f88:	2000000c 	.word	0x2000000c
 8006f8c:	00000000 	.word	0x00000000

08006f90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006f90:	4b07      	ldr	r3, [pc, #28]	; (8006fb0 <pxCurrentTCBConst2>)
 8006f92:	6819      	ldr	r1, [r3, #0]
 8006f94:	6808      	ldr	r0, [r1, #0]
 8006f96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f9a:	f380 8809 	msr	PSP, r0
 8006f9e:	f3bf 8f6f 	isb	sy
 8006fa2:	f04f 0000 	mov.w	r0, #0
 8006fa6:	f380 8811 	msr	BASEPRI, r0
 8006faa:	4770      	bx	lr
 8006fac:	f3af 8000 	nop.w

08006fb0 <pxCurrentTCBConst2>:
 8006fb0:	2000056c 	.word	0x2000056c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006fb4:	bf00      	nop
 8006fb6:	bf00      	nop

08006fb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006fb8:	4808      	ldr	r0, [pc, #32]	; (8006fdc <prvPortStartFirstTask+0x24>)
 8006fba:	6800      	ldr	r0, [r0, #0]
 8006fbc:	6800      	ldr	r0, [r0, #0]
 8006fbe:	f380 8808 	msr	MSP, r0
 8006fc2:	f04f 0000 	mov.w	r0, #0
 8006fc6:	f380 8814 	msr	CONTROL, r0
 8006fca:	b662      	cpsie	i
 8006fcc:	b661      	cpsie	f
 8006fce:	f3bf 8f4f 	dsb	sy
 8006fd2:	f3bf 8f6f 	isb	sy
 8006fd6:	df00      	svc	0
 8006fd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006fda:	bf00      	nop
 8006fdc:	e000ed08 	.word	0xe000ed08

08006fe0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b086      	sub	sp, #24
 8006fe4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006fe6:	4b46      	ldr	r3, [pc, #280]	; (8007100 <xPortStartScheduler+0x120>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a46      	ldr	r2, [pc, #280]	; (8007104 <xPortStartScheduler+0x124>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d10a      	bne.n	8007006 <xPortStartScheduler+0x26>
	__asm volatile
 8006ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff4:	f383 8811 	msr	BASEPRI, r3
 8006ff8:	f3bf 8f6f 	isb	sy
 8006ffc:	f3bf 8f4f 	dsb	sy
 8007000:	613b      	str	r3, [r7, #16]
}
 8007002:	bf00      	nop
 8007004:	e7fe      	b.n	8007004 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007006:	4b3e      	ldr	r3, [pc, #248]	; (8007100 <xPortStartScheduler+0x120>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a3f      	ldr	r2, [pc, #252]	; (8007108 <xPortStartScheduler+0x128>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d10a      	bne.n	8007026 <xPortStartScheduler+0x46>
	__asm volatile
 8007010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007014:	f383 8811 	msr	BASEPRI, r3
 8007018:	f3bf 8f6f 	isb	sy
 800701c:	f3bf 8f4f 	dsb	sy
 8007020:	60fb      	str	r3, [r7, #12]
}
 8007022:	bf00      	nop
 8007024:	e7fe      	b.n	8007024 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007026:	4b39      	ldr	r3, [pc, #228]	; (800710c <xPortStartScheduler+0x12c>)
 8007028:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	b2db      	uxtb	r3, r3
 8007030:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	22ff      	movs	r2, #255	; 0xff
 8007036:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	b2db      	uxtb	r3, r3
 800703e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007040:	78fb      	ldrb	r3, [r7, #3]
 8007042:	b2db      	uxtb	r3, r3
 8007044:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007048:	b2da      	uxtb	r2, r3
 800704a:	4b31      	ldr	r3, [pc, #196]	; (8007110 <xPortStartScheduler+0x130>)
 800704c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800704e:	4b31      	ldr	r3, [pc, #196]	; (8007114 <xPortStartScheduler+0x134>)
 8007050:	2207      	movs	r2, #7
 8007052:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007054:	e009      	b.n	800706a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007056:	4b2f      	ldr	r3, [pc, #188]	; (8007114 <xPortStartScheduler+0x134>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	3b01      	subs	r3, #1
 800705c:	4a2d      	ldr	r2, [pc, #180]	; (8007114 <xPortStartScheduler+0x134>)
 800705e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007060:	78fb      	ldrb	r3, [r7, #3]
 8007062:	b2db      	uxtb	r3, r3
 8007064:	005b      	lsls	r3, r3, #1
 8007066:	b2db      	uxtb	r3, r3
 8007068:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800706a:	78fb      	ldrb	r3, [r7, #3]
 800706c:	b2db      	uxtb	r3, r3
 800706e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007072:	2b80      	cmp	r3, #128	; 0x80
 8007074:	d0ef      	beq.n	8007056 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007076:	4b27      	ldr	r3, [pc, #156]	; (8007114 <xPortStartScheduler+0x134>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f1c3 0307 	rsb	r3, r3, #7
 800707e:	2b04      	cmp	r3, #4
 8007080:	d00a      	beq.n	8007098 <xPortStartScheduler+0xb8>
	__asm volatile
 8007082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007086:	f383 8811 	msr	BASEPRI, r3
 800708a:	f3bf 8f6f 	isb	sy
 800708e:	f3bf 8f4f 	dsb	sy
 8007092:	60bb      	str	r3, [r7, #8]
}
 8007094:	bf00      	nop
 8007096:	e7fe      	b.n	8007096 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007098:	4b1e      	ldr	r3, [pc, #120]	; (8007114 <xPortStartScheduler+0x134>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	021b      	lsls	r3, r3, #8
 800709e:	4a1d      	ldr	r2, [pc, #116]	; (8007114 <xPortStartScheduler+0x134>)
 80070a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80070a2:	4b1c      	ldr	r3, [pc, #112]	; (8007114 <xPortStartScheduler+0x134>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80070aa:	4a1a      	ldr	r2, [pc, #104]	; (8007114 <xPortStartScheduler+0x134>)
 80070ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	b2da      	uxtb	r2, r3
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80070b6:	4b18      	ldr	r3, [pc, #96]	; (8007118 <xPortStartScheduler+0x138>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a17      	ldr	r2, [pc, #92]	; (8007118 <xPortStartScheduler+0x138>)
 80070bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80070c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80070c2:	4b15      	ldr	r3, [pc, #84]	; (8007118 <xPortStartScheduler+0x138>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a14      	ldr	r2, [pc, #80]	; (8007118 <xPortStartScheduler+0x138>)
 80070c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80070cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80070ce:	f000 f8dd 	bl	800728c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80070d2:	4b12      	ldr	r3, [pc, #72]	; (800711c <xPortStartScheduler+0x13c>)
 80070d4:	2200      	movs	r2, #0
 80070d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80070d8:	f000 f8fc 	bl	80072d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80070dc:	4b10      	ldr	r3, [pc, #64]	; (8007120 <xPortStartScheduler+0x140>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a0f      	ldr	r2, [pc, #60]	; (8007120 <xPortStartScheduler+0x140>)
 80070e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80070e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80070e8:	f7ff ff66 	bl	8006fb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80070ec:	f7ff fd4c 	bl	8006b88 <vTaskSwitchContext>
	prvTaskExitError();
 80070f0:	f7ff ff20 	bl	8006f34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80070f4:	2300      	movs	r3, #0
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3718      	adds	r7, #24
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	bf00      	nop
 8007100:	e000ed00 	.word	0xe000ed00
 8007104:	410fc271 	.word	0x410fc271
 8007108:	410fc270 	.word	0x410fc270
 800710c:	e000e400 	.word	0xe000e400
 8007110:	20000698 	.word	0x20000698
 8007114:	2000069c 	.word	0x2000069c
 8007118:	e000ed20 	.word	0xe000ed20
 800711c:	2000000c 	.word	0x2000000c
 8007120:	e000ef34 	.word	0xe000ef34

08007124 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007124:	b480      	push	{r7}
 8007126:	b083      	sub	sp, #12
 8007128:	af00      	add	r7, sp, #0
	__asm volatile
 800712a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800712e:	f383 8811 	msr	BASEPRI, r3
 8007132:	f3bf 8f6f 	isb	sy
 8007136:	f3bf 8f4f 	dsb	sy
 800713a:	607b      	str	r3, [r7, #4]
}
 800713c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800713e:	4b0f      	ldr	r3, [pc, #60]	; (800717c <vPortEnterCritical+0x58>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	3301      	adds	r3, #1
 8007144:	4a0d      	ldr	r2, [pc, #52]	; (800717c <vPortEnterCritical+0x58>)
 8007146:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007148:	4b0c      	ldr	r3, [pc, #48]	; (800717c <vPortEnterCritical+0x58>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	2b01      	cmp	r3, #1
 800714e:	d10f      	bne.n	8007170 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007150:	4b0b      	ldr	r3, [pc, #44]	; (8007180 <vPortEnterCritical+0x5c>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	b2db      	uxtb	r3, r3
 8007156:	2b00      	cmp	r3, #0
 8007158:	d00a      	beq.n	8007170 <vPortEnterCritical+0x4c>
	__asm volatile
 800715a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800715e:	f383 8811 	msr	BASEPRI, r3
 8007162:	f3bf 8f6f 	isb	sy
 8007166:	f3bf 8f4f 	dsb	sy
 800716a:	603b      	str	r3, [r7, #0]
}
 800716c:	bf00      	nop
 800716e:	e7fe      	b.n	800716e <vPortEnterCritical+0x4a>
	}
}
 8007170:	bf00      	nop
 8007172:	370c      	adds	r7, #12
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr
 800717c:	2000000c 	.word	0x2000000c
 8007180:	e000ed04 	.word	0xe000ed04

08007184 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800718a:	4b12      	ldr	r3, [pc, #72]	; (80071d4 <vPortExitCritical+0x50>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d10a      	bne.n	80071a8 <vPortExitCritical+0x24>
	__asm volatile
 8007192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007196:	f383 8811 	msr	BASEPRI, r3
 800719a:	f3bf 8f6f 	isb	sy
 800719e:	f3bf 8f4f 	dsb	sy
 80071a2:	607b      	str	r3, [r7, #4]
}
 80071a4:	bf00      	nop
 80071a6:	e7fe      	b.n	80071a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80071a8:	4b0a      	ldr	r3, [pc, #40]	; (80071d4 <vPortExitCritical+0x50>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	3b01      	subs	r3, #1
 80071ae:	4a09      	ldr	r2, [pc, #36]	; (80071d4 <vPortExitCritical+0x50>)
 80071b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80071b2:	4b08      	ldr	r3, [pc, #32]	; (80071d4 <vPortExitCritical+0x50>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d105      	bne.n	80071c6 <vPortExitCritical+0x42>
 80071ba:	2300      	movs	r3, #0
 80071bc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80071c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80071c6:	bf00      	nop
 80071c8:	370c      	adds	r7, #12
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr
 80071d2:	bf00      	nop
 80071d4:	2000000c 	.word	0x2000000c
	...

080071e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80071e0:	f3ef 8009 	mrs	r0, PSP
 80071e4:	f3bf 8f6f 	isb	sy
 80071e8:	4b15      	ldr	r3, [pc, #84]	; (8007240 <pxCurrentTCBConst>)
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	f01e 0f10 	tst.w	lr, #16
 80071f0:	bf08      	it	eq
 80071f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80071f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071fa:	6010      	str	r0, [r2, #0]
 80071fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007200:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007204:	f380 8811 	msr	BASEPRI, r0
 8007208:	f3bf 8f4f 	dsb	sy
 800720c:	f3bf 8f6f 	isb	sy
 8007210:	f7ff fcba 	bl	8006b88 <vTaskSwitchContext>
 8007214:	f04f 0000 	mov.w	r0, #0
 8007218:	f380 8811 	msr	BASEPRI, r0
 800721c:	bc09      	pop	{r0, r3}
 800721e:	6819      	ldr	r1, [r3, #0]
 8007220:	6808      	ldr	r0, [r1, #0]
 8007222:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007226:	f01e 0f10 	tst.w	lr, #16
 800722a:	bf08      	it	eq
 800722c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007230:	f380 8809 	msr	PSP, r0
 8007234:	f3bf 8f6f 	isb	sy
 8007238:	4770      	bx	lr
 800723a:	bf00      	nop
 800723c:	f3af 8000 	nop.w

08007240 <pxCurrentTCBConst>:
 8007240:	2000056c 	.word	0x2000056c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007244:	bf00      	nop
 8007246:	bf00      	nop

08007248 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b082      	sub	sp, #8
 800724c:	af00      	add	r7, sp, #0
	__asm volatile
 800724e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007252:	f383 8811 	msr	BASEPRI, r3
 8007256:	f3bf 8f6f 	isb	sy
 800725a:	f3bf 8f4f 	dsb	sy
 800725e:	607b      	str	r3, [r7, #4]
}
 8007260:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007262:	f7ff fbd9 	bl	8006a18 <xTaskIncrementTick>
 8007266:	4603      	mov	r3, r0
 8007268:	2b00      	cmp	r3, #0
 800726a:	d003      	beq.n	8007274 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800726c:	4b06      	ldr	r3, [pc, #24]	; (8007288 <SysTick_Handler+0x40>)
 800726e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007272:	601a      	str	r2, [r3, #0]
 8007274:	2300      	movs	r3, #0
 8007276:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	f383 8811 	msr	BASEPRI, r3
}
 800727e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007280:	bf00      	nop
 8007282:	3708      	adds	r7, #8
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}
 8007288:	e000ed04 	.word	0xe000ed04

0800728c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800728c:	b480      	push	{r7}
 800728e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007290:	4b0b      	ldr	r3, [pc, #44]	; (80072c0 <vPortSetupTimerInterrupt+0x34>)
 8007292:	2200      	movs	r2, #0
 8007294:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007296:	4b0b      	ldr	r3, [pc, #44]	; (80072c4 <vPortSetupTimerInterrupt+0x38>)
 8007298:	2200      	movs	r2, #0
 800729a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800729c:	4b0a      	ldr	r3, [pc, #40]	; (80072c8 <vPortSetupTimerInterrupt+0x3c>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a0a      	ldr	r2, [pc, #40]	; (80072cc <vPortSetupTimerInterrupt+0x40>)
 80072a2:	fba2 2303 	umull	r2, r3, r2, r3
 80072a6:	099b      	lsrs	r3, r3, #6
 80072a8:	4a09      	ldr	r2, [pc, #36]	; (80072d0 <vPortSetupTimerInterrupt+0x44>)
 80072aa:	3b01      	subs	r3, #1
 80072ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80072ae:	4b04      	ldr	r3, [pc, #16]	; (80072c0 <vPortSetupTimerInterrupt+0x34>)
 80072b0:	2207      	movs	r2, #7
 80072b2:	601a      	str	r2, [r3, #0]
}
 80072b4:	bf00      	nop
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr
 80072be:	bf00      	nop
 80072c0:	e000e010 	.word	0xe000e010
 80072c4:	e000e018 	.word	0xe000e018
 80072c8:	20000000 	.word	0x20000000
 80072cc:	10624dd3 	.word	0x10624dd3
 80072d0:	e000e014 	.word	0xe000e014

080072d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80072d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80072e4 <vPortEnableVFP+0x10>
 80072d8:	6801      	ldr	r1, [r0, #0]
 80072da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80072de:	6001      	str	r1, [r0, #0]
 80072e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80072e2:	bf00      	nop
 80072e4:	e000ed88 	.word	0xe000ed88

080072e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b08a      	sub	sp, #40	; 0x28
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80072f0:	2300      	movs	r3, #0
 80072f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80072f4:	f7ff fae6 	bl	80068c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80072f8:	4b5b      	ldr	r3, [pc, #364]	; (8007468 <pvPortMalloc+0x180>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d101      	bne.n	8007304 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007300:	f000 f920 	bl	8007544 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007304:	4b59      	ldr	r3, [pc, #356]	; (800746c <pvPortMalloc+0x184>)
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	4013      	ands	r3, r2
 800730c:	2b00      	cmp	r3, #0
 800730e:	f040 8093 	bne.w	8007438 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d01d      	beq.n	8007354 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007318:	2208      	movs	r2, #8
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	4413      	add	r3, r2
 800731e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f003 0307 	and.w	r3, r3, #7
 8007326:	2b00      	cmp	r3, #0
 8007328:	d014      	beq.n	8007354 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f023 0307 	bic.w	r3, r3, #7
 8007330:	3308      	adds	r3, #8
 8007332:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f003 0307 	and.w	r3, r3, #7
 800733a:	2b00      	cmp	r3, #0
 800733c:	d00a      	beq.n	8007354 <pvPortMalloc+0x6c>
	__asm volatile
 800733e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007342:	f383 8811 	msr	BASEPRI, r3
 8007346:	f3bf 8f6f 	isb	sy
 800734a:	f3bf 8f4f 	dsb	sy
 800734e:	617b      	str	r3, [r7, #20]
}
 8007350:	bf00      	nop
 8007352:	e7fe      	b.n	8007352 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d06e      	beq.n	8007438 <pvPortMalloc+0x150>
 800735a:	4b45      	ldr	r3, [pc, #276]	; (8007470 <pvPortMalloc+0x188>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	429a      	cmp	r2, r3
 8007362:	d869      	bhi.n	8007438 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007364:	4b43      	ldr	r3, [pc, #268]	; (8007474 <pvPortMalloc+0x18c>)
 8007366:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007368:	4b42      	ldr	r3, [pc, #264]	; (8007474 <pvPortMalloc+0x18c>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800736e:	e004      	b.n	800737a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007372:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800737a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	687a      	ldr	r2, [r7, #4]
 8007380:	429a      	cmp	r2, r3
 8007382:	d903      	bls.n	800738c <pvPortMalloc+0xa4>
 8007384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d1f1      	bne.n	8007370 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800738c:	4b36      	ldr	r3, [pc, #216]	; (8007468 <pvPortMalloc+0x180>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007392:	429a      	cmp	r2, r3
 8007394:	d050      	beq.n	8007438 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007396:	6a3b      	ldr	r3, [r7, #32]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	2208      	movs	r2, #8
 800739c:	4413      	add	r3, r2
 800739e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80073a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	6a3b      	ldr	r3, [r7, #32]
 80073a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80073a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073aa:	685a      	ldr	r2, [r3, #4]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	1ad2      	subs	r2, r2, r3
 80073b0:	2308      	movs	r3, #8
 80073b2:	005b      	lsls	r3, r3, #1
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d91f      	bls.n	80073f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80073b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	4413      	add	r3, r2
 80073be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80073c0:	69bb      	ldr	r3, [r7, #24]
 80073c2:	f003 0307 	and.w	r3, r3, #7
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d00a      	beq.n	80073e0 <pvPortMalloc+0xf8>
	__asm volatile
 80073ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ce:	f383 8811 	msr	BASEPRI, r3
 80073d2:	f3bf 8f6f 	isb	sy
 80073d6:	f3bf 8f4f 	dsb	sy
 80073da:	613b      	str	r3, [r7, #16]
}
 80073dc:	bf00      	nop
 80073de:	e7fe      	b.n	80073de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80073e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e2:	685a      	ldr	r2, [r3, #4]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	1ad2      	subs	r2, r2, r3
 80073e8:	69bb      	ldr	r3, [r7, #24]
 80073ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80073ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80073f2:	69b8      	ldr	r0, [r7, #24]
 80073f4:	f000 f908 	bl	8007608 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80073f8:	4b1d      	ldr	r3, [pc, #116]	; (8007470 <pvPortMalloc+0x188>)
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	1ad3      	subs	r3, r2, r3
 8007402:	4a1b      	ldr	r2, [pc, #108]	; (8007470 <pvPortMalloc+0x188>)
 8007404:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007406:	4b1a      	ldr	r3, [pc, #104]	; (8007470 <pvPortMalloc+0x188>)
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	4b1b      	ldr	r3, [pc, #108]	; (8007478 <pvPortMalloc+0x190>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	429a      	cmp	r2, r3
 8007410:	d203      	bcs.n	800741a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007412:	4b17      	ldr	r3, [pc, #92]	; (8007470 <pvPortMalloc+0x188>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a18      	ldr	r2, [pc, #96]	; (8007478 <pvPortMalloc+0x190>)
 8007418:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800741a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741c:	685a      	ldr	r2, [r3, #4]
 800741e:	4b13      	ldr	r3, [pc, #76]	; (800746c <pvPortMalloc+0x184>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	431a      	orrs	r2, r3
 8007424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007426:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742a:	2200      	movs	r2, #0
 800742c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800742e:	4b13      	ldr	r3, [pc, #76]	; (800747c <pvPortMalloc+0x194>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	3301      	adds	r3, #1
 8007434:	4a11      	ldr	r2, [pc, #68]	; (800747c <pvPortMalloc+0x194>)
 8007436:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007438:	f7ff fa52 	bl	80068e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800743c:	69fb      	ldr	r3, [r7, #28]
 800743e:	f003 0307 	and.w	r3, r3, #7
 8007442:	2b00      	cmp	r3, #0
 8007444:	d00a      	beq.n	800745c <pvPortMalloc+0x174>
	__asm volatile
 8007446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800744a:	f383 8811 	msr	BASEPRI, r3
 800744e:	f3bf 8f6f 	isb	sy
 8007452:	f3bf 8f4f 	dsb	sy
 8007456:	60fb      	str	r3, [r7, #12]
}
 8007458:	bf00      	nop
 800745a:	e7fe      	b.n	800745a <pvPortMalloc+0x172>
	return pvReturn;
 800745c:	69fb      	ldr	r3, [r7, #28]
}
 800745e:	4618      	mov	r0, r3
 8007460:	3728      	adds	r7, #40	; 0x28
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop
 8007468:	200042a8 	.word	0x200042a8
 800746c:	200042bc 	.word	0x200042bc
 8007470:	200042ac 	.word	0x200042ac
 8007474:	200042a0 	.word	0x200042a0
 8007478:	200042b0 	.word	0x200042b0
 800747c:	200042b4 	.word	0x200042b4

08007480 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b086      	sub	sp, #24
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d04d      	beq.n	800752e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007492:	2308      	movs	r3, #8
 8007494:	425b      	negs	r3, r3
 8007496:	697a      	ldr	r2, [r7, #20]
 8007498:	4413      	add	r3, r2
 800749a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	685a      	ldr	r2, [r3, #4]
 80074a4:	4b24      	ldr	r3, [pc, #144]	; (8007538 <vPortFree+0xb8>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4013      	ands	r3, r2
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d10a      	bne.n	80074c4 <vPortFree+0x44>
	__asm volatile
 80074ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b2:	f383 8811 	msr	BASEPRI, r3
 80074b6:	f3bf 8f6f 	isb	sy
 80074ba:	f3bf 8f4f 	dsb	sy
 80074be:	60fb      	str	r3, [r7, #12]
}
 80074c0:	bf00      	nop
 80074c2:	e7fe      	b.n	80074c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d00a      	beq.n	80074e2 <vPortFree+0x62>
	__asm volatile
 80074cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d0:	f383 8811 	msr	BASEPRI, r3
 80074d4:	f3bf 8f6f 	isb	sy
 80074d8:	f3bf 8f4f 	dsb	sy
 80074dc:	60bb      	str	r3, [r7, #8]
}
 80074de:	bf00      	nop
 80074e0:	e7fe      	b.n	80074e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	685a      	ldr	r2, [r3, #4]
 80074e6:	4b14      	ldr	r3, [pc, #80]	; (8007538 <vPortFree+0xb8>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4013      	ands	r3, r2
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d01e      	beq.n	800752e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d11a      	bne.n	800752e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	685a      	ldr	r2, [r3, #4]
 80074fc:	4b0e      	ldr	r3, [pc, #56]	; (8007538 <vPortFree+0xb8>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	43db      	mvns	r3, r3
 8007502:	401a      	ands	r2, r3
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007508:	f7ff f9dc 	bl	80068c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	685a      	ldr	r2, [r3, #4]
 8007510:	4b0a      	ldr	r3, [pc, #40]	; (800753c <vPortFree+0xbc>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4413      	add	r3, r2
 8007516:	4a09      	ldr	r2, [pc, #36]	; (800753c <vPortFree+0xbc>)
 8007518:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800751a:	6938      	ldr	r0, [r7, #16]
 800751c:	f000 f874 	bl	8007608 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007520:	4b07      	ldr	r3, [pc, #28]	; (8007540 <vPortFree+0xc0>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	3301      	adds	r3, #1
 8007526:	4a06      	ldr	r2, [pc, #24]	; (8007540 <vPortFree+0xc0>)
 8007528:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800752a:	f7ff f9d9 	bl	80068e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800752e:	bf00      	nop
 8007530:	3718      	adds	r7, #24
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}
 8007536:	bf00      	nop
 8007538:	200042bc 	.word	0x200042bc
 800753c:	200042ac 	.word	0x200042ac
 8007540:	200042b8 	.word	0x200042b8

08007544 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007544:	b480      	push	{r7}
 8007546:	b085      	sub	sp, #20
 8007548:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800754a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800754e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007550:	4b27      	ldr	r3, [pc, #156]	; (80075f0 <prvHeapInit+0xac>)
 8007552:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f003 0307 	and.w	r3, r3, #7
 800755a:	2b00      	cmp	r3, #0
 800755c:	d00c      	beq.n	8007578 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	3307      	adds	r3, #7
 8007562:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f023 0307 	bic.w	r3, r3, #7
 800756a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800756c:	68ba      	ldr	r2, [r7, #8]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	1ad3      	subs	r3, r2, r3
 8007572:	4a1f      	ldr	r2, [pc, #124]	; (80075f0 <prvHeapInit+0xac>)
 8007574:	4413      	add	r3, r2
 8007576:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800757c:	4a1d      	ldr	r2, [pc, #116]	; (80075f4 <prvHeapInit+0xb0>)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007582:	4b1c      	ldr	r3, [pc, #112]	; (80075f4 <prvHeapInit+0xb0>)
 8007584:	2200      	movs	r2, #0
 8007586:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	68ba      	ldr	r2, [r7, #8]
 800758c:	4413      	add	r3, r2
 800758e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007590:	2208      	movs	r2, #8
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	1a9b      	subs	r3, r3, r2
 8007596:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f023 0307 	bic.w	r3, r3, #7
 800759e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	4a15      	ldr	r2, [pc, #84]	; (80075f8 <prvHeapInit+0xb4>)
 80075a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80075a6:	4b14      	ldr	r3, [pc, #80]	; (80075f8 <prvHeapInit+0xb4>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	2200      	movs	r2, #0
 80075ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80075ae:	4b12      	ldr	r3, [pc, #72]	; (80075f8 <prvHeapInit+0xb4>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	2200      	movs	r2, #0
 80075b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	68fa      	ldr	r2, [r7, #12]
 80075be:	1ad2      	subs	r2, r2, r3
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80075c4:	4b0c      	ldr	r3, [pc, #48]	; (80075f8 <prvHeapInit+0xb4>)
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	4a0a      	ldr	r2, [pc, #40]	; (80075fc <prvHeapInit+0xb8>)
 80075d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	4a09      	ldr	r2, [pc, #36]	; (8007600 <prvHeapInit+0xbc>)
 80075da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80075dc:	4b09      	ldr	r3, [pc, #36]	; (8007604 <prvHeapInit+0xc0>)
 80075de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80075e2:	601a      	str	r2, [r3, #0]
}
 80075e4:	bf00      	nop
 80075e6:	3714      	adds	r7, #20
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr
 80075f0:	200006a0 	.word	0x200006a0
 80075f4:	200042a0 	.word	0x200042a0
 80075f8:	200042a8 	.word	0x200042a8
 80075fc:	200042b0 	.word	0x200042b0
 8007600:	200042ac 	.word	0x200042ac
 8007604:	200042bc 	.word	0x200042bc

08007608 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007608:	b480      	push	{r7}
 800760a:	b085      	sub	sp, #20
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007610:	4b28      	ldr	r3, [pc, #160]	; (80076b4 <prvInsertBlockIntoFreeList+0xac>)
 8007612:	60fb      	str	r3, [r7, #12]
 8007614:	e002      	b.n	800761c <prvInsertBlockIntoFreeList+0x14>
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	60fb      	str	r3, [r7, #12]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	429a      	cmp	r2, r3
 8007624:	d8f7      	bhi.n	8007616 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	68ba      	ldr	r2, [r7, #8]
 8007630:	4413      	add	r3, r2
 8007632:	687a      	ldr	r2, [r7, #4]
 8007634:	429a      	cmp	r2, r3
 8007636:	d108      	bne.n	800764a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	685a      	ldr	r2, [r3, #4]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	441a      	add	r2, r3
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	68ba      	ldr	r2, [r7, #8]
 8007654:	441a      	add	r2, r3
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	429a      	cmp	r2, r3
 800765c:	d118      	bne.n	8007690 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	4b15      	ldr	r3, [pc, #84]	; (80076b8 <prvInsertBlockIntoFreeList+0xb0>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	429a      	cmp	r2, r3
 8007668:	d00d      	beq.n	8007686 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	685a      	ldr	r2, [r3, #4]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	441a      	add	r2, r3
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	601a      	str	r2, [r3, #0]
 8007684:	e008      	b.n	8007698 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007686:	4b0c      	ldr	r3, [pc, #48]	; (80076b8 <prvInsertBlockIntoFreeList+0xb0>)
 8007688:	681a      	ldr	r2, [r3, #0]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	601a      	str	r2, [r3, #0]
 800768e:	e003      	b.n	8007698 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681a      	ldr	r2, [r3, #0]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007698:	68fa      	ldr	r2, [r7, #12]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	429a      	cmp	r2, r3
 800769e:	d002      	beq.n	80076a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	687a      	ldr	r2, [r7, #4]
 80076a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076a6:	bf00      	nop
 80076a8:	3714      	adds	r7, #20
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr
 80076b2:	bf00      	nop
 80076b4:	200042a0 	.word	0x200042a0
 80076b8:	200042a8 	.word	0x200042a8

080076bc <__libc_init_array>:
 80076bc:	b570      	push	{r4, r5, r6, lr}
 80076be:	4d0d      	ldr	r5, [pc, #52]	; (80076f4 <__libc_init_array+0x38>)
 80076c0:	4c0d      	ldr	r4, [pc, #52]	; (80076f8 <__libc_init_array+0x3c>)
 80076c2:	1b64      	subs	r4, r4, r5
 80076c4:	10a4      	asrs	r4, r4, #2
 80076c6:	2600      	movs	r6, #0
 80076c8:	42a6      	cmp	r6, r4
 80076ca:	d109      	bne.n	80076e0 <__libc_init_array+0x24>
 80076cc:	4d0b      	ldr	r5, [pc, #44]	; (80076fc <__libc_init_array+0x40>)
 80076ce:	4c0c      	ldr	r4, [pc, #48]	; (8007700 <__libc_init_array+0x44>)
 80076d0:	f000 f8e8 	bl	80078a4 <_init>
 80076d4:	1b64      	subs	r4, r4, r5
 80076d6:	10a4      	asrs	r4, r4, #2
 80076d8:	2600      	movs	r6, #0
 80076da:	42a6      	cmp	r6, r4
 80076dc:	d105      	bne.n	80076ea <__libc_init_array+0x2e>
 80076de:	bd70      	pop	{r4, r5, r6, pc}
 80076e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80076e4:	4798      	blx	r3
 80076e6:	3601      	adds	r6, #1
 80076e8:	e7ee      	b.n	80076c8 <__libc_init_array+0xc>
 80076ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80076ee:	4798      	blx	r3
 80076f0:	3601      	adds	r6, #1
 80076f2:	e7f2      	b.n	80076da <__libc_init_array+0x1e>
 80076f4:	080079cc 	.word	0x080079cc
 80076f8:	080079cc 	.word	0x080079cc
 80076fc:	080079cc 	.word	0x080079cc
 8007700:	080079d0 	.word	0x080079d0

08007704 <__retarget_lock_acquire_recursive>:
 8007704:	4770      	bx	lr

08007706 <__retarget_lock_release_recursive>:
 8007706:	4770      	bx	lr

08007708 <memset>:
 8007708:	4402      	add	r2, r0
 800770a:	4603      	mov	r3, r0
 800770c:	4293      	cmp	r3, r2
 800770e:	d100      	bne.n	8007712 <memset+0xa>
 8007710:	4770      	bx	lr
 8007712:	f803 1b01 	strb.w	r1, [r3], #1
 8007716:	e7f9      	b.n	800770c <memset+0x4>

08007718 <cleanup_glue>:
 8007718:	b538      	push	{r3, r4, r5, lr}
 800771a:	460c      	mov	r4, r1
 800771c:	6809      	ldr	r1, [r1, #0]
 800771e:	4605      	mov	r5, r0
 8007720:	b109      	cbz	r1, 8007726 <cleanup_glue+0xe>
 8007722:	f7ff fff9 	bl	8007718 <cleanup_glue>
 8007726:	4621      	mov	r1, r4
 8007728:	4628      	mov	r0, r5
 800772a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800772e:	f000 b869 	b.w	8007804 <_free_r>
	...

08007734 <_reclaim_reent>:
 8007734:	4b2c      	ldr	r3, [pc, #176]	; (80077e8 <_reclaim_reent+0xb4>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4283      	cmp	r3, r0
 800773a:	b570      	push	{r4, r5, r6, lr}
 800773c:	4604      	mov	r4, r0
 800773e:	d051      	beq.n	80077e4 <_reclaim_reent+0xb0>
 8007740:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007742:	b143      	cbz	r3, 8007756 <_reclaim_reent+0x22>
 8007744:	68db      	ldr	r3, [r3, #12]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d14a      	bne.n	80077e0 <_reclaim_reent+0xac>
 800774a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800774c:	6819      	ldr	r1, [r3, #0]
 800774e:	b111      	cbz	r1, 8007756 <_reclaim_reent+0x22>
 8007750:	4620      	mov	r0, r4
 8007752:	f000 f857 	bl	8007804 <_free_r>
 8007756:	6961      	ldr	r1, [r4, #20]
 8007758:	b111      	cbz	r1, 8007760 <_reclaim_reent+0x2c>
 800775a:	4620      	mov	r0, r4
 800775c:	f000 f852 	bl	8007804 <_free_r>
 8007760:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007762:	b111      	cbz	r1, 800776a <_reclaim_reent+0x36>
 8007764:	4620      	mov	r0, r4
 8007766:	f000 f84d 	bl	8007804 <_free_r>
 800776a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800776c:	b111      	cbz	r1, 8007774 <_reclaim_reent+0x40>
 800776e:	4620      	mov	r0, r4
 8007770:	f000 f848 	bl	8007804 <_free_r>
 8007774:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007776:	b111      	cbz	r1, 800777e <_reclaim_reent+0x4a>
 8007778:	4620      	mov	r0, r4
 800777a:	f000 f843 	bl	8007804 <_free_r>
 800777e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007780:	b111      	cbz	r1, 8007788 <_reclaim_reent+0x54>
 8007782:	4620      	mov	r0, r4
 8007784:	f000 f83e 	bl	8007804 <_free_r>
 8007788:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800778a:	b111      	cbz	r1, 8007792 <_reclaim_reent+0x5e>
 800778c:	4620      	mov	r0, r4
 800778e:	f000 f839 	bl	8007804 <_free_r>
 8007792:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007794:	b111      	cbz	r1, 800779c <_reclaim_reent+0x68>
 8007796:	4620      	mov	r0, r4
 8007798:	f000 f834 	bl	8007804 <_free_r>
 800779c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800779e:	b111      	cbz	r1, 80077a6 <_reclaim_reent+0x72>
 80077a0:	4620      	mov	r0, r4
 80077a2:	f000 f82f 	bl	8007804 <_free_r>
 80077a6:	69a3      	ldr	r3, [r4, #24]
 80077a8:	b1e3      	cbz	r3, 80077e4 <_reclaim_reent+0xb0>
 80077aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80077ac:	4620      	mov	r0, r4
 80077ae:	4798      	blx	r3
 80077b0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80077b2:	b1b9      	cbz	r1, 80077e4 <_reclaim_reent+0xb0>
 80077b4:	4620      	mov	r0, r4
 80077b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80077ba:	f7ff bfad 	b.w	8007718 <cleanup_glue>
 80077be:	5949      	ldr	r1, [r1, r5]
 80077c0:	b941      	cbnz	r1, 80077d4 <_reclaim_reent+0xa0>
 80077c2:	3504      	adds	r5, #4
 80077c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077c6:	2d80      	cmp	r5, #128	; 0x80
 80077c8:	68d9      	ldr	r1, [r3, #12]
 80077ca:	d1f8      	bne.n	80077be <_reclaim_reent+0x8a>
 80077cc:	4620      	mov	r0, r4
 80077ce:	f000 f819 	bl	8007804 <_free_r>
 80077d2:	e7ba      	b.n	800774a <_reclaim_reent+0x16>
 80077d4:	680e      	ldr	r6, [r1, #0]
 80077d6:	4620      	mov	r0, r4
 80077d8:	f000 f814 	bl	8007804 <_free_r>
 80077dc:	4631      	mov	r1, r6
 80077de:	e7ef      	b.n	80077c0 <_reclaim_reent+0x8c>
 80077e0:	2500      	movs	r5, #0
 80077e2:	e7ef      	b.n	80077c4 <_reclaim_reent+0x90>
 80077e4:	bd70      	pop	{r4, r5, r6, pc}
 80077e6:	bf00      	nop
 80077e8:	20000010 	.word	0x20000010

080077ec <__malloc_lock>:
 80077ec:	4801      	ldr	r0, [pc, #4]	; (80077f4 <__malloc_lock+0x8>)
 80077ee:	f7ff bf89 	b.w	8007704 <__retarget_lock_acquire_recursive>
 80077f2:	bf00      	nop
 80077f4:	20004454 	.word	0x20004454

080077f8 <__malloc_unlock>:
 80077f8:	4801      	ldr	r0, [pc, #4]	; (8007800 <__malloc_unlock+0x8>)
 80077fa:	f7ff bf84 	b.w	8007706 <__retarget_lock_release_recursive>
 80077fe:	bf00      	nop
 8007800:	20004454 	.word	0x20004454

08007804 <_free_r>:
 8007804:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007806:	2900      	cmp	r1, #0
 8007808:	d048      	beq.n	800789c <_free_r+0x98>
 800780a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800780e:	9001      	str	r0, [sp, #4]
 8007810:	2b00      	cmp	r3, #0
 8007812:	f1a1 0404 	sub.w	r4, r1, #4
 8007816:	bfb8      	it	lt
 8007818:	18e4      	addlt	r4, r4, r3
 800781a:	f7ff ffe7 	bl	80077ec <__malloc_lock>
 800781e:	4a20      	ldr	r2, [pc, #128]	; (80078a0 <_free_r+0x9c>)
 8007820:	9801      	ldr	r0, [sp, #4]
 8007822:	6813      	ldr	r3, [r2, #0]
 8007824:	4615      	mov	r5, r2
 8007826:	b933      	cbnz	r3, 8007836 <_free_r+0x32>
 8007828:	6063      	str	r3, [r4, #4]
 800782a:	6014      	str	r4, [r2, #0]
 800782c:	b003      	add	sp, #12
 800782e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007832:	f7ff bfe1 	b.w	80077f8 <__malloc_unlock>
 8007836:	42a3      	cmp	r3, r4
 8007838:	d90b      	bls.n	8007852 <_free_r+0x4e>
 800783a:	6821      	ldr	r1, [r4, #0]
 800783c:	1862      	adds	r2, r4, r1
 800783e:	4293      	cmp	r3, r2
 8007840:	bf04      	itt	eq
 8007842:	681a      	ldreq	r2, [r3, #0]
 8007844:	685b      	ldreq	r3, [r3, #4]
 8007846:	6063      	str	r3, [r4, #4]
 8007848:	bf04      	itt	eq
 800784a:	1852      	addeq	r2, r2, r1
 800784c:	6022      	streq	r2, [r4, #0]
 800784e:	602c      	str	r4, [r5, #0]
 8007850:	e7ec      	b.n	800782c <_free_r+0x28>
 8007852:	461a      	mov	r2, r3
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	b10b      	cbz	r3, 800785c <_free_r+0x58>
 8007858:	42a3      	cmp	r3, r4
 800785a:	d9fa      	bls.n	8007852 <_free_r+0x4e>
 800785c:	6811      	ldr	r1, [r2, #0]
 800785e:	1855      	adds	r5, r2, r1
 8007860:	42a5      	cmp	r5, r4
 8007862:	d10b      	bne.n	800787c <_free_r+0x78>
 8007864:	6824      	ldr	r4, [r4, #0]
 8007866:	4421      	add	r1, r4
 8007868:	1854      	adds	r4, r2, r1
 800786a:	42a3      	cmp	r3, r4
 800786c:	6011      	str	r1, [r2, #0]
 800786e:	d1dd      	bne.n	800782c <_free_r+0x28>
 8007870:	681c      	ldr	r4, [r3, #0]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	6053      	str	r3, [r2, #4]
 8007876:	4421      	add	r1, r4
 8007878:	6011      	str	r1, [r2, #0]
 800787a:	e7d7      	b.n	800782c <_free_r+0x28>
 800787c:	d902      	bls.n	8007884 <_free_r+0x80>
 800787e:	230c      	movs	r3, #12
 8007880:	6003      	str	r3, [r0, #0]
 8007882:	e7d3      	b.n	800782c <_free_r+0x28>
 8007884:	6825      	ldr	r5, [r4, #0]
 8007886:	1961      	adds	r1, r4, r5
 8007888:	428b      	cmp	r3, r1
 800788a:	bf04      	itt	eq
 800788c:	6819      	ldreq	r1, [r3, #0]
 800788e:	685b      	ldreq	r3, [r3, #4]
 8007890:	6063      	str	r3, [r4, #4]
 8007892:	bf04      	itt	eq
 8007894:	1949      	addeq	r1, r1, r5
 8007896:	6021      	streq	r1, [r4, #0]
 8007898:	6054      	str	r4, [r2, #4]
 800789a:	e7c7      	b.n	800782c <_free_r+0x28>
 800789c:	b003      	add	sp, #12
 800789e:	bd30      	pop	{r4, r5, pc}
 80078a0:	200042c0 	.word	0x200042c0

080078a4 <_init>:
 80078a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078a6:	bf00      	nop
 80078a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078aa:	bc08      	pop	{r3}
 80078ac:	469e      	mov	lr, r3
 80078ae:	4770      	bx	lr

080078b0 <_fini>:
 80078b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078b2:	bf00      	nop
 80078b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078b6:	bc08      	pop	{r3}
 80078b8:	469e      	mov	lr, r3
 80078ba:	4770      	bx	lr
