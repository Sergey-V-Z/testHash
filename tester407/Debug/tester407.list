
tester407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008148  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  080082d8  080082d8  000182d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083d8  080083d8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080083d8  080083d8  000183d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083e0  080083e0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083e0  080083e0  000183e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083e4  080083e4  000183e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080083e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          000043e8  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000445c  2000445c  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d1f8  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003848  00000000  00000000  0003d29c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001518  00000000  00000000  00040ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013e8  00000000  00000000  00042000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002335b  00000000  00000000  000433e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019647  00000000  00000000  00066743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d59dd  00000000  00000000  0007fd8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00155767  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005b58  00000000  00000000  001557bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080082c0 	.word	0x080082c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080082c0 	.word	0x080082c0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	60b9      	str	r1, [r7, #8]
 80004d2:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	4a07      	ldr	r2, [pc, #28]	; (80004f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80004d8:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004da:	68bb      	ldr	r3, [r7, #8]
 80004dc:	4a06      	ldr	r2, [pc, #24]	; (80004f8 <vApplicationGetIdleTaskMemory+0x30>)
 80004de:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	2280      	movs	r2, #128	; 0x80
 80004e4:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 80004e6:	bf00      	nop
 80004e8:	3714      	adds	r7, #20
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	200002b4 	.word	0x200002b4
 80004f8:	20000368 	.word	0x20000368

080004fc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80004fc:	b5b0      	push	{r4, r5, r7, lr}
 80004fe:	b090      	sub	sp, #64	; 0x40
 8000500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of allASIC */
  osMutexDef(allASIC);
 8000502:	2300      	movs	r3, #0
 8000504:	63bb      	str	r3, [r7, #56]	; 0x38
 8000506:	2300      	movs	r3, #0
 8000508:	63fb      	str	r3, [r7, #60]	; 0x3c
  allASICHandle = osMutexCreate(osMutex(allASIC));
 800050a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800050e:	4618      	mov	r0, r3
 8000510:	f005 feb9 	bl	8006286 <osMutexCreate>
 8000514:	4603      	mov	r3, r0
 8000516:	4a15      	ldr	r2, [pc, #84]	; (800056c <MX_FREERTOS_Init+0x70>)
 8000518:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of testTask */
  osThreadDef(testTask, TestTask, osPriorityNormal, 0, 256);
 800051a:	4b15      	ldr	r3, [pc, #84]	; (8000570 <MX_FREERTOS_Init+0x74>)
 800051c:	f107 041c 	add.w	r4, r7, #28
 8000520:	461d      	mov	r5, r3
 8000522:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000524:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000526:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800052a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  testTaskHandle = osThreadCreate(osThread(testTask), NULL);
 800052e:	f107 031c 	add.w	r3, r7, #28
 8000532:	2100      	movs	r1, #0
 8000534:	4618      	mov	r0, r3
 8000536:	f005 fe46 	bl	80061c6 <osThreadCreate>
 800053a:	4603      	mov	r3, r0
 800053c:	4a0d      	ldr	r2, [pc, #52]	; (8000574 <MX_FREERTOS_Init+0x78>)
 800053e:	6013      	str	r3, [r2, #0]

  /* definition and creation of lcdTask */
  osThreadDef(lcdTask, LCDTask, osPriorityNormal, 0, 256);
 8000540:	4b0d      	ldr	r3, [pc, #52]	; (8000578 <MX_FREERTOS_Init+0x7c>)
 8000542:	463c      	mov	r4, r7
 8000544:	461d      	mov	r5, r3
 8000546:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000548:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800054a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800054e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  lcdTaskHandle = osThreadCreate(osThread(lcdTask), NULL);
 8000552:	463b      	mov	r3, r7
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f005 fe35 	bl	80061c6 <osThreadCreate>
 800055c:	4603      	mov	r3, r0
 800055e:	4a07      	ldr	r2, [pc, #28]	; (800057c <MX_FREERTOS_Init+0x80>)
 8000560:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000562:	bf00      	nop
 8000564:	3740      	adds	r7, #64	; 0x40
 8000566:	46bd      	mov	sp, r7
 8000568:	bdb0      	pop	{r4, r5, r7, pc}
 800056a:	bf00      	nop
 800056c:	200042c8 	.word	0x200042c8
 8000570:	080082ec 	.word	0x080082ec
 8000574:	200042d0 	.word	0x200042d0
 8000578:	08008308 	.word	0x08008308
 800057c:	200042c4 	.word	0x200042c4

08000580 <TestTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_TestTask */
void TestTask(void const * argument)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b098      	sub	sp, #96	; 0x60
 8000584:	af02      	add	r7, sp, #8
 8000586:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TestTask */

	//команды i2c
	uint16_t addr = 0x20;
 8000588:	2320      	movs	r3, #32
 800058a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	addr = addr<<1;
 800058e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000592:	005b      	lsls	r3, r3, #1
 8000594:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

	uint8_t cmdStart_1[6] = { 0x55, 0xAA, 0x04, 0x07, 0x00, 0x0B };
 8000598:	4ad2      	ldr	r2, [pc, #840]	; (80008e4 <TestTask+0x364>)
 800059a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800059e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005a2:	6018      	str	r0, [r3, #0]
 80005a4:	3304      	adds	r3, #4
 80005a6:	8019      	strh	r1, [r3, #0]
	uint8_t cmdRead_1[2] = { 0x00 };
 80005a8:	2300      	movs	r3, #0
 80005aa:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

	uint8_t cmdStart_2[6] = { 0x55, 0xAA, 0x04, 0x06, 0x00, 0x0A };
 80005ae:	4ace      	ldr	r2, [pc, #824]	; (80008e8 <TestTask+0x368>)
 80005b0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80005b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005b8:	6018      	str	r0, [r3, #0]
 80005ba:	3304      	adds	r3, #4
 80005bc:	8019      	strh	r1, [r3, #0]
	uint8_t cmdRead_2[2] = { 0x00 };
 80005be:	2300      	movs	r3, #0
 80005c0:	87bb      	strh	r3, [r7, #60]	; 0x3c

	uint8_t cmdStart_3[9] = { 0x55, 0xAA, 0x07, 0x10, 0x19, 0x00, 0x00, 0x00, 0x30 };
 80005c2:	4aca      	ldr	r2, [pc, #808]	; (80008ec <TestTask+0x36c>)
 80005c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80005ca:	c303      	stmia	r3!, {r0, r1}
 80005cc:	701a      	strb	r2, [r3, #0]
	uint8_t cmdRead_3[2] = { 0x00 };
 80005ce:	2300      	movs	r3, #0
 80005d0:	85bb      	strh	r3, [r7, #44]	; 0x2c

	uint8_t cmdStart_4[7] = { 0x55, 0xAA, 0x05, 0x15, 0x01, 0x00, 0x1B };
 80005d2:	4ac7      	ldr	r2, [pc, #796]	; (80008f0 <TestTask+0x370>)
 80005d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005dc:	6018      	str	r0, [r3, #0]
 80005de:	3304      	adds	r3, #4
 80005e0:	8019      	strh	r1, [r3, #0]
 80005e2:	3302      	adds	r3, #2
 80005e4:	0c0a      	lsrs	r2, r1, #16
 80005e6:	701a      	strb	r2, [r3, #0]
	uint8_t cmdRead_4[2] = { 0x00 };
 80005e8:	2300      	movs	r3, #0
 80005ea:	843b      	strh	r3, [r7, #32]

	uint8_t cmdStop[7] = { 0x55, 0xAA, 0x05, 0x15, 0x00, 0x00, 0x1A };
 80005ec:	4ac1      	ldr	r2, [pc, #772]	; (80008f4 <TestTask+0x374>)
 80005ee:	f107 0318 	add.w	r3, r7, #24
 80005f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005f6:	6018      	str	r0, [r3, #0]
 80005f8:	3304      	adds	r3, #4
 80005fa:	8019      	strh	r1, [r3, #0]
 80005fc:	3302      	adds	r3, #2
 80005fe:	0c0a      	lsrs	r2, r1, #16
 8000600:	701a      	strb	r2, [r3, #0]
	uint8_t cmdRead_stop[2] = { 0x00 };
 8000602:	2300      	movs	r3, #0
 8000604:	82bb      	strh	r3, [r7, #20]


	//команды uart
	uint8_t cmdASIC[7] = { 0x55, 0xAA, 0x52, 0x05, 0x00, 0x00, 0x0A };
 8000606:	4abc      	ldr	r2, [pc, #752]	; (80008f8 <TestTask+0x378>)
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000610:	6018      	str	r0, [r3, #0]
 8000612:	3304      	adds	r3, #4
 8000614:	8019      	strh	r1, [r3, #0]
 8000616:	3302      	adds	r3, #2
 8000618:	0c0a      	lsrs	r2, r1, #16
 800061a:	701a      	strb	r2, [r3, #0]
	GPIO_PinState plug = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

	HAL_GPIO_WritePin(RST_ASIC_GPIO_Port, RST_ASIC_Pin, GPIO_PIN_RESET);
 8000622:	2200      	movs	r2, #0
 8000624:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000628:	48b4      	ldr	r0, [pc, #720]	; (80008fc <TestTask+0x37c>)
 800062a:	f001 f96f 	bl	800190c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A0_GPIO_Port, A0_Pin, GPIO_PIN_RESET);
 800062e:	2200      	movs	r2, #0
 8000630:	2102      	movs	r1, #2
 8000632:	48b3      	ldr	r0, [pc, #716]	; (8000900 <TestTask+0x380>)
 8000634:	f001 f96a 	bl	800190c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, GPIO_PIN_RESET);
 8000638:	2200      	movs	r2, #0
 800063a:	2101      	movs	r1, #1
 800063c:	48b0      	ldr	r0, [pc, #704]	; (8000900 <TestTask+0x380>)
 800063e:	f001 f965 	bl	800190c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	2104      	movs	r1, #4
 8000646:	48ae      	ldr	r0, [pc, #696]	; (8000900 <TestTask+0x380>)
 8000648:	f001 f960 	bl	800190c <HAL_GPIO_WritePin>

	plug = HAL_GPIO_ReadPin(PLUG_GPIO_Port, PLUG_Pin);
 800064c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000650:	48ac      	ldr	r0, [pc, #688]	; (8000904 <TestTask+0x384>)
 8000652:	f001 f943 	bl	80018dc <HAL_GPIO_ReadPin>
 8000656:	4603      	mov	r3, r0
 8000658:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	/* Infinite loop */
	for (;;) {
		if (start) {
 800065c:	4baa      	ldr	r3, [pc, #680]	; (8000908 <TestTask+0x388>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d0fb      	beq.n	800065c <TestTask+0xdc>
			counter_ASIC = 0;
 8000664:	4ba9      	ldr	r3, [pc, #676]	; (800090c <TestTask+0x38c>)
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(RST_ASIC_GPIO_Port, RST_ASIC_Pin, GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000670:	48a2      	ldr	r0, [pc, #648]	; (80008fc <TestTask+0x37c>)
 8000672:	f001 f94b 	bl	800190c <HAL_GPIO_WritePin>
			osDelay(4);
 8000676:	2004      	movs	r0, #4
 8000678:	f005 fdf1 	bl	800625e <osDelay>
			start = 0;
 800067c:	4ba2      	ldr	r3, [pc, #648]	; (8000908 <TestTask+0x388>)
 800067e:	2200      	movs	r2, #0
 8000680:	701a      	strb	r2, [r3, #0]

			status_i2c = HAL_I2C_Master_Transmit(&hi2c1, addr, cmdStart_1, 6, 20);
 8000682:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8000686:	f8b7 1056 	ldrh.w	r1, [r7, #86]	; 0x56
 800068a:	2314      	movs	r3, #20
 800068c:	9300      	str	r3, [sp, #0]
 800068e:	2306      	movs	r3, #6
 8000690:	489f      	ldr	r0, [pc, #636]	; (8000910 <TestTask+0x390>)
 8000692:	f001 fa99 	bl	8001bc8 <HAL_I2C_Master_Transmit>
 8000696:	4603      	mov	r3, r0
 8000698:	461a      	mov	r2, r3
 800069a:	4b9e      	ldr	r3, [pc, #632]	; (8000914 <TestTask+0x394>)
 800069c:	701a      	strb	r2, [r3, #0]
			osDelay(410);
 800069e:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 80006a2:	f005 fddc 	bl	800625e <osDelay>
			status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_1[0], 1, 20);
 80006a6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80006aa:	f8b7 1056 	ldrh.w	r1, [r7, #86]	; 0x56
 80006ae:	2314      	movs	r3, #20
 80006b0:	9300      	str	r3, [sp, #0]
 80006b2:	2301      	movs	r3, #1
 80006b4:	4896      	ldr	r0, [pc, #600]	; (8000910 <TestTask+0x390>)
 80006b6:	f001 fb85 	bl	8001dc4 <HAL_I2C_Master_Receive>
 80006ba:	4603      	mov	r3, r0
 80006bc:	461a      	mov	r2, r3
 80006be:	4b95      	ldr	r3, [pc, #596]	; (8000914 <TestTask+0x394>)
 80006c0:	701a      	strb	r2, [r3, #0]
			status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_1[1], 1, 20);
 80006c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006c6:	1c5a      	adds	r2, r3, #1
 80006c8:	f8b7 1056 	ldrh.w	r1, [r7, #86]	; 0x56
 80006cc:	2314      	movs	r3, #20
 80006ce:	9300      	str	r3, [sp, #0]
 80006d0:	2301      	movs	r3, #1
 80006d2:	488f      	ldr	r0, [pc, #572]	; (8000910 <TestTask+0x390>)
 80006d4:	f001 fb76 	bl	8001dc4 <HAL_I2C_Master_Receive>
 80006d8:	4603      	mov	r3, r0
 80006da:	461a      	mov	r2, r3
 80006dc:	4b8d      	ldr	r3, [pc, #564]	; (8000914 <TestTask+0x394>)
 80006de:	701a      	strb	r2, [r3, #0]
			osDelay(610);
 80006e0:	f240 2062 	movw	r0, #610	; 0x262
 80006e4:	f005 fdbb 	bl	800625e <osDelay>

			status_i2c = HAL_I2C_Master_Transmit(&hi2c1, addr, cmdStart_2, 6, 20);
 80006e8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80006ec:	f8b7 1056 	ldrh.w	r1, [r7, #86]	; 0x56
 80006f0:	2314      	movs	r3, #20
 80006f2:	9300      	str	r3, [sp, #0]
 80006f4:	2306      	movs	r3, #6
 80006f6:	4886      	ldr	r0, [pc, #536]	; (8000910 <TestTask+0x390>)
 80006f8:	f001 fa66 	bl	8001bc8 <HAL_I2C_Master_Transmit>
 80006fc:	4603      	mov	r3, r0
 80006fe:	461a      	mov	r2, r3
 8000700:	4b84      	ldr	r3, [pc, #528]	; (8000914 <TestTask+0x394>)
 8000702:	701a      	strb	r2, [r3, #0]
			osDelay(410);
 8000704:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8000708:	f005 fda9 	bl	800625e <osDelay>
			status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_2[0], 1, 20);
 800070c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000710:	f8b7 1056 	ldrh.w	r1, [r7, #86]	; 0x56
 8000714:	2314      	movs	r3, #20
 8000716:	9300      	str	r3, [sp, #0]
 8000718:	2301      	movs	r3, #1
 800071a:	487d      	ldr	r0, [pc, #500]	; (8000910 <TestTask+0x390>)
 800071c:	f001 fb52 	bl	8001dc4 <HAL_I2C_Master_Receive>
 8000720:	4603      	mov	r3, r0
 8000722:	461a      	mov	r2, r3
 8000724:	4b7b      	ldr	r3, [pc, #492]	; (8000914 <TestTask+0x394>)
 8000726:	701a      	strb	r2, [r3, #0]
			status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_2[1], 1, 20);
 8000728:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800072c:	1c5a      	adds	r2, r3, #1
 800072e:	f8b7 1056 	ldrh.w	r1, [r7, #86]	; 0x56
 8000732:	2314      	movs	r3, #20
 8000734:	9300      	str	r3, [sp, #0]
 8000736:	2301      	movs	r3, #1
 8000738:	4875      	ldr	r0, [pc, #468]	; (8000910 <TestTask+0x390>)
 800073a:	f001 fb43 	bl	8001dc4 <HAL_I2C_Master_Receive>
 800073e:	4603      	mov	r3, r0
 8000740:	461a      	mov	r2, r3
 8000742:	4b74      	ldr	r3, [pc, #464]	; (8000914 <TestTask+0x394>)
 8000744:	701a      	strb	r2, [r3, #0]
			osDelay(2210);
 8000746:	f640 00a2 	movw	r0, #2210	; 0x8a2
 800074a:	f005 fd88 	bl	800625e <osDelay>

			status_i2c = HAL_I2C_Master_Transmit(&hi2c1, addr, cmdStart_3, 9, 20);
 800074e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000752:	f8b7 1056 	ldrh.w	r1, [r7, #86]	; 0x56
 8000756:	2314      	movs	r3, #20
 8000758:	9300      	str	r3, [sp, #0]
 800075a:	2309      	movs	r3, #9
 800075c:	486c      	ldr	r0, [pc, #432]	; (8000910 <TestTask+0x390>)
 800075e:	f001 fa33 	bl	8001bc8 <HAL_I2C_Master_Transmit>
 8000762:	4603      	mov	r3, r0
 8000764:	461a      	mov	r2, r3
 8000766:	4b6b      	ldr	r3, [pc, #428]	; (8000914 <TestTask+0x394>)
 8000768:	701a      	strb	r2, [r3, #0]
			osDelay(110);
 800076a:	206e      	movs	r0, #110	; 0x6e
 800076c:	f005 fd77 	bl	800625e <osDelay>
			status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_3[0], 1, 20);
 8000770:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000774:	f8b7 1056 	ldrh.w	r1, [r7, #86]	; 0x56
 8000778:	2314      	movs	r3, #20
 800077a:	9300      	str	r3, [sp, #0]
 800077c:	2301      	movs	r3, #1
 800077e:	4864      	ldr	r0, [pc, #400]	; (8000910 <TestTask+0x390>)
 8000780:	f001 fb20 	bl	8001dc4 <HAL_I2C_Master_Receive>
 8000784:	4603      	mov	r3, r0
 8000786:	461a      	mov	r2, r3
 8000788:	4b62      	ldr	r3, [pc, #392]	; (8000914 <TestTask+0x394>)
 800078a:	701a      	strb	r2, [r3, #0]
			status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_3[1], 1, 20);
 800078c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000790:	1c5a      	adds	r2, r3, #1
 8000792:	f8b7 1056 	ldrh.w	r1, [r7, #86]	; 0x56
 8000796:	2314      	movs	r3, #20
 8000798:	9300      	str	r3, [sp, #0]
 800079a:	2301      	movs	r3, #1
 800079c:	485c      	ldr	r0, [pc, #368]	; (8000910 <TestTask+0x390>)
 800079e:	f001 fb11 	bl	8001dc4 <HAL_I2C_Master_Receive>
 80007a2:	4603      	mov	r3, r0
 80007a4:	461a      	mov	r2, r3
 80007a6:	4b5b      	ldr	r3, [pc, #364]	; (8000914 <TestTask+0x394>)
 80007a8:	701a      	strb	r2, [r3, #0]
			osDelay(2210);
 80007aa:	f640 00a2 	movw	r0, #2210	; 0x8a2
 80007ae:	f005 fd56 	bl	800625e <osDelay>

			status_i2c = HAL_I2C_Master_Transmit(&hi2c1, addr, cmdStart_4, 7, 20);
 80007b2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80007b6:	f8b7 1056 	ldrh.w	r1, [r7, #86]	; 0x56
 80007ba:	2314      	movs	r3, #20
 80007bc:	9300      	str	r3, [sp, #0]
 80007be:	2307      	movs	r3, #7
 80007c0:	4853      	ldr	r0, [pc, #332]	; (8000910 <TestTask+0x390>)
 80007c2:	f001 fa01 	bl	8001bc8 <HAL_I2C_Master_Transmit>
 80007c6:	4603      	mov	r3, r0
 80007c8:	461a      	mov	r2, r3
 80007ca:	4b52      	ldr	r3, [pc, #328]	; (8000914 <TestTask+0x394>)
 80007cc:	701a      	strb	r2, [r3, #0]
			osDelay(710);
 80007ce:	f240 20c6 	movw	r0, #710	; 0x2c6
 80007d2:	f005 fd44 	bl	800625e <osDelay>
			status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_4[0], 1, 20);
 80007d6:	f107 0220 	add.w	r2, r7, #32
 80007da:	f8b7 1056 	ldrh.w	r1, [r7, #86]	; 0x56
 80007de:	2314      	movs	r3, #20
 80007e0:	9300      	str	r3, [sp, #0]
 80007e2:	2301      	movs	r3, #1
 80007e4:	484a      	ldr	r0, [pc, #296]	; (8000910 <TestTask+0x390>)
 80007e6:	f001 faed 	bl	8001dc4 <HAL_I2C_Master_Receive>
 80007ea:	4603      	mov	r3, r0
 80007ec:	461a      	mov	r2, r3
 80007ee:	4b49      	ldr	r3, [pc, #292]	; (8000914 <TestTask+0x394>)
 80007f0:	701a      	strb	r2, [r3, #0]
			status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_4[1], 1, 20);
 80007f2:	f107 0320 	add.w	r3, r7, #32
 80007f6:	1c5a      	adds	r2, r3, #1
 80007f8:	f8b7 1056 	ldrh.w	r1, [r7, #86]	; 0x56
 80007fc:	2314      	movs	r3, #20
 80007fe:	9300      	str	r3, [sp, #0]
 8000800:	2301      	movs	r3, #1
 8000802:	4843      	ldr	r0, [pc, #268]	; (8000910 <TestTask+0x390>)
 8000804:	f001 fade 	bl	8001dc4 <HAL_I2C_Master_Receive>
 8000808:	4603      	mov	r3, r0
 800080a:	461a      	mov	r2, r3
 800080c:	4b41      	ldr	r3, [pc, #260]	; (8000914 <TestTask+0x394>)
 800080e:	701a      	strb	r2, [r3, #0]

			osDelay(2100);
 8000810:	f640 0034 	movw	r0, #2100	; 0x834
 8000814:	f005 fd23 	bl	800625e <osDelay>

			HAL_GPIO_WritePin(RST_ASIC_GPIO_Port, RST_ASIC_Pin, GPIO_PIN_SET);
 8000818:	2201      	movs	r2, #1
 800081a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800081e:	4837      	ldr	r0, [pc, #220]	; (80008fc <TestTask+0x37c>)
 8000820:	f001 f874 	bl	800190c <HAL_GPIO_WritePin>
			osDelay(1200);
 8000824:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000828:	f005 fd19 	bl	800625e <osDelay>
			HAL_GPIO_WritePin(RST_ASIC_GPIO_Port, RST_ASIC_Pin, GPIO_PIN_RESET);
 800082c:	2200      	movs	r2, #0
 800082e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000832:	4832      	ldr	r0, [pc, #200]	; (80008fc <TestTask+0x37c>)
 8000834:	f001 f86a 	bl	800190c <HAL_GPIO_WritePin>
			osDelay(500);
 8000838:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800083c:	f005 fd0f 	bl	800625e <osDelay>
			HAL_GPIO_WritePin(RST_ASIC_GPIO_Port, RST_ASIC_Pin, GPIO_PIN_SET);
 8000840:	2201      	movs	r2, #1
 8000842:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000846:	482d      	ldr	r0, [pc, #180]	; (80008fc <TestTask+0x37c>)
 8000848:	f001 f860 	bl	800190c <HAL_GPIO_WritePin>
			osDelay(500);
 800084c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000850:	f005 fd05 	bl	800625e <osDelay>

			status_uart = HAL_UART_Receive_IT(&huart6, readASIC, 1);
 8000854:	2201      	movs	r2, #1
 8000856:	4930      	ldr	r1, [pc, #192]	; (8000918 <TestTask+0x398>)
 8000858:	4830      	ldr	r0, [pc, #192]	; (800091c <TestTask+0x39c>)
 800085a:	f004 fd0a 	bl	8005272 <HAL_UART_Receive_IT>
 800085e:	4603      	mov	r3, r0
 8000860:	461a      	mov	r2, r3
 8000862:	4b2f      	ldr	r3, [pc, #188]	; (8000920 <TestTask+0x3a0>)
 8000864:	701a      	strb	r2, [r3, #0]
			status_uart = HAL_UART_Transmit(&huart1, cmdASIC, 7, 20);
 8000866:	f107 010c 	add.w	r1, r7, #12
 800086a:	2314      	movs	r3, #20
 800086c:	2207      	movs	r2, #7
 800086e:	482d      	ldr	r0, [pc, #180]	; (8000924 <TestTask+0x3a4>)
 8000870:	f004 fc6d 	bl	800514e <HAL_UART_Transmit>
 8000874:	4603      	mov	r3, r0
 8000876:	461a      	mov	r2, r3
 8000878:	4b29      	ldr	r3, [pc, #164]	; (8000920 <TestTask+0x3a0>)
 800087a:	701a      	strb	r2, [r3, #0]

			osDelay(5000);
 800087c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000880:	f005 fced 	bl	800625e <osDelay>

			HAL_UART_AbortReceive(&huart6);
 8000884:	4825      	ldr	r0, [pc, #148]	; (800091c <TestTask+0x39c>)
 8000886:	f004 fd24 	bl	80052d2 <HAL_UART_AbortReceive>

			status_i2c = HAL_I2C_Master_Transmit(&hi2c1, addr, cmdStop, 7, 20);
 800088a:	f107 0218 	add.w	r2, r7, #24
 800088e:	f8b7 1056 	ldrh.w	r1, [r7, #86]	; 0x56
 8000892:	2314      	movs	r3, #20
 8000894:	9300      	str	r3, [sp, #0]
 8000896:	2307      	movs	r3, #7
 8000898:	481d      	ldr	r0, [pc, #116]	; (8000910 <TestTask+0x390>)
 800089a:	f001 f995 	bl	8001bc8 <HAL_I2C_Master_Transmit>
 800089e:	4603      	mov	r3, r0
 80008a0:	461a      	mov	r2, r3
 80008a2:	4b1c      	ldr	r3, [pc, #112]	; (8000914 <TestTask+0x394>)
 80008a4:	701a      	strb	r2, [r3, #0]
			osDelay(20);
 80008a6:	2014      	movs	r0, #20
 80008a8:	f005 fcd9 	bl	800625e <osDelay>
			status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_stop[0], 1, 20);
 80008ac:	f107 0214 	add.w	r2, r7, #20
 80008b0:	f8b7 1056 	ldrh.w	r1, [r7, #86]	; 0x56
 80008b4:	2314      	movs	r3, #20
 80008b6:	9300      	str	r3, [sp, #0]
 80008b8:	2301      	movs	r3, #1
 80008ba:	4815      	ldr	r0, [pc, #84]	; (8000910 <TestTask+0x390>)
 80008bc:	f001 fa82 	bl	8001dc4 <HAL_I2C_Master_Receive>
 80008c0:	4603      	mov	r3, r0
 80008c2:	461a      	mov	r2, r3
 80008c4:	4b13      	ldr	r3, [pc, #76]	; (8000914 <TestTask+0x394>)
 80008c6:	701a      	strb	r2, [r3, #0]
			status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_stop[1], 1, 20);
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	1c5a      	adds	r2, r3, #1
 80008ce:	f8b7 1056 	ldrh.w	r1, [r7, #86]	; 0x56
 80008d2:	2314      	movs	r3, #20
 80008d4:	9300      	str	r3, [sp, #0]
 80008d6:	2301      	movs	r3, #1
 80008d8:	480d      	ldr	r0, [pc, #52]	; (8000910 <TestTask+0x390>)
 80008da:	f001 fa73 	bl	8001dc4 <HAL_I2C_Master_Receive>
 80008de:	4603      	mov	r3, r0
 80008e0:	461a      	mov	r2, r3
 80008e2:	e021      	b.n	8000928 <TestTask+0x3a8>
 80008e4:	08008324 	.word	0x08008324
 80008e8:	0800832c 	.word	0x0800832c
 80008ec:	08008334 	.word	0x08008334
 80008f0:	08008340 	.word	0x08008340
 80008f4:	08008348 	.word	0x08008348
 80008f8:	08008350 	.word	0x08008350
 80008fc:	40020000 	.word	0x40020000
 8000900:	40020c00 	.word	0x40020c00
 8000904:	40020800 	.word	0x40020800
 8000908:	200002b0 	.word	0x200002b0
 800090c:	20000090 	.word	0x20000090
 8000910:	20004328 	.word	0x20004328
 8000914:	200042cc 	.word	0x200042cc
 8000918:	20000094 	.word	0x20000094
 800091c:	20004408 	.word	0x20004408
 8000920:	200042c0 	.word	0x200042c0
 8000924:	200043c4 	.word	0x200043c4
 8000928:	4b01      	ldr	r3, [pc, #4]	; (8000930 <TestTask+0x3b0>)
 800092a:	701a      	strb	r2, [r3, #0]
		if (start) {
 800092c:	e696      	b.n	800065c <TestTask+0xdc>
 800092e:	bf00      	nop
 8000930:	200042cc 	.word	0x200042cc

08000934 <LCDTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_LCDTask */
void LCDTask(void const * argument)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LCDTask */
	uint16_t addr = 0x78;
 800093c:	2378      	movs	r3, #120	; 0x78
 800093e:	81fb      	strh	r3, [r7, #14]
/* Infinite loop */
for (;;) {
	//if (condition) {
	//	status_i2c = HAL_I2C_Master_Transmit(&hi2c3, (addr <<1), &cmdStart_1[0], 1, 20);
	//}
	osDelay(1);
 8000940:	2001      	movs	r0, #1
 8000942:	f005 fc8c 	bl	800625e <osDelay>
 8000946:	e7fb      	b.n	8000940 <LCDTask+0xc>

08000948 <HAL_UART_RxCpltCallback>:
  /* USER CODE END LCDTask */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]

	status_uart = HAL_UART_Receive_IT(&huart6, &readASIC[counter_ASIC], 1);
 8000950:	4b0a      	ldr	r3, [pc, #40]	; (800097c <HAL_UART_RxCpltCallback+0x34>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a0a      	ldr	r2, [pc, #40]	; (8000980 <HAL_UART_RxCpltCallback+0x38>)
 8000956:	4413      	add	r3, r2
 8000958:	2201      	movs	r2, #1
 800095a:	4619      	mov	r1, r3
 800095c:	4809      	ldr	r0, [pc, #36]	; (8000984 <HAL_UART_RxCpltCallback+0x3c>)
 800095e:	f004 fc88 	bl	8005272 <HAL_UART_Receive_IT>
 8000962:	4603      	mov	r3, r0
 8000964:	461a      	mov	r2, r3
 8000966:	4b08      	ldr	r3, [pc, #32]	; (8000988 <HAL_UART_RxCpltCallback+0x40>)
 8000968:	701a      	strb	r2, [r3, #0]
	counter_ASIC++;
 800096a:	4b04      	ldr	r3, [pc, #16]	; (800097c <HAL_UART_RxCpltCallback+0x34>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	3301      	adds	r3, #1
 8000970:	4a02      	ldr	r2, [pc, #8]	; (800097c <HAL_UART_RxCpltCallback+0x34>)
 8000972:	6013      	str	r3, [r2, #0]
}
 8000974:	bf00      	nop
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	20000090 	.word	0x20000090
 8000980:	20000094 	.word	0x20000094
 8000984:	20004408 	.word	0x20004408
 8000988:	200042c0 	.word	0x200042c0

0800098c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08a      	sub	sp, #40	; 0x28
 8000990:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000992:	f107 0314 	add.w	r3, r7, #20
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
 800099e:	60da      	str	r2, [r3, #12]
 80009a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	613b      	str	r3, [r7, #16]
 80009a6:	4b4b      	ldr	r3, [pc, #300]	; (8000ad4 <MX_GPIO_Init+0x148>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a4a      	ldr	r2, [pc, #296]	; (8000ad4 <MX_GPIO_Init+0x148>)
 80009ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b48      	ldr	r3, [pc, #288]	; (8000ad4 <MX_GPIO_Init+0x148>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	4b44      	ldr	r3, [pc, #272]	; (8000ad4 <MX_GPIO_Init+0x148>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a43      	ldr	r2, [pc, #268]	; (8000ad4 <MX_GPIO_Init+0x148>)
 80009c8:	f043 0304 	orr.w	r3, r3, #4
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b41      	ldr	r3, [pc, #260]	; (8000ad4 <MX_GPIO_Init+0x148>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0304 	and.w	r3, r3, #4
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	60bb      	str	r3, [r7, #8]
 80009de:	4b3d      	ldr	r3, [pc, #244]	; (8000ad4 <MX_GPIO_Init+0x148>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a3c      	ldr	r2, [pc, #240]	; (8000ad4 <MX_GPIO_Init+0x148>)
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b3a      	ldr	r3, [pc, #232]	; (8000ad4 <MX_GPIO_Init+0x148>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	60bb      	str	r3, [r7, #8]
 80009f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	4b36      	ldr	r3, [pc, #216]	; (8000ad4 <MX_GPIO_Init+0x148>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a35      	ldr	r2, [pc, #212]	; (8000ad4 <MX_GPIO_Init+0x148>)
 8000a00:	f043 0308 	orr.w	r3, r3, #8
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b33      	ldr	r3, [pc, #204]	; (8000ad4 <MX_GPIO_Init+0x148>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0308 	and.w	r3, r3, #8
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	603b      	str	r3, [r7, #0]
 8000a16:	4b2f      	ldr	r3, [pc, #188]	; (8000ad4 <MX_GPIO_Init+0x148>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a2e      	ldr	r2, [pc, #184]	; (8000ad4 <MX_GPIO_Init+0x148>)
 8000a1c:	f043 0302 	orr.w	r3, r3, #2
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b2c      	ldr	r3, [pc, #176]	; (8000ad4 <MX_GPIO_Init+0x148>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0302 	and.w	r3, r3, #2
 8000a2a:	603b      	str	r3, [r7, #0]
 8000a2c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_ASIC_GPIO_Port, RST_ASIC_Pin, GPIO_PIN_SET);
 8000a2e:	2201      	movs	r2, #1
 8000a30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a34:	4828      	ldr	r0, [pc, #160]	; (8000ad8 <MX_GPIO_Init+0x14c>)
 8000a36:	f000 ff69 	bl	800190c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, A1_Pin|A0_Pin|A2_Pin, GPIO_PIN_SET);
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	2107      	movs	r1, #7
 8000a3e:	4827      	ldr	r0, [pc, #156]	; (8000adc <MX_GPIO_Init+0x150>)
 8000a40:	f000 ff64 	bl	800190c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RST_ASIC_Pin;
 8000a44:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a52:	2300      	movs	r3, #0
 8000a54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RST_ASIC_GPIO_Port, &GPIO_InitStruct);
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	481e      	ldr	r0, [pc, #120]	; (8000ad8 <MX_GPIO_Init+0x14c>)
 8000a5e:	f000 fda1 	bl	80015a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	4619      	mov	r1, r3
 8000a76:	4818      	ldr	r0, [pc, #96]	; (8000ad8 <MX_GPIO_Init+0x14c>)
 8000a78:	f000 fd94 	bl	80015a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000a7c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a86:	2301      	movs	r3, #1
 8000a88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4813      	ldr	r0, [pc, #76]	; (8000ae0 <MX_GPIO_Init+0x154>)
 8000a92:	f000 fd87 	bl	80015a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PLUG_Pin;
 8000a96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PLUG_GPIO_Port, &GPIO_InitStruct);
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	480d      	ldr	r0, [pc, #52]	; (8000ae0 <MX_GPIO_Init+0x154>)
 8000aac:	f000 fd7a 	bl	80015a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = A1_Pin|A0_Pin|A2_Pin;
 8000ab0:	2307      	movs	r3, #7
 8000ab2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abc:	2300      	movs	r3, #0
 8000abe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4805      	ldr	r0, [pc, #20]	; (8000adc <MX_GPIO_Init+0x150>)
 8000ac8:	f000 fd6c 	bl	80015a4 <HAL_GPIO_Init>

}
 8000acc:	bf00      	nop
 8000ace:	3728      	adds	r7, #40	; 0x28
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	40020000 	.word	0x40020000
 8000adc:	40020c00 	.word	0x40020c00
 8000ae0:	40020800 	.word	0x40020800

08000ae4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ae8:	4b13      	ldr	r3, [pc, #76]	; (8000b38 <MX_I2C1_Init+0x54>)
 8000aea:	4a14      	ldr	r2, [pc, #80]	; (8000b3c <MX_I2C1_Init+0x58>)
 8000aec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 35000;
 8000aee:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <MX_I2C1_Init+0x54>)
 8000af0:	f648 02b8 	movw	r2, #35000	; 0x88b8
 8000af4:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000af6:	4b10      	ldr	r3, [pc, #64]	; (8000b38 <MX_I2C1_Init+0x54>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000afc:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <MX_I2C1_Init+0x54>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b02:	4b0d      	ldr	r3, [pc, #52]	; (8000b38 <MX_I2C1_Init+0x54>)
 8000b04:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b08:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b0a:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <MX_I2C1_Init+0x54>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b10:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <MX_I2C1_Init+0x54>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b16:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <MX_I2C1_Init+0x54>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <MX_I2C1_Init+0x54>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b22:	4805      	ldr	r0, [pc, #20]	; (8000b38 <MX_I2C1_Init+0x54>)
 8000b24:	f000 ff0c 	bl	8001940 <HAL_I2C_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8000b2e:	f000 f977 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20004328 	.word	0x20004328
 8000b3c:	40005400 	.word	0x40005400

08000b40 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000b44:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <MX_I2C3_Init+0x50>)
 8000b46:	4a13      	ldr	r2, [pc, #76]	; (8000b94 <MX_I2C3_Init+0x54>)
 8000b48:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000b4a:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <MX_I2C3_Init+0x50>)
 8000b4c:	4a12      	ldr	r2, [pc, #72]	; (8000b98 <MX_I2C3_Init+0x58>)
 8000b4e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b50:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <MX_I2C3_Init+0x50>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000b56:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <MX_I2C3_Init+0x50>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <MX_I2C3_Init+0x50>)
 8000b5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b62:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b64:	4b0a      	ldr	r3, [pc, #40]	; (8000b90 <MX_I2C3_Init+0x50>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <MX_I2C3_Init+0x50>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b70:	4b07      	ldr	r3, [pc, #28]	; (8000b90 <MX_I2C3_Init+0x50>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <MX_I2C3_Init+0x50>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000b7c:	4804      	ldr	r0, [pc, #16]	; (8000b90 <MX_I2C3_Init+0x50>)
 8000b7e:	f000 fedf 	bl	8001940 <HAL_I2C_Init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000b88:	f000 f94a 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	200042d4 	.word	0x200042d4
 8000b94:	40005c00 	.word	0x40005c00
 8000b98:	000186a0 	.word	0x000186a0

08000b9c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08c      	sub	sp, #48	; 0x30
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	f107 031c 	add.w	r3, r7, #28
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a4a      	ldr	r2, [pc, #296]	; (8000ce4 <HAL_I2C_MspInit+0x148>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d12c      	bne.n	8000c18 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61bb      	str	r3, [r7, #24]
 8000bc2:	4b49      	ldr	r3, [pc, #292]	; (8000ce8 <HAL_I2C_MspInit+0x14c>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a48      	ldr	r2, [pc, #288]	; (8000ce8 <HAL_I2C_MspInit+0x14c>)
 8000bc8:	f043 0302 	orr.w	r3, r3, #2
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b46      	ldr	r3, [pc, #280]	; (8000ce8 <HAL_I2C_MspInit+0x14c>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0302 	and.w	r3, r3, #2
 8000bd6:	61bb      	str	r3, [r7, #24]
 8000bd8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bda:	23c0      	movs	r3, #192	; 0xc0
 8000bdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bde:	2312      	movs	r3, #18
 8000be0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be6:	2303      	movs	r3, #3
 8000be8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bea:	2304      	movs	r3, #4
 8000bec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bee:	f107 031c 	add.w	r3, r7, #28
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	483d      	ldr	r0, [pc, #244]	; (8000cec <HAL_I2C_MspInit+0x150>)
 8000bf6:	f000 fcd5 	bl	80015a4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	617b      	str	r3, [r7, #20]
 8000bfe:	4b3a      	ldr	r3, [pc, #232]	; (8000ce8 <HAL_I2C_MspInit+0x14c>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c02:	4a39      	ldr	r2, [pc, #228]	; (8000ce8 <HAL_I2C_MspInit+0x14c>)
 8000c04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c08:	6413      	str	r3, [r2, #64]	; 0x40
 8000c0a:	4b37      	ldr	r3, [pc, #220]	; (8000ce8 <HAL_I2C_MspInit+0x14c>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c12:	617b      	str	r3, [r7, #20]
 8000c14:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000c16:	e060      	b.n	8000cda <HAL_I2C_MspInit+0x13e>
  else if(i2cHandle->Instance==I2C3)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a34      	ldr	r2, [pc, #208]	; (8000cf0 <HAL_I2C_MspInit+0x154>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d15b      	bne.n	8000cda <HAL_I2C_MspInit+0x13e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	613b      	str	r3, [r7, #16]
 8000c26:	4b30      	ldr	r3, [pc, #192]	; (8000ce8 <HAL_I2C_MspInit+0x14c>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4a2f      	ldr	r2, [pc, #188]	; (8000ce8 <HAL_I2C_MspInit+0x14c>)
 8000c2c:	f043 0304 	orr.w	r3, r3, #4
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b2d      	ldr	r3, [pc, #180]	; (8000ce8 <HAL_I2C_MspInit+0x14c>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f003 0304 	and.w	r3, r3, #4
 8000c3a:	613b      	str	r3, [r7, #16]
 8000c3c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	4b29      	ldr	r3, [pc, #164]	; (8000ce8 <HAL_I2C_MspInit+0x14c>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a28      	ldr	r2, [pc, #160]	; (8000ce8 <HAL_I2C_MspInit+0x14c>)
 8000c48:	f043 0301 	orr.w	r3, r3, #1
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b26      	ldr	r3, [pc, #152]	; (8000ce8 <HAL_I2C_MspInit+0x14c>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c60:	2312      	movs	r3, #18
 8000c62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c70:	f107 031c 	add.w	r3, r7, #28
 8000c74:	4619      	mov	r1, r3
 8000c76:	481f      	ldr	r0, [pc, #124]	; (8000cf4 <HAL_I2C_MspInit+0x158>)
 8000c78:	f000 fc94 	bl	80015a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c82:	2312      	movs	r3, #18
 8000c84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000c8e:	2304      	movs	r3, #4
 8000c90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c92:	f107 031c 	add.w	r3, r7, #28
 8000c96:	4619      	mov	r1, r3
 8000c98:	4817      	ldr	r0, [pc, #92]	; (8000cf8 <HAL_I2C_MspInit+0x15c>)
 8000c9a:	f000 fc83 	bl	80015a4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <HAL_I2C_MspInit+0x14c>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca6:	4a10      	ldr	r2, [pc, #64]	; (8000ce8 <HAL_I2C_MspInit+0x14c>)
 8000ca8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000cac:	6413      	str	r3, [r2, #64]	; 0x40
 8000cae:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <HAL_I2C_MspInit+0x14c>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000cb6:	60bb      	str	r3, [r7, #8]
 8000cb8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 5, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2105      	movs	r1, #5
 8000cbe:	2048      	movs	r0, #72	; 0x48
 8000cc0:	f000 fb9a 	bl	80013f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8000cc4:	2048      	movs	r0, #72	; 0x48
 8000cc6:	f000 fbb3 	bl	8001430 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 5, 0);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2105      	movs	r1, #5
 8000cce:	2049      	movs	r0, #73	; 0x49
 8000cd0:	f000 fb92 	bl	80013f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8000cd4:	2049      	movs	r0, #73	; 0x49
 8000cd6:	f000 fbab 	bl	8001430 <HAL_NVIC_EnableIRQ>
}
 8000cda:	bf00      	nop
 8000cdc:	3730      	adds	r7, #48	; 0x30
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40005400 	.word	0x40005400
 8000ce8:	40023800 	.word	0x40023800
 8000cec:	40020400 	.word	0x40020400
 8000cf0:	40005c00 	.word	0x40005c00
 8000cf4:	40020800 	.word	0x40020800
 8000cf8:	40020000 	.word	0x40020000

08000cfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d00:	f000 fa80 	bl	8001204 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d04:	f000 f810 	bl	8000d28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d08:	f7ff fe40 	bl	800098c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d0c:	f7ff feea 	bl	8000ae4 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000d10:	f7ff ff16 	bl	8000b40 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 8000d14:	f000 f96a 	bl	8000fec <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000d18:	f000 f992 	bl	8001040 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000d1c:	f7ff fbee 	bl	80004fc <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000d20:	f005 fa4a 	bl	80061b8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <main+0x28>
	...

08000d28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b094      	sub	sp, #80	; 0x50
 8000d2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d2e:	f107 0320 	add.w	r3, r7, #32
 8000d32:	2230      	movs	r2, #48	; 0x30
 8000d34:	2100      	movs	r1, #0
 8000d36:	4618      	mov	r0, r3
 8000d38:	f007 f9f4 	bl	8008124 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d3c:	f107 030c 	add.w	r3, r7, #12
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	60bb      	str	r3, [r7, #8]
 8000d50:	4b28      	ldr	r3, [pc, #160]	; (8000df4 <SystemClock_Config+0xcc>)
 8000d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d54:	4a27      	ldr	r2, [pc, #156]	; (8000df4 <SystemClock_Config+0xcc>)
 8000d56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d5c:	4b25      	ldr	r3, [pc, #148]	; (8000df4 <SystemClock_Config+0xcc>)
 8000d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d64:	60bb      	str	r3, [r7, #8]
 8000d66:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d68:	2300      	movs	r3, #0
 8000d6a:	607b      	str	r3, [r7, #4]
 8000d6c:	4b22      	ldr	r3, [pc, #136]	; (8000df8 <SystemClock_Config+0xd0>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a21      	ldr	r2, [pc, #132]	; (8000df8 <SystemClock_Config+0xd0>)
 8000d72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d76:	6013      	str	r3, [r2, #0]
 8000d78:	4b1f      	ldr	r3, [pc, #124]	; (8000df8 <SystemClock_Config+0xd0>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d80:	607b      	str	r3, [r7, #4]
 8000d82:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d84:	2302      	movs	r3, #2
 8000d86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d8c:	2310      	movs	r3, #16
 8000d8e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d90:	2302      	movs	r3, #2
 8000d92:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d94:	2300      	movs	r3, #0
 8000d96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d98:	2308      	movs	r3, #8
 8000d9a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000d9c:	23a8      	movs	r3, #168	; 0xa8
 8000d9e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000da0:	2302      	movs	r3, #2
 8000da2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000da4:	2304      	movs	r3, #4
 8000da6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000da8:	f107 0320 	add.w	r3, r7, #32
 8000dac:	4618      	mov	r0, r3
 8000dae:	f003 fa2d 	bl	800420c <HAL_RCC_OscConfig>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000db8:	f000 f832 	bl	8000e20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dbc:	230f      	movs	r3, #15
 8000dbe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000dc8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000dcc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000dce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dd2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000dd4:	f107 030c 	add.w	r3, r7, #12
 8000dd8:	2105      	movs	r1, #5
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f003 fc8e 	bl	80046fc <HAL_RCC_ClockConfig>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000de6:	f000 f81b 	bl	8000e20 <Error_Handler>
  }
}
 8000dea:	bf00      	nop
 8000dec:	3750      	adds	r7, #80	; 0x50
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40023800 	.word	0x40023800
 8000df8:	40007000 	.word	0x40007000

08000dfc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a04      	ldr	r2, [pc, #16]	; (8000e1c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d101      	bne.n	8000e12 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e0e:	f000 fa1b 	bl	8001248 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40001400 	.word	0x40001400

08000e20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e24:	b672      	cpsid	i
}
 8000e26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e28:	e7fe      	b.n	8000e28 <Error_Handler+0x8>
	...

08000e2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	607b      	str	r3, [r7, #4]
 8000e36:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <HAL_MspInit+0x54>)
 8000e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3a:	4a11      	ldr	r2, [pc, #68]	; (8000e80 <HAL_MspInit+0x54>)
 8000e3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e40:	6453      	str	r3, [r2, #68]	; 0x44
 8000e42:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <HAL_MspInit+0x54>)
 8000e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e4a:	607b      	str	r3, [r7, #4]
 8000e4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	603b      	str	r3, [r7, #0]
 8000e52:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <HAL_MspInit+0x54>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e56:	4a0a      	ldr	r2, [pc, #40]	; (8000e80 <HAL_MspInit+0x54>)
 8000e58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e5e:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <HAL_MspInit+0x54>)
 8000e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e66:	603b      	str	r3, [r7, #0]
 8000e68:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	210f      	movs	r1, #15
 8000e6e:	f06f 0001 	mvn.w	r0, #1
 8000e72:	f000 fac1 	bl	80013f8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40023800 	.word	0x40023800

08000e84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08c      	sub	sp, #48	; 0x30
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000e90:	2300      	movs	r3, #0
 8000e92:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8000e94:	2200      	movs	r2, #0
 8000e96:	6879      	ldr	r1, [r7, #4]
 8000e98:	2037      	movs	r0, #55	; 0x37
 8000e9a:	f000 faad 	bl	80013f8 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000e9e:	2037      	movs	r0, #55	; 0x37
 8000ea0:	f000 fac6 	bl	8001430 <HAL_NVIC_EnableIRQ>

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	4b1f      	ldr	r3, [pc, #124]	; (8000f28 <HAL_InitTick+0xa4>)
 8000eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eac:	4a1e      	ldr	r2, [pc, #120]	; (8000f28 <HAL_InitTick+0xa4>)
 8000eae:	f043 0320 	orr.w	r3, r3, #32
 8000eb2:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb4:	4b1c      	ldr	r3, [pc, #112]	; (8000f28 <HAL_InitTick+0xa4>)
 8000eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb8:	f003 0320 	and.w	r3, r3, #32
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ec0:	f107 0210 	add.w	r2, r7, #16
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	4611      	mov	r1, r2
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f003 fe12 	bl	8004af4 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000ed0:	f003 fde8 	bl	8004aa4 <HAL_RCC_GetPCLK1Freq>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000edc:	4a13      	ldr	r2, [pc, #76]	; (8000f2c <HAL_InitTick+0xa8>)
 8000ede:	fba2 2303 	umull	r2, r3, r2, r3
 8000ee2:	0c9b      	lsrs	r3, r3, #18
 8000ee4:	3b01      	subs	r3, #1
 8000ee6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000ee8:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <HAL_InitTick+0xac>)
 8000eea:	4a12      	ldr	r2, [pc, #72]	; (8000f34 <HAL_InitTick+0xb0>)
 8000eec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000eee:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <HAL_InitTick+0xac>)
 8000ef0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ef4:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000ef6:	4a0e      	ldr	r2, [pc, #56]	; (8000f30 <HAL_InitTick+0xac>)
 8000ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000efa:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000efc:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <HAL_InitTick+0xac>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f02:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <HAL_InitTick+0xac>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000f08:	4809      	ldr	r0, [pc, #36]	; (8000f30 <HAL_InitTick+0xac>)
 8000f0a:	f003 fe25 	bl	8004b58 <HAL_TIM_Base_Init>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d104      	bne.n	8000f1e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000f14:	4806      	ldr	r0, [pc, #24]	; (8000f30 <HAL_InitTick+0xac>)
 8000f16:	f003 fe79 	bl	8004c0c <HAL_TIM_Base_Start_IT>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	e000      	b.n	8000f20 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3730      	adds	r7, #48	; 0x30
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40023800 	.word	0x40023800
 8000f2c:	431bde83 	.word	0x431bde83
 8000f30:	2000437c 	.word	0x2000437c
 8000f34:	40001400 	.word	0x40001400

08000f38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f3c:	e7fe      	b.n	8000f3c <NMI_Handler+0x4>

08000f3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f42:	e7fe      	b.n	8000f42 <HardFault_Handler+0x4>

08000f44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f48:	e7fe      	b.n	8000f48 <MemManage_Handler+0x4>

08000f4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f4e:	e7fe      	b.n	8000f4e <BusFault_Handler+0x4>

08000f50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <UsageFault_Handler+0x4>

08000f56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f68:	4802      	ldr	r0, [pc, #8]	; (8000f74 <USART1_IRQHandler+0x10>)
 8000f6a:	f004 fa55 	bl	8005418 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	200043c4 	.word	0x200043c4

08000f78 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000f7c:	4802      	ldr	r0, [pc, #8]	; (8000f88 <TIM7_IRQHandler+0x10>)
 8000f7e:	f003 feb5 	bl	8004cec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	2000437c 	.word	0x2000437c

08000f8c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000f90:	4802      	ldr	r0, [pc, #8]	; (8000f9c <USART6_IRQHandler+0x10>)
 8000f92:	f004 fa41 	bl	8005418 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20004408 	.word	0x20004408

08000fa0 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8000fa4:	4802      	ldr	r0, [pc, #8]	; (8000fb0 <I2C3_EV_IRQHandler+0x10>)
 8000fa6:	f001 f933 	bl	8002210 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	200042d4 	.word	0x200042d4

08000fb4 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8000fb8:	4802      	ldr	r0, [pc, #8]	; (8000fc4 <I2C3_ER_IRQHandler+0x10>)
 8000fba:	f001 fa9a 	bl	80024f2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	200042d4 	.word	0x200042d4

08000fc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fcc:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <SystemInit+0x20>)
 8000fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fd2:	4a05      	ldr	r2, [pc, #20]	; (8000fe8 <SystemInit+0x20>)
 8000fd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ff0:	4b11      	ldr	r3, [pc, #68]	; (8001038 <MX_USART1_UART_Init+0x4c>)
 8000ff2:	4a12      	ldr	r2, [pc, #72]	; (800103c <MX_USART1_UART_Init+0x50>)
 8000ff4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ff6:	4b10      	ldr	r3, [pc, #64]	; (8001038 <MX_USART1_UART_Init+0x4c>)
 8000ff8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ffc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <MX_USART1_UART_Init+0x4c>)
 8001000:	2200      	movs	r2, #0
 8001002:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <MX_USART1_UART_Init+0x4c>)
 8001006:	2200      	movs	r2, #0
 8001008:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800100a:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <MX_USART1_UART_Init+0x4c>)
 800100c:	2200      	movs	r2, #0
 800100e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001010:	4b09      	ldr	r3, [pc, #36]	; (8001038 <MX_USART1_UART_Init+0x4c>)
 8001012:	220c      	movs	r2, #12
 8001014:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001016:	4b08      	ldr	r3, [pc, #32]	; (8001038 <MX_USART1_UART_Init+0x4c>)
 8001018:	2200      	movs	r2, #0
 800101a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800101c:	4b06      	ldr	r3, [pc, #24]	; (8001038 <MX_USART1_UART_Init+0x4c>)
 800101e:	2200      	movs	r2, #0
 8001020:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001022:	4805      	ldr	r0, [pc, #20]	; (8001038 <MX_USART1_UART_Init+0x4c>)
 8001024:	f004 f846 	bl	80050b4 <HAL_UART_Init>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800102e:	f7ff fef7 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	200043c4 	.word	0x200043c4
 800103c:	40011000 	.word	0x40011000

08001040 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001044:	4b11      	ldr	r3, [pc, #68]	; (800108c <MX_USART6_UART_Init+0x4c>)
 8001046:	4a12      	ldr	r2, [pc, #72]	; (8001090 <MX_USART6_UART_Init+0x50>)
 8001048:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800104a:	4b10      	ldr	r3, [pc, #64]	; (800108c <MX_USART6_UART_Init+0x4c>)
 800104c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001050:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001052:	4b0e      	ldr	r3, [pc, #56]	; (800108c <MX_USART6_UART_Init+0x4c>)
 8001054:	2200      	movs	r2, #0
 8001056:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001058:	4b0c      	ldr	r3, [pc, #48]	; (800108c <MX_USART6_UART_Init+0x4c>)
 800105a:	2200      	movs	r2, #0
 800105c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800105e:	4b0b      	ldr	r3, [pc, #44]	; (800108c <MX_USART6_UART_Init+0x4c>)
 8001060:	2200      	movs	r2, #0
 8001062:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001064:	4b09      	ldr	r3, [pc, #36]	; (800108c <MX_USART6_UART_Init+0x4c>)
 8001066:	220c      	movs	r2, #12
 8001068:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800106a:	4b08      	ldr	r3, [pc, #32]	; (800108c <MX_USART6_UART_Init+0x4c>)
 800106c:	2200      	movs	r2, #0
 800106e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001070:	4b06      	ldr	r3, [pc, #24]	; (800108c <MX_USART6_UART_Init+0x4c>)
 8001072:	2200      	movs	r2, #0
 8001074:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001076:	4805      	ldr	r0, [pc, #20]	; (800108c <MX_USART6_UART_Init+0x4c>)
 8001078:	f004 f81c 	bl	80050b4 <HAL_UART_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001082:	f7ff fecd 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20004408 	.word	0x20004408
 8001090:	40011400 	.word	0x40011400

08001094 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08c      	sub	sp, #48	; 0x30
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109c:	f107 031c 	add.w	r3, r7, #28
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a3a      	ldr	r2, [pc, #232]	; (800119c <HAL_UART_MspInit+0x108>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d135      	bne.n	8001122 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	61bb      	str	r3, [r7, #24]
 80010ba:	4b39      	ldr	r3, [pc, #228]	; (80011a0 <HAL_UART_MspInit+0x10c>)
 80010bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010be:	4a38      	ldr	r2, [pc, #224]	; (80011a0 <HAL_UART_MspInit+0x10c>)
 80010c0:	f043 0310 	orr.w	r3, r3, #16
 80010c4:	6453      	str	r3, [r2, #68]	; 0x44
 80010c6:	4b36      	ldr	r3, [pc, #216]	; (80011a0 <HAL_UART_MspInit+0x10c>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ca:	f003 0310 	and.w	r3, r3, #16
 80010ce:	61bb      	str	r3, [r7, #24]
 80010d0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	617b      	str	r3, [r7, #20]
 80010d6:	4b32      	ldr	r3, [pc, #200]	; (80011a0 <HAL_UART_MspInit+0x10c>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	4a31      	ldr	r2, [pc, #196]	; (80011a0 <HAL_UART_MspInit+0x10c>)
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	6313      	str	r3, [r2, #48]	; 0x30
 80010e2:	4b2f      	ldr	r3, [pc, #188]	; (80011a0 <HAL_UART_MspInit+0x10c>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	617b      	str	r3, [r7, #20]
 80010ec:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80010ee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80010f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f4:	2302      	movs	r3, #2
 80010f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fc:	2303      	movs	r3, #3
 80010fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001100:	2307      	movs	r3, #7
 8001102:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001104:	f107 031c 	add.w	r3, r7, #28
 8001108:	4619      	mov	r1, r3
 800110a:	4826      	ldr	r0, [pc, #152]	; (80011a4 <HAL_UART_MspInit+0x110>)
 800110c:	f000 fa4a 	bl	80015a4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001110:	2200      	movs	r2, #0
 8001112:	2105      	movs	r1, #5
 8001114:	2025      	movs	r0, #37	; 0x25
 8001116:	f000 f96f 	bl	80013f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800111a:	2025      	movs	r0, #37	; 0x25
 800111c:	f000 f988 	bl	8001430 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001120:	e038      	b.n	8001194 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART6)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a20      	ldr	r2, [pc, #128]	; (80011a8 <HAL_UART_MspInit+0x114>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d133      	bne.n	8001194 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART6_CLK_ENABLE();
 800112c:	2300      	movs	r3, #0
 800112e:	613b      	str	r3, [r7, #16]
 8001130:	4b1b      	ldr	r3, [pc, #108]	; (80011a0 <HAL_UART_MspInit+0x10c>)
 8001132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001134:	4a1a      	ldr	r2, [pc, #104]	; (80011a0 <HAL_UART_MspInit+0x10c>)
 8001136:	f043 0320 	orr.w	r3, r3, #32
 800113a:	6453      	str	r3, [r2, #68]	; 0x44
 800113c:	4b18      	ldr	r3, [pc, #96]	; (80011a0 <HAL_UART_MspInit+0x10c>)
 800113e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001140:	f003 0320 	and.w	r3, r3, #32
 8001144:	613b      	str	r3, [r7, #16]
 8001146:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001148:	2300      	movs	r3, #0
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <HAL_UART_MspInit+0x10c>)
 800114e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001150:	4a13      	ldr	r2, [pc, #76]	; (80011a0 <HAL_UART_MspInit+0x10c>)
 8001152:	f043 0304 	orr.w	r3, r3, #4
 8001156:	6313      	str	r3, [r2, #48]	; 0x30
 8001158:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <HAL_UART_MspInit+0x10c>)
 800115a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115c:	f003 0304 	and.w	r3, r3, #4
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001164:	23c0      	movs	r3, #192	; 0xc0
 8001166:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001168:	2302      	movs	r3, #2
 800116a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001170:	2303      	movs	r3, #3
 8001172:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001174:	2308      	movs	r3, #8
 8001176:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001178:	f107 031c 	add.w	r3, r7, #28
 800117c:	4619      	mov	r1, r3
 800117e:	480b      	ldr	r0, [pc, #44]	; (80011ac <HAL_UART_MspInit+0x118>)
 8001180:	f000 fa10 	bl	80015a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8001184:	2200      	movs	r2, #0
 8001186:	2105      	movs	r1, #5
 8001188:	2047      	movs	r0, #71	; 0x47
 800118a:	f000 f935 	bl	80013f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800118e:	2047      	movs	r0, #71	; 0x47
 8001190:	f000 f94e 	bl	8001430 <HAL_NVIC_EnableIRQ>
}
 8001194:	bf00      	nop
 8001196:	3730      	adds	r7, #48	; 0x30
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40011000 	.word	0x40011000
 80011a0:	40023800 	.word	0x40023800
 80011a4:	40020000 	.word	0x40020000
 80011a8:	40011400 	.word	0x40011400
 80011ac:	40020800 	.word	0x40020800

080011b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011b4:	480d      	ldr	r0, [pc, #52]	; (80011ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011b6:	490e      	ldr	r1, [pc, #56]	; (80011f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011b8:	4a0e      	ldr	r2, [pc, #56]	; (80011f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011bc:	e002      	b.n	80011c4 <LoopCopyDataInit>

080011be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011c2:	3304      	adds	r3, #4

080011c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011c8:	d3f9      	bcc.n	80011be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ca:	4a0b      	ldr	r2, [pc, #44]	; (80011f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011cc:	4c0b      	ldr	r4, [pc, #44]	; (80011fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80011ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011d0:	e001      	b.n	80011d6 <LoopFillZerobss>

080011d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011d4:	3204      	adds	r2, #4

080011d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011d8:	d3fb      	bcc.n	80011d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80011da:	f7ff fef5 	bl	8000fc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011de:	f006 ff6d 	bl	80080bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011e2:	f7ff fd8b 	bl	8000cfc <main>
  bx  lr    
 80011e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80011e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011f0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80011f4:	080083e8 	.word	0x080083e8
  ldr r2, =_sbss
 80011f8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80011fc:	2000445c 	.word	0x2000445c

08001200 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001200:	e7fe      	b.n	8001200 <ADC_IRQHandler>
	...

08001204 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001208:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <HAL_Init+0x40>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a0d      	ldr	r2, [pc, #52]	; (8001244 <HAL_Init+0x40>)
 800120e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001212:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001214:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <HAL_Init+0x40>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a0a      	ldr	r2, [pc, #40]	; (8001244 <HAL_Init+0x40>)
 800121a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800121e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001220:	4b08      	ldr	r3, [pc, #32]	; (8001244 <HAL_Init+0x40>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a07      	ldr	r2, [pc, #28]	; (8001244 <HAL_Init+0x40>)
 8001226:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800122a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800122c:	2003      	movs	r0, #3
 800122e:	f000 f8d8 	bl	80013e2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001232:	200f      	movs	r0, #15
 8001234:	f7ff fe26 	bl	8000e84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001238:	f7ff fdf8 	bl	8000e2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40023c00 	.word	0x40023c00

08001248 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800124c:	4b06      	ldr	r3, [pc, #24]	; (8001268 <HAL_IncTick+0x20>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	461a      	mov	r2, r3
 8001252:	4b06      	ldr	r3, [pc, #24]	; (800126c <HAL_IncTick+0x24>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4413      	add	r3, r2
 8001258:	4a04      	ldr	r2, [pc, #16]	; (800126c <HAL_IncTick+0x24>)
 800125a:	6013      	str	r3, [r2, #0]
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	20000008 	.word	0x20000008
 800126c:	2000444c 	.word	0x2000444c

08001270 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  return uwTick;
 8001274:	4b03      	ldr	r3, [pc, #12]	; (8001284 <HAL_GetTick+0x14>)
 8001276:	681b      	ldr	r3, [r3, #0]
}
 8001278:	4618      	mov	r0, r3
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	2000444c 	.word	0x2000444c

08001288 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001298:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <__NVIC_SetPriorityGrouping+0x44>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800129e:	68ba      	ldr	r2, [r7, #8]
 80012a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012a4:	4013      	ands	r3, r2
 80012a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ba:	4a04      	ldr	r2, [pc, #16]	; (80012cc <__NVIC_SetPriorityGrouping+0x44>)
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	60d3      	str	r3, [r2, #12]
}
 80012c0:	bf00      	nop
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d4:	4b04      	ldr	r3, [pc, #16]	; (80012e8 <__NVIC_GetPriorityGrouping+0x18>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	0a1b      	lsrs	r3, r3, #8
 80012da:	f003 0307 	and.w	r3, r3, #7
}
 80012de:	4618      	mov	r0, r3
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	db0b      	blt.n	8001316 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	f003 021f 	and.w	r2, r3, #31
 8001304:	4907      	ldr	r1, [pc, #28]	; (8001324 <__NVIC_EnableIRQ+0x38>)
 8001306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130a:	095b      	lsrs	r3, r3, #5
 800130c:	2001      	movs	r0, #1
 800130e:	fa00 f202 	lsl.w	r2, r0, r2
 8001312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	e000e100 	.word	0xe000e100

08001328 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	6039      	str	r1, [r7, #0]
 8001332:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001338:	2b00      	cmp	r3, #0
 800133a:	db0a      	blt.n	8001352 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	b2da      	uxtb	r2, r3
 8001340:	490c      	ldr	r1, [pc, #48]	; (8001374 <__NVIC_SetPriority+0x4c>)
 8001342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001346:	0112      	lsls	r2, r2, #4
 8001348:	b2d2      	uxtb	r2, r2
 800134a:	440b      	add	r3, r1
 800134c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001350:	e00a      	b.n	8001368 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	b2da      	uxtb	r2, r3
 8001356:	4908      	ldr	r1, [pc, #32]	; (8001378 <__NVIC_SetPriority+0x50>)
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	f003 030f 	and.w	r3, r3, #15
 800135e:	3b04      	subs	r3, #4
 8001360:	0112      	lsls	r2, r2, #4
 8001362:	b2d2      	uxtb	r2, r2
 8001364:	440b      	add	r3, r1
 8001366:	761a      	strb	r2, [r3, #24]
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	e000e100 	.word	0xe000e100
 8001378:	e000ed00 	.word	0xe000ed00

0800137c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800137c:	b480      	push	{r7}
 800137e:	b089      	sub	sp, #36	; 0x24
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	f1c3 0307 	rsb	r3, r3, #7
 8001396:	2b04      	cmp	r3, #4
 8001398:	bf28      	it	cs
 800139a:	2304      	movcs	r3, #4
 800139c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	3304      	adds	r3, #4
 80013a2:	2b06      	cmp	r3, #6
 80013a4:	d902      	bls.n	80013ac <NVIC_EncodePriority+0x30>
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	3b03      	subs	r3, #3
 80013aa:	e000      	b.n	80013ae <NVIC_EncodePriority+0x32>
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b0:	f04f 32ff 	mov.w	r2, #4294967295
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	43da      	mvns	r2, r3
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	401a      	ands	r2, r3
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013c4:	f04f 31ff 	mov.w	r1, #4294967295
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	fa01 f303 	lsl.w	r3, r1, r3
 80013ce:	43d9      	mvns	r1, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d4:	4313      	orrs	r3, r2
         );
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3724      	adds	r7, #36	; 0x24
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b082      	sub	sp, #8
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f7ff ff4c 	bl	8001288 <__NVIC_SetPriorityGrouping>
}
 80013f0:	bf00      	nop
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
 8001404:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001406:	2300      	movs	r3, #0
 8001408:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800140a:	f7ff ff61 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 800140e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	68b9      	ldr	r1, [r7, #8]
 8001414:	6978      	ldr	r0, [r7, #20]
 8001416:	f7ff ffb1 	bl	800137c <NVIC_EncodePriority>
 800141a:	4602      	mov	r2, r0
 800141c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001420:	4611      	mov	r1, r2
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff ff80 	bl	8001328 <__NVIC_SetPriority>
}
 8001428:	bf00      	nop
 800142a:	3718      	adds	r7, #24
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800143a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff ff54 	bl	80012ec <__NVIC_EnableIRQ>
}
 8001444:	bf00      	nop
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001458:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800145a:	f7ff ff09 	bl	8001270 <HAL_GetTick>
 800145e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001466:	b2db      	uxtb	r3, r3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d008      	beq.n	800147e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2280      	movs	r2, #128	; 0x80
 8001470:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e052      	b.n	8001524 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f022 0216 	bic.w	r2, r2, #22
 800148c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	695a      	ldr	r2, [r3, #20]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800149c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d103      	bne.n	80014ae <HAL_DMA_Abort+0x62>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d007      	beq.n	80014be <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f022 0208 	bic.w	r2, r2, #8
 80014bc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f022 0201 	bic.w	r2, r2, #1
 80014cc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014ce:	e013      	b.n	80014f8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014d0:	f7ff fece 	bl	8001270 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b05      	cmp	r3, #5
 80014dc:	d90c      	bls.n	80014f8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2220      	movs	r2, #32
 80014e2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2203      	movs	r2, #3
 80014e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2200      	movs	r2, #0
 80014f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e015      	b.n	8001524 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1e4      	bne.n	80014d0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800150a:	223f      	movs	r2, #63	; 0x3f
 800150c:	409a      	lsls	r2, r3
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2201      	movs	r2, #1
 8001516:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2200      	movs	r2, #0
 800151e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001522:	2300      	movs	r3, #0
}
 8001524:	4618      	mov	r0, r3
 8001526:	3710      	adds	r7, #16
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800153a:	b2db      	uxtb	r3, r3
 800153c:	2b02      	cmp	r3, #2
 800153e:	d004      	beq.n	800154a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2280      	movs	r2, #128	; 0x80
 8001544:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e00c      	b.n	8001564 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2205      	movs	r2, #5
 800154e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f022 0201 	bic.w	r2, r2, #1
 8001560:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001562:	2300      	movs	r3, #0
}
 8001564:	4618      	mov	r0, r3
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800157e:	b2db      	uxtb	r3, r3
}
 8001580:	4618      	mov	r0, r3
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001598:	4618      	mov	r0, r3
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b089      	sub	sp, #36	; 0x24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015ae:	2300      	movs	r3, #0
 80015b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015b2:	2300      	movs	r3, #0
 80015b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ba:	2300      	movs	r3, #0
 80015bc:	61fb      	str	r3, [r7, #28]
 80015be:	e16b      	b.n	8001898 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015c0:	2201      	movs	r2, #1
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	697a      	ldr	r2, [r7, #20]
 80015d0:	4013      	ands	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	429a      	cmp	r2, r3
 80015da:	f040 815a 	bne.w	8001892 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f003 0303 	and.w	r3, r3, #3
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d005      	beq.n	80015f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d130      	bne.n	8001658 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	2203      	movs	r2, #3
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	43db      	mvns	r3, r3
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	4013      	ands	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	68da      	ldr	r2, [r3, #12]
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	4313      	orrs	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800162c:	2201      	movs	r2, #1
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	43db      	mvns	r3, r3
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4013      	ands	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	091b      	lsrs	r3, r3, #4
 8001642:	f003 0201 	and.w	r2, r3, #1
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	4313      	orrs	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f003 0303 	and.w	r3, r3, #3
 8001660:	2b03      	cmp	r3, #3
 8001662:	d017      	beq.n	8001694 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	2203      	movs	r2, #3
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	43db      	mvns	r3, r3
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	4013      	ands	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	689a      	ldr	r2, [r3, #8]
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	4313      	orrs	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f003 0303 	and.w	r3, r3, #3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d123      	bne.n	80016e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	08da      	lsrs	r2, r3, #3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	3208      	adds	r2, #8
 80016a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	f003 0307 	and.w	r3, r3, #7
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	220f      	movs	r2, #15
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	43db      	mvns	r3, r3
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	4013      	ands	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	691a      	ldr	r2, [r3, #16]
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	08da      	lsrs	r2, r3, #3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	3208      	adds	r2, #8
 80016e2:	69b9      	ldr	r1, [r7, #24]
 80016e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	2203      	movs	r2, #3
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	43db      	mvns	r3, r3
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	4013      	ands	r3, r2
 80016fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f003 0203 	and.w	r2, r3, #3
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	4313      	orrs	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001724:	2b00      	cmp	r3, #0
 8001726:	f000 80b4 	beq.w	8001892 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	4b60      	ldr	r3, [pc, #384]	; (80018b0 <HAL_GPIO_Init+0x30c>)
 8001730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001732:	4a5f      	ldr	r2, [pc, #380]	; (80018b0 <HAL_GPIO_Init+0x30c>)
 8001734:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001738:	6453      	str	r3, [r2, #68]	; 0x44
 800173a:	4b5d      	ldr	r3, [pc, #372]	; (80018b0 <HAL_GPIO_Init+0x30c>)
 800173c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001746:	4a5b      	ldr	r2, [pc, #364]	; (80018b4 <HAL_GPIO_Init+0x310>)
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	089b      	lsrs	r3, r3, #2
 800174c:	3302      	adds	r3, #2
 800174e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001752:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	f003 0303 	and.w	r3, r3, #3
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	220f      	movs	r2, #15
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	43db      	mvns	r3, r3
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	4013      	ands	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a52      	ldr	r2, [pc, #328]	; (80018b8 <HAL_GPIO_Init+0x314>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d02b      	beq.n	80017ca <HAL_GPIO_Init+0x226>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a51      	ldr	r2, [pc, #324]	; (80018bc <HAL_GPIO_Init+0x318>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d025      	beq.n	80017c6 <HAL_GPIO_Init+0x222>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a50      	ldr	r2, [pc, #320]	; (80018c0 <HAL_GPIO_Init+0x31c>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d01f      	beq.n	80017c2 <HAL_GPIO_Init+0x21e>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a4f      	ldr	r2, [pc, #316]	; (80018c4 <HAL_GPIO_Init+0x320>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d019      	beq.n	80017be <HAL_GPIO_Init+0x21a>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a4e      	ldr	r2, [pc, #312]	; (80018c8 <HAL_GPIO_Init+0x324>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d013      	beq.n	80017ba <HAL_GPIO_Init+0x216>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a4d      	ldr	r2, [pc, #308]	; (80018cc <HAL_GPIO_Init+0x328>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d00d      	beq.n	80017b6 <HAL_GPIO_Init+0x212>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a4c      	ldr	r2, [pc, #304]	; (80018d0 <HAL_GPIO_Init+0x32c>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d007      	beq.n	80017b2 <HAL_GPIO_Init+0x20e>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a4b      	ldr	r2, [pc, #300]	; (80018d4 <HAL_GPIO_Init+0x330>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d101      	bne.n	80017ae <HAL_GPIO_Init+0x20a>
 80017aa:	2307      	movs	r3, #7
 80017ac:	e00e      	b.n	80017cc <HAL_GPIO_Init+0x228>
 80017ae:	2308      	movs	r3, #8
 80017b0:	e00c      	b.n	80017cc <HAL_GPIO_Init+0x228>
 80017b2:	2306      	movs	r3, #6
 80017b4:	e00a      	b.n	80017cc <HAL_GPIO_Init+0x228>
 80017b6:	2305      	movs	r3, #5
 80017b8:	e008      	b.n	80017cc <HAL_GPIO_Init+0x228>
 80017ba:	2304      	movs	r3, #4
 80017bc:	e006      	b.n	80017cc <HAL_GPIO_Init+0x228>
 80017be:	2303      	movs	r3, #3
 80017c0:	e004      	b.n	80017cc <HAL_GPIO_Init+0x228>
 80017c2:	2302      	movs	r3, #2
 80017c4:	e002      	b.n	80017cc <HAL_GPIO_Init+0x228>
 80017c6:	2301      	movs	r3, #1
 80017c8:	e000      	b.n	80017cc <HAL_GPIO_Init+0x228>
 80017ca:	2300      	movs	r3, #0
 80017cc:	69fa      	ldr	r2, [r7, #28]
 80017ce:	f002 0203 	and.w	r2, r2, #3
 80017d2:	0092      	lsls	r2, r2, #2
 80017d4:	4093      	lsls	r3, r2
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	4313      	orrs	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017dc:	4935      	ldr	r1, [pc, #212]	; (80018b4 <HAL_GPIO_Init+0x310>)
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	089b      	lsrs	r3, r3, #2
 80017e2:	3302      	adds	r3, #2
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017ea:	4b3b      	ldr	r3, [pc, #236]	; (80018d8 <HAL_GPIO_Init+0x334>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	43db      	mvns	r3, r3
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	4013      	ands	r3, r2
 80017f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d003      	beq.n	800180e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	4313      	orrs	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800180e:	4a32      	ldr	r2, [pc, #200]	; (80018d8 <HAL_GPIO_Init+0x334>)
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001814:	4b30      	ldr	r3, [pc, #192]	; (80018d8 <HAL_GPIO_Init+0x334>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	43db      	mvns	r3, r3
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	4013      	ands	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d003      	beq.n	8001838 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	4313      	orrs	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001838:	4a27      	ldr	r2, [pc, #156]	; (80018d8 <HAL_GPIO_Init+0x334>)
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800183e:	4b26      	ldr	r3, [pc, #152]	; (80018d8 <HAL_GPIO_Init+0x334>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	43db      	mvns	r3, r3
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	4013      	ands	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d003      	beq.n	8001862 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	4313      	orrs	r3, r2
 8001860:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001862:	4a1d      	ldr	r2, [pc, #116]	; (80018d8 <HAL_GPIO_Init+0x334>)
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001868:	4b1b      	ldr	r3, [pc, #108]	; (80018d8 <HAL_GPIO_Init+0x334>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	43db      	mvns	r3, r3
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4013      	ands	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d003      	beq.n	800188c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	4313      	orrs	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800188c:	4a12      	ldr	r2, [pc, #72]	; (80018d8 <HAL_GPIO_Init+0x334>)
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	3301      	adds	r3, #1
 8001896:	61fb      	str	r3, [r7, #28]
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	2b0f      	cmp	r3, #15
 800189c:	f67f ae90 	bls.w	80015c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018a0:	bf00      	nop
 80018a2:	bf00      	nop
 80018a4:	3724      	adds	r7, #36	; 0x24
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	40023800 	.word	0x40023800
 80018b4:	40013800 	.word	0x40013800
 80018b8:	40020000 	.word	0x40020000
 80018bc:	40020400 	.word	0x40020400
 80018c0:	40020800 	.word	0x40020800
 80018c4:	40020c00 	.word	0x40020c00
 80018c8:	40021000 	.word	0x40021000
 80018cc:	40021400 	.word	0x40021400
 80018d0:	40021800 	.word	0x40021800
 80018d4:	40021c00 	.word	0x40021c00
 80018d8:	40013c00 	.word	0x40013c00

080018dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	460b      	mov	r3, r1
 80018e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	691a      	ldr	r2, [r3, #16]
 80018ec:	887b      	ldrh	r3, [r7, #2]
 80018ee:	4013      	ands	r3, r2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d002      	beq.n	80018fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018f4:	2301      	movs	r3, #1
 80018f6:	73fb      	strb	r3, [r7, #15]
 80018f8:	e001      	b.n	80018fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018fa:	2300      	movs	r3, #0
 80018fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001900:	4618      	mov	r0, r3
 8001902:	3714      	adds	r7, #20
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	460b      	mov	r3, r1
 8001916:	807b      	strh	r3, [r7, #2]
 8001918:	4613      	mov	r3, r2
 800191a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800191c:	787b      	ldrb	r3, [r7, #1]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d003      	beq.n	800192a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001922:	887a      	ldrh	r2, [r7, #2]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001928:	e003      	b.n	8001932 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800192a:	887b      	ldrh	r3, [r7, #2]
 800192c:	041a      	lsls	r2, r3, #16
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	619a      	str	r2, [r3, #24]
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
	...

08001940 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d101      	bne.n	8001952 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e12b      	b.n	8001baa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001958:	b2db      	uxtb	r3, r3
 800195a:	2b00      	cmp	r3, #0
 800195c:	d106      	bne.n	800196c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff f918 	bl	8000b9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2224      	movs	r2, #36	; 0x24
 8001970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f022 0201 	bic.w	r2, r2, #1
 8001982:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001992:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80019a4:	f003 f87e 	bl	8004aa4 <HAL_RCC_GetPCLK1Freq>
 80019a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	4a81      	ldr	r2, [pc, #516]	; (8001bb4 <HAL_I2C_Init+0x274>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d807      	bhi.n	80019c4 <HAL_I2C_Init+0x84>
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	4a80      	ldr	r2, [pc, #512]	; (8001bb8 <HAL_I2C_Init+0x278>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	bf94      	ite	ls
 80019bc:	2301      	movls	r3, #1
 80019be:	2300      	movhi	r3, #0
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	e006      	b.n	80019d2 <HAL_I2C_Init+0x92>
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	4a7d      	ldr	r2, [pc, #500]	; (8001bbc <HAL_I2C_Init+0x27c>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	bf94      	ite	ls
 80019cc:	2301      	movls	r3, #1
 80019ce:	2300      	movhi	r3, #0
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e0e7      	b.n	8001baa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	4a78      	ldr	r2, [pc, #480]	; (8001bc0 <HAL_I2C_Init+0x280>)
 80019de:	fba2 2303 	umull	r2, r3, r2, r3
 80019e2:	0c9b      	lsrs	r3, r3, #18
 80019e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	68ba      	ldr	r2, [r7, #8]
 80019f6:	430a      	orrs	r2, r1
 80019f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	6a1b      	ldr	r3, [r3, #32]
 8001a00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	4a6a      	ldr	r2, [pc, #424]	; (8001bb4 <HAL_I2C_Init+0x274>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d802      	bhi.n	8001a14 <HAL_I2C_Init+0xd4>
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	3301      	adds	r3, #1
 8001a12:	e009      	b.n	8001a28 <HAL_I2C_Init+0xe8>
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a1a:	fb02 f303 	mul.w	r3, r2, r3
 8001a1e:	4a69      	ldr	r2, [pc, #420]	; (8001bc4 <HAL_I2C_Init+0x284>)
 8001a20:	fba2 2303 	umull	r2, r3, r2, r3
 8001a24:	099b      	lsrs	r3, r3, #6
 8001a26:	3301      	adds	r3, #1
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	6812      	ldr	r2, [r2, #0]
 8001a2c:	430b      	orrs	r3, r1
 8001a2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	69db      	ldr	r3, [r3, #28]
 8001a36:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001a3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	495c      	ldr	r1, [pc, #368]	; (8001bb4 <HAL_I2C_Init+0x274>)
 8001a44:	428b      	cmp	r3, r1
 8001a46:	d819      	bhi.n	8001a7c <HAL_I2C_Init+0x13c>
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	1e59      	subs	r1, r3, #1
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a56:	1c59      	adds	r1, r3, #1
 8001a58:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001a5c:	400b      	ands	r3, r1
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d00a      	beq.n	8001a78 <HAL_I2C_Init+0x138>
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	1e59      	subs	r1, r3, #1
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a70:	3301      	adds	r3, #1
 8001a72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a76:	e051      	b.n	8001b1c <HAL_I2C_Init+0x1dc>
 8001a78:	2304      	movs	r3, #4
 8001a7a:	e04f      	b.n	8001b1c <HAL_I2C_Init+0x1dc>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d111      	bne.n	8001aa8 <HAL_I2C_Init+0x168>
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	1e58      	subs	r0, r3, #1
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6859      	ldr	r1, [r3, #4]
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	440b      	add	r3, r1
 8001a92:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a96:	3301      	adds	r3, #1
 8001a98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	bf0c      	ite	eq
 8001aa0:	2301      	moveq	r3, #1
 8001aa2:	2300      	movne	r3, #0
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	e012      	b.n	8001ace <HAL_I2C_Init+0x18e>
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	1e58      	subs	r0, r3, #1
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6859      	ldr	r1, [r3, #4]
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	440b      	add	r3, r1
 8001ab6:	0099      	lsls	r1, r3, #2
 8001ab8:	440b      	add	r3, r1
 8001aba:	fbb0 f3f3 	udiv	r3, r0, r3
 8001abe:	3301      	adds	r3, #1
 8001ac0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	bf0c      	ite	eq
 8001ac8:	2301      	moveq	r3, #1
 8001aca:	2300      	movne	r3, #0
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <HAL_I2C_Init+0x196>
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e022      	b.n	8001b1c <HAL_I2C_Init+0x1dc>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d10e      	bne.n	8001afc <HAL_I2C_Init+0x1bc>
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	1e58      	subs	r0, r3, #1
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6859      	ldr	r1, [r3, #4]
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	440b      	add	r3, r1
 8001aec:	fbb0 f3f3 	udiv	r3, r0, r3
 8001af0:	3301      	adds	r3, #1
 8001af2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001af6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001afa:	e00f      	b.n	8001b1c <HAL_I2C_Init+0x1dc>
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	1e58      	subs	r0, r3, #1
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6859      	ldr	r1, [r3, #4]
 8001b04:	460b      	mov	r3, r1
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	440b      	add	r3, r1
 8001b0a:	0099      	lsls	r1, r3, #2
 8001b0c:	440b      	add	r3, r1
 8001b0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b12:	3301      	adds	r3, #1
 8001b14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b1c:	6879      	ldr	r1, [r7, #4]
 8001b1e:	6809      	ldr	r1, [r1, #0]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	69da      	ldr	r2, [r3, #28]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a1b      	ldr	r3, [r3, #32]
 8001b36:	431a      	orrs	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001b4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	6911      	ldr	r1, [r2, #16]
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	68d2      	ldr	r2, [r2, #12]
 8001b56:	4311      	orrs	r1, r2
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	6812      	ldr	r2, [r2, #0]
 8001b5c:	430b      	orrs	r3, r1
 8001b5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	695a      	ldr	r2, [r3, #20]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	699b      	ldr	r3, [r3, #24]
 8001b72:	431a      	orrs	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f042 0201 	orr.w	r2, r2, #1
 8001b8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2220      	movs	r2, #32
 8001b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	000186a0 	.word	0x000186a0
 8001bb8:	001e847f 	.word	0x001e847f
 8001bbc:	003d08ff 	.word	0x003d08ff
 8001bc0:	431bde83 	.word	0x431bde83
 8001bc4:	10624dd3 	.word	0x10624dd3

08001bc8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b088      	sub	sp, #32
 8001bcc:	af02      	add	r7, sp, #8
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	607a      	str	r2, [r7, #4]
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	817b      	strh	r3, [r7, #10]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001bdc:	f7ff fb48 	bl	8001270 <HAL_GetTick>
 8001be0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b20      	cmp	r3, #32
 8001bec:	f040 80e0 	bne.w	8001db0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	9300      	str	r3, [sp, #0]
 8001bf4:	2319      	movs	r3, #25
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	4970      	ldr	r1, [pc, #448]	; (8001dbc <HAL_I2C_Master_Transmit+0x1f4>)
 8001bfa:	68f8      	ldr	r0, [r7, #12]
 8001bfc:	f002 f8dc 	bl	8003db8 <I2C_WaitOnFlagUntilTimeout>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001c06:	2302      	movs	r3, #2
 8001c08:	e0d3      	b.n	8001db2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d101      	bne.n	8001c18 <HAL_I2C_Master_Transmit+0x50>
 8001c14:	2302      	movs	r3, #2
 8001c16:	e0cc      	b.n	8001db2 <HAL_I2C_Master_Transmit+0x1ea>
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d007      	beq.n	8001c3e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f042 0201 	orr.w	r2, r2, #1
 8001c3c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c4c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2221      	movs	r2, #33	; 0x21
 8001c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2210      	movs	r2, #16
 8001c5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2200      	movs	r2, #0
 8001c62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	893a      	ldrh	r2, [r7, #8]
 8001c6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c74:	b29a      	uxth	r2, r3
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	4a50      	ldr	r2, [pc, #320]	; (8001dc0 <HAL_I2C_Master_Transmit+0x1f8>)
 8001c7e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c80:	8979      	ldrh	r1, [r7, #10]
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	6a3a      	ldr	r2, [r7, #32]
 8001c86:	68f8      	ldr	r0, [r7, #12]
 8001c88:	f001 fe9e 	bl	80039c8 <I2C_MasterRequestWrite>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e08d      	b.n	8001db2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c96:	2300      	movs	r3, #0
 8001c98:	613b      	str	r3, [r7, #16]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	695b      	ldr	r3, [r3, #20]
 8001ca0:	613b      	str	r3, [r7, #16]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	613b      	str	r3, [r7, #16]
 8001caa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001cac:	e066      	b.n	8001d7c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	6a39      	ldr	r1, [r7, #32]
 8001cb2:	68f8      	ldr	r0, [r7, #12]
 8001cb4:	f002 f956 	bl	8003f64 <I2C_WaitOnTXEFlagUntilTimeout>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d00d      	beq.n	8001cda <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	2b04      	cmp	r3, #4
 8001cc4:	d107      	bne.n	8001cd6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cd4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e06b      	b.n	8001db2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cde:	781a      	ldrb	r2, [r3, #0]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cea:	1c5a      	adds	r2, r3, #1
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d02:	3b01      	subs	r3, #1
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	695b      	ldr	r3, [r3, #20]
 8001d10:	f003 0304 	and.w	r3, r3, #4
 8001d14:	2b04      	cmp	r3, #4
 8001d16:	d11b      	bne.n	8001d50 <HAL_I2C_Master_Transmit+0x188>
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d017      	beq.n	8001d50 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d24:	781a      	ldrb	r2, [r3, #0]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d30:	1c5a      	adds	r2, r3, #1
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d48:	3b01      	subs	r3, #1
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d50:	697a      	ldr	r2, [r7, #20]
 8001d52:	6a39      	ldr	r1, [r7, #32]
 8001d54:	68f8      	ldr	r0, [r7, #12]
 8001d56:	f002 f946 	bl	8003fe6 <I2C_WaitOnBTFFlagUntilTimeout>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d00d      	beq.n	8001d7c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d64:	2b04      	cmp	r3, #4
 8001d66:	d107      	bne.n	8001d78 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d76:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e01a      	b.n	8001db2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d194      	bne.n	8001cae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2220      	movs	r2, #32
 8001d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001dac:	2300      	movs	r3, #0
 8001dae:	e000      	b.n	8001db2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001db0:	2302      	movs	r3, #2
  }
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3718      	adds	r7, #24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	00100002 	.word	0x00100002
 8001dc0:	ffff0000 	.word	0xffff0000

08001dc4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b08c      	sub	sp, #48	; 0x30
 8001dc8:	af02      	add	r7, sp, #8
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	607a      	str	r2, [r7, #4]
 8001dce:	461a      	mov	r2, r3
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	817b      	strh	r3, [r7, #10]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001dd8:	f7ff fa4a 	bl	8001270 <HAL_GetTick>
 8001ddc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b20      	cmp	r3, #32
 8001de8:	f040 820b 	bne.w	8002202 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dee:	9300      	str	r3, [sp, #0]
 8001df0:	2319      	movs	r3, #25
 8001df2:	2201      	movs	r2, #1
 8001df4:	497c      	ldr	r1, [pc, #496]	; (8001fe8 <HAL_I2C_Master_Receive+0x224>)
 8001df6:	68f8      	ldr	r0, [r7, #12]
 8001df8:	f001 ffde 	bl	8003db8 <I2C_WaitOnFlagUntilTimeout>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001e02:	2302      	movs	r3, #2
 8001e04:	e1fe      	b.n	8002204 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d101      	bne.n	8001e14 <HAL_I2C_Master_Receive+0x50>
 8001e10:	2302      	movs	r3, #2
 8001e12:	e1f7      	b.n	8002204 <HAL_I2C_Master_Receive+0x440>
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d007      	beq.n	8001e3a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f042 0201 	orr.w	r2, r2, #1
 8001e38:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e48:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2222      	movs	r2, #34	; 0x22
 8001e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2210      	movs	r2, #16
 8001e56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	893a      	ldrh	r2, [r7, #8]
 8001e6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	4a5c      	ldr	r2, [pc, #368]	; (8001fec <HAL_I2C_Master_Receive+0x228>)
 8001e7a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001e7c:	8979      	ldrh	r1, [r7, #10]
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e82:	68f8      	ldr	r0, [r7, #12]
 8001e84:	f001 fe22 	bl	8003acc <I2C_MasterRequestRead>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e1b8      	b.n	8002204 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d113      	bne.n	8001ec2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	623b      	str	r3, [r7, #32]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	695b      	ldr	r3, [r3, #20]
 8001ea4:	623b      	str	r3, [r7, #32]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	623b      	str	r3, [r7, #32]
 8001eae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	e18c      	b.n	80021dc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d11b      	bne.n	8001f02 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ed8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001eda:	2300      	movs	r3, #0
 8001edc:	61fb      	str	r3, [r7, #28]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	61fb      	str	r3, [r7, #28]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	61fb      	str	r3, [r7, #28]
 8001eee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	e16c      	b.n	80021dc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d11b      	bne.n	8001f42 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f18:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61bb      	str	r3, [r7, #24]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	695b      	ldr	r3, [r3, #20]
 8001f34:	61bb      	str	r3, [r7, #24]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	61bb      	str	r3, [r7, #24]
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	e14c      	b.n	80021dc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f50:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f52:	2300      	movs	r3, #0
 8001f54:	617b      	str	r3, [r7, #20]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	695b      	ldr	r3, [r3, #20]
 8001f5c:	617b      	str	r3, [r7, #20]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	617b      	str	r3, [r7, #20]
 8001f66:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001f68:	e138      	b.n	80021dc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f6e:	2b03      	cmp	r3, #3
 8001f70:	f200 80f1 	bhi.w	8002156 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d123      	bne.n	8001fc4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f80:	68f8      	ldr	r0, [r7, #12]
 8001f82:	f002 f8a3 	bl	80040cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e139      	b.n	8002204 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	691a      	ldr	r2, [r3, #16]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9a:	b2d2      	uxtb	r2, r2
 8001f9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa2:	1c5a      	adds	r2, r3, #1
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fac:	3b01      	subs	r3, #1
 8001fae:	b29a      	uxth	r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	b29a      	uxth	r2, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001fc2:	e10b      	b.n	80021dc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d14e      	bne.n	800206a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fce:	9300      	str	r3, [sp, #0]
 8001fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	4906      	ldr	r1, [pc, #24]	; (8001ff0 <HAL_I2C_Master_Receive+0x22c>)
 8001fd6:	68f8      	ldr	r0, [r7, #12]
 8001fd8:	f001 feee 	bl	8003db8 <I2C_WaitOnFlagUntilTimeout>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d008      	beq.n	8001ff4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e10e      	b.n	8002204 <HAL_I2C_Master_Receive+0x440>
 8001fe6:	bf00      	nop
 8001fe8:	00100002 	.word	0x00100002
 8001fec:	ffff0000 	.word	0xffff0000
 8001ff0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002002:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	691a      	ldr	r2, [r3, #16]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200e:	b2d2      	uxtb	r2, r2
 8002010:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002016:	1c5a      	adds	r2, r3, #1
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002020:	3b01      	subs	r3, #1
 8002022:	b29a      	uxth	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800202c:	b29b      	uxth	r3, r3
 800202e:	3b01      	subs	r3, #1
 8002030:	b29a      	uxth	r2, r3
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	691a      	ldr	r2, [r3, #16]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002040:	b2d2      	uxtb	r2, r2
 8002042:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002048:	1c5a      	adds	r2, r3, #1
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002052:	3b01      	subs	r3, #1
 8002054:	b29a      	uxth	r2, r3
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800205e:	b29b      	uxth	r3, r3
 8002060:	3b01      	subs	r3, #1
 8002062:	b29a      	uxth	r2, r3
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002068:	e0b8      	b.n	80021dc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206c:	9300      	str	r3, [sp, #0]
 800206e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002070:	2200      	movs	r2, #0
 8002072:	4966      	ldr	r1, [pc, #408]	; (800220c <HAL_I2C_Master_Receive+0x448>)
 8002074:	68f8      	ldr	r0, [r7, #12]
 8002076:	f001 fe9f 	bl	8003db8 <I2C_WaitOnFlagUntilTimeout>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e0bf      	b.n	8002204 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002092:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	691a      	ldr	r2, [r3, #16]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209e:	b2d2      	uxtb	r2, r2
 80020a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a6:	1c5a      	adds	r2, r3, #1
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020b0:	3b01      	subs	r3, #1
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020bc:	b29b      	uxth	r3, r3
 80020be:	3b01      	subs	r3, #1
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c8:	9300      	str	r3, [sp, #0]
 80020ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020cc:	2200      	movs	r2, #0
 80020ce:	494f      	ldr	r1, [pc, #316]	; (800220c <HAL_I2C_Master_Receive+0x448>)
 80020d0:	68f8      	ldr	r0, [r7, #12]
 80020d2:	f001 fe71 	bl	8003db8 <I2C_WaitOnFlagUntilTimeout>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e091      	b.n	8002204 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	691a      	ldr	r2, [r3, #16]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fa:	b2d2      	uxtb	r2, r2
 80020fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002102:	1c5a      	adds	r2, r3, #1
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800210c:	3b01      	subs	r3, #1
 800210e:	b29a      	uxth	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002118:	b29b      	uxth	r3, r3
 800211a:	3b01      	subs	r3, #1
 800211c:	b29a      	uxth	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	691a      	ldr	r2, [r3, #16]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212c:	b2d2      	uxtb	r2, r2
 800212e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002134:	1c5a      	adds	r2, r3, #1
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800213e:	3b01      	subs	r3, #1
 8002140:	b29a      	uxth	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800214a:	b29b      	uxth	r3, r3
 800214c:	3b01      	subs	r3, #1
 800214e:	b29a      	uxth	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002154:	e042      	b.n	80021dc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002158:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	f001 ffb6 	bl	80040cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e04c      	b.n	8002204 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	691a      	ldr	r2, [r3, #16]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002174:	b2d2      	uxtb	r2, r2
 8002176:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217c:	1c5a      	adds	r2, r3, #1
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002186:	3b01      	subs	r3, #1
 8002188:	b29a      	uxth	r2, r3
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002192:	b29b      	uxth	r3, r3
 8002194:	3b01      	subs	r3, #1
 8002196:	b29a      	uxth	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	f003 0304 	and.w	r3, r3, #4
 80021a6:	2b04      	cmp	r3, #4
 80021a8:	d118      	bne.n	80021dc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	691a      	ldr	r2, [r3, #16]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b4:	b2d2      	uxtb	r2, r2
 80021b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021bc:	1c5a      	adds	r2, r3, #1
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021c6:	3b01      	subs	r3, #1
 80021c8:	b29a      	uxth	r2, r3
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	3b01      	subs	r3, #1
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	f47f aec2 	bne.w	8001f6a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2220      	movs	r2, #32
 80021ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80021fe:	2300      	movs	r3, #0
 8002200:	e000      	b.n	8002204 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002202:	2302      	movs	r3, #2
  }
}
 8002204:	4618      	mov	r0, r3
 8002206:	3728      	adds	r7, #40	; 0x28
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	00010004 	.word	0x00010004

08002210 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b088      	sub	sp, #32
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002218:	2300      	movs	r3, #0
 800221a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002228:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002230:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002238:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800223a:	7bfb      	ldrb	r3, [r7, #15]
 800223c:	2b10      	cmp	r3, #16
 800223e:	d003      	beq.n	8002248 <HAL_I2C_EV_IRQHandler+0x38>
 8002240:	7bfb      	ldrb	r3, [r7, #15]
 8002242:	2b40      	cmp	r3, #64	; 0x40
 8002244:	f040 80c1 	bne.w	80023ca <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b00      	cmp	r3, #0
 8002260:	d10d      	bne.n	800227e <HAL_I2C_EV_IRQHandler+0x6e>
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002268:	d003      	beq.n	8002272 <HAL_I2C_EV_IRQHandler+0x62>
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002270:	d101      	bne.n	8002276 <HAL_I2C_EV_IRQHandler+0x66>
 8002272:	2301      	movs	r3, #1
 8002274:	e000      	b.n	8002278 <HAL_I2C_EV_IRQHandler+0x68>
 8002276:	2300      	movs	r3, #0
 8002278:	2b01      	cmp	r3, #1
 800227a:	f000 8132 	beq.w	80024e2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	f003 0301 	and.w	r3, r3, #1
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00c      	beq.n	80022a2 <HAL_I2C_EV_IRQHandler+0x92>
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	0a5b      	lsrs	r3, r3, #9
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b00      	cmp	r3, #0
 8002292:	d006      	beq.n	80022a2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f001 ff9e 	bl	80041d6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 fd79 	bl	8002d92 <I2C_Master_SB>
 80022a0:	e092      	b.n	80023c8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	08db      	lsrs	r3, r3, #3
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d009      	beq.n	80022c2 <HAL_I2C_EV_IRQHandler+0xb2>
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	0a5b      	lsrs	r3, r3, #9
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d003      	beq.n	80022c2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 fdef 	bl	8002e9e <I2C_Master_ADD10>
 80022c0:	e082      	b.n	80023c8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	085b      	lsrs	r3, r3, #1
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d009      	beq.n	80022e2 <HAL_I2C_EV_IRQHandler+0xd2>
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	0a5b      	lsrs	r3, r3, #9
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d003      	beq.n	80022e2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 fe09 	bl	8002ef2 <I2C_Master_ADDR>
 80022e0:	e072      	b.n	80023c8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	089b      	lsrs	r3, r3, #2
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d03b      	beq.n	8002366 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022fc:	f000 80f3 	beq.w	80024e6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	09db      	lsrs	r3, r3, #7
 8002304:	f003 0301 	and.w	r3, r3, #1
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00f      	beq.n	800232c <HAL_I2C_EV_IRQHandler+0x11c>
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	0a9b      	lsrs	r3, r3, #10
 8002310:	f003 0301 	and.w	r3, r3, #1
 8002314:	2b00      	cmp	r3, #0
 8002316:	d009      	beq.n	800232c <HAL_I2C_EV_IRQHandler+0x11c>
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	089b      	lsrs	r3, r3, #2
 800231c:	f003 0301 	and.w	r3, r3, #1
 8002320:	2b00      	cmp	r3, #0
 8002322:	d103      	bne.n	800232c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f000 f9f3 	bl	8002710 <I2C_MasterTransmit_TXE>
 800232a:	e04d      	b.n	80023c8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	089b      	lsrs	r3, r3, #2
 8002330:	f003 0301 	and.w	r3, r3, #1
 8002334:	2b00      	cmp	r3, #0
 8002336:	f000 80d6 	beq.w	80024e6 <HAL_I2C_EV_IRQHandler+0x2d6>
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	0a5b      	lsrs	r3, r3, #9
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b00      	cmp	r3, #0
 8002344:	f000 80cf 	beq.w	80024e6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002348:	7bbb      	ldrb	r3, [r7, #14]
 800234a:	2b21      	cmp	r3, #33	; 0x21
 800234c:	d103      	bne.n	8002356 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f000 fa7a 	bl	8002848 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002354:	e0c7      	b.n	80024e6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002356:	7bfb      	ldrb	r3, [r7, #15]
 8002358:	2b40      	cmp	r3, #64	; 0x40
 800235a:	f040 80c4 	bne.w	80024e6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 fae8 	bl	8002934 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002364:	e0bf      	b.n	80024e6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002370:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002374:	f000 80b7 	beq.w	80024e6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	099b      	lsrs	r3, r3, #6
 800237c:	f003 0301 	and.w	r3, r3, #1
 8002380:	2b00      	cmp	r3, #0
 8002382:	d00f      	beq.n	80023a4 <HAL_I2C_EV_IRQHandler+0x194>
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	0a9b      	lsrs	r3, r3, #10
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	2b00      	cmp	r3, #0
 800238e:	d009      	beq.n	80023a4 <HAL_I2C_EV_IRQHandler+0x194>
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	089b      	lsrs	r3, r3, #2
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	2b00      	cmp	r3, #0
 800239a:	d103      	bne.n	80023a4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f000 fb5d 	bl	8002a5c <I2C_MasterReceive_RXNE>
 80023a2:	e011      	b.n	80023c8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	089b      	lsrs	r3, r3, #2
 80023a8:	f003 0301 	and.w	r3, r3, #1
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f000 809a 	beq.w	80024e6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	0a5b      	lsrs	r3, r3, #9
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f000 8093 	beq.w	80024e6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f000 fbfc 	bl	8002bbe <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80023c6:	e08e      	b.n	80024e6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80023c8:	e08d      	b.n	80024e6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d004      	beq.n	80023dc <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	695b      	ldr	r3, [r3, #20]
 80023d8:	61fb      	str	r3, [r7, #28]
 80023da:	e007      	b.n	80023ec <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	699b      	ldr	r3, [r3, #24]
 80023e2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	695b      	ldr	r3, [r3, #20]
 80023ea:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	085b      	lsrs	r3, r3, #1
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d012      	beq.n	800241e <HAL_I2C_EV_IRQHandler+0x20e>
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	0a5b      	lsrs	r3, r3, #9
 80023fc:	f003 0301 	and.w	r3, r3, #1
 8002400:	2b00      	cmp	r3, #0
 8002402:	d00c      	beq.n	800241e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002408:	2b00      	cmp	r3, #0
 800240a:	d003      	beq.n	8002414 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002414:	69b9      	ldr	r1, [r7, #24]
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 ffba 	bl	8003390 <I2C_Slave_ADDR>
 800241c:	e066      	b.n	80024ec <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	091b      	lsrs	r3, r3, #4
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b00      	cmp	r3, #0
 8002428:	d009      	beq.n	800243e <HAL_I2C_EV_IRQHandler+0x22e>
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	0a5b      	lsrs	r3, r3, #9
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b00      	cmp	r3, #0
 8002434:	d003      	beq.n	800243e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f000 fff4 	bl	8003424 <I2C_Slave_STOPF>
 800243c:	e056      	b.n	80024ec <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800243e:	7bbb      	ldrb	r3, [r7, #14]
 8002440:	2b21      	cmp	r3, #33	; 0x21
 8002442:	d002      	beq.n	800244a <HAL_I2C_EV_IRQHandler+0x23a>
 8002444:	7bbb      	ldrb	r3, [r7, #14]
 8002446:	2b29      	cmp	r3, #41	; 0x29
 8002448:	d125      	bne.n	8002496 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	09db      	lsrs	r3, r3, #7
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00f      	beq.n	8002476 <HAL_I2C_EV_IRQHandler+0x266>
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	0a9b      	lsrs	r3, r3, #10
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	2b00      	cmp	r3, #0
 8002460:	d009      	beq.n	8002476 <HAL_I2C_EV_IRQHandler+0x266>
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	089b      	lsrs	r3, r3, #2
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	2b00      	cmp	r3, #0
 800246c:	d103      	bne.n	8002476 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 fed0 	bl	8003214 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002474:	e039      	b.n	80024ea <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	089b      	lsrs	r3, r3, #2
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b00      	cmp	r3, #0
 8002480:	d033      	beq.n	80024ea <HAL_I2C_EV_IRQHandler+0x2da>
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	0a5b      	lsrs	r3, r3, #9
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b00      	cmp	r3, #0
 800248c:	d02d      	beq.n	80024ea <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 fefd 	bl	800328e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002494:	e029      	b.n	80024ea <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	099b      	lsrs	r3, r3, #6
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d00f      	beq.n	80024c2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	0a9b      	lsrs	r3, r3, #10
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d009      	beq.n	80024c2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	089b      	lsrs	r3, r3, #2
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d103      	bne.n	80024c2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 ff08 	bl	80032d0 <I2C_SlaveReceive_RXNE>
 80024c0:	e014      	b.n	80024ec <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	089b      	lsrs	r3, r3, #2
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00e      	beq.n	80024ec <HAL_I2C_EV_IRQHandler+0x2dc>
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	0a5b      	lsrs	r3, r3, #9
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d008      	beq.n	80024ec <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 ff36 	bl	800334c <I2C_SlaveReceive_BTF>
 80024e0:	e004      	b.n	80024ec <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80024e2:	bf00      	nop
 80024e4:	e002      	b.n	80024ec <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024e6:	bf00      	nop
 80024e8:	e000      	b.n	80024ec <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80024ea:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80024ec:	3720      	adds	r7, #32
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b08a      	sub	sp, #40	; 0x28
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	695b      	ldr	r3, [r3, #20]
 8002500:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800250a:	2300      	movs	r3, #0
 800250c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002514:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002516:	6a3b      	ldr	r3, [r7, #32]
 8002518:	0a1b      	lsrs	r3, r3, #8
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00e      	beq.n	8002540 <HAL_I2C_ER_IRQHandler+0x4e>
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	0a1b      	lsrs	r3, r3, #8
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	2b00      	cmp	r3, #0
 800252c:	d008      	beq.n	8002540 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800252e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002530:	f043 0301 	orr.w	r3, r3, #1
 8002534:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800253e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002540:	6a3b      	ldr	r3, [r7, #32]
 8002542:	0a5b      	lsrs	r3, r3, #9
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	2b00      	cmp	r3, #0
 800254a:	d00e      	beq.n	800256a <HAL_I2C_ER_IRQHandler+0x78>
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	0a1b      	lsrs	r3, r3, #8
 8002550:	f003 0301 	and.w	r3, r3, #1
 8002554:	2b00      	cmp	r3, #0
 8002556:	d008      	beq.n	800256a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255a:	f043 0302 	orr.w	r3, r3, #2
 800255e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002568:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800256a:	6a3b      	ldr	r3, [r7, #32]
 800256c:	0a9b      	lsrs	r3, r3, #10
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b00      	cmp	r3, #0
 8002574:	d03f      	beq.n	80025f6 <HAL_I2C_ER_IRQHandler+0x104>
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	0a1b      	lsrs	r3, r3, #8
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b00      	cmp	r3, #0
 8002580:	d039      	beq.n	80025f6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8002582:	7efb      	ldrb	r3, [r7, #27]
 8002584:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800258a:	b29b      	uxth	r3, r3
 800258c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002594:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800259c:	7ebb      	ldrb	r3, [r7, #26]
 800259e:	2b20      	cmp	r3, #32
 80025a0:	d112      	bne.n	80025c8 <HAL_I2C_ER_IRQHandler+0xd6>
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d10f      	bne.n	80025c8 <HAL_I2C_ER_IRQHandler+0xd6>
 80025a8:	7cfb      	ldrb	r3, [r7, #19]
 80025aa:	2b21      	cmp	r3, #33	; 0x21
 80025ac:	d008      	beq.n	80025c0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80025ae:	7cfb      	ldrb	r3, [r7, #19]
 80025b0:	2b29      	cmp	r3, #41	; 0x29
 80025b2:	d005      	beq.n	80025c0 <HAL_I2C_ER_IRQHandler+0xce>
 80025b4:	7cfb      	ldrb	r3, [r7, #19]
 80025b6:	2b28      	cmp	r3, #40	; 0x28
 80025b8:	d106      	bne.n	80025c8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2b21      	cmp	r3, #33	; 0x21
 80025be:	d103      	bne.n	80025c8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f001 f85f 	bl	8003684 <I2C_Slave_AF>
 80025c6:	e016      	b.n	80025f6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80025d0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80025d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d4:	f043 0304 	orr.w	r3, r3, #4
 80025d8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80025da:	7efb      	ldrb	r3, [r7, #27]
 80025dc:	2b10      	cmp	r3, #16
 80025de:	d002      	beq.n	80025e6 <HAL_I2C_ER_IRQHandler+0xf4>
 80025e0:	7efb      	ldrb	r3, [r7, #27]
 80025e2:	2b40      	cmp	r3, #64	; 0x40
 80025e4:	d107      	bne.n	80025f6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025f4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80025f6:	6a3b      	ldr	r3, [r7, #32]
 80025f8:	0adb      	lsrs	r3, r3, #11
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00e      	beq.n	8002620 <HAL_I2C_ER_IRQHandler+0x12e>
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	0a1b      	lsrs	r3, r3, #8
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b00      	cmp	r3, #0
 800260c:	d008      	beq.n	8002620 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	f043 0308 	orr.w	r3, r3, #8
 8002614:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800261e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002622:	2b00      	cmp	r3, #0
 8002624:	d008      	beq.n	8002638 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800262a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262c:	431a      	orrs	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f001 f896 	bl	8003764 <I2C_ITError>
  }
}
 8002638:	bf00      	nop
 800263a:	3728      	adds	r7, #40	; 0x28
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002648:	bf00      	nop
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800265c:	bf00      	nop
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002670:	bf00      	nop
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002684:	bf00      	nop
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	460b      	mov	r3, r1
 800269a:	70fb      	strb	r3, [r7, #3]
 800269c:	4613      	mov	r3, r2
 800269e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800271e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002726:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002732:	2b00      	cmp	r3, #0
 8002734:	d150      	bne.n	80027d8 <I2C_MasterTransmit_TXE+0xc8>
 8002736:	7bfb      	ldrb	r3, [r7, #15]
 8002738:	2b21      	cmp	r3, #33	; 0x21
 800273a:	d14d      	bne.n	80027d8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	2b08      	cmp	r3, #8
 8002740:	d01d      	beq.n	800277e <I2C_MasterTransmit_TXE+0x6e>
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	2b20      	cmp	r3, #32
 8002746:	d01a      	beq.n	800277e <I2C_MasterTransmit_TXE+0x6e>
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800274e:	d016      	beq.n	800277e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	685a      	ldr	r2, [r3, #4]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800275e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2211      	movs	r2, #17
 8002764:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2220      	movs	r2, #32
 8002772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f7ff ff62 	bl	8002640 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800277c:	e060      	b.n	8002840 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	685a      	ldr	r2, [r3, #4]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800278c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800279c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2220      	movs	r2, #32
 80027a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2b40      	cmp	r3, #64	; 0x40
 80027b6:	d107      	bne.n	80027c8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f7ff ff7d 	bl	80026c0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80027c6:	e03b      	b.n	8002840 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f7ff ff35 	bl	8002640 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80027d6:	e033      	b.n	8002840 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80027d8:	7bfb      	ldrb	r3, [r7, #15]
 80027da:	2b21      	cmp	r3, #33	; 0x21
 80027dc:	d005      	beq.n	80027ea <I2C_MasterTransmit_TXE+0xda>
 80027de:	7bbb      	ldrb	r3, [r7, #14]
 80027e0:	2b40      	cmp	r3, #64	; 0x40
 80027e2:	d12d      	bne.n	8002840 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80027e4:	7bfb      	ldrb	r3, [r7, #15]
 80027e6:	2b22      	cmp	r3, #34	; 0x22
 80027e8:	d12a      	bne.n	8002840 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d108      	bne.n	8002806 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	685a      	ldr	r2, [r3, #4]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002802:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002804:	e01c      	b.n	8002840 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b40      	cmp	r3, #64	; 0x40
 8002810:	d103      	bne.n	800281a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 f88e 	bl	8002934 <I2C_MemoryTransmit_TXE_BTF>
}
 8002818:	e012      	b.n	8002840 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281e:	781a      	ldrb	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282a:	1c5a      	adds	r2, r3, #1
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002834:	b29b      	uxth	r3, r3
 8002836:	3b01      	subs	r3, #1
 8002838:	b29a      	uxth	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800283e:	e7ff      	b.n	8002840 <I2C_MasterTransmit_TXE+0x130>
 8002840:	bf00      	nop
 8002842:	3710      	adds	r7, #16
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002854:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b21      	cmp	r3, #33	; 0x21
 8002860:	d164      	bne.n	800292c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002866:	b29b      	uxth	r3, r3
 8002868:	2b00      	cmp	r3, #0
 800286a:	d012      	beq.n	8002892 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002870:	781a      	ldrb	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287c:	1c5a      	adds	r2, r3, #1
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002886:	b29b      	uxth	r3, r3
 8002888:	3b01      	subs	r3, #1
 800288a:	b29a      	uxth	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002890:	e04c      	b.n	800292c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2b08      	cmp	r3, #8
 8002896:	d01d      	beq.n	80028d4 <I2C_MasterTransmit_BTF+0x8c>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2b20      	cmp	r3, #32
 800289c:	d01a      	beq.n	80028d4 <I2C_MasterTransmit_BTF+0x8c>
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028a4:	d016      	beq.n	80028d4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	685a      	ldr	r2, [r3, #4]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80028b4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2211      	movs	r2, #17
 80028ba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2220      	movs	r2, #32
 80028c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f7ff feb7 	bl	8002640 <HAL_I2C_MasterTxCpltCallback>
}
 80028d2:	e02b      	b.n	800292c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	685a      	ldr	r2, [r3, #4]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80028e2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028f2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2220      	movs	r2, #32
 80028fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b40      	cmp	r3, #64	; 0x40
 800290c:	d107      	bne.n	800291e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f7ff fed2 	bl	80026c0 <HAL_I2C_MemTxCpltCallback>
}
 800291c:	e006      	b.n	800292c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f7ff fe8a 	bl	8002640 <HAL_I2C_MasterTxCpltCallback>
}
 800292c:	bf00      	nop
 800292e:	3710      	adds	r7, #16
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002942:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002948:	2b00      	cmp	r3, #0
 800294a:	d11d      	bne.n	8002988 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002950:	2b01      	cmp	r3, #1
 8002952:	d10b      	bne.n	800296c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002958:	b2da      	uxtb	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002964:	1c9a      	adds	r2, r3, #2
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800296a:	e073      	b.n	8002a54 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002970:	b29b      	uxth	r3, r3
 8002972:	121b      	asrs	r3, r3, #8
 8002974:	b2da      	uxtb	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002980:	1c5a      	adds	r2, r3, #1
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002986:	e065      	b.n	8002a54 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800298c:	2b01      	cmp	r3, #1
 800298e:	d10b      	bne.n	80029a8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002994:	b2da      	uxtb	r2, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029a0:	1c5a      	adds	r2, r3, #1
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80029a6:	e055      	b.n	8002a54 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d151      	bne.n	8002a54 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80029b0:	7bfb      	ldrb	r3, [r7, #15]
 80029b2:	2b22      	cmp	r3, #34	; 0x22
 80029b4:	d10d      	bne.n	80029d2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029c4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029ca:	1c5a      	adds	r2, r3, #1
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	651a      	str	r2, [r3, #80]	; 0x50
}
 80029d0:	e040      	b.n	8002a54 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d015      	beq.n	8002a08 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80029dc:	7bfb      	ldrb	r3, [r7, #15]
 80029de:	2b21      	cmp	r3, #33	; 0x21
 80029e0:	d112      	bne.n	8002a08 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e6:	781a      	ldrb	r2, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f2:	1c5a      	adds	r2, r3, #1
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	3b01      	subs	r3, #1
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002a06:	e025      	b.n	8002a54 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d120      	bne.n	8002a54 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002a12:	7bfb      	ldrb	r3, [r7, #15]
 8002a14:	2b21      	cmp	r3, #33	; 0x21
 8002a16:	d11d      	bne.n	8002a54 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	685a      	ldr	r2, [r3, #4]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a26:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a36:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2220      	movs	r2, #32
 8002a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f7ff fe36 	bl	80026c0 <HAL_I2C_MemTxCpltCallback>
}
 8002a54:	bf00      	nop
 8002a56:	3710      	adds	r7, #16
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2b22      	cmp	r3, #34	; 0x22
 8002a6e:	f040 80a2 	bne.w	8002bb6 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2b03      	cmp	r3, #3
 8002a7e:	d921      	bls.n	8002ac4 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	691a      	ldr	r2, [r3, #16]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8a:	b2d2      	uxtb	r2, r2
 8002a8c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a92:	1c5a      	adds	r2, r3, #1
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	2b03      	cmp	r3, #3
 8002aae:	f040 8082 	bne.w	8002bb6 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	685a      	ldr	r2, [r3, #4]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ac0:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8002ac2:	e078      	b.n	8002bb6 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d074      	beq.n	8002bb6 <I2C_MasterReceive_RXNE+0x15a>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d002      	beq.n	8002ad8 <I2C_MasterReceive_RXNE+0x7c>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d16e      	bne.n	8002bb6 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f001 fac5 	bl	8004068 <I2C_WaitOnSTOPRequestThroughIT>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d142      	bne.n	8002b6a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002af2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	685a      	ldr	r2, [r3, #4]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002b02:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	691a      	ldr	r2, [r3, #16]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0e:	b2d2      	uxtb	r2, r2
 8002b10:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b16:	1c5a      	adds	r2, r3, #1
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	3b01      	subs	r3, #1
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2220      	movs	r2, #32
 8002b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b40      	cmp	r3, #64	; 0x40
 8002b3c:	d10a      	bne.n	8002b54 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f7ff fdc1 	bl	80026d4 <HAL_I2C_MemRxCpltCallback>
}
 8002b52:	e030      	b.n	8002bb6 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2212      	movs	r2, #18
 8002b60:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f7ff fd76 	bl	8002654 <HAL_I2C_MasterRxCpltCallback>
}
 8002b68:	e025      	b.n	8002bb6 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002b78:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	691a      	ldr	r2, [r3, #16]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b84:	b2d2      	uxtb	r2, r2
 8002b86:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8c:	1c5a      	adds	r2, r3, #1
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2220      	movs	r2, #32
 8002ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f7ff fd99 	bl	80026e8 <HAL_I2C_ErrorCallback>
}
 8002bb6:	bf00      	nop
 8002bb8:	3710      	adds	r7, #16
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b084      	sub	sp, #16
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bca:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	2b04      	cmp	r3, #4
 8002bd4:	d11b      	bne.n	8002c0e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002be4:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	691a      	ldr	r2, [r3, #16]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf0:	b2d2      	uxtb	r2, r2
 8002bf2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf8:	1c5a      	adds	r2, r3, #1
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	3b01      	subs	r3, #1
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002c0c:	e0bd      	b.n	8002d8a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	2b03      	cmp	r3, #3
 8002c16:	d129      	bne.n	8002c6c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c26:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2b04      	cmp	r3, #4
 8002c2c:	d00a      	beq.n	8002c44 <I2C_MasterReceive_BTF+0x86>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d007      	beq.n	8002c44 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c42:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	691a      	ldr	r2, [r3, #16]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4e:	b2d2      	uxtb	r2, r2
 8002c50:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c56:	1c5a      	adds	r2, r3, #1
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	3b01      	subs	r3, #1
 8002c64:	b29a      	uxth	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002c6a:	e08e      	b.n	8002d8a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d176      	bne.n	8002d64 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d002      	beq.n	8002c82 <I2C_MasterReceive_BTF+0xc4>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2b10      	cmp	r3, #16
 8002c80:	d108      	bne.n	8002c94 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c90:	601a      	str	r2, [r3, #0]
 8002c92:	e019      	b.n	8002cc8 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2b04      	cmp	r3, #4
 8002c98:	d002      	beq.n	8002ca0 <I2C_MasterReceive_BTF+0xe2>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d108      	bne.n	8002cb2 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002cae:	601a      	str	r2, [r3, #0]
 8002cb0:	e00a      	b.n	8002cc8 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2b10      	cmp	r3, #16
 8002cb6:	d007      	beq.n	8002cc8 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cc6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	691a      	ldr	r2, [r3, #16]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd2:	b2d2      	uxtb	r2, r2
 8002cd4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cda:	1c5a      	adds	r2, r3, #1
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	691a      	ldr	r2, [r3, #16]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf8:	b2d2      	uxtb	r2, r2
 8002cfa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d00:	1c5a      	adds	r2, r3, #1
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	685a      	ldr	r2, [r3, #4]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002d22:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2220      	movs	r2, #32
 8002d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2b40      	cmp	r3, #64	; 0x40
 8002d36:	d10a      	bne.n	8002d4e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f7ff fcc4 	bl	80026d4 <HAL_I2C_MemRxCpltCallback>
}
 8002d4c:	e01d      	b.n	8002d8a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2212      	movs	r2, #18
 8002d5a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f7ff fc79 	bl	8002654 <HAL_I2C_MasterRxCpltCallback>
}
 8002d62:	e012      	b.n	8002d8a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	691a      	ldr	r2, [r3, #16]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6e:	b2d2      	uxtb	r2, r2
 8002d70:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d76:	1c5a      	adds	r2, r3, #1
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	3b01      	subs	r3, #1
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002d8a:	bf00      	nop
 8002d8c:	3710      	adds	r7, #16
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b083      	sub	sp, #12
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b40      	cmp	r3, #64	; 0x40
 8002da4:	d117      	bne.n	8002dd6 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d109      	bne.n	8002dc2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	461a      	mov	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002dbe:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002dc0:	e067      	b.n	8002e92 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	f043 0301 	orr.w	r3, r3, #1
 8002dcc:	b2da      	uxtb	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	611a      	str	r2, [r3, #16]
}
 8002dd4:	e05d      	b.n	8002e92 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002dde:	d133      	bne.n	8002e48 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2b21      	cmp	r3, #33	; 0x21
 8002dea:	d109      	bne.n	8002e00 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	461a      	mov	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002dfc:	611a      	str	r2, [r3, #16]
 8002dfe:	e008      	b.n	8002e12 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	f043 0301 	orr.w	r3, r3, #1
 8002e0a:	b2da      	uxtb	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d004      	beq.n	8002e24 <I2C_Master_SB+0x92>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d108      	bne.n	8002e36 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d032      	beq.n	8002e92 <I2C_Master_SB+0x100>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d02d      	beq.n	8002e92 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	685a      	ldr	r2, [r3, #4]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e44:	605a      	str	r2, [r3, #4]
}
 8002e46:	e024      	b.n	8002e92 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d10e      	bne.n	8002e6e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	11db      	asrs	r3, r3, #7
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	f003 0306 	and.w	r3, r3, #6
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	f063 030f 	orn	r3, r3, #15
 8002e64:	b2da      	uxtb	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	611a      	str	r2, [r3, #16]
}
 8002e6c:	e011      	b.n	8002e92 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d10d      	bne.n	8002e92 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	11db      	asrs	r3, r3, #7
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	f003 0306 	and.w	r3, r3, #6
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	f063 030e 	orn	r3, r3, #14
 8002e8a:	b2da      	uxtb	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	611a      	str	r2, [r3, #16]
}
 8002e92:	bf00      	nop
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr

08002e9e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	b083      	sub	sp, #12
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eaa:	b2da      	uxtb	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d004      	beq.n	8002ec4 <I2C_Master_ADD10+0x26>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d108      	bne.n	8002ed6 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d00c      	beq.n	8002ee6 <I2C_Master_ADD10+0x48>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d007      	beq.n	8002ee6 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	685a      	ldr	r2, [r3, #4]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ee4:	605a      	str	r2, [r3, #4]
  }
}
 8002ee6:	bf00      	nop
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr

08002ef2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b091      	sub	sp, #68	; 0x44
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f00:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f08:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	2b22      	cmp	r3, #34	; 0x22
 8002f1a:	f040 8169 	bne.w	80031f0 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10f      	bne.n	8002f46 <I2C_Master_ADDR+0x54>
 8002f26:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002f2a:	2b40      	cmp	r3, #64	; 0x40
 8002f2c:	d10b      	bne.n	8002f46 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f2e:	2300      	movs	r3, #0
 8002f30:	633b      	str	r3, [r7, #48]	; 0x30
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	695b      	ldr	r3, [r3, #20]
 8002f38:	633b      	str	r3, [r7, #48]	; 0x30
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	633b      	str	r3, [r7, #48]	; 0x30
 8002f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f44:	e160      	b.n	8003208 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d11d      	bne.n	8002f8a <I2C_Master_ADDR+0x98>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002f56:	d118      	bne.n	8002f8a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f58:	2300      	movs	r3, #0
 8002f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f7c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f82:	1c5a      	adds	r2, r3, #1
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	651a      	str	r2, [r3, #80]	; 0x50
 8002f88:	e13e      	b.n	8003208 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d113      	bne.n	8002fbc <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f94:	2300      	movs	r3, #0
 8002f96:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fb8:	601a      	str	r2, [r3, #0]
 8002fba:	e115      	b.n	80031e8 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	f040 808a 	bne.w	80030dc <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002fce:	d137      	bne.n	8003040 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fde:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fee:	d113      	bne.n	8003018 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ffe:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003000:	2300      	movs	r3, #0
 8003002:	627b      	str	r3, [r7, #36]	; 0x24
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	627b      	str	r3, [r7, #36]	; 0x24
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	627b      	str	r3, [r7, #36]	; 0x24
 8003014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003016:	e0e7      	b.n	80031e8 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003018:	2300      	movs	r3, #0
 800301a:	623b      	str	r3, [r7, #32]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	623b      	str	r3, [r7, #32]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	623b      	str	r3, [r7, #32]
 800302c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800303c:	601a      	str	r2, [r3, #0]
 800303e:	e0d3      	b.n	80031e8 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003042:	2b08      	cmp	r3, #8
 8003044:	d02e      	beq.n	80030a4 <I2C_Master_ADDR+0x1b2>
 8003046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003048:	2b20      	cmp	r3, #32
 800304a:	d02b      	beq.n	80030a4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800304c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800304e:	2b12      	cmp	r3, #18
 8003050:	d102      	bne.n	8003058 <I2C_Master_ADDR+0x166>
 8003052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003054:	2b01      	cmp	r3, #1
 8003056:	d125      	bne.n	80030a4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800305a:	2b04      	cmp	r3, #4
 800305c:	d00e      	beq.n	800307c <I2C_Master_ADDR+0x18a>
 800305e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003060:	2b02      	cmp	r3, #2
 8003062:	d00b      	beq.n	800307c <I2C_Master_ADDR+0x18a>
 8003064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003066:	2b10      	cmp	r3, #16
 8003068:	d008      	beq.n	800307c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003078:	601a      	str	r2, [r3, #0]
 800307a:	e007      	b.n	800308c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800308a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800308c:	2300      	movs	r3, #0
 800308e:	61fb      	str	r3, [r7, #28]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	61fb      	str	r3, [r7, #28]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	61fb      	str	r3, [r7, #28]
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	e0a1      	b.n	80031e8 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030b2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030b4:	2300      	movs	r3, #0
 80030b6:	61bb      	str	r3, [r7, #24]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	61bb      	str	r3, [r7, #24]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	61bb      	str	r3, [r7, #24]
 80030c8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030d8:	601a      	str	r2, [r3, #0]
 80030da:	e085      	b.n	80031e8 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d14d      	bne.n	8003182 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80030e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030e8:	2b04      	cmp	r3, #4
 80030ea:	d016      	beq.n	800311a <I2C_Master_ADDR+0x228>
 80030ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d013      	beq.n	800311a <I2C_Master_ADDR+0x228>
 80030f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030f4:	2b10      	cmp	r3, #16
 80030f6:	d010      	beq.n	800311a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003106:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003116:	601a      	str	r2, [r3, #0]
 8003118:	e007      	b.n	800312a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003128:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003134:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003138:	d117      	bne.n	800316a <I2C_Master_ADDR+0x278>
 800313a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800313c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003140:	d00b      	beq.n	800315a <I2C_Master_ADDR+0x268>
 8003142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003144:	2b01      	cmp	r3, #1
 8003146:	d008      	beq.n	800315a <I2C_Master_ADDR+0x268>
 8003148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800314a:	2b08      	cmp	r3, #8
 800314c:	d005      	beq.n	800315a <I2C_Master_ADDR+0x268>
 800314e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003150:	2b10      	cmp	r3, #16
 8003152:	d002      	beq.n	800315a <I2C_Master_ADDR+0x268>
 8003154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003156:	2b20      	cmp	r3, #32
 8003158:	d107      	bne.n	800316a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	685a      	ldr	r2, [r3, #4]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003168:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800316a:	2300      	movs	r3, #0
 800316c:	617b      	str	r3, [r7, #20]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	695b      	ldr	r3, [r3, #20]
 8003174:	617b      	str	r3, [r7, #20]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	699b      	ldr	r3, [r3, #24]
 800317c:	617b      	str	r3, [r7, #20]
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	e032      	b.n	80031e8 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003190:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800319c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031a0:	d117      	bne.n	80031d2 <I2C_Master_ADDR+0x2e0>
 80031a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031a8:	d00b      	beq.n	80031c2 <I2C_Master_ADDR+0x2d0>
 80031aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d008      	beq.n	80031c2 <I2C_Master_ADDR+0x2d0>
 80031b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031b2:	2b08      	cmp	r3, #8
 80031b4:	d005      	beq.n	80031c2 <I2C_Master_ADDR+0x2d0>
 80031b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031b8:	2b10      	cmp	r3, #16
 80031ba:	d002      	beq.n	80031c2 <I2C_Master_ADDR+0x2d0>
 80031bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031be:	2b20      	cmp	r3, #32
 80031c0:	d107      	bne.n	80031d2 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	685a      	ldr	r2, [r3, #4]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80031d0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031d2:	2300      	movs	r3, #0
 80031d4:	613b      	str	r3, [r7, #16]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	613b      	str	r3, [r7, #16]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	613b      	str	r3, [r7, #16]
 80031e6:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80031ee:	e00b      	b.n	8003208 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031f0:	2300      	movs	r3, #0
 80031f2:	60fb      	str	r3, [r7, #12]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	60fb      	str	r3, [r7, #12]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	60fb      	str	r3, [r7, #12]
 8003204:	68fb      	ldr	r3, [r7, #12]
}
 8003206:	e7ff      	b.n	8003208 <I2C_Master_ADDR+0x316>
 8003208:	bf00      	nop
 800320a:	3744      	adds	r7, #68	; 0x44
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003222:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003228:	b29b      	uxth	r3, r3
 800322a:	2b00      	cmp	r3, #0
 800322c:	d02b      	beq.n	8003286 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003232:	781a      	ldrb	r2, [r3, #0]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323e:	1c5a      	adds	r2, r3, #1
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003248:	b29b      	uxth	r3, r3
 800324a:	3b01      	subs	r3, #1
 800324c:	b29a      	uxth	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003256:	b29b      	uxth	r3, r3
 8003258:	2b00      	cmp	r3, #0
 800325a:	d114      	bne.n	8003286 <I2C_SlaveTransmit_TXE+0x72>
 800325c:	7bfb      	ldrb	r3, [r7, #15]
 800325e:	2b29      	cmp	r3, #41	; 0x29
 8003260:	d111      	bne.n	8003286 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	685a      	ldr	r2, [r3, #4]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003270:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2221      	movs	r2, #33	; 0x21
 8003276:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2228      	movs	r2, #40	; 0x28
 800327c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f7ff f9f1 	bl	8002668 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003286:	bf00      	nop
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800328e:	b480      	push	{r7}
 8003290:	b083      	sub	sp, #12
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800329a:	b29b      	uxth	r3, r3
 800329c:	2b00      	cmp	r3, #0
 800329e:	d011      	beq.n	80032c4 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a4:	781a      	ldrb	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	1c5a      	adds	r2, r3, #1
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	3b01      	subs	r3, #1
 80032be:	b29a      	uxth	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032de:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d02c      	beq.n	8003344 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	691a      	ldr	r2, [r3, #16]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f4:	b2d2      	uxtb	r2, r2
 80032f6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fc:	1c5a      	adds	r2, r3, #1
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003306:	b29b      	uxth	r3, r3
 8003308:	3b01      	subs	r3, #1
 800330a:	b29a      	uxth	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003314:	b29b      	uxth	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d114      	bne.n	8003344 <I2C_SlaveReceive_RXNE+0x74>
 800331a:	7bfb      	ldrb	r3, [r7, #15]
 800331c:	2b2a      	cmp	r3, #42	; 0x2a
 800331e:	d111      	bne.n	8003344 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	685a      	ldr	r2, [r3, #4]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800332e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2222      	movs	r2, #34	; 0x22
 8003334:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2228      	movs	r2, #40	; 0x28
 800333a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f7ff f99c 	bl	800267c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003344:	bf00      	nop
 8003346:	3710      	adds	r7, #16
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003358:	b29b      	uxth	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	d012      	beq.n	8003384 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	691a      	ldr	r2, [r3, #16]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003368:	b2d2      	uxtb	r2, r2
 800336a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003370:	1c5a      	adds	r2, r3, #1
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800337a:	b29b      	uxth	r3, r3
 800337c:	3b01      	subs	r3, #1
 800337e:	b29a      	uxth	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800339a:	2300      	movs	r3, #0
 800339c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80033aa:	2b28      	cmp	r3, #40	; 0x28
 80033ac:	d127      	bne.n	80033fe <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033bc:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	089b      	lsrs	r3, r3, #2
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80033ca:	2301      	movs	r3, #1
 80033cc:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	09db      	lsrs	r3, r3, #7
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d103      	bne.n	80033e2 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	81bb      	strh	r3, [r7, #12]
 80033e0:	e002      	b.n	80033e8 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80033f0:	89ba      	ldrh	r2, [r7, #12]
 80033f2:	7bfb      	ldrb	r3, [r7, #15]
 80033f4:	4619      	mov	r1, r3
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f7ff f94a 	bl	8002690 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80033fc:	e00e      	b.n	800341c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033fe:	2300      	movs	r3, #0
 8003400:	60bb      	str	r3, [r7, #8]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	695b      	ldr	r3, [r3, #20]
 8003408:	60bb      	str	r3, [r7, #8]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	60bb      	str	r3, [r7, #8]
 8003412:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800341c:	bf00      	nop
 800341e:	3710      	adds	r7, #16
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003432:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	685a      	ldr	r2, [r3, #4]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003442:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003444:	2300      	movs	r3, #0
 8003446:	60bb      	str	r3, [r7, #8]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	60bb      	str	r3, [r7, #8]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f042 0201 	orr.w	r2, r2, #1
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003470:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800347c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003480:	d172      	bne.n	8003568 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003482:	7bfb      	ldrb	r3, [r7, #15]
 8003484:	2b22      	cmp	r3, #34	; 0x22
 8003486:	d002      	beq.n	800348e <I2C_Slave_STOPF+0x6a>
 8003488:	7bfb      	ldrb	r3, [r7, #15]
 800348a:	2b2a      	cmp	r3, #42	; 0x2a
 800348c:	d135      	bne.n	80034fa <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	b29a      	uxth	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d005      	beq.n	80034b2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	f043 0204 	orr.w	r2, r3, #4
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	685a      	ldr	r2, [r3, #4]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034c0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7fe f852 	bl	8001570 <HAL_DMA_GetState>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d049      	beq.n	8003566 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d6:	4a69      	ldr	r2, [pc, #420]	; (800367c <I2C_Slave_STOPF+0x258>)
 80034d8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034de:	4618      	mov	r0, r3
 80034e0:	f7fe f824 	bl	800152c <HAL_DMA_Abort_IT>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d03d      	beq.n	8003566 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80034f4:	4610      	mov	r0, r2
 80034f6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80034f8:	e035      	b.n	8003566 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	b29a      	uxth	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800350c:	b29b      	uxth	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d005      	beq.n	800351e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003516:	f043 0204 	orr.w	r2, r3, #4
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	685a      	ldr	r2, [r3, #4]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800352c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003532:	4618      	mov	r0, r3
 8003534:	f7fe f81c 	bl	8001570 <HAL_DMA_GetState>
 8003538:	4603      	mov	r3, r0
 800353a:	2b01      	cmp	r3, #1
 800353c:	d014      	beq.n	8003568 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003542:	4a4e      	ldr	r2, [pc, #312]	; (800367c <I2C_Slave_STOPF+0x258>)
 8003544:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800354a:	4618      	mov	r0, r3
 800354c:	f7fd ffee 	bl	800152c <HAL_DMA_Abort_IT>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d008      	beq.n	8003568 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800355a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003560:	4610      	mov	r0, r2
 8003562:	4798      	blx	r3
 8003564:	e000      	b.n	8003568 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003566:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800356c:	b29b      	uxth	r3, r3
 800356e:	2b00      	cmp	r3, #0
 8003570:	d03e      	beq.n	80035f0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	695b      	ldr	r3, [r3, #20]
 8003578:	f003 0304 	and.w	r3, r3, #4
 800357c:	2b04      	cmp	r3, #4
 800357e:	d112      	bne.n	80035a6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	691a      	ldr	r2, [r3, #16]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358a:	b2d2      	uxtb	r2, r2
 800358c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003592:	1c5a      	adds	r2, r3, #1
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800359c:	b29b      	uxth	r3, r3
 800359e:	3b01      	subs	r3, #1
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b0:	2b40      	cmp	r3, #64	; 0x40
 80035b2:	d112      	bne.n	80035da <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	691a      	ldr	r2, [r3, #16]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035be:	b2d2      	uxtb	r2, r2
 80035c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c6:	1c5a      	adds	r2, r3, #1
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	3b01      	subs	r3, #1
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035de:	b29b      	uxth	r3, r3
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d005      	beq.n	80035f0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e8:	f043 0204 	orr.w	r2, r3, #4
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d003      	beq.n	8003600 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 f8b3 	bl	8003764 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80035fe:	e039      	b.n	8003674 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003600:	7bfb      	ldrb	r3, [r7, #15]
 8003602:	2b2a      	cmp	r3, #42	; 0x2a
 8003604:	d109      	bne.n	800361a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2228      	movs	r2, #40	; 0x28
 8003610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f7ff f831 	bl	800267c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b28      	cmp	r3, #40	; 0x28
 8003624:	d111      	bne.n	800364a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a15      	ldr	r2, [pc, #84]	; (8003680 <I2C_Slave_STOPF+0x25c>)
 800362a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2220      	movs	r2, #32
 8003636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f7ff f832 	bl	80026ac <HAL_I2C_ListenCpltCallback>
}
 8003648:	e014      	b.n	8003674 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364e:	2b22      	cmp	r3, #34	; 0x22
 8003650:	d002      	beq.n	8003658 <I2C_Slave_STOPF+0x234>
 8003652:	7bfb      	ldrb	r3, [r7, #15]
 8003654:	2b22      	cmp	r3, #34	; 0x22
 8003656:	d10d      	bne.n	8003674 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2220      	movs	r2, #32
 8003662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f7ff f804 	bl	800267c <HAL_I2C_SlaveRxCpltCallback>
}
 8003674:	bf00      	nop
 8003676:	3710      	adds	r7, #16
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	08003c69 	.word	0x08003c69
 8003680:	ffff0000 	.word	0xffff0000

08003684 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003692:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003698:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	2b08      	cmp	r3, #8
 800369e:	d002      	beq.n	80036a6 <I2C_Slave_AF+0x22>
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	2b20      	cmp	r3, #32
 80036a4:	d129      	bne.n	80036fa <I2C_Slave_AF+0x76>
 80036a6:	7bfb      	ldrb	r3, [r7, #15]
 80036a8:	2b28      	cmp	r3, #40	; 0x28
 80036aa:	d126      	bne.n	80036fa <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a2c      	ldr	r2, [pc, #176]	; (8003760 <I2C_Slave_AF+0xdc>)
 80036b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	685a      	ldr	r2, [r3, #4]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80036c0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036ca:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036da:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2220      	movs	r2, #32
 80036e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f7fe ffda 	bl	80026ac <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80036f8:	e02e      	b.n	8003758 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80036fa:	7bfb      	ldrb	r3, [r7, #15]
 80036fc:	2b21      	cmp	r3, #33	; 0x21
 80036fe:	d126      	bne.n	800374e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a17      	ldr	r2, [pc, #92]	; (8003760 <I2C_Slave_AF+0xdc>)
 8003704:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2221      	movs	r2, #33	; 0x21
 800370a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2220      	movs	r2, #32
 8003710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	685a      	ldr	r2, [r3, #4]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800372a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003734:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003744:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f7fe ff8e 	bl	8002668 <HAL_I2C_SlaveTxCpltCallback>
}
 800374c:	e004      	b.n	8003758 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003756:	615a      	str	r2, [r3, #20]
}
 8003758:	bf00      	nop
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	ffff0000 	.word	0xffff0000

08003764 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003772:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800377a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800377c:	7bbb      	ldrb	r3, [r7, #14]
 800377e:	2b10      	cmp	r3, #16
 8003780:	d002      	beq.n	8003788 <I2C_ITError+0x24>
 8003782:	7bbb      	ldrb	r3, [r7, #14]
 8003784:	2b40      	cmp	r3, #64	; 0x40
 8003786:	d10a      	bne.n	800379e <I2C_ITError+0x3a>
 8003788:	7bfb      	ldrb	r3, [r7, #15]
 800378a:	2b22      	cmp	r3, #34	; 0x22
 800378c:	d107      	bne.n	800379e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800379c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800379e:	7bfb      	ldrb	r3, [r7, #15]
 80037a0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80037a4:	2b28      	cmp	r3, #40	; 0x28
 80037a6:	d107      	bne.n	80037b8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2228      	movs	r2, #40	; 0x28
 80037b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80037b6:	e015      	b.n	80037e4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037c6:	d00a      	beq.n	80037de <I2C_ITError+0x7a>
 80037c8:	7bfb      	ldrb	r3, [r7, #15]
 80037ca:	2b60      	cmp	r3, #96	; 0x60
 80037cc:	d007      	beq.n	80037de <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2220      	movs	r2, #32
 80037d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037f2:	d162      	bne.n	80038ba <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	685a      	ldr	r2, [r3, #4]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003802:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003808:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b01      	cmp	r3, #1
 8003810:	d020      	beq.n	8003854 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003816:	4a6a      	ldr	r2, [pc, #424]	; (80039c0 <I2C_ITError+0x25c>)
 8003818:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800381e:	4618      	mov	r0, r3
 8003820:	f7fd fe84 	bl	800152c <HAL_DMA_Abort_IT>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	f000 8089 	beq.w	800393e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 0201 	bic.w	r2, r2, #1
 800383a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2220      	movs	r2, #32
 8003840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003848:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800384e:	4610      	mov	r0, r2
 8003850:	4798      	blx	r3
 8003852:	e074      	b.n	800393e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003858:	4a59      	ldr	r2, [pc, #356]	; (80039c0 <I2C_ITError+0x25c>)
 800385a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003860:	4618      	mov	r0, r3
 8003862:	f7fd fe63 	bl	800152c <HAL_DMA_Abort_IT>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d068      	beq.n	800393e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003876:	2b40      	cmp	r3, #64	; 0x40
 8003878:	d10b      	bne.n	8003892 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	691a      	ldr	r2, [r3, #16]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003884:	b2d2      	uxtb	r2, r2
 8003886:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388c:	1c5a      	adds	r2, r3, #1
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f022 0201 	bic.w	r2, r2, #1
 80038a0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2220      	movs	r2, #32
 80038a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80038b4:	4610      	mov	r0, r2
 80038b6:	4798      	blx	r3
 80038b8:	e041      	b.n	800393e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b60      	cmp	r3, #96	; 0x60
 80038c4:	d125      	bne.n	8003912 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2220      	movs	r2, #32
 80038ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038de:	2b40      	cmp	r3, #64	; 0x40
 80038e0:	d10b      	bne.n	80038fa <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	691a      	ldr	r2, [r3, #16]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ec:	b2d2      	uxtb	r2, r2
 80038ee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f4:	1c5a      	adds	r2, r3, #1
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f022 0201 	bic.w	r2, r2, #1
 8003908:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f7fe fef6 	bl	80026fc <HAL_I2C_AbortCpltCallback>
 8003910:	e015      	b.n	800393e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800391c:	2b40      	cmp	r3, #64	; 0x40
 800391e:	d10b      	bne.n	8003938 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	691a      	ldr	r2, [r3, #16]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392a:	b2d2      	uxtb	r2, r2
 800392c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003932:	1c5a      	adds	r2, r3, #1
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f7fe fed5 	bl	80026e8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003942:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b00      	cmp	r3, #0
 800394c:	d10e      	bne.n	800396c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003954:	2b00      	cmp	r3, #0
 8003956:	d109      	bne.n	800396c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800395e:	2b00      	cmp	r3, #0
 8003960:	d104      	bne.n	800396c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003968:	2b00      	cmp	r3, #0
 800396a:	d007      	beq.n	800397c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	685a      	ldr	r2, [r3, #4]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800397a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003982:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003988:	f003 0304 	and.w	r3, r3, #4
 800398c:	2b04      	cmp	r3, #4
 800398e:	d113      	bne.n	80039b8 <I2C_ITError+0x254>
 8003990:	7bfb      	ldrb	r3, [r7, #15]
 8003992:	2b28      	cmp	r3, #40	; 0x28
 8003994:	d110      	bne.n	80039b8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a0a      	ldr	r2, [pc, #40]	; (80039c4 <I2C_ITError+0x260>)
 800399a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2220      	movs	r2, #32
 80039a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f7fe fe7a 	bl	80026ac <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80039b8:	bf00      	nop
 80039ba:	3710      	adds	r7, #16
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	08003c69 	.word	0x08003c69
 80039c4:	ffff0000 	.word	0xffff0000

080039c8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b088      	sub	sp, #32
 80039cc:	af02      	add	r7, sp, #8
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	607a      	str	r2, [r7, #4]
 80039d2:	603b      	str	r3, [r7, #0]
 80039d4:	460b      	mov	r3, r1
 80039d6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039dc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	2b08      	cmp	r3, #8
 80039e2:	d006      	beq.n	80039f2 <I2C_MasterRequestWrite+0x2a>
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d003      	beq.n	80039f2 <I2C_MasterRequestWrite+0x2a>
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80039f0:	d108      	bne.n	8003a04 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a00:	601a      	str	r2, [r3, #0]
 8003a02:	e00b      	b.n	8003a1c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a08:	2b12      	cmp	r3, #18
 8003a0a:	d107      	bne.n	8003a1c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a1a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	9300      	str	r3, [sp, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a28:	68f8      	ldr	r0, [r7, #12]
 8003a2a:	f000 f9c5 	bl	8003db8 <I2C_WaitOnFlagUntilTimeout>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d00d      	beq.n	8003a50 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a42:	d103      	bne.n	8003a4c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e035      	b.n	8003abc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a58:	d108      	bne.n	8003a6c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a5a:	897b      	ldrh	r3, [r7, #10]
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	461a      	mov	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a68:	611a      	str	r2, [r3, #16]
 8003a6a:	e01b      	b.n	8003aa4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003a6c:	897b      	ldrh	r3, [r7, #10]
 8003a6e:	11db      	asrs	r3, r3, #7
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	f003 0306 	and.w	r3, r3, #6
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	f063 030f 	orn	r3, r3, #15
 8003a7c:	b2da      	uxtb	r2, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	490e      	ldr	r1, [pc, #56]	; (8003ac4 <I2C_MasterRequestWrite+0xfc>)
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	f000 f9eb 	bl	8003e66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d001      	beq.n	8003a9a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e010      	b.n	8003abc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003a9a:	897b      	ldrh	r3, [r7, #10]
 8003a9c:	b2da      	uxtb	r2, r3
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	4907      	ldr	r1, [pc, #28]	; (8003ac8 <I2C_MasterRequestWrite+0x100>)
 8003aaa:	68f8      	ldr	r0, [r7, #12]
 8003aac:	f000 f9db 	bl	8003e66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d001      	beq.n	8003aba <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e000      	b.n	8003abc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3718      	adds	r7, #24
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	00010008 	.word	0x00010008
 8003ac8:	00010002 	.word	0x00010002

08003acc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b088      	sub	sp, #32
 8003ad0:	af02      	add	r7, sp, #8
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	607a      	str	r2, [r7, #4]
 8003ad6:	603b      	str	r3, [r7, #0]
 8003ad8:	460b      	mov	r3, r1
 8003ada:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003af0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	2b08      	cmp	r3, #8
 8003af6:	d006      	beq.n	8003b06 <I2C_MasterRequestRead+0x3a>
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d003      	beq.n	8003b06 <I2C_MasterRequestRead+0x3a>
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b04:	d108      	bne.n	8003b18 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b14:	601a      	str	r2, [r3, #0]
 8003b16:	e00b      	b.n	8003b30 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1c:	2b11      	cmp	r3, #17
 8003b1e:	d107      	bne.n	8003b30 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b2e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	9300      	str	r3, [sp, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b3c:	68f8      	ldr	r0, [r7, #12]
 8003b3e:	f000 f93b 	bl	8003db8 <I2C_WaitOnFlagUntilTimeout>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00d      	beq.n	8003b64 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b56:	d103      	bne.n	8003b60 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b5e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e079      	b.n	8003c58 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b6c:	d108      	bne.n	8003b80 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003b6e:	897b      	ldrh	r3, [r7, #10]
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	f043 0301 	orr.w	r3, r3, #1
 8003b76:	b2da      	uxtb	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	611a      	str	r2, [r3, #16]
 8003b7e:	e05f      	b.n	8003c40 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003b80:	897b      	ldrh	r3, [r7, #10]
 8003b82:	11db      	asrs	r3, r3, #7
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	f003 0306 	and.w	r3, r3, #6
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	f063 030f 	orn	r3, r3, #15
 8003b90:	b2da      	uxtb	r2, r3
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	4930      	ldr	r1, [pc, #192]	; (8003c60 <I2C_MasterRequestRead+0x194>)
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f000 f961 	bl	8003e66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e054      	b.n	8003c58 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003bae:	897b      	ldrh	r3, [r7, #10]
 8003bb0:	b2da      	uxtb	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	4929      	ldr	r1, [pc, #164]	; (8003c64 <I2C_MasterRequestRead+0x198>)
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f000 f951 	bl	8003e66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d001      	beq.n	8003bce <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e044      	b.n	8003c58 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bce:	2300      	movs	r3, #0
 8003bd0:	613b      	str	r3, [r7, #16]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	695b      	ldr	r3, [r3, #20]
 8003bd8:	613b      	str	r3, [r7, #16]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	613b      	str	r3, [r7, #16]
 8003be2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bf2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	9300      	str	r3, [sp, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c00:	68f8      	ldr	r0, [r7, #12]
 8003c02:	f000 f8d9 	bl	8003db8 <I2C_WaitOnFlagUntilTimeout>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00d      	beq.n	8003c28 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c1a:	d103      	bne.n	8003c24 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c22:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e017      	b.n	8003c58 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003c28:	897b      	ldrh	r3, [r7, #10]
 8003c2a:	11db      	asrs	r3, r3, #7
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	f003 0306 	and.w	r3, r3, #6
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	f063 030e 	orn	r3, r3, #14
 8003c38:	b2da      	uxtb	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	4907      	ldr	r1, [pc, #28]	; (8003c64 <I2C_MasterRequestRead+0x198>)
 8003c46:	68f8      	ldr	r0, [r7, #12]
 8003c48:	f000 f90d 	bl	8003e66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e000      	b.n	8003c58 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3718      	adds	r7, #24
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	00010008 	.word	0x00010008
 8003c64:	00010002 	.word	0x00010002

08003c68 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c70:	2300      	movs	r3, #0
 8003c72:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c78:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c80:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003c82:	4b4b      	ldr	r3, [pc, #300]	; (8003db0 <I2C_DMAAbort+0x148>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	08db      	lsrs	r3, r3, #3
 8003c88:	4a4a      	ldr	r2, [pc, #296]	; (8003db4 <I2C_DMAAbort+0x14c>)
 8003c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8e:	0a1a      	lsrs	r2, r3, #8
 8003c90:	4613      	mov	r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	4413      	add	r3, r2
 8003c96:	00da      	lsls	r2, r3, #3
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d106      	bne.n	8003cb0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca6:	f043 0220 	orr.w	r2, r3, #32
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003cae:	e00a      	b.n	8003cc6 <I2C_DMAAbort+0x5e>
    }
    count--;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cc4:	d0ea      	beq.n	8003c9c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d003      	beq.n	8003cd6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d003      	beq.n	8003ce6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cf4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d003      	beq.n	8003d0c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d08:	2200      	movs	r2, #0
 8003d0a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d003      	beq.n	8003d1c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d18:	2200      	movs	r2, #0
 8003d1a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f022 0201 	bic.w	r2, r2, #1
 8003d2a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	2b60      	cmp	r3, #96	; 0x60
 8003d36:	d10e      	bne.n	8003d56 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003d4e:	6978      	ldr	r0, [r7, #20]
 8003d50:	f7fe fcd4 	bl	80026fc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003d54:	e027      	b.n	8003da6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d56:	7cfb      	ldrb	r3, [r7, #19]
 8003d58:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d5c:	2b28      	cmp	r3, #40	; 0x28
 8003d5e:	d117      	bne.n	8003d90 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f042 0201 	orr.w	r2, r2, #1
 8003d6e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d7e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	2200      	movs	r2, #0
 8003d84:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	2228      	movs	r2, #40	; 0x28
 8003d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003d8e:	e007      	b.n	8003da0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	2220      	movs	r2, #32
 8003d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003da0:	6978      	ldr	r0, [r7, #20]
 8003da2:	f7fe fca1 	bl	80026e8 <HAL_I2C_ErrorCallback>
}
 8003da6:	bf00      	nop
 8003da8:	3718      	adds	r7, #24
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	20000000 	.word	0x20000000
 8003db4:	14f8b589 	.word	0x14f8b589

08003db8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	603b      	str	r3, [r7, #0]
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dc8:	e025      	b.n	8003e16 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd0:	d021      	beq.n	8003e16 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dd2:	f7fd fa4d 	bl	8001270 <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	683a      	ldr	r2, [r7, #0]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d302      	bcc.n	8003de8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d116      	bne.n	8003e16 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2220      	movs	r2, #32
 8003df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	f043 0220 	orr.w	r2, r3, #32
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e023      	b.n	8003e5e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	0c1b      	lsrs	r3, r3, #16
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d10d      	bne.n	8003e3c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	43da      	mvns	r2, r3
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	bf0c      	ite	eq
 8003e32:	2301      	moveq	r3, #1
 8003e34:	2300      	movne	r3, #0
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	461a      	mov	r2, r3
 8003e3a:	e00c      	b.n	8003e56 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	43da      	mvns	r2, r3
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	4013      	ands	r3, r2
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	bf0c      	ite	eq
 8003e4e:	2301      	moveq	r3, #1
 8003e50:	2300      	movne	r3, #0
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	461a      	mov	r2, r3
 8003e56:	79fb      	ldrb	r3, [r7, #7]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d0b6      	beq.n	8003dca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3710      	adds	r7, #16
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}

08003e66 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003e66:	b580      	push	{r7, lr}
 8003e68:	b084      	sub	sp, #16
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	60f8      	str	r0, [r7, #12]
 8003e6e:	60b9      	str	r1, [r7, #8]
 8003e70:	607a      	str	r2, [r7, #4]
 8003e72:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e74:	e051      	b.n	8003f1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	695b      	ldr	r3, [r3, #20]
 8003e7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e84:	d123      	bne.n	8003ece <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e94:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e9e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2220      	movs	r2, #32
 8003eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eba:	f043 0204 	orr.w	r2, r3, #4
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e046      	b.n	8003f5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed4:	d021      	beq.n	8003f1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ed6:	f7fd f9cb 	bl	8001270 <HAL_GetTick>
 8003eda:	4602      	mov	r2, r0
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d302      	bcc.n	8003eec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d116      	bne.n	8003f1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2220      	movs	r2, #32
 8003ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	f043 0220 	orr.w	r2, r3, #32
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e020      	b.n	8003f5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	0c1b      	lsrs	r3, r3, #16
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d10c      	bne.n	8003f3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	43da      	mvns	r2, r3
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	4013      	ands	r3, r2
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	bf14      	ite	ne
 8003f36:	2301      	movne	r3, #1
 8003f38:	2300      	moveq	r3, #0
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	e00b      	b.n	8003f56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	43da      	mvns	r2, r3
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	4013      	ands	r3, r2
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	bf14      	ite	ne
 8003f50:	2301      	movne	r3, #1
 8003f52:	2300      	moveq	r3, #0
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d18d      	bne.n	8003e76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f70:	e02d      	b.n	8003fce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f72:	68f8      	ldr	r0, [r7, #12]
 8003f74:	f000 f900 	bl	8004178 <I2C_IsAcknowledgeFailed>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d001      	beq.n	8003f82 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e02d      	b.n	8003fde <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f88:	d021      	beq.n	8003fce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f8a:	f7fd f971 	bl	8001270 <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	68ba      	ldr	r2, [r7, #8]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d302      	bcc.n	8003fa0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d116      	bne.n	8003fce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2220      	movs	r2, #32
 8003faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fba:	f043 0220 	orr.w	r2, r3, #32
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e007      	b.n	8003fde <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	695b      	ldr	r3, [r3, #20]
 8003fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd8:	2b80      	cmp	r3, #128	; 0x80
 8003fda:	d1ca      	bne.n	8003f72 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3710      	adds	r7, #16
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}

08003fe6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fe6:	b580      	push	{r7, lr}
 8003fe8:	b084      	sub	sp, #16
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	60f8      	str	r0, [r7, #12]
 8003fee:	60b9      	str	r1, [r7, #8]
 8003ff0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ff2:	e02d      	b.n	8004050 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ff4:	68f8      	ldr	r0, [r7, #12]
 8003ff6:	f000 f8bf 	bl	8004178 <I2C_IsAcknowledgeFailed>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d001      	beq.n	8004004 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e02d      	b.n	8004060 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800400a:	d021      	beq.n	8004050 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800400c:	f7fd f930 	bl	8001270 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	68ba      	ldr	r2, [r7, #8]
 8004018:	429a      	cmp	r2, r3
 800401a:	d302      	bcc.n	8004022 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d116      	bne.n	8004050 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2220      	movs	r2, #32
 800402c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403c:	f043 0220 	orr.w	r2, r3, #32
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e007      	b.n	8004060 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	f003 0304 	and.w	r3, r3, #4
 800405a:	2b04      	cmp	r3, #4
 800405c:	d1ca      	bne.n	8003ff4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800405e:	2300      	movs	r3, #0
}
 8004060:	4618      	mov	r0, r3
 8004062:	3710      	adds	r7, #16
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004068:	b480      	push	{r7}
 800406a:	b085      	sub	sp, #20
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004070:	2300      	movs	r3, #0
 8004072:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004074:	4b13      	ldr	r3, [pc, #76]	; (80040c4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	08db      	lsrs	r3, r3, #3
 800407a:	4a13      	ldr	r2, [pc, #76]	; (80040c8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800407c:	fba2 2303 	umull	r2, r3, r2, r3
 8004080:	0a1a      	lsrs	r2, r3, #8
 8004082:	4613      	mov	r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	4413      	add	r3, r2
 8004088:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	3b01      	subs	r3, #1
 800408e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d107      	bne.n	80040a6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409a:	f043 0220 	orr.w	r2, r3, #32
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e008      	b.n	80040b8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040b4:	d0e9      	beq.n	800408a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3714      	adds	r7, #20
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr
 80040c4:	20000000 	.word	0x20000000
 80040c8:	14f8b589 	.word	0x14f8b589

080040cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80040d8:	e042      	b.n	8004160 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	695b      	ldr	r3, [r3, #20]
 80040e0:	f003 0310 	and.w	r3, r3, #16
 80040e4:	2b10      	cmp	r3, #16
 80040e6:	d119      	bne.n	800411c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f06f 0210 	mvn.w	r2, #16
 80040f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2220      	movs	r2, #32
 80040fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e029      	b.n	8004170 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800411c:	f7fd f8a8 	bl	8001270 <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	68ba      	ldr	r2, [r7, #8]
 8004128:	429a      	cmp	r2, r3
 800412a:	d302      	bcc.n	8004132 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d116      	bne.n	8004160 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2220      	movs	r2, #32
 800413c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414c:	f043 0220 	orr.w	r2, r3, #32
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e007      	b.n	8004170 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800416a:	2b40      	cmp	r3, #64	; 0x40
 800416c:	d1b5      	bne.n	80040da <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800416e:	2300      	movs	r3, #0
}
 8004170:	4618      	mov	r0, r3
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800418a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800418e:	d11b      	bne.n	80041c8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004198:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2220      	movs	r2, #32
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b4:	f043 0204 	orr.w	r2, r3, #4
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e000      	b.n	80041ca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr

080041d6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80041d6:	b480      	push	{r7}
 80041d8:	b083      	sub	sp, #12
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e2:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80041e6:	d103      	bne.n	80041f0 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80041ee:	e007      	b.n	8004200 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80041f8:	d102      	bne.n	8004200 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2208      	movs	r2, #8
 80041fe:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004200:	bf00      	nop
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b086      	sub	sp, #24
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d101      	bne.n	800421e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e264      	b.n	80046e8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	2b00      	cmp	r3, #0
 8004228:	d075      	beq.n	8004316 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800422a:	4ba3      	ldr	r3, [pc, #652]	; (80044b8 <HAL_RCC_OscConfig+0x2ac>)
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f003 030c 	and.w	r3, r3, #12
 8004232:	2b04      	cmp	r3, #4
 8004234:	d00c      	beq.n	8004250 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004236:	4ba0      	ldr	r3, [pc, #640]	; (80044b8 <HAL_RCC_OscConfig+0x2ac>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800423e:	2b08      	cmp	r3, #8
 8004240:	d112      	bne.n	8004268 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004242:	4b9d      	ldr	r3, [pc, #628]	; (80044b8 <HAL_RCC_OscConfig+0x2ac>)
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800424a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800424e:	d10b      	bne.n	8004268 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004250:	4b99      	ldr	r3, [pc, #612]	; (80044b8 <HAL_RCC_OscConfig+0x2ac>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d05b      	beq.n	8004314 <HAL_RCC_OscConfig+0x108>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d157      	bne.n	8004314 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e23f      	b.n	80046e8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004270:	d106      	bne.n	8004280 <HAL_RCC_OscConfig+0x74>
 8004272:	4b91      	ldr	r3, [pc, #580]	; (80044b8 <HAL_RCC_OscConfig+0x2ac>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a90      	ldr	r2, [pc, #576]	; (80044b8 <HAL_RCC_OscConfig+0x2ac>)
 8004278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800427c:	6013      	str	r3, [r2, #0]
 800427e:	e01d      	b.n	80042bc <HAL_RCC_OscConfig+0xb0>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004288:	d10c      	bne.n	80042a4 <HAL_RCC_OscConfig+0x98>
 800428a:	4b8b      	ldr	r3, [pc, #556]	; (80044b8 <HAL_RCC_OscConfig+0x2ac>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a8a      	ldr	r2, [pc, #552]	; (80044b8 <HAL_RCC_OscConfig+0x2ac>)
 8004290:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004294:	6013      	str	r3, [r2, #0]
 8004296:	4b88      	ldr	r3, [pc, #544]	; (80044b8 <HAL_RCC_OscConfig+0x2ac>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a87      	ldr	r2, [pc, #540]	; (80044b8 <HAL_RCC_OscConfig+0x2ac>)
 800429c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042a0:	6013      	str	r3, [r2, #0]
 80042a2:	e00b      	b.n	80042bc <HAL_RCC_OscConfig+0xb0>
 80042a4:	4b84      	ldr	r3, [pc, #528]	; (80044b8 <HAL_RCC_OscConfig+0x2ac>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a83      	ldr	r2, [pc, #524]	; (80044b8 <HAL_RCC_OscConfig+0x2ac>)
 80042aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ae:	6013      	str	r3, [r2, #0]
 80042b0:	4b81      	ldr	r3, [pc, #516]	; (80044b8 <HAL_RCC_OscConfig+0x2ac>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a80      	ldr	r2, [pc, #512]	; (80044b8 <HAL_RCC_OscConfig+0x2ac>)
 80042b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d013      	beq.n	80042ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c4:	f7fc ffd4 	bl	8001270 <HAL_GetTick>
 80042c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ca:	e008      	b.n	80042de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042cc:	f7fc ffd0 	bl	8001270 <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	2b64      	cmp	r3, #100	; 0x64
 80042d8:	d901      	bls.n	80042de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e204      	b.n	80046e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042de:	4b76      	ldr	r3, [pc, #472]	; (80044b8 <HAL_RCC_OscConfig+0x2ac>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d0f0      	beq.n	80042cc <HAL_RCC_OscConfig+0xc0>
 80042ea:	e014      	b.n	8004316 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ec:	f7fc ffc0 	bl	8001270 <HAL_GetTick>
 80042f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042f2:	e008      	b.n	8004306 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042f4:	f7fc ffbc 	bl	8001270 <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	2b64      	cmp	r3, #100	; 0x64
 8004300:	d901      	bls.n	8004306 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e1f0      	b.n	80046e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004306:	4b6c      	ldr	r3, [pc, #432]	; (80044b8 <HAL_RCC_OscConfig+0x2ac>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1f0      	bne.n	80042f4 <HAL_RCC_OscConfig+0xe8>
 8004312:	e000      	b.n	8004316 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004314:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0302 	and.w	r3, r3, #2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d063      	beq.n	80043ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004322:	4b65      	ldr	r3, [pc, #404]	; (80044b8 <HAL_RCC_OscConfig+0x2ac>)
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f003 030c 	and.w	r3, r3, #12
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00b      	beq.n	8004346 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800432e:	4b62      	ldr	r3, [pc, #392]	; (80044b8 <HAL_RCC_OscConfig+0x2ac>)
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004336:	2b08      	cmp	r3, #8
 8004338:	d11c      	bne.n	8004374 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800433a:	4b5f      	ldr	r3, [pc, #380]	; (80044b8 <HAL_RCC_OscConfig+0x2ac>)
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d116      	bne.n	8004374 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004346:	4b5c      	ldr	r3, [pc, #368]	; (80044b8 <HAL_RCC_OscConfig+0x2ac>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	2b00      	cmp	r3, #0
 8004350:	d005      	beq.n	800435e <HAL_RCC_OscConfig+0x152>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	2b01      	cmp	r3, #1
 8004358:	d001      	beq.n	800435e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e1c4      	b.n	80046e8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800435e:	4b56      	ldr	r3, [pc, #344]	; (80044b8 <HAL_RCC_OscConfig+0x2ac>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	00db      	lsls	r3, r3, #3
 800436c:	4952      	ldr	r1, [pc, #328]	; (80044b8 <HAL_RCC_OscConfig+0x2ac>)
 800436e:	4313      	orrs	r3, r2
 8004370:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004372:	e03a      	b.n	80043ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d020      	beq.n	80043be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800437c:	4b4f      	ldr	r3, [pc, #316]	; (80044bc <HAL_RCC_OscConfig+0x2b0>)
 800437e:	2201      	movs	r2, #1
 8004380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004382:	f7fc ff75 	bl	8001270 <HAL_GetTick>
 8004386:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004388:	e008      	b.n	800439c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800438a:	f7fc ff71 	bl	8001270 <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	2b02      	cmp	r3, #2
 8004396:	d901      	bls.n	800439c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e1a5      	b.n	80046e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800439c:	4b46      	ldr	r3, [pc, #280]	; (80044b8 <HAL_RCC_OscConfig+0x2ac>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0302 	and.w	r3, r3, #2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d0f0      	beq.n	800438a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043a8:	4b43      	ldr	r3, [pc, #268]	; (80044b8 <HAL_RCC_OscConfig+0x2ac>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	00db      	lsls	r3, r3, #3
 80043b6:	4940      	ldr	r1, [pc, #256]	; (80044b8 <HAL_RCC_OscConfig+0x2ac>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	600b      	str	r3, [r1, #0]
 80043bc:	e015      	b.n	80043ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043be:	4b3f      	ldr	r3, [pc, #252]	; (80044bc <HAL_RCC_OscConfig+0x2b0>)
 80043c0:	2200      	movs	r2, #0
 80043c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c4:	f7fc ff54 	bl	8001270 <HAL_GetTick>
 80043c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043ca:	e008      	b.n	80043de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043cc:	f7fc ff50 	bl	8001270 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d901      	bls.n	80043de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e184      	b.n	80046e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043de:	4b36      	ldr	r3, [pc, #216]	; (80044b8 <HAL_RCC_OscConfig+0x2ac>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1f0      	bne.n	80043cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0308 	and.w	r3, r3, #8
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d030      	beq.n	8004458 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d016      	beq.n	800442c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043fe:	4b30      	ldr	r3, [pc, #192]	; (80044c0 <HAL_RCC_OscConfig+0x2b4>)
 8004400:	2201      	movs	r2, #1
 8004402:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004404:	f7fc ff34 	bl	8001270 <HAL_GetTick>
 8004408:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800440a:	e008      	b.n	800441e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800440c:	f7fc ff30 	bl	8001270 <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	2b02      	cmp	r3, #2
 8004418:	d901      	bls.n	800441e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e164      	b.n	80046e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800441e:	4b26      	ldr	r3, [pc, #152]	; (80044b8 <HAL_RCC_OscConfig+0x2ac>)
 8004420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b00      	cmp	r3, #0
 8004428:	d0f0      	beq.n	800440c <HAL_RCC_OscConfig+0x200>
 800442a:	e015      	b.n	8004458 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800442c:	4b24      	ldr	r3, [pc, #144]	; (80044c0 <HAL_RCC_OscConfig+0x2b4>)
 800442e:	2200      	movs	r2, #0
 8004430:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004432:	f7fc ff1d 	bl	8001270 <HAL_GetTick>
 8004436:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004438:	e008      	b.n	800444c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800443a:	f7fc ff19 	bl	8001270 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	2b02      	cmp	r3, #2
 8004446:	d901      	bls.n	800444c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e14d      	b.n	80046e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800444c:	4b1a      	ldr	r3, [pc, #104]	; (80044b8 <HAL_RCC_OscConfig+0x2ac>)
 800444e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004450:	f003 0302 	and.w	r3, r3, #2
 8004454:	2b00      	cmp	r3, #0
 8004456:	d1f0      	bne.n	800443a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0304 	and.w	r3, r3, #4
 8004460:	2b00      	cmp	r3, #0
 8004462:	f000 80a0 	beq.w	80045a6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004466:	2300      	movs	r3, #0
 8004468:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800446a:	4b13      	ldr	r3, [pc, #76]	; (80044b8 <HAL_RCC_OscConfig+0x2ac>)
 800446c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d10f      	bne.n	8004496 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004476:	2300      	movs	r3, #0
 8004478:	60bb      	str	r3, [r7, #8]
 800447a:	4b0f      	ldr	r3, [pc, #60]	; (80044b8 <HAL_RCC_OscConfig+0x2ac>)
 800447c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447e:	4a0e      	ldr	r2, [pc, #56]	; (80044b8 <HAL_RCC_OscConfig+0x2ac>)
 8004480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004484:	6413      	str	r3, [r2, #64]	; 0x40
 8004486:	4b0c      	ldr	r3, [pc, #48]	; (80044b8 <HAL_RCC_OscConfig+0x2ac>)
 8004488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800448e:	60bb      	str	r3, [r7, #8]
 8004490:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004492:	2301      	movs	r3, #1
 8004494:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004496:	4b0b      	ldr	r3, [pc, #44]	; (80044c4 <HAL_RCC_OscConfig+0x2b8>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d121      	bne.n	80044e6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044a2:	4b08      	ldr	r3, [pc, #32]	; (80044c4 <HAL_RCC_OscConfig+0x2b8>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a07      	ldr	r2, [pc, #28]	; (80044c4 <HAL_RCC_OscConfig+0x2b8>)
 80044a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044ae:	f7fc fedf 	bl	8001270 <HAL_GetTick>
 80044b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044b4:	e011      	b.n	80044da <HAL_RCC_OscConfig+0x2ce>
 80044b6:	bf00      	nop
 80044b8:	40023800 	.word	0x40023800
 80044bc:	42470000 	.word	0x42470000
 80044c0:	42470e80 	.word	0x42470e80
 80044c4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044c8:	f7fc fed2 	bl	8001270 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d901      	bls.n	80044da <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e106      	b.n	80046e8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044da:	4b85      	ldr	r3, [pc, #532]	; (80046f0 <HAL_RCC_OscConfig+0x4e4>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d0f0      	beq.n	80044c8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d106      	bne.n	80044fc <HAL_RCC_OscConfig+0x2f0>
 80044ee:	4b81      	ldr	r3, [pc, #516]	; (80046f4 <HAL_RCC_OscConfig+0x4e8>)
 80044f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f2:	4a80      	ldr	r2, [pc, #512]	; (80046f4 <HAL_RCC_OscConfig+0x4e8>)
 80044f4:	f043 0301 	orr.w	r3, r3, #1
 80044f8:	6713      	str	r3, [r2, #112]	; 0x70
 80044fa:	e01c      	b.n	8004536 <HAL_RCC_OscConfig+0x32a>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	2b05      	cmp	r3, #5
 8004502:	d10c      	bne.n	800451e <HAL_RCC_OscConfig+0x312>
 8004504:	4b7b      	ldr	r3, [pc, #492]	; (80046f4 <HAL_RCC_OscConfig+0x4e8>)
 8004506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004508:	4a7a      	ldr	r2, [pc, #488]	; (80046f4 <HAL_RCC_OscConfig+0x4e8>)
 800450a:	f043 0304 	orr.w	r3, r3, #4
 800450e:	6713      	str	r3, [r2, #112]	; 0x70
 8004510:	4b78      	ldr	r3, [pc, #480]	; (80046f4 <HAL_RCC_OscConfig+0x4e8>)
 8004512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004514:	4a77      	ldr	r2, [pc, #476]	; (80046f4 <HAL_RCC_OscConfig+0x4e8>)
 8004516:	f043 0301 	orr.w	r3, r3, #1
 800451a:	6713      	str	r3, [r2, #112]	; 0x70
 800451c:	e00b      	b.n	8004536 <HAL_RCC_OscConfig+0x32a>
 800451e:	4b75      	ldr	r3, [pc, #468]	; (80046f4 <HAL_RCC_OscConfig+0x4e8>)
 8004520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004522:	4a74      	ldr	r2, [pc, #464]	; (80046f4 <HAL_RCC_OscConfig+0x4e8>)
 8004524:	f023 0301 	bic.w	r3, r3, #1
 8004528:	6713      	str	r3, [r2, #112]	; 0x70
 800452a:	4b72      	ldr	r3, [pc, #456]	; (80046f4 <HAL_RCC_OscConfig+0x4e8>)
 800452c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800452e:	4a71      	ldr	r2, [pc, #452]	; (80046f4 <HAL_RCC_OscConfig+0x4e8>)
 8004530:	f023 0304 	bic.w	r3, r3, #4
 8004534:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d015      	beq.n	800456a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800453e:	f7fc fe97 	bl	8001270 <HAL_GetTick>
 8004542:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004544:	e00a      	b.n	800455c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004546:	f7fc fe93 	bl	8001270 <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	f241 3288 	movw	r2, #5000	; 0x1388
 8004554:	4293      	cmp	r3, r2
 8004556:	d901      	bls.n	800455c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e0c5      	b.n	80046e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800455c:	4b65      	ldr	r3, [pc, #404]	; (80046f4 <HAL_RCC_OscConfig+0x4e8>)
 800455e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004560:	f003 0302 	and.w	r3, r3, #2
 8004564:	2b00      	cmp	r3, #0
 8004566:	d0ee      	beq.n	8004546 <HAL_RCC_OscConfig+0x33a>
 8004568:	e014      	b.n	8004594 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800456a:	f7fc fe81 	bl	8001270 <HAL_GetTick>
 800456e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004570:	e00a      	b.n	8004588 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004572:	f7fc fe7d 	bl	8001270 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004580:	4293      	cmp	r3, r2
 8004582:	d901      	bls.n	8004588 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e0af      	b.n	80046e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004588:	4b5a      	ldr	r3, [pc, #360]	; (80046f4 <HAL_RCC_OscConfig+0x4e8>)
 800458a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800458c:	f003 0302 	and.w	r3, r3, #2
 8004590:	2b00      	cmp	r3, #0
 8004592:	d1ee      	bne.n	8004572 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004594:	7dfb      	ldrb	r3, [r7, #23]
 8004596:	2b01      	cmp	r3, #1
 8004598:	d105      	bne.n	80045a6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800459a:	4b56      	ldr	r3, [pc, #344]	; (80046f4 <HAL_RCC_OscConfig+0x4e8>)
 800459c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459e:	4a55      	ldr	r2, [pc, #340]	; (80046f4 <HAL_RCC_OscConfig+0x4e8>)
 80045a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	f000 809b 	beq.w	80046e6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045b0:	4b50      	ldr	r3, [pc, #320]	; (80046f4 <HAL_RCC_OscConfig+0x4e8>)
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f003 030c 	and.w	r3, r3, #12
 80045b8:	2b08      	cmp	r3, #8
 80045ba:	d05c      	beq.n	8004676 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d141      	bne.n	8004648 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045c4:	4b4c      	ldr	r3, [pc, #304]	; (80046f8 <HAL_RCC_OscConfig+0x4ec>)
 80045c6:	2200      	movs	r2, #0
 80045c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ca:	f7fc fe51 	bl	8001270 <HAL_GetTick>
 80045ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045d0:	e008      	b.n	80045e4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045d2:	f7fc fe4d 	bl	8001270 <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d901      	bls.n	80045e4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80045e0:	2303      	movs	r3, #3
 80045e2:	e081      	b.n	80046e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045e4:	4b43      	ldr	r3, [pc, #268]	; (80046f4 <HAL_RCC_OscConfig+0x4e8>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1f0      	bne.n	80045d2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	69da      	ldr	r2, [r3, #28]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a1b      	ldr	r3, [r3, #32]
 80045f8:	431a      	orrs	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fe:	019b      	lsls	r3, r3, #6
 8004600:	431a      	orrs	r2, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004606:	085b      	lsrs	r3, r3, #1
 8004608:	3b01      	subs	r3, #1
 800460a:	041b      	lsls	r3, r3, #16
 800460c:	431a      	orrs	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004612:	061b      	lsls	r3, r3, #24
 8004614:	4937      	ldr	r1, [pc, #220]	; (80046f4 <HAL_RCC_OscConfig+0x4e8>)
 8004616:	4313      	orrs	r3, r2
 8004618:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800461a:	4b37      	ldr	r3, [pc, #220]	; (80046f8 <HAL_RCC_OscConfig+0x4ec>)
 800461c:	2201      	movs	r2, #1
 800461e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004620:	f7fc fe26 	bl	8001270 <HAL_GetTick>
 8004624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004626:	e008      	b.n	800463a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004628:	f7fc fe22 	bl	8001270 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	2b02      	cmp	r3, #2
 8004634:	d901      	bls.n	800463a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e056      	b.n	80046e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800463a:	4b2e      	ldr	r3, [pc, #184]	; (80046f4 <HAL_RCC_OscConfig+0x4e8>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d0f0      	beq.n	8004628 <HAL_RCC_OscConfig+0x41c>
 8004646:	e04e      	b.n	80046e6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004648:	4b2b      	ldr	r3, [pc, #172]	; (80046f8 <HAL_RCC_OscConfig+0x4ec>)
 800464a:	2200      	movs	r2, #0
 800464c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800464e:	f7fc fe0f 	bl	8001270 <HAL_GetTick>
 8004652:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004654:	e008      	b.n	8004668 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004656:	f7fc fe0b 	bl	8001270 <HAL_GetTick>
 800465a:	4602      	mov	r2, r0
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	2b02      	cmp	r3, #2
 8004662:	d901      	bls.n	8004668 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e03f      	b.n	80046e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004668:	4b22      	ldr	r3, [pc, #136]	; (80046f4 <HAL_RCC_OscConfig+0x4e8>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1f0      	bne.n	8004656 <HAL_RCC_OscConfig+0x44a>
 8004674:	e037      	b.n	80046e6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	2b01      	cmp	r3, #1
 800467c:	d101      	bne.n	8004682 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e032      	b.n	80046e8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004682:	4b1c      	ldr	r3, [pc, #112]	; (80046f4 <HAL_RCC_OscConfig+0x4e8>)
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d028      	beq.n	80046e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800469a:	429a      	cmp	r2, r3
 800469c:	d121      	bne.n	80046e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d11a      	bne.n	80046e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80046b2:	4013      	ands	r3, r2
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80046b8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d111      	bne.n	80046e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c8:	085b      	lsrs	r3, r3, #1
 80046ca:	3b01      	subs	r3, #1
 80046cc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d107      	bne.n	80046e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046dc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046de:	429a      	cmp	r2, r3
 80046e0:	d001      	beq.n	80046e6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e000      	b.n	80046e8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3718      	adds	r7, #24
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	40007000 	.word	0x40007000
 80046f4:	40023800 	.word	0x40023800
 80046f8:	42470060 	.word	0x42470060

080046fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d101      	bne.n	8004710 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e0cc      	b.n	80048aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004710:	4b68      	ldr	r3, [pc, #416]	; (80048b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0307 	and.w	r3, r3, #7
 8004718:	683a      	ldr	r2, [r7, #0]
 800471a:	429a      	cmp	r2, r3
 800471c:	d90c      	bls.n	8004738 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800471e:	4b65      	ldr	r3, [pc, #404]	; (80048b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004720:	683a      	ldr	r2, [r7, #0]
 8004722:	b2d2      	uxtb	r2, r2
 8004724:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004726:	4b63      	ldr	r3, [pc, #396]	; (80048b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0307 	and.w	r3, r3, #7
 800472e:	683a      	ldr	r2, [r7, #0]
 8004730:	429a      	cmp	r2, r3
 8004732:	d001      	beq.n	8004738 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e0b8      	b.n	80048aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0302 	and.w	r3, r3, #2
 8004740:	2b00      	cmp	r3, #0
 8004742:	d020      	beq.n	8004786 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0304 	and.w	r3, r3, #4
 800474c:	2b00      	cmp	r3, #0
 800474e:	d005      	beq.n	800475c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004750:	4b59      	ldr	r3, [pc, #356]	; (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	4a58      	ldr	r2, [pc, #352]	; (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004756:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800475a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0308 	and.w	r3, r3, #8
 8004764:	2b00      	cmp	r3, #0
 8004766:	d005      	beq.n	8004774 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004768:	4b53      	ldr	r3, [pc, #332]	; (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	4a52      	ldr	r2, [pc, #328]	; (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 800476e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004772:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004774:	4b50      	ldr	r3, [pc, #320]	; (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	494d      	ldr	r1, [pc, #308]	; (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004782:	4313      	orrs	r3, r2
 8004784:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	2b00      	cmp	r3, #0
 8004790:	d044      	beq.n	800481c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	2b01      	cmp	r3, #1
 8004798:	d107      	bne.n	80047aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800479a:	4b47      	ldr	r3, [pc, #284]	; (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d119      	bne.n	80047da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e07f      	b.n	80048aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d003      	beq.n	80047ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047b6:	2b03      	cmp	r3, #3
 80047b8:	d107      	bne.n	80047ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047ba:	4b3f      	ldr	r3, [pc, #252]	; (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d109      	bne.n	80047da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e06f      	b.n	80048aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ca:	4b3b      	ldr	r3, [pc, #236]	; (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d101      	bne.n	80047da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e067      	b.n	80048aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047da:	4b37      	ldr	r3, [pc, #220]	; (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f023 0203 	bic.w	r2, r3, #3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	4934      	ldr	r1, [pc, #208]	; (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047ec:	f7fc fd40 	bl	8001270 <HAL_GetTick>
 80047f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047f2:	e00a      	b.n	800480a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047f4:	f7fc fd3c 	bl	8001270 <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004802:	4293      	cmp	r3, r2
 8004804:	d901      	bls.n	800480a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e04f      	b.n	80048aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800480a:	4b2b      	ldr	r3, [pc, #172]	; (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f003 020c 	and.w	r2, r3, #12
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	429a      	cmp	r2, r3
 800481a:	d1eb      	bne.n	80047f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800481c:	4b25      	ldr	r3, [pc, #148]	; (80048b4 <HAL_RCC_ClockConfig+0x1b8>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0307 	and.w	r3, r3, #7
 8004824:	683a      	ldr	r2, [r7, #0]
 8004826:	429a      	cmp	r2, r3
 8004828:	d20c      	bcs.n	8004844 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800482a:	4b22      	ldr	r3, [pc, #136]	; (80048b4 <HAL_RCC_ClockConfig+0x1b8>)
 800482c:	683a      	ldr	r2, [r7, #0]
 800482e:	b2d2      	uxtb	r2, r2
 8004830:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004832:	4b20      	ldr	r3, [pc, #128]	; (80048b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0307 	and.w	r3, r3, #7
 800483a:	683a      	ldr	r2, [r7, #0]
 800483c:	429a      	cmp	r2, r3
 800483e:	d001      	beq.n	8004844 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e032      	b.n	80048aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0304 	and.w	r3, r3, #4
 800484c:	2b00      	cmp	r3, #0
 800484e:	d008      	beq.n	8004862 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004850:	4b19      	ldr	r3, [pc, #100]	; (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	4916      	ldr	r1, [pc, #88]	; (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 800485e:	4313      	orrs	r3, r2
 8004860:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0308 	and.w	r3, r3, #8
 800486a:	2b00      	cmp	r3, #0
 800486c:	d009      	beq.n	8004882 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800486e:	4b12      	ldr	r3, [pc, #72]	; (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	00db      	lsls	r3, r3, #3
 800487c:	490e      	ldr	r1, [pc, #56]	; (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 800487e:	4313      	orrs	r3, r2
 8004880:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004882:	f000 f821 	bl	80048c8 <HAL_RCC_GetSysClockFreq>
 8004886:	4602      	mov	r2, r0
 8004888:	4b0b      	ldr	r3, [pc, #44]	; (80048b8 <HAL_RCC_ClockConfig+0x1bc>)
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	091b      	lsrs	r3, r3, #4
 800488e:	f003 030f 	and.w	r3, r3, #15
 8004892:	490a      	ldr	r1, [pc, #40]	; (80048bc <HAL_RCC_ClockConfig+0x1c0>)
 8004894:	5ccb      	ldrb	r3, [r1, r3]
 8004896:	fa22 f303 	lsr.w	r3, r2, r3
 800489a:	4a09      	ldr	r2, [pc, #36]	; (80048c0 <HAL_RCC_ClockConfig+0x1c4>)
 800489c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800489e:	4b09      	ldr	r3, [pc, #36]	; (80048c4 <HAL_RCC_ClockConfig+0x1c8>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4618      	mov	r0, r3
 80048a4:	f7fc faee 	bl	8000e84 <HAL_InitTick>

  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3710      	adds	r7, #16
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	40023c00 	.word	0x40023c00
 80048b8:	40023800 	.word	0x40023800
 80048bc:	08008360 	.word	0x08008360
 80048c0:	20000000 	.word	0x20000000
 80048c4:	20000004 	.word	0x20000004

080048c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80048cc:	b084      	sub	sp, #16
 80048ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80048d0:	2300      	movs	r3, #0
 80048d2:	607b      	str	r3, [r7, #4]
 80048d4:	2300      	movs	r3, #0
 80048d6:	60fb      	str	r3, [r7, #12]
 80048d8:	2300      	movs	r3, #0
 80048da:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80048dc:	2300      	movs	r3, #0
 80048de:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048e0:	4b67      	ldr	r3, [pc, #412]	; (8004a80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f003 030c 	and.w	r3, r3, #12
 80048e8:	2b08      	cmp	r3, #8
 80048ea:	d00d      	beq.n	8004908 <HAL_RCC_GetSysClockFreq+0x40>
 80048ec:	2b08      	cmp	r3, #8
 80048ee:	f200 80bd 	bhi.w	8004a6c <HAL_RCC_GetSysClockFreq+0x1a4>
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d002      	beq.n	80048fc <HAL_RCC_GetSysClockFreq+0x34>
 80048f6:	2b04      	cmp	r3, #4
 80048f8:	d003      	beq.n	8004902 <HAL_RCC_GetSysClockFreq+0x3a>
 80048fa:	e0b7      	b.n	8004a6c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048fc:	4b61      	ldr	r3, [pc, #388]	; (8004a84 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80048fe:	60bb      	str	r3, [r7, #8]
       break;
 8004900:	e0b7      	b.n	8004a72 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004902:	4b61      	ldr	r3, [pc, #388]	; (8004a88 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004904:	60bb      	str	r3, [r7, #8]
      break;
 8004906:	e0b4      	b.n	8004a72 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004908:	4b5d      	ldr	r3, [pc, #372]	; (8004a80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004910:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004912:	4b5b      	ldr	r3, [pc, #364]	; (8004a80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d04d      	beq.n	80049ba <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800491e:	4b58      	ldr	r3, [pc, #352]	; (8004a80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	099b      	lsrs	r3, r3, #6
 8004924:	461a      	mov	r2, r3
 8004926:	f04f 0300 	mov.w	r3, #0
 800492a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800492e:	f04f 0100 	mov.w	r1, #0
 8004932:	ea02 0800 	and.w	r8, r2, r0
 8004936:	ea03 0901 	and.w	r9, r3, r1
 800493a:	4640      	mov	r0, r8
 800493c:	4649      	mov	r1, r9
 800493e:	f04f 0200 	mov.w	r2, #0
 8004942:	f04f 0300 	mov.w	r3, #0
 8004946:	014b      	lsls	r3, r1, #5
 8004948:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800494c:	0142      	lsls	r2, r0, #5
 800494e:	4610      	mov	r0, r2
 8004950:	4619      	mov	r1, r3
 8004952:	ebb0 0008 	subs.w	r0, r0, r8
 8004956:	eb61 0109 	sbc.w	r1, r1, r9
 800495a:	f04f 0200 	mov.w	r2, #0
 800495e:	f04f 0300 	mov.w	r3, #0
 8004962:	018b      	lsls	r3, r1, #6
 8004964:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004968:	0182      	lsls	r2, r0, #6
 800496a:	1a12      	subs	r2, r2, r0
 800496c:	eb63 0301 	sbc.w	r3, r3, r1
 8004970:	f04f 0000 	mov.w	r0, #0
 8004974:	f04f 0100 	mov.w	r1, #0
 8004978:	00d9      	lsls	r1, r3, #3
 800497a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800497e:	00d0      	lsls	r0, r2, #3
 8004980:	4602      	mov	r2, r0
 8004982:	460b      	mov	r3, r1
 8004984:	eb12 0208 	adds.w	r2, r2, r8
 8004988:	eb43 0309 	adc.w	r3, r3, r9
 800498c:	f04f 0000 	mov.w	r0, #0
 8004990:	f04f 0100 	mov.w	r1, #0
 8004994:	0259      	lsls	r1, r3, #9
 8004996:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800499a:	0250      	lsls	r0, r2, #9
 800499c:	4602      	mov	r2, r0
 800499e:	460b      	mov	r3, r1
 80049a0:	4610      	mov	r0, r2
 80049a2:	4619      	mov	r1, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	461a      	mov	r2, r3
 80049a8:	f04f 0300 	mov.w	r3, #0
 80049ac:	f7fb fc10 	bl	80001d0 <__aeabi_uldivmod>
 80049b0:	4602      	mov	r2, r0
 80049b2:	460b      	mov	r3, r1
 80049b4:	4613      	mov	r3, r2
 80049b6:	60fb      	str	r3, [r7, #12]
 80049b8:	e04a      	b.n	8004a50 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049ba:	4b31      	ldr	r3, [pc, #196]	; (8004a80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	099b      	lsrs	r3, r3, #6
 80049c0:	461a      	mov	r2, r3
 80049c2:	f04f 0300 	mov.w	r3, #0
 80049c6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80049ca:	f04f 0100 	mov.w	r1, #0
 80049ce:	ea02 0400 	and.w	r4, r2, r0
 80049d2:	ea03 0501 	and.w	r5, r3, r1
 80049d6:	4620      	mov	r0, r4
 80049d8:	4629      	mov	r1, r5
 80049da:	f04f 0200 	mov.w	r2, #0
 80049de:	f04f 0300 	mov.w	r3, #0
 80049e2:	014b      	lsls	r3, r1, #5
 80049e4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80049e8:	0142      	lsls	r2, r0, #5
 80049ea:	4610      	mov	r0, r2
 80049ec:	4619      	mov	r1, r3
 80049ee:	1b00      	subs	r0, r0, r4
 80049f0:	eb61 0105 	sbc.w	r1, r1, r5
 80049f4:	f04f 0200 	mov.w	r2, #0
 80049f8:	f04f 0300 	mov.w	r3, #0
 80049fc:	018b      	lsls	r3, r1, #6
 80049fe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004a02:	0182      	lsls	r2, r0, #6
 8004a04:	1a12      	subs	r2, r2, r0
 8004a06:	eb63 0301 	sbc.w	r3, r3, r1
 8004a0a:	f04f 0000 	mov.w	r0, #0
 8004a0e:	f04f 0100 	mov.w	r1, #0
 8004a12:	00d9      	lsls	r1, r3, #3
 8004a14:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a18:	00d0      	lsls	r0, r2, #3
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	1912      	adds	r2, r2, r4
 8004a20:	eb45 0303 	adc.w	r3, r5, r3
 8004a24:	f04f 0000 	mov.w	r0, #0
 8004a28:	f04f 0100 	mov.w	r1, #0
 8004a2c:	0299      	lsls	r1, r3, #10
 8004a2e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004a32:	0290      	lsls	r0, r2, #10
 8004a34:	4602      	mov	r2, r0
 8004a36:	460b      	mov	r3, r1
 8004a38:	4610      	mov	r0, r2
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	461a      	mov	r2, r3
 8004a40:	f04f 0300 	mov.w	r3, #0
 8004a44:	f7fb fbc4 	bl	80001d0 <__aeabi_uldivmod>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a50:	4b0b      	ldr	r3, [pc, #44]	; (8004a80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	0c1b      	lsrs	r3, r3, #16
 8004a56:	f003 0303 	and.w	r3, r3, #3
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	005b      	lsls	r3, r3, #1
 8004a5e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004a60:	68fa      	ldr	r2, [r7, #12]
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a68:	60bb      	str	r3, [r7, #8]
      break;
 8004a6a:	e002      	b.n	8004a72 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a6c:	4b05      	ldr	r3, [pc, #20]	; (8004a84 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004a6e:	60bb      	str	r3, [r7, #8]
      break;
 8004a70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a72:	68bb      	ldr	r3, [r7, #8]
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3710      	adds	r7, #16
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004a7e:	bf00      	nop
 8004a80:	40023800 	.word	0x40023800
 8004a84:	00f42400 	.word	0x00f42400
 8004a88:	007a1200 	.word	0x007a1200

08004a8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a90:	4b03      	ldr	r3, [pc, #12]	; (8004aa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a92:	681b      	ldr	r3, [r3, #0]
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	20000000 	.word	0x20000000

08004aa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004aa8:	f7ff fff0 	bl	8004a8c <HAL_RCC_GetHCLKFreq>
 8004aac:	4602      	mov	r2, r0
 8004aae:	4b05      	ldr	r3, [pc, #20]	; (8004ac4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	0a9b      	lsrs	r3, r3, #10
 8004ab4:	f003 0307 	and.w	r3, r3, #7
 8004ab8:	4903      	ldr	r1, [pc, #12]	; (8004ac8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004aba:	5ccb      	ldrb	r3, [r1, r3]
 8004abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	40023800 	.word	0x40023800
 8004ac8:	08008370 	.word	0x08008370

08004acc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004ad0:	f7ff ffdc 	bl	8004a8c <HAL_RCC_GetHCLKFreq>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	4b05      	ldr	r3, [pc, #20]	; (8004aec <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	0b5b      	lsrs	r3, r3, #13
 8004adc:	f003 0307 	and.w	r3, r3, #7
 8004ae0:	4903      	ldr	r1, [pc, #12]	; (8004af0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ae2:	5ccb      	ldrb	r3, [r1, r3]
 8004ae4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	40023800 	.word	0x40023800
 8004af0:	08008370 	.word	0x08008370

08004af4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	220f      	movs	r2, #15
 8004b02:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004b04:	4b12      	ldr	r3, [pc, #72]	; (8004b50 <HAL_RCC_GetClockConfig+0x5c>)
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f003 0203 	and.w	r2, r3, #3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004b10:	4b0f      	ldr	r3, [pc, #60]	; (8004b50 <HAL_RCC_GetClockConfig+0x5c>)
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004b1c:	4b0c      	ldr	r3, [pc, #48]	; (8004b50 <HAL_RCC_GetClockConfig+0x5c>)
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004b28:	4b09      	ldr	r3, [pc, #36]	; (8004b50 <HAL_RCC_GetClockConfig+0x5c>)
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	08db      	lsrs	r3, r3, #3
 8004b2e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004b36:	4b07      	ldr	r3, [pc, #28]	; (8004b54 <HAL_RCC_GetClockConfig+0x60>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0207 	and.w	r2, r3, #7
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	601a      	str	r2, [r3, #0]
}
 8004b42:	bf00      	nop
 8004b44:	370c      	adds	r7, #12
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	40023800 	.word	0x40023800
 8004b54:	40023c00 	.word	0x40023c00

08004b58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d101      	bne.n	8004b6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e041      	b.n	8004bee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d106      	bne.n	8004b84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 f839 	bl	8004bf6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2202      	movs	r2, #2
 8004b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	3304      	adds	r3, #4
 8004b94:	4619      	mov	r1, r3
 8004b96:	4610      	mov	r0, r2
 8004b98:	f000 f9d8 	bl	8004f4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3708      	adds	r7, #8
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}

08004bf6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004bf6:	b480      	push	{r7}
 8004bf8:	b083      	sub	sp, #12
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004bfe:	bf00      	nop
 8004c00:	370c      	adds	r7, #12
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
	...

08004c0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b085      	sub	sp, #20
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d001      	beq.n	8004c24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e04e      	b.n	8004cc2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2202      	movs	r2, #2
 8004c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68da      	ldr	r2, [r3, #12]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f042 0201 	orr.w	r2, r2, #1
 8004c3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a23      	ldr	r2, [pc, #140]	; (8004cd0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d022      	beq.n	8004c8c <HAL_TIM_Base_Start_IT+0x80>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c4e:	d01d      	beq.n	8004c8c <HAL_TIM_Base_Start_IT+0x80>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a1f      	ldr	r2, [pc, #124]	; (8004cd4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d018      	beq.n	8004c8c <HAL_TIM_Base_Start_IT+0x80>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a1e      	ldr	r2, [pc, #120]	; (8004cd8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d013      	beq.n	8004c8c <HAL_TIM_Base_Start_IT+0x80>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a1c      	ldr	r2, [pc, #112]	; (8004cdc <HAL_TIM_Base_Start_IT+0xd0>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d00e      	beq.n	8004c8c <HAL_TIM_Base_Start_IT+0x80>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a1b      	ldr	r2, [pc, #108]	; (8004ce0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d009      	beq.n	8004c8c <HAL_TIM_Base_Start_IT+0x80>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a19      	ldr	r2, [pc, #100]	; (8004ce4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d004      	beq.n	8004c8c <HAL_TIM_Base_Start_IT+0x80>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a18      	ldr	r2, [pc, #96]	; (8004ce8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d111      	bne.n	8004cb0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f003 0307 	and.w	r3, r3, #7
 8004c96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2b06      	cmp	r3, #6
 8004c9c:	d010      	beq.n	8004cc0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f042 0201 	orr.w	r2, r2, #1
 8004cac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cae:	e007      	b.n	8004cc0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f042 0201 	orr.w	r2, r2, #1
 8004cbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3714      	adds	r7, #20
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop
 8004cd0:	40010000 	.word	0x40010000
 8004cd4:	40000400 	.word	0x40000400
 8004cd8:	40000800 	.word	0x40000800
 8004cdc:	40000c00 	.word	0x40000c00
 8004ce0:	40010400 	.word	0x40010400
 8004ce4:	40014000 	.word	0x40014000
 8004ce8:	40001800 	.word	0x40001800

08004cec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	f003 0302 	and.w	r3, r3, #2
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d122      	bne.n	8004d48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	f003 0302 	and.w	r3, r3, #2
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d11b      	bne.n	8004d48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f06f 0202 	mvn.w	r2, #2
 8004d18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	f003 0303 	and.w	r3, r3, #3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d003      	beq.n	8004d36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 f8ee 	bl	8004f10 <HAL_TIM_IC_CaptureCallback>
 8004d34:	e005      	b.n	8004d42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 f8e0 	bl	8004efc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f000 f8f1 	bl	8004f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	f003 0304 	and.w	r3, r3, #4
 8004d52:	2b04      	cmp	r3, #4
 8004d54:	d122      	bne.n	8004d9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	f003 0304 	and.w	r3, r3, #4
 8004d60:	2b04      	cmp	r3, #4
 8004d62:	d11b      	bne.n	8004d9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f06f 0204 	mvn.w	r2, #4
 8004d6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2202      	movs	r2, #2
 8004d72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	699b      	ldr	r3, [r3, #24]
 8004d7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d003      	beq.n	8004d8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 f8c4 	bl	8004f10 <HAL_TIM_IC_CaptureCallback>
 8004d88:	e005      	b.n	8004d96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 f8b6 	bl	8004efc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f000 f8c7 	bl	8004f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	f003 0308 	and.w	r3, r3, #8
 8004da6:	2b08      	cmp	r3, #8
 8004da8:	d122      	bne.n	8004df0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	f003 0308 	and.w	r3, r3, #8
 8004db4:	2b08      	cmp	r3, #8
 8004db6:	d11b      	bne.n	8004df0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f06f 0208 	mvn.w	r2, #8
 8004dc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2204      	movs	r2, #4
 8004dc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	69db      	ldr	r3, [r3, #28]
 8004dce:	f003 0303 	and.w	r3, r3, #3
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d003      	beq.n	8004dde <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 f89a 	bl	8004f10 <HAL_TIM_IC_CaptureCallback>
 8004ddc:	e005      	b.n	8004dea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 f88c 	bl	8004efc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f000 f89d 	bl	8004f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	f003 0310 	and.w	r3, r3, #16
 8004dfa:	2b10      	cmp	r3, #16
 8004dfc:	d122      	bne.n	8004e44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	f003 0310 	and.w	r3, r3, #16
 8004e08:	2b10      	cmp	r3, #16
 8004e0a:	d11b      	bne.n	8004e44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f06f 0210 	mvn.w	r2, #16
 8004e14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2208      	movs	r2, #8
 8004e1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	69db      	ldr	r3, [r3, #28]
 8004e22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d003      	beq.n	8004e32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 f870 	bl	8004f10 <HAL_TIM_IC_CaptureCallback>
 8004e30:	e005      	b.n	8004e3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 f862 	bl	8004efc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f000 f873 	bl	8004f24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d10e      	bne.n	8004e70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	f003 0301 	and.w	r3, r3, #1
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d107      	bne.n	8004e70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f06f 0201 	mvn.w	r2, #1
 8004e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f7fb ffc6 	bl	8000dfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e7a:	2b80      	cmp	r3, #128	; 0x80
 8004e7c:	d10e      	bne.n	8004e9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e88:	2b80      	cmp	r3, #128	; 0x80
 8004e8a:	d107      	bne.n	8004e9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 f902 	bl	80050a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ea6:	2b40      	cmp	r3, #64	; 0x40
 8004ea8:	d10e      	bne.n	8004ec8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eb4:	2b40      	cmp	r3, #64	; 0x40
 8004eb6:	d107      	bne.n	8004ec8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 f838 	bl	8004f38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	f003 0320 	and.w	r3, r3, #32
 8004ed2:	2b20      	cmp	r3, #32
 8004ed4:	d10e      	bne.n	8004ef4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	f003 0320 	and.w	r3, r3, #32
 8004ee0:	2b20      	cmp	r3, #32
 8004ee2:	d107      	bne.n	8004ef4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f06f 0220 	mvn.w	r2, #32
 8004eec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 f8cc 	bl	800508c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ef4:	bf00      	nop
 8004ef6:	3708      	adds	r7, #8
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f04:	bf00      	nop
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f18:	bf00      	nop
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f2c:	bf00      	nop
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b085      	sub	sp, #20
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a40      	ldr	r2, [pc, #256]	; (8005060 <TIM_Base_SetConfig+0x114>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d013      	beq.n	8004f8c <TIM_Base_SetConfig+0x40>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f6a:	d00f      	beq.n	8004f8c <TIM_Base_SetConfig+0x40>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a3d      	ldr	r2, [pc, #244]	; (8005064 <TIM_Base_SetConfig+0x118>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d00b      	beq.n	8004f8c <TIM_Base_SetConfig+0x40>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a3c      	ldr	r2, [pc, #240]	; (8005068 <TIM_Base_SetConfig+0x11c>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d007      	beq.n	8004f8c <TIM_Base_SetConfig+0x40>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a3b      	ldr	r2, [pc, #236]	; (800506c <TIM_Base_SetConfig+0x120>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d003      	beq.n	8004f8c <TIM_Base_SetConfig+0x40>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a3a      	ldr	r2, [pc, #232]	; (8005070 <TIM_Base_SetConfig+0x124>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d108      	bne.n	8004f9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a2f      	ldr	r2, [pc, #188]	; (8005060 <TIM_Base_SetConfig+0x114>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d02b      	beq.n	8004ffe <TIM_Base_SetConfig+0xb2>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fac:	d027      	beq.n	8004ffe <TIM_Base_SetConfig+0xb2>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a2c      	ldr	r2, [pc, #176]	; (8005064 <TIM_Base_SetConfig+0x118>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d023      	beq.n	8004ffe <TIM_Base_SetConfig+0xb2>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a2b      	ldr	r2, [pc, #172]	; (8005068 <TIM_Base_SetConfig+0x11c>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d01f      	beq.n	8004ffe <TIM_Base_SetConfig+0xb2>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a2a      	ldr	r2, [pc, #168]	; (800506c <TIM_Base_SetConfig+0x120>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d01b      	beq.n	8004ffe <TIM_Base_SetConfig+0xb2>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a29      	ldr	r2, [pc, #164]	; (8005070 <TIM_Base_SetConfig+0x124>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d017      	beq.n	8004ffe <TIM_Base_SetConfig+0xb2>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a28      	ldr	r2, [pc, #160]	; (8005074 <TIM_Base_SetConfig+0x128>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d013      	beq.n	8004ffe <TIM_Base_SetConfig+0xb2>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a27      	ldr	r2, [pc, #156]	; (8005078 <TIM_Base_SetConfig+0x12c>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d00f      	beq.n	8004ffe <TIM_Base_SetConfig+0xb2>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a26      	ldr	r2, [pc, #152]	; (800507c <TIM_Base_SetConfig+0x130>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d00b      	beq.n	8004ffe <TIM_Base_SetConfig+0xb2>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a25      	ldr	r2, [pc, #148]	; (8005080 <TIM_Base_SetConfig+0x134>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d007      	beq.n	8004ffe <TIM_Base_SetConfig+0xb2>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a24      	ldr	r2, [pc, #144]	; (8005084 <TIM_Base_SetConfig+0x138>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d003      	beq.n	8004ffe <TIM_Base_SetConfig+0xb2>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a23      	ldr	r2, [pc, #140]	; (8005088 <TIM_Base_SetConfig+0x13c>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d108      	bne.n	8005010 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005004:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	68fa      	ldr	r2, [r7, #12]
 800500c:	4313      	orrs	r3, r2
 800500e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	695b      	ldr	r3, [r3, #20]
 800501a:	4313      	orrs	r3, r2
 800501c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	68fa      	ldr	r2, [r7, #12]
 8005022:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	689a      	ldr	r2, [r3, #8]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a0a      	ldr	r2, [pc, #40]	; (8005060 <TIM_Base_SetConfig+0x114>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d003      	beq.n	8005044 <TIM_Base_SetConfig+0xf8>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a0c      	ldr	r2, [pc, #48]	; (8005070 <TIM_Base_SetConfig+0x124>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d103      	bne.n	800504c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	691a      	ldr	r2, [r3, #16]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	615a      	str	r2, [r3, #20]
}
 8005052:	bf00      	nop
 8005054:	3714      	adds	r7, #20
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	40010000 	.word	0x40010000
 8005064:	40000400 	.word	0x40000400
 8005068:	40000800 	.word	0x40000800
 800506c:	40000c00 	.word	0x40000c00
 8005070:	40010400 	.word	0x40010400
 8005074:	40014000 	.word	0x40014000
 8005078:	40014400 	.word	0x40014400
 800507c:	40014800 	.word	0x40014800
 8005080:	40001800 	.word	0x40001800
 8005084:	40001c00 	.word	0x40001c00
 8005088:	40002000 	.word	0x40002000

0800508c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800508c:	b480      	push	{r7}
 800508e:	b083      	sub	sp, #12
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005094:	bf00      	nop
 8005096:	370c      	adds	r7, #12
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050a8:	bf00      	nop
 80050aa:	370c      	adds	r7, #12
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b082      	sub	sp, #8
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d101      	bne.n	80050c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e03f      	b.n	8005146 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d106      	bne.n	80050e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f7fb ffda 	bl	8001094 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2224      	movs	r2, #36	; 0x24
 80050e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68da      	ldr	r2, [r3, #12]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f000 fe7d 	bl	8005df8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	691a      	ldr	r2, [r3, #16]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800510c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	695a      	ldr	r2, [r3, #20]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800511c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68da      	ldr	r2, [r3, #12]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800512c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2220      	movs	r2, #32
 8005138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2220      	movs	r2, #32
 8005140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3708      	adds	r7, #8
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800514e:	b580      	push	{r7, lr}
 8005150:	b08a      	sub	sp, #40	; 0x28
 8005152:	af02      	add	r7, sp, #8
 8005154:	60f8      	str	r0, [r7, #12]
 8005156:	60b9      	str	r1, [r7, #8]
 8005158:	603b      	str	r3, [r7, #0]
 800515a:	4613      	mov	r3, r2
 800515c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800515e:	2300      	movs	r3, #0
 8005160:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b20      	cmp	r3, #32
 800516c:	d17c      	bne.n	8005268 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d002      	beq.n	800517a <HAL_UART_Transmit+0x2c>
 8005174:	88fb      	ldrh	r3, [r7, #6]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d101      	bne.n	800517e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e075      	b.n	800526a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005184:	2b01      	cmp	r3, #1
 8005186:	d101      	bne.n	800518c <HAL_UART_Transmit+0x3e>
 8005188:	2302      	movs	r3, #2
 800518a:	e06e      	b.n	800526a <HAL_UART_Transmit+0x11c>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2200      	movs	r2, #0
 8005198:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2221      	movs	r2, #33	; 0x21
 800519e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051a2:	f7fc f865 	bl	8001270 <HAL_GetTick>
 80051a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	88fa      	ldrh	r2, [r7, #6]
 80051ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	88fa      	ldrh	r2, [r7, #6]
 80051b2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051bc:	d108      	bne.n	80051d0 <HAL_UART_Transmit+0x82>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d104      	bne.n	80051d0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80051c6:	2300      	movs	r3, #0
 80051c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	61bb      	str	r3, [r7, #24]
 80051ce:	e003      	b.n	80051d8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051d4:	2300      	movs	r3, #0
 80051d6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80051e0:	e02a      	b.n	8005238 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	9300      	str	r3, [sp, #0]
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	2200      	movs	r2, #0
 80051ea:	2180      	movs	r1, #128	; 0x80
 80051ec:	68f8      	ldr	r0, [r7, #12]
 80051ee:	f000 fbc1 	bl	8005974 <UART_WaitOnFlagUntilTimeout>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d001      	beq.n	80051fc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80051f8:	2303      	movs	r3, #3
 80051fa:	e036      	b.n	800526a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d10b      	bne.n	800521a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	881b      	ldrh	r3, [r3, #0]
 8005206:	461a      	mov	r2, r3
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005210:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	3302      	adds	r3, #2
 8005216:	61bb      	str	r3, [r7, #24]
 8005218:	e007      	b.n	800522a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	781a      	ldrb	r2, [r3, #0]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	3301      	adds	r3, #1
 8005228:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800522e:	b29b      	uxth	r3, r3
 8005230:	3b01      	subs	r3, #1
 8005232:	b29a      	uxth	r2, r3
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800523c:	b29b      	uxth	r3, r3
 800523e:	2b00      	cmp	r3, #0
 8005240:	d1cf      	bne.n	80051e2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	9300      	str	r3, [sp, #0]
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	2200      	movs	r2, #0
 800524a:	2140      	movs	r1, #64	; 0x40
 800524c:	68f8      	ldr	r0, [r7, #12]
 800524e:	f000 fb91 	bl	8005974 <UART_WaitOnFlagUntilTimeout>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d001      	beq.n	800525c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e006      	b.n	800526a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2220      	movs	r2, #32
 8005260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005264:	2300      	movs	r3, #0
 8005266:	e000      	b.n	800526a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005268:	2302      	movs	r3, #2
  }
}
 800526a:	4618      	mov	r0, r3
 800526c:	3720      	adds	r7, #32
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}

08005272 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005272:	b580      	push	{r7, lr}
 8005274:	b084      	sub	sp, #16
 8005276:	af00      	add	r7, sp, #0
 8005278:	60f8      	str	r0, [r7, #12]
 800527a:	60b9      	str	r1, [r7, #8]
 800527c:	4613      	mov	r3, r2
 800527e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005286:	b2db      	uxtb	r3, r3
 8005288:	2b20      	cmp	r3, #32
 800528a:	d11d      	bne.n	80052c8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d002      	beq.n	8005298 <HAL_UART_Receive_IT+0x26>
 8005292:	88fb      	ldrh	r3, [r7, #6]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d101      	bne.n	800529c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e016      	b.n	80052ca <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d101      	bne.n	80052aa <HAL_UART_Receive_IT+0x38>
 80052a6:	2302      	movs	r3, #2
 80052a8:	e00f      	b.n	80052ca <HAL_UART_Receive_IT+0x58>
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2201      	movs	r2, #1
 80052ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80052b8:	88fb      	ldrh	r3, [r7, #6]
 80052ba:	461a      	mov	r2, r3
 80052bc:	68b9      	ldr	r1, [r7, #8]
 80052be:	68f8      	ldr	r0, [r7, #12]
 80052c0:	f000 fbc6 	bl	8005a50 <UART_Start_Receive_IT>
 80052c4:	4603      	mov	r3, r0
 80052c6:	e000      	b.n	80052ca <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80052c8:	2302      	movs	r3, #2
  }
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3710      	adds	r7, #16
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}

080052d2 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80052d2:	b580      	push	{r7, lr}
 80052d4:	b09a      	sub	sp, #104	; 0x68
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	330c      	adds	r3, #12
 80052e0:	64bb      	str	r3, [r7, #72]	; 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052e4:	e853 3f00 	ldrex	r3, [r3]
 80052e8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80052ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052f0:	667b      	str	r3, [r7, #100]	; 0x64
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	330c      	adds	r3, #12
 80052f8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80052fa:	657a      	str	r2, [r7, #84]	; 0x54
 80052fc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005300:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005302:	e841 2300 	strex	r3, r2, [r1]
 8005306:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005308:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1e5      	bne.n	80052da <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	3314      	adds	r3, #20
 8005314:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005318:	e853 3f00 	ldrex	r3, [r3]
 800531c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800531e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005320:	f023 0301 	bic.w	r3, r3, #1
 8005324:	663b      	str	r3, [r7, #96]	; 0x60
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	3314      	adds	r3, #20
 800532c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800532e:	643a      	str	r2, [r7, #64]	; 0x40
 8005330:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005332:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005334:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005336:	e841 2300 	strex	r3, r2, [r1]
 800533a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800533c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800533e:	2b00      	cmp	r3, #0
 8005340:	d1e5      	bne.n	800530e <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005346:	2b01      	cmp	r3, #1
 8005348:	d119      	bne.n	800537e <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	330c      	adds	r3, #12
 8005350:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005352:	6a3b      	ldr	r3, [r7, #32]
 8005354:	e853 3f00 	ldrex	r3, [r3]
 8005358:	61fb      	str	r3, [r7, #28]
   return(result);
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	f023 0310 	bic.w	r3, r3, #16
 8005360:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	330c      	adds	r3, #12
 8005368:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800536a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800536c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005370:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005372:	e841 2300 	strex	r3, r2, [r1]
 8005376:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1e5      	bne.n	800534a <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	695b      	ldr	r3, [r3, #20]
 8005384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005388:	2b40      	cmp	r3, #64	; 0x40
 800538a:	d136      	bne.n	80053fa <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	3314      	adds	r3, #20
 8005392:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	e853 3f00 	ldrex	r3, [r3]
 800539a:	60bb      	str	r3, [r7, #8]
   return(result);
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	3314      	adds	r3, #20
 80053aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80053ac:	61ba      	str	r2, [r7, #24]
 80053ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b0:	6979      	ldr	r1, [r7, #20]
 80053b2:	69ba      	ldr	r2, [r7, #24]
 80053b4:	e841 2300 	strex	r3, r2, [r1]
 80053b8:	613b      	str	r3, [r7, #16]
   return(result);
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d1e5      	bne.n	800538c <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d018      	beq.n	80053fa <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053cc:	2200      	movs	r2, #0
 80053ce:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d4:	4618      	mov	r0, r3
 80053d6:	f7fc f839 	bl	800144c <HAL_DMA_Abort>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d00c      	beq.n	80053fa <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e4:	4618      	mov	r0, r3
 80053e6:	f7fc f8d1 	bl	800158c <HAL_DMA_GetError>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b20      	cmp	r3, #32
 80053ee:	d104      	bne.n	80053fa <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2210      	movs	r2, #16
 80053f4:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e00a      	b.n	8005410 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2220      	movs	r2, #32
 8005404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	3768      	adds	r7, #104	; 0x68
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b0ba      	sub	sp, #232	; 0xe8
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800543e:	2300      	movs	r3, #0
 8005440:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005444:	2300      	movs	r3, #0
 8005446:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800544a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800544e:	f003 030f 	and.w	r3, r3, #15
 8005452:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005456:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800545a:	2b00      	cmp	r3, #0
 800545c:	d10f      	bne.n	800547e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800545e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005462:	f003 0320 	and.w	r3, r3, #32
 8005466:	2b00      	cmp	r3, #0
 8005468:	d009      	beq.n	800547e <HAL_UART_IRQHandler+0x66>
 800546a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800546e:	f003 0320 	and.w	r3, r3, #32
 8005472:	2b00      	cmp	r3, #0
 8005474:	d003      	beq.n	800547e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 fc03 	bl	8005c82 <UART_Receive_IT>
      return;
 800547c:	e256      	b.n	800592c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800547e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005482:	2b00      	cmp	r3, #0
 8005484:	f000 80de 	beq.w	8005644 <HAL_UART_IRQHandler+0x22c>
 8005488:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800548c:	f003 0301 	and.w	r3, r3, #1
 8005490:	2b00      	cmp	r3, #0
 8005492:	d106      	bne.n	80054a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005498:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800549c:	2b00      	cmp	r3, #0
 800549e:	f000 80d1 	beq.w	8005644 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80054a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054a6:	f003 0301 	and.w	r3, r3, #1
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d00b      	beq.n	80054c6 <HAL_UART_IRQHandler+0xae>
 80054ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d005      	beq.n	80054c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054be:	f043 0201 	orr.w	r2, r3, #1
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054ca:	f003 0304 	and.w	r3, r3, #4
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00b      	beq.n	80054ea <HAL_UART_IRQHandler+0xd2>
 80054d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054d6:	f003 0301 	and.w	r3, r3, #1
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d005      	beq.n	80054ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e2:	f043 0202 	orr.w	r2, r3, #2
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054ee:	f003 0302 	and.w	r3, r3, #2
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d00b      	beq.n	800550e <HAL_UART_IRQHandler+0xf6>
 80054f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054fa:	f003 0301 	and.w	r3, r3, #1
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d005      	beq.n	800550e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005506:	f043 0204 	orr.w	r2, r3, #4
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800550e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005512:	f003 0308 	and.w	r3, r3, #8
 8005516:	2b00      	cmp	r3, #0
 8005518:	d011      	beq.n	800553e <HAL_UART_IRQHandler+0x126>
 800551a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800551e:	f003 0320 	and.w	r3, r3, #32
 8005522:	2b00      	cmp	r3, #0
 8005524:	d105      	bne.n	8005532 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005526:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800552a:	f003 0301 	and.w	r3, r3, #1
 800552e:	2b00      	cmp	r3, #0
 8005530:	d005      	beq.n	800553e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005536:	f043 0208 	orr.w	r2, r3, #8
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005542:	2b00      	cmp	r3, #0
 8005544:	f000 81ed 	beq.w	8005922 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800554c:	f003 0320 	and.w	r3, r3, #32
 8005550:	2b00      	cmp	r3, #0
 8005552:	d008      	beq.n	8005566 <HAL_UART_IRQHandler+0x14e>
 8005554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005558:	f003 0320 	and.w	r3, r3, #32
 800555c:	2b00      	cmp	r3, #0
 800555e:	d002      	beq.n	8005566 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 fb8e 	bl	8005c82 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	695b      	ldr	r3, [r3, #20]
 800556c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005570:	2b40      	cmp	r3, #64	; 0x40
 8005572:	bf0c      	ite	eq
 8005574:	2301      	moveq	r3, #1
 8005576:	2300      	movne	r3, #0
 8005578:	b2db      	uxtb	r3, r3
 800557a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005582:	f003 0308 	and.w	r3, r3, #8
 8005586:	2b00      	cmp	r3, #0
 8005588:	d103      	bne.n	8005592 <HAL_UART_IRQHandler+0x17a>
 800558a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800558e:	2b00      	cmp	r3, #0
 8005590:	d04f      	beq.n	8005632 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 fa96 	bl	8005ac4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	695b      	ldr	r3, [r3, #20]
 800559e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a2:	2b40      	cmp	r3, #64	; 0x40
 80055a4:	d141      	bne.n	800562a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	3314      	adds	r3, #20
 80055ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80055b4:	e853 3f00 	ldrex	r3, [r3]
 80055b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80055bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	3314      	adds	r3, #20
 80055ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80055d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80055d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80055de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80055e2:	e841 2300 	strex	r3, r2, [r1]
 80055e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80055ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d1d9      	bne.n	80055a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d013      	beq.n	8005622 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055fe:	4a7d      	ldr	r2, [pc, #500]	; (80057f4 <HAL_UART_IRQHandler+0x3dc>)
 8005600:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005606:	4618      	mov	r0, r3
 8005608:	f7fb ff90 	bl	800152c <HAL_DMA_Abort_IT>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d016      	beq.n	8005640 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800561c:	4610      	mov	r0, r2
 800561e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005620:	e00e      	b.n	8005640 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 f990 	bl	8005948 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005628:	e00a      	b.n	8005640 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 f98c 	bl	8005948 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005630:	e006      	b.n	8005640 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 f988 	bl	8005948 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800563e:	e170      	b.n	8005922 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005640:	bf00      	nop
    return;
 8005642:	e16e      	b.n	8005922 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005648:	2b01      	cmp	r3, #1
 800564a:	f040 814a 	bne.w	80058e2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800564e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005652:	f003 0310 	and.w	r3, r3, #16
 8005656:	2b00      	cmp	r3, #0
 8005658:	f000 8143 	beq.w	80058e2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800565c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005660:	f003 0310 	and.w	r3, r3, #16
 8005664:	2b00      	cmp	r3, #0
 8005666:	f000 813c 	beq.w	80058e2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800566a:	2300      	movs	r3, #0
 800566c:	60bb      	str	r3, [r7, #8]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	60bb      	str	r3, [r7, #8]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	60bb      	str	r3, [r7, #8]
 800567e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	695b      	ldr	r3, [r3, #20]
 8005686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800568a:	2b40      	cmp	r3, #64	; 0x40
 800568c:	f040 80b4 	bne.w	80057f8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800569c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f000 8140 	beq.w	8005926 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80056aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80056ae:	429a      	cmp	r2, r3
 80056b0:	f080 8139 	bcs.w	8005926 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80056ba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c0:	69db      	ldr	r3, [r3, #28]
 80056c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056c6:	f000 8088 	beq.w	80057da <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	330c      	adds	r3, #12
 80056d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80056d8:	e853 3f00 	ldrex	r3, [r3]
 80056dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80056e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80056e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	330c      	adds	r3, #12
 80056f2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80056f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80056fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005702:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005706:	e841 2300 	strex	r3, r2, [r1]
 800570a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800570e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005712:	2b00      	cmp	r3, #0
 8005714:	d1d9      	bne.n	80056ca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	3314      	adds	r3, #20
 800571c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800571e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005720:	e853 3f00 	ldrex	r3, [r3]
 8005724:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005726:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005728:	f023 0301 	bic.w	r3, r3, #1
 800572c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	3314      	adds	r3, #20
 8005736:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800573a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800573e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005740:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005742:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005746:	e841 2300 	strex	r3, r2, [r1]
 800574a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800574c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1e1      	bne.n	8005716 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	3314      	adds	r3, #20
 8005758:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800575a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800575c:	e853 3f00 	ldrex	r3, [r3]
 8005760:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005762:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005764:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005768:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	3314      	adds	r3, #20
 8005772:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005776:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005778:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800577a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800577c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800577e:	e841 2300 	strex	r3, r2, [r1]
 8005782:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005784:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005786:	2b00      	cmp	r3, #0
 8005788:	d1e3      	bne.n	8005752 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2220      	movs	r2, #32
 800578e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	330c      	adds	r3, #12
 800579e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057a2:	e853 3f00 	ldrex	r3, [r3]
 80057a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80057a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057aa:	f023 0310 	bic.w	r3, r3, #16
 80057ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	330c      	adds	r3, #12
 80057b8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80057bc:	65ba      	str	r2, [r7, #88]	; 0x58
 80057be:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80057c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80057c4:	e841 2300 	strex	r3, r2, [r1]
 80057c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80057ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d1e3      	bne.n	8005798 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d4:	4618      	mov	r0, r3
 80057d6:	f7fb fe39 	bl	800144c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	4619      	mov	r1, r3
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 f8b6 	bl	800595c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80057f0:	e099      	b.n	8005926 <HAL_UART_IRQHandler+0x50e>
 80057f2:	bf00      	nop
 80057f4:	08005b8b 	.word	0x08005b8b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005800:	b29b      	uxth	r3, r3
 8005802:	1ad3      	subs	r3, r2, r3
 8005804:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800580c:	b29b      	uxth	r3, r3
 800580e:	2b00      	cmp	r3, #0
 8005810:	f000 808b 	beq.w	800592a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005814:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005818:	2b00      	cmp	r3, #0
 800581a:	f000 8086 	beq.w	800592a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	330c      	adds	r3, #12
 8005824:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005828:	e853 3f00 	ldrex	r3, [r3]
 800582c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800582e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005830:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005834:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	330c      	adds	r3, #12
 800583e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005842:	647a      	str	r2, [r7, #68]	; 0x44
 8005844:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005846:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005848:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800584a:	e841 2300 	strex	r3, r2, [r1]
 800584e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005852:	2b00      	cmp	r3, #0
 8005854:	d1e3      	bne.n	800581e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	3314      	adds	r3, #20
 800585c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800585e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005860:	e853 3f00 	ldrex	r3, [r3]
 8005864:	623b      	str	r3, [r7, #32]
   return(result);
 8005866:	6a3b      	ldr	r3, [r7, #32]
 8005868:	f023 0301 	bic.w	r3, r3, #1
 800586c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	3314      	adds	r3, #20
 8005876:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800587a:	633a      	str	r2, [r7, #48]	; 0x30
 800587c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005880:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005882:	e841 2300 	strex	r3, r2, [r1]
 8005886:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1e3      	bne.n	8005856 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2220      	movs	r2, #32
 8005892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	330c      	adds	r3, #12
 80058a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	e853 3f00 	ldrex	r3, [r3]
 80058aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f023 0310 	bic.w	r3, r3, #16
 80058b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	330c      	adds	r3, #12
 80058bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80058c0:	61fa      	str	r2, [r7, #28]
 80058c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c4:	69b9      	ldr	r1, [r7, #24]
 80058c6:	69fa      	ldr	r2, [r7, #28]
 80058c8:	e841 2300 	strex	r3, r2, [r1]
 80058cc:	617b      	str	r3, [r7, #20]
   return(result);
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d1e3      	bne.n	800589c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80058d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80058d8:	4619      	mov	r1, r3
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 f83e 	bl	800595c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80058e0:	e023      	b.n	800592a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80058e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d009      	beq.n	8005902 <HAL_UART_IRQHandler+0x4ea>
 80058ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d003      	beq.n	8005902 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 f959 	bl	8005bb2 <UART_Transmit_IT>
    return;
 8005900:	e014      	b.n	800592c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00e      	beq.n	800592c <HAL_UART_IRQHandler+0x514>
 800590e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005916:	2b00      	cmp	r3, #0
 8005918:	d008      	beq.n	800592c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 f999 	bl	8005c52 <UART_EndTransmit_IT>
    return;
 8005920:	e004      	b.n	800592c <HAL_UART_IRQHandler+0x514>
    return;
 8005922:	bf00      	nop
 8005924:	e002      	b.n	800592c <HAL_UART_IRQHandler+0x514>
      return;
 8005926:	bf00      	nop
 8005928:	e000      	b.n	800592c <HAL_UART_IRQHandler+0x514>
      return;
 800592a:	bf00      	nop
  }
}
 800592c:	37e8      	adds	r7, #232	; 0xe8
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop

08005934 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800593c:	bf00      	nop
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005950:	bf00      	nop
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	460b      	mov	r3, r1
 8005966:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005968:	bf00      	nop
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b090      	sub	sp, #64	; 0x40
 8005978:	af00      	add	r7, sp, #0
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	603b      	str	r3, [r7, #0]
 8005980:	4613      	mov	r3, r2
 8005982:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005984:	e050      	b.n	8005a28 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005986:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800598c:	d04c      	beq.n	8005a28 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800598e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005990:	2b00      	cmp	r3, #0
 8005992:	d007      	beq.n	80059a4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005994:	f7fb fc6c 	bl	8001270 <HAL_GetTick>
 8005998:	4602      	mov	r2, r0
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	1ad3      	subs	r3, r2, r3
 800599e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d241      	bcs.n	8005a28 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	330c      	adds	r3, #12
 80059aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ae:	e853 3f00 	ldrex	r3, [r3]
 80059b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80059ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	330c      	adds	r3, #12
 80059c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80059c4:	637a      	str	r2, [r7, #52]	; 0x34
 80059c6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80059ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059cc:	e841 2300 	strex	r3, r2, [r1]
 80059d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80059d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d1e5      	bne.n	80059a4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	3314      	adds	r3, #20
 80059de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	e853 3f00 	ldrex	r3, [r3]
 80059e6:	613b      	str	r3, [r7, #16]
   return(result);
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	f023 0301 	bic.w	r3, r3, #1
 80059ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	3314      	adds	r3, #20
 80059f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059f8:	623a      	str	r2, [r7, #32]
 80059fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059fc:	69f9      	ldr	r1, [r7, #28]
 80059fe:	6a3a      	ldr	r2, [r7, #32]
 8005a00:	e841 2300 	strex	r3, r2, [r1]
 8005a04:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d1e5      	bne.n	80059d8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2220      	movs	r2, #32
 8005a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2220      	movs	r2, #32
 8005a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005a24:	2303      	movs	r3, #3
 8005a26:	e00f      	b.n	8005a48 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	4013      	ands	r3, r2
 8005a32:	68ba      	ldr	r2, [r7, #8]
 8005a34:	429a      	cmp	r2, r3
 8005a36:	bf0c      	ite	eq
 8005a38:	2301      	moveq	r3, #1
 8005a3a:	2300      	movne	r3, #0
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	461a      	mov	r2, r3
 8005a40:	79fb      	ldrb	r3, [r7, #7]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d09f      	beq.n	8005986 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a46:	2300      	movs	r3, #0
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3740      	adds	r7, #64	; 0x40
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b085      	sub	sp, #20
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	68ba      	ldr	r2, [r7, #8]
 8005a62:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	88fa      	ldrh	r2, [r7, #6]
 8005a68:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	88fa      	ldrh	r2, [r7, #6]
 8005a6e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2222      	movs	r2, #34	; 0x22
 8005a7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68da      	ldr	r2, [r3, #12]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a94:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	695a      	ldr	r2, [r3, #20]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f042 0201 	orr.w	r2, r2, #1
 8005aa4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68da      	ldr	r2, [r3, #12]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f042 0220 	orr.w	r2, r2, #32
 8005ab4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005ab6:	2300      	movs	r3, #0
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3714      	adds	r7, #20
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b095      	sub	sp, #84	; 0x54
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	330c      	adds	r3, #12
 8005ad2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ad6:	e853 3f00 	ldrex	r3, [r3]
 8005ada:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ade:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ae2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	330c      	adds	r3, #12
 8005aea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005aec:	643a      	str	r2, [r7, #64]	; 0x40
 8005aee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005af2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005af4:	e841 2300 	strex	r3, r2, [r1]
 8005af8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d1e5      	bne.n	8005acc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	3314      	adds	r3, #20
 8005b06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b08:	6a3b      	ldr	r3, [r7, #32]
 8005b0a:	e853 3f00 	ldrex	r3, [r3]
 8005b0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	f023 0301 	bic.w	r3, r3, #1
 8005b16:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	3314      	adds	r3, #20
 8005b1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b20:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b28:	e841 2300 	strex	r3, r2, [r1]
 8005b2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d1e5      	bne.n	8005b00 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d119      	bne.n	8005b70 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	330c      	adds	r3, #12
 8005b42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	e853 3f00 	ldrex	r3, [r3]
 8005b4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	f023 0310 	bic.w	r3, r3, #16
 8005b52:	647b      	str	r3, [r7, #68]	; 0x44
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	330c      	adds	r3, #12
 8005b5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b5c:	61ba      	str	r2, [r7, #24]
 8005b5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b60:	6979      	ldr	r1, [r7, #20]
 8005b62:	69ba      	ldr	r2, [r7, #24]
 8005b64:	e841 2300 	strex	r3, r2, [r1]
 8005b68:	613b      	str	r3, [r7, #16]
   return(result);
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1e5      	bne.n	8005b3c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2220      	movs	r2, #32
 8005b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005b7e:	bf00      	nop
 8005b80:	3754      	adds	r7, #84	; 0x54
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr

08005b8a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b8a:	b580      	push	{r7, lr}
 8005b8c:	b084      	sub	sp, #16
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b96:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ba4:	68f8      	ldr	r0, [r7, #12]
 8005ba6:	f7ff fecf 	bl	8005948 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005baa:	bf00      	nop
 8005bac:	3710      	adds	r7, #16
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}

08005bb2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	b085      	sub	sp, #20
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	2b21      	cmp	r3, #33	; 0x21
 8005bc4:	d13e      	bne.n	8005c44 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bce:	d114      	bne.n	8005bfa <UART_Transmit_IT+0x48>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	691b      	ldr	r3, [r3, #16]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d110      	bne.n	8005bfa <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6a1b      	ldr	r3, [r3, #32]
 8005bdc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	881b      	ldrh	r3, [r3, #0]
 8005be2:	461a      	mov	r2, r3
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a1b      	ldr	r3, [r3, #32]
 8005bf2:	1c9a      	adds	r2, r3, #2
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	621a      	str	r2, [r3, #32]
 8005bf8:	e008      	b.n	8005c0c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a1b      	ldr	r3, [r3, #32]
 8005bfe:	1c59      	adds	r1, r3, #1
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	6211      	str	r1, [r2, #32]
 8005c04:	781a      	ldrb	r2, [r3, #0]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	3b01      	subs	r3, #1
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	4619      	mov	r1, r3
 8005c1a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d10f      	bne.n	8005c40 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	68da      	ldr	r2, [r3, #12]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c2e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	68da      	ldr	r2, [r3, #12]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c3e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005c40:	2300      	movs	r3, #0
 8005c42:	e000      	b.n	8005c46 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005c44:	2302      	movs	r3, #2
  }
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3714      	adds	r7, #20
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr

08005c52 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c52:	b580      	push	{r7, lr}
 8005c54:	b082      	sub	sp, #8
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	68da      	ldr	r2, [r3, #12]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c68:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2220      	movs	r2, #32
 8005c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f7ff fe5e 	bl	8005934 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3708      	adds	r7, #8
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}

08005c82 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005c82:	b580      	push	{r7, lr}
 8005c84:	b08c      	sub	sp, #48	; 0x30
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	2b22      	cmp	r3, #34	; 0x22
 8005c94:	f040 80ab 	bne.w	8005dee <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ca0:	d117      	bne.n	8005cd2 <UART_Receive_IT+0x50>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	691b      	ldr	r3, [r3, #16]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d113      	bne.n	8005cd2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005caa:	2300      	movs	r3, #0
 8005cac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cc0:	b29a      	uxth	r2, r3
 8005cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cca:	1c9a      	adds	r2, r3, #2
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	629a      	str	r2, [r3, #40]	; 0x28
 8005cd0:	e026      	b.n	8005d20 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ce4:	d007      	beq.n	8005cf6 <UART_Receive_IT+0x74>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d10a      	bne.n	8005d04 <UART_Receive_IT+0x82>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d106      	bne.n	8005d04 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	b2da      	uxtb	r2, r3
 8005cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d00:	701a      	strb	r2, [r3, #0]
 8005d02:	e008      	b.n	8005d16 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d10:	b2da      	uxtb	r2, r3
 8005d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d14:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d1a:	1c5a      	adds	r2, r3, #1
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	3b01      	subs	r3, #1
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d15a      	bne.n	8005dea <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	68da      	ldr	r2, [r3, #12]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f022 0220 	bic.w	r2, r2, #32
 8005d42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68da      	ldr	r2, [r3, #12]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	695a      	ldr	r2, [r3, #20]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f022 0201 	bic.w	r2, r2, #1
 8005d62:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2220      	movs	r2, #32
 8005d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d135      	bne.n	8005de0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	330c      	adds	r3, #12
 8005d80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	e853 3f00 	ldrex	r3, [r3]
 8005d88:	613b      	str	r3, [r7, #16]
   return(result);
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	f023 0310 	bic.w	r3, r3, #16
 8005d90:	627b      	str	r3, [r7, #36]	; 0x24
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	330c      	adds	r3, #12
 8005d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d9a:	623a      	str	r2, [r7, #32]
 8005d9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d9e:	69f9      	ldr	r1, [r7, #28]
 8005da0:	6a3a      	ldr	r2, [r7, #32]
 8005da2:	e841 2300 	strex	r3, r2, [r1]
 8005da6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d1e5      	bne.n	8005d7a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0310 	and.w	r3, r3, #16
 8005db8:	2b10      	cmp	r3, #16
 8005dba:	d10a      	bne.n	8005dd2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	60fb      	str	r3, [r7, #12]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	60fb      	str	r3, [r7, #12]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	60fb      	str	r3, [r7, #12]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f7ff fdbf 	bl	800595c <HAL_UARTEx_RxEventCallback>
 8005dde:	e002      	b.n	8005de6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f7fa fdb1 	bl	8000948 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005de6:	2300      	movs	r3, #0
 8005de8:	e002      	b.n	8005df0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005dea:	2300      	movs	r3, #0
 8005dec:	e000      	b.n	8005df0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005dee:	2302      	movs	r3, #2
  }
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3730      	adds	r7, #48	; 0x30
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dfc:	b09f      	sub	sp, #124	; 0x7c
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	691b      	ldr	r3, [r3, #16]
 8005e08:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005e0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e0e:	68d9      	ldr	r1, [r3, #12]
 8005e10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	ea40 0301 	orr.w	r3, r0, r1
 8005e18:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e1c:	689a      	ldr	r2, [r3, #8]
 8005e1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	431a      	orrs	r2, r3
 8005e24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e26:	695b      	ldr	r3, [r3, #20]
 8005e28:	431a      	orrs	r2, r3
 8005e2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e2c:	69db      	ldr	r3, [r3, #28]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005e32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005e3c:	f021 010c 	bic.w	r1, r1, #12
 8005e40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e46:	430b      	orrs	r3, r1
 8005e48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	695b      	ldr	r3, [r3, #20]
 8005e50:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005e54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e56:	6999      	ldr	r1, [r3, #24]
 8005e58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	ea40 0301 	orr.w	r3, r0, r1
 8005e60:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	4bc5      	ldr	r3, [pc, #788]	; (800617c <UART_SetConfig+0x384>)
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d004      	beq.n	8005e76 <UART_SetConfig+0x7e>
 8005e6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	4bc3      	ldr	r3, [pc, #780]	; (8006180 <UART_SetConfig+0x388>)
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d103      	bne.n	8005e7e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e76:	f7fe fe29 	bl	8004acc <HAL_RCC_GetPCLK2Freq>
 8005e7a:	6778      	str	r0, [r7, #116]	; 0x74
 8005e7c:	e002      	b.n	8005e84 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e7e:	f7fe fe11 	bl	8004aa4 <HAL_RCC_GetPCLK1Freq>
 8005e82:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e86:	69db      	ldr	r3, [r3, #28]
 8005e88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e8c:	f040 80b6 	bne.w	8005ffc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e92:	461c      	mov	r4, r3
 8005e94:	f04f 0500 	mov.w	r5, #0
 8005e98:	4622      	mov	r2, r4
 8005e9a:	462b      	mov	r3, r5
 8005e9c:	1891      	adds	r1, r2, r2
 8005e9e:	6439      	str	r1, [r7, #64]	; 0x40
 8005ea0:	415b      	adcs	r3, r3
 8005ea2:	647b      	str	r3, [r7, #68]	; 0x44
 8005ea4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005ea8:	1912      	adds	r2, r2, r4
 8005eaa:	eb45 0303 	adc.w	r3, r5, r3
 8005eae:	f04f 0000 	mov.w	r0, #0
 8005eb2:	f04f 0100 	mov.w	r1, #0
 8005eb6:	00d9      	lsls	r1, r3, #3
 8005eb8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ebc:	00d0      	lsls	r0, r2, #3
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	460b      	mov	r3, r1
 8005ec2:	1911      	adds	r1, r2, r4
 8005ec4:	6639      	str	r1, [r7, #96]	; 0x60
 8005ec6:	416b      	adcs	r3, r5
 8005ec8:	667b      	str	r3, [r7, #100]	; 0x64
 8005eca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	461a      	mov	r2, r3
 8005ed0:	f04f 0300 	mov.w	r3, #0
 8005ed4:	1891      	adds	r1, r2, r2
 8005ed6:	63b9      	str	r1, [r7, #56]	; 0x38
 8005ed8:	415b      	adcs	r3, r3
 8005eda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005edc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005ee0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005ee4:	f7fa f974 	bl	80001d0 <__aeabi_uldivmod>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	460b      	mov	r3, r1
 8005eec:	4ba5      	ldr	r3, [pc, #660]	; (8006184 <UART_SetConfig+0x38c>)
 8005eee:	fba3 2302 	umull	r2, r3, r3, r2
 8005ef2:	095b      	lsrs	r3, r3, #5
 8005ef4:	011e      	lsls	r6, r3, #4
 8005ef6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ef8:	461c      	mov	r4, r3
 8005efa:	f04f 0500 	mov.w	r5, #0
 8005efe:	4622      	mov	r2, r4
 8005f00:	462b      	mov	r3, r5
 8005f02:	1891      	adds	r1, r2, r2
 8005f04:	6339      	str	r1, [r7, #48]	; 0x30
 8005f06:	415b      	adcs	r3, r3
 8005f08:	637b      	str	r3, [r7, #52]	; 0x34
 8005f0a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005f0e:	1912      	adds	r2, r2, r4
 8005f10:	eb45 0303 	adc.w	r3, r5, r3
 8005f14:	f04f 0000 	mov.w	r0, #0
 8005f18:	f04f 0100 	mov.w	r1, #0
 8005f1c:	00d9      	lsls	r1, r3, #3
 8005f1e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f22:	00d0      	lsls	r0, r2, #3
 8005f24:	4602      	mov	r2, r0
 8005f26:	460b      	mov	r3, r1
 8005f28:	1911      	adds	r1, r2, r4
 8005f2a:	65b9      	str	r1, [r7, #88]	; 0x58
 8005f2c:	416b      	adcs	r3, r5
 8005f2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	461a      	mov	r2, r3
 8005f36:	f04f 0300 	mov.w	r3, #0
 8005f3a:	1891      	adds	r1, r2, r2
 8005f3c:	62b9      	str	r1, [r7, #40]	; 0x28
 8005f3e:	415b      	adcs	r3, r3
 8005f40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005f46:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005f4a:	f7fa f941 	bl	80001d0 <__aeabi_uldivmod>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	460b      	mov	r3, r1
 8005f52:	4b8c      	ldr	r3, [pc, #560]	; (8006184 <UART_SetConfig+0x38c>)
 8005f54:	fba3 1302 	umull	r1, r3, r3, r2
 8005f58:	095b      	lsrs	r3, r3, #5
 8005f5a:	2164      	movs	r1, #100	; 0x64
 8005f5c:	fb01 f303 	mul.w	r3, r1, r3
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	00db      	lsls	r3, r3, #3
 8005f64:	3332      	adds	r3, #50	; 0x32
 8005f66:	4a87      	ldr	r2, [pc, #540]	; (8006184 <UART_SetConfig+0x38c>)
 8005f68:	fba2 2303 	umull	r2, r3, r2, r3
 8005f6c:	095b      	lsrs	r3, r3, #5
 8005f6e:	005b      	lsls	r3, r3, #1
 8005f70:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f74:	441e      	add	r6, r3
 8005f76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f04f 0100 	mov.w	r1, #0
 8005f7e:	4602      	mov	r2, r0
 8005f80:	460b      	mov	r3, r1
 8005f82:	1894      	adds	r4, r2, r2
 8005f84:	623c      	str	r4, [r7, #32]
 8005f86:	415b      	adcs	r3, r3
 8005f88:	627b      	str	r3, [r7, #36]	; 0x24
 8005f8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f8e:	1812      	adds	r2, r2, r0
 8005f90:	eb41 0303 	adc.w	r3, r1, r3
 8005f94:	f04f 0400 	mov.w	r4, #0
 8005f98:	f04f 0500 	mov.w	r5, #0
 8005f9c:	00dd      	lsls	r5, r3, #3
 8005f9e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005fa2:	00d4      	lsls	r4, r2, #3
 8005fa4:	4622      	mov	r2, r4
 8005fa6:	462b      	mov	r3, r5
 8005fa8:	1814      	adds	r4, r2, r0
 8005faa:	653c      	str	r4, [r7, #80]	; 0x50
 8005fac:	414b      	adcs	r3, r1
 8005fae:	657b      	str	r3, [r7, #84]	; 0x54
 8005fb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	f04f 0300 	mov.w	r3, #0
 8005fba:	1891      	adds	r1, r2, r2
 8005fbc:	61b9      	str	r1, [r7, #24]
 8005fbe:	415b      	adcs	r3, r3
 8005fc0:	61fb      	str	r3, [r7, #28]
 8005fc2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005fc6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005fca:	f7fa f901 	bl	80001d0 <__aeabi_uldivmod>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	460b      	mov	r3, r1
 8005fd2:	4b6c      	ldr	r3, [pc, #432]	; (8006184 <UART_SetConfig+0x38c>)
 8005fd4:	fba3 1302 	umull	r1, r3, r3, r2
 8005fd8:	095b      	lsrs	r3, r3, #5
 8005fda:	2164      	movs	r1, #100	; 0x64
 8005fdc:	fb01 f303 	mul.w	r3, r1, r3
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	00db      	lsls	r3, r3, #3
 8005fe4:	3332      	adds	r3, #50	; 0x32
 8005fe6:	4a67      	ldr	r2, [pc, #412]	; (8006184 <UART_SetConfig+0x38c>)
 8005fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8005fec:	095b      	lsrs	r3, r3, #5
 8005fee:	f003 0207 	and.w	r2, r3, #7
 8005ff2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4432      	add	r2, r6
 8005ff8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ffa:	e0b9      	b.n	8006170 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ffc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ffe:	461c      	mov	r4, r3
 8006000:	f04f 0500 	mov.w	r5, #0
 8006004:	4622      	mov	r2, r4
 8006006:	462b      	mov	r3, r5
 8006008:	1891      	adds	r1, r2, r2
 800600a:	6139      	str	r1, [r7, #16]
 800600c:	415b      	adcs	r3, r3
 800600e:	617b      	str	r3, [r7, #20]
 8006010:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006014:	1912      	adds	r2, r2, r4
 8006016:	eb45 0303 	adc.w	r3, r5, r3
 800601a:	f04f 0000 	mov.w	r0, #0
 800601e:	f04f 0100 	mov.w	r1, #0
 8006022:	00d9      	lsls	r1, r3, #3
 8006024:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006028:	00d0      	lsls	r0, r2, #3
 800602a:	4602      	mov	r2, r0
 800602c:	460b      	mov	r3, r1
 800602e:	eb12 0804 	adds.w	r8, r2, r4
 8006032:	eb43 0905 	adc.w	r9, r3, r5
 8006036:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	4618      	mov	r0, r3
 800603c:	f04f 0100 	mov.w	r1, #0
 8006040:	f04f 0200 	mov.w	r2, #0
 8006044:	f04f 0300 	mov.w	r3, #0
 8006048:	008b      	lsls	r3, r1, #2
 800604a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800604e:	0082      	lsls	r2, r0, #2
 8006050:	4640      	mov	r0, r8
 8006052:	4649      	mov	r1, r9
 8006054:	f7fa f8bc 	bl	80001d0 <__aeabi_uldivmod>
 8006058:	4602      	mov	r2, r0
 800605a:	460b      	mov	r3, r1
 800605c:	4b49      	ldr	r3, [pc, #292]	; (8006184 <UART_SetConfig+0x38c>)
 800605e:	fba3 2302 	umull	r2, r3, r3, r2
 8006062:	095b      	lsrs	r3, r3, #5
 8006064:	011e      	lsls	r6, r3, #4
 8006066:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006068:	4618      	mov	r0, r3
 800606a:	f04f 0100 	mov.w	r1, #0
 800606e:	4602      	mov	r2, r0
 8006070:	460b      	mov	r3, r1
 8006072:	1894      	adds	r4, r2, r2
 8006074:	60bc      	str	r4, [r7, #8]
 8006076:	415b      	adcs	r3, r3
 8006078:	60fb      	str	r3, [r7, #12]
 800607a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800607e:	1812      	adds	r2, r2, r0
 8006080:	eb41 0303 	adc.w	r3, r1, r3
 8006084:	f04f 0400 	mov.w	r4, #0
 8006088:	f04f 0500 	mov.w	r5, #0
 800608c:	00dd      	lsls	r5, r3, #3
 800608e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006092:	00d4      	lsls	r4, r2, #3
 8006094:	4622      	mov	r2, r4
 8006096:	462b      	mov	r3, r5
 8006098:	1814      	adds	r4, r2, r0
 800609a:	64bc      	str	r4, [r7, #72]	; 0x48
 800609c:	414b      	adcs	r3, r1
 800609e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	4618      	mov	r0, r3
 80060a6:	f04f 0100 	mov.w	r1, #0
 80060aa:	f04f 0200 	mov.w	r2, #0
 80060ae:	f04f 0300 	mov.w	r3, #0
 80060b2:	008b      	lsls	r3, r1, #2
 80060b4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80060b8:	0082      	lsls	r2, r0, #2
 80060ba:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80060be:	f7fa f887 	bl	80001d0 <__aeabi_uldivmod>
 80060c2:	4602      	mov	r2, r0
 80060c4:	460b      	mov	r3, r1
 80060c6:	4b2f      	ldr	r3, [pc, #188]	; (8006184 <UART_SetConfig+0x38c>)
 80060c8:	fba3 1302 	umull	r1, r3, r3, r2
 80060cc:	095b      	lsrs	r3, r3, #5
 80060ce:	2164      	movs	r1, #100	; 0x64
 80060d0:	fb01 f303 	mul.w	r3, r1, r3
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	011b      	lsls	r3, r3, #4
 80060d8:	3332      	adds	r3, #50	; 0x32
 80060da:	4a2a      	ldr	r2, [pc, #168]	; (8006184 <UART_SetConfig+0x38c>)
 80060dc:	fba2 2303 	umull	r2, r3, r2, r3
 80060e0:	095b      	lsrs	r3, r3, #5
 80060e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060e6:	441e      	add	r6, r3
 80060e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060ea:	4618      	mov	r0, r3
 80060ec:	f04f 0100 	mov.w	r1, #0
 80060f0:	4602      	mov	r2, r0
 80060f2:	460b      	mov	r3, r1
 80060f4:	1894      	adds	r4, r2, r2
 80060f6:	603c      	str	r4, [r7, #0]
 80060f8:	415b      	adcs	r3, r3
 80060fa:	607b      	str	r3, [r7, #4]
 80060fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006100:	1812      	adds	r2, r2, r0
 8006102:	eb41 0303 	adc.w	r3, r1, r3
 8006106:	f04f 0400 	mov.w	r4, #0
 800610a:	f04f 0500 	mov.w	r5, #0
 800610e:	00dd      	lsls	r5, r3, #3
 8006110:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006114:	00d4      	lsls	r4, r2, #3
 8006116:	4622      	mov	r2, r4
 8006118:	462b      	mov	r3, r5
 800611a:	eb12 0a00 	adds.w	sl, r2, r0
 800611e:	eb43 0b01 	adc.w	fp, r3, r1
 8006122:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	4618      	mov	r0, r3
 8006128:	f04f 0100 	mov.w	r1, #0
 800612c:	f04f 0200 	mov.w	r2, #0
 8006130:	f04f 0300 	mov.w	r3, #0
 8006134:	008b      	lsls	r3, r1, #2
 8006136:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800613a:	0082      	lsls	r2, r0, #2
 800613c:	4650      	mov	r0, sl
 800613e:	4659      	mov	r1, fp
 8006140:	f7fa f846 	bl	80001d0 <__aeabi_uldivmod>
 8006144:	4602      	mov	r2, r0
 8006146:	460b      	mov	r3, r1
 8006148:	4b0e      	ldr	r3, [pc, #56]	; (8006184 <UART_SetConfig+0x38c>)
 800614a:	fba3 1302 	umull	r1, r3, r3, r2
 800614e:	095b      	lsrs	r3, r3, #5
 8006150:	2164      	movs	r1, #100	; 0x64
 8006152:	fb01 f303 	mul.w	r3, r1, r3
 8006156:	1ad3      	subs	r3, r2, r3
 8006158:	011b      	lsls	r3, r3, #4
 800615a:	3332      	adds	r3, #50	; 0x32
 800615c:	4a09      	ldr	r2, [pc, #36]	; (8006184 <UART_SetConfig+0x38c>)
 800615e:	fba2 2303 	umull	r2, r3, r2, r3
 8006162:	095b      	lsrs	r3, r3, #5
 8006164:	f003 020f 	and.w	r2, r3, #15
 8006168:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4432      	add	r2, r6
 800616e:	609a      	str	r2, [r3, #8]
}
 8006170:	bf00      	nop
 8006172:	377c      	adds	r7, #124	; 0x7c
 8006174:	46bd      	mov	sp, r7
 8006176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800617a:	bf00      	nop
 800617c:	40011000 	.word	0x40011000
 8006180:	40011400 	.word	0x40011400
 8006184:	51eb851f 	.word	0x51eb851f

08006188 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006188:	b480      	push	{r7}
 800618a:	b085      	sub	sp, #20
 800618c:	af00      	add	r7, sp, #0
 800618e:	4603      	mov	r3, r0
 8006190:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006192:	2300      	movs	r3, #0
 8006194:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006196:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800619a:	2b84      	cmp	r3, #132	; 0x84
 800619c:	d005      	beq.n	80061aa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800619e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	4413      	add	r3, r2
 80061a6:	3303      	adds	r3, #3
 80061a8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80061aa:	68fb      	ldr	r3, [r7, #12]
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3714      	adds	r7, #20
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80061bc:	f000 fe66 	bl	8006e8c <vTaskStartScheduler>
  
  return osOK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	bd80      	pop	{r7, pc}

080061c6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80061c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061c8:	b089      	sub	sp, #36	; 0x24
 80061ca:	af04      	add	r7, sp, #16
 80061cc:	6078      	str	r0, [r7, #4]
 80061ce:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	695b      	ldr	r3, [r3, #20]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d020      	beq.n	800621a <osThreadCreate+0x54>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	699b      	ldr	r3, [r3, #24]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d01c      	beq.n	800621a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	685c      	ldr	r4, [r3, #4]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681d      	ldr	r5, [r3, #0]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	691e      	ldr	r6, [r3, #16]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80061f2:	4618      	mov	r0, r3
 80061f4:	f7ff ffc8 	bl	8006188 <makeFreeRtosPriority>
 80061f8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	695b      	ldr	r3, [r3, #20]
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006202:	9202      	str	r2, [sp, #8]
 8006204:	9301      	str	r3, [sp, #4]
 8006206:	9100      	str	r1, [sp, #0]
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	4632      	mov	r2, r6
 800620c:	4629      	mov	r1, r5
 800620e:	4620      	mov	r0, r4
 8006210:	f000 fc5e 	bl	8006ad0 <xTaskCreateStatic>
 8006214:	4603      	mov	r3, r0
 8006216:	60fb      	str	r3, [r7, #12]
 8006218:	e01c      	b.n	8006254 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	685c      	ldr	r4, [r3, #4]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006226:	b29e      	uxth	r6, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800622e:	4618      	mov	r0, r3
 8006230:	f7ff ffaa 	bl	8006188 <makeFreeRtosPriority>
 8006234:	4602      	mov	r2, r0
 8006236:	f107 030c 	add.w	r3, r7, #12
 800623a:	9301      	str	r3, [sp, #4]
 800623c:	9200      	str	r2, [sp, #0]
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	4632      	mov	r2, r6
 8006242:	4629      	mov	r1, r5
 8006244:	4620      	mov	r0, r4
 8006246:	f000 fca0 	bl	8006b8a <xTaskCreate>
 800624a:	4603      	mov	r3, r0
 800624c:	2b01      	cmp	r3, #1
 800624e:	d001      	beq.n	8006254 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006250:	2300      	movs	r3, #0
 8006252:	e000      	b.n	8006256 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006254:	68fb      	ldr	r3, [r7, #12]
}
 8006256:	4618      	mov	r0, r3
 8006258:	3714      	adds	r7, #20
 800625a:	46bd      	mov	sp, r7
 800625c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800625e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800625e:	b580      	push	{r7, lr}
 8006260:	b084      	sub	sp, #16
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d001      	beq.n	8006274 <osDelay+0x16>
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	e000      	b.n	8006276 <osDelay+0x18>
 8006274:	2301      	movs	r3, #1
 8006276:	4618      	mov	r0, r3
 8006278:	f000 fdd4 	bl	8006e24 <vTaskDelay>
  
  return osOK;
 800627c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800627e:	4618      	mov	r0, r3
 8006280:	3710      	adds	r7, #16
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}

08006286 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8006286:	b580      	push	{r7, lr}
 8006288:	b082      	sub	sp, #8
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d007      	beq.n	80062a6 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	4619      	mov	r1, r3
 800629c:	2001      	movs	r0, #1
 800629e:	f000 fa2a 	bl	80066f6 <xQueueCreateMutexStatic>
 80062a2:	4603      	mov	r3, r0
 80062a4:	e003      	b.n	80062ae <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80062a6:	2001      	movs	r0, #1
 80062a8:	f000 fa0d 	bl	80066c6 <xQueueCreateMutex>
 80062ac:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3708      	adds	r7, #8
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}

080062b6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80062b6:	b480      	push	{r7}
 80062b8:	b083      	sub	sp, #12
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f103 0208 	add.w	r2, r3, #8
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f04f 32ff 	mov.w	r2, #4294967295
 80062ce:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f103 0208 	add.w	r2, r3, #8
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f103 0208 	add.w	r2, r3, #8
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80062ea:	bf00      	nop
 80062ec:	370c      	adds	r7, #12
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr

080062f6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80062f6:	b480      	push	{r7}
 80062f8:	b083      	sub	sp, #12
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006304:	bf00      	nop
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006310:	b480      	push	{r7}
 8006312:	b085      	sub	sp, #20
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	68fa      	ldr	r2, [r7, #12]
 8006324:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	689a      	ldr	r2, [r3, #8]
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	683a      	ldr	r2, [r7, #0]
 8006334:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	683a      	ldr	r2, [r7, #0]
 800633a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	1c5a      	adds	r2, r3, #1
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	601a      	str	r2, [r3, #0]
}
 800634c:	bf00      	nop
 800634e:	3714      	adds	r7, #20
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006358:	b480      	push	{r7}
 800635a:	b085      	sub	sp, #20
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800636e:	d103      	bne.n	8006378 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	691b      	ldr	r3, [r3, #16]
 8006374:	60fb      	str	r3, [r7, #12]
 8006376:	e00c      	b.n	8006392 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	3308      	adds	r3, #8
 800637c:	60fb      	str	r3, [r7, #12]
 800637e:	e002      	b.n	8006386 <vListInsert+0x2e>
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	60fb      	str	r3, [r7, #12]
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	68ba      	ldr	r2, [r7, #8]
 800638e:	429a      	cmp	r2, r3
 8006390:	d2f6      	bcs.n	8006380 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	685a      	ldr	r2, [r3, #4]
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	683a      	ldr	r2, [r7, #0]
 80063a0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	68fa      	ldr	r2, [r7, #12]
 80063a6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	683a      	ldr	r2, [r7, #0]
 80063ac:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	1c5a      	adds	r2, r3, #1
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	601a      	str	r2, [r3, #0]
}
 80063be:	bf00      	nop
 80063c0:	3714      	adds	r7, #20
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr

080063ca <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80063ca:	b480      	push	{r7}
 80063cc:	b085      	sub	sp, #20
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	6892      	ldr	r2, [r2, #8]
 80063e0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	6852      	ldr	r2, [r2, #4]
 80063ea:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d103      	bne.n	80063fe <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	689a      	ldr	r2, [r3, #8]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	1e5a      	subs	r2, r3, #1
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
}
 8006412:	4618      	mov	r0, r3
 8006414:	3714      	adds	r7, #20
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
	...

08006420 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d10a      	bne.n	800644a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006438:	f383 8811 	msr	BASEPRI, r3
 800643c:	f3bf 8f6f 	isb	sy
 8006440:	f3bf 8f4f 	dsb	sy
 8006444:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006446:	bf00      	nop
 8006448:	e7fe      	b.n	8006448 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800644a:	f001 fb6b 	bl	8007b24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006456:	68f9      	ldr	r1, [r7, #12]
 8006458:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800645a:	fb01 f303 	mul.w	r3, r1, r3
 800645e:	441a      	add	r2, r3
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2200      	movs	r2, #0
 8006468:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800647a:	3b01      	subs	r3, #1
 800647c:	68f9      	ldr	r1, [r7, #12]
 800647e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006480:	fb01 f303 	mul.w	r3, r1, r3
 8006484:	441a      	add	r2, r3
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	22ff      	movs	r2, #255	; 0xff
 800648e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	22ff      	movs	r2, #255	; 0xff
 8006496:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d114      	bne.n	80064ca <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	691b      	ldr	r3, [r3, #16]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d01a      	beq.n	80064de <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	3310      	adds	r3, #16
 80064ac:	4618      	mov	r0, r3
 80064ae:	f000 ff3f 	bl	8007330 <xTaskRemoveFromEventList>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d012      	beq.n	80064de <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80064b8:	4b0c      	ldr	r3, [pc, #48]	; (80064ec <xQueueGenericReset+0xcc>)
 80064ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064be:	601a      	str	r2, [r3, #0]
 80064c0:	f3bf 8f4f 	dsb	sy
 80064c4:	f3bf 8f6f 	isb	sy
 80064c8:	e009      	b.n	80064de <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	3310      	adds	r3, #16
 80064ce:	4618      	mov	r0, r3
 80064d0:	f7ff fef1 	bl	80062b6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	3324      	adds	r3, #36	; 0x24
 80064d8:	4618      	mov	r0, r3
 80064da:	f7ff feec 	bl	80062b6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80064de:	f001 fb51 	bl	8007b84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80064e2:	2301      	movs	r3, #1
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3710      	adds	r7, #16
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	e000ed04 	.word	0xe000ed04

080064f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b08e      	sub	sp, #56	; 0x38
 80064f4:	af02      	add	r7, sp, #8
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	60b9      	str	r1, [r7, #8]
 80064fa:	607a      	str	r2, [r7, #4]
 80064fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d10a      	bne.n	800651a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006508:	f383 8811 	msr	BASEPRI, r3
 800650c:	f3bf 8f6f 	isb	sy
 8006510:	f3bf 8f4f 	dsb	sy
 8006514:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006516:	bf00      	nop
 8006518:	e7fe      	b.n	8006518 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d10a      	bne.n	8006536 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006524:	f383 8811 	msr	BASEPRI, r3
 8006528:	f3bf 8f6f 	isb	sy
 800652c:	f3bf 8f4f 	dsb	sy
 8006530:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006532:	bf00      	nop
 8006534:	e7fe      	b.n	8006534 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d002      	beq.n	8006542 <xQueueGenericCreateStatic+0x52>
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d001      	beq.n	8006546 <xQueueGenericCreateStatic+0x56>
 8006542:	2301      	movs	r3, #1
 8006544:	e000      	b.n	8006548 <xQueueGenericCreateStatic+0x58>
 8006546:	2300      	movs	r3, #0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d10a      	bne.n	8006562 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800654c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006550:	f383 8811 	msr	BASEPRI, r3
 8006554:	f3bf 8f6f 	isb	sy
 8006558:	f3bf 8f4f 	dsb	sy
 800655c:	623b      	str	r3, [r7, #32]
}
 800655e:	bf00      	nop
 8006560:	e7fe      	b.n	8006560 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d102      	bne.n	800656e <xQueueGenericCreateStatic+0x7e>
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d101      	bne.n	8006572 <xQueueGenericCreateStatic+0x82>
 800656e:	2301      	movs	r3, #1
 8006570:	e000      	b.n	8006574 <xQueueGenericCreateStatic+0x84>
 8006572:	2300      	movs	r3, #0
 8006574:	2b00      	cmp	r3, #0
 8006576:	d10a      	bne.n	800658e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800657c:	f383 8811 	msr	BASEPRI, r3
 8006580:	f3bf 8f6f 	isb	sy
 8006584:	f3bf 8f4f 	dsb	sy
 8006588:	61fb      	str	r3, [r7, #28]
}
 800658a:	bf00      	nop
 800658c:	e7fe      	b.n	800658c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800658e:	2348      	movs	r3, #72	; 0x48
 8006590:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	2b48      	cmp	r3, #72	; 0x48
 8006596:	d00a      	beq.n	80065ae <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800659c:	f383 8811 	msr	BASEPRI, r3
 80065a0:	f3bf 8f6f 	isb	sy
 80065a4:	f3bf 8f4f 	dsb	sy
 80065a8:	61bb      	str	r3, [r7, #24]
}
 80065aa:	bf00      	nop
 80065ac:	e7fe      	b.n	80065ac <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80065ae:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80065b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d00d      	beq.n	80065d6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80065ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065bc:	2201      	movs	r2, #1
 80065be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80065c2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80065c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c8:	9300      	str	r3, [sp, #0]
 80065ca:	4613      	mov	r3, r2
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	68b9      	ldr	r1, [r7, #8]
 80065d0:	68f8      	ldr	r0, [r7, #12]
 80065d2:	f000 f83f 	bl	8006654 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80065d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80065d8:	4618      	mov	r0, r3
 80065da:	3730      	adds	r7, #48	; 0x30
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b08a      	sub	sp, #40	; 0x28
 80065e4:	af02      	add	r7, sp, #8
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	4613      	mov	r3, r2
 80065ec:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d10a      	bne.n	800660a <xQueueGenericCreate+0x2a>
	__asm volatile
 80065f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f8:	f383 8811 	msr	BASEPRI, r3
 80065fc:	f3bf 8f6f 	isb	sy
 8006600:	f3bf 8f4f 	dsb	sy
 8006604:	613b      	str	r3, [r7, #16]
}
 8006606:	bf00      	nop
 8006608:	e7fe      	b.n	8006608 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	68ba      	ldr	r2, [r7, #8]
 800660e:	fb02 f303 	mul.w	r3, r2, r3
 8006612:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	3348      	adds	r3, #72	; 0x48
 8006618:	4618      	mov	r0, r3
 800661a:	f001 fb65 	bl	8007ce8 <pvPortMalloc>
 800661e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006620:	69bb      	ldr	r3, [r7, #24]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d011      	beq.n	800664a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006626:	69bb      	ldr	r3, [r7, #24]
 8006628:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	3348      	adds	r3, #72	; 0x48
 800662e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006630:	69bb      	ldr	r3, [r7, #24]
 8006632:	2200      	movs	r2, #0
 8006634:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006638:	79fa      	ldrb	r2, [r7, #7]
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	9300      	str	r3, [sp, #0]
 800663e:	4613      	mov	r3, r2
 8006640:	697a      	ldr	r2, [r7, #20]
 8006642:	68b9      	ldr	r1, [r7, #8]
 8006644:	68f8      	ldr	r0, [r7, #12]
 8006646:	f000 f805 	bl	8006654 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800664a:	69bb      	ldr	r3, [r7, #24]
	}
 800664c:	4618      	mov	r0, r3
 800664e:	3720      	adds	r7, #32
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	60f8      	str	r0, [r7, #12]
 800665c:	60b9      	str	r1, [r7, #8]
 800665e:	607a      	str	r2, [r7, #4]
 8006660:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d103      	bne.n	8006670 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	69ba      	ldr	r2, [r7, #24]
 800666c:	601a      	str	r2, [r3, #0]
 800666e:	e002      	b.n	8006676 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006676:	69bb      	ldr	r3, [r7, #24]
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800667c:	69bb      	ldr	r3, [r7, #24]
 800667e:	68ba      	ldr	r2, [r7, #8]
 8006680:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006682:	2101      	movs	r1, #1
 8006684:	69b8      	ldr	r0, [r7, #24]
 8006686:	f7ff fecb 	bl	8006420 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800668a:	bf00      	nop
 800668c:	3710      	adds	r7, #16
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}

08006692 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006692:	b580      	push	{r7, lr}
 8006694:	b082      	sub	sp, #8
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d00e      	beq.n	80066be <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80066b2:	2300      	movs	r3, #0
 80066b4:	2200      	movs	r2, #0
 80066b6:	2100      	movs	r1, #0
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 f837 	bl	800672c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80066be:	bf00      	nop
 80066c0:	3708      	adds	r7, #8
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}

080066c6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80066c6:	b580      	push	{r7, lr}
 80066c8:	b086      	sub	sp, #24
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	4603      	mov	r3, r0
 80066ce:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80066d0:	2301      	movs	r3, #1
 80066d2:	617b      	str	r3, [r7, #20]
 80066d4:	2300      	movs	r3, #0
 80066d6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80066d8:	79fb      	ldrb	r3, [r7, #7]
 80066da:	461a      	mov	r2, r3
 80066dc:	6939      	ldr	r1, [r7, #16]
 80066de:	6978      	ldr	r0, [r7, #20]
 80066e0:	f7ff ff7e 	bl	80065e0 <xQueueGenericCreate>
 80066e4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80066e6:	68f8      	ldr	r0, [r7, #12]
 80066e8:	f7ff ffd3 	bl	8006692 <prvInitialiseMutex>

		return xNewQueue;
 80066ec:	68fb      	ldr	r3, [r7, #12]
	}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3718      	adds	r7, #24
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}

080066f6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80066f6:	b580      	push	{r7, lr}
 80066f8:	b088      	sub	sp, #32
 80066fa:	af02      	add	r7, sp, #8
 80066fc:	4603      	mov	r3, r0
 80066fe:	6039      	str	r1, [r7, #0]
 8006700:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006702:	2301      	movs	r3, #1
 8006704:	617b      	str	r3, [r7, #20]
 8006706:	2300      	movs	r3, #0
 8006708:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800670a:	79fb      	ldrb	r3, [r7, #7]
 800670c:	9300      	str	r3, [sp, #0]
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	2200      	movs	r2, #0
 8006712:	6939      	ldr	r1, [r7, #16]
 8006714:	6978      	ldr	r0, [r7, #20]
 8006716:	f7ff feeb 	bl	80064f0 <xQueueGenericCreateStatic>
 800671a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800671c:	68f8      	ldr	r0, [r7, #12]
 800671e:	f7ff ffb8 	bl	8006692 <prvInitialiseMutex>

		return xNewQueue;
 8006722:	68fb      	ldr	r3, [r7, #12]
	}
 8006724:	4618      	mov	r0, r3
 8006726:	3718      	adds	r7, #24
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b08e      	sub	sp, #56	; 0x38
 8006730:	af00      	add	r7, sp, #0
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	60b9      	str	r1, [r7, #8]
 8006736:	607a      	str	r2, [r7, #4]
 8006738:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800673a:	2300      	movs	r3, #0
 800673c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006744:	2b00      	cmp	r3, #0
 8006746:	d10a      	bne.n	800675e <xQueueGenericSend+0x32>
	__asm volatile
 8006748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800674c:	f383 8811 	msr	BASEPRI, r3
 8006750:	f3bf 8f6f 	isb	sy
 8006754:	f3bf 8f4f 	dsb	sy
 8006758:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800675a:	bf00      	nop
 800675c:	e7fe      	b.n	800675c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d103      	bne.n	800676c <xQueueGenericSend+0x40>
 8006764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006768:	2b00      	cmp	r3, #0
 800676a:	d101      	bne.n	8006770 <xQueueGenericSend+0x44>
 800676c:	2301      	movs	r3, #1
 800676e:	e000      	b.n	8006772 <xQueueGenericSend+0x46>
 8006770:	2300      	movs	r3, #0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d10a      	bne.n	800678c <xQueueGenericSend+0x60>
	__asm volatile
 8006776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800677a:	f383 8811 	msr	BASEPRI, r3
 800677e:	f3bf 8f6f 	isb	sy
 8006782:	f3bf 8f4f 	dsb	sy
 8006786:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006788:	bf00      	nop
 800678a:	e7fe      	b.n	800678a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	2b02      	cmp	r3, #2
 8006790:	d103      	bne.n	800679a <xQueueGenericSend+0x6e>
 8006792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006796:	2b01      	cmp	r3, #1
 8006798:	d101      	bne.n	800679e <xQueueGenericSend+0x72>
 800679a:	2301      	movs	r3, #1
 800679c:	e000      	b.n	80067a0 <xQueueGenericSend+0x74>
 800679e:	2300      	movs	r3, #0
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d10a      	bne.n	80067ba <xQueueGenericSend+0x8e>
	__asm volatile
 80067a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a8:	f383 8811 	msr	BASEPRI, r3
 80067ac:	f3bf 8f6f 	isb	sy
 80067b0:	f3bf 8f4f 	dsb	sy
 80067b4:	623b      	str	r3, [r7, #32]
}
 80067b6:	bf00      	nop
 80067b8:	e7fe      	b.n	80067b8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80067ba:	f000 ff79 	bl	80076b0 <xTaskGetSchedulerState>
 80067be:	4603      	mov	r3, r0
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d102      	bne.n	80067ca <xQueueGenericSend+0x9e>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d101      	bne.n	80067ce <xQueueGenericSend+0xa2>
 80067ca:	2301      	movs	r3, #1
 80067cc:	e000      	b.n	80067d0 <xQueueGenericSend+0xa4>
 80067ce:	2300      	movs	r3, #0
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d10a      	bne.n	80067ea <xQueueGenericSend+0xbe>
	__asm volatile
 80067d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d8:	f383 8811 	msr	BASEPRI, r3
 80067dc:	f3bf 8f6f 	isb	sy
 80067e0:	f3bf 8f4f 	dsb	sy
 80067e4:	61fb      	str	r3, [r7, #28]
}
 80067e6:	bf00      	nop
 80067e8:	e7fe      	b.n	80067e8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80067ea:	f001 f99b 	bl	8007b24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80067ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d302      	bcc.n	8006800 <xQueueGenericSend+0xd4>
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	2b02      	cmp	r3, #2
 80067fe:	d129      	bne.n	8006854 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006800:	683a      	ldr	r2, [r7, #0]
 8006802:	68b9      	ldr	r1, [r7, #8]
 8006804:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006806:	f000 f88f 	bl	8006928 <prvCopyDataToQueue>
 800680a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800680c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006810:	2b00      	cmp	r3, #0
 8006812:	d010      	beq.n	8006836 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006816:	3324      	adds	r3, #36	; 0x24
 8006818:	4618      	mov	r0, r3
 800681a:	f000 fd89 	bl	8007330 <xTaskRemoveFromEventList>
 800681e:	4603      	mov	r3, r0
 8006820:	2b00      	cmp	r3, #0
 8006822:	d013      	beq.n	800684c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006824:	4b3f      	ldr	r3, [pc, #252]	; (8006924 <xQueueGenericSend+0x1f8>)
 8006826:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800682a:	601a      	str	r2, [r3, #0]
 800682c:	f3bf 8f4f 	dsb	sy
 8006830:	f3bf 8f6f 	isb	sy
 8006834:	e00a      	b.n	800684c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006838:	2b00      	cmp	r3, #0
 800683a:	d007      	beq.n	800684c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800683c:	4b39      	ldr	r3, [pc, #228]	; (8006924 <xQueueGenericSend+0x1f8>)
 800683e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006842:	601a      	str	r2, [r3, #0]
 8006844:	f3bf 8f4f 	dsb	sy
 8006848:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800684c:	f001 f99a 	bl	8007b84 <vPortExitCritical>
				return pdPASS;
 8006850:	2301      	movs	r3, #1
 8006852:	e063      	b.n	800691c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d103      	bne.n	8006862 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800685a:	f001 f993 	bl	8007b84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800685e:	2300      	movs	r3, #0
 8006860:	e05c      	b.n	800691c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006864:	2b00      	cmp	r3, #0
 8006866:	d106      	bne.n	8006876 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006868:	f107 0314 	add.w	r3, r7, #20
 800686c:	4618      	mov	r0, r3
 800686e:	f000 fdc1 	bl	80073f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006872:	2301      	movs	r3, #1
 8006874:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006876:	f001 f985 	bl	8007b84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800687a:	f000 fb71 	bl	8006f60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800687e:	f001 f951 	bl	8007b24 <vPortEnterCritical>
 8006882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006884:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006888:	b25b      	sxtb	r3, r3
 800688a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800688e:	d103      	bne.n	8006898 <xQueueGenericSend+0x16c>
 8006890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006892:	2200      	movs	r2, #0
 8006894:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800689a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800689e:	b25b      	sxtb	r3, r3
 80068a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068a4:	d103      	bne.n	80068ae <xQueueGenericSend+0x182>
 80068a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a8:	2200      	movs	r2, #0
 80068aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068ae:	f001 f969 	bl	8007b84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80068b2:	1d3a      	adds	r2, r7, #4
 80068b4:	f107 0314 	add.w	r3, r7, #20
 80068b8:	4611      	mov	r1, r2
 80068ba:	4618      	mov	r0, r3
 80068bc:	f000 fdb0 	bl	8007420 <xTaskCheckForTimeOut>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d124      	bne.n	8006910 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80068c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068c8:	f000 f8ea 	bl	8006aa0 <prvIsQueueFull>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d018      	beq.n	8006904 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80068d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d4:	3310      	adds	r3, #16
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	4611      	mov	r1, r2
 80068da:	4618      	mov	r0, r3
 80068dc:	f000 fd04 	bl	80072e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80068e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068e2:	f000 f88b 	bl	80069fc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80068e6:	f000 fb49 	bl	8006f7c <xTaskResumeAll>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	f47f af7c 	bne.w	80067ea <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80068f2:	4b0c      	ldr	r3, [pc, #48]	; (8006924 <xQueueGenericSend+0x1f8>)
 80068f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068f8:	601a      	str	r2, [r3, #0]
 80068fa:	f3bf 8f4f 	dsb	sy
 80068fe:	f3bf 8f6f 	isb	sy
 8006902:	e772      	b.n	80067ea <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006904:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006906:	f000 f879 	bl	80069fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800690a:	f000 fb37 	bl	8006f7c <xTaskResumeAll>
 800690e:	e76c      	b.n	80067ea <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006910:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006912:	f000 f873 	bl	80069fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006916:	f000 fb31 	bl	8006f7c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800691a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800691c:	4618      	mov	r0, r3
 800691e:	3738      	adds	r7, #56	; 0x38
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}
 8006924:	e000ed04 	.word	0xe000ed04

08006928 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b086      	sub	sp, #24
 800692c:	af00      	add	r7, sp, #0
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	60b9      	str	r1, [r7, #8]
 8006932:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006934:	2300      	movs	r3, #0
 8006936:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800693c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006942:	2b00      	cmp	r3, #0
 8006944:	d10d      	bne.n	8006962 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d14d      	bne.n	80069ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	4618      	mov	r0, r3
 8006954:	f000 feca 	bl	80076ec <xTaskPriorityDisinherit>
 8006958:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2200      	movs	r2, #0
 800695e:	609a      	str	r2, [r3, #8]
 8006960:	e043      	b.n	80069ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d119      	bne.n	800699c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6858      	ldr	r0, [r3, #4]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006970:	461a      	mov	r2, r3
 8006972:	68b9      	ldr	r1, [r7, #8]
 8006974:	f001 fbc8 	bl	8008108 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	685a      	ldr	r2, [r3, #4]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006980:	441a      	add	r2, r3
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	685a      	ldr	r2, [r3, #4]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	429a      	cmp	r2, r3
 8006990:	d32b      	bcc.n	80069ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	605a      	str	r2, [r3, #4]
 800699a:	e026      	b.n	80069ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	68d8      	ldr	r0, [r3, #12]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a4:	461a      	mov	r2, r3
 80069a6:	68b9      	ldr	r1, [r7, #8]
 80069a8:	f001 fbae 	bl	8008108 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	68da      	ldr	r2, [r3, #12]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b4:	425b      	negs	r3, r3
 80069b6:	441a      	add	r2, r3
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	68da      	ldr	r2, [r3, #12]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d207      	bcs.n	80069d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	689a      	ldr	r2, [r3, #8]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d0:	425b      	negs	r3, r3
 80069d2:	441a      	add	r2, r3
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2b02      	cmp	r3, #2
 80069dc:	d105      	bne.n	80069ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d002      	beq.n	80069ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	3b01      	subs	r3, #1
 80069e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	1c5a      	adds	r2, r3, #1
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80069f2:	697b      	ldr	r3, [r7, #20]
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3718      	adds	r7, #24
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006a04:	f001 f88e 	bl	8007b24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a0e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a10:	e011      	b.n	8006a36 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d012      	beq.n	8006a40 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	3324      	adds	r3, #36	; 0x24
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f000 fc86 	bl	8007330 <xTaskRemoveFromEventList>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d001      	beq.n	8006a2e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006a2a:	f000 fd5b 	bl	80074e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006a2e:	7bfb      	ldrb	r3, [r7, #15]
 8006a30:	3b01      	subs	r3, #1
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	dce9      	bgt.n	8006a12 <prvUnlockQueue+0x16>
 8006a3e:	e000      	b.n	8006a42 <prvUnlockQueue+0x46>
					break;
 8006a40:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	22ff      	movs	r2, #255	; 0xff
 8006a46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006a4a:	f001 f89b 	bl	8007b84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006a4e:	f001 f869 	bl	8007b24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a58:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a5a:	e011      	b.n	8006a80 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	691b      	ldr	r3, [r3, #16]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d012      	beq.n	8006a8a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	3310      	adds	r3, #16
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f000 fc61 	bl	8007330 <xTaskRemoveFromEventList>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d001      	beq.n	8006a78 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006a74:	f000 fd36 	bl	80074e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006a78:	7bbb      	ldrb	r3, [r7, #14]
 8006a7a:	3b01      	subs	r3, #1
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	dce9      	bgt.n	8006a5c <prvUnlockQueue+0x60>
 8006a88:	e000      	b.n	8006a8c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006a8a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	22ff      	movs	r2, #255	; 0xff
 8006a90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006a94:	f001 f876 	bl	8007b84 <vPortExitCritical>
}
 8006a98:	bf00      	nop
 8006a9a:	3710      	adds	r7, #16
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006aa8:	f001 f83c 	bl	8007b24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d102      	bne.n	8006abe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	60fb      	str	r3, [r7, #12]
 8006abc:	e001      	b.n	8006ac2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006ac2:	f001 f85f 	bl	8007b84 <vPortExitCritical>

	return xReturn;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3710      	adds	r7, #16
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b08e      	sub	sp, #56	; 0x38
 8006ad4:	af04      	add	r7, sp, #16
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	607a      	str	r2, [r7, #4]
 8006adc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d10a      	bne.n	8006afa <xTaskCreateStatic+0x2a>
	__asm volatile
 8006ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae8:	f383 8811 	msr	BASEPRI, r3
 8006aec:	f3bf 8f6f 	isb	sy
 8006af0:	f3bf 8f4f 	dsb	sy
 8006af4:	623b      	str	r3, [r7, #32]
}
 8006af6:	bf00      	nop
 8006af8:	e7fe      	b.n	8006af8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d10a      	bne.n	8006b16 <xTaskCreateStatic+0x46>
	__asm volatile
 8006b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b04:	f383 8811 	msr	BASEPRI, r3
 8006b08:	f3bf 8f6f 	isb	sy
 8006b0c:	f3bf 8f4f 	dsb	sy
 8006b10:	61fb      	str	r3, [r7, #28]
}
 8006b12:	bf00      	nop
 8006b14:	e7fe      	b.n	8006b14 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006b16:	23b4      	movs	r3, #180	; 0xb4
 8006b18:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	2bb4      	cmp	r3, #180	; 0xb4
 8006b1e:	d00a      	beq.n	8006b36 <xTaskCreateStatic+0x66>
	__asm volatile
 8006b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b24:	f383 8811 	msr	BASEPRI, r3
 8006b28:	f3bf 8f6f 	isb	sy
 8006b2c:	f3bf 8f4f 	dsb	sy
 8006b30:	61bb      	str	r3, [r7, #24]
}
 8006b32:	bf00      	nop
 8006b34:	e7fe      	b.n	8006b34 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006b36:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d01e      	beq.n	8006b7c <xTaskCreateStatic+0xac>
 8006b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d01b      	beq.n	8006b7c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b46:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b4c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b50:	2202      	movs	r2, #2
 8006b52:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006b56:	2300      	movs	r3, #0
 8006b58:	9303      	str	r3, [sp, #12]
 8006b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5c:	9302      	str	r3, [sp, #8]
 8006b5e:	f107 0314 	add.w	r3, r7, #20
 8006b62:	9301      	str	r3, [sp, #4]
 8006b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b66:	9300      	str	r3, [sp, #0]
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	68b9      	ldr	r1, [r7, #8]
 8006b6e:	68f8      	ldr	r0, [r7, #12]
 8006b70:	f000 f850 	bl	8006c14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b76:	f000 f8eb 	bl	8006d50 <prvAddNewTaskToReadyList>
 8006b7a:	e001      	b.n	8006b80 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006b80:	697b      	ldr	r3, [r7, #20]
	}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3728      	adds	r7, #40	; 0x28
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}

08006b8a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006b8a:	b580      	push	{r7, lr}
 8006b8c:	b08c      	sub	sp, #48	; 0x30
 8006b8e:	af04      	add	r7, sp, #16
 8006b90:	60f8      	str	r0, [r7, #12]
 8006b92:	60b9      	str	r1, [r7, #8]
 8006b94:	603b      	str	r3, [r7, #0]
 8006b96:	4613      	mov	r3, r2
 8006b98:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006b9a:	88fb      	ldrh	r3, [r7, #6]
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f001 f8a2 	bl	8007ce8 <pvPortMalloc>
 8006ba4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d00e      	beq.n	8006bca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006bac:	20b4      	movs	r0, #180	; 0xb4
 8006bae:	f001 f89b 	bl	8007ce8 <pvPortMalloc>
 8006bb2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d003      	beq.n	8006bc2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006bba:	69fb      	ldr	r3, [r7, #28]
 8006bbc:	697a      	ldr	r2, [r7, #20]
 8006bbe:	631a      	str	r2, [r3, #48]	; 0x30
 8006bc0:	e005      	b.n	8006bce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006bc2:	6978      	ldr	r0, [r7, #20]
 8006bc4:	f001 f95c 	bl	8007e80 <vPortFree>
 8006bc8:	e001      	b.n	8006bce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006bce:	69fb      	ldr	r3, [r7, #28]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d017      	beq.n	8006c04 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006bdc:	88fa      	ldrh	r2, [r7, #6]
 8006bde:	2300      	movs	r3, #0
 8006be0:	9303      	str	r3, [sp, #12]
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	9302      	str	r3, [sp, #8]
 8006be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be8:	9301      	str	r3, [sp, #4]
 8006bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bec:	9300      	str	r3, [sp, #0]
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	68b9      	ldr	r1, [r7, #8]
 8006bf2:	68f8      	ldr	r0, [r7, #12]
 8006bf4:	f000 f80e 	bl	8006c14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006bf8:	69f8      	ldr	r0, [r7, #28]
 8006bfa:	f000 f8a9 	bl	8006d50 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	61bb      	str	r3, [r7, #24]
 8006c02:	e002      	b.n	8006c0a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006c04:	f04f 33ff 	mov.w	r3, #4294967295
 8006c08:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006c0a:	69bb      	ldr	r3, [r7, #24]
	}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3720      	adds	r7, #32
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b088      	sub	sp, #32
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	60f8      	str	r0, [r7, #12]
 8006c1c:	60b9      	str	r1, [r7, #8]
 8006c1e:	607a      	str	r2, [r7, #4]
 8006c20:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006c2c:	3b01      	subs	r3, #1
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	4413      	add	r3, r2
 8006c32:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006c34:	69bb      	ldr	r3, [r7, #24]
 8006c36:	f023 0307 	bic.w	r3, r3, #7
 8006c3a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006c3c:	69bb      	ldr	r3, [r7, #24]
 8006c3e:	f003 0307 	and.w	r3, r3, #7
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d00a      	beq.n	8006c5c <prvInitialiseNewTask+0x48>
	__asm volatile
 8006c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c4a:	f383 8811 	msr	BASEPRI, r3
 8006c4e:	f3bf 8f6f 	isb	sy
 8006c52:	f3bf 8f4f 	dsb	sy
 8006c56:	617b      	str	r3, [r7, #20]
}
 8006c58:	bf00      	nop
 8006c5a:	e7fe      	b.n	8006c5a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d01f      	beq.n	8006ca2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c62:	2300      	movs	r3, #0
 8006c64:	61fb      	str	r3, [r7, #28]
 8006c66:	e012      	b.n	8006c8e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006c68:	68ba      	ldr	r2, [r7, #8]
 8006c6a:	69fb      	ldr	r3, [r7, #28]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	7819      	ldrb	r1, [r3, #0]
 8006c70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c72:	69fb      	ldr	r3, [r7, #28]
 8006c74:	4413      	add	r3, r2
 8006c76:	3334      	adds	r3, #52	; 0x34
 8006c78:	460a      	mov	r2, r1
 8006c7a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006c7c:	68ba      	ldr	r2, [r7, #8]
 8006c7e:	69fb      	ldr	r3, [r7, #28]
 8006c80:	4413      	add	r3, r2
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d006      	beq.n	8006c96 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c88:	69fb      	ldr	r3, [r7, #28]
 8006c8a:	3301      	adds	r3, #1
 8006c8c:	61fb      	str	r3, [r7, #28]
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	2b0f      	cmp	r3, #15
 8006c92:	d9e9      	bls.n	8006c68 <prvInitialiseNewTask+0x54>
 8006c94:	e000      	b.n	8006c98 <prvInitialiseNewTask+0x84>
			{
				break;
 8006c96:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ca0:	e003      	b.n	8006caa <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cac:	2b06      	cmp	r3, #6
 8006cae:	d901      	bls.n	8006cb4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006cb0:	2306      	movs	r3, #6
 8006cb2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cb8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cbe:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc8:	3304      	adds	r3, #4
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f7ff fb13 	bl	80062f6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd2:	3318      	adds	r3, #24
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f7ff fb0e 	bl	80062f6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cde:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce2:	f1c3 0207 	rsb	r2, r3, #7
 8006ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d02:	334c      	adds	r3, #76	; 0x4c
 8006d04:	2260      	movs	r2, #96	; 0x60
 8006d06:	2100      	movs	r1, #0
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f001 fa0b 	bl	8008124 <memset>
 8006d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d10:	4a0c      	ldr	r2, [pc, #48]	; (8006d44 <prvInitialiseNewTask+0x130>)
 8006d12:	651a      	str	r2, [r3, #80]	; 0x50
 8006d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d16:	4a0c      	ldr	r2, [pc, #48]	; (8006d48 <prvInitialiseNewTask+0x134>)
 8006d18:	655a      	str	r2, [r3, #84]	; 0x54
 8006d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1c:	4a0b      	ldr	r2, [pc, #44]	; (8006d4c <prvInitialiseNewTask+0x138>)
 8006d1e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006d20:	683a      	ldr	r2, [r7, #0]
 8006d22:	68f9      	ldr	r1, [r7, #12]
 8006d24:	69b8      	ldr	r0, [r7, #24]
 8006d26:	f000 fdcd 	bl	80078c4 <pxPortInitialiseStack>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d002      	beq.n	8006d3c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d3a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d3c:	bf00      	nop
 8006d3e:	3720      	adds	r7, #32
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}
 8006d44:	08008398 	.word	0x08008398
 8006d48:	080083b8 	.word	0x080083b8
 8006d4c:	08008378 	.word	0x08008378

08006d50 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006d58:	f000 fee4 	bl	8007b24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006d5c:	4b2a      	ldr	r3, [pc, #168]	; (8006e08 <prvAddNewTaskToReadyList+0xb8>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	3301      	adds	r3, #1
 8006d62:	4a29      	ldr	r2, [pc, #164]	; (8006e08 <prvAddNewTaskToReadyList+0xb8>)
 8006d64:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006d66:	4b29      	ldr	r3, [pc, #164]	; (8006e0c <prvAddNewTaskToReadyList+0xbc>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d109      	bne.n	8006d82 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006d6e:	4a27      	ldr	r2, [pc, #156]	; (8006e0c <prvAddNewTaskToReadyList+0xbc>)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006d74:	4b24      	ldr	r3, [pc, #144]	; (8006e08 <prvAddNewTaskToReadyList+0xb8>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d110      	bne.n	8006d9e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006d7c:	f000 fbd6 	bl	800752c <prvInitialiseTaskLists>
 8006d80:	e00d      	b.n	8006d9e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006d82:	4b23      	ldr	r3, [pc, #140]	; (8006e10 <prvAddNewTaskToReadyList+0xc0>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d109      	bne.n	8006d9e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006d8a:	4b20      	ldr	r3, [pc, #128]	; (8006e0c <prvAddNewTaskToReadyList+0xbc>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d802      	bhi.n	8006d9e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006d98:	4a1c      	ldr	r2, [pc, #112]	; (8006e0c <prvAddNewTaskToReadyList+0xbc>)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006d9e:	4b1d      	ldr	r3, [pc, #116]	; (8006e14 <prvAddNewTaskToReadyList+0xc4>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	3301      	adds	r3, #1
 8006da4:	4a1b      	ldr	r2, [pc, #108]	; (8006e14 <prvAddNewTaskToReadyList+0xc4>)
 8006da6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dac:	2201      	movs	r2, #1
 8006dae:	409a      	lsls	r2, r3
 8006db0:	4b19      	ldr	r3, [pc, #100]	; (8006e18 <prvAddNewTaskToReadyList+0xc8>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	4a18      	ldr	r2, [pc, #96]	; (8006e18 <prvAddNewTaskToReadyList+0xc8>)
 8006db8:	6013      	str	r3, [r2, #0]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dbe:	4613      	mov	r3, r2
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	4413      	add	r3, r2
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	4a15      	ldr	r2, [pc, #84]	; (8006e1c <prvAddNewTaskToReadyList+0xcc>)
 8006dc8:	441a      	add	r2, r3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	3304      	adds	r3, #4
 8006dce:	4619      	mov	r1, r3
 8006dd0:	4610      	mov	r0, r2
 8006dd2:	f7ff fa9d 	bl	8006310 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006dd6:	f000 fed5 	bl	8007b84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006dda:	4b0d      	ldr	r3, [pc, #52]	; (8006e10 <prvAddNewTaskToReadyList+0xc0>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00e      	beq.n	8006e00 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006de2:	4b0a      	ldr	r3, [pc, #40]	; (8006e0c <prvAddNewTaskToReadyList+0xbc>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d207      	bcs.n	8006e00 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006df0:	4b0b      	ldr	r3, [pc, #44]	; (8006e20 <prvAddNewTaskToReadyList+0xd0>)
 8006df2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006df6:	601a      	str	r2, [r3, #0]
 8006df8:	f3bf 8f4f 	dsb	sy
 8006dfc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e00:	bf00      	nop
 8006e02:	3708      	adds	r7, #8
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}
 8006e08:	20000668 	.word	0x20000668
 8006e0c:	20000568 	.word	0x20000568
 8006e10:	20000674 	.word	0x20000674
 8006e14:	20000684 	.word	0x20000684
 8006e18:	20000670 	.word	0x20000670
 8006e1c:	2000056c 	.word	0x2000056c
 8006e20:	e000ed04 	.word	0xe000ed04

08006e24 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b084      	sub	sp, #16
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d017      	beq.n	8006e66 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006e36:	4b13      	ldr	r3, [pc, #76]	; (8006e84 <vTaskDelay+0x60>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d00a      	beq.n	8006e54 <vTaskDelay+0x30>
	__asm volatile
 8006e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e42:	f383 8811 	msr	BASEPRI, r3
 8006e46:	f3bf 8f6f 	isb	sy
 8006e4a:	f3bf 8f4f 	dsb	sy
 8006e4e:	60bb      	str	r3, [r7, #8]
}
 8006e50:	bf00      	nop
 8006e52:	e7fe      	b.n	8006e52 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006e54:	f000 f884 	bl	8006f60 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006e58:	2100      	movs	r1, #0
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 fccc 	bl	80077f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006e60:	f000 f88c 	bl	8006f7c <xTaskResumeAll>
 8006e64:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d107      	bne.n	8006e7c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006e6c:	4b06      	ldr	r3, [pc, #24]	; (8006e88 <vTaskDelay+0x64>)
 8006e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e72:	601a      	str	r2, [r3, #0]
 8006e74:	f3bf 8f4f 	dsb	sy
 8006e78:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006e7c:	bf00      	nop
 8006e7e:	3710      	adds	r7, #16
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	20000690 	.word	0x20000690
 8006e88:	e000ed04 	.word	0xe000ed04

08006e8c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b08a      	sub	sp, #40	; 0x28
 8006e90:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006e92:	2300      	movs	r3, #0
 8006e94:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006e96:	2300      	movs	r3, #0
 8006e98:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006e9a:	463a      	mov	r2, r7
 8006e9c:	1d39      	adds	r1, r7, #4
 8006e9e:	f107 0308 	add.w	r3, r7, #8
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f7f9 fb10 	bl	80004c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006ea8:	6839      	ldr	r1, [r7, #0]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	68ba      	ldr	r2, [r7, #8]
 8006eae:	9202      	str	r2, [sp, #8]
 8006eb0:	9301      	str	r3, [sp, #4]
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	9300      	str	r3, [sp, #0]
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	460a      	mov	r2, r1
 8006eba:	4921      	ldr	r1, [pc, #132]	; (8006f40 <vTaskStartScheduler+0xb4>)
 8006ebc:	4821      	ldr	r0, [pc, #132]	; (8006f44 <vTaskStartScheduler+0xb8>)
 8006ebe:	f7ff fe07 	bl	8006ad0 <xTaskCreateStatic>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	4a20      	ldr	r2, [pc, #128]	; (8006f48 <vTaskStartScheduler+0xbc>)
 8006ec6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006ec8:	4b1f      	ldr	r3, [pc, #124]	; (8006f48 <vTaskStartScheduler+0xbc>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d002      	beq.n	8006ed6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	617b      	str	r3, [r7, #20]
 8006ed4:	e001      	b.n	8006eda <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d11b      	bne.n	8006f18 <vTaskStartScheduler+0x8c>
	__asm volatile
 8006ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee4:	f383 8811 	msr	BASEPRI, r3
 8006ee8:	f3bf 8f6f 	isb	sy
 8006eec:	f3bf 8f4f 	dsb	sy
 8006ef0:	613b      	str	r3, [r7, #16]
}
 8006ef2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006ef4:	4b15      	ldr	r3, [pc, #84]	; (8006f4c <vTaskStartScheduler+0xc0>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	334c      	adds	r3, #76	; 0x4c
 8006efa:	4a15      	ldr	r2, [pc, #84]	; (8006f50 <vTaskStartScheduler+0xc4>)
 8006efc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006efe:	4b15      	ldr	r3, [pc, #84]	; (8006f54 <vTaskStartScheduler+0xc8>)
 8006f00:	f04f 32ff 	mov.w	r2, #4294967295
 8006f04:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006f06:	4b14      	ldr	r3, [pc, #80]	; (8006f58 <vTaskStartScheduler+0xcc>)
 8006f08:	2201      	movs	r2, #1
 8006f0a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006f0c:	4b13      	ldr	r3, [pc, #76]	; (8006f5c <vTaskStartScheduler+0xd0>)
 8006f0e:	2200      	movs	r2, #0
 8006f10:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006f12:	f000 fd65 	bl	80079e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006f16:	e00e      	b.n	8006f36 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f1e:	d10a      	bne.n	8006f36 <vTaskStartScheduler+0xaa>
	__asm volatile
 8006f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f24:	f383 8811 	msr	BASEPRI, r3
 8006f28:	f3bf 8f6f 	isb	sy
 8006f2c:	f3bf 8f4f 	dsb	sy
 8006f30:	60fb      	str	r3, [r7, #12]
}
 8006f32:	bf00      	nop
 8006f34:	e7fe      	b.n	8006f34 <vTaskStartScheduler+0xa8>
}
 8006f36:	bf00      	nop
 8006f38:	3718      	adds	r7, #24
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	bf00      	nop
 8006f40:	08008358 	.word	0x08008358
 8006f44:	080074fd 	.word	0x080074fd
 8006f48:	2000068c 	.word	0x2000068c
 8006f4c:	20000568 	.word	0x20000568
 8006f50:	20000010 	.word	0x20000010
 8006f54:	20000688 	.word	0x20000688
 8006f58:	20000674 	.word	0x20000674
 8006f5c:	2000066c 	.word	0x2000066c

08006f60 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006f60:	b480      	push	{r7}
 8006f62:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006f64:	4b04      	ldr	r3, [pc, #16]	; (8006f78 <vTaskSuspendAll+0x18>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	3301      	adds	r3, #1
 8006f6a:	4a03      	ldr	r2, [pc, #12]	; (8006f78 <vTaskSuspendAll+0x18>)
 8006f6c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006f6e:	bf00      	nop
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr
 8006f78:	20000690 	.word	0x20000690

08006f7c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006f82:	2300      	movs	r3, #0
 8006f84:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006f86:	2300      	movs	r3, #0
 8006f88:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006f8a:	4b41      	ldr	r3, [pc, #260]	; (8007090 <xTaskResumeAll+0x114>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d10a      	bne.n	8006fa8 <xTaskResumeAll+0x2c>
	__asm volatile
 8006f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f96:	f383 8811 	msr	BASEPRI, r3
 8006f9a:	f3bf 8f6f 	isb	sy
 8006f9e:	f3bf 8f4f 	dsb	sy
 8006fa2:	603b      	str	r3, [r7, #0]
}
 8006fa4:	bf00      	nop
 8006fa6:	e7fe      	b.n	8006fa6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006fa8:	f000 fdbc 	bl	8007b24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006fac:	4b38      	ldr	r3, [pc, #224]	; (8007090 <xTaskResumeAll+0x114>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	3b01      	subs	r3, #1
 8006fb2:	4a37      	ldr	r2, [pc, #220]	; (8007090 <xTaskResumeAll+0x114>)
 8006fb4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fb6:	4b36      	ldr	r3, [pc, #216]	; (8007090 <xTaskResumeAll+0x114>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d161      	bne.n	8007082 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006fbe:	4b35      	ldr	r3, [pc, #212]	; (8007094 <xTaskResumeAll+0x118>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d05d      	beq.n	8007082 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006fc6:	e02e      	b.n	8007026 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fc8:	4b33      	ldr	r3, [pc, #204]	; (8007098 <xTaskResumeAll+0x11c>)
 8006fca:	68db      	ldr	r3, [r3, #12]
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	3318      	adds	r3, #24
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f7ff f9f8 	bl	80063ca <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	3304      	adds	r3, #4
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f7ff f9f3 	bl	80063ca <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe8:	2201      	movs	r2, #1
 8006fea:	409a      	lsls	r2, r3
 8006fec:	4b2b      	ldr	r3, [pc, #172]	; (800709c <xTaskResumeAll+0x120>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	4a2a      	ldr	r2, [pc, #168]	; (800709c <xTaskResumeAll+0x120>)
 8006ff4:	6013      	str	r3, [r2, #0]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ffa:	4613      	mov	r3, r2
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	4413      	add	r3, r2
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	4a27      	ldr	r2, [pc, #156]	; (80070a0 <xTaskResumeAll+0x124>)
 8007004:	441a      	add	r2, r3
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	3304      	adds	r3, #4
 800700a:	4619      	mov	r1, r3
 800700c:	4610      	mov	r0, r2
 800700e:	f7ff f97f 	bl	8006310 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007016:	4b23      	ldr	r3, [pc, #140]	; (80070a4 <xTaskResumeAll+0x128>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800701c:	429a      	cmp	r2, r3
 800701e:	d302      	bcc.n	8007026 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007020:	4b21      	ldr	r3, [pc, #132]	; (80070a8 <xTaskResumeAll+0x12c>)
 8007022:	2201      	movs	r2, #1
 8007024:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007026:	4b1c      	ldr	r3, [pc, #112]	; (8007098 <xTaskResumeAll+0x11c>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d1cc      	bne.n	8006fc8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d001      	beq.n	8007038 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007034:	f000 fb1c 	bl	8007670 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007038:	4b1c      	ldr	r3, [pc, #112]	; (80070ac <xTaskResumeAll+0x130>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d010      	beq.n	8007066 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007044:	f000 f836 	bl	80070b4 <xTaskIncrementTick>
 8007048:	4603      	mov	r3, r0
 800704a:	2b00      	cmp	r3, #0
 800704c:	d002      	beq.n	8007054 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800704e:	4b16      	ldr	r3, [pc, #88]	; (80070a8 <xTaskResumeAll+0x12c>)
 8007050:	2201      	movs	r2, #1
 8007052:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	3b01      	subs	r3, #1
 8007058:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d1f1      	bne.n	8007044 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007060:	4b12      	ldr	r3, [pc, #72]	; (80070ac <xTaskResumeAll+0x130>)
 8007062:	2200      	movs	r2, #0
 8007064:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007066:	4b10      	ldr	r3, [pc, #64]	; (80070a8 <xTaskResumeAll+0x12c>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d009      	beq.n	8007082 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800706e:	2301      	movs	r3, #1
 8007070:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007072:	4b0f      	ldr	r3, [pc, #60]	; (80070b0 <xTaskResumeAll+0x134>)
 8007074:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007078:	601a      	str	r2, [r3, #0]
 800707a:	f3bf 8f4f 	dsb	sy
 800707e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007082:	f000 fd7f 	bl	8007b84 <vPortExitCritical>

	return xAlreadyYielded;
 8007086:	68bb      	ldr	r3, [r7, #8]
}
 8007088:	4618      	mov	r0, r3
 800708a:	3710      	adds	r7, #16
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}
 8007090:	20000690 	.word	0x20000690
 8007094:	20000668 	.word	0x20000668
 8007098:	20000628 	.word	0x20000628
 800709c:	20000670 	.word	0x20000670
 80070a0:	2000056c 	.word	0x2000056c
 80070a4:	20000568 	.word	0x20000568
 80070a8:	2000067c 	.word	0x2000067c
 80070ac:	20000678 	.word	0x20000678
 80070b0:	e000ed04 	.word	0xe000ed04

080070b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b086      	sub	sp, #24
 80070b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80070ba:	2300      	movs	r3, #0
 80070bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070be:	4b4e      	ldr	r3, [pc, #312]	; (80071f8 <xTaskIncrementTick+0x144>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	f040 808e 	bne.w	80071e4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80070c8:	4b4c      	ldr	r3, [pc, #304]	; (80071fc <xTaskIncrementTick+0x148>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	3301      	adds	r3, #1
 80070ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80070d0:	4a4a      	ldr	r2, [pc, #296]	; (80071fc <xTaskIncrementTick+0x148>)
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d120      	bne.n	800711e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80070dc:	4b48      	ldr	r3, [pc, #288]	; (8007200 <xTaskIncrementTick+0x14c>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d00a      	beq.n	80070fc <xTaskIncrementTick+0x48>
	__asm volatile
 80070e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ea:	f383 8811 	msr	BASEPRI, r3
 80070ee:	f3bf 8f6f 	isb	sy
 80070f2:	f3bf 8f4f 	dsb	sy
 80070f6:	603b      	str	r3, [r7, #0]
}
 80070f8:	bf00      	nop
 80070fa:	e7fe      	b.n	80070fa <xTaskIncrementTick+0x46>
 80070fc:	4b40      	ldr	r3, [pc, #256]	; (8007200 <xTaskIncrementTick+0x14c>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	60fb      	str	r3, [r7, #12]
 8007102:	4b40      	ldr	r3, [pc, #256]	; (8007204 <xTaskIncrementTick+0x150>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a3e      	ldr	r2, [pc, #248]	; (8007200 <xTaskIncrementTick+0x14c>)
 8007108:	6013      	str	r3, [r2, #0]
 800710a:	4a3e      	ldr	r2, [pc, #248]	; (8007204 <xTaskIncrementTick+0x150>)
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6013      	str	r3, [r2, #0]
 8007110:	4b3d      	ldr	r3, [pc, #244]	; (8007208 <xTaskIncrementTick+0x154>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	3301      	adds	r3, #1
 8007116:	4a3c      	ldr	r2, [pc, #240]	; (8007208 <xTaskIncrementTick+0x154>)
 8007118:	6013      	str	r3, [r2, #0]
 800711a:	f000 faa9 	bl	8007670 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800711e:	4b3b      	ldr	r3, [pc, #236]	; (800720c <xTaskIncrementTick+0x158>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	693a      	ldr	r2, [r7, #16]
 8007124:	429a      	cmp	r2, r3
 8007126:	d348      	bcc.n	80071ba <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007128:	4b35      	ldr	r3, [pc, #212]	; (8007200 <xTaskIncrementTick+0x14c>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d104      	bne.n	800713c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007132:	4b36      	ldr	r3, [pc, #216]	; (800720c <xTaskIncrementTick+0x158>)
 8007134:	f04f 32ff 	mov.w	r2, #4294967295
 8007138:	601a      	str	r2, [r3, #0]
					break;
 800713a:	e03e      	b.n	80071ba <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800713c:	4b30      	ldr	r3, [pc, #192]	; (8007200 <xTaskIncrementTick+0x14c>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	68db      	ldr	r3, [r3, #12]
 8007142:	68db      	ldr	r3, [r3, #12]
 8007144:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800714c:	693a      	ldr	r2, [r7, #16]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	429a      	cmp	r2, r3
 8007152:	d203      	bcs.n	800715c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007154:	4a2d      	ldr	r2, [pc, #180]	; (800720c <xTaskIncrementTick+0x158>)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800715a:	e02e      	b.n	80071ba <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	3304      	adds	r3, #4
 8007160:	4618      	mov	r0, r3
 8007162:	f7ff f932 	bl	80063ca <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800716a:	2b00      	cmp	r3, #0
 800716c:	d004      	beq.n	8007178 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	3318      	adds	r3, #24
 8007172:	4618      	mov	r0, r3
 8007174:	f7ff f929 	bl	80063ca <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800717c:	2201      	movs	r2, #1
 800717e:	409a      	lsls	r2, r3
 8007180:	4b23      	ldr	r3, [pc, #140]	; (8007210 <xTaskIncrementTick+0x15c>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4313      	orrs	r3, r2
 8007186:	4a22      	ldr	r2, [pc, #136]	; (8007210 <xTaskIncrementTick+0x15c>)
 8007188:	6013      	str	r3, [r2, #0]
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800718e:	4613      	mov	r3, r2
 8007190:	009b      	lsls	r3, r3, #2
 8007192:	4413      	add	r3, r2
 8007194:	009b      	lsls	r3, r3, #2
 8007196:	4a1f      	ldr	r2, [pc, #124]	; (8007214 <xTaskIncrementTick+0x160>)
 8007198:	441a      	add	r2, r3
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	3304      	adds	r3, #4
 800719e:	4619      	mov	r1, r3
 80071a0:	4610      	mov	r0, r2
 80071a2:	f7ff f8b5 	bl	8006310 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071aa:	4b1b      	ldr	r3, [pc, #108]	; (8007218 <xTaskIncrementTick+0x164>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d3b9      	bcc.n	8007128 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80071b4:	2301      	movs	r3, #1
 80071b6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071b8:	e7b6      	b.n	8007128 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80071ba:	4b17      	ldr	r3, [pc, #92]	; (8007218 <xTaskIncrementTick+0x164>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071c0:	4914      	ldr	r1, [pc, #80]	; (8007214 <xTaskIncrementTick+0x160>)
 80071c2:	4613      	mov	r3, r2
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	4413      	add	r3, r2
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	440b      	add	r3, r1
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d901      	bls.n	80071d6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80071d2:	2301      	movs	r3, #1
 80071d4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80071d6:	4b11      	ldr	r3, [pc, #68]	; (800721c <xTaskIncrementTick+0x168>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d007      	beq.n	80071ee <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80071de:	2301      	movs	r3, #1
 80071e0:	617b      	str	r3, [r7, #20]
 80071e2:	e004      	b.n	80071ee <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80071e4:	4b0e      	ldr	r3, [pc, #56]	; (8007220 <xTaskIncrementTick+0x16c>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	3301      	adds	r3, #1
 80071ea:	4a0d      	ldr	r2, [pc, #52]	; (8007220 <xTaskIncrementTick+0x16c>)
 80071ec:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80071ee:	697b      	ldr	r3, [r7, #20]
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3718      	adds	r7, #24
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}
 80071f8:	20000690 	.word	0x20000690
 80071fc:	2000066c 	.word	0x2000066c
 8007200:	20000620 	.word	0x20000620
 8007204:	20000624 	.word	0x20000624
 8007208:	20000680 	.word	0x20000680
 800720c:	20000688 	.word	0x20000688
 8007210:	20000670 	.word	0x20000670
 8007214:	2000056c 	.word	0x2000056c
 8007218:	20000568 	.word	0x20000568
 800721c:	2000067c 	.word	0x2000067c
 8007220:	20000678 	.word	0x20000678

08007224 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007224:	b480      	push	{r7}
 8007226:	b087      	sub	sp, #28
 8007228:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800722a:	4b29      	ldr	r3, [pc, #164]	; (80072d0 <vTaskSwitchContext+0xac>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d003      	beq.n	800723a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007232:	4b28      	ldr	r3, [pc, #160]	; (80072d4 <vTaskSwitchContext+0xb0>)
 8007234:	2201      	movs	r2, #1
 8007236:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007238:	e044      	b.n	80072c4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800723a:	4b26      	ldr	r3, [pc, #152]	; (80072d4 <vTaskSwitchContext+0xb0>)
 800723c:	2200      	movs	r2, #0
 800723e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007240:	4b25      	ldr	r3, [pc, #148]	; (80072d8 <vTaskSwitchContext+0xb4>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	fab3 f383 	clz	r3, r3
 800724c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800724e:	7afb      	ldrb	r3, [r7, #11]
 8007250:	f1c3 031f 	rsb	r3, r3, #31
 8007254:	617b      	str	r3, [r7, #20]
 8007256:	4921      	ldr	r1, [pc, #132]	; (80072dc <vTaskSwitchContext+0xb8>)
 8007258:	697a      	ldr	r2, [r7, #20]
 800725a:	4613      	mov	r3, r2
 800725c:	009b      	lsls	r3, r3, #2
 800725e:	4413      	add	r3, r2
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	440b      	add	r3, r1
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d10a      	bne.n	8007280 <vTaskSwitchContext+0x5c>
	__asm volatile
 800726a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800726e:	f383 8811 	msr	BASEPRI, r3
 8007272:	f3bf 8f6f 	isb	sy
 8007276:	f3bf 8f4f 	dsb	sy
 800727a:	607b      	str	r3, [r7, #4]
}
 800727c:	bf00      	nop
 800727e:	e7fe      	b.n	800727e <vTaskSwitchContext+0x5a>
 8007280:	697a      	ldr	r2, [r7, #20]
 8007282:	4613      	mov	r3, r2
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	4413      	add	r3, r2
 8007288:	009b      	lsls	r3, r3, #2
 800728a:	4a14      	ldr	r2, [pc, #80]	; (80072dc <vTaskSwitchContext+0xb8>)
 800728c:	4413      	add	r3, r2
 800728e:	613b      	str	r3, [r7, #16]
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	685a      	ldr	r2, [r3, #4]
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	605a      	str	r2, [r3, #4]
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	685a      	ldr	r2, [r3, #4]
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	3308      	adds	r3, #8
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d104      	bne.n	80072b0 <vTaskSwitchContext+0x8c>
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	685a      	ldr	r2, [r3, #4]
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	605a      	str	r2, [r3, #4]
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	68db      	ldr	r3, [r3, #12]
 80072b6:	4a0a      	ldr	r2, [pc, #40]	; (80072e0 <vTaskSwitchContext+0xbc>)
 80072b8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80072ba:	4b09      	ldr	r3, [pc, #36]	; (80072e0 <vTaskSwitchContext+0xbc>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	334c      	adds	r3, #76	; 0x4c
 80072c0:	4a08      	ldr	r2, [pc, #32]	; (80072e4 <vTaskSwitchContext+0xc0>)
 80072c2:	6013      	str	r3, [r2, #0]
}
 80072c4:	bf00      	nop
 80072c6:	371c      	adds	r7, #28
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr
 80072d0:	20000690 	.word	0x20000690
 80072d4:	2000067c 	.word	0x2000067c
 80072d8:	20000670 	.word	0x20000670
 80072dc:	2000056c 	.word	0x2000056c
 80072e0:	20000568 	.word	0x20000568
 80072e4:	20000010 	.word	0x20000010

080072e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b084      	sub	sp, #16
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d10a      	bne.n	800730e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80072f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072fc:	f383 8811 	msr	BASEPRI, r3
 8007300:	f3bf 8f6f 	isb	sy
 8007304:	f3bf 8f4f 	dsb	sy
 8007308:	60fb      	str	r3, [r7, #12]
}
 800730a:	bf00      	nop
 800730c:	e7fe      	b.n	800730c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800730e:	4b07      	ldr	r3, [pc, #28]	; (800732c <vTaskPlaceOnEventList+0x44>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	3318      	adds	r3, #24
 8007314:	4619      	mov	r1, r3
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f7ff f81e 	bl	8006358 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800731c:	2101      	movs	r1, #1
 800731e:	6838      	ldr	r0, [r7, #0]
 8007320:	f000 fa6a 	bl	80077f8 <prvAddCurrentTaskToDelayedList>
}
 8007324:	bf00      	nop
 8007326:	3710      	adds	r7, #16
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}
 800732c:	20000568 	.word	0x20000568

08007330 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b086      	sub	sp, #24
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	68db      	ldr	r3, [r3, #12]
 800733e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d10a      	bne.n	800735c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800734a:	f383 8811 	msr	BASEPRI, r3
 800734e:	f3bf 8f6f 	isb	sy
 8007352:	f3bf 8f4f 	dsb	sy
 8007356:	60fb      	str	r3, [r7, #12]
}
 8007358:	bf00      	nop
 800735a:	e7fe      	b.n	800735a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	3318      	adds	r3, #24
 8007360:	4618      	mov	r0, r3
 8007362:	f7ff f832 	bl	80063ca <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007366:	4b1d      	ldr	r3, [pc, #116]	; (80073dc <xTaskRemoveFromEventList+0xac>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d11c      	bne.n	80073a8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	3304      	adds	r3, #4
 8007372:	4618      	mov	r0, r3
 8007374:	f7ff f829 	bl	80063ca <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800737c:	2201      	movs	r2, #1
 800737e:	409a      	lsls	r2, r3
 8007380:	4b17      	ldr	r3, [pc, #92]	; (80073e0 <xTaskRemoveFromEventList+0xb0>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4313      	orrs	r3, r2
 8007386:	4a16      	ldr	r2, [pc, #88]	; (80073e0 <xTaskRemoveFromEventList+0xb0>)
 8007388:	6013      	str	r3, [r2, #0]
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800738e:	4613      	mov	r3, r2
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	4413      	add	r3, r2
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	4a13      	ldr	r2, [pc, #76]	; (80073e4 <xTaskRemoveFromEventList+0xb4>)
 8007398:	441a      	add	r2, r3
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	3304      	adds	r3, #4
 800739e:	4619      	mov	r1, r3
 80073a0:	4610      	mov	r0, r2
 80073a2:	f7fe ffb5 	bl	8006310 <vListInsertEnd>
 80073a6:	e005      	b.n	80073b4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	3318      	adds	r3, #24
 80073ac:	4619      	mov	r1, r3
 80073ae:	480e      	ldr	r0, [pc, #56]	; (80073e8 <xTaskRemoveFromEventList+0xb8>)
 80073b0:	f7fe ffae 	bl	8006310 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073b8:	4b0c      	ldr	r3, [pc, #48]	; (80073ec <xTaskRemoveFromEventList+0xbc>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073be:	429a      	cmp	r2, r3
 80073c0:	d905      	bls.n	80073ce <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80073c2:	2301      	movs	r3, #1
 80073c4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80073c6:	4b0a      	ldr	r3, [pc, #40]	; (80073f0 <xTaskRemoveFromEventList+0xc0>)
 80073c8:	2201      	movs	r2, #1
 80073ca:	601a      	str	r2, [r3, #0]
 80073cc:	e001      	b.n	80073d2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80073ce:	2300      	movs	r3, #0
 80073d0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80073d2:	697b      	ldr	r3, [r7, #20]
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3718      	adds	r7, #24
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}
 80073dc:	20000690 	.word	0x20000690
 80073e0:	20000670 	.word	0x20000670
 80073e4:	2000056c 	.word	0x2000056c
 80073e8:	20000628 	.word	0x20000628
 80073ec:	20000568 	.word	0x20000568
 80073f0:	2000067c 	.word	0x2000067c

080073f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80073f4:	b480      	push	{r7}
 80073f6:	b083      	sub	sp, #12
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80073fc:	4b06      	ldr	r3, [pc, #24]	; (8007418 <vTaskInternalSetTimeOutState+0x24>)
 80073fe:	681a      	ldr	r2, [r3, #0]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007404:	4b05      	ldr	r3, [pc, #20]	; (800741c <vTaskInternalSetTimeOutState+0x28>)
 8007406:	681a      	ldr	r2, [r3, #0]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	605a      	str	r2, [r3, #4]
}
 800740c:	bf00      	nop
 800740e:	370c      	adds	r7, #12
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr
 8007418:	20000680 	.word	0x20000680
 800741c:	2000066c 	.word	0x2000066c

08007420 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b088      	sub	sp, #32
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d10a      	bne.n	8007446 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007434:	f383 8811 	msr	BASEPRI, r3
 8007438:	f3bf 8f6f 	isb	sy
 800743c:	f3bf 8f4f 	dsb	sy
 8007440:	613b      	str	r3, [r7, #16]
}
 8007442:	bf00      	nop
 8007444:	e7fe      	b.n	8007444 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d10a      	bne.n	8007462 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800744c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007450:	f383 8811 	msr	BASEPRI, r3
 8007454:	f3bf 8f6f 	isb	sy
 8007458:	f3bf 8f4f 	dsb	sy
 800745c:	60fb      	str	r3, [r7, #12]
}
 800745e:	bf00      	nop
 8007460:	e7fe      	b.n	8007460 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007462:	f000 fb5f 	bl	8007b24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007466:	4b1d      	ldr	r3, [pc, #116]	; (80074dc <xTaskCheckForTimeOut+0xbc>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	69ba      	ldr	r2, [r7, #24]
 8007472:	1ad3      	subs	r3, r2, r3
 8007474:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800747e:	d102      	bne.n	8007486 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007480:	2300      	movs	r3, #0
 8007482:	61fb      	str	r3, [r7, #28]
 8007484:	e023      	b.n	80074ce <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	4b15      	ldr	r3, [pc, #84]	; (80074e0 <xTaskCheckForTimeOut+0xc0>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	429a      	cmp	r2, r3
 8007490:	d007      	beq.n	80074a2 <xTaskCheckForTimeOut+0x82>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	69ba      	ldr	r2, [r7, #24]
 8007498:	429a      	cmp	r2, r3
 800749a:	d302      	bcc.n	80074a2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800749c:	2301      	movs	r3, #1
 800749e:	61fb      	str	r3, [r7, #28]
 80074a0:	e015      	b.n	80074ce <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	697a      	ldr	r2, [r7, #20]
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d20b      	bcs.n	80074c4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	1ad2      	subs	r2, r2, r3
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f7ff ff9b 	bl	80073f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80074be:	2300      	movs	r3, #0
 80074c0:	61fb      	str	r3, [r7, #28]
 80074c2:	e004      	b.n	80074ce <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	2200      	movs	r2, #0
 80074c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80074ca:	2301      	movs	r3, #1
 80074cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80074ce:	f000 fb59 	bl	8007b84 <vPortExitCritical>

	return xReturn;
 80074d2:	69fb      	ldr	r3, [r7, #28]
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3720      	adds	r7, #32
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}
 80074dc:	2000066c 	.word	0x2000066c
 80074e0:	20000680 	.word	0x20000680

080074e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80074e4:	b480      	push	{r7}
 80074e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80074e8:	4b03      	ldr	r3, [pc, #12]	; (80074f8 <vTaskMissedYield+0x14>)
 80074ea:	2201      	movs	r2, #1
 80074ec:	601a      	str	r2, [r3, #0]
}
 80074ee:	bf00      	nop
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr
 80074f8:	2000067c 	.word	0x2000067c

080074fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b082      	sub	sp, #8
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007504:	f000 f852 	bl	80075ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007508:	4b06      	ldr	r3, [pc, #24]	; (8007524 <prvIdleTask+0x28>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	2b01      	cmp	r3, #1
 800750e:	d9f9      	bls.n	8007504 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007510:	4b05      	ldr	r3, [pc, #20]	; (8007528 <prvIdleTask+0x2c>)
 8007512:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007516:	601a      	str	r2, [r3, #0]
 8007518:	f3bf 8f4f 	dsb	sy
 800751c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007520:	e7f0      	b.n	8007504 <prvIdleTask+0x8>
 8007522:	bf00      	nop
 8007524:	2000056c 	.word	0x2000056c
 8007528:	e000ed04 	.word	0xe000ed04

0800752c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b082      	sub	sp, #8
 8007530:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007532:	2300      	movs	r3, #0
 8007534:	607b      	str	r3, [r7, #4]
 8007536:	e00c      	b.n	8007552 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	4613      	mov	r3, r2
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	4413      	add	r3, r2
 8007540:	009b      	lsls	r3, r3, #2
 8007542:	4a12      	ldr	r2, [pc, #72]	; (800758c <prvInitialiseTaskLists+0x60>)
 8007544:	4413      	add	r3, r2
 8007546:	4618      	mov	r0, r3
 8007548:	f7fe feb5 	bl	80062b6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	3301      	adds	r3, #1
 8007550:	607b      	str	r3, [r7, #4]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2b06      	cmp	r3, #6
 8007556:	d9ef      	bls.n	8007538 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007558:	480d      	ldr	r0, [pc, #52]	; (8007590 <prvInitialiseTaskLists+0x64>)
 800755a:	f7fe feac 	bl	80062b6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800755e:	480d      	ldr	r0, [pc, #52]	; (8007594 <prvInitialiseTaskLists+0x68>)
 8007560:	f7fe fea9 	bl	80062b6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007564:	480c      	ldr	r0, [pc, #48]	; (8007598 <prvInitialiseTaskLists+0x6c>)
 8007566:	f7fe fea6 	bl	80062b6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800756a:	480c      	ldr	r0, [pc, #48]	; (800759c <prvInitialiseTaskLists+0x70>)
 800756c:	f7fe fea3 	bl	80062b6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007570:	480b      	ldr	r0, [pc, #44]	; (80075a0 <prvInitialiseTaskLists+0x74>)
 8007572:	f7fe fea0 	bl	80062b6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007576:	4b0b      	ldr	r3, [pc, #44]	; (80075a4 <prvInitialiseTaskLists+0x78>)
 8007578:	4a05      	ldr	r2, [pc, #20]	; (8007590 <prvInitialiseTaskLists+0x64>)
 800757a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800757c:	4b0a      	ldr	r3, [pc, #40]	; (80075a8 <prvInitialiseTaskLists+0x7c>)
 800757e:	4a05      	ldr	r2, [pc, #20]	; (8007594 <prvInitialiseTaskLists+0x68>)
 8007580:	601a      	str	r2, [r3, #0]
}
 8007582:	bf00      	nop
 8007584:	3708      	adds	r7, #8
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
 800758a:	bf00      	nop
 800758c:	2000056c 	.word	0x2000056c
 8007590:	200005f8 	.word	0x200005f8
 8007594:	2000060c 	.word	0x2000060c
 8007598:	20000628 	.word	0x20000628
 800759c:	2000063c 	.word	0x2000063c
 80075a0:	20000654 	.word	0x20000654
 80075a4:	20000620 	.word	0x20000620
 80075a8:	20000624 	.word	0x20000624

080075ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b082      	sub	sp, #8
 80075b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80075b2:	e019      	b.n	80075e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80075b4:	f000 fab6 	bl	8007b24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075b8:	4b10      	ldr	r3, [pc, #64]	; (80075fc <prvCheckTasksWaitingTermination+0x50>)
 80075ba:	68db      	ldr	r3, [r3, #12]
 80075bc:	68db      	ldr	r3, [r3, #12]
 80075be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	3304      	adds	r3, #4
 80075c4:	4618      	mov	r0, r3
 80075c6:	f7fe ff00 	bl	80063ca <uxListRemove>
				--uxCurrentNumberOfTasks;
 80075ca:	4b0d      	ldr	r3, [pc, #52]	; (8007600 <prvCheckTasksWaitingTermination+0x54>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	3b01      	subs	r3, #1
 80075d0:	4a0b      	ldr	r2, [pc, #44]	; (8007600 <prvCheckTasksWaitingTermination+0x54>)
 80075d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80075d4:	4b0b      	ldr	r3, [pc, #44]	; (8007604 <prvCheckTasksWaitingTermination+0x58>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	3b01      	subs	r3, #1
 80075da:	4a0a      	ldr	r2, [pc, #40]	; (8007604 <prvCheckTasksWaitingTermination+0x58>)
 80075dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80075de:	f000 fad1 	bl	8007b84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 f810 	bl	8007608 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80075e8:	4b06      	ldr	r3, [pc, #24]	; (8007604 <prvCheckTasksWaitingTermination+0x58>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d1e1      	bne.n	80075b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80075f0:	bf00      	nop
 80075f2:	bf00      	nop
 80075f4:	3708      	adds	r7, #8
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
 80075fa:	bf00      	nop
 80075fc:	2000063c 	.word	0x2000063c
 8007600:	20000668 	.word	0x20000668
 8007604:	20000650 	.word	0x20000650

08007608 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007608:	b580      	push	{r7, lr}
 800760a:	b084      	sub	sp, #16
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	334c      	adds	r3, #76	; 0x4c
 8007614:	4618      	mov	r0, r3
 8007616:	f000 fd9b 	bl	8008150 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007620:	2b00      	cmp	r3, #0
 8007622:	d108      	bne.n	8007636 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007628:	4618      	mov	r0, r3
 800762a:	f000 fc29 	bl	8007e80 <vPortFree>
				vPortFree( pxTCB );
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 fc26 	bl	8007e80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007634:	e018      	b.n	8007668 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800763c:	2b01      	cmp	r3, #1
 800763e:	d103      	bne.n	8007648 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f000 fc1d 	bl	8007e80 <vPortFree>
	}
 8007646:	e00f      	b.n	8007668 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800764e:	2b02      	cmp	r3, #2
 8007650:	d00a      	beq.n	8007668 <prvDeleteTCB+0x60>
	__asm volatile
 8007652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007656:	f383 8811 	msr	BASEPRI, r3
 800765a:	f3bf 8f6f 	isb	sy
 800765e:	f3bf 8f4f 	dsb	sy
 8007662:	60fb      	str	r3, [r7, #12]
}
 8007664:	bf00      	nop
 8007666:	e7fe      	b.n	8007666 <prvDeleteTCB+0x5e>
	}
 8007668:	bf00      	nop
 800766a:	3710      	adds	r7, #16
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}

08007670 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007670:	b480      	push	{r7}
 8007672:	b083      	sub	sp, #12
 8007674:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007676:	4b0c      	ldr	r3, [pc, #48]	; (80076a8 <prvResetNextTaskUnblockTime+0x38>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d104      	bne.n	800768a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007680:	4b0a      	ldr	r3, [pc, #40]	; (80076ac <prvResetNextTaskUnblockTime+0x3c>)
 8007682:	f04f 32ff 	mov.w	r2, #4294967295
 8007686:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007688:	e008      	b.n	800769c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800768a:	4b07      	ldr	r3, [pc, #28]	; (80076a8 <prvResetNextTaskUnblockTime+0x38>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	68db      	ldr	r3, [r3, #12]
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	4a04      	ldr	r2, [pc, #16]	; (80076ac <prvResetNextTaskUnblockTime+0x3c>)
 800769a:	6013      	str	r3, [r2, #0]
}
 800769c:	bf00      	nop
 800769e:	370c      	adds	r7, #12
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr
 80076a8:	20000620 	.word	0x20000620
 80076ac:	20000688 	.word	0x20000688

080076b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80076b0:	b480      	push	{r7}
 80076b2:	b083      	sub	sp, #12
 80076b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80076b6:	4b0b      	ldr	r3, [pc, #44]	; (80076e4 <xTaskGetSchedulerState+0x34>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d102      	bne.n	80076c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80076be:	2301      	movs	r3, #1
 80076c0:	607b      	str	r3, [r7, #4]
 80076c2:	e008      	b.n	80076d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076c4:	4b08      	ldr	r3, [pc, #32]	; (80076e8 <xTaskGetSchedulerState+0x38>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d102      	bne.n	80076d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80076cc:	2302      	movs	r3, #2
 80076ce:	607b      	str	r3, [r7, #4]
 80076d0:	e001      	b.n	80076d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80076d2:	2300      	movs	r3, #0
 80076d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80076d6:	687b      	ldr	r3, [r7, #4]
	}
 80076d8:	4618      	mov	r0, r3
 80076da:	370c      	adds	r7, #12
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr
 80076e4:	20000674 	.word	0x20000674
 80076e8:	20000690 	.word	0x20000690

080076ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b086      	sub	sp, #24
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80076f8:	2300      	movs	r3, #0
 80076fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d06e      	beq.n	80077e0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007702:	4b3a      	ldr	r3, [pc, #232]	; (80077ec <xTaskPriorityDisinherit+0x100>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	693a      	ldr	r2, [r7, #16]
 8007708:	429a      	cmp	r2, r3
 800770a:	d00a      	beq.n	8007722 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800770c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007710:	f383 8811 	msr	BASEPRI, r3
 8007714:	f3bf 8f6f 	isb	sy
 8007718:	f3bf 8f4f 	dsb	sy
 800771c:	60fb      	str	r3, [r7, #12]
}
 800771e:	bf00      	nop
 8007720:	e7fe      	b.n	8007720 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007726:	2b00      	cmp	r3, #0
 8007728:	d10a      	bne.n	8007740 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800772a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800772e:	f383 8811 	msr	BASEPRI, r3
 8007732:	f3bf 8f6f 	isb	sy
 8007736:	f3bf 8f4f 	dsb	sy
 800773a:	60bb      	str	r3, [r7, #8]
}
 800773c:	bf00      	nop
 800773e:	e7fe      	b.n	800773e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007744:	1e5a      	subs	r2, r3, #1
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007752:	429a      	cmp	r2, r3
 8007754:	d044      	beq.n	80077e0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800775a:	2b00      	cmp	r3, #0
 800775c:	d140      	bne.n	80077e0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	3304      	adds	r3, #4
 8007762:	4618      	mov	r0, r3
 8007764:	f7fe fe31 	bl	80063ca <uxListRemove>
 8007768:	4603      	mov	r3, r0
 800776a:	2b00      	cmp	r3, #0
 800776c:	d115      	bne.n	800779a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007772:	491f      	ldr	r1, [pc, #124]	; (80077f0 <xTaskPriorityDisinherit+0x104>)
 8007774:	4613      	mov	r3, r2
 8007776:	009b      	lsls	r3, r3, #2
 8007778:	4413      	add	r3, r2
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	440b      	add	r3, r1
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d10a      	bne.n	800779a <xTaskPriorityDisinherit+0xae>
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007788:	2201      	movs	r2, #1
 800778a:	fa02 f303 	lsl.w	r3, r2, r3
 800778e:	43da      	mvns	r2, r3
 8007790:	4b18      	ldr	r3, [pc, #96]	; (80077f4 <xTaskPriorityDisinherit+0x108>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4013      	ands	r3, r2
 8007796:	4a17      	ldr	r2, [pc, #92]	; (80077f4 <xTaskPriorityDisinherit+0x108>)
 8007798:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a6:	f1c3 0207 	rsb	r2, r3, #7
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b2:	2201      	movs	r2, #1
 80077b4:	409a      	lsls	r2, r3
 80077b6:	4b0f      	ldr	r3, [pc, #60]	; (80077f4 <xTaskPriorityDisinherit+0x108>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4313      	orrs	r3, r2
 80077bc:	4a0d      	ldr	r2, [pc, #52]	; (80077f4 <xTaskPriorityDisinherit+0x108>)
 80077be:	6013      	str	r3, [r2, #0]
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077c4:	4613      	mov	r3, r2
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	4413      	add	r3, r2
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	4a08      	ldr	r2, [pc, #32]	; (80077f0 <xTaskPriorityDisinherit+0x104>)
 80077ce:	441a      	add	r2, r3
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	3304      	adds	r3, #4
 80077d4:	4619      	mov	r1, r3
 80077d6:	4610      	mov	r0, r2
 80077d8:	f7fe fd9a 	bl	8006310 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80077dc:	2301      	movs	r3, #1
 80077de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80077e0:	697b      	ldr	r3, [r7, #20]
	}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3718      	adds	r7, #24
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}
 80077ea:	bf00      	nop
 80077ec:	20000568 	.word	0x20000568
 80077f0:	2000056c 	.word	0x2000056c
 80077f4:	20000670 	.word	0x20000670

080077f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b084      	sub	sp, #16
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007802:	4b29      	ldr	r3, [pc, #164]	; (80078a8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007808:	4b28      	ldr	r3, [pc, #160]	; (80078ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	3304      	adds	r3, #4
 800780e:	4618      	mov	r0, r3
 8007810:	f7fe fddb 	bl	80063ca <uxListRemove>
 8007814:	4603      	mov	r3, r0
 8007816:	2b00      	cmp	r3, #0
 8007818:	d10b      	bne.n	8007832 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800781a:	4b24      	ldr	r3, [pc, #144]	; (80078ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007820:	2201      	movs	r2, #1
 8007822:	fa02 f303 	lsl.w	r3, r2, r3
 8007826:	43da      	mvns	r2, r3
 8007828:	4b21      	ldr	r3, [pc, #132]	; (80078b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4013      	ands	r3, r2
 800782e:	4a20      	ldr	r2, [pc, #128]	; (80078b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007830:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007838:	d10a      	bne.n	8007850 <prvAddCurrentTaskToDelayedList+0x58>
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d007      	beq.n	8007850 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007840:	4b1a      	ldr	r3, [pc, #104]	; (80078ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	3304      	adds	r3, #4
 8007846:	4619      	mov	r1, r3
 8007848:	481a      	ldr	r0, [pc, #104]	; (80078b4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800784a:	f7fe fd61 	bl	8006310 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800784e:	e026      	b.n	800789e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007850:	68fa      	ldr	r2, [r7, #12]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	4413      	add	r3, r2
 8007856:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007858:	4b14      	ldr	r3, [pc, #80]	; (80078ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	68ba      	ldr	r2, [r7, #8]
 800785e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007860:	68ba      	ldr	r2, [r7, #8]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	429a      	cmp	r2, r3
 8007866:	d209      	bcs.n	800787c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007868:	4b13      	ldr	r3, [pc, #76]	; (80078b8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	4b0f      	ldr	r3, [pc, #60]	; (80078ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	3304      	adds	r3, #4
 8007872:	4619      	mov	r1, r3
 8007874:	4610      	mov	r0, r2
 8007876:	f7fe fd6f 	bl	8006358 <vListInsert>
}
 800787a:	e010      	b.n	800789e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800787c:	4b0f      	ldr	r3, [pc, #60]	; (80078bc <prvAddCurrentTaskToDelayedList+0xc4>)
 800787e:	681a      	ldr	r2, [r3, #0]
 8007880:	4b0a      	ldr	r3, [pc, #40]	; (80078ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	3304      	adds	r3, #4
 8007886:	4619      	mov	r1, r3
 8007888:	4610      	mov	r0, r2
 800788a:	f7fe fd65 	bl	8006358 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800788e:	4b0c      	ldr	r3, [pc, #48]	; (80078c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	68ba      	ldr	r2, [r7, #8]
 8007894:	429a      	cmp	r2, r3
 8007896:	d202      	bcs.n	800789e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007898:	4a09      	ldr	r2, [pc, #36]	; (80078c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	6013      	str	r3, [r2, #0]
}
 800789e:	bf00      	nop
 80078a0:	3710      	adds	r7, #16
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	bf00      	nop
 80078a8:	2000066c 	.word	0x2000066c
 80078ac:	20000568 	.word	0x20000568
 80078b0:	20000670 	.word	0x20000670
 80078b4:	20000654 	.word	0x20000654
 80078b8:	20000624 	.word	0x20000624
 80078bc:	20000620 	.word	0x20000620
 80078c0:	20000688 	.word	0x20000688

080078c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80078c4:	b480      	push	{r7}
 80078c6:	b085      	sub	sp, #20
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	60f8      	str	r0, [r7, #12]
 80078cc:	60b9      	str	r1, [r7, #8]
 80078ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	3b04      	subs	r3, #4
 80078d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80078dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	3b04      	subs	r3, #4
 80078e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	f023 0201 	bic.w	r2, r3, #1
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	3b04      	subs	r3, #4
 80078f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80078f4:	4a0c      	ldr	r2, [pc, #48]	; (8007928 <pxPortInitialiseStack+0x64>)
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	3b14      	subs	r3, #20
 80078fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	3b04      	subs	r3, #4
 800790a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f06f 0202 	mvn.w	r2, #2
 8007912:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	3b20      	subs	r3, #32
 8007918:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800791a:	68fb      	ldr	r3, [r7, #12]
}
 800791c:	4618      	mov	r0, r3
 800791e:	3714      	adds	r7, #20
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr
 8007928:	0800792d 	.word	0x0800792d

0800792c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800792c:	b480      	push	{r7}
 800792e:	b085      	sub	sp, #20
 8007930:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007932:	2300      	movs	r3, #0
 8007934:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007936:	4b12      	ldr	r3, [pc, #72]	; (8007980 <prvTaskExitError+0x54>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800793e:	d00a      	beq.n	8007956 <prvTaskExitError+0x2a>
	__asm volatile
 8007940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007944:	f383 8811 	msr	BASEPRI, r3
 8007948:	f3bf 8f6f 	isb	sy
 800794c:	f3bf 8f4f 	dsb	sy
 8007950:	60fb      	str	r3, [r7, #12]
}
 8007952:	bf00      	nop
 8007954:	e7fe      	b.n	8007954 <prvTaskExitError+0x28>
	__asm volatile
 8007956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800795a:	f383 8811 	msr	BASEPRI, r3
 800795e:	f3bf 8f6f 	isb	sy
 8007962:	f3bf 8f4f 	dsb	sy
 8007966:	60bb      	str	r3, [r7, #8]
}
 8007968:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800796a:	bf00      	nop
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d0fc      	beq.n	800796c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007972:	bf00      	nop
 8007974:	bf00      	nop
 8007976:	3714      	adds	r7, #20
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr
 8007980:	2000000c 	.word	0x2000000c
	...

08007990 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007990:	4b07      	ldr	r3, [pc, #28]	; (80079b0 <pxCurrentTCBConst2>)
 8007992:	6819      	ldr	r1, [r3, #0]
 8007994:	6808      	ldr	r0, [r1, #0]
 8007996:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800799a:	f380 8809 	msr	PSP, r0
 800799e:	f3bf 8f6f 	isb	sy
 80079a2:	f04f 0000 	mov.w	r0, #0
 80079a6:	f380 8811 	msr	BASEPRI, r0
 80079aa:	4770      	bx	lr
 80079ac:	f3af 8000 	nop.w

080079b0 <pxCurrentTCBConst2>:
 80079b0:	20000568 	.word	0x20000568
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80079b4:	bf00      	nop
 80079b6:	bf00      	nop

080079b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80079b8:	4808      	ldr	r0, [pc, #32]	; (80079dc <prvPortStartFirstTask+0x24>)
 80079ba:	6800      	ldr	r0, [r0, #0]
 80079bc:	6800      	ldr	r0, [r0, #0]
 80079be:	f380 8808 	msr	MSP, r0
 80079c2:	f04f 0000 	mov.w	r0, #0
 80079c6:	f380 8814 	msr	CONTROL, r0
 80079ca:	b662      	cpsie	i
 80079cc:	b661      	cpsie	f
 80079ce:	f3bf 8f4f 	dsb	sy
 80079d2:	f3bf 8f6f 	isb	sy
 80079d6:	df00      	svc	0
 80079d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80079da:	bf00      	nop
 80079dc:	e000ed08 	.word	0xe000ed08

080079e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b086      	sub	sp, #24
 80079e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80079e6:	4b46      	ldr	r3, [pc, #280]	; (8007b00 <xPortStartScheduler+0x120>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a46      	ldr	r2, [pc, #280]	; (8007b04 <xPortStartScheduler+0x124>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d10a      	bne.n	8007a06 <xPortStartScheduler+0x26>
	__asm volatile
 80079f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f4:	f383 8811 	msr	BASEPRI, r3
 80079f8:	f3bf 8f6f 	isb	sy
 80079fc:	f3bf 8f4f 	dsb	sy
 8007a00:	613b      	str	r3, [r7, #16]
}
 8007a02:	bf00      	nop
 8007a04:	e7fe      	b.n	8007a04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007a06:	4b3e      	ldr	r3, [pc, #248]	; (8007b00 <xPortStartScheduler+0x120>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a3f      	ldr	r2, [pc, #252]	; (8007b08 <xPortStartScheduler+0x128>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d10a      	bne.n	8007a26 <xPortStartScheduler+0x46>
	__asm volatile
 8007a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a14:	f383 8811 	msr	BASEPRI, r3
 8007a18:	f3bf 8f6f 	isb	sy
 8007a1c:	f3bf 8f4f 	dsb	sy
 8007a20:	60fb      	str	r3, [r7, #12]
}
 8007a22:	bf00      	nop
 8007a24:	e7fe      	b.n	8007a24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007a26:	4b39      	ldr	r3, [pc, #228]	; (8007b0c <xPortStartScheduler+0x12c>)
 8007a28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	b2db      	uxtb	r3, r3
 8007a30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	22ff      	movs	r2, #255	; 0xff
 8007a36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007a40:	78fb      	ldrb	r3, [r7, #3]
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007a48:	b2da      	uxtb	r2, r3
 8007a4a:	4b31      	ldr	r3, [pc, #196]	; (8007b10 <xPortStartScheduler+0x130>)
 8007a4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007a4e:	4b31      	ldr	r3, [pc, #196]	; (8007b14 <xPortStartScheduler+0x134>)
 8007a50:	2207      	movs	r2, #7
 8007a52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a54:	e009      	b.n	8007a6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007a56:	4b2f      	ldr	r3, [pc, #188]	; (8007b14 <xPortStartScheduler+0x134>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	3b01      	subs	r3, #1
 8007a5c:	4a2d      	ldr	r2, [pc, #180]	; (8007b14 <xPortStartScheduler+0x134>)
 8007a5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007a60:	78fb      	ldrb	r3, [r7, #3]
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	005b      	lsls	r3, r3, #1
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a6a:	78fb      	ldrb	r3, [r7, #3]
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a72:	2b80      	cmp	r3, #128	; 0x80
 8007a74:	d0ef      	beq.n	8007a56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007a76:	4b27      	ldr	r3, [pc, #156]	; (8007b14 <xPortStartScheduler+0x134>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f1c3 0307 	rsb	r3, r3, #7
 8007a7e:	2b04      	cmp	r3, #4
 8007a80:	d00a      	beq.n	8007a98 <xPortStartScheduler+0xb8>
	__asm volatile
 8007a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a86:	f383 8811 	msr	BASEPRI, r3
 8007a8a:	f3bf 8f6f 	isb	sy
 8007a8e:	f3bf 8f4f 	dsb	sy
 8007a92:	60bb      	str	r3, [r7, #8]
}
 8007a94:	bf00      	nop
 8007a96:	e7fe      	b.n	8007a96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007a98:	4b1e      	ldr	r3, [pc, #120]	; (8007b14 <xPortStartScheduler+0x134>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	021b      	lsls	r3, r3, #8
 8007a9e:	4a1d      	ldr	r2, [pc, #116]	; (8007b14 <xPortStartScheduler+0x134>)
 8007aa0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007aa2:	4b1c      	ldr	r3, [pc, #112]	; (8007b14 <xPortStartScheduler+0x134>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007aaa:	4a1a      	ldr	r2, [pc, #104]	; (8007b14 <xPortStartScheduler+0x134>)
 8007aac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	b2da      	uxtb	r2, r3
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007ab6:	4b18      	ldr	r3, [pc, #96]	; (8007b18 <xPortStartScheduler+0x138>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a17      	ldr	r2, [pc, #92]	; (8007b18 <xPortStartScheduler+0x138>)
 8007abc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007ac0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007ac2:	4b15      	ldr	r3, [pc, #84]	; (8007b18 <xPortStartScheduler+0x138>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a14      	ldr	r2, [pc, #80]	; (8007b18 <xPortStartScheduler+0x138>)
 8007ac8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007acc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007ace:	f000 f8dd 	bl	8007c8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007ad2:	4b12      	ldr	r3, [pc, #72]	; (8007b1c <xPortStartScheduler+0x13c>)
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007ad8:	f000 f8fc 	bl	8007cd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007adc:	4b10      	ldr	r3, [pc, #64]	; (8007b20 <xPortStartScheduler+0x140>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a0f      	ldr	r2, [pc, #60]	; (8007b20 <xPortStartScheduler+0x140>)
 8007ae2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007ae6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007ae8:	f7ff ff66 	bl	80079b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007aec:	f7ff fb9a 	bl	8007224 <vTaskSwitchContext>
	prvTaskExitError();
 8007af0:	f7ff ff1c 	bl	800792c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007af4:	2300      	movs	r3, #0
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3718      	adds	r7, #24
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}
 8007afe:	bf00      	nop
 8007b00:	e000ed00 	.word	0xe000ed00
 8007b04:	410fc271 	.word	0x410fc271
 8007b08:	410fc270 	.word	0x410fc270
 8007b0c:	e000e400 	.word	0xe000e400
 8007b10:	20000694 	.word	0x20000694
 8007b14:	20000698 	.word	0x20000698
 8007b18:	e000ed20 	.word	0xe000ed20
 8007b1c:	2000000c 	.word	0x2000000c
 8007b20:	e000ef34 	.word	0xe000ef34

08007b24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
	__asm volatile
 8007b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b2e:	f383 8811 	msr	BASEPRI, r3
 8007b32:	f3bf 8f6f 	isb	sy
 8007b36:	f3bf 8f4f 	dsb	sy
 8007b3a:	607b      	str	r3, [r7, #4]
}
 8007b3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007b3e:	4b0f      	ldr	r3, [pc, #60]	; (8007b7c <vPortEnterCritical+0x58>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	3301      	adds	r3, #1
 8007b44:	4a0d      	ldr	r2, [pc, #52]	; (8007b7c <vPortEnterCritical+0x58>)
 8007b46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007b48:	4b0c      	ldr	r3, [pc, #48]	; (8007b7c <vPortEnterCritical+0x58>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	2b01      	cmp	r3, #1
 8007b4e:	d10f      	bne.n	8007b70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007b50:	4b0b      	ldr	r3, [pc, #44]	; (8007b80 <vPortEnterCritical+0x5c>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	b2db      	uxtb	r3, r3
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d00a      	beq.n	8007b70 <vPortEnterCritical+0x4c>
	__asm volatile
 8007b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b5e:	f383 8811 	msr	BASEPRI, r3
 8007b62:	f3bf 8f6f 	isb	sy
 8007b66:	f3bf 8f4f 	dsb	sy
 8007b6a:	603b      	str	r3, [r7, #0]
}
 8007b6c:	bf00      	nop
 8007b6e:	e7fe      	b.n	8007b6e <vPortEnterCritical+0x4a>
	}
}
 8007b70:	bf00      	nop
 8007b72:	370c      	adds	r7, #12
 8007b74:	46bd      	mov	sp, r7
 8007b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7a:	4770      	bx	lr
 8007b7c:	2000000c 	.word	0x2000000c
 8007b80:	e000ed04 	.word	0xe000ed04

08007b84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007b84:	b480      	push	{r7}
 8007b86:	b083      	sub	sp, #12
 8007b88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007b8a:	4b12      	ldr	r3, [pc, #72]	; (8007bd4 <vPortExitCritical+0x50>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d10a      	bne.n	8007ba8 <vPortExitCritical+0x24>
	__asm volatile
 8007b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b96:	f383 8811 	msr	BASEPRI, r3
 8007b9a:	f3bf 8f6f 	isb	sy
 8007b9e:	f3bf 8f4f 	dsb	sy
 8007ba2:	607b      	str	r3, [r7, #4]
}
 8007ba4:	bf00      	nop
 8007ba6:	e7fe      	b.n	8007ba6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007ba8:	4b0a      	ldr	r3, [pc, #40]	; (8007bd4 <vPortExitCritical+0x50>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	3b01      	subs	r3, #1
 8007bae:	4a09      	ldr	r2, [pc, #36]	; (8007bd4 <vPortExitCritical+0x50>)
 8007bb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007bb2:	4b08      	ldr	r3, [pc, #32]	; (8007bd4 <vPortExitCritical+0x50>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d105      	bne.n	8007bc6 <vPortExitCritical+0x42>
 8007bba:	2300      	movs	r3, #0
 8007bbc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007bc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007bc6:	bf00      	nop
 8007bc8:	370c      	adds	r7, #12
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr
 8007bd2:	bf00      	nop
 8007bd4:	2000000c 	.word	0x2000000c
	...

08007be0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007be0:	f3ef 8009 	mrs	r0, PSP
 8007be4:	f3bf 8f6f 	isb	sy
 8007be8:	4b15      	ldr	r3, [pc, #84]	; (8007c40 <pxCurrentTCBConst>)
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	f01e 0f10 	tst.w	lr, #16
 8007bf0:	bf08      	it	eq
 8007bf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007bf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bfa:	6010      	str	r0, [r2, #0]
 8007bfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007c00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007c04:	f380 8811 	msr	BASEPRI, r0
 8007c08:	f3bf 8f4f 	dsb	sy
 8007c0c:	f3bf 8f6f 	isb	sy
 8007c10:	f7ff fb08 	bl	8007224 <vTaskSwitchContext>
 8007c14:	f04f 0000 	mov.w	r0, #0
 8007c18:	f380 8811 	msr	BASEPRI, r0
 8007c1c:	bc09      	pop	{r0, r3}
 8007c1e:	6819      	ldr	r1, [r3, #0]
 8007c20:	6808      	ldr	r0, [r1, #0]
 8007c22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c26:	f01e 0f10 	tst.w	lr, #16
 8007c2a:	bf08      	it	eq
 8007c2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007c30:	f380 8809 	msr	PSP, r0
 8007c34:	f3bf 8f6f 	isb	sy
 8007c38:	4770      	bx	lr
 8007c3a:	bf00      	nop
 8007c3c:	f3af 8000 	nop.w

08007c40 <pxCurrentTCBConst>:
 8007c40:	20000568 	.word	0x20000568
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007c44:	bf00      	nop
 8007c46:	bf00      	nop

08007c48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b082      	sub	sp, #8
 8007c4c:	af00      	add	r7, sp, #0
	__asm volatile
 8007c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c52:	f383 8811 	msr	BASEPRI, r3
 8007c56:	f3bf 8f6f 	isb	sy
 8007c5a:	f3bf 8f4f 	dsb	sy
 8007c5e:	607b      	str	r3, [r7, #4]
}
 8007c60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007c62:	f7ff fa27 	bl	80070b4 <xTaskIncrementTick>
 8007c66:	4603      	mov	r3, r0
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d003      	beq.n	8007c74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007c6c:	4b06      	ldr	r3, [pc, #24]	; (8007c88 <SysTick_Handler+0x40>)
 8007c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c72:	601a      	str	r2, [r3, #0]
 8007c74:	2300      	movs	r3, #0
 8007c76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	f383 8811 	msr	BASEPRI, r3
}
 8007c7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007c80:	bf00      	nop
 8007c82:	3708      	adds	r7, #8
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}
 8007c88:	e000ed04 	.word	0xe000ed04

08007c8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007c90:	4b0b      	ldr	r3, [pc, #44]	; (8007cc0 <vPortSetupTimerInterrupt+0x34>)
 8007c92:	2200      	movs	r2, #0
 8007c94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007c96:	4b0b      	ldr	r3, [pc, #44]	; (8007cc4 <vPortSetupTimerInterrupt+0x38>)
 8007c98:	2200      	movs	r2, #0
 8007c9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007c9c:	4b0a      	ldr	r3, [pc, #40]	; (8007cc8 <vPortSetupTimerInterrupt+0x3c>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a0a      	ldr	r2, [pc, #40]	; (8007ccc <vPortSetupTimerInterrupt+0x40>)
 8007ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ca6:	099b      	lsrs	r3, r3, #6
 8007ca8:	4a09      	ldr	r2, [pc, #36]	; (8007cd0 <vPortSetupTimerInterrupt+0x44>)
 8007caa:	3b01      	subs	r3, #1
 8007cac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007cae:	4b04      	ldr	r3, [pc, #16]	; (8007cc0 <vPortSetupTimerInterrupt+0x34>)
 8007cb0:	2207      	movs	r2, #7
 8007cb2:	601a      	str	r2, [r3, #0]
}
 8007cb4:	bf00      	nop
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr
 8007cbe:	bf00      	nop
 8007cc0:	e000e010 	.word	0xe000e010
 8007cc4:	e000e018 	.word	0xe000e018
 8007cc8:	20000000 	.word	0x20000000
 8007ccc:	10624dd3 	.word	0x10624dd3
 8007cd0:	e000e014 	.word	0xe000e014

08007cd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007cd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007ce4 <vPortEnableVFP+0x10>
 8007cd8:	6801      	ldr	r1, [r0, #0]
 8007cda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007cde:	6001      	str	r1, [r0, #0]
 8007ce0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007ce2:	bf00      	nop
 8007ce4:	e000ed88 	.word	0xe000ed88

08007ce8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b08a      	sub	sp, #40	; 0x28
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007cf4:	f7ff f934 	bl	8006f60 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007cf8:	4b5b      	ldr	r3, [pc, #364]	; (8007e68 <pvPortMalloc+0x180>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d101      	bne.n	8007d04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007d00:	f000 f920 	bl	8007f44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007d04:	4b59      	ldr	r3, [pc, #356]	; (8007e6c <pvPortMalloc+0x184>)
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	4013      	ands	r3, r2
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	f040 8093 	bne.w	8007e38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d01d      	beq.n	8007d54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007d18:	2208      	movs	r2, #8
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	4413      	add	r3, r2
 8007d1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f003 0307 	and.w	r3, r3, #7
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d014      	beq.n	8007d54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f023 0307 	bic.w	r3, r3, #7
 8007d30:	3308      	adds	r3, #8
 8007d32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f003 0307 	and.w	r3, r3, #7
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d00a      	beq.n	8007d54 <pvPortMalloc+0x6c>
	__asm volatile
 8007d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d42:	f383 8811 	msr	BASEPRI, r3
 8007d46:	f3bf 8f6f 	isb	sy
 8007d4a:	f3bf 8f4f 	dsb	sy
 8007d4e:	617b      	str	r3, [r7, #20]
}
 8007d50:	bf00      	nop
 8007d52:	e7fe      	b.n	8007d52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d06e      	beq.n	8007e38 <pvPortMalloc+0x150>
 8007d5a:	4b45      	ldr	r3, [pc, #276]	; (8007e70 <pvPortMalloc+0x188>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d869      	bhi.n	8007e38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007d64:	4b43      	ldr	r3, [pc, #268]	; (8007e74 <pvPortMalloc+0x18c>)
 8007d66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007d68:	4b42      	ldr	r3, [pc, #264]	; (8007e74 <pvPortMalloc+0x18c>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d6e:	e004      	b.n	8007d7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d903      	bls.n	8007d8c <pvPortMalloc+0xa4>
 8007d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d1f1      	bne.n	8007d70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007d8c:	4b36      	ldr	r3, [pc, #216]	; (8007e68 <pvPortMalloc+0x180>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d050      	beq.n	8007e38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007d96:	6a3b      	ldr	r3, [r7, #32]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	2208      	movs	r2, #8
 8007d9c:	4413      	add	r3, r2
 8007d9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	6a3b      	ldr	r3, [r7, #32]
 8007da6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007daa:	685a      	ldr	r2, [r3, #4]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	1ad2      	subs	r2, r2, r3
 8007db0:	2308      	movs	r3, #8
 8007db2:	005b      	lsls	r3, r3, #1
 8007db4:	429a      	cmp	r2, r3
 8007db6:	d91f      	bls.n	8007df8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	4413      	add	r3, r2
 8007dbe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007dc0:	69bb      	ldr	r3, [r7, #24]
 8007dc2:	f003 0307 	and.w	r3, r3, #7
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d00a      	beq.n	8007de0 <pvPortMalloc+0xf8>
	__asm volatile
 8007dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dce:	f383 8811 	msr	BASEPRI, r3
 8007dd2:	f3bf 8f6f 	isb	sy
 8007dd6:	f3bf 8f4f 	dsb	sy
 8007dda:	613b      	str	r3, [r7, #16]
}
 8007ddc:	bf00      	nop
 8007dde:	e7fe      	b.n	8007dde <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de2:	685a      	ldr	r2, [r3, #4]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	1ad2      	subs	r2, r2, r3
 8007de8:	69bb      	ldr	r3, [r7, #24]
 8007dea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007df2:	69b8      	ldr	r0, [r7, #24]
 8007df4:	f000 f908 	bl	8008008 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007df8:	4b1d      	ldr	r3, [pc, #116]	; (8007e70 <pvPortMalloc+0x188>)
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	1ad3      	subs	r3, r2, r3
 8007e02:	4a1b      	ldr	r2, [pc, #108]	; (8007e70 <pvPortMalloc+0x188>)
 8007e04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007e06:	4b1a      	ldr	r3, [pc, #104]	; (8007e70 <pvPortMalloc+0x188>)
 8007e08:	681a      	ldr	r2, [r3, #0]
 8007e0a:	4b1b      	ldr	r3, [pc, #108]	; (8007e78 <pvPortMalloc+0x190>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	429a      	cmp	r2, r3
 8007e10:	d203      	bcs.n	8007e1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007e12:	4b17      	ldr	r3, [pc, #92]	; (8007e70 <pvPortMalloc+0x188>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a18      	ldr	r2, [pc, #96]	; (8007e78 <pvPortMalloc+0x190>)
 8007e18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e1c:	685a      	ldr	r2, [r3, #4]
 8007e1e:	4b13      	ldr	r3, [pc, #76]	; (8007e6c <pvPortMalloc+0x184>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	431a      	orrs	r2, r3
 8007e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007e2e:	4b13      	ldr	r3, [pc, #76]	; (8007e7c <pvPortMalloc+0x194>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	3301      	adds	r3, #1
 8007e34:	4a11      	ldr	r2, [pc, #68]	; (8007e7c <pvPortMalloc+0x194>)
 8007e36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007e38:	f7ff f8a0 	bl	8006f7c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e3c:	69fb      	ldr	r3, [r7, #28]
 8007e3e:	f003 0307 	and.w	r3, r3, #7
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d00a      	beq.n	8007e5c <pvPortMalloc+0x174>
	__asm volatile
 8007e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e4a:	f383 8811 	msr	BASEPRI, r3
 8007e4e:	f3bf 8f6f 	isb	sy
 8007e52:	f3bf 8f4f 	dsb	sy
 8007e56:	60fb      	str	r3, [r7, #12]
}
 8007e58:	bf00      	nop
 8007e5a:	e7fe      	b.n	8007e5a <pvPortMalloc+0x172>
	return pvReturn;
 8007e5c:	69fb      	ldr	r3, [r7, #28]
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3728      	adds	r7, #40	; 0x28
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
 8007e66:	bf00      	nop
 8007e68:	200042a4 	.word	0x200042a4
 8007e6c:	200042b8 	.word	0x200042b8
 8007e70:	200042a8 	.word	0x200042a8
 8007e74:	2000429c 	.word	0x2000429c
 8007e78:	200042ac 	.word	0x200042ac
 8007e7c:	200042b0 	.word	0x200042b0

08007e80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b086      	sub	sp, #24
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d04d      	beq.n	8007f2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007e92:	2308      	movs	r3, #8
 8007e94:	425b      	negs	r3, r3
 8007e96:	697a      	ldr	r2, [r7, #20]
 8007e98:	4413      	add	r3, r2
 8007e9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	685a      	ldr	r2, [r3, #4]
 8007ea4:	4b24      	ldr	r3, [pc, #144]	; (8007f38 <vPortFree+0xb8>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4013      	ands	r3, r2
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d10a      	bne.n	8007ec4 <vPortFree+0x44>
	__asm volatile
 8007eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb2:	f383 8811 	msr	BASEPRI, r3
 8007eb6:	f3bf 8f6f 	isb	sy
 8007eba:	f3bf 8f4f 	dsb	sy
 8007ebe:	60fb      	str	r3, [r7, #12]
}
 8007ec0:	bf00      	nop
 8007ec2:	e7fe      	b.n	8007ec2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d00a      	beq.n	8007ee2 <vPortFree+0x62>
	__asm volatile
 8007ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed0:	f383 8811 	msr	BASEPRI, r3
 8007ed4:	f3bf 8f6f 	isb	sy
 8007ed8:	f3bf 8f4f 	dsb	sy
 8007edc:	60bb      	str	r3, [r7, #8]
}
 8007ede:	bf00      	nop
 8007ee0:	e7fe      	b.n	8007ee0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	685a      	ldr	r2, [r3, #4]
 8007ee6:	4b14      	ldr	r3, [pc, #80]	; (8007f38 <vPortFree+0xb8>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4013      	ands	r3, r2
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d01e      	beq.n	8007f2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d11a      	bne.n	8007f2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	685a      	ldr	r2, [r3, #4]
 8007efc:	4b0e      	ldr	r3, [pc, #56]	; (8007f38 <vPortFree+0xb8>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	43db      	mvns	r3, r3
 8007f02:	401a      	ands	r2, r3
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007f08:	f7ff f82a 	bl	8006f60 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	685a      	ldr	r2, [r3, #4]
 8007f10:	4b0a      	ldr	r3, [pc, #40]	; (8007f3c <vPortFree+0xbc>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4413      	add	r3, r2
 8007f16:	4a09      	ldr	r2, [pc, #36]	; (8007f3c <vPortFree+0xbc>)
 8007f18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007f1a:	6938      	ldr	r0, [r7, #16]
 8007f1c:	f000 f874 	bl	8008008 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007f20:	4b07      	ldr	r3, [pc, #28]	; (8007f40 <vPortFree+0xc0>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	3301      	adds	r3, #1
 8007f26:	4a06      	ldr	r2, [pc, #24]	; (8007f40 <vPortFree+0xc0>)
 8007f28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007f2a:	f7ff f827 	bl	8006f7c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007f2e:	bf00      	nop
 8007f30:	3718      	adds	r7, #24
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
 8007f36:	bf00      	nop
 8007f38:	200042b8 	.word	0x200042b8
 8007f3c:	200042a8 	.word	0x200042a8
 8007f40:	200042b4 	.word	0x200042b4

08007f44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007f44:	b480      	push	{r7}
 8007f46:	b085      	sub	sp, #20
 8007f48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007f4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007f4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007f50:	4b27      	ldr	r3, [pc, #156]	; (8007ff0 <prvHeapInit+0xac>)
 8007f52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f003 0307 	and.w	r3, r3, #7
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d00c      	beq.n	8007f78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	3307      	adds	r3, #7
 8007f62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f023 0307 	bic.w	r3, r3, #7
 8007f6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007f6c:	68ba      	ldr	r2, [r7, #8]
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	1ad3      	subs	r3, r2, r3
 8007f72:	4a1f      	ldr	r2, [pc, #124]	; (8007ff0 <prvHeapInit+0xac>)
 8007f74:	4413      	add	r3, r2
 8007f76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007f7c:	4a1d      	ldr	r2, [pc, #116]	; (8007ff4 <prvHeapInit+0xb0>)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007f82:	4b1c      	ldr	r3, [pc, #112]	; (8007ff4 <prvHeapInit+0xb0>)
 8007f84:	2200      	movs	r2, #0
 8007f86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	68ba      	ldr	r2, [r7, #8]
 8007f8c:	4413      	add	r3, r2
 8007f8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007f90:	2208      	movs	r2, #8
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	1a9b      	subs	r3, r3, r2
 8007f96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f023 0307 	bic.w	r3, r3, #7
 8007f9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	4a15      	ldr	r2, [pc, #84]	; (8007ff8 <prvHeapInit+0xb4>)
 8007fa4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007fa6:	4b14      	ldr	r3, [pc, #80]	; (8007ff8 <prvHeapInit+0xb4>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	2200      	movs	r2, #0
 8007fac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007fae:	4b12      	ldr	r3, [pc, #72]	; (8007ff8 <prvHeapInit+0xb4>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	68fa      	ldr	r2, [r7, #12]
 8007fbe:	1ad2      	subs	r2, r2, r3
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007fc4:	4b0c      	ldr	r3, [pc, #48]	; (8007ff8 <prvHeapInit+0xb4>)
 8007fc6:	681a      	ldr	r2, [r3, #0]
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	4a0a      	ldr	r2, [pc, #40]	; (8007ffc <prvHeapInit+0xb8>)
 8007fd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	4a09      	ldr	r2, [pc, #36]	; (8008000 <prvHeapInit+0xbc>)
 8007fda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007fdc:	4b09      	ldr	r3, [pc, #36]	; (8008004 <prvHeapInit+0xc0>)
 8007fde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007fe2:	601a      	str	r2, [r3, #0]
}
 8007fe4:	bf00      	nop
 8007fe6:	3714      	adds	r7, #20
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr
 8007ff0:	2000069c 	.word	0x2000069c
 8007ff4:	2000429c 	.word	0x2000429c
 8007ff8:	200042a4 	.word	0x200042a4
 8007ffc:	200042ac 	.word	0x200042ac
 8008000:	200042a8 	.word	0x200042a8
 8008004:	200042b8 	.word	0x200042b8

08008008 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008008:	b480      	push	{r7}
 800800a:	b085      	sub	sp, #20
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008010:	4b28      	ldr	r3, [pc, #160]	; (80080b4 <prvInsertBlockIntoFreeList+0xac>)
 8008012:	60fb      	str	r3, [r7, #12]
 8008014:	e002      	b.n	800801c <prvInsertBlockIntoFreeList+0x14>
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	60fb      	str	r3, [r7, #12]
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	429a      	cmp	r2, r3
 8008024:	d8f7      	bhi.n	8008016 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	68ba      	ldr	r2, [r7, #8]
 8008030:	4413      	add	r3, r2
 8008032:	687a      	ldr	r2, [r7, #4]
 8008034:	429a      	cmp	r2, r3
 8008036:	d108      	bne.n	800804a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	685a      	ldr	r2, [r3, #4]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	441a      	add	r2, r3
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	68ba      	ldr	r2, [r7, #8]
 8008054:	441a      	add	r2, r3
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	429a      	cmp	r2, r3
 800805c:	d118      	bne.n	8008090 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681a      	ldr	r2, [r3, #0]
 8008062:	4b15      	ldr	r3, [pc, #84]	; (80080b8 <prvInsertBlockIntoFreeList+0xb0>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	429a      	cmp	r2, r3
 8008068:	d00d      	beq.n	8008086 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	685a      	ldr	r2, [r3, #4]
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	441a      	add	r2, r3
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	681a      	ldr	r2, [r3, #0]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	601a      	str	r2, [r3, #0]
 8008084:	e008      	b.n	8008098 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008086:	4b0c      	ldr	r3, [pc, #48]	; (80080b8 <prvInsertBlockIntoFreeList+0xb0>)
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	601a      	str	r2, [r3, #0]
 800808e:	e003      	b.n	8008098 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681a      	ldr	r2, [r3, #0]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008098:	68fa      	ldr	r2, [r7, #12]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	429a      	cmp	r2, r3
 800809e:	d002      	beq.n	80080a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	687a      	ldr	r2, [r7, #4]
 80080a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80080a6:	bf00      	nop
 80080a8:	3714      	adds	r7, #20
 80080aa:	46bd      	mov	sp, r7
 80080ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b0:	4770      	bx	lr
 80080b2:	bf00      	nop
 80080b4:	2000429c 	.word	0x2000429c
 80080b8:	200042a4 	.word	0x200042a4

080080bc <__libc_init_array>:
 80080bc:	b570      	push	{r4, r5, r6, lr}
 80080be:	4d0d      	ldr	r5, [pc, #52]	; (80080f4 <__libc_init_array+0x38>)
 80080c0:	4c0d      	ldr	r4, [pc, #52]	; (80080f8 <__libc_init_array+0x3c>)
 80080c2:	1b64      	subs	r4, r4, r5
 80080c4:	10a4      	asrs	r4, r4, #2
 80080c6:	2600      	movs	r6, #0
 80080c8:	42a6      	cmp	r6, r4
 80080ca:	d109      	bne.n	80080e0 <__libc_init_array+0x24>
 80080cc:	4d0b      	ldr	r5, [pc, #44]	; (80080fc <__libc_init_array+0x40>)
 80080ce:	4c0c      	ldr	r4, [pc, #48]	; (8008100 <__libc_init_array+0x44>)
 80080d0:	f000 f8f6 	bl	80082c0 <_init>
 80080d4:	1b64      	subs	r4, r4, r5
 80080d6:	10a4      	asrs	r4, r4, #2
 80080d8:	2600      	movs	r6, #0
 80080da:	42a6      	cmp	r6, r4
 80080dc:	d105      	bne.n	80080ea <__libc_init_array+0x2e>
 80080de:	bd70      	pop	{r4, r5, r6, pc}
 80080e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80080e4:	4798      	blx	r3
 80080e6:	3601      	adds	r6, #1
 80080e8:	e7ee      	b.n	80080c8 <__libc_init_array+0xc>
 80080ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80080ee:	4798      	blx	r3
 80080f0:	3601      	adds	r6, #1
 80080f2:	e7f2      	b.n	80080da <__libc_init_array+0x1e>
 80080f4:	080083e0 	.word	0x080083e0
 80080f8:	080083e0 	.word	0x080083e0
 80080fc:	080083e0 	.word	0x080083e0
 8008100:	080083e4 	.word	0x080083e4

08008104 <__retarget_lock_acquire_recursive>:
 8008104:	4770      	bx	lr

08008106 <__retarget_lock_release_recursive>:
 8008106:	4770      	bx	lr

08008108 <memcpy>:
 8008108:	440a      	add	r2, r1
 800810a:	4291      	cmp	r1, r2
 800810c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008110:	d100      	bne.n	8008114 <memcpy+0xc>
 8008112:	4770      	bx	lr
 8008114:	b510      	push	{r4, lr}
 8008116:	f811 4b01 	ldrb.w	r4, [r1], #1
 800811a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800811e:	4291      	cmp	r1, r2
 8008120:	d1f9      	bne.n	8008116 <memcpy+0xe>
 8008122:	bd10      	pop	{r4, pc}

08008124 <memset>:
 8008124:	4402      	add	r2, r0
 8008126:	4603      	mov	r3, r0
 8008128:	4293      	cmp	r3, r2
 800812a:	d100      	bne.n	800812e <memset+0xa>
 800812c:	4770      	bx	lr
 800812e:	f803 1b01 	strb.w	r1, [r3], #1
 8008132:	e7f9      	b.n	8008128 <memset+0x4>

08008134 <cleanup_glue>:
 8008134:	b538      	push	{r3, r4, r5, lr}
 8008136:	460c      	mov	r4, r1
 8008138:	6809      	ldr	r1, [r1, #0]
 800813a:	4605      	mov	r5, r0
 800813c:	b109      	cbz	r1, 8008142 <cleanup_glue+0xe>
 800813e:	f7ff fff9 	bl	8008134 <cleanup_glue>
 8008142:	4621      	mov	r1, r4
 8008144:	4628      	mov	r0, r5
 8008146:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800814a:	f000 b869 	b.w	8008220 <_free_r>
	...

08008150 <_reclaim_reent>:
 8008150:	4b2c      	ldr	r3, [pc, #176]	; (8008204 <_reclaim_reent+0xb4>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4283      	cmp	r3, r0
 8008156:	b570      	push	{r4, r5, r6, lr}
 8008158:	4604      	mov	r4, r0
 800815a:	d051      	beq.n	8008200 <_reclaim_reent+0xb0>
 800815c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800815e:	b143      	cbz	r3, 8008172 <_reclaim_reent+0x22>
 8008160:	68db      	ldr	r3, [r3, #12]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d14a      	bne.n	80081fc <_reclaim_reent+0xac>
 8008166:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008168:	6819      	ldr	r1, [r3, #0]
 800816a:	b111      	cbz	r1, 8008172 <_reclaim_reent+0x22>
 800816c:	4620      	mov	r0, r4
 800816e:	f000 f857 	bl	8008220 <_free_r>
 8008172:	6961      	ldr	r1, [r4, #20]
 8008174:	b111      	cbz	r1, 800817c <_reclaim_reent+0x2c>
 8008176:	4620      	mov	r0, r4
 8008178:	f000 f852 	bl	8008220 <_free_r>
 800817c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800817e:	b111      	cbz	r1, 8008186 <_reclaim_reent+0x36>
 8008180:	4620      	mov	r0, r4
 8008182:	f000 f84d 	bl	8008220 <_free_r>
 8008186:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008188:	b111      	cbz	r1, 8008190 <_reclaim_reent+0x40>
 800818a:	4620      	mov	r0, r4
 800818c:	f000 f848 	bl	8008220 <_free_r>
 8008190:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008192:	b111      	cbz	r1, 800819a <_reclaim_reent+0x4a>
 8008194:	4620      	mov	r0, r4
 8008196:	f000 f843 	bl	8008220 <_free_r>
 800819a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800819c:	b111      	cbz	r1, 80081a4 <_reclaim_reent+0x54>
 800819e:	4620      	mov	r0, r4
 80081a0:	f000 f83e 	bl	8008220 <_free_r>
 80081a4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80081a6:	b111      	cbz	r1, 80081ae <_reclaim_reent+0x5e>
 80081a8:	4620      	mov	r0, r4
 80081aa:	f000 f839 	bl	8008220 <_free_r>
 80081ae:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80081b0:	b111      	cbz	r1, 80081b8 <_reclaim_reent+0x68>
 80081b2:	4620      	mov	r0, r4
 80081b4:	f000 f834 	bl	8008220 <_free_r>
 80081b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80081ba:	b111      	cbz	r1, 80081c2 <_reclaim_reent+0x72>
 80081bc:	4620      	mov	r0, r4
 80081be:	f000 f82f 	bl	8008220 <_free_r>
 80081c2:	69a3      	ldr	r3, [r4, #24]
 80081c4:	b1e3      	cbz	r3, 8008200 <_reclaim_reent+0xb0>
 80081c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80081c8:	4620      	mov	r0, r4
 80081ca:	4798      	blx	r3
 80081cc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80081ce:	b1b9      	cbz	r1, 8008200 <_reclaim_reent+0xb0>
 80081d0:	4620      	mov	r0, r4
 80081d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80081d6:	f7ff bfad 	b.w	8008134 <cleanup_glue>
 80081da:	5949      	ldr	r1, [r1, r5]
 80081dc:	b941      	cbnz	r1, 80081f0 <_reclaim_reent+0xa0>
 80081de:	3504      	adds	r5, #4
 80081e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081e2:	2d80      	cmp	r5, #128	; 0x80
 80081e4:	68d9      	ldr	r1, [r3, #12]
 80081e6:	d1f8      	bne.n	80081da <_reclaim_reent+0x8a>
 80081e8:	4620      	mov	r0, r4
 80081ea:	f000 f819 	bl	8008220 <_free_r>
 80081ee:	e7ba      	b.n	8008166 <_reclaim_reent+0x16>
 80081f0:	680e      	ldr	r6, [r1, #0]
 80081f2:	4620      	mov	r0, r4
 80081f4:	f000 f814 	bl	8008220 <_free_r>
 80081f8:	4631      	mov	r1, r6
 80081fa:	e7ef      	b.n	80081dc <_reclaim_reent+0x8c>
 80081fc:	2500      	movs	r5, #0
 80081fe:	e7ef      	b.n	80081e0 <_reclaim_reent+0x90>
 8008200:	bd70      	pop	{r4, r5, r6, pc}
 8008202:	bf00      	nop
 8008204:	20000010 	.word	0x20000010

08008208 <__malloc_lock>:
 8008208:	4801      	ldr	r0, [pc, #4]	; (8008210 <__malloc_lock+0x8>)
 800820a:	f7ff bf7b 	b.w	8008104 <__retarget_lock_acquire_recursive>
 800820e:	bf00      	nop
 8008210:	20004454 	.word	0x20004454

08008214 <__malloc_unlock>:
 8008214:	4801      	ldr	r0, [pc, #4]	; (800821c <__malloc_unlock+0x8>)
 8008216:	f7ff bf76 	b.w	8008106 <__retarget_lock_release_recursive>
 800821a:	bf00      	nop
 800821c:	20004454 	.word	0x20004454

08008220 <_free_r>:
 8008220:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008222:	2900      	cmp	r1, #0
 8008224:	d048      	beq.n	80082b8 <_free_r+0x98>
 8008226:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800822a:	9001      	str	r0, [sp, #4]
 800822c:	2b00      	cmp	r3, #0
 800822e:	f1a1 0404 	sub.w	r4, r1, #4
 8008232:	bfb8      	it	lt
 8008234:	18e4      	addlt	r4, r4, r3
 8008236:	f7ff ffe7 	bl	8008208 <__malloc_lock>
 800823a:	4a20      	ldr	r2, [pc, #128]	; (80082bc <_free_r+0x9c>)
 800823c:	9801      	ldr	r0, [sp, #4]
 800823e:	6813      	ldr	r3, [r2, #0]
 8008240:	4615      	mov	r5, r2
 8008242:	b933      	cbnz	r3, 8008252 <_free_r+0x32>
 8008244:	6063      	str	r3, [r4, #4]
 8008246:	6014      	str	r4, [r2, #0]
 8008248:	b003      	add	sp, #12
 800824a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800824e:	f7ff bfe1 	b.w	8008214 <__malloc_unlock>
 8008252:	42a3      	cmp	r3, r4
 8008254:	d90b      	bls.n	800826e <_free_r+0x4e>
 8008256:	6821      	ldr	r1, [r4, #0]
 8008258:	1862      	adds	r2, r4, r1
 800825a:	4293      	cmp	r3, r2
 800825c:	bf04      	itt	eq
 800825e:	681a      	ldreq	r2, [r3, #0]
 8008260:	685b      	ldreq	r3, [r3, #4]
 8008262:	6063      	str	r3, [r4, #4]
 8008264:	bf04      	itt	eq
 8008266:	1852      	addeq	r2, r2, r1
 8008268:	6022      	streq	r2, [r4, #0]
 800826a:	602c      	str	r4, [r5, #0]
 800826c:	e7ec      	b.n	8008248 <_free_r+0x28>
 800826e:	461a      	mov	r2, r3
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	b10b      	cbz	r3, 8008278 <_free_r+0x58>
 8008274:	42a3      	cmp	r3, r4
 8008276:	d9fa      	bls.n	800826e <_free_r+0x4e>
 8008278:	6811      	ldr	r1, [r2, #0]
 800827a:	1855      	adds	r5, r2, r1
 800827c:	42a5      	cmp	r5, r4
 800827e:	d10b      	bne.n	8008298 <_free_r+0x78>
 8008280:	6824      	ldr	r4, [r4, #0]
 8008282:	4421      	add	r1, r4
 8008284:	1854      	adds	r4, r2, r1
 8008286:	42a3      	cmp	r3, r4
 8008288:	6011      	str	r1, [r2, #0]
 800828a:	d1dd      	bne.n	8008248 <_free_r+0x28>
 800828c:	681c      	ldr	r4, [r3, #0]
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	6053      	str	r3, [r2, #4]
 8008292:	4421      	add	r1, r4
 8008294:	6011      	str	r1, [r2, #0]
 8008296:	e7d7      	b.n	8008248 <_free_r+0x28>
 8008298:	d902      	bls.n	80082a0 <_free_r+0x80>
 800829a:	230c      	movs	r3, #12
 800829c:	6003      	str	r3, [r0, #0]
 800829e:	e7d3      	b.n	8008248 <_free_r+0x28>
 80082a0:	6825      	ldr	r5, [r4, #0]
 80082a2:	1961      	adds	r1, r4, r5
 80082a4:	428b      	cmp	r3, r1
 80082a6:	bf04      	itt	eq
 80082a8:	6819      	ldreq	r1, [r3, #0]
 80082aa:	685b      	ldreq	r3, [r3, #4]
 80082ac:	6063      	str	r3, [r4, #4]
 80082ae:	bf04      	itt	eq
 80082b0:	1949      	addeq	r1, r1, r5
 80082b2:	6021      	streq	r1, [r4, #0]
 80082b4:	6054      	str	r4, [r2, #4]
 80082b6:	e7c7      	b.n	8008248 <_free_r+0x28>
 80082b8:	b003      	add	sp, #12
 80082ba:	bd30      	pop	{r4, r5, pc}
 80082bc:	200042bc 	.word	0x200042bc

080082c0 <_init>:
 80082c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082c2:	bf00      	nop
 80082c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082c6:	bc08      	pop	{r3}
 80082c8:	469e      	mov	lr, r3
 80082ca:	4770      	bx	lr

080082cc <_fini>:
 80082cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ce:	bf00      	nop
 80082d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082d2:	bc08      	pop	{r3}
 80082d4:	469e      	mov	lr, r3
 80082d6:	4770      	bx	lr
