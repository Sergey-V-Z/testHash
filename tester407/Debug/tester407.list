
tester407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008094  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000980  08008224  08008224  00018224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ba4  08008ba4  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008ba4  08008ba4  00018ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008bac  08008bac  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bac  08008bac  00018bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008bb0  08008bb0  00018bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008bb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          000043f4  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004484  20004484  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001befc  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000371c  00000000  00000000  0003bfbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001498  00000000  00000000  0003f6d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001368  00000000  00000000  00040b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000236c8  00000000  00000000  00041ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018d0f  00000000  00000000  000655a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5413  00000000  00000000  0007e2af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001536c2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005938  00000000  00000000  00153718  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800820c 	.word	0x0800820c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	0800820c 	.word	0x0800820c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	60b9      	str	r1, [r7, #8]
 80004d2:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	4a07      	ldr	r2, [pc, #28]	; (80004f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80004d8:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004da:	68bb      	ldr	r3, [r7, #8]
 80004dc:	4a06      	ldr	r2, [pc, #24]	; (80004f8 <vApplicationGetIdleTaskMemory+0x30>)
 80004de:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	2280      	movs	r2, #128	; 0x80
 80004e4:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 80004e6:	bf00      	nop
 80004e8:	3714      	adds	r7, #20
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	200002d4 	.word	0x200002d4
 80004f8:	20000388 	.word	0x20000388

080004fc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80004fc:	b5b0      	push	{r4, r5, r7, lr}
 80004fe:	b096      	sub	sp, #88	; 0x58
 8000500:	af00      	add	r7, sp, #0
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of testTask */
  osThreadDef(testTask, TestTask, osPriorityNormal, 0, 256);
 8000502:	4b1d      	ldr	r3, [pc, #116]	; (8000578 <MX_FREERTOS_Init+0x7c>)
 8000504:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000508:	461d      	mov	r5, r3
 800050a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800050c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800050e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000512:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  testTaskHandle = osThreadCreate(osThread(testTask), NULL);
 8000516:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800051a:	2100      	movs	r1, #0
 800051c:	4618      	mov	r0, r3
 800051e:	f006 face 	bl	8006abe <osThreadCreate>
 8000522:	4603      	mov	r3, r0
 8000524:	4a15      	ldr	r2, [pc, #84]	; (800057c <MX_FREERTOS_Init+0x80>)
 8000526:	6013      	str	r3, [r2, #0]

  /* definition and creation of lcdTask */
  osThreadDef(lcdTask, LCDTask, osPriorityNormal, 0, 256);
 8000528:	4b15      	ldr	r3, [pc, #84]	; (8000580 <MX_FREERTOS_Init+0x84>)
 800052a:	f107 0420 	add.w	r4, r7, #32
 800052e:	461d      	mov	r5, r3
 8000530:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000532:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000534:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000538:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  lcdTaskHandle = osThreadCreate(osThread(lcdTask), NULL);
 800053c:	f107 0320 	add.w	r3, r7, #32
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f006 fabb 	bl	8006abe <osThreadCreate>
 8000548:	4603      	mov	r3, r0
 800054a:	4a0e      	ldr	r2, [pc, #56]	; (8000584 <MX_FREERTOS_Init+0x88>)
 800054c:	6013      	str	r3, [r2, #0]

  /* definition and creation of I2C_Task */
  osThreadDef(I2C_Task, i2c_Task, osPriorityNormal, 0, 128);
 800054e:	4b0e      	ldr	r3, [pc, #56]	; (8000588 <MX_FREERTOS_Init+0x8c>)
 8000550:	1d3c      	adds	r4, r7, #4
 8000552:	461d      	mov	r5, r3
 8000554:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000556:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000558:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800055c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  I2C_TaskHandle = osThreadCreate(osThread(I2C_Task), NULL);
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	2100      	movs	r1, #0
 8000564:	4618      	mov	r0, r3
 8000566:	f006 faaa 	bl	8006abe <osThreadCreate>
 800056a:	4603      	mov	r3, r0
 800056c:	4a07      	ldr	r2, [pc, #28]	; (800058c <MX_FREERTOS_Init+0x90>)
 800056e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000570:	bf00      	nop
 8000572:	3758      	adds	r7, #88	; 0x58
 8000574:	46bd      	mov	sp, r7
 8000576:	bdb0      	pop	{r4, r5, r7, pc}
 8000578:	08008244 	.word	0x08008244
 800057c:	200042f8 	.word	0x200042f8
 8000580:	08008260 	.word	0x08008260
 8000584:	200042f0 	.word	0x200042f0
 8000588:	0800827c 	.word	0x0800827c
 800058c:	200042e8 	.word	0x200042e8

08000590 <TestTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_TestTask */
void TestTask(void const * argument)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b088      	sub	sp, #32
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TestTask */

	uint32_t timeOutUART = 50;
 8000598:	2332      	movs	r3, #50	; 0x32
 800059a:	61fb      	str	r3, [r7, #28]
	uint8_t snum[5];
	//команды uart
	uint8_t cmdASIC[7] = { 0x55, 0xAA, 0x52, 0x05, 0x00, 0x00, 0x0A };
 800059c:	4a56      	ldr	r2, [pc, #344]	; (80006f8 <TestTask+0x168>)
 800059e:	f107 030c 	add.w	r3, r7, #12
 80005a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005a6:	6018      	str	r0, [r3, #0]
 80005a8:	3304      	adds	r3, #4
 80005aa:	8019      	strh	r1, [r3, #0]
 80005ac:	3302      	adds	r3, #2
 80005ae:	0c0a      	lsrs	r2, r1, #16
 80005b0:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(RST_ASIC_GPIO_Port, RST_ASIC_Pin, GPIO_PIN_RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005b8:	4850      	ldr	r0, [pc, #320]	; (80006fc <TestTask+0x16c>)
 80005ba:	f001 fc93 	bl	8001ee4 <HAL_GPIO_WritePin>


	/* Infinite loop */
	for (;;) {
		if (start && ready) {
 80005be:	4b50      	ldr	r3, [pc, #320]	; (8000700 <TestTask+0x170>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d0fb      	beq.n	80005be <TestTask+0x2e>
 80005c6:	4b4f      	ldr	r3, [pc, #316]	; (8000704 <TestTask+0x174>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d0f7      	beq.n	80005be <TestTask+0x2e>
			counter_bytes = 0;
 80005ce:	4b4e      	ldr	r3, [pc, #312]	; (8000708 <TestTask+0x178>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(RST_ASIC_GPIO_Port, RST_ASIC_Pin, GPIO_PIN_RESET);
 80005d4:	2200      	movs	r2, #0
 80005d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005da:	4848      	ldr	r0, [pc, #288]	; (80006fc <TestTask+0x16c>)
 80005dc:	f001 fc82 	bl	8001ee4 <HAL_GPIO_WritePin>
			osDelay(4);
 80005e0:	2004      	movs	r0, #4
 80005e2:	f006 fab8 	bl	8006b56 <osDelay>
			HAL_GPIO_WritePin(RST_ASIC_GPIO_Port, RST_ASIC_Pin, GPIO_PIN_SET);
 80005e6:	2201      	movs	r2, #1
 80005e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005ec:	4843      	ldr	r0, [pc, #268]	; (80006fc <TestTask+0x16c>)
 80005ee:	f001 fc79 	bl	8001ee4 <HAL_GPIO_WritePin>
			osDelay(1200);
 80005f2:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80005f6:	f006 faae 	bl	8006b56 <osDelay>

			//цикл опроса
			while (start) {
 80005fa:	e078      	b.n	80006ee <TestTask+0x15e>

				//сброс асиков
				HAL_GPIO_WritePin(RST_ASIC_GPIO_Port, RST_ASIC_Pin, GPIO_PIN_RESET);
 80005fc:	2200      	movs	r2, #0
 80005fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000602:	483e      	ldr	r0, [pc, #248]	; (80006fc <TestTask+0x16c>)
 8000604:	f001 fc6e 	bl	8001ee4 <HAL_GPIO_WritePin>
				osDelay(500);
 8000608:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800060c:	f006 faa3 	bl	8006b56 <osDelay>
				HAL_GPIO_WritePin(RST_ASIC_GPIO_Port, RST_ASIC_Pin, GPIO_PIN_SET);
 8000610:	2201      	movs	r2, #1
 8000612:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000616:	4839      	ldr	r0, [pc, #228]	; (80006fc <TestTask+0x16c>)
 8000618:	f001 fc64 	bl	8001ee4 <HAL_GPIO_WritePin>
				osDelay(500);
 800061c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000620:	f006 fa99 	bl	8006b56 <osDelay>

				status_uart = HAL_UART_Receive_IT(&huart6, readASIC, 1);
 8000624:	2201      	movs	r2, #1
 8000626:	4939      	ldr	r1, [pc, #228]	; (800070c <TestTask+0x17c>)
 8000628:	4839      	ldr	r0, [pc, #228]	; (8000710 <TestTask+0x180>)
 800062a:	f005 fa9e 	bl	8005b6a <HAL_UART_Receive_IT>
 800062e:	4603      	mov	r3, r0
 8000630:	461a      	mov	r2, r3
 8000632:	4b38      	ldr	r3, [pc, #224]	; (8000714 <TestTask+0x184>)
 8000634:	701a      	strb	r2, [r3, #0]
				status_uart = HAL_UART_Transmit(&huart1, cmdASIC, 7, 20);
 8000636:	f107 010c 	add.w	r1, r7, #12
 800063a:	2314      	movs	r3, #20
 800063c:	2207      	movs	r2, #7
 800063e:	4836      	ldr	r0, [pc, #216]	; (8000718 <TestTask+0x188>)
 8000640:	f005 fa01 	bl	8005a46 <HAL_UART_Transmit>
 8000644:	4603      	mov	r3, r0
 8000646:	461a      	mov	r2, r3
 8000648:	4b32      	ldr	r3, [pc, #200]	; (8000714 <TestTask+0x184>)
 800064a:	701a      	strb	r2, [r3, #0]

				//запускаем таймер
				status_uartTIM = 1;
 800064c:	4b33      	ldr	r3, [pc, #204]	; (800071c <TestTask+0x18c>)
 800064e:	2201      	movs	r2, #1
 8000650:	701a      	strb	r2, [r3, #0]
				// ожидать таймаута по уарту
				while(uartTIM < timeOutUART){
 8000652:	e002      	b.n	800065a <TestTask+0xca>
					osDelay(1);
 8000654:	2001      	movs	r0, #1
 8000656:	f006 fa7e 	bl	8006b56 <osDelay>
				while(uartTIM < timeOutUART){
 800065a:	4b31      	ldr	r3, [pc, #196]	; (8000720 <TestTask+0x190>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	69fa      	ldr	r2, [r7, #28]
 8000660:	429a      	cmp	r2, r3
 8000662:	d8f7      	bhi.n	8000654 <TestTask+0xc4>
				}
				uartTIM = 0;
 8000664:	4b2e      	ldr	r3, [pc, #184]	; (8000720 <TestTask+0x190>)
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
				status_uartTIM = 0;
 800066a:	4b2c      	ldr	r3, [pc, #176]	; (800071c <TestTask+0x18c>)
 800066c:	2200      	movs	r2, #0
 800066e:	701a      	strb	r2, [r3, #0]

				// все данные пришли отключаем уарт
				HAL_UART_AbortReceive(&huart6);
 8000670:	4827      	ldr	r0, [pc, #156]	; (8000710 <TestTask+0x180>)
 8000672:	f005 faaa 	bl	8005bca <HAL_UART_AbortReceive>

				//проверить пришедшие данные сравненией с шаблоном

				//посчитать количесво асиков

				pre_count_ASIC = counter_bytes / 9;
 8000676:	4b24      	ldr	r3, [pc, #144]	; (8000708 <TestTask+0x178>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4a2a      	ldr	r2, [pc, #168]	; (8000724 <TestTask+0x194>)
 800067c:	fba2 2303 	umull	r2, r3, r2, r3
 8000680:	085b      	lsrs	r3, r3, #1
 8000682:	4a29      	ldr	r2, [pc, #164]	; (8000728 <TestTask+0x198>)
 8000684:	6013      	str	r3, [r2, #0]
				if(pre_count_ASIC == 0){
 8000686:	4b28      	ldr	r3, [pc, #160]	; (8000728 <TestTask+0x198>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d111      	bne.n	80006b2 <TestTask+0x122>
					itoa(pre_count_ASIC, (char*)snum, 10);
 800068e:	4b26      	ldr	r3, [pc, #152]	; (8000728 <TestTask+0x198>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4618      	mov	r0, r3
 8000694:	f107 0314 	add.w	r3, r7, #20
 8000698:	220a      	movs	r2, #10
 800069a:	4619      	mov	r1, r3
 800069c:	f007 fca2 	bl	8007fe4 <itoa>
					OLED_Clear();
 80006a0:	f000 fd89 	bl	80011b6 <OLED_Clear>
					OLED_ShowString(0,0,snum,16);
 80006a4:	f107 0214 	add.w	r2, r7, #20
 80006a8:	2310      	movs	r3, #16
 80006aa:	2100      	movs	r1, #0
 80006ac:	2000      	movs	r0, #0
 80006ae:	f000 fe55 	bl	800135c <OLED_ShowString>
				}
				itoa(pre_count_ASIC, (char*)snum, 10);
 80006b2:	4b1d      	ldr	r3, [pc, #116]	; (8000728 <TestTask+0x198>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4618      	mov	r0, r3
 80006b8:	f107 0314 	add.w	r3, r7, #20
 80006bc:	220a      	movs	r2, #10
 80006be:	4619      	mov	r1, r3
 80006c0:	f007 fc90 	bl	8007fe4 <itoa>
				OLED_Clear();
 80006c4:	f000 fd77 	bl	80011b6 <OLED_Clear>
				OLED_ShowString(0,0,snum,16);
 80006c8:	f107 0214 	add.w	r2, r7, #20
 80006cc:	2310      	movs	r3, #16
 80006ce:	2100      	movs	r1, #0
 80006d0:	2000      	movs	r0, #0
 80006d2:	f000 fe43 	bl	800135c <OLED_ShowString>

				counter_bytes = 0;
 80006d6:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <TestTask+0x178>)
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
				memset(readASIC, 0, sizeof readASIC);
 80006dc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80006e0:	2100      	movs	r1, #0
 80006e2:	480a      	ldr	r0, [pc, #40]	; (800070c <TestTask+0x17c>)
 80006e4:	f007 fc82 	bl	8007fec <memset>

				osDelay(200);
 80006e8:	20c8      	movs	r0, #200	; 0xc8
 80006ea:	f006 fa34 	bl	8006b56 <osDelay>
			while (start) {
 80006ee:	4b04      	ldr	r3, [pc, #16]	; (8000700 <TestTask+0x170>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d182      	bne.n	80005fc <TestTask+0x6c>
		if (start && ready) {
 80006f6:	e762      	b.n	80005be <TestTask+0x2e>
 80006f8:	08008298 	.word	0x08008298
 80006fc:	40020000 	.word	0x40020000
 8000700:	200002d0 	.word	0x200002d0
 8000704:	200002d1 	.word	0x200002d1
 8000708:	200000b0 	.word	0x200000b0
 800070c:	200000b4 	.word	0x200000b4
 8000710:	20004430 	.word	0x20004430
 8000714:	200042ec 	.word	0x200042ec
 8000718:	200043ec 	.word	0x200043ec
 800071c:	2000058c 	.word	0x2000058c
 8000720:	20000588 	.word	0x20000588
 8000724:	38e38e39 	.word	0x38e38e39
 8000728:	200000ac 	.word	0x200000ac

0800072c <LCDTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_LCDTask */
void LCDTask(void const * argument)
{
 800072c:	b590      	push	{r4, r7, lr}
 800072e:	b087      	sub	sp, #28
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LCDTask */

	uint8_t A[]="hello world !!";
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <LCDTask+0x3c>)
 8000736:	f107 0408 	add.w	r4, r7, #8
 800073a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800073c:	c407      	stmia	r4!, {r0, r1, r2}
 800073e:	8023      	strh	r3, [r4, #0]
 8000740:	3402      	adds	r4, #2
 8000742:	0c1b      	lsrs	r3, r3, #16
 8000744:	7023      	strb	r3, [r4, #0]
	//нициализировать oled-экран
  OLED_Init();
 8000746:	f000 fd2d 	bl	80011a4 <OLED_Init>
	//Включите OLED-дисплей
	OLED_Display_On();
 800074a:	f000 fd5e 	bl	800120a <OLED_Display_On>
	//Очисти экран
	OLED_Clear();
 800074e:	f000 fd32 	bl	80011b6 <OLED_Clear>
//	OLED_ShowNum(10,10,10,8,8);
//	OLED_ShowChar(0, 0,'C',16);
	OLED_ShowString(0,0,A,16);
 8000752:	f107 0208 	add.w	r2, r7, #8
 8000756:	2310      	movs	r3, #16
 8000758:	2100      	movs	r1, #0
 800075a:	2000      	movs	r0, #0
 800075c:	f000 fdfe 	bl	800135c <OLED_ShowString>

/* Infinite loop */
for (;;) {


	osDelay(1);
 8000760:	2001      	movs	r0, #1
 8000762:	f006 f9f8 	bl	8006b56 <osDelay>
 8000766:	e7fb      	b.n	8000760 <LCDTask+0x34>
 8000768:	080082a0 	.word	0x080082a0

0800076c <i2c_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_i2c_Task */
void i2c_Task(void const * argument)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b09a      	sub	sp, #104	; 0x68
 8000770:	af02      	add	r7, sp, #8
 8000772:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN i2c_Task */

	//команды i2c
	uint16_t addr = 0x20;
 8000774:	2320      	movs	r3, #32
 8000776:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	addr = addr<<1;
 800077a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800077e:	005b      	lsls	r3, r3, #1
 8000780:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

	GPIO_PinState plug = 0;
 8000784:	2300      	movs	r3, #0
 8000786:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59

	uint8_t cmdStart_1[6] = { 0x55, 0xAA, 0x04, 0x07, 0x00, 0x0B };
 800078a:	4aa8      	ldr	r2, [pc, #672]	; (8000a2c <i2c_Task+0x2c0>)
 800078c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000790:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000794:	6018      	str	r0, [r3, #0]
 8000796:	3304      	adds	r3, #4
 8000798:	8019      	strh	r1, [r3, #0]
	uint8_t cmdRead_1[2] = { 0x00 };// 0x07 0x01
 800079a:	2300      	movs	r3, #0
 800079c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	uint8_t cmdStart_2[6] = { 0x55, 0xAA, 0x04, 0x06, 0x00, 0x0A };
 80007a0:	4aa3      	ldr	r2, [pc, #652]	; (8000a30 <i2c_Task+0x2c4>)
 80007a2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80007a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007aa:	6018      	str	r0, [r3, #0]
 80007ac:	3304      	adds	r3, #4
 80007ae:	8019      	strh	r1, [r3, #0]
	uint8_t cmdRead_2[2] = { 0x00 };// 0x06 0x01
 80007b0:	2300      	movs	r3, #0
 80007b2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

	uint8_t cmdStart_3[9] = { 0x55, 0xAA, 0x07, 0x10, 0x19, 0x00, 0x00, 0x00, 0x30 };
 80007b6:	4a9f      	ldr	r2, [pc, #636]	; (8000a34 <i2c_Task+0x2c8>)
 80007b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80007bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80007be:	c303      	stmia	r3!, {r0, r1}
 80007c0:	701a      	strb	r2, [r3, #0]
	uint8_t cmdRead_3[2] = { 0x00 };// 0x10 0x01
 80007c2:	2300      	movs	r3, #0
 80007c4:	863b      	strh	r3, [r7, #48]	; 0x30

	uint8_t cmdStart_4[7] = { 0x55, 0xAA, 0x05, 0x15, 0x01, 0x00, 0x1B };
 80007c6:	4a9c      	ldr	r2, [pc, #624]	; (8000a38 <i2c_Task+0x2cc>)
 80007c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007d0:	6018      	str	r0, [r3, #0]
 80007d2:	3304      	adds	r3, #4
 80007d4:	8019      	strh	r1, [r3, #0]
 80007d6:	3302      	adds	r3, #2
 80007d8:	0c0a      	lsrs	r2, r1, #16
 80007da:	701a      	strb	r2, [r3, #0]
	uint8_t cmdRead_4[2] = { 0x00 };// 0x15 0x01
 80007dc:	2300      	movs	r3, #0
 80007de:	84bb      	strh	r3, [r7, #36]	; 0x24

	uint8_t cmdStop[7] = { 0x55, 0xAA, 0x05, 0x15, 0x00, 0x00, 0x1A };
 80007e0:	4a96      	ldr	r2, [pc, #600]	; (8000a3c <i2c_Task+0x2d0>)
 80007e2:	f107 031c 	add.w	r3, r7, #28
 80007e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007ea:	6018      	str	r0, [r3, #0]
 80007ec:	3304      	adds	r3, #4
 80007ee:	8019      	strh	r1, [r3, #0]
 80007f0:	3302      	adds	r3, #2
 80007f2:	0c0a      	lsrs	r2, r1, #16
 80007f4:	701a      	strb	r2, [r3, #0]
	uint8_t cmdRead_stop[2] = { 0x00 };// 0x15 0x01
 80007f6:	2300      	movs	r3, #0
 80007f8:	833b      	strh	r3, [r7, #24]

	uint8_t cmdRefresh[6] = { 0x55, 0xAA, 0x04, 0x16, 0x00, 0x1A };
 80007fa:	4a91      	ldr	r2, [pc, #580]	; (8000a40 <i2c_Task+0x2d4>)
 80007fc:	f107 0310 	add.w	r3, r7, #16
 8000800:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000804:	6018      	str	r0, [r3, #0]
 8000806:	3304      	adds	r3, #4
 8000808:	8019      	strh	r1, [r3, #0]
	uint8_t cmdRead_Refresh[6] = { 0x00 };// 0x06 0x16 0x01 0x00 0x00 0x1D
 800080a:	2300      	movs	r3, #0
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	2300      	movs	r3, #0
 8000810:	81bb      	strh	r3, [r7, #12]


	HAL_GPIO_WritePin(A0_GPIO_Port, A0_Pin, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	2102      	movs	r1, #2
 8000816:	488b      	ldr	r0, [pc, #556]	; (8000a44 <i2c_Task+0x2d8>)
 8000818:	f001 fb64 	bl	8001ee4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, GPIO_PIN_RESET);
 800081c:	2200      	movs	r2, #0
 800081e:	2101      	movs	r1, #1
 8000820:	4888      	ldr	r0, [pc, #544]	; (8000a44 <i2c_Task+0x2d8>)
 8000822:	f001 fb5f 	bl	8001ee4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	2104      	movs	r1, #4
 800082a:	4886      	ldr	r0, [pc, #536]	; (8000a44 <i2c_Task+0x2d8>)
 800082c:	f001 fb5a 	bl	8001ee4 <HAL_GPIO_WritePin>


	plug = HAL_GPIO_ReadPin(PLUG_GPIO_Port, PLUG_Pin);
 8000830:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000834:	4884      	ldr	r0, [pc, #528]	; (8000a48 <i2c_Task+0x2dc>)
 8000836:	f001 fb3d 	bl	8001eb4 <HAL_GPIO_ReadPin>
 800083a:	4603      	mov	r3, r0
 800083c:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59

  /* Infinite loop */
  for(;;)
  {

	  if (start && plug) {
 8000840:	4b82      	ldr	r3, [pc, #520]	; (8000a4c <i2c_Task+0x2e0>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d0fb      	beq.n	8000840 <i2c_Task+0xd4>
 8000848:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 800084c:	2b00      	cmp	r3, #0
 800084e:	d0f7      	beq.n	8000840 <i2c_Task+0xd4>
					status_i2c = HAL_I2C_Master_Transmit(&hi2c1, addr, cmdStart_1, 6, 20);
 8000850:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000854:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000858:	2314      	movs	r3, #20
 800085a:	9300      	str	r3, [sp, #0]
 800085c:	2306      	movs	r3, #6
 800085e:	487c      	ldr	r0, [pc, #496]	; (8000a50 <i2c_Task+0x2e4>)
 8000860:	f001 fc9e 	bl	80021a0 <HAL_I2C_Master_Transmit>
 8000864:	4603      	mov	r3, r0
 8000866:	461a      	mov	r2, r3
 8000868:	4b7a      	ldr	r3, [pc, #488]	; (8000a54 <i2c_Task+0x2e8>)
 800086a:	701a      	strb	r2, [r3, #0]
					osDelay(200);
 800086c:	20c8      	movs	r0, #200	; 0xc8
 800086e:	f006 f972 	bl	8006b56 <osDelay>
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_1[0], 1, 20);
 8000872:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8000876:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 800087a:	2314      	movs	r3, #20
 800087c:	9300      	str	r3, [sp, #0]
 800087e:	2301      	movs	r3, #1
 8000880:	4873      	ldr	r0, [pc, #460]	; (8000a50 <i2c_Task+0x2e4>)
 8000882:	f001 fd8b 	bl	800239c <HAL_I2C_Master_Receive>
 8000886:	4603      	mov	r3, r0
 8000888:	461a      	mov	r2, r3
 800088a:	4b72      	ldr	r3, [pc, #456]	; (8000a54 <i2c_Task+0x2e8>)
 800088c:	701a      	strb	r2, [r3, #0]
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_1[1], 1, 20);
 800088e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000892:	1c5a      	adds	r2, r3, #1
 8000894:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000898:	2314      	movs	r3, #20
 800089a:	9300      	str	r3, [sp, #0]
 800089c:	2301      	movs	r3, #1
 800089e:	486c      	ldr	r0, [pc, #432]	; (8000a50 <i2c_Task+0x2e4>)
 80008a0:	f001 fd7c 	bl	800239c <HAL_I2C_Master_Receive>
 80008a4:	4603      	mov	r3, r0
 80008a6:	461a      	mov	r2, r3
 80008a8:	4b6a      	ldr	r3, [pc, #424]	; (8000a54 <i2c_Task+0x2e8>)
 80008aa:	701a      	strb	r2, [r3, #0]
					osDelay(300);
 80008ac:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80008b0:	f006 f951 	bl	8006b56 <osDelay>

					status_i2c = HAL_I2C_Master_Transmit(&hi2c1, addr, cmdStart_2, 6, 20);
 80008b4:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80008b8:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 80008bc:	2314      	movs	r3, #20
 80008be:	9300      	str	r3, [sp, #0]
 80008c0:	2306      	movs	r3, #6
 80008c2:	4863      	ldr	r0, [pc, #396]	; (8000a50 <i2c_Task+0x2e4>)
 80008c4:	f001 fc6c 	bl	80021a0 <HAL_I2C_Master_Transmit>
 80008c8:	4603      	mov	r3, r0
 80008ca:	461a      	mov	r2, r3
 80008cc:	4b61      	ldr	r3, [pc, #388]	; (8000a54 <i2c_Task+0x2e8>)
 80008ce:	701a      	strb	r2, [r3, #0]
					osDelay(200);
 80008d0:	20c8      	movs	r0, #200	; 0xc8
 80008d2:	f006 f940 	bl	8006b56 <osDelay>
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_2[0], 1, 20);
 80008d6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80008da:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 80008de:	2314      	movs	r3, #20
 80008e0:	9300      	str	r3, [sp, #0]
 80008e2:	2301      	movs	r3, #1
 80008e4:	485a      	ldr	r0, [pc, #360]	; (8000a50 <i2c_Task+0x2e4>)
 80008e6:	f001 fd59 	bl	800239c <HAL_I2C_Master_Receive>
 80008ea:	4603      	mov	r3, r0
 80008ec:	461a      	mov	r2, r3
 80008ee:	4b59      	ldr	r3, [pc, #356]	; (8000a54 <i2c_Task+0x2e8>)
 80008f0:	701a      	strb	r2, [r3, #0]
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_2[1], 1, 20);
 80008f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008f6:	1c5a      	adds	r2, r3, #1
 80008f8:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 80008fc:	2314      	movs	r3, #20
 80008fe:	9300      	str	r3, [sp, #0]
 8000900:	2301      	movs	r3, #1
 8000902:	4853      	ldr	r0, [pc, #332]	; (8000a50 <i2c_Task+0x2e4>)
 8000904:	f001 fd4a 	bl	800239c <HAL_I2C_Master_Receive>
 8000908:	4603      	mov	r3, r0
 800090a:	461a      	mov	r2, r3
 800090c:	4b51      	ldr	r3, [pc, #324]	; (8000a54 <i2c_Task+0x2e8>)
 800090e:	701a      	strb	r2, [r3, #0]
					osDelay(1000);
 8000910:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000914:	f006 f91f 	bl	8006b56 <osDelay>

					status_i2c = HAL_I2C_Master_Transmit(&hi2c1, addr, cmdStart_3, 9, 20);
 8000918:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800091c:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000920:	2314      	movs	r3, #20
 8000922:	9300      	str	r3, [sp, #0]
 8000924:	2309      	movs	r3, #9
 8000926:	484a      	ldr	r0, [pc, #296]	; (8000a50 <i2c_Task+0x2e4>)
 8000928:	f001 fc3a 	bl	80021a0 <HAL_I2C_Master_Transmit>
 800092c:	4603      	mov	r3, r0
 800092e:	461a      	mov	r2, r3
 8000930:	4b48      	ldr	r3, [pc, #288]	; (8000a54 <i2c_Task+0x2e8>)
 8000932:	701a      	strb	r2, [r3, #0]
					osDelay(100);
 8000934:	2064      	movs	r0, #100	; 0x64
 8000936:	f006 f90e 	bl	8006b56 <osDelay>
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_3[0], 1, 20);
 800093a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800093e:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000942:	2314      	movs	r3, #20
 8000944:	9300      	str	r3, [sp, #0]
 8000946:	2301      	movs	r3, #1
 8000948:	4841      	ldr	r0, [pc, #260]	; (8000a50 <i2c_Task+0x2e4>)
 800094a:	f001 fd27 	bl	800239c <HAL_I2C_Master_Receive>
 800094e:	4603      	mov	r3, r0
 8000950:	461a      	mov	r2, r3
 8000952:	4b40      	ldr	r3, [pc, #256]	; (8000a54 <i2c_Task+0x2e8>)
 8000954:	701a      	strb	r2, [r3, #0]
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_3[1], 1, 20);
 8000956:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800095a:	1c5a      	adds	r2, r3, #1
 800095c:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000960:	2314      	movs	r3, #20
 8000962:	9300      	str	r3, [sp, #0]
 8000964:	2301      	movs	r3, #1
 8000966:	483a      	ldr	r0, [pc, #232]	; (8000a50 <i2c_Task+0x2e4>)
 8000968:	f001 fd18 	bl	800239c <HAL_I2C_Master_Receive>
 800096c:	4603      	mov	r3, r0
 800096e:	461a      	mov	r2, r3
 8000970:	4b38      	ldr	r3, [pc, #224]	; (8000a54 <i2c_Task+0x2e8>)
 8000972:	701a      	strb	r2, [r3, #0]
					osDelay(1000);
 8000974:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000978:	f006 f8ed 	bl	8006b56 <osDelay>

					status_i2c = HAL_I2C_Master_Transmit(&hi2c1, addr, cmdStart_4, 7, 20);
 800097c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000980:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000984:	2314      	movs	r3, #20
 8000986:	9300      	str	r3, [sp, #0]
 8000988:	2307      	movs	r3, #7
 800098a:	4831      	ldr	r0, [pc, #196]	; (8000a50 <i2c_Task+0x2e4>)
 800098c:	f001 fc08 	bl	80021a0 <HAL_I2C_Master_Transmit>
 8000990:	4603      	mov	r3, r0
 8000992:	461a      	mov	r2, r3
 8000994:	4b2f      	ldr	r3, [pc, #188]	; (8000a54 <i2c_Task+0x2e8>)
 8000996:	701a      	strb	r2, [r3, #0]
					osDelay(710);
 8000998:	f240 20c6 	movw	r0, #710	; 0x2c6
 800099c:	f006 f8db 	bl	8006b56 <osDelay>
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_4[0], 1, 20);
 80009a0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80009a4:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 80009a8:	2314      	movs	r3, #20
 80009aa:	9300      	str	r3, [sp, #0]
 80009ac:	2301      	movs	r3, #1
 80009ae:	4828      	ldr	r0, [pc, #160]	; (8000a50 <i2c_Task+0x2e4>)
 80009b0:	f001 fcf4 	bl	800239c <HAL_I2C_Master_Receive>
 80009b4:	4603      	mov	r3, r0
 80009b6:	461a      	mov	r2, r3
 80009b8:	4b26      	ldr	r3, [pc, #152]	; (8000a54 <i2c_Task+0x2e8>)
 80009ba:	701a      	strb	r2, [r3, #0]
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_4[1], 1, 20);
 80009bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c0:	1c5a      	adds	r2, r3, #1
 80009c2:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 80009c6:	2314      	movs	r3, #20
 80009c8:	9300      	str	r3, [sp, #0]
 80009ca:	2301      	movs	r3, #1
 80009cc:	4820      	ldr	r0, [pc, #128]	; (8000a50 <i2c_Task+0x2e4>)
 80009ce:	f001 fce5 	bl	800239c <HAL_I2C_Master_Receive>
 80009d2:	4603      	mov	r3, r0
 80009d4:	461a      	mov	r2, r3
 80009d6:	4b1f      	ldr	r3, [pc, #124]	; (8000a54 <i2c_Task+0x2e8>)
 80009d8:	701a      	strb	r2, [r3, #0]


					osDelay(1000);
 80009da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009de:	f006 f8ba 	bl	8006b56 <osDelay>
					//выдать флаг готовности питания
					ready = 1;
 80009e2:	4b1d      	ldr	r3, [pc, #116]	; (8000a58 <i2c_Task+0x2ec>)
 80009e4:	2201      	movs	r2, #1
 80009e6:	701a      	strb	r2, [r3, #0]

					osDelay(3000);
 80009e8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80009ec:	f006 f8b3 	bl	8006b56 <osDelay>
					//обновляем пик
					status_i2c = HAL_I2C_Master_Transmit(&hi2c1, addr, cmdRefresh, 6, 20);
 80009f0:	f107 0210 	add.w	r2, r7, #16
 80009f4:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 80009f8:	2314      	movs	r3, #20
 80009fa:	9300      	str	r3, [sp, #0]
 80009fc:	2306      	movs	r3, #6
 80009fe:	4814      	ldr	r0, [pc, #80]	; (8000a50 <i2c_Task+0x2e4>)
 8000a00:	f001 fbce 	bl	80021a0 <HAL_I2C_Master_Transmit>
 8000a04:	4603      	mov	r3, r0
 8000a06:	461a      	mov	r2, r3
 8000a08:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <i2c_Task+0x2e8>)
 8000a0a:	701a      	strb	r2, [r3, #0]
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, cmdRead_Refresh, 6, 20);
 8000a0c:	f107 0208 	add.w	r2, r7, #8
 8000a10:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000a14:	2314      	movs	r3, #20
 8000a16:	9300      	str	r3, [sp, #0]
 8000a18:	2306      	movs	r3, #6
 8000a1a:	480d      	ldr	r0, [pc, #52]	; (8000a50 <i2c_Task+0x2e4>)
 8000a1c:	f001 fcbe 	bl	800239c <HAL_I2C_Master_Receive>
 8000a20:	4603      	mov	r3, r0
 8000a22:	461a      	mov	r2, r3
 8000a24:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <i2c_Task+0x2e8>)
 8000a26:	701a      	strb	r2, [r3, #0]

					// запустить цикл обновления до остановки пользователем
					while(start){
 8000a28:	e09a      	b.n	8000b60 <i2c_Task+0x3f4>
 8000a2a:	bf00      	nop
 8000a2c:	080082b0 	.word	0x080082b0
 8000a30:	080082b8 	.word	0x080082b8
 8000a34:	080082c0 	.word	0x080082c0
 8000a38:	080082cc 	.word	0x080082cc
 8000a3c:	080082d4 	.word	0x080082d4
 8000a40:	080082dc 	.word	0x080082dc
 8000a44:	40020c00 	.word	0x40020c00
 8000a48:	40020800 	.word	0x40020800
 8000a4c:	200002d0 	.word	0x200002d0
 8000a50:	20004350 	.word	0x20004350
 8000a54:	200042f4 	.word	0x200042f4
 8000a58:	200002d1 	.word	0x200002d1
							//обновляем пик
							status_i2c = HAL_I2C_Master_Transmit(&hi2c1, addr, cmdRefresh, 6, 20);
 8000a5c:	f107 0210 	add.w	r2, r7, #16
 8000a60:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000a64:	2314      	movs	r3, #20
 8000a66:	9300      	str	r3, [sp, #0]
 8000a68:	2306      	movs	r3, #6
 8000a6a:	485a      	ldr	r0, [pc, #360]	; (8000bd4 <i2c_Task+0x468>)
 8000a6c:	f001 fb98 	bl	80021a0 <HAL_I2C_Master_Transmit>
 8000a70:	4603      	mov	r3, r0
 8000a72:	461a      	mov	r2, r3
 8000a74:	4b58      	ldr	r3, [pc, #352]	; (8000bd8 <i2c_Task+0x46c>)
 8000a76:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 8000a78:	200a      	movs	r0, #10
 8000a7a:	f006 f86c 	bl	8006b56 <osDelay>
							status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_Refresh[0], 1, 20);
 8000a7e:	f107 0208 	add.w	r2, r7, #8
 8000a82:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000a86:	2314      	movs	r3, #20
 8000a88:	9300      	str	r3, [sp, #0]
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	4851      	ldr	r0, [pc, #324]	; (8000bd4 <i2c_Task+0x468>)
 8000a8e:	f001 fc85 	bl	800239c <HAL_I2C_Master_Receive>
 8000a92:	4603      	mov	r3, r0
 8000a94:	461a      	mov	r2, r3
 8000a96:	4b50      	ldr	r3, [pc, #320]	; (8000bd8 <i2c_Task+0x46c>)
 8000a98:	701a      	strb	r2, [r3, #0]
							status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_Refresh[1], 1, 20);
 8000a9a:	f107 0308 	add.w	r3, r7, #8
 8000a9e:	1c5a      	adds	r2, r3, #1
 8000aa0:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000aa4:	2314      	movs	r3, #20
 8000aa6:	9300      	str	r3, [sp, #0]
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	484a      	ldr	r0, [pc, #296]	; (8000bd4 <i2c_Task+0x468>)
 8000aac:	f001 fc76 	bl	800239c <HAL_I2C_Master_Receive>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	4b48      	ldr	r3, [pc, #288]	; (8000bd8 <i2c_Task+0x46c>)
 8000ab6:	701a      	strb	r2, [r3, #0]
							status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_Refresh[2], 1, 20);
 8000ab8:	f107 0308 	add.w	r3, r7, #8
 8000abc:	1c9a      	adds	r2, r3, #2
 8000abe:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000ac2:	2314      	movs	r3, #20
 8000ac4:	9300      	str	r3, [sp, #0]
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	4842      	ldr	r0, [pc, #264]	; (8000bd4 <i2c_Task+0x468>)
 8000aca:	f001 fc67 	bl	800239c <HAL_I2C_Master_Receive>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	4b41      	ldr	r3, [pc, #260]	; (8000bd8 <i2c_Task+0x46c>)
 8000ad4:	701a      	strb	r2, [r3, #0]
							status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_Refresh[3], 1, 20);
 8000ad6:	f107 0308 	add.w	r3, r7, #8
 8000ada:	1cda      	adds	r2, r3, #3
 8000adc:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000ae0:	2314      	movs	r3, #20
 8000ae2:	9300      	str	r3, [sp, #0]
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	483b      	ldr	r0, [pc, #236]	; (8000bd4 <i2c_Task+0x468>)
 8000ae8:	f001 fc58 	bl	800239c <HAL_I2C_Master_Receive>
 8000aec:	4603      	mov	r3, r0
 8000aee:	461a      	mov	r2, r3
 8000af0:	4b39      	ldr	r3, [pc, #228]	; (8000bd8 <i2c_Task+0x46c>)
 8000af2:	701a      	strb	r2, [r3, #0]
							status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_Refresh[4], 1, 20);
 8000af4:	f107 0308 	add.w	r3, r7, #8
 8000af8:	1d1a      	adds	r2, r3, #4
 8000afa:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000afe:	2314      	movs	r3, #20
 8000b00:	9300      	str	r3, [sp, #0]
 8000b02:	2301      	movs	r3, #1
 8000b04:	4833      	ldr	r0, [pc, #204]	; (8000bd4 <i2c_Task+0x468>)
 8000b06:	f001 fc49 	bl	800239c <HAL_I2C_Master_Receive>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	4b32      	ldr	r3, [pc, #200]	; (8000bd8 <i2c_Task+0x46c>)
 8000b10:	701a      	strb	r2, [r3, #0]
							status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_Refresh[5], 1, 20);
 8000b12:	f107 0308 	add.w	r3, r7, #8
 8000b16:	1d5a      	adds	r2, r3, #5
 8000b18:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000b1c:	2314      	movs	r3, #20
 8000b1e:	9300      	str	r3, [sp, #0]
 8000b20:	2301      	movs	r3, #1
 8000b22:	482c      	ldr	r0, [pc, #176]	; (8000bd4 <i2c_Task+0x468>)
 8000b24:	f001 fc3a 	bl	800239c <HAL_I2C_Master_Receive>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	4b2a      	ldr	r3, [pc, #168]	; (8000bd8 <i2c_Task+0x46c>)
 8000b2e:	701a      	strb	r2, [r3, #0]

							for (int var = 0; var < 10000; ++var) {
 8000b30:	2300      	movs	r3, #0
 8000b32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000b34:	e009      	b.n	8000b4a <i2c_Task+0x3de>
								if(!start){
 8000b36:	4b29      	ldr	r3, [pc, #164]	; (8000bdc <i2c_Task+0x470>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d00b      	beq.n	8000b56 <i2c_Task+0x3ea>
									break;
								}
								osDelay(1);
 8000b3e:	2001      	movs	r0, #1
 8000b40:	f006 f809 	bl	8006b56 <osDelay>
							for (int var = 0; var < 10000; ++var) {
 8000b44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b46:	3301      	adds	r3, #1
 8000b48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000b4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b4c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000b50:	4293      	cmp	r3, r2
 8000b52:	ddf0      	ble.n	8000b36 <i2c_Task+0x3ca>
 8000b54:	e000      	b.n	8000b58 <i2c_Task+0x3ec>
									break;
 8000b56:	bf00      	nop
							}

							if(!start){
 8000b58:	4b20      	ldr	r3, [pc, #128]	; (8000bdc <i2c_Task+0x470>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d005      	beq.n	8000b6c <i2c_Task+0x400>
					while(start){
 8000b60:	4b1e      	ldr	r3, [pc, #120]	; (8000bdc <i2c_Task+0x470>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	f47f af79 	bne.w	8000a5c <i2c_Task+0x2f0>
 8000b6a:	e000      	b.n	8000b6e <i2c_Task+0x402>
										break;
 8000b6c:	bf00      	nop
							}

					}

					// выключение питания
					status_i2c = HAL_I2C_Master_Transmit(&hi2c1, addr, cmdStop, 7, 20);
 8000b6e:	f107 021c 	add.w	r2, r7, #28
 8000b72:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000b76:	2314      	movs	r3, #20
 8000b78:	9300      	str	r3, [sp, #0]
 8000b7a:	2307      	movs	r3, #7
 8000b7c:	4815      	ldr	r0, [pc, #84]	; (8000bd4 <i2c_Task+0x468>)
 8000b7e:	f001 fb0f 	bl	80021a0 <HAL_I2C_Master_Transmit>
 8000b82:	4603      	mov	r3, r0
 8000b84:	461a      	mov	r2, r3
 8000b86:	4b14      	ldr	r3, [pc, #80]	; (8000bd8 <i2c_Task+0x46c>)
 8000b88:	701a      	strb	r2, [r3, #0]
					osDelay(20);
 8000b8a:	2014      	movs	r0, #20
 8000b8c:	f005 ffe3 	bl	8006b56 <osDelay>
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_stop[0], 1, 20);
 8000b90:	f107 0218 	add.w	r2, r7, #24
 8000b94:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000b98:	2314      	movs	r3, #20
 8000b9a:	9300      	str	r3, [sp, #0]
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	480d      	ldr	r0, [pc, #52]	; (8000bd4 <i2c_Task+0x468>)
 8000ba0:	f001 fbfc 	bl	800239c <HAL_I2C_Master_Receive>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <i2c_Task+0x46c>)
 8000baa:	701a      	strb	r2, [r3, #0]
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_stop[1], 1, 20);
 8000bac:	f107 0318 	add.w	r3, r7, #24
 8000bb0:	1c5a      	adds	r2, r3, #1
 8000bb2:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000bb6:	2314      	movs	r3, #20
 8000bb8:	9300      	str	r3, [sp, #0]
 8000bba:	2301      	movs	r3, #1
 8000bbc:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <i2c_Task+0x468>)
 8000bbe:	f001 fbed 	bl	800239c <HAL_I2C_Master_Receive>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <i2c_Task+0x46c>)
 8000bc8:	701a      	strb	r2, [r3, #0]
					//выдать флаг отключения питания
					ready = 0;
 8000bca:	4b05      	ldr	r3, [pc, #20]	; (8000be0 <i2c_Task+0x474>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	701a      	strb	r2, [r3, #0]
	  if (start && plug) {
 8000bd0:	e636      	b.n	8000840 <i2c_Task+0xd4>
 8000bd2:	bf00      	nop
 8000bd4:	20004350 	.word	0x20004350
 8000bd8:	200042f4 	.word	0x200042f4
 8000bdc:	200002d0 	.word	0x200002d0
 8000be0:	200002d1 	.word	0x200002d1

08000be4 <HAL_UART_RxCpltCallback>:
  /* USER CODE END i2c_Task */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

	status_uart = HAL_UART_Receive_IT(&huart6, &readASIC[counter_bytes], 1);
 8000bec:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <HAL_UART_RxCpltCallback+0x3c>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a0c      	ldr	r2, [pc, #48]	; (8000c24 <HAL_UART_RxCpltCallback+0x40>)
 8000bf2:	4413      	add	r3, r2
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	480b      	ldr	r0, [pc, #44]	; (8000c28 <HAL_UART_RxCpltCallback+0x44>)
 8000bfa:	f004 ffb6 	bl	8005b6a <HAL_UART_Receive_IT>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	461a      	mov	r2, r3
 8000c02:	4b0a      	ldr	r3, [pc, #40]	; (8000c2c <HAL_UART_RxCpltCallback+0x48>)
 8000c04:	701a      	strb	r2, [r3, #0]
	counter_bytes++;
 8000c06:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <HAL_UART_RxCpltCallback+0x3c>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	4a04      	ldr	r2, [pc, #16]	; (8000c20 <HAL_UART_RxCpltCallback+0x3c>)
 8000c0e:	6013      	str	r3, [r2, #0]
	uartTIM = 0; //сбрасываем таймер до тех пор пока не придут все данные
 8000c10:	4b07      	ldr	r3, [pc, #28]	; (8000c30 <HAL_UART_RxCpltCallback+0x4c>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	200000b0 	.word	0x200000b0
 8000c24:	200000b4 	.word	0x200000b4
 8000c28:	20004430 	.word	0x20004430
 8000c2c:	200042ec 	.word	0x200042ec
 8000c30:	20000588 	.word	0x20000588

08000c34 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08a      	sub	sp, #40	; 0x28
 8000c38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3a:	f107 0314 	add.w	r3, r7, #20
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	60da      	str	r2, [r3, #12]
 8000c48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	613b      	str	r3, [r7, #16]
 8000c4e:	4b4b      	ldr	r3, [pc, #300]	; (8000d7c <MX_GPIO_Init+0x148>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a4a      	ldr	r2, [pc, #296]	; (8000d7c <MX_GPIO_Init+0x148>)
 8000c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b48      	ldr	r3, [pc, #288]	; (8000d7c <MX_GPIO_Init+0x148>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c62:	613b      	str	r3, [r7, #16]
 8000c64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	4b44      	ldr	r3, [pc, #272]	; (8000d7c <MX_GPIO_Init+0x148>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a43      	ldr	r2, [pc, #268]	; (8000d7c <MX_GPIO_Init+0x148>)
 8000c70:	f043 0304 	orr.w	r3, r3, #4
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b41      	ldr	r3, [pc, #260]	; (8000d7c <MX_GPIO_Init+0x148>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f003 0304 	and.w	r3, r3, #4
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	60bb      	str	r3, [r7, #8]
 8000c86:	4b3d      	ldr	r3, [pc, #244]	; (8000d7c <MX_GPIO_Init+0x148>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a3c      	ldr	r2, [pc, #240]	; (8000d7c <MX_GPIO_Init+0x148>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b3a      	ldr	r3, [pc, #232]	; (8000d7c <MX_GPIO_Init+0x148>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	60bb      	str	r3, [r7, #8]
 8000c9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	607b      	str	r3, [r7, #4]
 8000ca2:	4b36      	ldr	r3, [pc, #216]	; (8000d7c <MX_GPIO_Init+0x148>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a35      	ldr	r2, [pc, #212]	; (8000d7c <MX_GPIO_Init+0x148>)
 8000ca8:	f043 0308 	orr.w	r3, r3, #8
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b33      	ldr	r3, [pc, #204]	; (8000d7c <MX_GPIO_Init+0x148>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0308 	and.w	r3, r3, #8
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	603b      	str	r3, [r7, #0]
 8000cbe:	4b2f      	ldr	r3, [pc, #188]	; (8000d7c <MX_GPIO_Init+0x148>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a2e      	ldr	r2, [pc, #184]	; (8000d7c <MX_GPIO_Init+0x148>)
 8000cc4:	f043 0302 	orr.w	r3, r3, #2
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b2c      	ldr	r3, [pc, #176]	; (8000d7c <MX_GPIO_Init+0x148>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0302 	and.w	r3, r3, #2
 8000cd2:	603b      	str	r3, [r7, #0]
 8000cd4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_ASIC_GPIO_Port, RST_ASIC_Pin, GPIO_PIN_SET);
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cdc:	4828      	ldr	r0, [pc, #160]	; (8000d80 <MX_GPIO_Init+0x14c>)
 8000cde:	f001 f901 	bl	8001ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, A1_Pin|A0_Pin|A2_Pin, GPIO_PIN_SET);
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	2107      	movs	r1, #7
 8000ce6:	4827      	ldr	r0, [pc, #156]	; (8000d84 <MX_GPIO_Init+0x150>)
 8000ce8:	f001 f8fc 	bl	8001ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RST_ASIC_Pin;
 8000cec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000cf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RST_ASIC_GPIO_Port, &GPIO_InitStruct);
 8000cfe:	f107 0314 	add.w	r3, r7, #20
 8000d02:	4619      	mov	r1, r3
 8000d04:	481e      	ldr	r0, [pc, #120]	; (8000d80 <MX_GPIO_Init+0x14c>)
 8000d06:	f000 ff39 	bl	8001b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d10:	2300      	movs	r3, #0
 8000d12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d14:	2301      	movs	r3, #1
 8000d16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4818      	ldr	r0, [pc, #96]	; (8000d80 <MX_GPIO_Init+0x14c>)
 8000d20:	f000 ff2c 	bl	8001b7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000d24:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d32:	f107 0314 	add.w	r3, r7, #20
 8000d36:	4619      	mov	r1, r3
 8000d38:	4813      	ldr	r0, [pc, #76]	; (8000d88 <MX_GPIO_Init+0x154>)
 8000d3a:	f000 ff1f 	bl	8001b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PLUG_Pin;
 8000d3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d44:	2300      	movs	r3, #0
 8000d46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PLUG_GPIO_Port, &GPIO_InitStruct);
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	4619      	mov	r1, r3
 8000d52:	480d      	ldr	r0, [pc, #52]	; (8000d88 <MX_GPIO_Init+0x154>)
 8000d54:	f000 ff12 	bl	8001b7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = A1_Pin|A0_Pin|A2_Pin;
 8000d58:	2307      	movs	r3, #7
 8000d5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d64:	2300      	movs	r3, #0
 8000d66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4805      	ldr	r0, [pc, #20]	; (8000d84 <MX_GPIO_Init+0x150>)
 8000d70:	f000 ff04 	bl	8001b7c <HAL_GPIO_Init>

}
 8000d74:	bf00      	nop
 8000d76:	3728      	adds	r7, #40	; 0x28
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	40020000 	.word	0x40020000
 8000d84:	40020c00 	.word	0x40020c00
 8000d88:	40020800 	.word	0x40020800

08000d8c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d90:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <MX_I2C1_Init+0x54>)
 8000d92:	4a14      	ldr	r2, [pc, #80]	; (8000de4 <MX_I2C1_Init+0x58>)
 8000d94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 35000;
 8000d96:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <MX_I2C1_Init+0x54>)
 8000d98:	f648 02b8 	movw	r2, #35000	; 0x88b8
 8000d9c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d9e:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <MX_I2C1_Init+0x54>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000da4:	4b0e      	ldr	r3, [pc, #56]	; (8000de0 <MX_I2C1_Init+0x54>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000daa:	4b0d      	ldr	r3, [pc, #52]	; (8000de0 <MX_I2C1_Init+0x54>)
 8000dac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000db0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000db2:	4b0b      	ldr	r3, [pc, #44]	; (8000de0 <MX_I2C1_Init+0x54>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000db8:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <MX_I2C1_Init+0x54>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dbe:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <MX_I2C1_Init+0x54>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dc4:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <MX_I2C1_Init+0x54>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dca:	4805      	ldr	r0, [pc, #20]	; (8000de0 <MX_I2C1_Init+0x54>)
 8000dcc:	f001 f8a4 	bl	8001f18 <HAL_I2C_Init>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8000dd6:	f000 f989 	bl	80010ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	20004350 	.word	0x20004350
 8000de4:	40005400 	.word	0x40005400

08000de8 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000dec:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <MX_I2C3_Init+0x50>)
 8000dee:	4a13      	ldr	r2, [pc, #76]	; (8000e3c <MX_I2C3_Init+0x54>)
 8000df0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000df2:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <MX_I2C3_Init+0x50>)
 8000df4:	4a12      	ldr	r2, [pc, #72]	; (8000e40 <MX_I2C3_Init+0x58>)
 8000df6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000df8:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <MX_I2C3_Init+0x50>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <MX_I2C3_Init+0x50>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e04:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <MX_I2C3_Init+0x50>)
 8000e06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e0a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e0c:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <MX_I2C3_Init+0x50>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000e12:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <MX_I2C3_Init+0x50>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e18:	4b07      	ldr	r3, [pc, #28]	; (8000e38 <MX_I2C3_Init+0x50>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e1e:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <MX_I2C3_Init+0x50>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000e24:	4804      	ldr	r0, [pc, #16]	; (8000e38 <MX_I2C3_Init+0x50>)
 8000e26:	f001 f877 	bl	8001f18 <HAL_I2C_Init>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000e30:	f000 f95c 	bl	80010ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	200042fc 	.word	0x200042fc
 8000e3c:	40005c00 	.word	0x40005c00
 8000e40:	000186a0 	.word	0x000186a0

08000e44 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08c      	sub	sp, #48	; 0x30
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4c:	f107 031c 	add.w	r3, r7, #28
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a4a      	ldr	r2, [pc, #296]	; (8000f8c <HAL_I2C_MspInit+0x148>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d12c      	bne.n	8000ec0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	61bb      	str	r3, [r7, #24]
 8000e6a:	4b49      	ldr	r3, [pc, #292]	; (8000f90 <HAL_I2C_MspInit+0x14c>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	4a48      	ldr	r2, [pc, #288]	; (8000f90 <HAL_I2C_MspInit+0x14c>)
 8000e70:	f043 0302 	orr.w	r3, r3, #2
 8000e74:	6313      	str	r3, [r2, #48]	; 0x30
 8000e76:	4b46      	ldr	r3, [pc, #280]	; (8000f90 <HAL_I2C_MspInit+0x14c>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	f003 0302 	and.w	r3, r3, #2
 8000e7e:	61bb      	str	r3, [r7, #24]
 8000e80:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e82:	23c0      	movs	r3, #192	; 0xc0
 8000e84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e86:	2312      	movs	r3, #18
 8000e88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e92:	2304      	movs	r3, #4
 8000e94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e96:	f107 031c 	add.w	r3, r7, #28
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	483d      	ldr	r0, [pc, #244]	; (8000f94 <HAL_I2C_MspInit+0x150>)
 8000e9e:	f000 fe6d 	bl	8001b7c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	617b      	str	r3, [r7, #20]
 8000ea6:	4b3a      	ldr	r3, [pc, #232]	; (8000f90 <HAL_I2C_MspInit+0x14c>)
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eaa:	4a39      	ldr	r2, [pc, #228]	; (8000f90 <HAL_I2C_MspInit+0x14c>)
 8000eac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb2:	4b37      	ldr	r3, [pc, #220]	; (8000f90 <HAL_I2C_MspInit+0x14c>)
 8000eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eba:	617b      	str	r3, [r7, #20]
 8000ebc:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000ebe:	e060      	b.n	8000f82 <HAL_I2C_MspInit+0x13e>
  else if(i2cHandle->Instance==I2C3)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a34      	ldr	r2, [pc, #208]	; (8000f98 <HAL_I2C_MspInit+0x154>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d15b      	bne.n	8000f82 <HAL_I2C_MspInit+0x13e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	613b      	str	r3, [r7, #16]
 8000ece:	4b30      	ldr	r3, [pc, #192]	; (8000f90 <HAL_I2C_MspInit+0x14c>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	4a2f      	ldr	r2, [pc, #188]	; (8000f90 <HAL_I2C_MspInit+0x14c>)
 8000ed4:	f043 0304 	orr.w	r3, r3, #4
 8000ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eda:	4b2d      	ldr	r3, [pc, #180]	; (8000f90 <HAL_I2C_MspInit+0x14c>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	f003 0304 	and.w	r3, r3, #4
 8000ee2:	613b      	str	r3, [r7, #16]
 8000ee4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	4b29      	ldr	r3, [pc, #164]	; (8000f90 <HAL_I2C_MspInit+0x14c>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	4a28      	ldr	r2, [pc, #160]	; (8000f90 <HAL_I2C_MspInit+0x14c>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef6:	4b26      	ldr	r3, [pc, #152]	; (8000f90 <HAL_I2C_MspInit+0x14c>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f08:	2312      	movs	r3, #18
 8000f0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f10:	2303      	movs	r3, #3
 8000f12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f14:	2304      	movs	r3, #4
 8000f16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f18:	f107 031c 	add.w	r3, r7, #28
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	481f      	ldr	r0, [pc, #124]	; (8000f9c <HAL_I2C_MspInit+0x158>)
 8000f20:	f000 fe2c 	bl	8001b7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f2a:	2312      	movs	r3, #18
 8000f2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f32:	2303      	movs	r3, #3
 8000f34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f36:	2304      	movs	r3, #4
 8000f38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3a:	f107 031c 	add.w	r3, r7, #28
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4817      	ldr	r0, [pc, #92]	; (8000fa0 <HAL_I2C_MspInit+0x15c>)
 8000f42:	f000 fe1b 	bl	8001b7c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	60bb      	str	r3, [r7, #8]
 8000f4a:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <HAL_I2C_MspInit+0x14c>)
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4e:	4a10      	ldr	r2, [pc, #64]	; (8000f90 <HAL_I2C_MspInit+0x14c>)
 8000f50:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f54:	6413      	str	r3, [r2, #64]	; 0x40
 8000f56:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <HAL_I2C_MspInit+0x14c>)
 8000f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f5e:	60bb      	str	r3, [r7, #8]
 8000f60:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 5, 0);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2105      	movs	r1, #5
 8000f66:	2048      	movs	r0, #72	; 0x48
 8000f68:	f000 fd32 	bl	80019d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8000f6c:	2048      	movs	r0, #72	; 0x48
 8000f6e:	f000 fd4b 	bl	8001a08 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 5, 0);
 8000f72:	2200      	movs	r2, #0
 8000f74:	2105      	movs	r1, #5
 8000f76:	2049      	movs	r0, #73	; 0x49
 8000f78:	f000 fd2a 	bl	80019d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8000f7c:	2049      	movs	r0, #73	; 0x49
 8000f7e:	f000 fd43 	bl	8001a08 <HAL_NVIC_EnableIRQ>
}
 8000f82:	bf00      	nop
 8000f84:	3730      	adds	r7, #48	; 0x30
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40005400 	.word	0x40005400
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40020400 	.word	0x40020400
 8000f98:	40005c00 	.word	0x40005c00
 8000f9c:	40020800 	.word	0x40020800
 8000fa0:	40020000 	.word	0x40020000

08000fa4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fa8:	f000 fbf4 	bl	8001794 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fac:	f000 f810 	bl	8000fd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fb0:	f7ff fe40 	bl	8000c34 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000fb4:	f7ff feea 	bl	8000d8c <MX_I2C1_Init>
  MX_I2C3_Init();
 8000fb8:	f7ff ff16 	bl	8000de8 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 8000fbc:	f000 fade 	bl	800157c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000fc0:	f000 fb06 	bl	80015d0 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000fc4:	f7ff fa9a 	bl	80004fc <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000fc8:	f005 fd72 	bl	8006ab0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fcc:	e7fe      	b.n	8000fcc <main+0x28>
	...

08000fd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b094      	sub	sp, #80	; 0x50
 8000fd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fd6:	f107 0320 	add.w	r3, r7, #32
 8000fda:	2230      	movs	r2, #48	; 0x30
 8000fdc:	2100      	movs	r1, #0
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f007 f804 	bl	8007fec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe4:	f107 030c 	add.w	r3, r7, #12
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	4b28      	ldr	r3, [pc, #160]	; (800109c <SystemClock_Config+0xcc>)
 8000ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffc:	4a27      	ldr	r2, [pc, #156]	; (800109c <SystemClock_Config+0xcc>)
 8000ffe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001002:	6413      	str	r3, [r2, #64]	; 0x40
 8001004:	4b25      	ldr	r3, [pc, #148]	; (800109c <SystemClock_Config+0xcc>)
 8001006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001010:	2300      	movs	r3, #0
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	4b22      	ldr	r3, [pc, #136]	; (80010a0 <SystemClock_Config+0xd0>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a21      	ldr	r2, [pc, #132]	; (80010a0 <SystemClock_Config+0xd0>)
 800101a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800101e:	6013      	str	r3, [r2, #0]
 8001020:	4b1f      	ldr	r3, [pc, #124]	; (80010a0 <SystemClock_Config+0xd0>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001028:	607b      	str	r3, [r7, #4]
 800102a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800102c:	2302      	movs	r3, #2
 800102e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001030:	2301      	movs	r3, #1
 8001032:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001034:	2310      	movs	r3, #16
 8001036:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001038:	2302      	movs	r3, #2
 800103a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800103c:	2300      	movs	r3, #0
 800103e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001040:	2308      	movs	r3, #8
 8001042:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001044:	23a8      	movs	r3, #168	; 0xa8
 8001046:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001048:	2302      	movs	r3, #2
 800104a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800104c:	2304      	movs	r3, #4
 800104e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001050:	f107 0320 	add.w	r3, r7, #32
 8001054:	4618      	mov	r0, r3
 8001056:	f003 fd55 	bl	8004b04 <HAL_RCC_OscConfig>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001060:	f000 f844 	bl	80010ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001064:	230f      	movs	r3, #15
 8001066:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001068:	2302      	movs	r3, #2
 800106a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001070:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001074:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001076:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800107a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800107c:	f107 030c 	add.w	r3, r7, #12
 8001080:	2105      	movs	r1, #5
 8001082:	4618      	mov	r0, r3
 8001084:	f003 ffb6 	bl	8004ff4 <HAL_RCC_ClockConfig>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800108e:	f000 f82d 	bl	80010ec <Error_Handler>
  }
}
 8001092:	bf00      	nop
 8001094:	3750      	adds	r7, #80	; 0x50
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40023800 	.word	0x40023800
 80010a0:	40007000 	.word	0x40007000

080010a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	  if (htim->Instance == TIM7) {
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a0b      	ldr	r2, [pc, #44]	; (80010e0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d108      	bne.n	80010c8 <HAL_TIM_PeriodElapsedCallback+0x24>
	    if (status_uartTIM) {
 80010b6:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d004      	beq.n	80010c8 <HAL_TIM_PeriodElapsedCallback+0x24>
	    	uartTIM++;
 80010be:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	3301      	adds	r3, #1
 80010c4:	4a08      	ldr	r2, [pc, #32]	; (80010e8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80010c6:	6013      	str	r3, [r2, #0]
		}

	  }

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a04      	ldr	r2, [pc, #16]	; (80010e0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d101      	bne.n	80010d6 <HAL_TIM_PeriodElapsedCallback+0x32>
    HAL_IncTick();
 80010d2:	f000 fb81 	bl	80017d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40001400 	.word	0x40001400
 80010e4:	2000058c 	.word	0x2000058c
 80010e8:	20000588 	.word	0x20000588

080010ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010f0:	b672      	cpsid	i
}
 80010f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010f4:	e7fe      	b.n	80010f4 <Error_Handler+0x8>
	...

080010f8 <WriteCmd>:
0xC8, 0xD3, 0x00, 0xD5, 0x80, 0xD8, 0x05, 0xD9, 0xF1, 0xDA, 0x12,
					
0xD8, 0x30, 0x8D, 0x14, 0xAF};

void WriteCmd()
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af04      	add	r7, sp, #16
	uint8_t i = 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	71fb      	strb	r3, [r7, #7]
	for(i=0; i<27; i++){
 8001102:	2300      	movs	r3, #0
 8001104:	71fb      	strb	r3, [r7, #7]
 8001106:	e011      	b.n	800112c <WriteCmd+0x34>
		HAL_I2C_Mem_Write(&hi2c3 ,0x78,0x00,I2C_MEMADD_SIZE_8BIT,CMD_Data+i,1,0x100);
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	4a0c      	ldr	r2, [pc, #48]	; (800113c <WriteCmd+0x44>)
 800110c:	4413      	add	r3, r2
 800110e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001112:	9202      	str	r2, [sp, #8]
 8001114:	2201      	movs	r2, #1
 8001116:	9201      	str	r2, [sp, #4]
 8001118:	9300      	str	r3, [sp, #0]
 800111a:	2301      	movs	r3, #1
 800111c:	2200      	movs	r2, #0
 800111e:	2178      	movs	r1, #120	; 0x78
 8001120:	4807      	ldr	r0, [pc, #28]	; (8001140 <WriteCmd+0x48>)
 8001122:	f001 fb61 	bl	80027e8 <HAL_I2C_Mem_Write>
	for(i=0; i<27; i++){
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	3301      	adds	r3, #1
 800112a:	71fb      	strb	r3, [r7, #7]
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	2b1a      	cmp	r3, #26
 8001130:	d9ea      	bls.n	8001108 <WriteCmd+0x10>
	}
}
 8001132:	bf00      	nop
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20000000 	.word	0x20000000
 8001140:	200042fc 	.word	0x200042fc

08001144 <OLED_WR_CMD>:

//Записать управляющие команды в устройство
void OLED_WR_CMD(uint8_t cmd)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af04      	add	r7, sp, #16
 800114a:	4603      	mov	r3, r0
 800114c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c3 ,0x78,0x00,I2C_MEMADD_SIZE_8BIT,&cmd,1,0x100);
 800114e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001152:	9302      	str	r3, [sp, #8]
 8001154:	2301      	movs	r3, #1
 8001156:	9301      	str	r3, [sp, #4]
 8001158:	1dfb      	adds	r3, r7, #7
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	2301      	movs	r3, #1
 800115e:	2200      	movs	r2, #0
 8001160:	2178      	movs	r1, #120	; 0x78
 8001162:	4803      	ldr	r0, [pc, #12]	; (8001170 <OLED_WR_CMD+0x2c>)
 8001164:	f001 fb40 	bl	80027e8 <HAL_I2C_Mem_Write>
}
 8001168:	bf00      	nop
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	200042fc 	.word	0x200042fc

08001174 <OLED_WR_DATA>:

//Записать данные на устройство
void OLED_WR_DATA(uint8_t data)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af04      	add	r7, sp, #16
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c3 ,0x78,0x40,I2C_MEMADD_SIZE_8BIT,&data,1,0x100);
 800117e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001182:	9302      	str	r3, [sp, #8]
 8001184:	2301      	movs	r3, #1
 8001186:	9301      	str	r3, [sp, #4]
 8001188:	1dfb      	adds	r3, r7, #7
 800118a:	9300      	str	r3, [sp, #0]
 800118c:	2301      	movs	r3, #1
 800118e:	2240      	movs	r2, #64	; 0x40
 8001190:	2178      	movs	r1, #120	; 0x78
 8001192:	4803      	ldr	r0, [pc, #12]	; (80011a0 <OLED_WR_DATA+0x2c>)
 8001194:	f001 fb28 	bl	80027e8 <HAL_I2C_Mem_Write>
}
 8001198:	bf00      	nop
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	200042fc 	.word	0x200042fc

080011a4 <OLED_Init>:

//Инициализировать oled-экран
void OLED_Init(void)
{ 	
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
	HAL_Delay(200);
 80011a8:	20c8      	movs	r0, #200	; 0xc8
 80011aa:	f000 fb35 	bl	8001818 <HAL_Delay>
	WriteCmd();
 80011ae:	f7ff ffa3 	bl	80010f8 <WriteCmd>
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <OLED_Clear>:

//Очисти экран
void OLED_Clear()
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b082      	sub	sp, #8
 80011ba:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 80011bc:	2300      	movs	r3, #0
 80011be:	71fb      	strb	r3, [r7, #7]
 80011c0:	e01b      	b.n	80011fa <OLED_Clear+0x44>
	{  
		OLED_WR_CMD(0xb0+i);
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	3b50      	subs	r3, #80	; 0x50
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff ffbb 	bl	8001144 <OLED_WR_CMD>
		OLED_WR_CMD (0x00); 
 80011ce:	2000      	movs	r0, #0
 80011d0:	f7ff ffb8 	bl	8001144 <OLED_WR_CMD>
		OLED_WR_CMD (0x10); 
 80011d4:	2010      	movs	r0, #16
 80011d6:	f7ff ffb5 	bl	8001144 <OLED_WR_CMD>
		for(n=0;n<128;n++)
 80011da:	2300      	movs	r3, #0
 80011dc:	71bb      	strb	r3, [r7, #6]
 80011de:	e005      	b.n	80011ec <OLED_Clear+0x36>
			OLED_WR_DATA(0);
 80011e0:	2000      	movs	r0, #0
 80011e2:	f7ff ffc7 	bl	8001174 <OLED_WR_DATA>
		for(n=0;n<128;n++)
 80011e6:	79bb      	ldrb	r3, [r7, #6]
 80011e8:	3301      	adds	r3, #1
 80011ea:	71bb      	strb	r3, [r7, #6]
 80011ec:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	daf5      	bge.n	80011e0 <OLED_Clear+0x2a>
	for(i=0;i<8;i++)  
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	3301      	adds	r3, #1
 80011f8:	71fb      	strb	r3, [r7, #7]
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	2b07      	cmp	r3, #7
 80011fe:	d9e0      	bls.n	80011c2 <OLED_Clear+0xc>
	} 
}
 8001200:	bf00      	nop
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <OLED_Display_On>:

//Включите OLED-дисплей
void OLED_Display_On(void)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	af00      	add	r7, sp, #0
	OLED_WR_CMD(0X8D);  //Команда SET DCDC
 800120e:	208d      	movs	r0, #141	; 0x8d
 8001210:	f7ff ff98 	bl	8001144 <OLED_WR_CMD>
	OLED_WR_CMD(0X14);  //DCDC ON
 8001214:	2014      	movs	r0, #20
 8001216:	f7ff ff95 	bl	8001144 <OLED_WR_CMD>
	OLED_WR_CMD(0XAF);  //DISPLAY ON
 800121a:	20af      	movs	r0, #175	; 0xaf
 800121c:	f7ff ff92 	bl	8001144 <OLED_WR_CMD>
}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}

08001224 <OLED_Set_Pos>:
	OLED_WR_CMD(0X10);  //DCDC OFF
	OLED_WR_CMD(0XAE);  //DISPLAY OFF
}

void OLED_Set_Pos(uint8_t x, uint8_t y) 
{ 	
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	460a      	mov	r2, r1
 800122e:	71fb      	strb	r3, [r7, #7]
 8001230:	4613      	mov	r3, r2
 8001232:	71bb      	strb	r3, [r7, #6]
	OLED_WR_CMD(0xb0+y);
 8001234:	79bb      	ldrb	r3, [r7, #6]
 8001236:	3b50      	subs	r3, #80	; 0x50
 8001238:	b2db      	uxtb	r3, r3
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff ff82 	bl	8001144 <OLED_WR_CMD>
	OLED_WR_CMD(((x&0xf0)>>4)|0x10);
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	091b      	lsrs	r3, r3, #4
 8001244:	b2db      	uxtb	r3, r3
 8001246:	f043 0310 	orr.w	r3, r3, #16
 800124a:	b2db      	uxtb	r3, r3
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff ff79 	bl	8001144 <OLED_WR_CMD>
	OLED_WR_CMD(x&0x0f);
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	f003 030f 	and.w	r3, r3, #15
 8001258:	b2db      	uxtb	r3, r3
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff ff72 	bl	8001144 <OLED_WR_CMD>
} 
 8001260:	bf00      	nop
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <OLED_ShowChar>:
//x:0~127
//y:0~63
//chr: 0, обратный дисплей; 1, нормальный дисплей
//Char_Size: выберите шрифт 16/12
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t Char_Size)
{      	
 8001268:	b590      	push	{r4, r7, lr}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	4604      	mov	r4, r0
 8001270:	4608      	mov	r0, r1
 8001272:	4611      	mov	r1, r2
 8001274:	461a      	mov	r2, r3
 8001276:	4623      	mov	r3, r4
 8001278:	71fb      	strb	r3, [r7, #7]
 800127a:	4603      	mov	r3, r0
 800127c:	71bb      	strb	r3, [r7, #6]
 800127e:	460b      	mov	r3, r1
 8001280:	717b      	strb	r3, [r7, #5]
 8001282:	4613      	mov	r3, r2
 8001284:	713b      	strb	r3, [r7, #4]
	unsigned char c=0,i=0;	
 8001286:	2300      	movs	r3, #0
 8001288:	73bb      	strb	r3, [r7, #14]
 800128a:	2300      	movs	r3, #0
 800128c:	73fb      	strb	r3, [r7, #15]
		c=chr-' ';//Получить значение смещения
 800128e:	797b      	ldrb	r3, [r7, #5]
 8001290:	3b20      	subs	r3, #32
 8001292:	73bb      	strb	r3, [r7, #14]
		if(x>128-1){x=0;y=y+2;}
 8001294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001298:	2b00      	cmp	r3, #0
 800129a:	da04      	bge.n	80012a6 <OLED_ShowChar+0x3e>
 800129c:	2300      	movs	r3, #0
 800129e:	71fb      	strb	r3, [r7, #7]
 80012a0:	79bb      	ldrb	r3, [r7, #6]
 80012a2:	3302      	adds	r3, #2
 80012a4:	71bb      	strb	r3, [r7, #6]
		if(Char_Size ==16)
 80012a6:	793b      	ldrb	r3, [r7, #4]
 80012a8:	2b10      	cmp	r3, #16
 80012aa:	d133      	bne.n	8001314 <OLED_ShowChar+0xac>
			{
			OLED_Set_Pos(x,y);	
 80012ac:	79ba      	ldrb	r2, [r7, #6]
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	4611      	mov	r1, r2
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff ffb6 	bl	8001224 <OLED_Set_Pos>
			for(i=0;i<8;i++)
 80012b8:	2300      	movs	r3, #0
 80012ba:	73fb      	strb	r3, [r7, #15]
 80012bc:	e00b      	b.n	80012d6 <OLED_ShowChar+0x6e>
			OLED_WR_DATA(F8x16[c*16+i]);
 80012be:	7bbb      	ldrb	r3, [r7, #14]
 80012c0:	011a      	lsls	r2, r3, #4
 80012c2:	7bfb      	ldrb	r3, [r7, #15]
 80012c4:	4413      	add	r3, r2
 80012c6:	4a23      	ldr	r2, [pc, #140]	; (8001354 <OLED_ShowChar+0xec>)
 80012c8:	5cd3      	ldrb	r3, [r2, r3]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff ff52 	bl	8001174 <OLED_WR_DATA>
			for(i=0;i<8;i++)
 80012d0:	7bfb      	ldrb	r3, [r7, #15]
 80012d2:	3301      	adds	r3, #1
 80012d4:	73fb      	strb	r3, [r7, #15]
 80012d6:	7bfb      	ldrb	r3, [r7, #15]
 80012d8:	2b07      	cmp	r3, #7
 80012da:	d9f0      	bls.n	80012be <OLED_ShowChar+0x56>
			OLED_Set_Pos(x,y+1);
 80012dc:	79bb      	ldrb	r3, [r7, #6]
 80012de:	3301      	adds	r3, #1
 80012e0:	b2da      	uxtb	r2, r3
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	4611      	mov	r1, r2
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff ff9c 	bl	8001224 <OLED_Set_Pos>
			for(i=0;i<8;i++)
 80012ec:	2300      	movs	r3, #0
 80012ee:	73fb      	strb	r3, [r7, #15]
 80012f0:	e00c      	b.n	800130c <OLED_ShowChar+0xa4>
			OLED_WR_DATA(F8x16[c*16+i+8]);
 80012f2:	7bbb      	ldrb	r3, [r7, #14]
 80012f4:	011a      	lsls	r2, r3, #4
 80012f6:	7bfb      	ldrb	r3, [r7, #15]
 80012f8:	4413      	add	r3, r2
 80012fa:	3308      	adds	r3, #8
 80012fc:	4a15      	ldr	r2, [pc, #84]	; (8001354 <OLED_ShowChar+0xec>)
 80012fe:	5cd3      	ldrb	r3, [r2, r3]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff ff37 	bl	8001174 <OLED_WR_DATA>
			for(i=0;i<8;i++)
 8001306:	7bfb      	ldrb	r3, [r7, #15]
 8001308:	3301      	adds	r3, #1
 800130a:	73fb      	strb	r3, [r7, #15]
 800130c:	7bfb      	ldrb	r3, [r7, #15]
 800130e:	2b07      	cmp	r3, #7
 8001310:	d9ef      	bls.n	80012f2 <OLED_ShowChar+0x8a>
				OLED_Set_Pos(x,y);
				for(i=0;i<6;i++)
				OLED_WR_DATA(F6x8[c][i]);
				
			}
}
 8001312:	e01b      	b.n	800134c <OLED_ShowChar+0xe4>
				OLED_Set_Pos(x,y);
 8001314:	79ba      	ldrb	r2, [r7, #6]
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	4611      	mov	r1, r2
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff ff82 	bl	8001224 <OLED_Set_Pos>
				for(i=0;i<6;i++)
 8001320:	2300      	movs	r3, #0
 8001322:	73fb      	strb	r3, [r7, #15]
 8001324:	e00f      	b.n	8001346 <OLED_ShowChar+0xde>
				OLED_WR_DATA(F6x8[c][i]);
 8001326:	7bba      	ldrb	r2, [r7, #14]
 8001328:	7bf9      	ldrb	r1, [r7, #15]
 800132a:	480b      	ldr	r0, [pc, #44]	; (8001358 <OLED_ShowChar+0xf0>)
 800132c:	4613      	mov	r3, r2
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	4413      	add	r3, r2
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	4403      	add	r3, r0
 8001336:	440b      	add	r3, r1
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff ff1a 	bl	8001174 <OLED_WR_DATA>
				for(i=0;i<6;i++)
 8001340:	7bfb      	ldrb	r3, [r7, #15]
 8001342:	3301      	adds	r3, #1
 8001344:	73fb      	strb	r3, [r7, #15]
 8001346:	7bfb      	ldrb	r3, [r7, #15]
 8001348:	2b05      	cmp	r3, #5
 800134a:	d9ec      	bls.n	8001326 <OLED_ShowChar+0xbe>
}
 800134c:	bf00      	nop
 800134e:	3714      	adds	r7, #20
 8001350:	46bd      	mov	sp, r7
 8001352:	bd90      	pop	{r4, r7, pc}
 8001354:	08008514 	.word	0x08008514
 8001358:	080082ec 	.word	0x080082ec

0800135c <OLED_ShowString>:
	 	OLED_ShowChar(x+(size2/2)*t,y,temp+'0',size2); 
	}
} 
//Отобразить символьную строку
void OLED_ShowString(uint8_t x,uint8_t y,uint8_t *chr,uint8_t Char_Size)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	603a      	str	r2, [r7, #0]
 8001364:	461a      	mov	r2, r3
 8001366:	4603      	mov	r3, r0
 8001368:	71fb      	strb	r3, [r7, #7]
 800136a:	460b      	mov	r3, r1
 800136c:	71bb      	strb	r3, [r7, #6]
 800136e:	4613      	mov	r3, r2
 8001370:	717b      	strb	r3, [r7, #5]
	unsigned char j=0;
 8001372:	2300      	movs	r3, #0
 8001374:	73fb      	strb	r3, [r7, #15]
	while (chr[j]!='\0')
 8001376:	e016      	b.n	80013a6 <OLED_ShowString+0x4a>
	{		OLED_ShowChar(x,y,chr[j],Char_Size);
 8001378:	7bfb      	ldrb	r3, [r7, #15]
 800137a:	683a      	ldr	r2, [r7, #0]
 800137c:	4413      	add	r3, r2
 800137e:	781a      	ldrb	r2, [r3, #0]
 8001380:	797b      	ldrb	r3, [r7, #5]
 8001382:	79b9      	ldrb	r1, [r7, #6]
 8001384:	79f8      	ldrb	r0, [r7, #7]
 8001386:	f7ff ff6f 	bl	8001268 <OLED_ShowChar>
			x+=8;
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	3308      	adds	r3, #8
 800138e:	71fb      	strb	r3, [r7, #7]
		if(x>120){x=0;y+=2;}
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	2b78      	cmp	r3, #120	; 0x78
 8001394:	d904      	bls.n	80013a0 <OLED_ShowString+0x44>
 8001396:	2300      	movs	r3, #0
 8001398:	71fb      	strb	r3, [r7, #7]
 800139a:	79bb      	ldrb	r3, [r7, #6]
 800139c:	3302      	adds	r3, #2
 800139e:	71bb      	strb	r3, [r7, #6]
			j++;
 80013a0:	7bfb      	ldrb	r3, [r7, #15]
 80013a2:	3301      	adds	r3, #1
 80013a4:	73fb      	strb	r3, [r7, #15]
	while (chr[j]!='\0')
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
 80013a8:	683a      	ldr	r2, [r7, #0]
 80013aa:	4413      	add	r3, r2
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1e2      	bne.n	8001378 <OLED_ShowString+0x1c>
	}
}
 80013b2:	bf00      	nop
 80013b4:	bf00      	nop
 80013b6:	3710      	adds	r7, #16
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	607b      	str	r3, [r7, #4]
 80013c6:	4b12      	ldr	r3, [pc, #72]	; (8001410 <HAL_MspInit+0x54>)
 80013c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ca:	4a11      	ldr	r2, [pc, #68]	; (8001410 <HAL_MspInit+0x54>)
 80013cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013d0:	6453      	str	r3, [r2, #68]	; 0x44
 80013d2:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <HAL_MspInit+0x54>)
 80013d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013da:	607b      	str	r3, [r7, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	603b      	str	r3, [r7, #0]
 80013e2:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <HAL_MspInit+0x54>)
 80013e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e6:	4a0a      	ldr	r2, [pc, #40]	; (8001410 <HAL_MspInit+0x54>)
 80013e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ec:	6413      	str	r3, [r2, #64]	; 0x40
 80013ee:	4b08      	ldr	r3, [pc, #32]	; (8001410 <HAL_MspInit+0x54>)
 80013f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f6:	603b      	str	r3, [r7, #0]
 80013f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013fa:	2200      	movs	r2, #0
 80013fc:	210f      	movs	r1, #15
 80013fe:	f06f 0001 	mvn.w	r0, #1
 8001402:	f000 fae5 	bl	80019d0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40023800 	.word	0x40023800

08001414 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08c      	sub	sp, #48	; 0x30
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8001424:	2200      	movs	r2, #0
 8001426:	6879      	ldr	r1, [r7, #4]
 8001428:	2037      	movs	r0, #55	; 0x37
 800142a:	f000 fad1 	bl	80019d0 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800142e:	2037      	movs	r0, #55	; 0x37
 8001430:	f000 faea 	bl	8001a08 <HAL_NVIC_EnableIRQ>

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001434:	2300      	movs	r3, #0
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	4b1f      	ldr	r3, [pc, #124]	; (80014b8 <HAL_InitTick+0xa4>)
 800143a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143c:	4a1e      	ldr	r2, [pc, #120]	; (80014b8 <HAL_InitTick+0xa4>)
 800143e:	f043 0320 	orr.w	r3, r3, #32
 8001442:	6413      	str	r3, [r2, #64]	; 0x40
 8001444:	4b1c      	ldr	r3, [pc, #112]	; (80014b8 <HAL_InitTick+0xa4>)
 8001446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001448:	f003 0320 	and.w	r3, r3, #32
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001450:	f107 0210 	add.w	r2, r7, #16
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	4611      	mov	r1, r2
 800145a:	4618      	mov	r0, r3
 800145c:	f003 ffc6 	bl	80053ec <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001460:	f003 ff9c 	bl	800539c <HAL_RCC_GetPCLK1Freq>
 8001464:	4603      	mov	r3, r0
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800146a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800146c:	4a13      	ldr	r2, [pc, #76]	; (80014bc <HAL_InitTick+0xa8>)
 800146e:	fba2 2303 	umull	r2, r3, r2, r3
 8001472:	0c9b      	lsrs	r3, r3, #18
 8001474:	3b01      	subs	r3, #1
 8001476:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001478:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <HAL_InitTick+0xac>)
 800147a:	4a12      	ldr	r2, [pc, #72]	; (80014c4 <HAL_InitTick+0xb0>)
 800147c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 800147e:	4b10      	ldr	r3, [pc, #64]	; (80014c0 <HAL_InitTick+0xac>)
 8001480:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001484:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001486:	4a0e      	ldr	r2, [pc, #56]	; (80014c0 <HAL_InitTick+0xac>)
 8001488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800148a:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 800148c:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <HAL_InitTick+0xac>)
 800148e:	2200      	movs	r2, #0
 8001490:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001492:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <HAL_InitTick+0xac>)
 8001494:	2200      	movs	r2, #0
 8001496:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8001498:	4809      	ldr	r0, [pc, #36]	; (80014c0 <HAL_InitTick+0xac>)
 800149a:	f003 ffd9 	bl	8005450 <HAL_TIM_Base_Init>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d104      	bne.n	80014ae <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 80014a4:	4806      	ldr	r0, [pc, #24]	; (80014c0 <HAL_InitTick+0xac>)
 80014a6:	f004 f82d 	bl	8005504 <HAL_TIM_Base_Start_IT>
 80014aa:	4603      	mov	r3, r0
 80014ac:	e000      	b.n	80014b0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3730      	adds	r7, #48	; 0x30
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40023800 	.word	0x40023800
 80014bc:	431bde83 	.word	0x431bde83
 80014c0:	200043a4 	.word	0x200043a4
 80014c4:	40001400 	.word	0x40001400

080014c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014cc:	e7fe      	b.n	80014cc <NMI_Handler+0x4>

080014ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ce:	b480      	push	{r7}
 80014d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014d2:	e7fe      	b.n	80014d2 <HardFault_Handler+0x4>

080014d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014d8:	e7fe      	b.n	80014d8 <MemManage_Handler+0x4>

080014da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014de:	e7fe      	b.n	80014de <BusFault_Handler+0x4>

080014e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014e4:	e7fe      	b.n	80014e4 <UsageFault_Handler+0x4>

080014e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014f8:	4802      	ldr	r0, [pc, #8]	; (8001504 <USART1_IRQHandler+0x10>)
 80014fa:	f004 fc09 	bl	8005d10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	200043ec 	.word	0x200043ec

08001508 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800150c:	4802      	ldr	r0, [pc, #8]	; (8001518 <TIM7_IRQHandler+0x10>)
 800150e:	f004 f869 	bl	80055e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	200043a4 	.word	0x200043a4

0800151c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001520:	4802      	ldr	r0, [pc, #8]	; (800152c <USART6_IRQHandler+0x10>)
 8001522:	f004 fbf5 	bl	8005d10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20004430 	.word	0x20004430

08001530 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8001534:	4802      	ldr	r0, [pc, #8]	; (8001540 <I2C3_EV_IRQHandler+0x10>)
 8001536:	f001 fa51 	bl	80029dc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	200042fc 	.word	0x200042fc

08001544 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8001548:	4802      	ldr	r0, [pc, #8]	; (8001554 <I2C3_ER_IRQHandler+0x10>)
 800154a:	f001 fbb8 	bl	8002cbe <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	200042fc 	.word	0x200042fc

08001558 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800155c:	4b06      	ldr	r3, [pc, #24]	; (8001578 <SystemInit+0x20>)
 800155e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001562:	4a05      	ldr	r2, [pc, #20]	; (8001578 <SystemInit+0x20>)
 8001564:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001568:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001580:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <MX_USART1_UART_Init+0x4c>)
 8001582:	4a12      	ldr	r2, [pc, #72]	; (80015cc <MX_USART1_UART_Init+0x50>)
 8001584:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001586:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <MX_USART1_UART_Init+0x4c>)
 8001588:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800158c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800158e:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <MX_USART1_UART_Init+0x4c>)
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001594:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <MX_USART1_UART_Init+0x4c>)
 8001596:	2200      	movs	r2, #0
 8001598:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800159a:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <MX_USART1_UART_Init+0x4c>)
 800159c:	2200      	movs	r2, #0
 800159e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015a0:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <MX_USART1_UART_Init+0x4c>)
 80015a2:	220c      	movs	r2, #12
 80015a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015a6:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <MX_USART1_UART_Init+0x4c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015ac:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <MX_USART1_UART_Init+0x4c>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015b2:	4805      	ldr	r0, [pc, #20]	; (80015c8 <MX_USART1_UART_Init+0x4c>)
 80015b4:	f004 f9fa 	bl	80059ac <HAL_UART_Init>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80015be:	f7ff fd95 	bl	80010ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	200043ec 	.word	0x200043ec
 80015cc:	40011000 	.word	0x40011000

080015d0 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80015d4:	4b11      	ldr	r3, [pc, #68]	; (800161c <MX_USART6_UART_Init+0x4c>)
 80015d6:	4a12      	ldr	r2, [pc, #72]	; (8001620 <MX_USART6_UART_Init+0x50>)
 80015d8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80015da:	4b10      	ldr	r3, [pc, #64]	; (800161c <MX_USART6_UART_Init+0x4c>)
 80015dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015e0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80015e2:	4b0e      	ldr	r3, [pc, #56]	; (800161c <MX_USART6_UART_Init+0x4c>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80015e8:	4b0c      	ldr	r3, [pc, #48]	; (800161c <MX_USART6_UART_Init+0x4c>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80015ee:	4b0b      	ldr	r3, [pc, #44]	; (800161c <MX_USART6_UART_Init+0x4c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80015f4:	4b09      	ldr	r3, [pc, #36]	; (800161c <MX_USART6_UART_Init+0x4c>)
 80015f6:	220c      	movs	r2, #12
 80015f8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015fa:	4b08      	ldr	r3, [pc, #32]	; (800161c <MX_USART6_UART_Init+0x4c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001600:	4b06      	ldr	r3, [pc, #24]	; (800161c <MX_USART6_UART_Init+0x4c>)
 8001602:	2200      	movs	r2, #0
 8001604:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001606:	4805      	ldr	r0, [pc, #20]	; (800161c <MX_USART6_UART_Init+0x4c>)
 8001608:	f004 f9d0 	bl	80059ac <HAL_UART_Init>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001612:	f7ff fd6b 	bl	80010ec <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20004430 	.word	0x20004430
 8001620:	40011400 	.word	0x40011400

08001624 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08c      	sub	sp, #48	; 0x30
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162c:	f107 031c 	add.w	r3, r7, #28
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]
 800163a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a3a      	ldr	r2, [pc, #232]	; (800172c <HAL_UART_MspInit+0x108>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d135      	bne.n	80016b2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	61bb      	str	r3, [r7, #24]
 800164a:	4b39      	ldr	r3, [pc, #228]	; (8001730 <HAL_UART_MspInit+0x10c>)
 800164c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164e:	4a38      	ldr	r2, [pc, #224]	; (8001730 <HAL_UART_MspInit+0x10c>)
 8001650:	f043 0310 	orr.w	r3, r3, #16
 8001654:	6453      	str	r3, [r2, #68]	; 0x44
 8001656:	4b36      	ldr	r3, [pc, #216]	; (8001730 <HAL_UART_MspInit+0x10c>)
 8001658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165a:	f003 0310 	and.w	r3, r3, #16
 800165e:	61bb      	str	r3, [r7, #24]
 8001660:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	617b      	str	r3, [r7, #20]
 8001666:	4b32      	ldr	r3, [pc, #200]	; (8001730 <HAL_UART_MspInit+0x10c>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	4a31      	ldr	r2, [pc, #196]	; (8001730 <HAL_UART_MspInit+0x10c>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	6313      	str	r3, [r2, #48]	; 0x30
 8001672:	4b2f      	ldr	r3, [pc, #188]	; (8001730 <HAL_UART_MspInit+0x10c>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	617b      	str	r3, [r7, #20]
 800167c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800167e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001682:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001684:	2302      	movs	r3, #2
 8001686:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168c:	2303      	movs	r3, #3
 800168e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001690:	2307      	movs	r3, #7
 8001692:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001694:	f107 031c 	add.w	r3, r7, #28
 8001698:	4619      	mov	r1, r3
 800169a:	4826      	ldr	r0, [pc, #152]	; (8001734 <HAL_UART_MspInit+0x110>)
 800169c:	f000 fa6e 	bl	8001b7c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80016a0:	2200      	movs	r2, #0
 80016a2:	2105      	movs	r1, #5
 80016a4:	2025      	movs	r0, #37	; 0x25
 80016a6:	f000 f993 	bl	80019d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80016aa:	2025      	movs	r0, #37	; 0x25
 80016ac:	f000 f9ac 	bl	8001a08 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80016b0:	e038      	b.n	8001724 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART6)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a20      	ldr	r2, [pc, #128]	; (8001738 <HAL_UART_MspInit+0x114>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d133      	bne.n	8001724 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART6_CLK_ENABLE();
 80016bc:	2300      	movs	r3, #0
 80016be:	613b      	str	r3, [r7, #16]
 80016c0:	4b1b      	ldr	r3, [pc, #108]	; (8001730 <HAL_UART_MspInit+0x10c>)
 80016c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c4:	4a1a      	ldr	r2, [pc, #104]	; (8001730 <HAL_UART_MspInit+0x10c>)
 80016c6:	f043 0320 	orr.w	r3, r3, #32
 80016ca:	6453      	str	r3, [r2, #68]	; 0x44
 80016cc:	4b18      	ldr	r3, [pc, #96]	; (8001730 <HAL_UART_MspInit+0x10c>)
 80016ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d0:	f003 0320 	and.w	r3, r3, #32
 80016d4:	613b      	str	r3, [r7, #16]
 80016d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d8:	2300      	movs	r3, #0
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	4b14      	ldr	r3, [pc, #80]	; (8001730 <HAL_UART_MspInit+0x10c>)
 80016de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e0:	4a13      	ldr	r2, [pc, #76]	; (8001730 <HAL_UART_MspInit+0x10c>)
 80016e2:	f043 0304 	orr.w	r3, r3, #4
 80016e6:	6313      	str	r3, [r2, #48]	; 0x30
 80016e8:	4b11      	ldr	r3, [pc, #68]	; (8001730 <HAL_UART_MspInit+0x10c>)
 80016ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ec:	f003 0304 	and.w	r3, r3, #4
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016f4:	23c0      	movs	r3, #192	; 0xc0
 80016f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f8:	2302      	movs	r3, #2
 80016fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001700:	2303      	movs	r3, #3
 8001702:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001704:	2308      	movs	r3, #8
 8001706:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001708:	f107 031c 	add.w	r3, r7, #28
 800170c:	4619      	mov	r1, r3
 800170e:	480b      	ldr	r0, [pc, #44]	; (800173c <HAL_UART_MspInit+0x118>)
 8001710:	f000 fa34 	bl	8001b7c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8001714:	2200      	movs	r2, #0
 8001716:	2105      	movs	r1, #5
 8001718:	2047      	movs	r0, #71	; 0x47
 800171a:	f000 f959 	bl	80019d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800171e:	2047      	movs	r0, #71	; 0x47
 8001720:	f000 f972 	bl	8001a08 <HAL_NVIC_EnableIRQ>
}
 8001724:	bf00      	nop
 8001726:	3730      	adds	r7, #48	; 0x30
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40011000 	.word	0x40011000
 8001730:	40023800 	.word	0x40023800
 8001734:	40020000 	.word	0x40020000
 8001738:	40011400 	.word	0x40011400
 800173c:	40020800 	.word	0x40020800

08001740 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001740:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001778 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001744:	480d      	ldr	r0, [pc, #52]	; (800177c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001746:	490e      	ldr	r1, [pc, #56]	; (8001780 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001748:	4a0e      	ldr	r2, [pc, #56]	; (8001784 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800174a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800174c:	e002      	b.n	8001754 <LoopCopyDataInit>

0800174e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800174e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001750:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001752:	3304      	adds	r3, #4

08001754 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001754:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001756:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001758:	d3f9      	bcc.n	800174e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800175a:	4a0b      	ldr	r2, [pc, #44]	; (8001788 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800175c:	4c0b      	ldr	r4, [pc, #44]	; (800178c <LoopFillZerobss+0x26>)
  movs r3, #0
 800175e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001760:	e001      	b.n	8001766 <LoopFillZerobss>

08001762 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001762:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001764:	3204      	adds	r2, #4

08001766 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001766:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001768:	d3fb      	bcc.n	8001762 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800176a:	f7ff fef5 	bl	8001558 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800176e:	f006 fbfd 	bl	8007f6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001772:	f7ff fc17 	bl	8000fa4 <main>
  bx  lr    
 8001776:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001778:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800177c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001780:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001784:	08008bb4 	.word	0x08008bb4
  ldr r2, =_sbss
 8001788:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 800178c:	20004484 	.word	0x20004484

08001790 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001790:	e7fe      	b.n	8001790 <ADC_IRQHandler>
	...

08001794 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001798:	4b0e      	ldr	r3, [pc, #56]	; (80017d4 <HAL_Init+0x40>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a0d      	ldr	r2, [pc, #52]	; (80017d4 <HAL_Init+0x40>)
 800179e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017a4:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <HAL_Init+0x40>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a0a      	ldr	r2, [pc, #40]	; (80017d4 <HAL_Init+0x40>)
 80017aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017b0:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <HAL_Init+0x40>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a07      	ldr	r2, [pc, #28]	; (80017d4 <HAL_Init+0x40>)
 80017b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017bc:	2003      	movs	r0, #3
 80017be:	f000 f8fc 	bl	80019ba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017c2:	200f      	movs	r0, #15
 80017c4:	f7ff fe26 	bl	8001414 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017c8:	f7ff fdf8 	bl	80013bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40023c00 	.word	0x40023c00

080017d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017dc:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <HAL_IncTick+0x20>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	461a      	mov	r2, r3
 80017e2:	4b06      	ldr	r3, [pc, #24]	; (80017fc <HAL_IncTick+0x24>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4413      	add	r3, r2
 80017e8:	4a04      	ldr	r2, [pc, #16]	; (80017fc <HAL_IncTick+0x24>)
 80017ea:	6013      	str	r3, [r2, #0]
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	20000024 	.word	0x20000024
 80017fc:	20004474 	.word	0x20004474

08001800 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  return uwTick;
 8001804:	4b03      	ldr	r3, [pc, #12]	; (8001814 <HAL_GetTick+0x14>)
 8001806:	681b      	ldr	r3, [r3, #0]
}
 8001808:	4618      	mov	r0, r3
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	20004474 	.word	0x20004474

08001818 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001820:	f7ff ffee 	bl	8001800 <HAL_GetTick>
 8001824:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001830:	d005      	beq.n	800183e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001832:	4b0a      	ldr	r3, [pc, #40]	; (800185c <HAL_Delay+0x44>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	461a      	mov	r2, r3
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	4413      	add	r3, r2
 800183c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800183e:	bf00      	nop
 8001840:	f7ff ffde 	bl	8001800 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	68fa      	ldr	r2, [r7, #12]
 800184c:	429a      	cmp	r2, r3
 800184e:	d8f7      	bhi.n	8001840 <HAL_Delay+0x28>
  {
  }
}
 8001850:	bf00      	nop
 8001852:	bf00      	nop
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000024 	.word	0x20000024

08001860 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001870:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001876:	68ba      	ldr	r2, [r7, #8]
 8001878:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800187c:	4013      	ands	r3, r2
 800187e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001888:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800188c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001890:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001892:	4a04      	ldr	r2, [pc, #16]	; (80018a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	60d3      	str	r3, [r2, #12]
}
 8001898:	bf00      	nop
 800189a:	3714      	adds	r7, #20
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018ac:	4b04      	ldr	r3, [pc, #16]	; (80018c0 <__NVIC_GetPriorityGrouping+0x18>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	0a1b      	lsrs	r3, r3, #8
 80018b2:	f003 0307 	and.w	r3, r3, #7
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	e000ed00 	.word	0xe000ed00

080018c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	db0b      	blt.n	80018ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	f003 021f 	and.w	r2, r3, #31
 80018dc:	4907      	ldr	r1, [pc, #28]	; (80018fc <__NVIC_EnableIRQ+0x38>)
 80018de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e2:	095b      	lsrs	r3, r3, #5
 80018e4:	2001      	movs	r0, #1
 80018e6:	fa00 f202 	lsl.w	r2, r0, r2
 80018ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	e000e100 	.word	0xe000e100

08001900 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	6039      	str	r1, [r7, #0]
 800190a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800190c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001910:	2b00      	cmp	r3, #0
 8001912:	db0a      	blt.n	800192a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	b2da      	uxtb	r2, r3
 8001918:	490c      	ldr	r1, [pc, #48]	; (800194c <__NVIC_SetPriority+0x4c>)
 800191a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191e:	0112      	lsls	r2, r2, #4
 8001920:	b2d2      	uxtb	r2, r2
 8001922:	440b      	add	r3, r1
 8001924:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001928:	e00a      	b.n	8001940 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	b2da      	uxtb	r2, r3
 800192e:	4908      	ldr	r1, [pc, #32]	; (8001950 <__NVIC_SetPriority+0x50>)
 8001930:	79fb      	ldrb	r3, [r7, #7]
 8001932:	f003 030f 	and.w	r3, r3, #15
 8001936:	3b04      	subs	r3, #4
 8001938:	0112      	lsls	r2, r2, #4
 800193a:	b2d2      	uxtb	r2, r2
 800193c:	440b      	add	r3, r1
 800193e:	761a      	strb	r2, [r3, #24]
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	e000e100 	.word	0xe000e100
 8001950:	e000ed00 	.word	0xe000ed00

08001954 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001954:	b480      	push	{r7}
 8001956:	b089      	sub	sp, #36	; 0x24
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	f1c3 0307 	rsb	r3, r3, #7
 800196e:	2b04      	cmp	r3, #4
 8001970:	bf28      	it	cs
 8001972:	2304      	movcs	r3, #4
 8001974:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	3304      	adds	r3, #4
 800197a:	2b06      	cmp	r3, #6
 800197c:	d902      	bls.n	8001984 <NVIC_EncodePriority+0x30>
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	3b03      	subs	r3, #3
 8001982:	e000      	b.n	8001986 <NVIC_EncodePriority+0x32>
 8001984:	2300      	movs	r3, #0
 8001986:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001988:	f04f 32ff 	mov.w	r2, #4294967295
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	43da      	mvns	r2, r3
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	401a      	ands	r2, r3
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800199c:	f04f 31ff 	mov.w	r1, #4294967295
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	fa01 f303 	lsl.w	r3, r1, r3
 80019a6:	43d9      	mvns	r1, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ac:	4313      	orrs	r3, r2
         );
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3724      	adds	r7, #36	; 0x24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b082      	sub	sp, #8
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7ff ff4c 	bl	8001860 <__NVIC_SetPriorityGrouping>
}
 80019c8:	bf00      	nop
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
 80019dc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019de:	2300      	movs	r3, #0
 80019e0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019e2:	f7ff ff61 	bl	80018a8 <__NVIC_GetPriorityGrouping>
 80019e6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	68b9      	ldr	r1, [r7, #8]
 80019ec:	6978      	ldr	r0, [r7, #20]
 80019ee:	f7ff ffb1 	bl	8001954 <NVIC_EncodePriority>
 80019f2:	4602      	mov	r2, r0
 80019f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019f8:	4611      	mov	r1, r2
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff ff80 	bl	8001900 <__NVIC_SetPriority>
}
 8001a00:	bf00      	nop
 8001a02:	3718      	adds	r7, #24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff ff54 	bl	80018c4 <__NVIC_EnableIRQ>
}
 8001a1c:	bf00      	nop
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a30:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a32:	f7ff fee5 	bl	8001800 <HAL_GetTick>
 8001a36:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d008      	beq.n	8001a56 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2280      	movs	r2, #128	; 0x80
 8001a48:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e052      	b.n	8001afc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f022 0216 	bic.w	r2, r2, #22
 8001a64:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	695a      	ldr	r2, [r3, #20]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a74:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d103      	bne.n	8001a86 <HAL_DMA_Abort+0x62>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d007      	beq.n	8001a96 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f022 0208 	bic.w	r2, r2, #8
 8001a94:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f022 0201 	bic.w	r2, r2, #1
 8001aa4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001aa6:	e013      	b.n	8001ad0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001aa8:	f7ff feaa 	bl	8001800 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b05      	cmp	r3, #5
 8001ab4:	d90c      	bls.n	8001ad0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2220      	movs	r2, #32
 8001aba:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2203      	movs	r2, #3
 8001ac0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e015      	b.n	8001afc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d1e4      	bne.n	8001aa8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ae2:	223f      	movs	r2, #63	; 0x3f
 8001ae4:	409a      	lsls	r2, r3
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2201      	movs	r2, #1
 8001aee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001afa:	2300      	movs	r3, #0
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3710      	adds	r7, #16
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d004      	beq.n	8001b22 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2280      	movs	r2, #128	; 0x80
 8001b1c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e00c      	b.n	8001b3c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2205      	movs	r2, #5
 8001b26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f022 0201 	bic.w	r2, r2, #1
 8001b38:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b56:	b2db      	uxtb	r3, r3
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b089      	sub	sp, #36	; 0x24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b86:	2300      	movs	r3, #0
 8001b88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b92:	2300      	movs	r3, #0
 8001b94:	61fb      	str	r3, [r7, #28]
 8001b96:	e16b      	b.n	8001e70 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b98:	2201      	movs	r2, #1
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	697a      	ldr	r2, [r7, #20]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bac:	693a      	ldr	r2, [r7, #16]
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	f040 815a 	bne.w	8001e6a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f003 0303 	and.w	r3, r3, #3
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d005      	beq.n	8001bce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d130      	bne.n	8001c30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	2203      	movs	r2, #3
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	43db      	mvns	r3, r3
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	4013      	ands	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	68da      	ldr	r2, [r3, #12]
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c04:	2201      	movs	r2, #1
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	4013      	ands	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	091b      	lsrs	r3, r3, #4
 8001c1a:	f003 0201 	and.w	r2, r3, #1
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f003 0303 	and.w	r3, r3, #3
 8001c38:	2b03      	cmp	r3, #3
 8001c3a:	d017      	beq.n	8001c6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	2203      	movs	r2, #3
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	4013      	ands	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	689a      	ldr	r2, [r3, #8]
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f003 0303 	and.w	r3, r3, #3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d123      	bne.n	8001cc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	08da      	lsrs	r2, r3, #3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3208      	adds	r2, #8
 8001c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	f003 0307 	and.w	r3, r3, #7
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	220f      	movs	r2, #15
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	43db      	mvns	r3, r3
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	691a      	ldr	r2, [r3, #16]
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	08da      	lsrs	r2, r3, #3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	3208      	adds	r2, #8
 8001cba:	69b9      	ldr	r1, [r7, #24]
 8001cbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	2203      	movs	r2, #3
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f003 0203 	and.w	r2, r3, #3
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f000 80b4 	beq.w	8001e6a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	4b60      	ldr	r3, [pc, #384]	; (8001e88 <HAL_GPIO_Init+0x30c>)
 8001d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0a:	4a5f      	ldr	r2, [pc, #380]	; (8001e88 <HAL_GPIO_Init+0x30c>)
 8001d0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d10:	6453      	str	r3, [r2, #68]	; 0x44
 8001d12:	4b5d      	ldr	r3, [pc, #372]	; (8001e88 <HAL_GPIO_Init+0x30c>)
 8001d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d1e:	4a5b      	ldr	r2, [pc, #364]	; (8001e8c <HAL_GPIO_Init+0x310>)
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	089b      	lsrs	r3, r3, #2
 8001d24:	3302      	adds	r3, #2
 8001d26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	f003 0303 	and.w	r3, r3, #3
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	220f      	movs	r2, #15
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a52      	ldr	r2, [pc, #328]	; (8001e90 <HAL_GPIO_Init+0x314>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d02b      	beq.n	8001da2 <HAL_GPIO_Init+0x226>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a51      	ldr	r2, [pc, #324]	; (8001e94 <HAL_GPIO_Init+0x318>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d025      	beq.n	8001d9e <HAL_GPIO_Init+0x222>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a50      	ldr	r2, [pc, #320]	; (8001e98 <HAL_GPIO_Init+0x31c>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d01f      	beq.n	8001d9a <HAL_GPIO_Init+0x21e>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a4f      	ldr	r2, [pc, #316]	; (8001e9c <HAL_GPIO_Init+0x320>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d019      	beq.n	8001d96 <HAL_GPIO_Init+0x21a>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a4e      	ldr	r2, [pc, #312]	; (8001ea0 <HAL_GPIO_Init+0x324>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d013      	beq.n	8001d92 <HAL_GPIO_Init+0x216>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a4d      	ldr	r2, [pc, #308]	; (8001ea4 <HAL_GPIO_Init+0x328>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d00d      	beq.n	8001d8e <HAL_GPIO_Init+0x212>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a4c      	ldr	r2, [pc, #304]	; (8001ea8 <HAL_GPIO_Init+0x32c>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d007      	beq.n	8001d8a <HAL_GPIO_Init+0x20e>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a4b      	ldr	r2, [pc, #300]	; (8001eac <HAL_GPIO_Init+0x330>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d101      	bne.n	8001d86 <HAL_GPIO_Init+0x20a>
 8001d82:	2307      	movs	r3, #7
 8001d84:	e00e      	b.n	8001da4 <HAL_GPIO_Init+0x228>
 8001d86:	2308      	movs	r3, #8
 8001d88:	e00c      	b.n	8001da4 <HAL_GPIO_Init+0x228>
 8001d8a:	2306      	movs	r3, #6
 8001d8c:	e00a      	b.n	8001da4 <HAL_GPIO_Init+0x228>
 8001d8e:	2305      	movs	r3, #5
 8001d90:	e008      	b.n	8001da4 <HAL_GPIO_Init+0x228>
 8001d92:	2304      	movs	r3, #4
 8001d94:	e006      	b.n	8001da4 <HAL_GPIO_Init+0x228>
 8001d96:	2303      	movs	r3, #3
 8001d98:	e004      	b.n	8001da4 <HAL_GPIO_Init+0x228>
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	e002      	b.n	8001da4 <HAL_GPIO_Init+0x228>
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e000      	b.n	8001da4 <HAL_GPIO_Init+0x228>
 8001da2:	2300      	movs	r3, #0
 8001da4:	69fa      	ldr	r2, [r7, #28]
 8001da6:	f002 0203 	and.w	r2, r2, #3
 8001daa:	0092      	lsls	r2, r2, #2
 8001dac:	4093      	lsls	r3, r2
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001db4:	4935      	ldr	r1, [pc, #212]	; (8001e8c <HAL_GPIO_Init+0x310>)
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	089b      	lsrs	r3, r3, #2
 8001dba:	3302      	adds	r3, #2
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dc2:	4b3b      	ldr	r3, [pc, #236]	; (8001eb0 <HAL_GPIO_Init+0x334>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001de6:	4a32      	ldr	r2, [pc, #200]	; (8001eb0 <HAL_GPIO_Init+0x334>)
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001dec:	4b30      	ldr	r3, [pc, #192]	; (8001eb0 <HAL_GPIO_Init+0x334>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	43db      	mvns	r3, r3
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d003      	beq.n	8001e10 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e10:	4a27      	ldr	r2, [pc, #156]	; (8001eb0 <HAL_GPIO_Init+0x334>)
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e16:	4b26      	ldr	r3, [pc, #152]	; (8001eb0 <HAL_GPIO_Init+0x334>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4013      	ands	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e3a:	4a1d      	ldr	r2, [pc, #116]	; (8001eb0 <HAL_GPIO_Init+0x334>)
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e40:	4b1b      	ldr	r3, [pc, #108]	; (8001eb0 <HAL_GPIO_Init+0x334>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d003      	beq.n	8001e64 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e64:	4a12      	ldr	r2, [pc, #72]	; (8001eb0 <HAL_GPIO_Init+0x334>)
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	61fb      	str	r3, [r7, #28]
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	2b0f      	cmp	r3, #15
 8001e74:	f67f ae90 	bls.w	8001b98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e78:	bf00      	nop
 8001e7a:	bf00      	nop
 8001e7c:	3724      	adds	r7, #36	; 0x24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	40013800 	.word	0x40013800
 8001e90:	40020000 	.word	0x40020000
 8001e94:	40020400 	.word	0x40020400
 8001e98:	40020800 	.word	0x40020800
 8001e9c:	40020c00 	.word	0x40020c00
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	40021400 	.word	0x40021400
 8001ea8:	40021800 	.word	0x40021800
 8001eac:	40021c00 	.word	0x40021c00
 8001eb0:	40013c00 	.word	0x40013c00

08001eb4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	691a      	ldr	r2, [r3, #16]
 8001ec4:	887b      	ldrh	r3, [r7, #2]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d002      	beq.n	8001ed2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	73fb      	strb	r3, [r7, #15]
 8001ed0:	e001      	b.n	8001ed6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3714      	adds	r7, #20
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	460b      	mov	r3, r1
 8001eee:	807b      	strh	r3, [r7, #2]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ef4:	787b      	ldrb	r3, [r7, #1]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d003      	beq.n	8001f02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001efa:	887a      	ldrh	r2, [r7, #2]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f00:	e003      	b.n	8001f0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f02:	887b      	ldrh	r3, [r7, #2]
 8001f04:	041a      	lsls	r2, r3, #16
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	619a      	str	r2, [r3, #24]
}
 8001f0a:	bf00      	nop
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
	...

08001f18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d101      	bne.n	8001f2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e12b      	b.n	8002182 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d106      	bne.n	8001f44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f7fe ff80 	bl	8000e44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2224      	movs	r2, #36	; 0x24
 8001f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f022 0201 	bic.w	r2, r2, #1
 8001f5a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f6a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f7a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f7c:	f003 fa0e 	bl	800539c <HAL_RCC_GetPCLK1Freq>
 8001f80:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	4a81      	ldr	r2, [pc, #516]	; (800218c <HAL_I2C_Init+0x274>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d807      	bhi.n	8001f9c <HAL_I2C_Init+0x84>
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	4a80      	ldr	r2, [pc, #512]	; (8002190 <HAL_I2C_Init+0x278>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	bf94      	ite	ls
 8001f94:	2301      	movls	r3, #1
 8001f96:	2300      	movhi	r3, #0
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	e006      	b.n	8001faa <HAL_I2C_Init+0x92>
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	4a7d      	ldr	r2, [pc, #500]	; (8002194 <HAL_I2C_Init+0x27c>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	bf94      	ite	ls
 8001fa4:	2301      	movls	r3, #1
 8001fa6:	2300      	movhi	r3, #0
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e0e7      	b.n	8002182 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	4a78      	ldr	r2, [pc, #480]	; (8002198 <HAL_I2C_Init+0x280>)
 8001fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fba:	0c9b      	lsrs	r3, r3, #18
 8001fbc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68ba      	ldr	r2, [r7, #8]
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	6a1b      	ldr	r3, [r3, #32]
 8001fd8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	4a6a      	ldr	r2, [pc, #424]	; (800218c <HAL_I2C_Init+0x274>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d802      	bhi.n	8001fec <HAL_I2C_Init+0xd4>
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	e009      	b.n	8002000 <HAL_I2C_Init+0xe8>
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001ff2:	fb02 f303 	mul.w	r3, r2, r3
 8001ff6:	4a69      	ldr	r2, [pc, #420]	; (800219c <HAL_I2C_Init+0x284>)
 8001ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffc:	099b      	lsrs	r3, r3, #6
 8001ffe:	3301      	adds	r3, #1
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	6812      	ldr	r2, [r2, #0]
 8002004:	430b      	orrs	r3, r1
 8002006:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002012:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	495c      	ldr	r1, [pc, #368]	; (800218c <HAL_I2C_Init+0x274>)
 800201c:	428b      	cmp	r3, r1
 800201e:	d819      	bhi.n	8002054 <HAL_I2C_Init+0x13c>
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	1e59      	subs	r1, r3, #1
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	fbb1 f3f3 	udiv	r3, r1, r3
 800202e:	1c59      	adds	r1, r3, #1
 8002030:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002034:	400b      	ands	r3, r1
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00a      	beq.n	8002050 <HAL_I2C_Init+0x138>
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	1e59      	subs	r1, r3, #1
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	fbb1 f3f3 	udiv	r3, r1, r3
 8002048:	3301      	adds	r3, #1
 800204a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800204e:	e051      	b.n	80020f4 <HAL_I2C_Init+0x1dc>
 8002050:	2304      	movs	r3, #4
 8002052:	e04f      	b.n	80020f4 <HAL_I2C_Init+0x1dc>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d111      	bne.n	8002080 <HAL_I2C_Init+0x168>
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	1e58      	subs	r0, r3, #1
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6859      	ldr	r1, [r3, #4]
 8002064:	460b      	mov	r3, r1
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	440b      	add	r3, r1
 800206a:	fbb0 f3f3 	udiv	r3, r0, r3
 800206e:	3301      	adds	r3, #1
 8002070:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002074:	2b00      	cmp	r3, #0
 8002076:	bf0c      	ite	eq
 8002078:	2301      	moveq	r3, #1
 800207a:	2300      	movne	r3, #0
 800207c:	b2db      	uxtb	r3, r3
 800207e:	e012      	b.n	80020a6 <HAL_I2C_Init+0x18e>
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	1e58      	subs	r0, r3, #1
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6859      	ldr	r1, [r3, #4]
 8002088:	460b      	mov	r3, r1
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	440b      	add	r3, r1
 800208e:	0099      	lsls	r1, r3, #2
 8002090:	440b      	add	r3, r1
 8002092:	fbb0 f3f3 	udiv	r3, r0, r3
 8002096:	3301      	adds	r3, #1
 8002098:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800209c:	2b00      	cmp	r3, #0
 800209e:	bf0c      	ite	eq
 80020a0:	2301      	moveq	r3, #1
 80020a2:	2300      	movne	r3, #0
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <HAL_I2C_Init+0x196>
 80020aa:	2301      	movs	r3, #1
 80020ac:	e022      	b.n	80020f4 <HAL_I2C_Init+0x1dc>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d10e      	bne.n	80020d4 <HAL_I2C_Init+0x1bc>
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	1e58      	subs	r0, r3, #1
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6859      	ldr	r1, [r3, #4]
 80020be:	460b      	mov	r3, r1
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	440b      	add	r3, r1
 80020c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80020c8:	3301      	adds	r3, #1
 80020ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020d2:	e00f      	b.n	80020f4 <HAL_I2C_Init+0x1dc>
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	1e58      	subs	r0, r3, #1
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6859      	ldr	r1, [r3, #4]
 80020dc:	460b      	mov	r3, r1
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	440b      	add	r3, r1
 80020e2:	0099      	lsls	r1, r3, #2
 80020e4:	440b      	add	r3, r1
 80020e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80020ea:	3301      	adds	r3, #1
 80020ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020f4:	6879      	ldr	r1, [r7, #4]
 80020f6:	6809      	ldr	r1, [r1, #0]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	69da      	ldr	r2, [r3, #28]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a1b      	ldr	r3, [r3, #32]
 800210e:	431a      	orrs	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	430a      	orrs	r2, r1
 8002116:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002122:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	6911      	ldr	r1, [r2, #16]
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	68d2      	ldr	r2, [r2, #12]
 800212e:	4311      	orrs	r1, r2
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	6812      	ldr	r2, [r2, #0]
 8002134:	430b      	orrs	r3, r1
 8002136:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	695a      	ldr	r2, [r3, #20]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	431a      	orrs	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	430a      	orrs	r2, r1
 8002152:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f042 0201 	orr.w	r2, r2, #1
 8002162:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2220      	movs	r2, #32
 800216e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	000186a0 	.word	0x000186a0
 8002190:	001e847f 	.word	0x001e847f
 8002194:	003d08ff 	.word	0x003d08ff
 8002198:	431bde83 	.word	0x431bde83
 800219c:	10624dd3 	.word	0x10624dd3

080021a0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b088      	sub	sp, #32
 80021a4:	af02      	add	r7, sp, #8
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	607a      	str	r2, [r7, #4]
 80021aa:	461a      	mov	r2, r3
 80021ac:	460b      	mov	r3, r1
 80021ae:	817b      	strh	r3, [r7, #10]
 80021b0:	4613      	mov	r3, r2
 80021b2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021b4:	f7ff fb24 	bl	8001800 <HAL_GetTick>
 80021b8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b20      	cmp	r3, #32
 80021c4:	f040 80e0 	bne.w	8002388 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	9300      	str	r3, [sp, #0]
 80021cc:	2319      	movs	r3, #25
 80021ce:	2201      	movs	r2, #1
 80021d0:	4970      	ldr	r1, [pc, #448]	; (8002394 <HAL_I2C_Master_Transmit+0x1f4>)
 80021d2:	68f8      	ldr	r0, [r7, #12]
 80021d4:	f002 fa6c 	bl	80046b0 <I2C_WaitOnFlagUntilTimeout>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80021de:	2302      	movs	r3, #2
 80021e0:	e0d3      	b.n	800238a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d101      	bne.n	80021f0 <HAL_I2C_Master_Transmit+0x50>
 80021ec:	2302      	movs	r3, #2
 80021ee:	e0cc      	b.n	800238a <HAL_I2C_Master_Transmit+0x1ea>
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	2b01      	cmp	r3, #1
 8002204:	d007      	beq.n	8002216 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f042 0201 	orr.w	r2, r2, #1
 8002214:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002224:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2221      	movs	r2, #33	; 0x21
 800222a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2210      	movs	r2, #16
 8002232:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2200      	movs	r2, #0
 800223a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	893a      	ldrh	r2, [r7, #8]
 8002246:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800224c:	b29a      	uxth	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	4a50      	ldr	r2, [pc, #320]	; (8002398 <HAL_I2C_Master_Transmit+0x1f8>)
 8002256:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002258:	8979      	ldrh	r1, [r7, #10]
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	6a3a      	ldr	r2, [r7, #32]
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	f001 ff98 	bl	8004194 <I2C_MasterRequestWrite>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e08d      	b.n	800238a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800226e:	2300      	movs	r3, #0
 8002270:	613b      	str	r3, [r7, #16]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	695b      	ldr	r3, [r3, #20]
 8002278:	613b      	str	r3, [r7, #16]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	613b      	str	r3, [r7, #16]
 8002282:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002284:	e066      	b.n	8002354 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002286:	697a      	ldr	r2, [r7, #20]
 8002288:	6a39      	ldr	r1, [r7, #32]
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f002 fae6 	bl	800485c <I2C_WaitOnTXEFlagUntilTimeout>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00d      	beq.n	80022b2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	2b04      	cmp	r3, #4
 800229c:	d107      	bne.n	80022ae <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e06b      	b.n	800238a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b6:	781a      	ldrb	r2, [r3, #0]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c2:	1c5a      	adds	r2, r3, #1
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	3b01      	subs	r3, #1
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022da:	3b01      	subs	r3, #1
 80022dc:	b29a      	uxth	r2, r3
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	695b      	ldr	r3, [r3, #20]
 80022e8:	f003 0304 	and.w	r3, r3, #4
 80022ec:	2b04      	cmp	r3, #4
 80022ee:	d11b      	bne.n	8002328 <HAL_I2C_Master_Transmit+0x188>
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d017      	beq.n	8002328 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fc:	781a      	ldrb	r2, [r3, #0]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002308:	1c5a      	adds	r2, r3, #1
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002312:	b29b      	uxth	r3, r3
 8002314:	3b01      	subs	r3, #1
 8002316:	b29a      	uxth	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002320:	3b01      	subs	r3, #1
 8002322:	b29a      	uxth	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002328:	697a      	ldr	r2, [r7, #20]
 800232a:	6a39      	ldr	r1, [r7, #32]
 800232c:	68f8      	ldr	r0, [r7, #12]
 800232e:	f002 fad6 	bl	80048de <I2C_WaitOnBTFFlagUntilTimeout>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d00d      	beq.n	8002354 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233c:	2b04      	cmp	r3, #4
 800233e:	d107      	bne.n	8002350 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800234e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e01a      	b.n	800238a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002358:	2b00      	cmp	r3, #0
 800235a:	d194      	bne.n	8002286 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800236a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2220      	movs	r2, #32
 8002370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002384:	2300      	movs	r3, #0
 8002386:	e000      	b.n	800238a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002388:	2302      	movs	r3, #2
  }
}
 800238a:	4618      	mov	r0, r3
 800238c:	3718      	adds	r7, #24
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	00100002 	.word	0x00100002
 8002398:	ffff0000 	.word	0xffff0000

0800239c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b08c      	sub	sp, #48	; 0x30
 80023a0:	af02      	add	r7, sp, #8
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	607a      	str	r2, [r7, #4]
 80023a6:	461a      	mov	r2, r3
 80023a8:	460b      	mov	r3, r1
 80023aa:	817b      	strh	r3, [r7, #10]
 80023ac:	4613      	mov	r3, r2
 80023ae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023b0:	f7ff fa26 	bl	8001800 <HAL_GetTick>
 80023b4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b20      	cmp	r3, #32
 80023c0:	f040 820b 	bne.w	80027da <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c6:	9300      	str	r3, [sp, #0]
 80023c8:	2319      	movs	r3, #25
 80023ca:	2201      	movs	r2, #1
 80023cc:	497c      	ldr	r1, [pc, #496]	; (80025c0 <HAL_I2C_Master_Receive+0x224>)
 80023ce:	68f8      	ldr	r0, [r7, #12]
 80023d0:	f002 f96e 	bl	80046b0 <I2C_WaitOnFlagUntilTimeout>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80023da:	2302      	movs	r3, #2
 80023dc:	e1fe      	b.n	80027dc <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d101      	bne.n	80023ec <HAL_I2C_Master_Receive+0x50>
 80023e8:	2302      	movs	r3, #2
 80023ea:	e1f7      	b.n	80027dc <HAL_I2C_Master_Receive+0x440>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d007      	beq.n	8002412 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f042 0201 	orr.w	r2, r2, #1
 8002410:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002420:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2222      	movs	r2, #34	; 0x22
 8002426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2210      	movs	r2, #16
 800242e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2200      	movs	r2, #0
 8002436:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	893a      	ldrh	r2, [r7, #8]
 8002442:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002448:	b29a      	uxth	r2, r3
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	4a5c      	ldr	r2, [pc, #368]	; (80025c4 <HAL_I2C_Master_Receive+0x228>)
 8002452:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002454:	8979      	ldrh	r1, [r7, #10]
 8002456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002458:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800245a:	68f8      	ldr	r0, [r7, #12]
 800245c:	f001 ff1c 	bl	8004298 <I2C_MasterRequestRead>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e1b8      	b.n	80027dc <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800246e:	2b00      	cmp	r3, #0
 8002470:	d113      	bne.n	800249a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002472:	2300      	movs	r3, #0
 8002474:	623b      	str	r3, [r7, #32]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	695b      	ldr	r3, [r3, #20]
 800247c:	623b      	str	r3, [r7, #32]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	623b      	str	r3, [r7, #32]
 8002486:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	e18c      	b.n	80027b4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d11b      	bne.n	80024da <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024b2:	2300      	movs	r3, #0
 80024b4:	61fb      	str	r3, [r7, #28]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	695b      	ldr	r3, [r3, #20]
 80024bc:	61fb      	str	r3, [r7, #28]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	61fb      	str	r3, [r7, #28]
 80024c6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	e16c      	b.n	80027b4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d11b      	bne.n	800251a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024f0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002500:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002502:	2300      	movs	r3, #0
 8002504:	61bb      	str	r3, [r7, #24]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	695b      	ldr	r3, [r3, #20]
 800250c:	61bb      	str	r3, [r7, #24]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	61bb      	str	r3, [r7, #24]
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	e14c      	b.n	80027b4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002528:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800252a:	2300      	movs	r3, #0
 800252c:	617b      	str	r3, [r7, #20]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	695b      	ldr	r3, [r3, #20]
 8002534:	617b      	str	r3, [r7, #20]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	617b      	str	r3, [r7, #20]
 800253e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002540:	e138      	b.n	80027b4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002546:	2b03      	cmp	r3, #3
 8002548:	f200 80f1 	bhi.w	800272e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002550:	2b01      	cmp	r3, #1
 8002552:	d123      	bne.n	800259c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002556:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002558:	68f8      	ldr	r0, [r7, #12]
 800255a:	f002 fa33 	bl	80049c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e139      	b.n	80027dc <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	691a      	ldr	r2, [r3, #16]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002572:	b2d2      	uxtb	r2, r2
 8002574:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257a:	1c5a      	adds	r2, r3, #1
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002584:	3b01      	subs	r3, #1
 8002586:	b29a      	uxth	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002590:	b29b      	uxth	r3, r3
 8002592:	3b01      	subs	r3, #1
 8002594:	b29a      	uxth	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	855a      	strh	r2, [r3, #42]	; 0x2a
 800259a:	e10b      	b.n	80027b4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d14e      	bne.n	8002642 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a6:	9300      	str	r3, [sp, #0]
 80025a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025aa:	2200      	movs	r2, #0
 80025ac:	4906      	ldr	r1, [pc, #24]	; (80025c8 <HAL_I2C_Master_Receive+0x22c>)
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f002 f87e 	bl	80046b0 <I2C_WaitOnFlagUntilTimeout>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d008      	beq.n	80025cc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e10e      	b.n	80027dc <HAL_I2C_Master_Receive+0x440>
 80025be:	bf00      	nop
 80025c0:	00100002 	.word	0x00100002
 80025c4:	ffff0000 	.word	0xffff0000
 80025c8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	691a      	ldr	r2, [r3, #16]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e6:	b2d2      	uxtb	r2, r2
 80025e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ee:	1c5a      	adds	r2, r3, #1
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f8:	3b01      	subs	r3, #1
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002604:	b29b      	uxth	r3, r3
 8002606:	3b01      	subs	r3, #1
 8002608:	b29a      	uxth	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	691a      	ldr	r2, [r3, #16]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002618:	b2d2      	uxtb	r2, r2
 800261a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002620:	1c5a      	adds	r2, r3, #1
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800262a:	3b01      	subs	r3, #1
 800262c:	b29a      	uxth	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002636:	b29b      	uxth	r3, r3
 8002638:	3b01      	subs	r3, #1
 800263a:	b29a      	uxth	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002640:	e0b8      	b.n	80027b4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002648:	2200      	movs	r2, #0
 800264a:	4966      	ldr	r1, [pc, #408]	; (80027e4 <HAL_I2C_Master_Receive+0x448>)
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	f002 f82f 	bl	80046b0 <I2C_WaitOnFlagUntilTimeout>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e0bf      	b.n	80027dc <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800266a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	691a      	ldr	r2, [r3, #16]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267e:	1c5a      	adds	r2, r3, #1
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002688:	3b01      	subs	r3, #1
 800268a:	b29a      	uxth	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002694:	b29b      	uxth	r3, r3
 8002696:	3b01      	subs	r3, #1
 8002698:	b29a      	uxth	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800269e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a0:	9300      	str	r3, [sp, #0]
 80026a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a4:	2200      	movs	r2, #0
 80026a6:	494f      	ldr	r1, [pc, #316]	; (80027e4 <HAL_I2C_Master_Receive+0x448>)
 80026a8:	68f8      	ldr	r0, [r7, #12]
 80026aa:	f002 f801 	bl	80046b0 <I2C_WaitOnFlagUntilTimeout>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e091      	b.n	80027dc <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	691a      	ldr	r2, [r3, #16]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d2:	b2d2      	uxtb	r2, r2
 80026d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026da:	1c5a      	adds	r2, r3, #1
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e4:	3b01      	subs	r3, #1
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	3b01      	subs	r3, #1
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	691a      	ldr	r2, [r3, #16]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002704:	b2d2      	uxtb	r2, r2
 8002706:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270c:	1c5a      	adds	r2, r3, #1
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002716:	3b01      	subs	r3, #1
 8002718:	b29a      	uxth	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002722:	b29b      	uxth	r3, r3
 8002724:	3b01      	subs	r3, #1
 8002726:	b29a      	uxth	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800272c:	e042      	b.n	80027b4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800272e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002730:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002732:	68f8      	ldr	r0, [r7, #12]
 8002734:	f002 f946 	bl	80049c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e04c      	b.n	80027dc <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	691a      	ldr	r2, [r3, #16]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274c:	b2d2      	uxtb	r2, r2
 800274e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002754:	1c5a      	adds	r2, r3, #1
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800275e:	3b01      	subs	r3, #1
 8002760:	b29a      	uxth	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800276a:	b29b      	uxth	r3, r3
 800276c:	3b01      	subs	r3, #1
 800276e:	b29a      	uxth	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	695b      	ldr	r3, [r3, #20]
 800277a:	f003 0304 	and.w	r3, r3, #4
 800277e:	2b04      	cmp	r3, #4
 8002780:	d118      	bne.n	80027b4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	691a      	ldr	r2, [r3, #16]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278c:	b2d2      	uxtb	r2, r2
 800278e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002794:	1c5a      	adds	r2, r3, #1
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800279e:	3b01      	subs	r3, #1
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	3b01      	subs	r3, #1
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f47f aec2 	bne.w	8002542 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2220      	movs	r2, #32
 80027c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80027d6:	2300      	movs	r3, #0
 80027d8:	e000      	b.n	80027dc <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80027da:	2302      	movs	r3, #2
  }
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3728      	adds	r7, #40	; 0x28
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	00010004 	.word	0x00010004

080027e8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b088      	sub	sp, #32
 80027ec:	af02      	add	r7, sp, #8
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	4608      	mov	r0, r1
 80027f2:	4611      	mov	r1, r2
 80027f4:	461a      	mov	r2, r3
 80027f6:	4603      	mov	r3, r0
 80027f8:	817b      	strh	r3, [r7, #10]
 80027fa:	460b      	mov	r3, r1
 80027fc:	813b      	strh	r3, [r7, #8]
 80027fe:	4613      	mov	r3, r2
 8002800:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002802:	f7fe fffd 	bl	8001800 <HAL_GetTick>
 8002806:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800280e:	b2db      	uxtb	r3, r3
 8002810:	2b20      	cmp	r3, #32
 8002812:	f040 80d9 	bne.w	80029c8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	9300      	str	r3, [sp, #0]
 800281a:	2319      	movs	r3, #25
 800281c:	2201      	movs	r2, #1
 800281e:	496d      	ldr	r1, [pc, #436]	; (80029d4 <HAL_I2C_Mem_Write+0x1ec>)
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f001 ff45 	bl	80046b0 <I2C_WaitOnFlagUntilTimeout>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800282c:	2302      	movs	r3, #2
 800282e:	e0cc      	b.n	80029ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002836:	2b01      	cmp	r3, #1
 8002838:	d101      	bne.n	800283e <HAL_I2C_Mem_Write+0x56>
 800283a:	2302      	movs	r3, #2
 800283c:	e0c5      	b.n	80029ca <HAL_I2C_Mem_Write+0x1e2>
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2201      	movs	r2, #1
 8002842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0301 	and.w	r3, r3, #1
 8002850:	2b01      	cmp	r3, #1
 8002852:	d007      	beq.n	8002864 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f042 0201 	orr.w	r2, r2, #1
 8002862:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002872:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2221      	movs	r2, #33	; 0x21
 8002878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2240      	movs	r2, #64	; 0x40
 8002880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2200      	movs	r2, #0
 8002888:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6a3a      	ldr	r2, [r7, #32]
 800288e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002894:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800289a:	b29a      	uxth	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	4a4d      	ldr	r2, [pc, #308]	; (80029d8 <HAL_I2C_Mem_Write+0x1f0>)
 80028a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028a6:	88f8      	ldrh	r0, [r7, #6]
 80028a8:	893a      	ldrh	r2, [r7, #8]
 80028aa:	8979      	ldrh	r1, [r7, #10]
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	9301      	str	r3, [sp, #4]
 80028b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b2:	9300      	str	r3, [sp, #0]
 80028b4:	4603      	mov	r3, r0
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	f001 fdbc 	bl	8004434 <I2C_RequestMemoryWrite>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d052      	beq.n	8002968 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e081      	b.n	80029ca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028c6:	697a      	ldr	r2, [r7, #20]
 80028c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028ca:	68f8      	ldr	r0, [r7, #12]
 80028cc:	f001 ffc6 	bl	800485c <I2C_WaitOnTXEFlagUntilTimeout>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00d      	beq.n	80028f2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	2b04      	cmp	r3, #4
 80028dc:	d107      	bne.n	80028ee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e06b      	b.n	80029ca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f6:	781a      	ldrb	r2, [r3, #0]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002902:	1c5a      	adds	r2, r3, #1
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800290c:	3b01      	subs	r3, #1
 800290e:	b29a      	uxth	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002918:	b29b      	uxth	r3, r3
 800291a:	3b01      	subs	r3, #1
 800291c:	b29a      	uxth	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	695b      	ldr	r3, [r3, #20]
 8002928:	f003 0304 	and.w	r3, r3, #4
 800292c:	2b04      	cmp	r3, #4
 800292e:	d11b      	bne.n	8002968 <HAL_I2C_Mem_Write+0x180>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002934:	2b00      	cmp	r3, #0
 8002936:	d017      	beq.n	8002968 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293c:	781a      	ldrb	r2, [r3, #0]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002948:	1c5a      	adds	r2, r3, #1
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002952:	3b01      	subs	r3, #1
 8002954:	b29a      	uxth	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800295e:	b29b      	uxth	r3, r3
 8002960:	3b01      	subs	r3, #1
 8002962:	b29a      	uxth	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1aa      	bne.n	80028c6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002974:	68f8      	ldr	r0, [r7, #12]
 8002976:	f001 ffb2 	bl	80048de <I2C_WaitOnBTFFlagUntilTimeout>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00d      	beq.n	800299c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002984:	2b04      	cmp	r3, #4
 8002986:	d107      	bne.n	8002998 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002996:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e016      	b.n	80029ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2220      	movs	r2, #32
 80029b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80029c4:	2300      	movs	r3, #0
 80029c6:	e000      	b.n	80029ca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80029c8:	2302      	movs	r3, #2
  }
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3718      	adds	r7, #24
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	00100002 	.word	0x00100002
 80029d8:	ffff0000 	.word	0xffff0000

080029dc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b088      	sub	sp, #32
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80029e4:	2300      	movs	r3, #0
 80029e6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029fc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a04:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002a06:	7bfb      	ldrb	r3, [r7, #15]
 8002a08:	2b10      	cmp	r3, #16
 8002a0a:	d003      	beq.n	8002a14 <HAL_I2C_EV_IRQHandler+0x38>
 8002a0c:	7bfb      	ldrb	r3, [r7, #15]
 8002a0e:	2b40      	cmp	r3, #64	; 0x40
 8002a10:	f040 80c1 	bne.w	8002b96 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10d      	bne.n	8002a4a <HAL_I2C_EV_IRQHandler+0x6e>
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002a34:	d003      	beq.n	8002a3e <HAL_I2C_EV_IRQHandler+0x62>
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002a3c:	d101      	bne.n	8002a42 <HAL_I2C_EV_IRQHandler+0x66>
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e000      	b.n	8002a44 <HAL_I2C_EV_IRQHandler+0x68>
 8002a42:	2300      	movs	r3, #0
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	f000 8132 	beq.w	8002cae <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	f003 0301 	and.w	r3, r3, #1
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d00c      	beq.n	8002a6e <HAL_I2C_EV_IRQHandler+0x92>
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	0a5b      	lsrs	r3, r3, #9
 8002a58:	f003 0301 	and.w	r3, r3, #1
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d006      	beq.n	8002a6e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f002 f834 	bl	8004ace <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 fd79 	bl	800355e <I2C_Master_SB>
 8002a6c:	e092      	b.n	8002b94 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	08db      	lsrs	r3, r3, #3
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d009      	beq.n	8002a8e <HAL_I2C_EV_IRQHandler+0xb2>
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	0a5b      	lsrs	r3, r3, #9
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 fdef 	bl	800366a <I2C_Master_ADD10>
 8002a8c:	e082      	b.n	8002b94 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	085b      	lsrs	r3, r3, #1
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d009      	beq.n	8002aae <HAL_I2C_EV_IRQHandler+0xd2>
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	0a5b      	lsrs	r3, r3, #9
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 fe09 	bl	80036be <I2C_Master_ADDR>
 8002aac:	e072      	b.n	8002b94 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	089b      	lsrs	r3, r3, #2
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d03b      	beq.n	8002b32 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ac4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ac8:	f000 80f3 	beq.w	8002cb2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	09db      	lsrs	r3, r3, #7
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d00f      	beq.n	8002af8 <HAL_I2C_EV_IRQHandler+0x11c>
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	0a9b      	lsrs	r3, r3, #10
 8002adc:	f003 0301 	and.w	r3, r3, #1
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d009      	beq.n	8002af8 <HAL_I2C_EV_IRQHandler+0x11c>
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	089b      	lsrs	r3, r3, #2
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d103      	bne.n	8002af8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f000 f9f3 	bl	8002edc <I2C_MasterTransmit_TXE>
 8002af6:	e04d      	b.n	8002b94 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	089b      	lsrs	r3, r3, #2
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	f000 80d6 	beq.w	8002cb2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	0a5b      	lsrs	r3, r3, #9
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f000 80cf 	beq.w	8002cb2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002b14:	7bbb      	ldrb	r3, [r7, #14]
 8002b16:	2b21      	cmp	r3, #33	; 0x21
 8002b18:	d103      	bne.n	8002b22 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 fa7a 	bl	8003014 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b20:	e0c7      	b.n	8002cb2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002b22:	7bfb      	ldrb	r3, [r7, #15]
 8002b24:	2b40      	cmp	r3, #64	; 0x40
 8002b26:	f040 80c4 	bne.w	8002cb2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 fae8 	bl	8003100 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b30:	e0bf      	b.n	8002cb2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b40:	f000 80b7 	beq.w	8002cb2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	099b      	lsrs	r3, r3, #6
 8002b48:	f003 0301 	and.w	r3, r3, #1
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00f      	beq.n	8002b70 <HAL_I2C_EV_IRQHandler+0x194>
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	0a9b      	lsrs	r3, r3, #10
 8002b54:	f003 0301 	and.w	r3, r3, #1
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d009      	beq.n	8002b70 <HAL_I2C_EV_IRQHandler+0x194>
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	089b      	lsrs	r3, r3, #2
 8002b60:	f003 0301 	and.w	r3, r3, #1
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d103      	bne.n	8002b70 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f000 fb5d 	bl	8003228 <I2C_MasterReceive_RXNE>
 8002b6e:	e011      	b.n	8002b94 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	089b      	lsrs	r3, r3, #2
 8002b74:	f003 0301 	and.w	r3, r3, #1
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 809a 	beq.w	8002cb2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	0a5b      	lsrs	r3, r3, #9
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f000 8093 	beq.w	8002cb2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 fbfc 	bl	800338a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b92:	e08e      	b.n	8002cb2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002b94:	e08d      	b.n	8002cb2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d004      	beq.n	8002ba8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	61fb      	str	r3, [r7, #28]
 8002ba6:	e007      	b.n	8002bb8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	085b      	lsrs	r3, r3, #1
 8002bbc:	f003 0301 	and.w	r3, r3, #1
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d012      	beq.n	8002bea <HAL_I2C_EV_IRQHandler+0x20e>
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	0a5b      	lsrs	r3, r3, #9
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00c      	beq.n	8002bea <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d003      	beq.n	8002be0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002be0:	69b9      	ldr	r1, [r7, #24]
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 ffba 	bl	8003b5c <I2C_Slave_ADDR>
 8002be8:	e066      	b.n	8002cb8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	091b      	lsrs	r3, r3, #4
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d009      	beq.n	8002c0a <HAL_I2C_EV_IRQHandler+0x22e>
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	0a5b      	lsrs	r3, r3, #9
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d003      	beq.n	8002c0a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 fff4 	bl	8003bf0 <I2C_Slave_STOPF>
 8002c08:	e056      	b.n	8002cb8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002c0a:	7bbb      	ldrb	r3, [r7, #14]
 8002c0c:	2b21      	cmp	r3, #33	; 0x21
 8002c0e:	d002      	beq.n	8002c16 <HAL_I2C_EV_IRQHandler+0x23a>
 8002c10:	7bbb      	ldrb	r3, [r7, #14]
 8002c12:	2b29      	cmp	r3, #41	; 0x29
 8002c14:	d125      	bne.n	8002c62 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	09db      	lsrs	r3, r3, #7
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00f      	beq.n	8002c42 <HAL_I2C_EV_IRQHandler+0x266>
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	0a9b      	lsrs	r3, r3, #10
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d009      	beq.n	8002c42 <HAL_I2C_EV_IRQHandler+0x266>
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	089b      	lsrs	r3, r3, #2
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d103      	bne.n	8002c42 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 fed0 	bl	80039e0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c40:	e039      	b.n	8002cb6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	089b      	lsrs	r3, r3, #2
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d033      	beq.n	8002cb6 <HAL_I2C_EV_IRQHandler+0x2da>
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	0a5b      	lsrs	r3, r3, #9
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d02d      	beq.n	8002cb6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 fefd 	bl	8003a5a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c60:	e029      	b.n	8002cb6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	099b      	lsrs	r3, r3, #6
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00f      	beq.n	8002c8e <HAL_I2C_EV_IRQHandler+0x2b2>
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	0a9b      	lsrs	r3, r3, #10
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d009      	beq.n	8002c8e <HAL_I2C_EV_IRQHandler+0x2b2>
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	089b      	lsrs	r3, r3, #2
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d103      	bne.n	8002c8e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 ff08 	bl	8003a9c <I2C_SlaveReceive_RXNE>
 8002c8c:	e014      	b.n	8002cb8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	089b      	lsrs	r3, r3, #2
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00e      	beq.n	8002cb8 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	0a5b      	lsrs	r3, r3, #9
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d008      	beq.n	8002cb8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 ff36 	bl	8003b18 <I2C_SlaveReceive_BTF>
 8002cac:	e004      	b.n	8002cb8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002cae:	bf00      	nop
 8002cb0:	e002      	b.n	8002cb8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002cb2:	bf00      	nop
 8002cb4:	e000      	b.n	8002cb8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002cb6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002cb8:	3720      	adds	r7, #32
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b08a      	sub	sp, #40	; 0x28
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	695b      	ldr	r3, [r3, #20]
 8002ccc:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ce0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002ce2:	6a3b      	ldr	r3, [r7, #32]
 8002ce4:	0a1b      	lsrs	r3, r3, #8
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00e      	beq.n	8002d0c <HAL_I2C_ER_IRQHandler+0x4e>
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	0a1b      	lsrs	r3, r3, #8
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d008      	beq.n	8002d0c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfc:	f043 0301 	orr.w	r3, r3, #1
 8002d00:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002d0a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002d0c:	6a3b      	ldr	r3, [r7, #32]
 8002d0e:	0a5b      	lsrs	r3, r3, #9
 8002d10:	f003 0301 	and.w	r3, r3, #1
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00e      	beq.n	8002d36 <HAL_I2C_ER_IRQHandler+0x78>
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	0a1b      	lsrs	r3, r3, #8
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d008      	beq.n	8002d36 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d26:	f043 0302 	orr.w	r3, r3, #2
 8002d2a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002d34:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002d36:	6a3b      	ldr	r3, [r7, #32]
 8002d38:	0a9b      	lsrs	r3, r3, #10
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d03f      	beq.n	8002dc2 <HAL_I2C_ER_IRQHandler+0x104>
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	0a1b      	lsrs	r3, r3, #8
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d039      	beq.n	8002dc2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8002d4e:	7efb      	ldrb	r3, [r7, #27]
 8002d50:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d60:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d66:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002d68:	7ebb      	ldrb	r3, [r7, #26]
 8002d6a:	2b20      	cmp	r3, #32
 8002d6c:	d112      	bne.n	8002d94 <HAL_I2C_ER_IRQHandler+0xd6>
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d10f      	bne.n	8002d94 <HAL_I2C_ER_IRQHandler+0xd6>
 8002d74:	7cfb      	ldrb	r3, [r7, #19]
 8002d76:	2b21      	cmp	r3, #33	; 0x21
 8002d78:	d008      	beq.n	8002d8c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002d7a:	7cfb      	ldrb	r3, [r7, #19]
 8002d7c:	2b29      	cmp	r3, #41	; 0x29
 8002d7e:	d005      	beq.n	8002d8c <HAL_I2C_ER_IRQHandler+0xce>
 8002d80:	7cfb      	ldrb	r3, [r7, #19]
 8002d82:	2b28      	cmp	r3, #40	; 0x28
 8002d84:	d106      	bne.n	8002d94 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2b21      	cmp	r3, #33	; 0x21
 8002d8a:	d103      	bne.n	8002d94 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f001 f85f 	bl	8003e50 <I2C_Slave_AF>
 8002d92:	e016      	b.n	8002dc2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d9c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da0:	f043 0304 	orr.w	r3, r3, #4
 8002da4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002da6:	7efb      	ldrb	r3, [r7, #27]
 8002da8:	2b10      	cmp	r3, #16
 8002daa:	d002      	beq.n	8002db2 <HAL_I2C_ER_IRQHandler+0xf4>
 8002dac:	7efb      	ldrb	r3, [r7, #27]
 8002dae:	2b40      	cmp	r3, #64	; 0x40
 8002db0:	d107      	bne.n	8002dc2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dc0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002dc2:	6a3b      	ldr	r3, [r7, #32]
 8002dc4:	0adb      	lsrs	r3, r3, #11
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00e      	beq.n	8002dec <HAL_I2C_ER_IRQHandler+0x12e>
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	0a1b      	lsrs	r3, r3, #8
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d008      	beq.n	8002dec <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ddc:	f043 0308 	orr.w	r3, r3, #8
 8002de0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002dea:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d008      	beq.n	8002e04 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df8:	431a      	orrs	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f001 f896 	bl	8003f30 <I2C_ITError>
  }
}
 8002e04:	bf00      	nop
 8002e06:	3728      	adds	r7, #40	; 0x28
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002e50:	bf00      	nop
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	460b      	mov	r3, r1
 8002e66:	70fb      	strb	r3, [r7, #3]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eea:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ef2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d150      	bne.n	8002fa4 <I2C_MasterTransmit_TXE+0xc8>
 8002f02:	7bfb      	ldrb	r3, [r7, #15]
 8002f04:	2b21      	cmp	r3, #33	; 0x21
 8002f06:	d14d      	bne.n	8002fa4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	2b08      	cmp	r3, #8
 8002f0c:	d01d      	beq.n	8002f4a <I2C_MasterTransmit_TXE+0x6e>
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	2b20      	cmp	r3, #32
 8002f12:	d01a      	beq.n	8002f4a <I2C_MasterTransmit_TXE+0x6e>
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f1a:	d016      	beq.n	8002f4a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	685a      	ldr	r2, [r3, #4]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f2a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2211      	movs	r2, #17
 8002f30:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2220      	movs	r2, #32
 8002f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f7ff ff62 	bl	8002e0c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002f48:	e060      	b.n	800300c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	685a      	ldr	r2, [r3, #4]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f58:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f68:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2220      	movs	r2, #32
 8002f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	2b40      	cmp	r3, #64	; 0x40
 8002f82:	d107      	bne.n	8002f94 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f7ff ff7d 	bl	8002e8c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002f92:	e03b      	b.n	800300c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f7ff ff35 	bl	8002e0c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002fa2:	e033      	b.n	800300c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002fa4:	7bfb      	ldrb	r3, [r7, #15]
 8002fa6:	2b21      	cmp	r3, #33	; 0x21
 8002fa8:	d005      	beq.n	8002fb6 <I2C_MasterTransmit_TXE+0xda>
 8002faa:	7bbb      	ldrb	r3, [r7, #14]
 8002fac:	2b40      	cmp	r3, #64	; 0x40
 8002fae:	d12d      	bne.n	800300c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002fb0:	7bfb      	ldrb	r3, [r7, #15]
 8002fb2:	2b22      	cmp	r3, #34	; 0x22
 8002fb4:	d12a      	bne.n	800300c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d108      	bne.n	8002fd2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	685a      	ldr	r2, [r3, #4]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fce:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002fd0:	e01c      	b.n	800300c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b40      	cmp	r3, #64	; 0x40
 8002fdc:	d103      	bne.n	8002fe6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 f88e 	bl	8003100 <I2C_MemoryTransmit_TXE_BTF>
}
 8002fe4:	e012      	b.n	800300c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fea:	781a      	ldrb	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff6:	1c5a      	adds	r2, r3, #1
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003000:	b29b      	uxth	r3, r3
 8003002:	3b01      	subs	r3, #1
 8003004:	b29a      	uxth	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800300a:	e7ff      	b.n	800300c <I2C_MasterTransmit_TXE+0x130>
 800300c:	bf00      	nop
 800300e:	3710      	adds	r7, #16
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003020:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b21      	cmp	r3, #33	; 0x21
 800302c:	d164      	bne.n	80030f8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003032:	b29b      	uxth	r3, r3
 8003034:	2b00      	cmp	r3, #0
 8003036:	d012      	beq.n	800305e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303c:	781a      	ldrb	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003048:	1c5a      	adds	r2, r3, #1
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003052:	b29b      	uxth	r3, r3
 8003054:	3b01      	subs	r3, #1
 8003056:	b29a      	uxth	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800305c:	e04c      	b.n	80030f8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2b08      	cmp	r3, #8
 8003062:	d01d      	beq.n	80030a0 <I2C_MasterTransmit_BTF+0x8c>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2b20      	cmp	r3, #32
 8003068:	d01a      	beq.n	80030a0 <I2C_MasterTransmit_BTF+0x8c>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003070:	d016      	beq.n	80030a0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	685a      	ldr	r2, [r3, #4]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003080:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2211      	movs	r2, #17
 8003086:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2220      	movs	r2, #32
 8003094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f7ff feb7 	bl	8002e0c <HAL_I2C_MasterTxCpltCallback>
}
 800309e:	e02b      	b.n	80030f8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	685a      	ldr	r2, [r3, #4]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80030ae:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030be:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2220      	movs	r2, #32
 80030ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b40      	cmp	r3, #64	; 0x40
 80030d8:	d107      	bne.n	80030ea <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f7ff fed2 	bl	8002e8c <HAL_I2C_MemTxCpltCallback>
}
 80030e8:	e006      	b.n	80030f8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f7ff fe8a 	bl	8002e0c <HAL_I2C_MasterTxCpltCallback>
}
 80030f8:	bf00      	nop
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800310e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003114:	2b00      	cmp	r3, #0
 8003116:	d11d      	bne.n	8003154 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800311c:	2b01      	cmp	r3, #1
 800311e:	d10b      	bne.n	8003138 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003124:	b2da      	uxtb	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003130:	1c9a      	adds	r2, r3, #2
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003136:	e073      	b.n	8003220 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800313c:	b29b      	uxth	r3, r3
 800313e:	121b      	asrs	r3, r3, #8
 8003140:	b2da      	uxtb	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800314c:	1c5a      	adds	r2, r3, #1
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003152:	e065      	b.n	8003220 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003158:	2b01      	cmp	r3, #1
 800315a:	d10b      	bne.n	8003174 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003160:	b2da      	uxtb	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800316c:	1c5a      	adds	r2, r3, #1
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003172:	e055      	b.n	8003220 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003178:	2b02      	cmp	r3, #2
 800317a:	d151      	bne.n	8003220 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800317c:	7bfb      	ldrb	r3, [r7, #15]
 800317e:	2b22      	cmp	r3, #34	; 0x22
 8003180:	d10d      	bne.n	800319e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003190:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003196:	1c5a      	adds	r2, r3, #1
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800319c:	e040      	b.n	8003220 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d015      	beq.n	80031d4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80031a8:	7bfb      	ldrb	r3, [r7, #15]
 80031aa:	2b21      	cmp	r3, #33	; 0x21
 80031ac:	d112      	bne.n	80031d4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b2:	781a      	ldrb	r2, [r3, #0]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031be:	1c5a      	adds	r2, r3, #1
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	3b01      	subs	r3, #1
 80031cc:	b29a      	uxth	r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80031d2:	e025      	b.n	8003220 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d8:	b29b      	uxth	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d120      	bne.n	8003220 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80031de:	7bfb      	ldrb	r3, [r7, #15]
 80031e0:	2b21      	cmp	r3, #33	; 0x21
 80031e2:	d11d      	bne.n	8003220 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	685a      	ldr	r2, [r3, #4]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80031f2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003202:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2220      	movs	r2, #32
 800320e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f7ff fe36 	bl	8002e8c <HAL_I2C_MemTxCpltCallback>
}
 8003220:	bf00      	nop
 8003222:	3710      	adds	r7, #16
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003236:	b2db      	uxtb	r3, r3
 8003238:	2b22      	cmp	r3, #34	; 0x22
 800323a:	f040 80a2 	bne.w	8003382 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003242:	b29b      	uxth	r3, r3
 8003244:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2b03      	cmp	r3, #3
 800324a:	d921      	bls.n	8003290 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	691a      	ldr	r2, [r3, #16]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003256:	b2d2      	uxtb	r2, r2
 8003258:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325e:	1c5a      	adds	r2, r3, #1
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003268:	b29b      	uxth	r3, r3
 800326a:	3b01      	subs	r3, #1
 800326c:	b29a      	uxth	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003276:	b29b      	uxth	r3, r3
 8003278:	2b03      	cmp	r3, #3
 800327a:	f040 8082 	bne.w	8003382 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800328c:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800328e:	e078      	b.n	8003382 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003294:	2b02      	cmp	r3, #2
 8003296:	d074      	beq.n	8003382 <I2C_MasterReceive_RXNE+0x15a>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d002      	beq.n	80032a4 <I2C_MasterReceive_RXNE+0x7c>
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d16e      	bne.n	8003382 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f001 fb5b 	bl	8004960 <I2C_WaitOnSTOPRequestThroughIT>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d142      	bne.n	8003336 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032be:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80032ce:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	691a      	ldr	r2, [r3, #16]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032da:	b2d2      	uxtb	r2, r2
 80032dc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e2:	1c5a      	adds	r2, r3, #1
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	3b01      	subs	r3, #1
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2220      	movs	r2, #32
 80032fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b40      	cmp	r3, #64	; 0x40
 8003308:	d10a      	bne.n	8003320 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f7ff fdc1 	bl	8002ea0 <HAL_I2C_MemRxCpltCallback>
}
 800331e:	e030      	b.n	8003382 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2212      	movs	r2, #18
 800332c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f7ff fd76 	bl	8002e20 <HAL_I2C_MasterRxCpltCallback>
}
 8003334:	e025      	b.n	8003382 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	685a      	ldr	r2, [r3, #4]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003344:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	691a      	ldr	r2, [r3, #16]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003350:	b2d2      	uxtb	r2, r2
 8003352:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003358:	1c5a      	adds	r2, r3, #1
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003362:	b29b      	uxth	r3, r3
 8003364:	3b01      	subs	r3, #1
 8003366:	b29a      	uxth	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2220      	movs	r2, #32
 8003370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f7ff fd99 	bl	8002eb4 <HAL_I2C_ErrorCallback>
}
 8003382:	bf00      	nop
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b084      	sub	sp, #16
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003396:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800339c:	b29b      	uxth	r3, r3
 800339e:	2b04      	cmp	r3, #4
 80033a0:	d11b      	bne.n	80033da <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	685a      	ldr	r2, [r3, #4]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033b0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	691a      	ldr	r2, [r3, #16]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033bc:	b2d2      	uxtb	r2, r2
 80033be:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c4:	1c5a      	adds	r2, r3, #1
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	3b01      	subs	r3, #1
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80033d8:	e0bd      	b.n	8003556 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033de:	b29b      	uxth	r3, r3
 80033e0:	2b03      	cmp	r3, #3
 80033e2:	d129      	bne.n	8003438 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	685a      	ldr	r2, [r3, #4]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033f2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2b04      	cmp	r3, #4
 80033f8:	d00a      	beq.n	8003410 <I2C_MasterReceive_BTF+0x86>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d007      	beq.n	8003410 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800340e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	691a      	ldr	r2, [r3, #16]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341a:	b2d2      	uxtb	r2, r2
 800341c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003422:	1c5a      	adds	r2, r3, #1
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800342c:	b29b      	uxth	r3, r3
 800342e:	3b01      	subs	r3, #1
 8003430:	b29a      	uxth	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003436:	e08e      	b.n	8003556 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800343c:	b29b      	uxth	r3, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d176      	bne.n	8003530 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d002      	beq.n	800344e <I2C_MasterReceive_BTF+0xc4>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2b10      	cmp	r3, #16
 800344c:	d108      	bne.n	8003460 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800345c:	601a      	str	r2, [r3, #0]
 800345e:	e019      	b.n	8003494 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2b04      	cmp	r3, #4
 8003464:	d002      	beq.n	800346c <I2C_MasterReceive_BTF+0xe2>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2b02      	cmp	r3, #2
 800346a:	d108      	bne.n	800347e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	e00a      	b.n	8003494 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2b10      	cmp	r3, #16
 8003482:	d007      	beq.n	8003494 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003492:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	691a      	ldr	r2, [r3, #16]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349e:	b2d2      	uxtb	r2, r2
 80034a0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a6:	1c5a      	adds	r2, r3, #1
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	3b01      	subs	r3, #1
 80034b4:	b29a      	uxth	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	691a      	ldr	r2, [r3, #16]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c4:	b2d2      	uxtb	r2, r2
 80034c6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034cc:	1c5a      	adds	r2, r3, #1
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	3b01      	subs	r3, #1
 80034da:	b29a      	uxth	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	685a      	ldr	r2, [r3, #4]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80034ee:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2220      	movs	r2, #32
 80034f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2b40      	cmp	r3, #64	; 0x40
 8003502:	d10a      	bne.n	800351a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f7ff fcc4 	bl	8002ea0 <HAL_I2C_MemRxCpltCallback>
}
 8003518:	e01d      	b.n	8003556 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2212      	movs	r2, #18
 8003526:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f7ff fc79 	bl	8002e20 <HAL_I2C_MasterRxCpltCallback>
}
 800352e:	e012      	b.n	8003556 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	691a      	ldr	r2, [r3, #16]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353a:	b2d2      	uxtb	r2, r2
 800353c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003542:	1c5a      	adds	r2, r3, #1
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800354c:	b29b      	uxth	r3, r3
 800354e:	3b01      	subs	r3, #1
 8003550:	b29a      	uxth	r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003556:	bf00      	nop
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800355e:	b480      	push	{r7}
 8003560:	b083      	sub	sp, #12
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b40      	cmp	r3, #64	; 0x40
 8003570:	d117      	bne.n	80035a2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003576:	2b00      	cmp	r3, #0
 8003578:	d109      	bne.n	800358e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800357e:	b2db      	uxtb	r3, r3
 8003580:	461a      	mov	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800358a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800358c:	e067      	b.n	800365e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003592:	b2db      	uxtb	r3, r3
 8003594:	f043 0301 	orr.w	r3, r3, #1
 8003598:	b2da      	uxtb	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	611a      	str	r2, [r3, #16]
}
 80035a0:	e05d      	b.n	800365e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035aa:	d133      	bne.n	8003614 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	2b21      	cmp	r3, #33	; 0x21
 80035b6:	d109      	bne.n	80035cc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	461a      	mov	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80035c8:	611a      	str	r2, [r3, #16]
 80035ca:	e008      	b.n	80035de <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	f043 0301 	orr.w	r3, r3, #1
 80035d6:	b2da      	uxtb	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d004      	beq.n	80035f0 <I2C_Master_SB+0x92>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d108      	bne.n	8003602 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d032      	beq.n	800365e <I2C_Master_SB+0x100>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d02d      	beq.n	800365e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	685a      	ldr	r2, [r3, #4]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003610:	605a      	str	r2, [r3, #4]
}
 8003612:	e024      	b.n	800365e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003618:	2b00      	cmp	r3, #0
 800361a:	d10e      	bne.n	800363a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003620:	b29b      	uxth	r3, r3
 8003622:	11db      	asrs	r3, r3, #7
 8003624:	b2db      	uxtb	r3, r3
 8003626:	f003 0306 	and.w	r3, r3, #6
 800362a:	b2db      	uxtb	r3, r3
 800362c:	f063 030f 	orn	r3, r3, #15
 8003630:	b2da      	uxtb	r2, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	611a      	str	r2, [r3, #16]
}
 8003638:	e011      	b.n	800365e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800363e:	2b01      	cmp	r3, #1
 8003640:	d10d      	bne.n	800365e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003646:	b29b      	uxth	r3, r3
 8003648:	11db      	asrs	r3, r3, #7
 800364a:	b2db      	uxtb	r3, r3
 800364c:	f003 0306 	and.w	r3, r3, #6
 8003650:	b2db      	uxtb	r3, r3
 8003652:	f063 030e 	orn	r3, r3, #14
 8003656:	b2da      	uxtb	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	611a      	str	r2, [r3, #16]
}
 800365e:	bf00      	nop
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr

0800366a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800366a:	b480      	push	{r7}
 800366c:	b083      	sub	sp, #12
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003676:	b2da      	uxtb	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003682:	2b00      	cmp	r3, #0
 8003684:	d004      	beq.n	8003690 <I2C_Master_ADD10+0x26>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800368a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800368c:	2b00      	cmp	r3, #0
 800368e:	d108      	bne.n	80036a2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00c      	beq.n	80036b2 <I2C_Master_ADD10+0x48>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d007      	beq.n	80036b2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036b0:	605a      	str	r2, [r3, #4]
  }
}
 80036b2:	bf00      	nop
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr

080036be <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80036be:	b480      	push	{r7}
 80036c0:	b091      	sub	sp, #68	; 0x44
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036da:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	2b22      	cmp	r3, #34	; 0x22
 80036e6:	f040 8169 	bne.w	80039bc <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d10f      	bne.n	8003712 <I2C_Master_ADDR+0x54>
 80036f2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80036f6:	2b40      	cmp	r3, #64	; 0x40
 80036f8:	d10b      	bne.n	8003712 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036fa:	2300      	movs	r3, #0
 80036fc:	633b      	str	r3, [r7, #48]	; 0x30
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	695b      	ldr	r3, [r3, #20]
 8003704:	633b      	str	r3, [r7, #48]	; 0x30
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	633b      	str	r3, [r7, #48]	; 0x30
 800370e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003710:	e160      	b.n	80039d4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003716:	2b00      	cmp	r3, #0
 8003718:	d11d      	bne.n	8003756 <I2C_Master_ADDR+0x98>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003722:	d118      	bne.n	8003756 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003724:	2300      	movs	r3, #0
 8003726:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003738:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003748:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800374e:	1c5a      	adds	r2, r3, #1
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	651a      	str	r2, [r3, #80]	; 0x50
 8003754:	e13e      	b.n	80039d4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800375a:	b29b      	uxth	r3, r3
 800375c:	2b00      	cmp	r3, #0
 800375e:	d113      	bne.n	8003788 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003760:	2300      	movs	r3, #0
 8003762:	62bb      	str	r3, [r7, #40]	; 0x28
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	62bb      	str	r3, [r7, #40]	; 0x28
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	62bb      	str	r3, [r7, #40]	; 0x28
 8003774:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003784:	601a      	str	r2, [r3, #0]
 8003786:	e115      	b.n	80039b4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800378c:	b29b      	uxth	r3, r3
 800378e:	2b01      	cmp	r3, #1
 8003790:	f040 808a 	bne.w	80038a8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003796:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800379a:	d137      	bne.n	800380c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037aa:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037ba:	d113      	bne.n	80037e4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037ca:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037cc:	2300      	movs	r3, #0
 80037ce:	627b      	str	r3, [r7, #36]	; 0x24
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	627b      	str	r3, [r7, #36]	; 0x24
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	627b      	str	r3, [r7, #36]	; 0x24
 80037e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e2:	e0e7      	b.n	80039b4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037e4:	2300      	movs	r3, #0
 80037e6:	623b      	str	r3, [r7, #32]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	623b      	str	r3, [r7, #32]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	623b      	str	r3, [r7, #32]
 80037f8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003808:	601a      	str	r2, [r3, #0]
 800380a:	e0d3      	b.n	80039b4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800380c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800380e:	2b08      	cmp	r3, #8
 8003810:	d02e      	beq.n	8003870 <I2C_Master_ADDR+0x1b2>
 8003812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003814:	2b20      	cmp	r3, #32
 8003816:	d02b      	beq.n	8003870 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800381a:	2b12      	cmp	r3, #18
 800381c:	d102      	bne.n	8003824 <I2C_Master_ADDR+0x166>
 800381e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003820:	2b01      	cmp	r3, #1
 8003822:	d125      	bne.n	8003870 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003826:	2b04      	cmp	r3, #4
 8003828:	d00e      	beq.n	8003848 <I2C_Master_ADDR+0x18a>
 800382a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800382c:	2b02      	cmp	r3, #2
 800382e:	d00b      	beq.n	8003848 <I2C_Master_ADDR+0x18a>
 8003830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003832:	2b10      	cmp	r3, #16
 8003834:	d008      	beq.n	8003848 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003844:	601a      	str	r2, [r3, #0]
 8003846:	e007      	b.n	8003858 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003856:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003858:	2300      	movs	r3, #0
 800385a:	61fb      	str	r3, [r7, #28]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	61fb      	str	r3, [r7, #28]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	61fb      	str	r3, [r7, #28]
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	e0a1      	b.n	80039b4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800387e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003880:	2300      	movs	r3, #0
 8003882:	61bb      	str	r3, [r7, #24]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	61bb      	str	r3, [r7, #24]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	699b      	ldr	r3, [r3, #24]
 8003892:	61bb      	str	r3, [r7, #24]
 8003894:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038a4:	601a      	str	r2, [r3, #0]
 80038a6:	e085      	b.n	80039b4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d14d      	bne.n	800394e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80038b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b4:	2b04      	cmp	r3, #4
 80038b6:	d016      	beq.n	80038e6 <I2C_Master_ADDR+0x228>
 80038b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d013      	beq.n	80038e6 <I2C_Master_ADDR+0x228>
 80038be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038c0:	2b10      	cmp	r3, #16
 80038c2:	d010      	beq.n	80038e6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038d2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038e2:	601a      	str	r2, [r3, #0]
 80038e4:	e007      	b.n	80038f6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038f4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003900:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003904:	d117      	bne.n	8003936 <I2C_Master_ADDR+0x278>
 8003906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003908:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800390c:	d00b      	beq.n	8003926 <I2C_Master_ADDR+0x268>
 800390e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003910:	2b01      	cmp	r3, #1
 8003912:	d008      	beq.n	8003926 <I2C_Master_ADDR+0x268>
 8003914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003916:	2b08      	cmp	r3, #8
 8003918:	d005      	beq.n	8003926 <I2C_Master_ADDR+0x268>
 800391a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800391c:	2b10      	cmp	r3, #16
 800391e:	d002      	beq.n	8003926 <I2C_Master_ADDR+0x268>
 8003920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003922:	2b20      	cmp	r3, #32
 8003924:	d107      	bne.n	8003936 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	685a      	ldr	r2, [r3, #4]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003934:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003936:	2300      	movs	r3, #0
 8003938:	617b      	str	r3, [r7, #20]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	617b      	str	r3, [r7, #20]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	617b      	str	r3, [r7, #20]
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	e032      	b.n	80039b4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800395c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003968:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800396c:	d117      	bne.n	800399e <I2C_Master_ADDR+0x2e0>
 800396e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003970:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003974:	d00b      	beq.n	800398e <I2C_Master_ADDR+0x2d0>
 8003976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003978:	2b01      	cmp	r3, #1
 800397a:	d008      	beq.n	800398e <I2C_Master_ADDR+0x2d0>
 800397c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800397e:	2b08      	cmp	r3, #8
 8003980:	d005      	beq.n	800398e <I2C_Master_ADDR+0x2d0>
 8003982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003984:	2b10      	cmp	r3, #16
 8003986:	d002      	beq.n	800398e <I2C_Master_ADDR+0x2d0>
 8003988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800398a:	2b20      	cmp	r3, #32
 800398c:	d107      	bne.n	800399e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	685a      	ldr	r2, [r3, #4]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800399c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800399e:	2300      	movs	r3, #0
 80039a0:	613b      	str	r3, [r7, #16]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	695b      	ldr	r3, [r3, #20]
 80039a8:	613b      	str	r3, [r7, #16]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	613b      	str	r3, [r7, #16]
 80039b2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80039ba:	e00b      	b.n	80039d4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039bc:	2300      	movs	r3, #0
 80039be:	60fb      	str	r3, [r7, #12]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	60fb      	str	r3, [r7, #12]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	60fb      	str	r3, [r7, #12]
 80039d0:	68fb      	ldr	r3, [r7, #12]
}
 80039d2:	e7ff      	b.n	80039d4 <I2C_Master_ADDR+0x316>
 80039d4:	bf00      	nop
 80039d6:	3744      	adds	r7, #68	; 0x44
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ee:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d02b      	beq.n	8003a52 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fe:	781a      	ldrb	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0a:	1c5a      	adds	r2, r3, #1
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	3b01      	subs	r3, #1
 8003a18:	b29a      	uxth	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d114      	bne.n	8003a52 <I2C_SlaveTransmit_TXE+0x72>
 8003a28:	7bfb      	ldrb	r3, [r7, #15]
 8003a2a:	2b29      	cmp	r3, #41	; 0x29
 8003a2c:	d111      	bne.n	8003a52 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	685a      	ldr	r2, [r3, #4]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a3c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2221      	movs	r2, #33	; 0x21
 8003a42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2228      	movs	r2, #40	; 0x28
 8003a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f7ff f9f1 	bl	8002e34 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003a52:	bf00      	nop
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b083      	sub	sp, #12
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d011      	beq.n	8003a90 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a70:	781a      	ldrb	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7c:	1c5a      	adds	r2, r3, #1
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	b29a      	uxth	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aaa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d02c      	beq.n	8003b10 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	691a      	ldr	r2, [r3, #16]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac0:	b2d2      	uxtb	r2, r2
 8003ac2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac8:	1c5a      	adds	r2, r3, #1
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d114      	bne.n	8003b10 <I2C_SlaveReceive_RXNE+0x74>
 8003ae6:	7bfb      	ldrb	r3, [r7, #15]
 8003ae8:	2b2a      	cmp	r3, #42	; 0x2a
 8003aea:	d111      	bne.n	8003b10 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	685a      	ldr	r2, [r3, #4]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003afa:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2222      	movs	r2, #34	; 0x22
 8003b00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2228      	movs	r2, #40	; 0x28
 8003b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f7ff f99c 	bl	8002e48 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003b10:	bf00      	nop
 8003b12:	3710      	adds	r7, #16
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d012      	beq.n	8003b50 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	691a      	ldr	r2, [r3, #16]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b34:	b2d2      	uxtb	r2, r2
 8003b36:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3c:	1c5a      	adds	r2, r3, #1
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003b66:	2300      	movs	r3, #0
 8003b68:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003b76:	2b28      	cmp	r3, #40	; 0x28
 8003b78:	d127      	bne.n	8003bca <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	685a      	ldr	r2, [r3, #4]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b88:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	089b      	lsrs	r3, r3, #2
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d101      	bne.n	8003b9a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003b96:	2301      	movs	r3, #1
 8003b98:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	09db      	lsrs	r3, r3, #7
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d103      	bne.n	8003bae <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	81bb      	strh	r3, [r7, #12]
 8003bac:	e002      	b.n	8003bb4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003bbc:	89ba      	ldrh	r2, [r7, #12]
 8003bbe:	7bfb      	ldrb	r3, [r7, #15]
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f7ff f94a 	bl	8002e5c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003bc8:	e00e      	b.n	8003be8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bca:	2300      	movs	r3, #0
 8003bcc:	60bb      	str	r3, [r7, #8]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	60bb      	str	r3, [r7, #8]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	60bb      	str	r3, [r7, #8]
 8003bde:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003be8:	bf00      	nop
 8003bea:	3710      	adds	r7, #16
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bfe:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	685a      	ldr	r2, [r3, #4]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c0e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003c10:	2300      	movs	r3, #0
 8003c12:	60bb      	str	r3, [r7, #8]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	60bb      	str	r3, [r7, #8]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f042 0201 	orr.w	r2, r2, #1
 8003c2a:	601a      	str	r2, [r3, #0]
 8003c2c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c3c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c4c:	d172      	bne.n	8003d34 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003c4e:	7bfb      	ldrb	r3, [r7, #15]
 8003c50:	2b22      	cmp	r3, #34	; 0x22
 8003c52:	d002      	beq.n	8003c5a <I2C_Slave_STOPF+0x6a>
 8003c54:	7bfb      	ldrb	r3, [r7, #15]
 8003c56:	2b2a      	cmp	r3, #42	; 0x2a
 8003c58:	d135      	bne.n	8003cc6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d005      	beq.n	8003c7e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c76:	f043 0204 	orr.w	r2, r3, #4
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	685a      	ldr	r2, [r3, #4]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c8c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7fd ff58 	bl	8001b48 <HAL_DMA_GetState>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d049      	beq.n	8003d32 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca2:	4a69      	ldr	r2, [pc, #420]	; (8003e48 <I2C_Slave_STOPF+0x258>)
 8003ca4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7fd ff2a 	bl	8001b04 <HAL_DMA_Abort_IT>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d03d      	beq.n	8003d32 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003cc0:	4610      	mov	r0, r2
 8003cc2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003cc4:	e035      	b.n	8003d32 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	b29a      	uxth	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d005      	beq.n	8003cea <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce2:	f043 0204 	orr.w	r2, r3, #4
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	685a      	ldr	r2, [r3, #4]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cf8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7fd ff22 	bl	8001b48 <HAL_DMA_GetState>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d014      	beq.n	8003d34 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d0e:	4a4e      	ldr	r2, [pc, #312]	; (8003e48 <I2C_Slave_STOPF+0x258>)
 8003d10:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7fd fef4 	bl	8001b04 <HAL_DMA_Abort_IT>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d008      	beq.n	8003d34 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003d2c:	4610      	mov	r0, r2
 8003d2e:	4798      	blx	r3
 8003d30:	e000      	b.n	8003d34 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003d32:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d03e      	beq.n	8003dbc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	695b      	ldr	r3, [r3, #20]
 8003d44:	f003 0304 	and.w	r3, r3, #4
 8003d48:	2b04      	cmp	r3, #4
 8003d4a:	d112      	bne.n	8003d72 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	691a      	ldr	r2, [r3, #16]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d56:	b2d2      	uxtb	r2, r2
 8003d58:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5e:	1c5a      	adds	r2, r3, #1
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	695b      	ldr	r3, [r3, #20]
 8003d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d7c:	2b40      	cmp	r3, #64	; 0x40
 8003d7e:	d112      	bne.n	8003da6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	691a      	ldr	r2, [r3, #16]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8a:	b2d2      	uxtb	r2, r2
 8003d8c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d92:	1c5a      	adds	r2, r3, #1
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	b29a      	uxth	r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d005      	beq.n	8003dbc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db4:	f043 0204 	orr.w	r2, r3, #4
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d003      	beq.n	8003dcc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f000 f8b3 	bl	8003f30 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003dca:	e039      	b.n	8003e40 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003dcc:	7bfb      	ldrb	r3, [r7, #15]
 8003dce:	2b2a      	cmp	r3, #42	; 0x2a
 8003dd0:	d109      	bne.n	8003de6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2228      	movs	r2, #40	; 0x28
 8003ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f7ff f831 	bl	8002e48 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b28      	cmp	r3, #40	; 0x28
 8003df0:	d111      	bne.n	8003e16 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a15      	ldr	r2, [pc, #84]	; (8003e4c <I2C_Slave_STOPF+0x25c>)
 8003df6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2220      	movs	r2, #32
 8003e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f7ff f832 	bl	8002e78 <HAL_I2C_ListenCpltCallback>
}
 8003e14:	e014      	b.n	8003e40 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1a:	2b22      	cmp	r3, #34	; 0x22
 8003e1c:	d002      	beq.n	8003e24 <I2C_Slave_STOPF+0x234>
 8003e1e:	7bfb      	ldrb	r3, [r7, #15]
 8003e20:	2b22      	cmp	r3, #34	; 0x22
 8003e22:	d10d      	bne.n	8003e40 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2220      	movs	r2, #32
 8003e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f7ff f804 	bl	8002e48 <HAL_I2C_SlaveRxCpltCallback>
}
 8003e40:	bf00      	nop
 8003e42:	3710      	adds	r7, #16
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	08004561 	.word	0x08004561
 8003e4c:	ffff0000 	.word	0xffff0000

08003e50 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e5e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e64:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	2b08      	cmp	r3, #8
 8003e6a:	d002      	beq.n	8003e72 <I2C_Slave_AF+0x22>
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	2b20      	cmp	r3, #32
 8003e70:	d129      	bne.n	8003ec6 <I2C_Slave_AF+0x76>
 8003e72:	7bfb      	ldrb	r3, [r7, #15]
 8003e74:	2b28      	cmp	r3, #40	; 0x28
 8003e76:	d126      	bne.n	8003ec6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a2c      	ldr	r2, [pc, #176]	; (8003f2c <I2C_Slave_AF+0xdc>)
 8003e7c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	685a      	ldr	r2, [r3, #4]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e8c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e96:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ea6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2220      	movs	r2, #32
 8003eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f7fe ffda 	bl	8002e78 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003ec4:	e02e      	b.n	8003f24 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003ec6:	7bfb      	ldrb	r3, [r7, #15]
 8003ec8:	2b21      	cmp	r3, #33	; 0x21
 8003eca:	d126      	bne.n	8003f1a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a17      	ldr	r2, [pc, #92]	; (8003f2c <I2C_Slave_AF+0xdc>)
 8003ed0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2221      	movs	r2, #33	; 0x21
 8003ed6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2220      	movs	r2, #32
 8003edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	685a      	ldr	r2, [r3, #4]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ef6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f00:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f10:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f7fe ff8e 	bl	8002e34 <HAL_I2C_SlaveTxCpltCallback>
}
 8003f18:	e004      	b.n	8003f24 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f22:	615a      	str	r2, [r3, #20]
}
 8003f24:	bf00      	nop
 8003f26:	3710      	adds	r7, #16
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	ffff0000 	.word	0xffff0000

08003f30 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f3e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f46:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003f48:	7bbb      	ldrb	r3, [r7, #14]
 8003f4a:	2b10      	cmp	r3, #16
 8003f4c:	d002      	beq.n	8003f54 <I2C_ITError+0x24>
 8003f4e:	7bbb      	ldrb	r3, [r7, #14]
 8003f50:	2b40      	cmp	r3, #64	; 0x40
 8003f52:	d10a      	bne.n	8003f6a <I2C_ITError+0x3a>
 8003f54:	7bfb      	ldrb	r3, [r7, #15]
 8003f56:	2b22      	cmp	r3, #34	; 0x22
 8003f58:	d107      	bne.n	8003f6a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f68:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003f6a:	7bfb      	ldrb	r3, [r7, #15]
 8003f6c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003f70:	2b28      	cmp	r3, #40	; 0x28
 8003f72:	d107      	bne.n	8003f84 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2228      	movs	r2, #40	; 0x28
 8003f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003f82:	e015      	b.n	8003fb0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f92:	d00a      	beq.n	8003faa <I2C_ITError+0x7a>
 8003f94:	7bfb      	ldrb	r3, [r7, #15]
 8003f96:	2b60      	cmp	r3, #96	; 0x60
 8003f98:	d007      	beq.n	8003faa <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2220      	movs	r2, #32
 8003f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fbe:	d162      	bne.n	8004086 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	685a      	ldr	r2, [r3, #4]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fce:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d020      	beq.n	8004020 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fe2:	4a6a      	ldr	r2, [pc, #424]	; (800418c <I2C_ITError+0x25c>)
 8003fe4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fd fd8a 	bl	8001b04 <HAL_DMA_Abort_IT>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f000 8089 	beq.w	800410a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f022 0201 	bic.w	r2, r2, #1
 8004006:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2220      	movs	r2, #32
 800400c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004014:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800401a:	4610      	mov	r0, r2
 800401c:	4798      	blx	r3
 800401e:	e074      	b.n	800410a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004024:	4a59      	ldr	r2, [pc, #356]	; (800418c <I2C_ITError+0x25c>)
 8004026:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402c:	4618      	mov	r0, r3
 800402e:	f7fd fd69 	bl	8001b04 <HAL_DMA_Abort_IT>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d068      	beq.n	800410a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004042:	2b40      	cmp	r3, #64	; 0x40
 8004044:	d10b      	bne.n	800405e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	691a      	ldr	r2, [r3, #16]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004050:	b2d2      	uxtb	r2, r2
 8004052:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004058:	1c5a      	adds	r2, r3, #1
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f022 0201 	bic.w	r2, r2, #1
 800406c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2220      	movs	r2, #32
 8004072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004080:	4610      	mov	r0, r2
 8004082:	4798      	blx	r3
 8004084:	e041      	b.n	800410a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b60      	cmp	r3, #96	; 0x60
 8004090:	d125      	bne.n	80040de <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2220      	movs	r2, #32
 8004096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040aa:	2b40      	cmp	r3, #64	; 0x40
 80040ac:	d10b      	bne.n	80040c6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	691a      	ldr	r2, [r3, #16]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b8:	b2d2      	uxtb	r2, r2
 80040ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c0:	1c5a      	adds	r2, r3, #1
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 0201 	bic.w	r2, r2, #1
 80040d4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f7fe fef6 	bl	8002ec8 <HAL_I2C_AbortCpltCallback>
 80040dc:	e015      	b.n	800410a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	695b      	ldr	r3, [r3, #20]
 80040e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e8:	2b40      	cmp	r3, #64	; 0x40
 80040ea:	d10b      	bne.n	8004104 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	691a      	ldr	r2, [r3, #16]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f6:	b2d2      	uxtb	r2, r2
 80040f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fe:	1c5a      	adds	r2, r3, #1
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f7fe fed5 	bl	8002eb4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	2b00      	cmp	r3, #0
 8004118:	d10e      	bne.n	8004138 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004120:	2b00      	cmp	r3, #0
 8004122:	d109      	bne.n	8004138 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800412a:	2b00      	cmp	r3, #0
 800412c:	d104      	bne.n	8004138 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004134:	2b00      	cmp	r3, #0
 8004136:	d007      	beq.n	8004148 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	685a      	ldr	r2, [r3, #4]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004146:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800414e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004154:	f003 0304 	and.w	r3, r3, #4
 8004158:	2b04      	cmp	r3, #4
 800415a:	d113      	bne.n	8004184 <I2C_ITError+0x254>
 800415c:	7bfb      	ldrb	r3, [r7, #15]
 800415e:	2b28      	cmp	r3, #40	; 0x28
 8004160:	d110      	bne.n	8004184 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a0a      	ldr	r2, [pc, #40]	; (8004190 <I2C_ITError+0x260>)
 8004166:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2220      	movs	r2, #32
 8004172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f7fe fe7a 	bl	8002e78 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004184:	bf00      	nop
 8004186:	3710      	adds	r7, #16
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	08004561 	.word	0x08004561
 8004190:	ffff0000 	.word	0xffff0000

08004194 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b088      	sub	sp, #32
 8004198:	af02      	add	r7, sp, #8
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	607a      	str	r2, [r7, #4]
 800419e:	603b      	str	r3, [r7, #0]
 80041a0:	460b      	mov	r3, r1
 80041a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	2b08      	cmp	r3, #8
 80041ae:	d006      	beq.n	80041be <I2C_MasterRequestWrite+0x2a>
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d003      	beq.n	80041be <I2C_MasterRequestWrite+0x2a>
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041bc:	d108      	bne.n	80041d0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041cc:	601a      	str	r2, [r3, #0]
 80041ce:	e00b      	b.n	80041e8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d4:	2b12      	cmp	r3, #18
 80041d6:	d107      	bne.n	80041e8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	9300      	str	r3, [sp, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041f4:	68f8      	ldr	r0, [r7, #12]
 80041f6:	f000 fa5b 	bl	80046b0 <I2C_WaitOnFlagUntilTimeout>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00d      	beq.n	800421c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800420a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800420e:	d103      	bne.n	8004218 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004216:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e035      	b.n	8004288 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004224:	d108      	bne.n	8004238 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004226:	897b      	ldrh	r3, [r7, #10]
 8004228:	b2db      	uxtb	r3, r3
 800422a:	461a      	mov	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004234:	611a      	str	r2, [r3, #16]
 8004236:	e01b      	b.n	8004270 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004238:	897b      	ldrh	r3, [r7, #10]
 800423a:	11db      	asrs	r3, r3, #7
 800423c:	b2db      	uxtb	r3, r3
 800423e:	f003 0306 	and.w	r3, r3, #6
 8004242:	b2db      	uxtb	r3, r3
 8004244:	f063 030f 	orn	r3, r3, #15
 8004248:	b2da      	uxtb	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	490e      	ldr	r1, [pc, #56]	; (8004290 <I2C_MasterRequestWrite+0xfc>)
 8004256:	68f8      	ldr	r0, [r7, #12]
 8004258:	f000 fa81 	bl	800475e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e010      	b.n	8004288 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004266:	897b      	ldrh	r3, [r7, #10]
 8004268:	b2da      	uxtb	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	4907      	ldr	r1, [pc, #28]	; (8004294 <I2C_MasterRequestWrite+0x100>)
 8004276:	68f8      	ldr	r0, [r7, #12]
 8004278:	f000 fa71 	bl	800475e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d001      	beq.n	8004286 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e000      	b.n	8004288 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	3718      	adds	r7, #24
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	00010008 	.word	0x00010008
 8004294:	00010002 	.word	0x00010002

08004298 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b088      	sub	sp, #32
 800429c:	af02      	add	r7, sp, #8
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	607a      	str	r2, [r7, #4]
 80042a2:	603b      	str	r3, [r7, #0]
 80042a4:	460b      	mov	r3, r1
 80042a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ac:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042bc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	2b08      	cmp	r3, #8
 80042c2:	d006      	beq.n	80042d2 <I2C_MasterRequestRead+0x3a>
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d003      	beq.n	80042d2 <I2C_MasterRequestRead+0x3a>
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042d0:	d108      	bne.n	80042e4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042e0:	601a      	str	r2, [r3, #0]
 80042e2:	e00b      	b.n	80042fc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e8:	2b11      	cmp	r3, #17
 80042ea:	d107      	bne.n	80042fc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	9300      	str	r3, [sp, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004308:	68f8      	ldr	r0, [r7, #12]
 800430a:	f000 f9d1 	bl	80046b0 <I2C_WaitOnFlagUntilTimeout>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d00d      	beq.n	8004330 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800431e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004322:	d103      	bne.n	800432c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f44f 7200 	mov.w	r2, #512	; 0x200
 800432a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e079      	b.n	8004424 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004338:	d108      	bne.n	800434c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800433a:	897b      	ldrh	r3, [r7, #10]
 800433c:	b2db      	uxtb	r3, r3
 800433e:	f043 0301 	orr.w	r3, r3, #1
 8004342:	b2da      	uxtb	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	611a      	str	r2, [r3, #16]
 800434a:	e05f      	b.n	800440c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800434c:	897b      	ldrh	r3, [r7, #10]
 800434e:	11db      	asrs	r3, r3, #7
 8004350:	b2db      	uxtb	r3, r3
 8004352:	f003 0306 	and.w	r3, r3, #6
 8004356:	b2db      	uxtb	r3, r3
 8004358:	f063 030f 	orn	r3, r3, #15
 800435c:	b2da      	uxtb	r2, r3
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	4930      	ldr	r1, [pc, #192]	; (800442c <I2C_MasterRequestRead+0x194>)
 800436a:	68f8      	ldr	r0, [r7, #12]
 800436c:	f000 f9f7 	bl	800475e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d001      	beq.n	800437a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e054      	b.n	8004424 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800437a:	897b      	ldrh	r3, [r7, #10]
 800437c:	b2da      	uxtb	r2, r3
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	4929      	ldr	r1, [pc, #164]	; (8004430 <I2C_MasterRequestRead+0x198>)
 800438a:	68f8      	ldr	r0, [r7, #12]
 800438c:	f000 f9e7 	bl	800475e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d001      	beq.n	800439a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e044      	b.n	8004424 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800439a:	2300      	movs	r3, #0
 800439c:	613b      	str	r3, [r7, #16]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	695b      	ldr	r3, [r3, #20]
 80043a4:	613b      	str	r3, [r7, #16]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	613b      	str	r3, [r7, #16]
 80043ae:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043be:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	9300      	str	r3, [sp, #0]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80043cc:	68f8      	ldr	r0, [r7, #12]
 80043ce:	f000 f96f 	bl	80046b0 <I2C_WaitOnFlagUntilTimeout>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00d      	beq.n	80043f4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043e6:	d103      	bne.n	80043f0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043ee:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e017      	b.n	8004424 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80043f4:	897b      	ldrh	r3, [r7, #10]
 80043f6:	11db      	asrs	r3, r3, #7
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	f003 0306 	and.w	r3, r3, #6
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	f063 030e 	orn	r3, r3, #14
 8004404:	b2da      	uxtb	r2, r3
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	4907      	ldr	r1, [pc, #28]	; (8004430 <I2C_MasterRequestRead+0x198>)
 8004412:	68f8      	ldr	r0, [r7, #12]
 8004414:	f000 f9a3 	bl	800475e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d001      	beq.n	8004422 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e000      	b.n	8004424 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	3718      	adds	r7, #24
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	00010008 	.word	0x00010008
 8004430:	00010002 	.word	0x00010002

08004434 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b088      	sub	sp, #32
 8004438:	af02      	add	r7, sp, #8
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	4608      	mov	r0, r1
 800443e:	4611      	mov	r1, r2
 8004440:	461a      	mov	r2, r3
 8004442:	4603      	mov	r3, r0
 8004444:	817b      	strh	r3, [r7, #10]
 8004446:	460b      	mov	r3, r1
 8004448:	813b      	strh	r3, [r7, #8]
 800444a:	4613      	mov	r3, r2
 800444c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800445c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800445e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004460:	9300      	str	r3, [sp, #0]
 8004462:	6a3b      	ldr	r3, [r7, #32]
 8004464:	2200      	movs	r2, #0
 8004466:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f000 f920 	bl	80046b0 <I2C_WaitOnFlagUntilTimeout>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00d      	beq.n	8004492 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004480:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004484:	d103      	bne.n	800448e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f44f 7200 	mov.w	r2, #512	; 0x200
 800448c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e05f      	b.n	8004552 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004492:	897b      	ldrh	r3, [r7, #10]
 8004494:	b2db      	uxtb	r3, r3
 8004496:	461a      	mov	r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80044a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a4:	6a3a      	ldr	r2, [r7, #32]
 80044a6:	492d      	ldr	r1, [pc, #180]	; (800455c <I2C_RequestMemoryWrite+0x128>)
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f000 f958 	bl	800475e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d001      	beq.n	80044b8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e04c      	b.n	8004552 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044b8:	2300      	movs	r3, #0
 80044ba:	617b      	str	r3, [r7, #20]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	695b      	ldr	r3, [r3, #20]
 80044c2:	617b      	str	r3, [r7, #20]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	617b      	str	r3, [r7, #20]
 80044cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044d0:	6a39      	ldr	r1, [r7, #32]
 80044d2:	68f8      	ldr	r0, [r7, #12]
 80044d4:	f000 f9c2 	bl	800485c <I2C_WaitOnTXEFlagUntilTimeout>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00d      	beq.n	80044fa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e2:	2b04      	cmp	r3, #4
 80044e4:	d107      	bne.n	80044f6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e02b      	b.n	8004552 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044fa:	88fb      	ldrh	r3, [r7, #6]
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d105      	bne.n	800450c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004500:	893b      	ldrh	r3, [r7, #8]
 8004502:	b2da      	uxtb	r2, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	611a      	str	r2, [r3, #16]
 800450a:	e021      	b.n	8004550 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800450c:	893b      	ldrh	r3, [r7, #8]
 800450e:	0a1b      	lsrs	r3, r3, #8
 8004510:	b29b      	uxth	r3, r3
 8004512:	b2da      	uxtb	r2, r3
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800451a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800451c:	6a39      	ldr	r1, [r7, #32]
 800451e:	68f8      	ldr	r0, [r7, #12]
 8004520:	f000 f99c 	bl	800485c <I2C_WaitOnTXEFlagUntilTimeout>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00d      	beq.n	8004546 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452e:	2b04      	cmp	r3, #4
 8004530:	d107      	bne.n	8004542 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004540:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e005      	b.n	8004552 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004546:	893b      	ldrh	r3, [r7, #8]
 8004548:	b2da      	uxtb	r2, r3
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3718      	adds	r7, #24
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	00010002 	.word	0x00010002

08004560 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004568:	2300      	movs	r3, #0
 800456a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004570:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004578:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800457a:	4b4b      	ldr	r3, [pc, #300]	; (80046a8 <I2C_DMAAbort+0x148>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	08db      	lsrs	r3, r3, #3
 8004580:	4a4a      	ldr	r2, [pc, #296]	; (80046ac <I2C_DMAAbort+0x14c>)
 8004582:	fba2 2303 	umull	r2, r3, r2, r3
 8004586:	0a1a      	lsrs	r2, r3, #8
 8004588:	4613      	mov	r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4413      	add	r3, r2
 800458e:	00da      	lsls	r2, r3, #3
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d106      	bne.n	80045a8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459e:	f043 0220 	orr.w	r2, r3, #32
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80045a6:	e00a      	b.n	80045be <I2C_DMAAbort+0x5e>
    }
    count--;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	3b01      	subs	r3, #1
 80045ac:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045bc:	d0ea      	beq.n	8004594 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d003      	beq.n	80045ce <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ca:	2200      	movs	r2, #0
 80045cc:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d003      	beq.n	80045de <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045da:	2200      	movs	r2, #0
 80045dc:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045ec:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	2200      	movs	r2, #0
 80045f2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d003      	beq.n	8004604 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004600:	2200      	movs	r2, #0
 8004602:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004608:	2b00      	cmp	r3, #0
 800460a:	d003      	beq.n	8004614 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004610:	2200      	movs	r2, #0
 8004612:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f022 0201 	bic.w	r2, r2, #1
 8004622:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800462a:	b2db      	uxtb	r3, r3
 800462c:	2b60      	cmp	r3, #96	; 0x60
 800462e:	d10e      	bne.n	800464e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	2220      	movs	r2, #32
 8004634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	2200      	movs	r2, #0
 8004644:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004646:	6978      	ldr	r0, [r7, #20]
 8004648:	f7fe fc3e 	bl	8002ec8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800464c:	e027      	b.n	800469e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800464e:	7cfb      	ldrb	r3, [r7, #19]
 8004650:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004654:	2b28      	cmp	r3, #40	; 0x28
 8004656:	d117      	bne.n	8004688 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f042 0201 	orr.w	r2, r2, #1
 8004666:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004676:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	2200      	movs	r2, #0
 800467c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	2228      	movs	r2, #40	; 0x28
 8004682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004686:	e007      	b.n	8004698 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	2220      	movs	r2, #32
 800468c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004698:	6978      	ldr	r0, [r7, #20]
 800469a:	f7fe fc0b 	bl	8002eb4 <HAL_I2C_ErrorCallback>
}
 800469e:	bf00      	nop
 80046a0:	3718      	adds	r7, #24
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	2000001c 	.word	0x2000001c
 80046ac:	14f8b589 	.word	0x14f8b589

080046b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	603b      	str	r3, [r7, #0]
 80046bc:	4613      	mov	r3, r2
 80046be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046c0:	e025      	b.n	800470e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c8:	d021      	beq.n	800470e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046ca:	f7fd f899 	bl	8001800 <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	683a      	ldr	r2, [r7, #0]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d302      	bcc.n	80046e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d116      	bne.n	800470e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2220      	movs	r2, #32
 80046ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fa:	f043 0220 	orr.w	r2, r3, #32
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e023      	b.n	8004756 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	0c1b      	lsrs	r3, r3, #16
 8004712:	b2db      	uxtb	r3, r3
 8004714:	2b01      	cmp	r3, #1
 8004716:	d10d      	bne.n	8004734 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	43da      	mvns	r2, r3
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	4013      	ands	r3, r2
 8004724:	b29b      	uxth	r3, r3
 8004726:	2b00      	cmp	r3, #0
 8004728:	bf0c      	ite	eq
 800472a:	2301      	moveq	r3, #1
 800472c:	2300      	movne	r3, #0
 800472e:	b2db      	uxtb	r3, r3
 8004730:	461a      	mov	r2, r3
 8004732:	e00c      	b.n	800474e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	43da      	mvns	r2, r3
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	4013      	ands	r3, r2
 8004740:	b29b      	uxth	r3, r3
 8004742:	2b00      	cmp	r3, #0
 8004744:	bf0c      	ite	eq
 8004746:	2301      	moveq	r3, #1
 8004748:	2300      	movne	r3, #0
 800474a:	b2db      	uxtb	r3, r3
 800474c:	461a      	mov	r2, r3
 800474e:	79fb      	ldrb	r3, [r7, #7]
 8004750:	429a      	cmp	r2, r3
 8004752:	d0b6      	beq.n	80046c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3710      	adds	r7, #16
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800475e:	b580      	push	{r7, lr}
 8004760:	b084      	sub	sp, #16
 8004762:	af00      	add	r7, sp, #0
 8004764:	60f8      	str	r0, [r7, #12]
 8004766:	60b9      	str	r1, [r7, #8]
 8004768:	607a      	str	r2, [r7, #4]
 800476a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800476c:	e051      	b.n	8004812 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	695b      	ldr	r3, [r3, #20]
 8004774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004778:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800477c:	d123      	bne.n	80047c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800478c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004796:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2200      	movs	r2, #0
 800479c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2220      	movs	r2, #32
 80047a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b2:	f043 0204 	orr.w	r2, r3, #4
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e046      	b.n	8004854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047cc:	d021      	beq.n	8004812 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ce:	f7fd f817 	bl	8001800 <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d302      	bcc.n	80047e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d116      	bne.n	8004812 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2220      	movs	r2, #32
 80047ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fe:	f043 0220 	orr.w	r2, r3, #32
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e020      	b.n	8004854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	0c1b      	lsrs	r3, r3, #16
 8004816:	b2db      	uxtb	r3, r3
 8004818:	2b01      	cmp	r3, #1
 800481a:	d10c      	bne.n	8004836 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	43da      	mvns	r2, r3
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	4013      	ands	r3, r2
 8004828:	b29b      	uxth	r3, r3
 800482a:	2b00      	cmp	r3, #0
 800482c:	bf14      	ite	ne
 800482e:	2301      	movne	r3, #1
 8004830:	2300      	moveq	r3, #0
 8004832:	b2db      	uxtb	r3, r3
 8004834:	e00b      	b.n	800484e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	43da      	mvns	r2, r3
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	4013      	ands	r3, r2
 8004842:	b29b      	uxth	r3, r3
 8004844:	2b00      	cmp	r3, #0
 8004846:	bf14      	ite	ne
 8004848:	2301      	movne	r3, #1
 800484a:	2300      	moveq	r3, #0
 800484c:	b2db      	uxtb	r3, r3
 800484e:	2b00      	cmp	r3, #0
 8004850:	d18d      	bne.n	800476e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004852:	2300      	movs	r3, #0
}
 8004854:	4618      	mov	r0, r3
 8004856:	3710      	adds	r7, #16
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004868:	e02d      	b.n	80048c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800486a:	68f8      	ldr	r0, [r7, #12]
 800486c:	f000 f900 	bl	8004a70 <I2C_IsAcknowledgeFailed>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d001      	beq.n	800487a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e02d      	b.n	80048d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004880:	d021      	beq.n	80048c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004882:	f7fc ffbd 	bl	8001800 <HAL_GetTick>
 8004886:	4602      	mov	r2, r0
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	68ba      	ldr	r2, [r7, #8]
 800488e:	429a      	cmp	r2, r3
 8004890:	d302      	bcc.n	8004898 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d116      	bne.n	80048c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2200      	movs	r2, #0
 800489c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2220      	movs	r2, #32
 80048a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	f043 0220 	orr.w	r2, r3, #32
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e007      	b.n	80048d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	695b      	ldr	r3, [r3, #20]
 80048cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048d0:	2b80      	cmp	r3, #128	; 0x80
 80048d2:	d1ca      	bne.n	800486a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3710      	adds	r7, #16
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}

080048de <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048de:	b580      	push	{r7, lr}
 80048e0:	b084      	sub	sp, #16
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	60f8      	str	r0, [r7, #12]
 80048e6:	60b9      	str	r1, [r7, #8]
 80048e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80048ea:	e02d      	b.n	8004948 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	f000 f8bf 	bl	8004a70 <I2C_IsAcknowledgeFailed>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d001      	beq.n	80048fc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e02d      	b.n	8004958 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004902:	d021      	beq.n	8004948 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004904:	f7fc ff7c 	bl	8001800 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	68ba      	ldr	r2, [r7, #8]
 8004910:	429a      	cmp	r2, r3
 8004912:	d302      	bcc.n	800491a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d116      	bne.n	8004948 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2200      	movs	r2, #0
 800491e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2220      	movs	r2, #32
 8004924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004934:	f043 0220 	orr.w	r2, r3, #32
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e007      	b.n	8004958 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	f003 0304 	and.w	r3, r3, #4
 8004952:	2b04      	cmp	r3, #4
 8004954:	d1ca      	bne.n	80048ec <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004960:	b480      	push	{r7}
 8004962:	b085      	sub	sp, #20
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004968:	2300      	movs	r3, #0
 800496a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800496c:	4b13      	ldr	r3, [pc, #76]	; (80049bc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	08db      	lsrs	r3, r3, #3
 8004972:	4a13      	ldr	r2, [pc, #76]	; (80049c0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004974:	fba2 2303 	umull	r2, r3, r2, r3
 8004978:	0a1a      	lsrs	r2, r3, #8
 800497a:	4613      	mov	r3, r2
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	4413      	add	r3, r2
 8004980:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	3b01      	subs	r3, #1
 8004986:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d107      	bne.n	800499e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004992:	f043 0220 	orr.w	r2, r3, #32
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e008      	b.n	80049b0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049ac:	d0e9      	beq.n	8004982 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3714      	adds	r7, #20
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr
 80049bc:	2000001c 	.word	0x2000001c
 80049c0:	14f8b589 	.word	0x14f8b589

080049c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80049d0:	e042      	b.n	8004a58 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	695b      	ldr	r3, [r3, #20]
 80049d8:	f003 0310 	and.w	r3, r3, #16
 80049dc:	2b10      	cmp	r3, #16
 80049de:	d119      	bne.n	8004a14 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f06f 0210 	mvn.w	r2, #16
 80049e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2200      	movs	r2, #0
 80049ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2220      	movs	r2, #32
 80049f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e029      	b.n	8004a68 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a14:	f7fc fef4 	bl	8001800 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	68ba      	ldr	r2, [r7, #8]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d302      	bcc.n	8004a2a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d116      	bne.n	8004a58 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2220      	movs	r2, #32
 8004a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a44:	f043 0220 	orr.w	r2, r3, #32
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e007      	b.n	8004a68 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a62:	2b40      	cmp	r3, #64	; 0x40
 8004a64:	d1b5      	bne.n	80049d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004a66:	2300      	movs	r3, #0
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3710      	adds	r7, #16
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a86:	d11b      	bne.n	8004ac0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a90:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2220      	movs	r2, #32
 8004a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aac:	f043 0204 	orr.w	r2, r3, #4
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e000      	b.n	8004ac2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	370c      	adds	r7, #12
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr

08004ace <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004ace:	b480      	push	{r7}
 8004ad0:	b083      	sub	sp, #12
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ada:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004ade:	d103      	bne.n	8004ae8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004ae6:	e007      	b.n	8004af8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aec:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004af0:	d102      	bne.n	8004af8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2208      	movs	r2, #8
 8004af6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b086      	sub	sp, #24
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d101      	bne.n	8004b16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e264      	b.n	8004fe0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d075      	beq.n	8004c0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b22:	4ba3      	ldr	r3, [pc, #652]	; (8004db0 <HAL_RCC_OscConfig+0x2ac>)
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f003 030c 	and.w	r3, r3, #12
 8004b2a:	2b04      	cmp	r3, #4
 8004b2c:	d00c      	beq.n	8004b48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b2e:	4ba0      	ldr	r3, [pc, #640]	; (8004db0 <HAL_RCC_OscConfig+0x2ac>)
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b36:	2b08      	cmp	r3, #8
 8004b38:	d112      	bne.n	8004b60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b3a:	4b9d      	ldr	r3, [pc, #628]	; (8004db0 <HAL_RCC_OscConfig+0x2ac>)
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b46:	d10b      	bne.n	8004b60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b48:	4b99      	ldr	r3, [pc, #612]	; (8004db0 <HAL_RCC_OscConfig+0x2ac>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d05b      	beq.n	8004c0c <HAL_RCC_OscConfig+0x108>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d157      	bne.n	8004c0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e23f      	b.n	8004fe0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b68:	d106      	bne.n	8004b78 <HAL_RCC_OscConfig+0x74>
 8004b6a:	4b91      	ldr	r3, [pc, #580]	; (8004db0 <HAL_RCC_OscConfig+0x2ac>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a90      	ldr	r2, [pc, #576]	; (8004db0 <HAL_RCC_OscConfig+0x2ac>)
 8004b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b74:	6013      	str	r3, [r2, #0]
 8004b76:	e01d      	b.n	8004bb4 <HAL_RCC_OscConfig+0xb0>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b80:	d10c      	bne.n	8004b9c <HAL_RCC_OscConfig+0x98>
 8004b82:	4b8b      	ldr	r3, [pc, #556]	; (8004db0 <HAL_RCC_OscConfig+0x2ac>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a8a      	ldr	r2, [pc, #552]	; (8004db0 <HAL_RCC_OscConfig+0x2ac>)
 8004b88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b8c:	6013      	str	r3, [r2, #0]
 8004b8e:	4b88      	ldr	r3, [pc, #544]	; (8004db0 <HAL_RCC_OscConfig+0x2ac>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a87      	ldr	r2, [pc, #540]	; (8004db0 <HAL_RCC_OscConfig+0x2ac>)
 8004b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b98:	6013      	str	r3, [r2, #0]
 8004b9a:	e00b      	b.n	8004bb4 <HAL_RCC_OscConfig+0xb0>
 8004b9c:	4b84      	ldr	r3, [pc, #528]	; (8004db0 <HAL_RCC_OscConfig+0x2ac>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a83      	ldr	r2, [pc, #524]	; (8004db0 <HAL_RCC_OscConfig+0x2ac>)
 8004ba2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ba6:	6013      	str	r3, [r2, #0]
 8004ba8:	4b81      	ldr	r3, [pc, #516]	; (8004db0 <HAL_RCC_OscConfig+0x2ac>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a80      	ldr	r2, [pc, #512]	; (8004db0 <HAL_RCC_OscConfig+0x2ac>)
 8004bae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d013      	beq.n	8004be4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bbc:	f7fc fe20 	bl	8001800 <HAL_GetTick>
 8004bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bc2:	e008      	b.n	8004bd6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bc4:	f7fc fe1c 	bl	8001800 <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	2b64      	cmp	r3, #100	; 0x64
 8004bd0:	d901      	bls.n	8004bd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e204      	b.n	8004fe0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bd6:	4b76      	ldr	r3, [pc, #472]	; (8004db0 <HAL_RCC_OscConfig+0x2ac>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d0f0      	beq.n	8004bc4 <HAL_RCC_OscConfig+0xc0>
 8004be2:	e014      	b.n	8004c0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004be4:	f7fc fe0c 	bl	8001800 <HAL_GetTick>
 8004be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bea:	e008      	b.n	8004bfe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bec:	f7fc fe08 	bl	8001800 <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	2b64      	cmp	r3, #100	; 0x64
 8004bf8:	d901      	bls.n	8004bfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e1f0      	b.n	8004fe0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bfe:	4b6c      	ldr	r3, [pc, #432]	; (8004db0 <HAL_RCC_OscConfig+0x2ac>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1f0      	bne.n	8004bec <HAL_RCC_OscConfig+0xe8>
 8004c0a:	e000      	b.n	8004c0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0302 	and.w	r3, r3, #2
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d063      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c1a:	4b65      	ldr	r3, [pc, #404]	; (8004db0 <HAL_RCC_OscConfig+0x2ac>)
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f003 030c 	and.w	r3, r3, #12
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00b      	beq.n	8004c3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c26:	4b62      	ldr	r3, [pc, #392]	; (8004db0 <HAL_RCC_OscConfig+0x2ac>)
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c2e:	2b08      	cmp	r3, #8
 8004c30:	d11c      	bne.n	8004c6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c32:	4b5f      	ldr	r3, [pc, #380]	; (8004db0 <HAL_RCC_OscConfig+0x2ac>)
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d116      	bne.n	8004c6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c3e:	4b5c      	ldr	r3, [pc, #368]	; (8004db0 <HAL_RCC_OscConfig+0x2ac>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0302 	and.w	r3, r3, #2
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d005      	beq.n	8004c56 <HAL_RCC_OscConfig+0x152>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d001      	beq.n	8004c56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e1c4      	b.n	8004fe0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c56:	4b56      	ldr	r3, [pc, #344]	; (8004db0 <HAL_RCC_OscConfig+0x2ac>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	00db      	lsls	r3, r3, #3
 8004c64:	4952      	ldr	r1, [pc, #328]	; (8004db0 <HAL_RCC_OscConfig+0x2ac>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c6a:	e03a      	b.n	8004ce2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d020      	beq.n	8004cb6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c74:	4b4f      	ldr	r3, [pc, #316]	; (8004db4 <HAL_RCC_OscConfig+0x2b0>)
 8004c76:	2201      	movs	r2, #1
 8004c78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c7a:	f7fc fdc1 	bl	8001800 <HAL_GetTick>
 8004c7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c80:	e008      	b.n	8004c94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c82:	f7fc fdbd 	bl	8001800 <HAL_GetTick>
 8004c86:	4602      	mov	r2, r0
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	d901      	bls.n	8004c94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e1a5      	b.n	8004fe0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c94:	4b46      	ldr	r3, [pc, #280]	; (8004db0 <HAL_RCC_OscConfig+0x2ac>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0302 	and.w	r3, r3, #2
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d0f0      	beq.n	8004c82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ca0:	4b43      	ldr	r3, [pc, #268]	; (8004db0 <HAL_RCC_OscConfig+0x2ac>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	00db      	lsls	r3, r3, #3
 8004cae:	4940      	ldr	r1, [pc, #256]	; (8004db0 <HAL_RCC_OscConfig+0x2ac>)
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	600b      	str	r3, [r1, #0]
 8004cb4:	e015      	b.n	8004ce2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cb6:	4b3f      	ldr	r3, [pc, #252]	; (8004db4 <HAL_RCC_OscConfig+0x2b0>)
 8004cb8:	2200      	movs	r2, #0
 8004cba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cbc:	f7fc fda0 	bl	8001800 <HAL_GetTick>
 8004cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cc2:	e008      	b.n	8004cd6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cc4:	f7fc fd9c 	bl	8001800 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d901      	bls.n	8004cd6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e184      	b.n	8004fe0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cd6:	4b36      	ldr	r3, [pc, #216]	; (8004db0 <HAL_RCC_OscConfig+0x2ac>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0302 	and.w	r3, r3, #2
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d1f0      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0308 	and.w	r3, r3, #8
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d030      	beq.n	8004d50 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	695b      	ldr	r3, [r3, #20]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d016      	beq.n	8004d24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cf6:	4b30      	ldr	r3, [pc, #192]	; (8004db8 <HAL_RCC_OscConfig+0x2b4>)
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cfc:	f7fc fd80 	bl	8001800 <HAL_GetTick>
 8004d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d02:	e008      	b.n	8004d16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d04:	f7fc fd7c 	bl	8001800 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d901      	bls.n	8004d16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e164      	b.n	8004fe0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d16:	4b26      	ldr	r3, [pc, #152]	; (8004db0 <HAL_RCC_OscConfig+0x2ac>)
 8004d18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d1a:	f003 0302 	and.w	r3, r3, #2
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d0f0      	beq.n	8004d04 <HAL_RCC_OscConfig+0x200>
 8004d22:	e015      	b.n	8004d50 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d24:	4b24      	ldr	r3, [pc, #144]	; (8004db8 <HAL_RCC_OscConfig+0x2b4>)
 8004d26:	2200      	movs	r2, #0
 8004d28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d2a:	f7fc fd69 	bl	8001800 <HAL_GetTick>
 8004d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d30:	e008      	b.n	8004d44 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d32:	f7fc fd65 	bl	8001800 <HAL_GetTick>
 8004d36:	4602      	mov	r2, r0
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d901      	bls.n	8004d44 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e14d      	b.n	8004fe0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d44:	4b1a      	ldr	r3, [pc, #104]	; (8004db0 <HAL_RCC_OscConfig+0x2ac>)
 8004d46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d48:	f003 0302 	and.w	r3, r3, #2
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d1f0      	bne.n	8004d32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0304 	and.w	r3, r3, #4
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	f000 80a0 	beq.w	8004e9e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d62:	4b13      	ldr	r3, [pc, #76]	; (8004db0 <HAL_RCC_OscConfig+0x2ac>)
 8004d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d10f      	bne.n	8004d8e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d6e:	2300      	movs	r3, #0
 8004d70:	60bb      	str	r3, [r7, #8]
 8004d72:	4b0f      	ldr	r3, [pc, #60]	; (8004db0 <HAL_RCC_OscConfig+0x2ac>)
 8004d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d76:	4a0e      	ldr	r2, [pc, #56]	; (8004db0 <HAL_RCC_OscConfig+0x2ac>)
 8004d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8004d7e:	4b0c      	ldr	r3, [pc, #48]	; (8004db0 <HAL_RCC_OscConfig+0x2ac>)
 8004d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d86:	60bb      	str	r3, [r7, #8]
 8004d88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d8e:	4b0b      	ldr	r3, [pc, #44]	; (8004dbc <HAL_RCC_OscConfig+0x2b8>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d121      	bne.n	8004dde <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d9a:	4b08      	ldr	r3, [pc, #32]	; (8004dbc <HAL_RCC_OscConfig+0x2b8>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a07      	ldr	r2, [pc, #28]	; (8004dbc <HAL_RCC_OscConfig+0x2b8>)
 8004da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004da4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004da6:	f7fc fd2b 	bl	8001800 <HAL_GetTick>
 8004daa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dac:	e011      	b.n	8004dd2 <HAL_RCC_OscConfig+0x2ce>
 8004dae:	bf00      	nop
 8004db0:	40023800 	.word	0x40023800
 8004db4:	42470000 	.word	0x42470000
 8004db8:	42470e80 	.word	0x42470e80
 8004dbc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dc0:	f7fc fd1e 	bl	8001800 <HAL_GetTick>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d901      	bls.n	8004dd2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e106      	b.n	8004fe0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dd2:	4b85      	ldr	r3, [pc, #532]	; (8004fe8 <HAL_RCC_OscConfig+0x4e4>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d0f0      	beq.n	8004dc0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d106      	bne.n	8004df4 <HAL_RCC_OscConfig+0x2f0>
 8004de6:	4b81      	ldr	r3, [pc, #516]	; (8004fec <HAL_RCC_OscConfig+0x4e8>)
 8004de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dea:	4a80      	ldr	r2, [pc, #512]	; (8004fec <HAL_RCC_OscConfig+0x4e8>)
 8004dec:	f043 0301 	orr.w	r3, r3, #1
 8004df0:	6713      	str	r3, [r2, #112]	; 0x70
 8004df2:	e01c      	b.n	8004e2e <HAL_RCC_OscConfig+0x32a>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	2b05      	cmp	r3, #5
 8004dfa:	d10c      	bne.n	8004e16 <HAL_RCC_OscConfig+0x312>
 8004dfc:	4b7b      	ldr	r3, [pc, #492]	; (8004fec <HAL_RCC_OscConfig+0x4e8>)
 8004dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e00:	4a7a      	ldr	r2, [pc, #488]	; (8004fec <HAL_RCC_OscConfig+0x4e8>)
 8004e02:	f043 0304 	orr.w	r3, r3, #4
 8004e06:	6713      	str	r3, [r2, #112]	; 0x70
 8004e08:	4b78      	ldr	r3, [pc, #480]	; (8004fec <HAL_RCC_OscConfig+0x4e8>)
 8004e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e0c:	4a77      	ldr	r2, [pc, #476]	; (8004fec <HAL_RCC_OscConfig+0x4e8>)
 8004e0e:	f043 0301 	orr.w	r3, r3, #1
 8004e12:	6713      	str	r3, [r2, #112]	; 0x70
 8004e14:	e00b      	b.n	8004e2e <HAL_RCC_OscConfig+0x32a>
 8004e16:	4b75      	ldr	r3, [pc, #468]	; (8004fec <HAL_RCC_OscConfig+0x4e8>)
 8004e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e1a:	4a74      	ldr	r2, [pc, #464]	; (8004fec <HAL_RCC_OscConfig+0x4e8>)
 8004e1c:	f023 0301 	bic.w	r3, r3, #1
 8004e20:	6713      	str	r3, [r2, #112]	; 0x70
 8004e22:	4b72      	ldr	r3, [pc, #456]	; (8004fec <HAL_RCC_OscConfig+0x4e8>)
 8004e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e26:	4a71      	ldr	r2, [pc, #452]	; (8004fec <HAL_RCC_OscConfig+0x4e8>)
 8004e28:	f023 0304 	bic.w	r3, r3, #4
 8004e2c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d015      	beq.n	8004e62 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e36:	f7fc fce3 	bl	8001800 <HAL_GetTick>
 8004e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e3c:	e00a      	b.n	8004e54 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e3e:	f7fc fcdf 	bl	8001800 <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d901      	bls.n	8004e54 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e0c5      	b.n	8004fe0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e54:	4b65      	ldr	r3, [pc, #404]	; (8004fec <HAL_RCC_OscConfig+0x4e8>)
 8004e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e58:	f003 0302 	and.w	r3, r3, #2
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d0ee      	beq.n	8004e3e <HAL_RCC_OscConfig+0x33a>
 8004e60:	e014      	b.n	8004e8c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e62:	f7fc fccd 	bl	8001800 <HAL_GetTick>
 8004e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e68:	e00a      	b.n	8004e80 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e6a:	f7fc fcc9 	bl	8001800 <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d901      	bls.n	8004e80 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e0af      	b.n	8004fe0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e80:	4b5a      	ldr	r3, [pc, #360]	; (8004fec <HAL_RCC_OscConfig+0x4e8>)
 8004e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e84:	f003 0302 	and.w	r3, r3, #2
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d1ee      	bne.n	8004e6a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e8c:	7dfb      	ldrb	r3, [r7, #23]
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d105      	bne.n	8004e9e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e92:	4b56      	ldr	r3, [pc, #344]	; (8004fec <HAL_RCC_OscConfig+0x4e8>)
 8004e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e96:	4a55      	ldr	r2, [pc, #340]	; (8004fec <HAL_RCC_OscConfig+0x4e8>)
 8004e98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e9c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	f000 809b 	beq.w	8004fde <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ea8:	4b50      	ldr	r3, [pc, #320]	; (8004fec <HAL_RCC_OscConfig+0x4e8>)
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	f003 030c 	and.w	r3, r3, #12
 8004eb0:	2b08      	cmp	r3, #8
 8004eb2:	d05c      	beq.n	8004f6e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	699b      	ldr	r3, [r3, #24]
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d141      	bne.n	8004f40 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ebc:	4b4c      	ldr	r3, [pc, #304]	; (8004ff0 <HAL_RCC_OscConfig+0x4ec>)
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ec2:	f7fc fc9d 	bl	8001800 <HAL_GetTick>
 8004ec6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ec8:	e008      	b.n	8004edc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004eca:	f7fc fc99 	bl	8001800 <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d901      	bls.n	8004edc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e081      	b.n	8004fe0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004edc:	4b43      	ldr	r3, [pc, #268]	; (8004fec <HAL_RCC_OscConfig+0x4e8>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1f0      	bne.n	8004eca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	69da      	ldr	r2, [r3, #28]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a1b      	ldr	r3, [r3, #32]
 8004ef0:	431a      	orrs	r2, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef6:	019b      	lsls	r3, r3, #6
 8004ef8:	431a      	orrs	r2, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004efe:	085b      	lsrs	r3, r3, #1
 8004f00:	3b01      	subs	r3, #1
 8004f02:	041b      	lsls	r3, r3, #16
 8004f04:	431a      	orrs	r2, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0a:	061b      	lsls	r3, r3, #24
 8004f0c:	4937      	ldr	r1, [pc, #220]	; (8004fec <HAL_RCC_OscConfig+0x4e8>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f12:	4b37      	ldr	r3, [pc, #220]	; (8004ff0 <HAL_RCC_OscConfig+0x4ec>)
 8004f14:	2201      	movs	r2, #1
 8004f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f18:	f7fc fc72 	bl	8001800 <HAL_GetTick>
 8004f1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f1e:	e008      	b.n	8004f32 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f20:	f7fc fc6e 	bl	8001800 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d901      	bls.n	8004f32 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e056      	b.n	8004fe0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f32:	4b2e      	ldr	r3, [pc, #184]	; (8004fec <HAL_RCC_OscConfig+0x4e8>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d0f0      	beq.n	8004f20 <HAL_RCC_OscConfig+0x41c>
 8004f3e:	e04e      	b.n	8004fde <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f40:	4b2b      	ldr	r3, [pc, #172]	; (8004ff0 <HAL_RCC_OscConfig+0x4ec>)
 8004f42:	2200      	movs	r2, #0
 8004f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f46:	f7fc fc5b 	bl	8001800 <HAL_GetTick>
 8004f4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f4c:	e008      	b.n	8004f60 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f4e:	f7fc fc57 	bl	8001800 <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d901      	bls.n	8004f60 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e03f      	b.n	8004fe0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f60:	4b22      	ldr	r3, [pc, #136]	; (8004fec <HAL_RCC_OscConfig+0x4e8>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1f0      	bne.n	8004f4e <HAL_RCC_OscConfig+0x44a>
 8004f6c:	e037      	b.n	8004fde <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	699b      	ldr	r3, [r3, #24]
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d101      	bne.n	8004f7a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e032      	b.n	8004fe0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f7a:	4b1c      	ldr	r3, [pc, #112]	; (8004fec <HAL_RCC_OscConfig+0x4e8>)
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	699b      	ldr	r3, [r3, #24]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d028      	beq.n	8004fda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d121      	bne.n	8004fda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d11a      	bne.n	8004fda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004faa:	4013      	ands	r3, r2
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004fb0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d111      	bne.n	8004fda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc0:	085b      	lsrs	r3, r3, #1
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d107      	bne.n	8004fda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d001      	beq.n	8004fde <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e000      	b.n	8004fe0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004fde:	2300      	movs	r3, #0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3718      	adds	r7, #24
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	40007000 	.word	0x40007000
 8004fec:	40023800 	.word	0x40023800
 8004ff0:	42470060 	.word	0x42470060

08004ff4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d101      	bne.n	8005008 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e0cc      	b.n	80051a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005008:	4b68      	ldr	r3, [pc, #416]	; (80051ac <HAL_RCC_ClockConfig+0x1b8>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0307 	and.w	r3, r3, #7
 8005010:	683a      	ldr	r2, [r7, #0]
 8005012:	429a      	cmp	r2, r3
 8005014:	d90c      	bls.n	8005030 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005016:	4b65      	ldr	r3, [pc, #404]	; (80051ac <HAL_RCC_ClockConfig+0x1b8>)
 8005018:	683a      	ldr	r2, [r7, #0]
 800501a:	b2d2      	uxtb	r2, r2
 800501c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800501e:	4b63      	ldr	r3, [pc, #396]	; (80051ac <HAL_RCC_ClockConfig+0x1b8>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0307 	and.w	r3, r3, #7
 8005026:	683a      	ldr	r2, [r7, #0]
 8005028:	429a      	cmp	r2, r3
 800502a:	d001      	beq.n	8005030 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e0b8      	b.n	80051a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 0302 	and.w	r3, r3, #2
 8005038:	2b00      	cmp	r3, #0
 800503a:	d020      	beq.n	800507e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0304 	and.w	r3, r3, #4
 8005044:	2b00      	cmp	r3, #0
 8005046:	d005      	beq.n	8005054 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005048:	4b59      	ldr	r3, [pc, #356]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	4a58      	ldr	r2, [pc, #352]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 800504e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005052:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0308 	and.w	r3, r3, #8
 800505c:	2b00      	cmp	r3, #0
 800505e:	d005      	beq.n	800506c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005060:	4b53      	ldr	r3, [pc, #332]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	4a52      	ldr	r2, [pc, #328]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005066:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800506a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800506c:	4b50      	ldr	r3, [pc, #320]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	494d      	ldr	r1, [pc, #308]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 800507a:	4313      	orrs	r3, r2
 800507c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 0301 	and.w	r3, r3, #1
 8005086:	2b00      	cmp	r3, #0
 8005088:	d044      	beq.n	8005114 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d107      	bne.n	80050a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005092:	4b47      	ldr	r3, [pc, #284]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d119      	bne.n	80050d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e07f      	b.n	80051a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d003      	beq.n	80050b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050ae:	2b03      	cmp	r3, #3
 80050b0:	d107      	bne.n	80050c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050b2:	4b3f      	ldr	r3, [pc, #252]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d109      	bne.n	80050d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e06f      	b.n	80051a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050c2:	4b3b      	ldr	r3, [pc, #236]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 0302 	and.w	r3, r3, #2
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d101      	bne.n	80050d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e067      	b.n	80051a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050d2:	4b37      	ldr	r3, [pc, #220]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	f023 0203 	bic.w	r2, r3, #3
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	4934      	ldr	r1, [pc, #208]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050e4:	f7fc fb8c 	bl	8001800 <HAL_GetTick>
 80050e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ea:	e00a      	b.n	8005102 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050ec:	f7fc fb88 	bl	8001800 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d901      	bls.n	8005102 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e04f      	b.n	80051a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005102:	4b2b      	ldr	r3, [pc, #172]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	f003 020c 	and.w	r2, r3, #12
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	429a      	cmp	r2, r3
 8005112:	d1eb      	bne.n	80050ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005114:	4b25      	ldr	r3, [pc, #148]	; (80051ac <HAL_RCC_ClockConfig+0x1b8>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0307 	and.w	r3, r3, #7
 800511c:	683a      	ldr	r2, [r7, #0]
 800511e:	429a      	cmp	r2, r3
 8005120:	d20c      	bcs.n	800513c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005122:	4b22      	ldr	r3, [pc, #136]	; (80051ac <HAL_RCC_ClockConfig+0x1b8>)
 8005124:	683a      	ldr	r2, [r7, #0]
 8005126:	b2d2      	uxtb	r2, r2
 8005128:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800512a:	4b20      	ldr	r3, [pc, #128]	; (80051ac <HAL_RCC_ClockConfig+0x1b8>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0307 	and.w	r3, r3, #7
 8005132:	683a      	ldr	r2, [r7, #0]
 8005134:	429a      	cmp	r2, r3
 8005136:	d001      	beq.n	800513c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e032      	b.n	80051a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0304 	and.w	r3, r3, #4
 8005144:	2b00      	cmp	r3, #0
 8005146:	d008      	beq.n	800515a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005148:	4b19      	ldr	r3, [pc, #100]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	4916      	ldr	r1, [pc, #88]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005156:	4313      	orrs	r3, r2
 8005158:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0308 	and.w	r3, r3, #8
 8005162:	2b00      	cmp	r3, #0
 8005164:	d009      	beq.n	800517a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005166:	4b12      	ldr	r3, [pc, #72]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	00db      	lsls	r3, r3, #3
 8005174:	490e      	ldr	r1, [pc, #56]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005176:	4313      	orrs	r3, r2
 8005178:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800517a:	f000 f821 	bl	80051c0 <HAL_RCC_GetSysClockFreq>
 800517e:	4602      	mov	r2, r0
 8005180:	4b0b      	ldr	r3, [pc, #44]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	091b      	lsrs	r3, r3, #4
 8005186:	f003 030f 	and.w	r3, r3, #15
 800518a:	490a      	ldr	r1, [pc, #40]	; (80051b4 <HAL_RCC_ClockConfig+0x1c0>)
 800518c:	5ccb      	ldrb	r3, [r1, r3]
 800518e:	fa22 f303 	lsr.w	r3, r2, r3
 8005192:	4a09      	ldr	r2, [pc, #36]	; (80051b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005194:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005196:	4b09      	ldr	r3, [pc, #36]	; (80051bc <HAL_RCC_ClockConfig+0x1c8>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4618      	mov	r0, r3
 800519c:	f7fc f93a 	bl	8001414 <HAL_InitTick>

  return HAL_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3710      	adds	r7, #16
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	40023c00 	.word	0x40023c00
 80051b0:	40023800 	.word	0x40023800
 80051b4:	08008b04 	.word	0x08008b04
 80051b8:	2000001c 	.word	0x2000001c
 80051bc:	20000020 	.word	0x20000020

080051c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80051c4:	b084      	sub	sp, #16
 80051c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80051c8:	2300      	movs	r3, #0
 80051ca:	607b      	str	r3, [r7, #4]
 80051cc:	2300      	movs	r3, #0
 80051ce:	60fb      	str	r3, [r7, #12]
 80051d0:	2300      	movs	r3, #0
 80051d2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80051d4:	2300      	movs	r3, #0
 80051d6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051d8:	4b67      	ldr	r3, [pc, #412]	; (8005378 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	f003 030c 	and.w	r3, r3, #12
 80051e0:	2b08      	cmp	r3, #8
 80051e2:	d00d      	beq.n	8005200 <HAL_RCC_GetSysClockFreq+0x40>
 80051e4:	2b08      	cmp	r3, #8
 80051e6:	f200 80bd 	bhi.w	8005364 <HAL_RCC_GetSysClockFreq+0x1a4>
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d002      	beq.n	80051f4 <HAL_RCC_GetSysClockFreq+0x34>
 80051ee:	2b04      	cmp	r3, #4
 80051f0:	d003      	beq.n	80051fa <HAL_RCC_GetSysClockFreq+0x3a>
 80051f2:	e0b7      	b.n	8005364 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051f4:	4b61      	ldr	r3, [pc, #388]	; (800537c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80051f6:	60bb      	str	r3, [r7, #8]
       break;
 80051f8:	e0b7      	b.n	800536a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051fa:	4b61      	ldr	r3, [pc, #388]	; (8005380 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80051fc:	60bb      	str	r3, [r7, #8]
      break;
 80051fe:	e0b4      	b.n	800536a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005200:	4b5d      	ldr	r3, [pc, #372]	; (8005378 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005208:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800520a:	4b5b      	ldr	r3, [pc, #364]	; (8005378 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d04d      	beq.n	80052b2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005216:	4b58      	ldr	r3, [pc, #352]	; (8005378 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	099b      	lsrs	r3, r3, #6
 800521c:	461a      	mov	r2, r3
 800521e:	f04f 0300 	mov.w	r3, #0
 8005222:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005226:	f04f 0100 	mov.w	r1, #0
 800522a:	ea02 0800 	and.w	r8, r2, r0
 800522e:	ea03 0901 	and.w	r9, r3, r1
 8005232:	4640      	mov	r0, r8
 8005234:	4649      	mov	r1, r9
 8005236:	f04f 0200 	mov.w	r2, #0
 800523a:	f04f 0300 	mov.w	r3, #0
 800523e:	014b      	lsls	r3, r1, #5
 8005240:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005244:	0142      	lsls	r2, r0, #5
 8005246:	4610      	mov	r0, r2
 8005248:	4619      	mov	r1, r3
 800524a:	ebb0 0008 	subs.w	r0, r0, r8
 800524e:	eb61 0109 	sbc.w	r1, r1, r9
 8005252:	f04f 0200 	mov.w	r2, #0
 8005256:	f04f 0300 	mov.w	r3, #0
 800525a:	018b      	lsls	r3, r1, #6
 800525c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005260:	0182      	lsls	r2, r0, #6
 8005262:	1a12      	subs	r2, r2, r0
 8005264:	eb63 0301 	sbc.w	r3, r3, r1
 8005268:	f04f 0000 	mov.w	r0, #0
 800526c:	f04f 0100 	mov.w	r1, #0
 8005270:	00d9      	lsls	r1, r3, #3
 8005272:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005276:	00d0      	lsls	r0, r2, #3
 8005278:	4602      	mov	r2, r0
 800527a:	460b      	mov	r3, r1
 800527c:	eb12 0208 	adds.w	r2, r2, r8
 8005280:	eb43 0309 	adc.w	r3, r3, r9
 8005284:	f04f 0000 	mov.w	r0, #0
 8005288:	f04f 0100 	mov.w	r1, #0
 800528c:	0259      	lsls	r1, r3, #9
 800528e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005292:	0250      	lsls	r0, r2, #9
 8005294:	4602      	mov	r2, r0
 8005296:	460b      	mov	r3, r1
 8005298:	4610      	mov	r0, r2
 800529a:	4619      	mov	r1, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	461a      	mov	r2, r3
 80052a0:	f04f 0300 	mov.w	r3, #0
 80052a4:	f7fa ff94 	bl	80001d0 <__aeabi_uldivmod>
 80052a8:	4602      	mov	r2, r0
 80052aa:	460b      	mov	r3, r1
 80052ac:	4613      	mov	r3, r2
 80052ae:	60fb      	str	r3, [r7, #12]
 80052b0:	e04a      	b.n	8005348 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052b2:	4b31      	ldr	r3, [pc, #196]	; (8005378 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	099b      	lsrs	r3, r3, #6
 80052b8:	461a      	mov	r2, r3
 80052ba:	f04f 0300 	mov.w	r3, #0
 80052be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80052c2:	f04f 0100 	mov.w	r1, #0
 80052c6:	ea02 0400 	and.w	r4, r2, r0
 80052ca:	ea03 0501 	and.w	r5, r3, r1
 80052ce:	4620      	mov	r0, r4
 80052d0:	4629      	mov	r1, r5
 80052d2:	f04f 0200 	mov.w	r2, #0
 80052d6:	f04f 0300 	mov.w	r3, #0
 80052da:	014b      	lsls	r3, r1, #5
 80052dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80052e0:	0142      	lsls	r2, r0, #5
 80052e2:	4610      	mov	r0, r2
 80052e4:	4619      	mov	r1, r3
 80052e6:	1b00      	subs	r0, r0, r4
 80052e8:	eb61 0105 	sbc.w	r1, r1, r5
 80052ec:	f04f 0200 	mov.w	r2, #0
 80052f0:	f04f 0300 	mov.w	r3, #0
 80052f4:	018b      	lsls	r3, r1, #6
 80052f6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80052fa:	0182      	lsls	r2, r0, #6
 80052fc:	1a12      	subs	r2, r2, r0
 80052fe:	eb63 0301 	sbc.w	r3, r3, r1
 8005302:	f04f 0000 	mov.w	r0, #0
 8005306:	f04f 0100 	mov.w	r1, #0
 800530a:	00d9      	lsls	r1, r3, #3
 800530c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005310:	00d0      	lsls	r0, r2, #3
 8005312:	4602      	mov	r2, r0
 8005314:	460b      	mov	r3, r1
 8005316:	1912      	adds	r2, r2, r4
 8005318:	eb45 0303 	adc.w	r3, r5, r3
 800531c:	f04f 0000 	mov.w	r0, #0
 8005320:	f04f 0100 	mov.w	r1, #0
 8005324:	0299      	lsls	r1, r3, #10
 8005326:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800532a:	0290      	lsls	r0, r2, #10
 800532c:	4602      	mov	r2, r0
 800532e:	460b      	mov	r3, r1
 8005330:	4610      	mov	r0, r2
 8005332:	4619      	mov	r1, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	461a      	mov	r2, r3
 8005338:	f04f 0300 	mov.w	r3, #0
 800533c:	f7fa ff48 	bl	80001d0 <__aeabi_uldivmod>
 8005340:	4602      	mov	r2, r0
 8005342:	460b      	mov	r3, r1
 8005344:	4613      	mov	r3, r2
 8005346:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005348:	4b0b      	ldr	r3, [pc, #44]	; (8005378 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	0c1b      	lsrs	r3, r3, #16
 800534e:	f003 0303 	and.w	r3, r3, #3
 8005352:	3301      	adds	r3, #1
 8005354:	005b      	lsls	r3, r3, #1
 8005356:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005360:	60bb      	str	r3, [r7, #8]
      break;
 8005362:	e002      	b.n	800536a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005364:	4b05      	ldr	r3, [pc, #20]	; (800537c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005366:	60bb      	str	r3, [r7, #8]
      break;
 8005368:	bf00      	nop
    }
  }
  return sysclockfreq;
 800536a:	68bb      	ldr	r3, [r7, #8]
}
 800536c:	4618      	mov	r0, r3
 800536e:	3710      	adds	r7, #16
 8005370:	46bd      	mov	sp, r7
 8005372:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005376:	bf00      	nop
 8005378:	40023800 	.word	0x40023800
 800537c:	00f42400 	.word	0x00f42400
 8005380:	007a1200 	.word	0x007a1200

08005384 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005384:	b480      	push	{r7}
 8005386:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005388:	4b03      	ldr	r3, [pc, #12]	; (8005398 <HAL_RCC_GetHCLKFreq+0x14>)
 800538a:	681b      	ldr	r3, [r3, #0]
}
 800538c:	4618      	mov	r0, r3
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	2000001c 	.word	0x2000001c

0800539c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80053a0:	f7ff fff0 	bl	8005384 <HAL_RCC_GetHCLKFreq>
 80053a4:	4602      	mov	r2, r0
 80053a6:	4b05      	ldr	r3, [pc, #20]	; (80053bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	0a9b      	lsrs	r3, r3, #10
 80053ac:	f003 0307 	and.w	r3, r3, #7
 80053b0:	4903      	ldr	r1, [pc, #12]	; (80053c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053b2:	5ccb      	ldrb	r3, [r1, r3]
 80053b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	40023800 	.word	0x40023800
 80053c0:	08008b14 	.word	0x08008b14

080053c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80053c8:	f7ff ffdc 	bl	8005384 <HAL_RCC_GetHCLKFreq>
 80053cc:	4602      	mov	r2, r0
 80053ce:	4b05      	ldr	r3, [pc, #20]	; (80053e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	0b5b      	lsrs	r3, r3, #13
 80053d4:	f003 0307 	and.w	r3, r3, #7
 80053d8:	4903      	ldr	r1, [pc, #12]	; (80053e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053da:	5ccb      	ldrb	r3, [r1, r3]
 80053dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	40023800 	.word	0x40023800
 80053e8:	08008b14 	.word	0x08008b14

080053ec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	220f      	movs	r2, #15
 80053fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80053fc:	4b12      	ldr	r3, [pc, #72]	; (8005448 <HAL_RCC_GetClockConfig+0x5c>)
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	f003 0203 	and.w	r2, r3, #3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005408:	4b0f      	ldr	r3, [pc, #60]	; (8005448 <HAL_RCC_GetClockConfig+0x5c>)
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005414:	4b0c      	ldr	r3, [pc, #48]	; (8005448 <HAL_RCC_GetClockConfig+0x5c>)
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005420:	4b09      	ldr	r3, [pc, #36]	; (8005448 <HAL_RCC_GetClockConfig+0x5c>)
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	08db      	lsrs	r3, r3, #3
 8005426:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800542e:	4b07      	ldr	r3, [pc, #28]	; (800544c <HAL_RCC_GetClockConfig+0x60>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 0207 	and.w	r2, r3, #7
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	601a      	str	r2, [r3, #0]
}
 800543a:	bf00      	nop
 800543c:	370c      	adds	r7, #12
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	40023800 	.word	0x40023800
 800544c:	40023c00 	.word	0x40023c00

08005450 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d101      	bne.n	8005462 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e041      	b.n	80054e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005468:	b2db      	uxtb	r3, r3
 800546a:	2b00      	cmp	r3, #0
 800546c:	d106      	bne.n	800547c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 f839 	bl	80054ee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2202      	movs	r2, #2
 8005480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	3304      	adds	r3, #4
 800548c:	4619      	mov	r1, r3
 800548e:	4610      	mov	r0, r2
 8005490:	f000 f9d8 	bl	8005844 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3708      	adds	r7, #8
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}

080054ee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80054ee:	b480      	push	{r7}
 80054f0:	b083      	sub	sp, #12
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80054f6:	bf00      	nop
 80054f8:	370c      	adds	r7, #12
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
	...

08005504 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005504:	b480      	push	{r7}
 8005506:	b085      	sub	sp, #20
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005512:	b2db      	uxtb	r3, r3
 8005514:	2b01      	cmp	r3, #1
 8005516:	d001      	beq.n	800551c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e04e      	b.n	80055ba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2202      	movs	r2, #2
 8005520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68da      	ldr	r2, [r3, #12]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f042 0201 	orr.w	r2, r2, #1
 8005532:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a23      	ldr	r2, [pc, #140]	; (80055c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d022      	beq.n	8005584 <HAL_TIM_Base_Start_IT+0x80>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005546:	d01d      	beq.n	8005584 <HAL_TIM_Base_Start_IT+0x80>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a1f      	ldr	r2, [pc, #124]	; (80055cc <HAL_TIM_Base_Start_IT+0xc8>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d018      	beq.n	8005584 <HAL_TIM_Base_Start_IT+0x80>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a1e      	ldr	r2, [pc, #120]	; (80055d0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d013      	beq.n	8005584 <HAL_TIM_Base_Start_IT+0x80>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a1c      	ldr	r2, [pc, #112]	; (80055d4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d00e      	beq.n	8005584 <HAL_TIM_Base_Start_IT+0x80>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a1b      	ldr	r2, [pc, #108]	; (80055d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d009      	beq.n	8005584 <HAL_TIM_Base_Start_IT+0x80>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a19      	ldr	r2, [pc, #100]	; (80055dc <HAL_TIM_Base_Start_IT+0xd8>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d004      	beq.n	8005584 <HAL_TIM_Base_Start_IT+0x80>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a18      	ldr	r2, [pc, #96]	; (80055e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d111      	bne.n	80055a8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	f003 0307 	and.w	r3, r3, #7
 800558e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2b06      	cmp	r3, #6
 8005594:	d010      	beq.n	80055b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f042 0201 	orr.w	r2, r2, #1
 80055a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055a6:	e007      	b.n	80055b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f042 0201 	orr.w	r2, r2, #1
 80055b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3714      	adds	r7, #20
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr
 80055c6:	bf00      	nop
 80055c8:	40010000 	.word	0x40010000
 80055cc:	40000400 	.word	0x40000400
 80055d0:	40000800 	.word	0x40000800
 80055d4:	40000c00 	.word	0x40000c00
 80055d8:	40010400 	.word	0x40010400
 80055dc:	40014000 	.word	0x40014000
 80055e0:	40001800 	.word	0x40001800

080055e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b082      	sub	sp, #8
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	f003 0302 	and.w	r3, r3, #2
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d122      	bne.n	8005640 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	f003 0302 	and.w	r3, r3, #2
 8005604:	2b02      	cmp	r3, #2
 8005606:	d11b      	bne.n	8005640 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f06f 0202 	mvn.w	r2, #2
 8005610:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2201      	movs	r2, #1
 8005616:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	f003 0303 	and.w	r3, r3, #3
 8005622:	2b00      	cmp	r3, #0
 8005624:	d003      	beq.n	800562e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 f8ee 	bl	8005808 <HAL_TIM_IC_CaptureCallback>
 800562c:	e005      	b.n	800563a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 f8e0 	bl	80057f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f000 f8f1 	bl	800581c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	f003 0304 	and.w	r3, r3, #4
 800564a:	2b04      	cmp	r3, #4
 800564c:	d122      	bne.n	8005694 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	f003 0304 	and.w	r3, r3, #4
 8005658:	2b04      	cmp	r3, #4
 800565a:	d11b      	bne.n	8005694 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f06f 0204 	mvn.w	r2, #4
 8005664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2202      	movs	r2, #2
 800566a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005676:	2b00      	cmp	r3, #0
 8005678:	d003      	beq.n	8005682 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 f8c4 	bl	8005808 <HAL_TIM_IC_CaptureCallback>
 8005680:	e005      	b.n	800568e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 f8b6 	bl	80057f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 f8c7 	bl	800581c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	f003 0308 	and.w	r3, r3, #8
 800569e:	2b08      	cmp	r3, #8
 80056a0:	d122      	bne.n	80056e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	f003 0308 	and.w	r3, r3, #8
 80056ac:	2b08      	cmp	r3, #8
 80056ae:	d11b      	bne.n	80056e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f06f 0208 	mvn.w	r2, #8
 80056b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2204      	movs	r2, #4
 80056be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	69db      	ldr	r3, [r3, #28]
 80056c6:	f003 0303 	and.w	r3, r3, #3
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d003      	beq.n	80056d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 f89a 	bl	8005808 <HAL_TIM_IC_CaptureCallback>
 80056d4:	e005      	b.n	80056e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 f88c 	bl	80057f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 f89d 	bl	800581c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	f003 0310 	and.w	r3, r3, #16
 80056f2:	2b10      	cmp	r3, #16
 80056f4:	d122      	bne.n	800573c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	f003 0310 	and.w	r3, r3, #16
 8005700:	2b10      	cmp	r3, #16
 8005702:	d11b      	bne.n	800573c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f06f 0210 	mvn.w	r2, #16
 800570c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2208      	movs	r2, #8
 8005712:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	69db      	ldr	r3, [r3, #28]
 800571a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800571e:	2b00      	cmp	r3, #0
 8005720:	d003      	beq.n	800572a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 f870 	bl	8005808 <HAL_TIM_IC_CaptureCallback>
 8005728:	e005      	b.n	8005736 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 f862 	bl	80057f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 f873 	bl	800581c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	f003 0301 	and.w	r3, r3, #1
 8005746:	2b01      	cmp	r3, #1
 8005748:	d10e      	bne.n	8005768 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	f003 0301 	and.w	r3, r3, #1
 8005754:	2b01      	cmp	r3, #1
 8005756:	d107      	bne.n	8005768 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f06f 0201 	mvn.w	r2, #1
 8005760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f7fb fc9e 	bl	80010a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005772:	2b80      	cmp	r3, #128	; 0x80
 8005774:	d10e      	bne.n	8005794 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005780:	2b80      	cmp	r3, #128	; 0x80
 8005782:	d107      	bne.n	8005794 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800578c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 f902 	bl	8005998 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800579e:	2b40      	cmp	r3, #64	; 0x40
 80057a0:	d10e      	bne.n	80057c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ac:	2b40      	cmp	r3, #64	; 0x40
 80057ae:	d107      	bne.n	80057c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 f838 	bl	8005830 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	f003 0320 	and.w	r3, r3, #32
 80057ca:	2b20      	cmp	r3, #32
 80057cc:	d10e      	bne.n	80057ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	f003 0320 	and.w	r3, r3, #32
 80057d8:	2b20      	cmp	r3, #32
 80057da:	d107      	bne.n	80057ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f06f 0220 	mvn.w	r2, #32
 80057e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 f8cc 	bl	8005984 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057ec:	bf00      	nop
 80057ee:	3708      	adds	r7, #8
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057fc:	bf00      	nop
 80057fe:	370c      	adds	r7, #12
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005810:	bf00      	nop
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005824:	bf00      	nop
 8005826:	370c      	adds	r7, #12
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005838:	bf00      	nop
 800583a:	370c      	adds	r7, #12
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005844:	b480      	push	{r7}
 8005846:	b085      	sub	sp, #20
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a40      	ldr	r2, [pc, #256]	; (8005958 <TIM_Base_SetConfig+0x114>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d013      	beq.n	8005884 <TIM_Base_SetConfig+0x40>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005862:	d00f      	beq.n	8005884 <TIM_Base_SetConfig+0x40>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	4a3d      	ldr	r2, [pc, #244]	; (800595c <TIM_Base_SetConfig+0x118>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d00b      	beq.n	8005884 <TIM_Base_SetConfig+0x40>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4a3c      	ldr	r2, [pc, #240]	; (8005960 <TIM_Base_SetConfig+0x11c>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d007      	beq.n	8005884 <TIM_Base_SetConfig+0x40>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4a3b      	ldr	r2, [pc, #236]	; (8005964 <TIM_Base_SetConfig+0x120>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d003      	beq.n	8005884 <TIM_Base_SetConfig+0x40>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a3a      	ldr	r2, [pc, #232]	; (8005968 <TIM_Base_SetConfig+0x124>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d108      	bne.n	8005896 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800588a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	4313      	orrs	r3, r2
 8005894:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a2f      	ldr	r2, [pc, #188]	; (8005958 <TIM_Base_SetConfig+0x114>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d02b      	beq.n	80058f6 <TIM_Base_SetConfig+0xb2>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058a4:	d027      	beq.n	80058f6 <TIM_Base_SetConfig+0xb2>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a2c      	ldr	r2, [pc, #176]	; (800595c <TIM_Base_SetConfig+0x118>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d023      	beq.n	80058f6 <TIM_Base_SetConfig+0xb2>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a2b      	ldr	r2, [pc, #172]	; (8005960 <TIM_Base_SetConfig+0x11c>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d01f      	beq.n	80058f6 <TIM_Base_SetConfig+0xb2>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a2a      	ldr	r2, [pc, #168]	; (8005964 <TIM_Base_SetConfig+0x120>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d01b      	beq.n	80058f6 <TIM_Base_SetConfig+0xb2>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a29      	ldr	r2, [pc, #164]	; (8005968 <TIM_Base_SetConfig+0x124>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d017      	beq.n	80058f6 <TIM_Base_SetConfig+0xb2>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a28      	ldr	r2, [pc, #160]	; (800596c <TIM_Base_SetConfig+0x128>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d013      	beq.n	80058f6 <TIM_Base_SetConfig+0xb2>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a27      	ldr	r2, [pc, #156]	; (8005970 <TIM_Base_SetConfig+0x12c>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d00f      	beq.n	80058f6 <TIM_Base_SetConfig+0xb2>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a26      	ldr	r2, [pc, #152]	; (8005974 <TIM_Base_SetConfig+0x130>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d00b      	beq.n	80058f6 <TIM_Base_SetConfig+0xb2>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a25      	ldr	r2, [pc, #148]	; (8005978 <TIM_Base_SetConfig+0x134>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d007      	beq.n	80058f6 <TIM_Base_SetConfig+0xb2>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a24      	ldr	r2, [pc, #144]	; (800597c <TIM_Base_SetConfig+0x138>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d003      	beq.n	80058f6 <TIM_Base_SetConfig+0xb2>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a23      	ldr	r2, [pc, #140]	; (8005980 <TIM_Base_SetConfig+0x13c>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d108      	bne.n	8005908 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	4313      	orrs	r3, r2
 8005906:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	695b      	ldr	r3, [r3, #20]
 8005912:	4313      	orrs	r3, r2
 8005914:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	68fa      	ldr	r2, [r7, #12]
 800591a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	689a      	ldr	r2, [r3, #8]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a0a      	ldr	r2, [pc, #40]	; (8005958 <TIM_Base_SetConfig+0x114>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d003      	beq.n	800593c <TIM_Base_SetConfig+0xf8>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a0c      	ldr	r2, [pc, #48]	; (8005968 <TIM_Base_SetConfig+0x124>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d103      	bne.n	8005944 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	691a      	ldr	r2, [r3, #16]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	615a      	str	r2, [r3, #20]
}
 800594a:	bf00      	nop
 800594c:	3714      	adds	r7, #20
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr
 8005956:	bf00      	nop
 8005958:	40010000 	.word	0x40010000
 800595c:	40000400 	.word	0x40000400
 8005960:	40000800 	.word	0x40000800
 8005964:	40000c00 	.word	0x40000c00
 8005968:	40010400 	.word	0x40010400
 800596c:	40014000 	.word	0x40014000
 8005970:	40014400 	.word	0x40014400
 8005974:	40014800 	.word	0x40014800
 8005978:	40001800 	.word	0x40001800
 800597c:	40001c00 	.word	0x40001c00
 8005980:	40002000 	.word	0x40002000

08005984 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800598c:	bf00      	nop
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059a0:	bf00      	nop
 80059a2:	370c      	adds	r7, #12
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b082      	sub	sp, #8
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d101      	bne.n	80059be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e03f      	b.n	8005a3e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d106      	bne.n	80059d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f7fb fe26 	bl	8001624 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2224      	movs	r2, #36	; 0x24
 80059dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	68da      	ldr	r2, [r3, #12]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 fe7d 	bl	80066f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	691a      	ldr	r2, [r3, #16]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	695a      	ldr	r2, [r3, #20]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68da      	ldr	r2, [r3, #12]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2220      	movs	r2, #32
 8005a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2220      	movs	r2, #32
 8005a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3708      	adds	r7, #8
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}

08005a46 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a46:	b580      	push	{r7, lr}
 8005a48:	b08a      	sub	sp, #40	; 0x28
 8005a4a:	af02      	add	r7, sp, #8
 8005a4c:	60f8      	str	r0, [r7, #12]
 8005a4e:	60b9      	str	r1, [r7, #8]
 8005a50:	603b      	str	r3, [r7, #0]
 8005a52:	4613      	mov	r3, r2
 8005a54:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005a56:	2300      	movs	r3, #0
 8005a58:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	2b20      	cmp	r3, #32
 8005a64:	d17c      	bne.n	8005b60 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d002      	beq.n	8005a72 <HAL_UART_Transmit+0x2c>
 8005a6c:	88fb      	ldrh	r3, [r7, #6]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d101      	bne.n	8005a76 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e075      	b.n	8005b62 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d101      	bne.n	8005a84 <HAL_UART_Transmit+0x3e>
 8005a80:	2302      	movs	r3, #2
 8005a82:	e06e      	b.n	8005b62 <HAL_UART_Transmit+0x11c>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2221      	movs	r2, #33	; 0x21
 8005a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a9a:	f7fb feb1 	bl	8001800 <HAL_GetTick>
 8005a9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	88fa      	ldrh	r2, [r7, #6]
 8005aa4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	88fa      	ldrh	r2, [r7, #6]
 8005aaa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ab4:	d108      	bne.n	8005ac8 <HAL_UART_Transmit+0x82>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d104      	bne.n	8005ac8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	61bb      	str	r3, [r7, #24]
 8005ac6:	e003      	b.n	8005ad0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005acc:	2300      	movs	r3, #0
 8005ace:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005ad8:	e02a      	b.n	8005b30 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	9300      	str	r3, [sp, #0]
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	2180      	movs	r1, #128	; 0x80
 8005ae4:	68f8      	ldr	r0, [r7, #12]
 8005ae6:	f000 fbc1 	bl	800626c <UART_WaitOnFlagUntilTimeout>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d001      	beq.n	8005af4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005af0:	2303      	movs	r3, #3
 8005af2:	e036      	b.n	8005b62 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d10b      	bne.n	8005b12 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	881b      	ldrh	r3, [r3, #0]
 8005afe:	461a      	mov	r2, r3
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b08:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	3302      	adds	r3, #2
 8005b0e:	61bb      	str	r3, [r7, #24]
 8005b10:	e007      	b.n	8005b22 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	781a      	ldrb	r2, [r3, #0]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	3301      	adds	r3, #1
 8005b20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	3b01      	subs	r3, #1
 8005b2a:	b29a      	uxth	r2, r3
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d1cf      	bne.n	8005ada <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	9300      	str	r3, [sp, #0]
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	2200      	movs	r2, #0
 8005b42:	2140      	movs	r1, #64	; 0x40
 8005b44:	68f8      	ldr	r0, [r7, #12]
 8005b46:	f000 fb91 	bl	800626c <UART_WaitOnFlagUntilTimeout>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d001      	beq.n	8005b54 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005b50:	2303      	movs	r3, #3
 8005b52:	e006      	b.n	8005b62 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2220      	movs	r2, #32
 8005b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	e000      	b.n	8005b62 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005b60:	2302      	movs	r3, #2
  }
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3720      	adds	r7, #32
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}

08005b6a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b6a:	b580      	push	{r7, lr}
 8005b6c:	b084      	sub	sp, #16
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	60f8      	str	r0, [r7, #12]
 8005b72:	60b9      	str	r1, [r7, #8]
 8005b74:	4613      	mov	r3, r2
 8005b76:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	2b20      	cmp	r3, #32
 8005b82:	d11d      	bne.n	8005bc0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d002      	beq.n	8005b90 <HAL_UART_Receive_IT+0x26>
 8005b8a:	88fb      	ldrh	r3, [r7, #6]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d101      	bne.n	8005b94 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e016      	b.n	8005bc2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d101      	bne.n	8005ba2 <HAL_UART_Receive_IT+0x38>
 8005b9e:	2302      	movs	r3, #2
 8005ba0:	e00f      	b.n	8005bc2 <HAL_UART_Receive_IT+0x58>
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2200      	movs	r2, #0
 8005bae:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005bb0:	88fb      	ldrh	r3, [r7, #6]
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	68b9      	ldr	r1, [r7, #8]
 8005bb6:	68f8      	ldr	r0, [r7, #12]
 8005bb8:	f000 fbc6 	bl	8006348 <UART_Start_Receive_IT>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	e000      	b.n	8005bc2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005bc0:	2302      	movs	r3, #2
  }
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3710      	adds	r7, #16
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}

08005bca <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8005bca:	b580      	push	{r7, lr}
 8005bcc:	b09a      	sub	sp, #104	; 0x68
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	330c      	adds	r3, #12
 8005bd8:	64bb      	str	r3, [r7, #72]	; 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bdc:	e853 3f00 	ldrex	r3, [r3]
 8005be0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005be2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005be4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005be8:	667b      	str	r3, [r7, #100]	; 0x64
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	330c      	adds	r3, #12
 8005bf0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005bf2:	657a      	str	r2, [r7, #84]	; 0x54
 8005bf4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005bf8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005bfa:	e841 2300 	strex	r3, r2, [r1]
 8005bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005c00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d1e5      	bne.n	8005bd2 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	3314      	adds	r3, #20
 8005c0c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c10:	e853 3f00 	ldrex	r3, [r3]
 8005c14:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c18:	f023 0301 	bic.w	r3, r3, #1
 8005c1c:	663b      	str	r3, [r7, #96]	; 0x60
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	3314      	adds	r3, #20
 8005c24:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005c26:	643a      	str	r2, [r7, #64]	; 0x40
 8005c28:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c2a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c2c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c2e:	e841 2300 	strex	r3, r2, [r1]
 8005c32:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d1e5      	bne.n	8005c06 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d119      	bne.n	8005c76 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	330c      	adds	r3, #12
 8005c48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c4a:	6a3b      	ldr	r3, [r7, #32]
 8005c4c:	e853 3f00 	ldrex	r3, [r3]
 8005c50:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	f023 0310 	bic.w	r3, r3, #16
 8005c58:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	330c      	adds	r3, #12
 8005c60:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005c62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c64:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c6a:	e841 2300 	strex	r3, r2, [r1]
 8005c6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d1e5      	bne.n	8005c42 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	695b      	ldr	r3, [r3, #20]
 8005c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c80:	2b40      	cmp	r3, #64	; 0x40
 8005c82:	d136      	bne.n	8005cf2 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	3314      	adds	r3, #20
 8005c8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	e853 3f00 	ldrex	r3, [r3]
 8005c92:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c9a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	3314      	adds	r3, #20
 8005ca2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ca4:	61ba      	str	r2, [r7, #24]
 8005ca6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca8:	6979      	ldr	r1, [r7, #20]
 8005caa:	69ba      	ldr	r2, [r7, #24]
 8005cac:	e841 2300 	strex	r3, r2, [r1]
 8005cb0:	613b      	str	r3, [r7, #16]
   return(result);
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d1e5      	bne.n	8005c84 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d018      	beq.n	8005cf2 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f7fb fea9 	bl	8001a24 <HAL_DMA_Abort>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d00c      	beq.n	8005cf2 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f7fb ff41 	bl	8001b64 <HAL_DMA_GetError>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b20      	cmp	r3, #32
 8005ce6:	d104      	bne.n	8005cf2 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2210      	movs	r2, #16
 8005cec:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e00a      	b.n	8005d08 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2220      	movs	r2, #32
 8005cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8005d06:	2300      	movs	r3, #0
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3768      	adds	r7, #104	; 0x68
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b0ba      	sub	sp, #232	; 0xe8
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	695b      	ldr	r3, [r3, #20]
 8005d32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005d36:	2300      	movs	r3, #0
 8005d38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d46:	f003 030f 	and.w	r3, r3, #15
 8005d4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005d4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d10f      	bne.n	8005d76 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d5a:	f003 0320 	and.w	r3, r3, #32
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d009      	beq.n	8005d76 <HAL_UART_IRQHandler+0x66>
 8005d62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d66:	f003 0320 	and.w	r3, r3, #32
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d003      	beq.n	8005d76 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 fc03 	bl	800657a <UART_Receive_IT>
      return;
 8005d74:	e256      	b.n	8006224 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005d76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	f000 80de 	beq.w	8005f3c <HAL_UART_IRQHandler+0x22c>
 8005d80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d84:	f003 0301 	and.w	r3, r3, #1
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d106      	bne.n	8005d9a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d90:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	f000 80d1 	beq.w	8005f3c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d9e:	f003 0301 	and.w	r3, r3, #1
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d00b      	beq.n	8005dbe <HAL_UART_IRQHandler+0xae>
 8005da6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d005      	beq.n	8005dbe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db6:	f043 0201 	orr.w	r2, r3, #1
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005dbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dc2:	f003 0304 	and.w	r3, r3, #4
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d00b      	beq.n	8005de2 <HAL_UART_IRQHandler+0xd2>
 8005dca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dce:	f003 0301 	and.w	r3, r3, #1
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d005      	beq.n	8005de2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dda:	f043 0202 	orr.w	r2, r3, #2
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005de6:	f003 0302 	and.w	r3, r3, #2
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00b      	beq.n	8005e06 <HAL_UART_IRQHandler+0xf6>
 8005dee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005df2:	f003 0301 	and.w	r3, r3, #1
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d005      	beq.n	8005e06 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfe:	f043 0204 	orr.w	r2, r3, #4
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e0a:	f003 0308 	and.w	r3, r3, #8
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d011      	beq.n	8005e36 <HAL_UART_IRQHandler+0x126>
 8005e12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e16:	f003 0320 	and.w	r3, r3, #32
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d105      	bne.n	8005e2a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005e1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e22:	f003 0301 	and.w	r3, r3, #1
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d005      	beq.n	8005e36 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2e:	f043 0208 	orr.w	r2, r3, #8
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	f000 81ed 	beq.w	800621a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e44:	f003 0320 	and.w	r3, r3, #32
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d008      	beq.n	8005e5e <HAL_UART_IRQHandler+0x14e>
 8005e4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e50:	f003 0320 	and.w	r3, r3, #32
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d002      	beq.n	8005e5e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f000 fb8e 	bl	800657a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	695b      	ldr	r3, [r3, #20]
 8005e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e68:	2b40      	cmp	r3, #64	; 0x40
 8005e6a:	bf0c      	ite	eq
 8005e6c:	2301      	moveq	r3, #1
 8005e6e:	2300      	movne	r3, #0
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7a:	f003 0308 	and.w	r3, r3, #8
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d103      	bne.n	8005e8a <HAL_UART_IRQHandler+0x17a>
 8005e82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d04f      	beq.n	8005f2a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 fa96 	bl	80063bc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	695b      	ldr	r3, [r3, #20]
 8005e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e9a:	2b40      	cmp	r3, #64	; 0x40
 8005e9c:	d141      	bne.n	8005f22 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	3314      	adds	r3, #20
 8005ea4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005eac:	e853 3f00 	ldrex	r3, [r3]
 8005eb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005eb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005eb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ebc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	3314      	adds	r3, #20
 8005ec6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005eca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005ece:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005ed6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005eda:	e841 2300 	strex	r3, r2, [r1]
 8005ede:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005ee2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d1d9      	bne.n	8005e9e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d013      	beq.n	8005f1a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef6:	4a7d      	ldr	r2, [pc, #500]	; (80060ec <HAL_UART_IRQHandler+0x3dc>)
 8005ef8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005efe:	4618      	mov	r0, r3
 8005f00:	f7fb fe00 	bl	8001b04 <HAL_DMA_Abort_IT>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d016      	beq.n	8005f38 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005f14:	4610      	mov	r0, r2
 8005f16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f18:	e00e      	b.n	8005f38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 f990 	bl	8006240 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f20:	e00a      	b.n	8005f38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 f98c 	bl	8006240 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f28:	e006      	b.n	8005f38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 f988 	bl	8006240 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2200      	movs	r2, #0
 8005f34:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005f36:	e170      	b.n	800621a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f38:	bf00      	nop
    return;
 8005f3a:	e16e      	b.n	800621a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	f040 814a 	bne.w	80061da <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f4a:	f003 0310 	and.w	r3, r3, #16
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	f000 8143 	beq.w	80061da <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005f54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f58:	f003 0310 	and.w	r3, r3, #16
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	f000 813c 	beq.w	80061da <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f62:	2300      	movs	r3, #0
 8005f64:	60bb      	str	r3, [r7, #8]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	60bb      	str	r3, [r7, #8]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	60bb      	str	r3, [r7, #8]
 8005f76:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	695b      	ldr	r3, [r3, #20]
 8005f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f82:	2b40      	cmp	r3, #64	; 0x40
 8005f84:	f040 80b4 	bne.w	80060f0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005f94:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	f000 8140 	beq.w	800621e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005fa2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	f080 8139 	bcs.w	800621e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005fb2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb8:	69db      	ldr	r3, [r3, #28]
 8005fba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fbe:	f000 8088 	beq.w	80060d2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	330c      	adds	r3, #12
 8005fc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fcc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005fd0:	e853 3f00 	ldrex	r3, [r3]
 8005fd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005fd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005fdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fe0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	330c      	adds	r3, #12
 8005fea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005fee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005ff2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005ffa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005ffe:	e841 2300 	strex	r3, r2, [r1]
 8006002:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006006:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1d9      	bne.n	8005fc2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	3314      	adds	r3, #20
 8006014:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006016:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006018:	e853 3f00 	ldrex	r3, [r3]
 800601c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800601e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006020:	f023 0301 	bic.w	r3, r3, #1
 8006024:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	3314      	adds	r3, #20
 800602e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006032:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006036:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006038:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800603a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800603e:	e841 2300 	strex	r3, r2, [r1]
 8006042:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006044:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006046:	2b00      	cmp	r3, #0
 8006048:	d1e1      	bne.n	800600e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	3314      	adds	r3, #20
 8006050:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006052:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006054:	e853 3f00 	ldrex	r3, [r3]
 8006058:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800605a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800605c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006060:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	3314      	adds	r3, #20
 800606a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800606e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006070:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006072:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006074:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006076:	e841 2300 	strex	r3, r2, [r1]
 800607a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800607c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800607e:	2b00      	cmp	r3, #0
 8006080:	d1e3      	bne.n	800604a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2220      	movs	r2, #32
 8006086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	330c      	adds	r3, #12
 8006096:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006098:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800609a:	e853 3f00 	ldrex	r3, [r3]
 800609e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80060a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060a2:	f023 0310 	bic.w	r3, r3, #16
 80060a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	330c      	adds	r3, #12
 80060b0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80060b4:	65ba      	str	r2, [r7, #88]	; 0x58
 80060b6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80060ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80060bc:	e841 2300 	strex	r3, r2, [r1]
 80060c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80060c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d1e3      	bne.n	8006090 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060cc:	4618      	mov	r0, r3
 80060ce:	f7fb fca9 	bl	8001a24 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060da:	b29b      	uxth	r3, r3
 80060dc:	1ad3      	subs	r3, r2, r3
 80060de:	b29b      	uxth	r3, r3
 80060e0:	4619      	mov	r1, r3
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 f8b6 	bl	8006254 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80060e8:	e099      	b.n	800621e <HAL_UART_IRQHandler+0x50e>
 80060ea:	bf00      	nop
 80060ec:	08006483 	.word	0x08006483
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	1ad3      	subs	r3, r2, r3
 80060fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006104:	b29b      	uxth	r3, r3
 8006106:	2b00      	cmp	r3, #0
 8006108:	f000 808b 	beq.w	8006222 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800610c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006110:	2b00      	cmp	r3, #0
 8006112:	f000 8086 	beq.w	8006222 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	330c      	adds	r3, #12
 800611c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006120:	e853 3f00 	ldrex	r3, [r3]
 8006124:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006128:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800612c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	330c      	adds	r3, #12
 8006136:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800613a:	647a      	str	r2, [r7, #68]	; 0x44
 800613c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006140:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006142:	e841 2300 	strex	r3, r2, [r1]
 8006146:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800614a:	2b00      	cmp	r3, #0
 800614c:	d1e3      	bne.n	8006116 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	3314      	adds	r3, #20
 8006154:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006158:	e853 3f00 	ldrex	r3, [r3]
 800615c:	623b      	str	r3, [r7, #32]
   return(result);
 800615e:	6a3b      	ldr	r3, [r7, #32]
 8006160:	f023 0301 	bic.w	r3, r3, #1
 8006164:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	3314      	adds	r3, #20
 800616e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006172:	633a      	str	r2, [r7, #48]	; 0x30
 8006174:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006176:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006178:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800617a:	e841 2300 	strex	r3, r2, [r1]
 800617e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006182:	2b00      	cmp	r3, #0
 8006184:	d1e3      	bne.n	800614e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2220      	movs	r2, #32
 800618a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	330c      	adds	r3, #12
 800619a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	e853 3f00 	ldrex	r3, [r3]
 80061a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f023 0310 	bic.w	r3, r3, #16
 80061aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	330c      	adds	r3, #12
 80061b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80061b8:	61fa      	str	r2, [r7, #28]
 80061ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061bc:	69b9      	ldr	r1, [r7, #24]
 80061be:	69fa      	ldr	r2, [r7, #28]
 80061c0:	e841 2300 	strex	r3, r2, [r1]
 80061c4:	617b      	str	r3, [r7, #20]
   return(result);
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d1e3      	bne.n	8006194 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80061cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80061d0:	4619      	mov	r1, r3
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 f83e 	bl	8006254 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80061d8:	e023      	b.n	8006222 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80061da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d009      	beq.n	80061fa <HAL_UART_IRQHandler+0x4ea>
 80061e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d003      	beq.n	80061fa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 f959 	bl	80064aa <UART_Transmit_IT>
    return;
 80061f8:	e014      	b.n	8006224 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80061fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00e      	beq.n	8006224 <HAL_UART_IRQHandler+0x514>
 8006206:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800620a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800620e:	2b00      	cmp	r3, #0
 8006210:	d008      	beq.n	8006224 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 f999 	bl	800654a <UART_EndTransmit_IT>
    return;
 8006218:	e004      	b.n	8006224 <HAL_UART_IRQHandler+0x514>
    return;
 800621a:	bf00      	nop
 800621c:	e002      	b.n	8006224 <HAL_UART_IRQHandler+0x514>
      return;
 800621e:	bf00      	nop
 8006220:	e000      	b.n	8006224 <HAL_UART_IRQHandler+0x514>
      return;
 8006222:	bf00      	nop
  }
}
 8006224:	37e8      	adds	r7, #232	; 0xe8
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop

0800622c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006234:	bf00      	nop
 8006236:	370c      	adds	r7, #12
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	460b      	mov	r3, r1
 800625e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006260:	bf00      	nop
 8006262:	370c      	adds	r7, #12
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b090      	sub	sp, #64	; 0x40
 8006270:	af00      	add	r7, sp, #0
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	603b      	str	r3, [r7, #0]
 8006278:	4613      	mov	r3, r2
 800627a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800627c:	e050      	b.n	8006320 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800627e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006284:	d04c      	beq.n	8006320 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006286:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006288:	2b00      	cmp	r3, #0
 800628a:	d007      	beq.n	800629c <UART_WaitOnFlagUntilTimeout+0x30>
 800628c:	f7fb fab8 	bl	8001800 <HAL_GetTick>
 8006290:	4602      	mov	r2, r0
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	1ad3      	subs	r3, r2, r3
 8006296:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006298:	429a      	cmp	r2, r3
 800629a:	d241      	bcs.n	8006320 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	330c      	adds	r3, #12
 80062a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a6:	e853 3f00 	ldrex	r3, [r3]
 80062aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80062b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	330c      	adds	r3, #12
 80062ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80062bc:	637a      	str	r2, [r7, #52]	; 0x34
 80062be:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80062c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062c4:	e841 2300 	strex	r3, r2, [r1]
 80062c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80062ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d1e5      	bne.n	800629c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	3314      	adds	r3, #20
 80062d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	e853 3f00 	ldrex	r3, [r3]
 80062de:	613b      	str	r3, [r7, #16]
   return(result);
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	f023 0301 	bic.w	r3, r3, #1
 80062e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	3314      	adds	r3, #20
 80062ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80062f0:	623a      	str	r2, [r7, #32]
 80062f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f4:	69f9      	ldr	r1, [r7, #28]
 80062f6:	6a3a      	ldr	r2, [r7, #32]
 80062f8:	e841 2300 	strex	r3, r2, [r1]
 80062fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d1e5      	bne.n	80062d0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2220      	movs	r2, #32
 8006308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2220      	movs	r2, #32
 8006310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2200      	movs	r2, #0
 8006318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800631c:	2303      	movs	r3, #3
 800631e:	e00f      	b.n	8006340 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	4013      	ands	r3, r2
 800632a:	68ba      	ldr	r2, [r7, #8]
 800632c:	429a      	cmp	r2, r3
 800632e:	bf0c      	ite	eq
 8006330:	2301      	moveq	r3, #1
 8006332:	2300      	movne	r3, #0
 8006334:	b2db      	uxtb	r3, r3
 8006336:	461a      	mov	r2, r3
 8006338:	79fb      	ldrb	r3, [r7, #7]
 800633a:	429a      	cmp	r2, r3
 800633c:	d09f      	beq.n	800627e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	3740      	adds	r7, #64	; 0x40
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006348:	b480      	push	{r7}
 800634a:	b085      	sub	sp, #20
 800634c:	af00      	add	r7, sp, #0
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	60b9      	str	r1, [r7, #8]
 8006352:	4613      	mov	r3, r2
 8006354:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	68ba      	ldr	r2, [r7, #8]
 800635a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	88fa      	ldrh	r2, [r7, #6]
 8006360:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	88fa      	ldrh	r2, [r7, #6]
 8006366:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2200      	movs	r2, #0
 800636c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2222      	movs	r2, #34	; 0x22
 8006372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2200      	movs	r2, #0
 800637a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	68da      	ldr	r2, [r3, #12]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800638c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	695a      	ldr	r2, [r3, #20]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f042 0201 	orr.w	r2, r2, #1
 800639c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	68da      	ldr	r2, [r3, #12]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f042 0220 	orr.w	r2, r2, #32
 80063ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80063ae:	2300      	movs	r3, #0
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3714      	adds	r7, #20
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063bc:	b480      	push	{r7}
 80063be:	b095      	sub	sp, #84	; 0x54
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	330c      	adds	r3, #12
 80063ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ce:	e853 3f00 	ldrex	r3, [r3]
 80063d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80063d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	330c      	adds	r3, #12
 80063e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80063e4:	643a      	str	r2, [r7, #64]	; 0x40
 80063e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80063ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80063ec:	e841 2300 	strex	r3, r2, [r1]
 80063f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80063f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d1e5      	bne.n	80063c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	3314      	adds	r3, #20
 80063fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006400:	6a3b      	ldr	r3, [r7, #32]
 8006402:	e853 3f00 	ldrex	r3, [r3]
 8006406:	61fb      	str	r3, [r7, #28]
   return(result);
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	f023 0301 	bic.w	r3, r3, #1
 800640e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	3314      	adds	r3, #20
 8006416:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006418:	62fa      	str	r2, [r7, #44]	; 0x2c
 800641a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800641c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800641e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006420:	e841 2300 	strex	r3, r2, [r1]
 8006424:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006428:	2b00      	cmp	r3, #0
 800642a:	d1e5      	bne.n	80063f8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006430:	2b01      	cmp	r3, #1
 8006432:	d119      	bne.n	8006468 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	330c      	adds	r3, #12
 800643a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	e853 3f00 	ldrex	r3, [r3]
 8006442:	60bb      	str	r3, [r7, #8]
   return(result);
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	f023 0310 	bic.w	r3, r3, #16
 800644a:	647b      	str	r3, [r7, #68]	; 0x44
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	330c      	adds	r3, #12
 8006452:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006454:	61ba      	str	r2, [r7, #24]
 8006456:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006458:	6979      	ldr	r1, [r7, #20]
 800645a:	69ba      	ldr	r2, [r7, #24]
 800645c:	e841 2300 	strex	r3, r2, [r1]
 8006460:	613b      	str	r3, [r7, #16]
   return(result);
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d1e5      	bne.n	8006434 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2220      	movs	r2, #32
 800646c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006476:	bf00      	nop
 8006478:	3754      	adds	r7, #84	; 0x54
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr

08006482 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006482:	b580      	push	{r7, lr}
 8006484:	b084      	sub	sp, #16
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800648e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2200      	movs	r2, #0
 8006494:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2200      	movs	r2, #0
 800649a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800649c:	68f8      	ldr	r0, [r7, #12]
 800649e:	f7ff fecf 	bl	8006240 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064a2:	bf00      	nop
 80064a4:	3710      	adds	r7, #16
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}

080064aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80064aa:	b480      	push	{r7}
 80064ac:	b085      	sub	sp, #20
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	2b21      	cmp	r3, #33	; 0x21
 80064bc:	d13e      	bne.n	800653c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064c6:	d114      	bne.n	80064f2 <UART_Transmit_IT+0x48>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	691b      	ldr	r3, [r3, #16]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d110      	bne.n	80064f2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6a1b      	ldr	r3, [r3, #32]
 80064d4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	881b      	ldrh	r3, [r3, #0]
 80064da:	461a      	mov	r2, r3
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064e4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a1b      	ldr	r3, [r3, #32]
 80064ea:	1c9a      	adds	r2, r3, #2
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	621a      	str	r2, [r3, #32]
 80064f0:	e008      	b.n	8006504 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6a1b      	ldr	r3, [r3, #32]
 80064f6:	1c59      	adds	r1, r3, #1
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	6211      	str	r1, [r2, #32]
 80064fc:	781a      	ldrb	r2, [r3, #0]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006508:	b29b      	uxth	r3, r3
 800650a:	3b01      	subs	r3, #1
 800650c:	b29b      	uxth	r3, r3
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	4619      	mov	r1, r3
 8006512:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006514:	2b00      	cmp	r3, #0
 8006516:	d10f      	bne.n	8006538 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	68da      	ldr	r2, [r3, #12]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006526:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68da      	ldr	r2, [r3, #12]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006536:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006538:	2300      	movs	r3, #0
 800653a:	e000      	b.n	800653e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800653c:	2302      	movs	r3, #2
  }
}
 800653e:	4618      	mov	r0, r3
 8006540:	3714      	adds	r7, #20
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr

0800654a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800654a:	b580      	push	{r7, lr}
 800654c:	b082      	sub	sp, #8
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	68da      	ldr	r2, [r3, #12]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006560:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2220      	movs	r2, #32
 8006566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f7ff fe5e 	bl	800622c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006570:	2300      	movs	r3, #0
}
 8006572:	4618      	mov	r0, r3
 8006574:	3708      	adds	r7, #8
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}

0800657a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800657a:	b580      	push	{r7, lr}
 800657c:	b08c      	sub	sp, #48	; 0x30
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006588:	b2db      	uxtb	r3, r3
 800658a:	2b22      	cmp	r3, #34	; 0x22
 800658c:	f040 80ab 	bne.w	80066e6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006598:	d117      	bne.n	80065ca <UART_Receive_IT+0x50>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d113      	bne.n	80065ca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80065a2:	2300      	movs	r3, #0
 80065a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065aa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065b8:	b29a      	uxth	r2, r3
 80065ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065bc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c2:	1c9a      	adds	r2, r3, #2
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	629a      	str	r2, [r3, #40]	; 0x28
 80065c8:	e026      	b.n	8006618 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80065d0:	2300      	movs	r3, #0
 80065d2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065dc:	d007      	beq.n	80065ee <UART_Receive_IT+0x74>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d10a      	bne.n	80065fc <UART_Receive_IT+0x82>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	691b      	ldr	r3, [r3, #16]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d106      	bne.n	80065fc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	b2da      	uxtb	r2, r3
 80065f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f8:	701a      	strb	r2, [r3, #0]
 80065fa:	e008      	b.n	800660e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	b2db      	uxtb	r3, r3
 8006604:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006608:	b2da      	uxtb	r2, r3
 800660a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800660c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006612:	1c5a      	adds	r2, r3, #1
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800661c:	b29b      	uxth	r3, r3
 800661e:	3b01      	subs	r3, #1
 8006620:	b29b      	uxth	r3, r3
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	4619      	mov	r1, r3
 8006626:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006628:	2b00      	cmp	r3, #0
 800662a:	d15a      	bne.n	80066e2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	68da      	ldr	r2, [r3, #12]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f022 0220 	bic.w	r2, r2, #32
 800663a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	68da      	ldr	r2, [r3, #12]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800664a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	695a      	ldr	r2, [r3, #20]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f022 0201 	bic.w	r2, r2, #1
 800665a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2220      	movs	r2, #32
 8006660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006668:	2b01      	cmp	r3, #1
 800666a:	d135      	bne.n	80066d8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	330c      	adds	r3, #12
 8006678:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	e853 3f00 	ldrex	r3, [r3]
 8006680:	613b      	str	r3, [r7, #16]
   return(result);
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	f023 0310 	bic.w	r3, r3, #16
 8006688:	627b      	str	r3, [r7, #36]	; 0x24
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	330c      	adds	r3, #12
 8006690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006692:	623a      	str	r2, [r7, #32]
 8006694:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006696:	69f9      	ldr	r1, [r7, #28]
 8006698:	6a3a      	ldr	r2, [r7, #32]
 800669a:	e841 2300 	strex	r3, r2, [r1]
 800669e:	61bb      	str	r3, [r7, #24]
   return(result);
 80066a0:	69bb      	ldr	r3, [r7, #24]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d1e5      	bne.n	8006672 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 0310 	and.w	r3, r3, #16
 80066b0:	2b10      	cmp	r3, #16
 80066b2:	d10a      	bne.n	80066ca <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80066b4:	2300      	movs	r3, #0
 80066b6:	60fb      	str	r3, [r7, #12]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	60fb      	str	r3, [r7, #12]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	60fb      	str	r3, [r7, #12]
 80066c8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80066ce:	4619      	mov	r1, r3
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f7ff fdbf 	bl	8006254 <HAL_UARTEx_RxEventCallback>
 80066d6:	e002      	b.n	80066de <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f7fa fa83 	bl	8000be4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80066de:	2300      	movs	r3, #0
 80066e0:	e002      	b.n	80066e8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80066e2:	2300      	movs	r3, #0
 80066e4:	e000      	b.n	80066e8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80066e6:	2302      	movs	r3, #2
  }
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3730      	adds	r7, #48	; 0x30
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066f4:	b09f      	sub	sp, #124	; 0x7c
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	691b      	ldr	r3, [r3, #16]
 8006700:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006704:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006706:	68d9      	ldr	r1, [r3, #12]
 8006708:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	ea40 0301 	orr.w	r3, r0, r1
 8006710:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006714:	689a      	ldr	r2, [r3, #8]
 8006716:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006718:	691b      	ldr	r3, [r3, #16]
 800671a:	431a      	orrs	r2, r3
 800671c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800671e:	695b      	ldr	r3, [r3, #20]
 8006720:	431a      	orrs	r2, r3
 8006722:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006724:	69db      	ldr	r3, [r3, #28]
 8006726:	4313      	orrs	r3, r2
 8006728:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800672a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006734:	f021 010c 	bic.w	r1, r1, #12
 8006738:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800673e:	430b      	orrs	r3, r1
 8006740:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006742:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	695b      	ldr	r3, [r3, #20]
 8006748:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800674c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800674e:	6999      	ldr	r1, [r3, #24]
 8006750:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	ea40 0301 	orr.w	r3, r0, r1
 8006758:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800675a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	4bc5      	ldr	r3, [pc, #788]	; (8006a74 <UART_SetConfig+0x384>)
 8006760:	429a      	cmp	r2, r3
 8006762:	d004      	beq.n	800676e <UART_SetConfig+0x7e>
 8006764:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	4bc3      	ldr	r3, [pc, #780]	; (8006a78 <UART_SetConfig+0x388>)
 800676a:	429a      	cmp	r2, r3
 800676c:	d103      	bne.n	8006776 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800676e:	f7fe fe29 	bl	80053c4 <HAL_RCC_GetPCLK2Freq>
 8006772:	6778      	str	r0, [r7, #116]	; 0x74
 8006774:	e002      	b.n	800677c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006776:	f7fe fe11 	bl	800539c <HAL_RCC_GetPCLK1Freq>
 800677a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800677c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800677e:	69db      	ldr	r3, [r3, #28]
 8006780:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006784:	f040 80b6 	bne.w	80068f4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006788:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800678a:	461c      	mov	r4, r3
 800678c:	f04f 0500 	mov.w	r5, #0
 8006790:	4622      	mov	r2, r4
 8006792:	462b      	mov	r3, r5
 8006794:	1891      	adds	r1, r2, r2
 8006796:	6439      	str	r1, [r7, #64]	; 0x40
 8006798:	415b      	adcs	r3, r3
 800679a:	647b      	str	r3, [r7, #68]	; 0x44
 800679c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80067a0:	1912      	adds	r2, r2, r4
 80067a2:	eb45 0303 	adc.w	r3, r5, r3
 80067a6:	f04f 0000 	mov.w	r0, #0
 80067aa:	f04f 0100 	mov.w	r1, #0
 80067ae:	00d9      	lsls	r1, r3, #3
 80067b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80067b4:	00d0      	lsls	r0, r2, #3
 80067b6:	4602      	mov	r2, r0
 80067b8:	460b      	mov	r3, r1
 80067ba:	1911      	adds	r1, r2, r4
 80067bc:	6639      	str	r1, [r7, #96]	; 0x60
 80067be:	416b      	adcs	r3, r5
 80067c0:	667b      	str	r3, [r7, #100]	; 0x64
 80067c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	461a      	mov	r2, r3
 80067c8:	f04f 0300 	mov.w	r3, #0
 80067cc:	1891      	adds	r1, r2, r2
 80067ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80067d0:	415b      	adcs	r3, r3
 80067d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80067d8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80067dc:	f7f9 fcf8 	bl	80001d0 <__aeabi_uldivmod>
 80067e0:	4602      	mov	r2, r0
 80067e2:	460b      	mov	r3, r1
 80067e4:	4ba5      	ldr	r3, [pc, #660]	; (8006a7c <UART_SetConfig+0x38c>)
 80067e6:	fba3 2302 	umull	r2, r3, r3, r2
 80067ea:	095b      	lsrs	r3, r3, #5
 80067ec:	011e      	lsls	r6, r3, #4
 80067ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067f0:	461c      	mov	r4, r3
 80067f2:	f04f 0500 	mov.w	r5, #0
 80067f6:	4622      	mov	r2, r4
 80067f8:	462b      	mov	r3, r5
 80067fa:	1891      	adds	r1, r2, r2
 80067fc:	6339      	str	r1, [r7, #48]	; 0x30
 80067fe:	415b      	adcs	r3, r3
 8006800:	637b      	str	r3, [r7, #52]	; 0x34
 8006802:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006806:	1912      	adds	r2, r2, r4
 8006808:	eb45 0303 	adc.w	r3, r5, r3
 800680c:	f04f 0000 	mov.w	r0, #0
 8006810:	f04f 0100 	mov.w	r1, #0
 8006814:	00d9      	lsls	r1, r3, #3
 8006816:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800681a:	00d0      	lsls	r0, r2, #3
 800681c:	4602      	mov	r2, r0
 800681e:	460b      	mov	r3, r1
 8006820:	1911      	adds	r1, r2, r4
 8006822:	65b9      	str	r1, [r7, #88]	; 0x58
 8006824:	416b      	adcs	r3, r5
 8006826:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006828:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	461a      	mov	r2, r3
 800682e:	f04f 0300 	mov.w	r3, #0
 8006832:	1891      	adds	r1, r2, r2
 8006834:	62b9      	str	r1, [r7, #40]	; 0x28
 8006836:	415b      	adcs	r3, r3
 8006838:	62fb      	str	r3, [r7, #44]	; 0x2c
 800683a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800683e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006842:	f7f9 fcc5 	bl	80001d0 <__aeabi_uldivmod>
 8006846:	4602      	mov	r2, r0
 8006848:	460b      	mov	r3, r1
 800684a:	4b8c      	ldr	r3, [pc, #560]	; (8006a7c <UART_SetConfig+0x38c>)
 800684c:	fba3 1302 	umull	r1, r3, r3, r2
 8006850:	095b      	lsrs	r3, r3, #5
 8006852:	2164      	movs	r1, #100	; 0x64
 8006854:	fb01 f303 	mul.w	r3, r1, r3
 8006858:	1ad3      	subs	r3, r2, r3
 800685a:	00db      	lsls	r3, r3, #3
 800685c:	3332      	adds	r3, #50	; 0x32
 800685e:	4a87      	ldr	r2, [pc, #540]	; (8006a7c <UART_SetConfig+0x38c>)
 8006860:	fba2 2303 	umull	r2, r3, r2, r3
 8006864:	095b      	lsrs	r3, r3, #5
 8006866:	005b      	lsls	r3, r3, #1
 8006868:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800686c:	441e      	add	r6, r3
 800686e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006870:	4618      	mov	r0, r3
 8006872:	f04f 0100 	mov.w	r1, #0
 8006876:	4602      	mov	r2, r0
 8006878:	460b      	mov	r3, r1
 800687a:	1894      	adds	r4, r2, r2
 800687c:	623c      	str	r4, [r7, #32]
 800687e:	415b      	adcs	r3, r3
 8006880:	627b      	str	r3, [r7, #36]	; 0x24
 8006882:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006886:	1812      	adds	r2, r2, r0
 8006888:	eb41 0303 	adc.w	r3, r1, r3
 800688c:	f04f 0400 	mov.w	r4, #0
 8006890:	f04f 0500 	mov.w	r5, #0
 8006894:	00dd      	lsls	r5, r3, #3
 8006896:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800689a:	00d4      	lsls	r4, r2, #3
 800689c:	4622      	mov	r2, r4
 800689e:	462b      	mov	r3, r5
 80068a0:	1814      	adds	r4, r2, r0
 80068a2:	653c      	str	r4, [r7, #80]	; 0x50
 80068a4:	414b      	adcs	r3, r1
 80068a6:	657b      	str	r3, [r7, #84]	; 0x54
 80068a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	461a      	mov	r2, r3
 80068ae:	f04f 0300 	mov.w	r3, #0
 80068b2:	1891      	adds	r1, r2, r2
 80068b4:	61b9      	str	r1, [r7, #24]
 80068b6:	415b      	adcs	r3, r3
 80068b8:	61fb      	str	r3, [r7, #28]
 80068ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80068be:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80068c2:	f7f9 fc85 	bl	80001d0 <__aeabi_uldivmod>
 80068c6:	4602      	mov	r2, r0
 80068c8:	460b      	mov	r3, r1
 80068ca:	4b6c      	ldr	r3, [pc, #432]	; (8006a7c <UART_SetConfig+0x38c>)
 80068cc:	fba3 1302 	umull	r1, r3, r3, r2
 80068d0:	095b      	lsrs	r3, r3, #5
 80068d2:	2164      	movs	r1, #100	; 0x64
 80068d4:	fb01 f303 	mul.w	r3, r1, r3
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	00db      	lsls	r3, r3, #3
 80068dc:	3332      	adds	r3, #50	; 0x32
 80068de:	4a67      	ldr	r2, [pc, #412]	; (8006a7c <UART_SetConfig+0x38c>)
 80068e0:	fba2 2303 	umull	r2, r3, r2, r3
 80068e4:	095b      	lsrs	r3, r3, #5
 80068e6:	f003 0207 	and.w	r2, r3, #7
 80068ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4432      	add	r2, r6
 80068f0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80068f2:	e0b9      	b.n	8006a68 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80068f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068f6:	461c      	mov	r4, r3
 80068f8:	f04f 0500 	mov.w	r5, #0
 80068fc:	4622      	mov	r2, r4
 80068fe:	462b      	mov	r3, r5
 8006900:	1891      	adds	r1, r2, r2
 8006902:	6139      	str	r1, [r7, #16]
 8006904:	415b      	adcs	r3, r3
 8006906:	617b      	str	r3, [r7, #20]
 8006908:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800690c:	1912      	adds	r2, r2, r4
 800690e:	eb45 0303 	adc.w	r3, r5, r3
 8006912:	f04f 0000 	mov.w	r0, #0
 8006916:	f04f 0100 	mov.w	r1, #0
 800691a:	00d9      	lsls	r1, r3, #3
 800691c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006920:	00d0      	lsls	r0, r2, #3
 8006922:	4602      	mov	r2, r0
 8006924:	460b      	mov	r3, r1
 8006926:	eb12 0804 	adds.w	r8, r2, r4
 800692a:	eb43 0905 	adc.w	r9, r3, r5
 800692e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	4618      	mov	r0, r3
 8006934:	f04f 0100 	mov.w	r1, #0
 8006938:	f04f 0200 	mov.w	r2, #0
 800693c:	f04f 0300 	mov.w	r3, #0
 8006940:	008b      	lsls	r3, r1, #2
 8006942:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006946:	0082      	lsls	r2, r0, #2
 8006948:	4640      	mov	r0, r8
 800694a:	4649      	mov	r1, r9
 800694c:	f7f9 fc40 	bl	80001d0 <__aeabi_uldivmod>
 8006950:	4602      	mov	r2, r0
 8006952:	460b      	mov	r3, r1
 8006954:	4b49      	ldr	r3, [pc, #292]	; (8006a7c <UART_SetConfig+0x38c>)
 8006956:	fba3 2302 	umull	r2, r3, r3, r2
 800695a:	095b      	lsrs	r3, r3, #5
 800695c:	011e      	lsls	r6, r3, #4
 800695e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006960:	4618      	mov	r0, r3
 8006962:	f04f 0100 	mov.w	r1, #0
 8006966:	4602      	mov	r2, r0
 8006968:	460b      	mov	r3, r1
 800696a:	1894      	adds	r4, r2, r2
 800696c:	60bc      	str	r4, [r7, #8]
 800696e:	415b      	adcs	r3, r3
 8006970:	60fb      	str	r3, [r7, #12]
 8006972:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006976:	1812      	adds	r2, r2, r0
 8006978:	eb41 0303 	adc.w	r3, r1, r3
 800697c:	f04f 0400 	mov.w	r4, #0
 8006980:	f04f 0500 	mov.w	r5, #0
 8006984:	00dd      	lsls	r5, r3, #3
 8006986:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800698a:	00d4      	lsls	r4, r2, #3
 800698c:	4622      	mov	r2, r4
 800698e:	462b      	mov	r3, r5
 8006990:	1814      	adds	r4, r2, r0
 8006992:	64bc      	str	r4, [r7, #72]	; 0x48
 8006994:	414b      	adcs	r3, r1
 8006996:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006998:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	4618      	mov	r0, r3
 800699e:	f04f 0100 	mov.w	r1, #0
 80069a2:	f04f 0200 	mov.w	r2, #0
 80069a6:	f04f 0300 	mov.w	r3, #0
 80069aa:	008b      	lsls	r3, r1, #2
 80069ac:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80069b0:	0082      	lsls	r2, r0, #2
 80069b2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80069b6:	f7f9 fc0b 	bl	80001d0 <__aeabi_uldivmod>
 80069ba:	4602      	mov	r2, r0
 80069bc:	460b      	mov	r3, r1
 80069be:	4b2f      	ldr	r3, [pc, #188]	; (8006a7c <UART_SetConfig+0x38c>)
 80069c0:	fba3 1302 	umull	r1, r3, r3, r2
 80069c4:	095b      	lsrs	r3, r3, #5
 80069c6:	2164      	movs	r1, #100	; 0x64
 80069c8:	fb01 f303 	mul.w	r3, r1, r3
 80069cc:	1ad3      	subs	r3, r2, r3
 80069ce:	011b      	lsls	r3, r3, #4
 80069d0:	3332      	adds	r3, #50	; 0x32
 80069d2:	4a2a      	ldr	r2, [pc, #168]	; (8006a7c <UART_SetConfig+0x38c>)
 80069d4:	fba2 2303 	umull	r2, r3, r2, r3
 80069d8:	095b      	lsrs	r3, r3, #5
 80069da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069de:	441e      	add	r6, r3
 80069e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069e2:	4618      	mov	r0, r3
 80069e4:	f04f 0100 	mov.w	r1, #0
 80069e8:	4602      	mov	r2, r0
 80069ea:	460b      	mov	r3, r1
 80069ec:	1894      	adds	r4, r2, r2
 80069ee:	603c      	str	r4, [r7, #0]
 80069f0:	415b      	adcs	r3, r3
 80069f2:	607b      	str	r3, [r7, #4]
 80069f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069f8:	1812      	adds	r2, r2, r0
 80069fa:	eb41 0303 	adc.w	r3, r1, r3
 80069fe:	f04f 0400 	mov.w	r4, #0
 8006a02:	f04f 0500 	mov.w	r5, #0
 8006a06:	00dd      	lsls	r5, r3, #3
 8006a08:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006a0c:	00d4      	lsls	r4, r2, #3
 8006a0e:	4622      	mov	r2, r4
 8006a10:	462b      	mov	r3, r5
 8006a12:	eb12 0a00 	adds.w	sl, r2, r0
 8006a16:	eb43 0b01 	adc.w	fp, r3, r1
 8006a1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f04f 0100 	mov.w	r1, #0
 8006a24:	f04f 0200 	mov.w	r2, #0
 8006a28:	f04f 0300 	mov.w	r3, #0
 8006a2c:	008b      	lsls	r3, r1, #2
 8006a2e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006a32:	0082      	lsls	r2, r0, #2
 8006a34:	4650      	mov	r0, sl
 8006a36:	4659      	mov	r1, fp
 8006a38:	f7f9 fbca 	bl	80001d0 <__aeabi_uldivmod>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	460b      	mov	r3, r1
 8006a40:	4b0e      	ldr	r3, [pc, #56]	; (8006a7c <UART_SetConfig+0x38c>)
 8006a42:	fba3 1302 	umull	r1, r3, r3, r2
 8006a46:	095b      	lsrs	r3, r3, #5
 8006a48:	2164      	movs	r1, #100	; 0x64
 8006a4a:	fb01 f303 	mul.w	r3, r1, r3
 8006a4e:	1ad3      	subs	r3, r2, r3
 8006a50:	011b      	lsls	r3, r3, #4
 8006a52:	3332      	adds	r3, #50	; 0x32
 8006a54:	4a09      	ldr	r2, [pc, #36]	; (8006a7c <UART_SetConfig+0x38c>)
 8006a56:	fba2 2303 	umull	r2, r3, r2, r3
 8006a5a:	095b      	lsrs	r3, r3, #5
 8006a5c:	f003 020f 	and.w	r2, r3, #15
 8006a60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4432      	add	r2, r6
 8006a66:	609a      	str	r2, [r3, #8]
}
 8006a68:	bf00      	nop
 8006a6a:	377c      	adds	r7, #124	; 0x7c
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a72:	bf00      	nop
 8006a74:	40011000 	.word	0x40011000
 8006a78:	40011400 	.word	0x40011400
 8006a7c:	51eb851f 	.word	0x51eb851f

08006a80 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b085      	sub	sp, #20
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	4603      	mov	r3, r0
 8006a88:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006a8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a92:	2b84      	cmp	r3, #132	; 0x84
 8006a94:	d005      	beq.n	8006aa2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006a96:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	3303      	adds	r3, #3
 8006aa0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3714      	adds	r7, #20
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr

08006ab0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006ab4:	f000 faf6 	bl	80070a4 <vTaskStartScheduler>
  
  return osOK;
 8006ab8:	2300      	movs	r3, #0
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	bd80      	pop	{r7, pc}

08006abe <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006abe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ac0:	b089      	sub	sp, #36	; 0x24
 8006ac2:	af04      	add	r7, sp, #16
 8006ac4:	6078      	str	r0, [r7, #4]
 8006ac6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	695b      	ldr	r3, [r3, #20]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d020      	beq.n	8006b12 <osThreadCreate+0x54>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	699b      	ldr	r3, [r3, #24]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d01c      	beq.n	8006b12 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	685c      	ldr	r4, [r3, #4]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681d      	ldr	r5, [r3, #0]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	691e      	ldr	r6, [r3, #16]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006aea:	4618      	mov	r0, r3
 8006aec:	f7ff ffc8 	bl	8006a80 <makeFreeRtosPriority>
 8006af0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	695b      	ldr	r3, [r3, #20]
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006afa:	9202      	str	r2, [sp, #8]
 8006afc:	9301      	str	r3, [sp, #4]
 8006afe:	9100      	str	r1, [sp, #0]
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	4632      	mov	r2, r6
 8006b04:	4629      	mov	r1, r5
 8006b06:	4620      	mov	r0, r4
 8006b08:	f000 f8ed 	bl	8006ce6 <xTaskCreateStatic>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	60fb      	str	r3, [r7, #12]
 8006b10:	e01c      	b.n	8006b4c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	685c      	ldr	r4, [r3, #4]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006b1e:	b29e      	uxth	r6, r3
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006b26:	4618      	mov	r0, r3
 8006b28:	f7ff ffaa 	bl	8006a80 <makeFreeRtosPriority>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	f107 030c 	add.w	r3, r7, #12
 8006b32:	9301      	str	r3, [sp, #4]
 8006b34:	9200      	str	r2, [sp, #0]
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	4632      	mov	r2, r6
 8006b3a:	4629      	mov	r1, r5
 8006b3c:	4620      	mov	r0, r4
 8006b3e:	f000 f92f 	bl	8006da0 <xTaskCreate>
 8006b42:	4603      	mov	r3, r0
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d001      	beq.n	8006b4c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	e000      	b.n	8006b4e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3714      	adds	r7, #20
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006b56 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006b56:	b580      	push	{r7, lr}
 8006b58:	b084      	sub	sp, #16
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d001      	beq.n	8006b6c <osDelay+0x16>
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	e000      	b.n	8006b6e <osDelay+0x18>
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f000 fa64 	bl	800703c <vTaskDelay>
  
  return osOK;
 8006b74:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3710      	adds	r7, #16
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}

08006b7e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006b7e:	b480      	push	{r7}
 8006b80:	b083      	sub	sp, #12
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f103 0208 	add.w	r2, r3, #8
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f04f 32ff 	mov.w	r2, #4294967295
 8006b96:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f103 0208 	add.w	r2, r3, #8
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f103 0208 	add.w	r2, r3, #8
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006bb2:	bf00      	nop
 8006bb4:	370c      	adds	r7, #12
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr

08006bbe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006bbe:	b480      	push	{r7}
 8006bc0:	b083      	sub	sp, #12
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006bcc:	bf00      	nop
 8006bce:	370c      	adds	r7, #12
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr

08006bd8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b085      	sub	sp, #20
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	68fa      	ldr	r2, [r7, #12]
 8006bec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	689a      	ldr	r2, [r3, #8]
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	683a      	ldr	r2, [r7, #0]
 8006bfc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	683a      	ldr	r2, [r7, #0]
 8006c02:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	1c5a      	adds	r2, r3, #1
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	601a      	str	r2, [r3, #0]
}
 8006c14:	bf00      	nop
 8006c16:	3714      	adds	r7, #20
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006c20:	b480      	push	{r7}
 8006c22:	b085      	sub	sp, #20
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c36:	d103      	bne.n	8006c40 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	691b      	ldr	r3, [r3, #16]
 8006c3c:	60fb      	str	r3, [r7, #12]
 8006c3e:	e00c      	b.n	8006c5a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	3308      	adds	r3, #8
 8006c44:	60fb      	str	r3, [r7, #12]
 8006c46:	e002      	b.n	8006c4e <vListInsert+0x2e>
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	60fb      	str	r3, [r7, #12]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	68ba      	ldr	r2, [r7, #8]
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d2f6      	bcs.n	8006c48 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	685a      	ldr	r2, [r3, #4]
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	683a      	ldr	r2, [r7, #0]
 8006c68:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	68fa      	ldr	r2, [r7, #12]
 8006c6e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	683a      	ldr	r2, [r7, #0]
 8006c74:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	1c5a      	adds	r2, r3, #1
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	601a      	str	r2, [r3, #0]
}
 8006c86:	bf00      	nop
 8006c88:	3714      	adds	r7, #20
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr

08006c92 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006c92:	b480      	push	{r7}
 8006c94:	b085      	sub	sp, #20
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	6892      	ldr	r2, [r2, #8]
 8006ca8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	6852      	ldr	r2, [r2, #4]
 8006cb2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d103      	bne.n	8006cc6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	689a      	ldr	r2, [r3, #8]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	1e5a      	subs	r2, r3, #1
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3714      	adds	r7, #20
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr

08006ce6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006ce6:	b580      	push	{r7, lr}
 8006ce8:	b08e      	sub	sp, #56	; 0x38
 8006cea:	af04      	add	r7, sp, #16
 8006cec:	60f8      	str	r0, [r7, #12]
 8006cee:	60b9      	str	r1, [r7, #8]
 8006cf0:	607a      	str	r2, [r7, #4]
 8006cf2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d10a      	bne.n	8006d10 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cfe:	f383 8811 	msr	BASEPRI, r3
 8006d02:	f3bf 8f6f 	isb	sy
 8006d06:	f3bf 8f4f 	dsb	sy
 8006d0a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006d0c:	bf00      	nop
 8006d0e:	e7fe      	b.n	8006d0e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d10a      	bne.n	8006d2c <xTaskCreateStatic+0x46>
	__asm volatile
 8006d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d1a:	f383 8811 	msr	BASEPRI, r3
 8006d1e:	f3bf 8f6f 	isb	sy
 8006d22:	f3bf 8f4f 	dsb	sy
 8006d26:	61fb      	str	r3, [r7, #28]
}
 8006d28:	bf00      	nop
 8006d2a:	e7fe      	b.n	8006d2a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006d2c:	23b4      	movs	r3, #180	; 0xb4
 8006d2e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	2bb4      	cmp	r3, #180	; 0xb4
 8006d34:	d00a      	beq.n	8006d4c <xTaskCreateStatic+0x66>
	__asm volatile
 8006d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d3a:	f383 8811 	msr	BASEPRI, r3
 8006d3e:	f3bf 8f6f 	isb	sy
 8006d42:	f3bf 8f4f 	dsb	sy
 8006d46:	61bb      	str	r3, [r7, #24]
}
 8006d48:	bf00      	nop
 8006d4a:	e7fe      	b.n	8006d4a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006d4c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d01e      	beq.n	8006d92 <xTaskCreateStatic+0xac>
 8006d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d01b      	beq.n	8006d92 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d5c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d62:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d66:	2202      	movs	r2, #2
 8006d68:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	9303      	str	r3, [sp, #12]
 8006d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d72:	9302      	str	r3, [sp, #8]
 8006d74:	f107 0314 	add.w	r3, r7, #20
 8006d78:	9301      	str	r3, [sp, #4]
 8006d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7c:	9300      	str	r3, [sp, #0]
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	68b9      	ldr	r1, [r7, #8]
 8006d84:	68f8      	ldr	r0, [r7, #12]
 8006d86:	f000 f851 	bl	8006e2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006d8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006d8c:	f000 f8ec 	bl	8006f68 <prvAddNewTaskToReadyList>
 8006d90:	e001      	b.n	8006d96 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006d92:	2300      	movs	r3, #0
 8006d94:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006d96:	697b      	ldr	r3, [r7, #20]
	}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3728      	adds	r7, #40	; 0x28
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b08c      	sub	sp, #48	; 0x30
 8006da4:	af04      	add	r7, sp, #16
 8006da6:	60f8      	str	r0, [r7, #12]
 8006da8:	60b9      	str	r1, [r7, #8]
 8006daa:	603b      	str	r3, [r7, #0]
 8006dac:	4613      	mov	r3, r2
 8006dae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006db0:	88fb      	ldrh	r3, [r7, #6]
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	4618      	mov	r0, r3
 8006db6:	f000 feef 	bl	8007b98 <pvPortMalloc>
 8006dba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d00e      	beq.n	8006de0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006dc2:	20b4      	movs	r0, #180	; 0xb4
 8006dc4:	f000 fee8 	bl	8007b98 <pvPortMalloc>
 8006dc8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006dca:	69fb      	ldr	r3, [r7, #28]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d003      	beq.n	8006dd8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006dd0:	69fb      	ldr	r3, [r7, #28]
 8006dd2:	697a      	ldr	r2, [r7, #20]
 8006dd4:	631a      	str	r2, [r3, #48]	; 0x30
 8006dd6:	e005      	b.n	8006de4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006dd8:	6978      	ldr	r0, [r7, #20]
 8006dda:	f000 ffa9 	bl	8007d30 <vPortFree>
 8006dde:	e001      	b.n	8006de4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006de0:	2300      	movs	r3, #0
 8006de2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006de4:	69fb      	ldr	r3, [r7, #28]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d017      	beq.n	8006e1a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006dea:	69fb      	ldr	r3, [r7, #28]
 8006dec:	2200      	movs	r2, #0
 8006dee:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006df2:	88fa      	ldrh	r2, [r7, #6]
 8006df4:	2300      	movs	r3, #0
 8006df6:	9303      	str	r3, [sp, #12]
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	9302      	str	r3, [sp, #8]
 8006dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dfe:	9301      	str	r3, [sp, #4]
 8006e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e02:	9300      	str	r3, [sp, #0]
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	68b9      	ldr	r1, [r7, #8]
 8006e08:	68f8      	ldr	r0, [r7, #12]
 8006e0a:	f000 f80f 	bl	8006e2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006e0e:	69f8      	ldr	r0, [r7, #28]
 8006e10:	f000 f8aa 	bl	8006f68 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006e14:	2301      	movs	r3, #1
 8006e16:	61bb      	str	r3, [r7, #24]
 8006e18:	e002      	b.n	8006e20 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8006e1e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006e20:	69bb      	ldr	r3, [r7, #24]
	}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3720      	adds	r7, #32
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
	...

08006e2c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b088      	sub	sp, #32
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	60f8      	str	r0, [r7, #12]
 8006e34:	60b9      	str	r1, [r7, #8]
 8006e36:	607a      	str	r2, [r7, #4]
 8006e38:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006e44:	3b01      	subs	r3, #1
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	4413      	add	r3, r2
 8006e4a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	f023 0307 	bic.w	r3, r3, #7
 8006e52:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006e54:	69bb      	ldr	r3, [r7, #24]
 8006e56:	f003 0307 	and.w	r3, r3, #7
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d00a      	beq.n	8006e74 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e62:	f383 8811 	msr	BASEPRI, r3
 8006e66:	f3bf 8f6f 	isb	sy
 8006e6a:	f3bf 8f4f 	dsb	sy
 8006e6e:	617b      	str	r3, [r7, #20]
}
 8006e70:	bf00      	nop
 8006e72:	e7fe      	b.n	8006e72 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d01f      	beq.n	8006eba <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	61fb      	str	r3, [r7, #28]
 8006e7e:	e012      	b.n	8006ea6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006e80:	68ba      	ldr	r2, [r7, #8]
 8006e82:	69fb      	ldr	r3, [r7, #28]
 8006e84:	4413      	add	r3, r2
 8006e86:	7819      	ldrb	r1, [r3, #0]
 8006e88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e8a:	69fb      	ldr	r3, [r7, #28]
 8006e8c:	4413      	add	r3, r2
 8006e8e:	3334      	adds	r3, #52	; 0x34
 8006e90:	460a      	mov	r2, r1
 8006e92:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006e94:	68ba      	ldr	r2, [r7, #8]
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	4413      	add	r3, r2
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d006      	beq.n	8006eae <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	61fb      	str	r3, [r7, #28]
 8006ea6:	69fb      	ldr	r3, [r7, #28]
 8006ea8:	2b0f      	cmp	r3, #15
 8006eaa:	d9e9      	bls.n	8006e80 <prvInitialiseNewTask+0x54>
 8006eac:	e000      	b.n	8006eb0 <prvInitialiseNewTask+0x84>
			{
				break;
 8006eae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006eb8:	e003      	b.n	8006ec2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec4:	2b06      	cmp	r3, #6
 8006ec6:	d901      	bls.n	8006ecc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006ec8:	2306      	movs	r3, #6
 8006eca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ece:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ed0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ed6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eda:	2200      	movs	r2, #0
 8006edc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee0:	3304      	adds	r3, #4
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f7ff fe6b 	bl	8006bbe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eea:	3318      	adds	r3, #24
 8006eec:	4618      	mov	r0, r3
 8006eee:	f7ff fe66 	bl	8006bbe <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ef6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006efa:	f1c3 0207 	rsb	r2, r3, #7
 8006efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f00:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f06:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f12:	2200      	movs	r2, #0
 8006f14:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f1a:	334c      	adds	r3, #76	; 0x4c
 8006f1c:	2260      	movs	r2, #96	; 0x60
 8006f1e:	2100      	movs	r1, #0
 8006f20:	4618      	mov	r0, r3
 8006f22:	f001 f863 	bl	8007fec <memset>
 8006f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f28:	4a0c      	ldr	r2, [pc, #48]	; (8006f5c <prvInitialiseNewTask+0x130>)
 8006f2a:	651a      	str	r2, [r3, #80]	; 0x50
 8006f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f2e:	4a0c      	ldr	r2, [pc, #48]	; (8006f60 <prvInitialiseNewTask+0x134>)
 8006f30:	655a      	str	r2, [r3, #84]	; 0x54
 8006f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f34:	4a0b      	ldr	r2, [pc, #44]	; (8006f64 <prvInitialiseNewTask+0x138>)
 8006f36:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006f38:	683a      	ldr	r2, [r7, #0]
 8006f3a:	68f9      	ldr	r1, [r7, #12]
 8006f3c:	69b8      	ldr	r0, [r7, #24]
 8006f3e:	f000 fc1f 	bl	8007780 <pxPortInitialiseStack>
 8006f42:	4602      	mov	r2, r0
 8006f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f46:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d002      	beq.n	8006f54 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f52:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f54:	bf00      	nop
 8006f56:	3720      	adds	r7, #32
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}
 8006f5c:	08008b3c 	.word	0x08008b3c
 8006f60:	08008b5c 	.word	0x08008b5c
 8006f64:	08008b1c 	.word	0x08008b1c

08006f68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006f70:	f000 fd30 	bl	80079d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006f74:	4b2a      	ldr	r3, [pc, #168]	; (8007020 <prvAddNewTaskToReadyList+0xb8>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	3301      	adds	r3, #1
 8006f7a:	4a29      	ldr	r2, [pc, #164]	; (8007020 <prvAddNewTaskToReadyList+0xb8>)
 8006f7c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006f7e:	4b29      	ldr	r3, [pc, #164]	; (8007024 <prvAddNewTaskToReadyList+0xbc>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d109      	bne.n	8006f9a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006f86:	4a27      	ldr	r2, [pc, #156]	; (8007024 <prvAddNewTaskToReadyList+0xbc>)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006f8c:	4b24      	ldr	r3, [pc, #144]	; (8007020 <prvAddNewTaskToReadyList+0xb8>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d110      	bne.n	8006fb6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006f94:	f000 facc 	bl	8007530 <prvInitialiseTaskLists>
 8006f98:	e00d      	b.n	8006fb6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006f9a:	4b23      	ldr	r3, [pc, #140]	; (8007028 <prvAddNewTaskToReadyList+0xc0>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d109      	bne.n	8006fb6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006fa2:	4b20      	ldr	r3, [pc, #128]	; (8007024 <prvAddNewTaskToReadyList+0xbc>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d802      	bhi.n	8006fb6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006fb0:	4a1c      	ldr	r2, [pc, #112]	; (8007024 <prvAddNewTaskToReadyList+0xbc>)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006fb6:	4b1d      	ldr	r3, [pc, #116]	; (800702c <prvAddNewTaskToReadyList+0xc4>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	3301      	adds	r3, #1
 8006fbc:	4a1b      	ldr	r2, [pc, #108]	; (800702c <prvAddNewTaskToReadyList+0xc4>)
 8006fbe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	409a      	lsls	r2, r3
 8006fc8:	4b19      	ldr	r3, [pc, #100]	; (8007030 <prvAddNewTaskToReadyList+0xc8>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	4a18      	ldr	r2, [pc, #96]	; (8007030 <prvAddNewTaskToReadyList+0xc8>)
 8006fd0:	6013      	str	r3, [r2, #0]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fd6:	4613      	mov	r3, r2
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	4413      	add	r3, r2
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	4a15      	ldr	r2, [pc, #84]	; (8007034 <prvAddNewTaskToReadyList+0xcc>)
 8006fe0:	441a      	add	r2, r3
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	3304      	adds	r3, #4
 8006fe6:	4619      	mov	r1, r3
 8006fe8:	4610      	mov	r0, r2
 8006fea:	f7ff fdf5 	bl	8006bd8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006fee:	f000 fd21 	bl	8007a34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006ff2:	4b0d      	ldr	r3, [pc, #52]	; (8007028 <prvAddNewTaskToReadyList+0xc0>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d00e      	beq.n	8007018 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006ffa:	4b0a      	ldr	r3, [pc, #40]	; (8007024 <prvAddNewTaskToReadyList+0xbc>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007004:	429a      	cmp	r2, r3
 8007006:	d207      	bcs.n	8007018 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007008:	4b0b      	ldr	r3, [pc, #44]	; (8007038 <prvAddNewTaskToReadyList+0xd0>)
 800700a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800700e:	601a      	str	r2, [r3, #0]
 8007010:	f3bf 8f4f 	dsb	sy
 8007014:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007018:	bf00      	nop
 800701a:	3708      	adds	r7, #8
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}
 8007020:	20000690 	.word	0x20000690
 8007024:	20000590 	.word	0x20000590
 8007028:	2000069c 	.word	0x2000069c
 800702c:	200006ac 	.word	0x200006ac
 8007030:	20000698 	.word	0x20000698
 8007034:	20000594 	.word	0x20000594
 8007038:	e000ed04 	.word	0xe000ed04

0800703c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800703c:	b580      	push	{r7, lr}
 800703e:	b084      	sub	sp, #16
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007044:	2300      	movs	r3, #0
 8007046:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d017      	beq.n	800707e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800704e:	4b13      	ldr	r3, [pc, #76]	; (800709c <vTaskDelay+0x60>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d00a      	beq.n	800706c <vTaskDelay+0x30>
	__asm volatile
 8007056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800705a:	f383 8811 	msr	BASEPRI, r3
 800705e:	f3bf 8f6f 	isb	sy
 8007062:	f3bf 8f4f 	dsb	sy
 8007066:	60bb      	str	r3, [r7, #8]
}
 8007068:	bf00      	nop
 800706a:	e7fe      	b.n	800706a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800706c:	f000 f884 	bl	8007178 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007070:	2100      	movs	r1, #0
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 fb1e 	bl	80076b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007078:	f000 f88c 	bl	8007194 <xTaskResumeAll>
 800707c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d107      	bne.n	8007094 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007084:	4b06      	ldr	r3, [pc, #24]	; (80070a0 <vTaskDelay+0x64>)
 8007086:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800708a:	601a      	str	r2, [r3, #0]
 800708c:	f3bf 8f4f 	dsb	sy
 8007090:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007094:	bf00      	nop
 8007096:	3710      	adds	r7, #16
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}
 800709c:	200006b8 	.word	0x200006b8
 80070a0:	e000ed04 	.word	0xe000ed04

080070a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b08a      	sub	sp, #40	; 0x28
 80070a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80070aa:	2300      	movs	r3, #0
 80070ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80070ae:	2300      	movs	r3, #0
 80070b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80070b2:	463a      	mov	r2, r7
 80070b4:	1d39      	adds	r1, r7, #4
 80070b6:	f107 0308 	add.w	r3, r7, #8
 80070ba:	4618      	mov	r0, r3
 80070bc:	f7f9 fa04 	bl	80004c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80070c0:	6839      	ldr	r1, [r7, #0]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	68ba      	ldr	r2, [r7, #8]
 80070c6:	9202      	str	r2, [sp, #8]
 80070c8:	9301      	str	r3, [sp, #4]
 80070ca:	2300      	movs	r3, #0
 80070cc:	9300      	str	r3, [sp, #0]
 80070ce:	2300      	movs	r3, #0
 80070d0:	460a      	mov	r2, r1
 80070d2:	4921      	ldr	r1, [pc, #132]	; (8007158 <vTaskStartScheduler+0xb4>)
 80070d4:	4821      	ldr	r0, [pc, #132]	; (800715c <vTaskStartScheduler+0xb8>)
 80070d6:	f7ff fe06 	bl	8006ce6 <xTaskCreateStatic>
 80070da:	4603      	mov	r3, r0
 80070dc:	4a20      	ldr	r2, [pc, #128]	; (8007160 <vTaskStartScheduler+0xbc>)
 80070de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80070e0:	4b1f      	ldr	r3, [pc, #124]	; (8007160 <vTaskStartScheduler+0xbc>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d002      	beq.n	80070ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80070e8:	2301      	movs	r3, #1
 80070ea:	617b      	str	r3, [r7, #20]
 80070ec:	e001      	b.n	80070f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80070ee:	2300      	movs	r3, #0
 80070f0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d11b      	bne.n	8007130 <vTaskStartScheduler+0x8c>
	__asm volatile
 80070f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070fc:	f383 8811 	msr	BASEPRI, r3
 8007100:	f3bf 8f6f 	isb	sy
 8007104:	f3bf 8f4f 	dsb	sy
 8007108:	613b      	str	r3, [r7, #16]
}
 800710a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800710c:	4b15      	ldr	r3, [pc, #84]	; (8007164 <vTaskStartScheduler+0xc0>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	334c      	adds	r3, #76	; 0x4c
 8007112:	4a15      	ldr	r2, [pc, #84]	; (8007168 <vTaskStartScheduler+0xc4>)
 8007114:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007116:	4b15      	ldr	r3, [pc, #84]	; (800716c <vTaskStartScheduler+0xc8>)
 8007118:	f04f 32ff 	mov.w	r2, #4294967295
 800711c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800711e:	4b14      	ldr	r3, [pc, #80]	; (8007170 <vTaskStartScheduler+0xcc>)
 8007120:	2201      	movs	r2, #1
 8007122:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007124:	4b13      	ldr	r3, [pc, #76]	; (8007174 <vTaskStartScheduler+0xd0>)
 8007126:	2200      	movs	r2, #0
 8007128:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800712a:	f000 fbb1 	bl	8007890 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800712e:	e00e      	b.n	800714e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007136:	d10a      	bne.n	800714e <vTaskStartScheduler+0xaa>
	__asm volatile
 8007138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800713c:	f383 8811 	msr	BASEPRI, r3
 8007140:	f3bf 8f6f 	isb	sy
 8007144:	f3bf 8f4f 	dsb	sy
 8007148:	60fb      	str	r3, [r7, #12]
}
 800714a:	bf00      	nop
 800714c:	e7fe      	b.n	800714c <vTaskStartScheduler+0xa8>
}
 800714e:	bf00      	nop
 8007150:	3718      	adds	r7, #24
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}
 8007156:	bf00      	nop
 8007158:	080082e4 	.word	0x080082e4
 800715c:	08007501 	.word	0x08007501
 8007160:	200006b4 	.word	0x200006b4
 8007164:	20000590 	.word	0x20000590
 8007168:	2000002c 	.word	0x2000002c
 800716c:	200006b0 	.word	0x200006b0
 8007170:	2000069c 	.word	0x2000069c
 8007174:	20000694 	.word	0x20000694

08007178 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007178:	b480      	push	{r7}
 800717a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800717c:	4b04      	ldr	r3, [pc, #16]	; (8007190 <vTaskSuspendAll+0x18>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	3301      	adds	r3, #1
 8007182:	4a03      	ldr	r2, [pc, #12]	; (8007190 <vTaskSuspendAll+0x18>)
 8007184:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007186:	bf00      	nop
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr
 8007190:	200006b8 	.word	0x200006b8

08007194 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b084      	sub	sp, #16
 8007198:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800719a:	2300      	movs	r3, #0
 800719c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800719e:	2300      	movs	r3, #0
 80071a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80071a2:	4b41      	ldr	r3, [pc, #260]	; (80072a8 <xTaskResumeAll+0x114>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d10a      	bne.n	80071c0 <xTaskResumeAll+0x2c>
	__asm volatile
 80071aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ae:	f383 8811 	msr	BASEPRI, r3
 80071b2:	f3bf 8f6f 	isb	sy
 80071b6:	f3bf 8f4f 	dsb	sy
 80071ba:	603b      	str	r3, [r7, #0]
}
 80071bc:	bf00      	nop
 80071be:	e7fe      	b.n	80071be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80071c0:	f000 fc08 	bl	80079d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80071c4:	4b38      	ldr	r3, [pc, #224]	; (80072a8 <xTaskResumeAll+0x114>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	3b01      	subs	r3, #1
 80071ca:	4a37      	ldr	r2, [pc, #220]	; (80072a8 <xTaskResumeAll+0x114>)
 80071cc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071ce:	4b36      	ldr	r3, [pc, #216]	; (80072a8 <xTaskResumeAll+0x114>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d161      	bne.n	800729a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80071d6:	4b35      	ldr	r3, [pc, #212]	; (80072ac <xTaskResumeAll+0x118>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d05d      	beq.n	800729a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80071de:	e02e      	b.n	800723e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071e0:	4b33      	ldr	r3, [pc, #204]	; (80072b0 <xTaskResumeAll+0x11c>)
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	68db      	ldr	r3, [r3, #12]
 80071e6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	3318      	adds	r3, #24
 80071ec:	4618      	mov	r0, r3
 80071ee:	f7ff fd50 	bl	8006c92 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	3304      	adds	r3, #4
 80071f6:	4618      	mov	r0, r3
 80071f8:	f7ff fd4b 	bl	8006c92 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007200:	2201      	movs	r2, #1
 8007202:	409a      	lsls	r2, r3
 8007204:	4b2b      	ldr	r3, [pc, #172]	; (80072b4 <xTaskResumeAll+0x120>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4313      	orrs	r3, r2
 800720a:	4a2a      	ldr	r2, [pc, #168]	; (80072b4 <xTaskResumeAll+0x120>)
 800720c:	6013      	str	r3, [r2, #0]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007212:	4613      	mov	r3, r2
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	4413      	add	r3, r2
 8007218:	009b      	lsls	r3, r3, #2
 800721a:	4a27      	ldr	r2, [pc, #156]	; (80072b8 <xTaskResumeAll+0x124>)
 800721c:	441a      	add	r2, r3
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	3304      	adds	r3, #4
 8007222:	4619      	mov	r1, r3
 8007224:	4610      	mov	r0, r2
 8007226:	f7ff fcd7 	bl	8006bd8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800722e:	4b23      	ldr	r3, [pc, #140]	; (80072bc <xTaskResumeAll+0x128>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007234:	429a      	cmp	r2, r3
 8007236:	d302      	bcc.n	800723e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007238:	4b21      	ldr	r3, [pc, #132]	; (80072c0 <xTaskResumeAll+0x12c>)
 800723a:	2201      	movs	r2, #1
 800723c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800723e:	4b1c      	ldr	r3, [pc, #112]	; (80072b0 <xTaskResumeAll+0x11c>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d1cc      	bne.n	80071e0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d001      	beq.n	8007250 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800724c:	f000 fa12 	bl	8007674 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007250:	4b1c      	ldr	r3, [pc, #112]	; (80072c4 <xTaskResumeAll+0x130>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d010      	beq.n	800727e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800725c:	f000 f836 	bl	80072cc <xTaskIncrementTick>
 8007260:	4603      	mov	r3, r0
 8007262:	2b00      	cmp	r3, #0
 8007264:	d002      	beq.n	800726c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007266:	4b16      	ldr	r3, [pc, #88]	; (80072c0 <xTaskResumeAll+0x12c>)
 8007268:	2201      	movs	r2, #1
 800726a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	3b01      	subs	r3, #1
 8007270:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d1f1      	bne.n	800725c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007278:	4b12      	ldr	r3, [pc, #72]	; (80072c4 <xTaskResumeAll+0x130>)
 800727a:	2200      	movs	r2, #0
 800727c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800727e:	4b10      	ldr	r3, [pc, #64]	; (80072c0 <xTaskResumeAll+0x12c>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d009      	beq.n	800729a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007286:	2301      	movs	r3, #1
 8007288:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800728a:	4b0f      	ldr	r3, [pc, #60]	; (80072c8 <xTaskResumeAll+0x134>)
 800728c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007290:	601a      	str	r2, [r3, #0]
 8007292:	f3bf 8f4f 	dsb	sy
 8007296:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800729a:	f000 fbcb 	bl	8007a34 <vPortExitCritical>

	return xAlreadyYielded;
 800729e:	68bb      	ldr	r3, [r7, #8]
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3710      	adds	r7, #16
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	200006b8 	.word	0x200006b8
 80072ac:	20000690 	.word	0x20000690
 80072b0:	20000650 	.word	0x20000650
 80072b4:	20000698 	.word	0x20000698
 80072b8:	20000594 	.word	0x20000594
 80072bc:	20000590 	.word	0x20000590
 80072c0:	200006a4 	.word	0x200006a4
 80072c4:	200006a0 	.word	0x200006a0
 80072c8:	e000ed04 	.word	0xe000ed04

080072cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b086      	sub	sp, #24
 80072d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80072d2:	2300      	movs	r3, #0
 80072d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072d6:	4b4e      	ldr	r3, [pc, #312]	; (8007410 <xTaskIncrementTick+0x144>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	f040 808e 	bne.w	80073fc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80072e0:	4b4c      	ldr	r3, [pc, #304]	; (8007414 <xTaskIncrementTick+0x148>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	3301      	adds	r3, #1
 80072e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80072e8:	4a4a      	ldr	r2, [pc, #296]	; (8007414 <xTaskIncrementTick+0x148>)
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d120      	bne.n	8007336 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80072f4:	4b48      	ldr	r3, [pc, #288]	; (8007418 <xTaskIncrementTick+0x14c>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d00a      	beq.n	8007314 <xTaskIncrementTick+0x48>
	__asm volatile
 80072fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007302:	f383 8811 	msr	BASEPRI, r3
 8007306:	f3bf 8f6f 	isb	sy
 800730a:	f3bf 8f4f 	dsb	sy
 800730e:	603b      	str	r3, [r7, #0]
}
 8007310:	bf00      	nop
 8007312:	e7fe      	b.n	8007312 <xTaskIncrementTick+0x46>
 8007314:	4b40      	ldr	r3, [pc, #256]	; (8007418 <xTaskIncrementTick+0x14c>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	60fb      	str	r3, [r7, #12]
 800731a:	4b40      	ldr	r3, [pc, #256]	; (800741c <xTaskIncrementTick+0x150>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a3e      	ldr	r2, [pc, #248]	; (8007418 <xTaskIncrementTick+0x14c>)
 8007320:	6013      	str	r3, [r2, #0]
 8007322:	4a3e      	ldr	r2, [pc, #248]	; (800741c <xTaskIncrementTick+0x150>)
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	6013      	str	r3, [r2, #0]
 8007328:	4b3d      	ldr	r3, [pc, #244]	; (8007420 <xTaskIncrementTick+0x154>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	3301      	adds	r3, #1
 800732e:	4a3c      	ldr	r2, [pc, #240]	; (8007420 <xTaskIncrementTick+0x154>)
 8007330:	6013      	str	r3, [r2, #0]
 8007332:	f000 f99f 	bl	8007674 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007336:	4b3b      	ldr	r3, [pc, #236]	; (8007424 <xTaskIncrementTick+0x158>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	693a      	ldr	r2, [r7, #16]
 800733c:	429a      	cmp	r2, r3
 800733e:	d348      	bcc.n	80073d2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007340:	4b35      	ldr	r3, [pc, #212]	; (8007418 <xTaskIncrementTick+0x14c>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d104      	bne.n	8007354 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800734a:	4b36      	ldr	r3, [pc, #216]	; (8007424 <xTaskIncrementTick+0x158>)
 800734c:	f04f 32ff 	mov.w	r2, #4294967295
 8007350:	601a      	str	r2, [r3, #0]
					break;
 8007352:	e03e      	b.n	80073d2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007354:	4b30      	ldr	r3, [pc, #192]	; (8007418 <xTaskIncrementTick+0x14c>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	68db      	ldr	r3, [r3, #12]
 800735a:	68db      	ldr	r3, [r3, #12]
 800735c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007364:	693a      	ldr	r2, [r7, #16]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	429a      	cmp	r2, r3
 800736a:	d203      	bcs.n	8007374 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800736c:	4a2d      	ldr	r2, [pc, #180]	; (8007424 <xTaskIncrementTick+0x158>)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007372:	e02e      	b.n	80073d2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	3304      	adds	r3, #4
 8007378:	4618      	mov	r0, r3
 800737a:	f7ff fc8a 	bl	8006c92 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007382:	2b00      	cmp	r3, #0
 8007384:	d004      	beq.n	8007390 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	3318      	adds	r3, #24
 800738a:	4618      	mov	r0, r3
 800738c:	f7ff fc81 	bl	8006c92 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007394:	2201      	movs	r2, #1
 8007396:	409a      	lsls	r2, r3
 8007398:	4b23      	ldr	r3, [pc, #140]	; (8007428 <xTaskIncrementTick+0x15c>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4313      	orrs	r3, r2
 800739e:	4a22      	ldr	r2, [pc, #136]	; (8007428 <xTaskIncrementTick+0x15c>)
 80073a0:	6013      	str	r3, [r2, #0]
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073a6:	4613      	mov	r3, r2
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	4413      	add	r3, r2
 80073ac:	009b      	lsls	r3, r3, #2
 80073ae:	4a1f      	ldr	r2, [pc, #124]	; (800742c <xTaskIncrementTick+0x160>)
 80073b0:	441a      	add	r2, r3
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	3304      	adds	r3, #4
 80073b6:	4619      	mov	r1, r3
 80073b8:	4610      	mov	r0, r2
 80073ba:	f7ff fc0d 	bl	8006bd8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073c2:	4b1b      	ldr	r3, [pc, #108]	; (8007430 <xTaskIncrementTick+0x164>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d3b9      	bcc.n	8007340 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80073cc:	2301      	movs	r3, #1
 80073ce:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073d0:	e7b6      	b.n	8007340 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80073d2:	4b17      	ldr	r3, [pc, #92]	; (8007430 <xTaskIncrementTick+0x164>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073d8:	4914      	ldr	r1, [pc, #80]	; (800742c <xTaskIncrementTick+0x160>)
 80073da:	4613      	mov	r3, r2
 80073dc:	009b      	lsls	r3, r3, #2
 80073de:	4413      	add	r3, r2
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	440b      	add	r3, r1
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d901      	bls.n	80073ee <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80073ea:	2301      	movs	r3, #1
 80073ec:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80073ee:	4b11      	ldr	r3, [pc, #68]	; (8007434 <xTaskIncrementTick+0x168>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d007      	beq.n	8007406 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80073f6:	2301      	movs	r3, #1
 80073f8:	617b      	str	r3, [r7, #20]
 80073fa:	e004      	b.n	8007406 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80073fc:	4b0e      	ldr	r3, [pc, #56]	; (8007438 <xTaskIncrementTick+0x16c>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	3301      	adds	r3, #1
 8007402:	4a0d      	ldr	r2, [pc, #52]	; (8007438 <xTaskIncrementTick+0x16c>)
 8007404:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007406:	697b      	ldr	r3, [r7, #20]
}
 8007408:	4618      	mov	r0, r3
 800740a:	3718      	adds	r7, #24
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}
 8007410:	200006b8 	.word	0x200006b8
 8007414:	20000694 	.word	0x20000694
 8007418:	20000648 	.word	0x20000648
 800741c:	2000064c 	.word	0x2000064c
 8007420:	200006a8 	.word	0x200006a8
 8007424:	200006b0 	.word	0x200006b0
 8007428:	20000698 	.word	0x20000698
 800742c:	20000594 	.word	0x20000594
 8007430:	20000590 	.word	0x20000590
 8007434:	200006a4 	.word	0x200006a4
 8007438:	200006a0 	.word	0x200006a0

0800743c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800743c:	b480      	push	{r7}
 800743e:	b087      	sub	sp, #28
 8007440:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007442:	4b29      	ldr	r3, [pc, #164]	; (80074e8 <vTaskSwitchContext+0xac>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d003      	beq.n	8007452 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800744a:	4b28      	ldr	r3, [pc, #160]	; (80074ec <vTaskSwitchContext+0xb0>)
 800744c:	2201      	movs	r2, #1
 800744e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007450:	e044      	b.n	80074dc <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8007452:	4b26      	ldr	r3, [pc, #152]	; (80074ec <vTaskSwitchContext+0xb0>)
 8007454:	2200      	movs	r2, #0
 8007456:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007458:	4b25      	ldr	r3, [pc, #148]	; (80074f0 <vTaskSwitchContext+0xb4>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	fab3 f383 	clz	r3, r3
 8007464:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007466:	7afb      	ldrb	r3, [r7, #11]
 8007468:	f1c3 031f 	rsb	r3, r3, #31
 800746c:	617b      	str	r3, [r7, #20]
 800746e:	4921      	ldr	r1, [pc, #132]	; (80074f4 <vTaskSwitchContext+0xb8>)
 8007470:	697a      	ldr	r2, [r7, #20]
 8007472:	4613      	mov	r3, r2
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	4413      	add	r3, r2
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	440b      	add	r3, r1
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d10a      	bne.n	8007498 <vTaskSwitchContext+0x5c>
	__asm volatile
 8007482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007486:	f383 8811 	msr	BASEPRI, r3
 800748a:	f3bf 8f6f 	isb	sy
 800748e:	f3bf 8f4f 	dsb	sy
 8007492:	607b      	str	r3, [r7, #4]
}
 8007494:	bf00      	nop
 8007496:	e7fe      	b.n	8007496 <vTaskSwitchContext+0x5a>
 8007498:	697a      	ldr	r2, [r7, #20]
 800749a:	4613      	mov	r3, r2
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	4413      	add	r3, r2
 80074a0:	009b      	lsls	r3, r3, #2
 80074a2:	4a14      	ldr	r2, [pc, #80]	; (80074f4 <vTaskSwitchContext+0xb8>)
 80074a4:	4413      	add	r3, r2
 80074a6:	613b      	str	r3, [r7, #16]
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	685a      	ldr	r2, [r3, #4]
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	605a      	str	r2, [r3, #4]
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	685a      	ldr	r2, [r3, #4]
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	3308      	adds	r3, #8
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d104      	bne.n	80074c8 <vTaskSwitchContext+0x8c>
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	685a      	ldr	r2, [r3, #4]
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	605a      	str	r2, [r3, #4]
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	4a0a      	ldr	r2, [pc, #40]	; (80074f8 <vTaskSwitchContext+0xbc>)
 80074d0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80074d2:	4b09      	ldr	r3, [pc, #36]	; (80074f8 <vTaskSwitchContext+0xbc>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	334c      	adds	r3, #76	; 0x4c
 80074d8:	4a08      	ldr	r2, [pc, #32]	; (80074fc <vTaskSwitchContext+0xc0>)
 80074da:	6013      	str	r3, [r2, #0]
}
 80074dc:	bf00      	nop
 80074de:	371c      	adds	r7, #28
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr
 80074e8:	200006b8 	.word	0x200006b8
 80074ec:	200006a4 	.word	0x200006a4
 80074f0:	20000698 	.word	0x20000698
 80074f4:	20000594 	.word	0x20000594
 80074f8:	20000590 	.word	0x20000590
 80074fc:	2000002c 	.word	0x2000002c

08007500 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007508:	f000 f852 	bl	80075b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800750c:	4b06      	ldr	r3, [pc, #24]	; (8007528 <prvIdleTask+0x28>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	2b01      	cmp	r3, #1
 8007512:	d9f9      	bls.n	8007508 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007514:	4b05      	ldr	r3, [pc, #20]	; (800752c <prvIdleTask+0x2c>)
 8007516:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800751a:	601a      	str	r2, [r3, #0]
 800751c:	f3bf 8f4f 	dsb	sy
 8007520:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007524:	e7f0      	b.n	8007508 <prvIdleTask+0x8>
 8007526:	bf00      	nop
 8007528:	20000594 	.word	0x20000594
 800752c:	e000ed04 	.word	0xe000ed04

08007530 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b082      	sub	sp, #8
 8007534:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007536:	2300      	movs	r3, #0
 8007538:	607b      	str	r3, [r7, #4]
 800753a:	e00c      	b.n	8007556 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	4613      	mov	r3, r2
 8007540:	009b      	lsls	r3, r3, #2
 8007542:	4413      	add	r3, r2
 8007544:	009b      	lsls	r3, r3, #2
 8007546:	4a12      	ldr	r2, [pc, #72]	; (8007590 <prvInitialiseTaskLists+0x60>)
 8007548:	4413      	add	r3, r2
 800754a:	4618      	mov	r0, r3
 800754c:	f7ff fb17 	bl	8006b7e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	3301      	adds	r3, #1
 8007554:	607b      	str	r3, [r7, #4]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2b06      	cmp	r3, #6
 800755a:	d9ef      	bls.n	800753c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800755c:	480d      	ldr	r0, [pc, #52]	; (8007594 <prvInitialiseTaskLists+0x64>)
 800755e:	f7ff fb0e 	bl	8006b7e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007562:	480d      	ldr	r0, [pc, #52]	; (8007598 <prvInitialiseTaskLists+0x68>)
 8007564:	f7ff fb0b 	bl	8006b7e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007568:	480c      	ldr	r0, [pc, #48]	; (800759c <prvInitialiseTaskLists+0x6c>)
 800756a:	f7ff fb08 	bl	8006b7e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800756e:	480c      	ldr	r0, [pc, #48]	; (80075a0 <prvInitialiseTaskLists+0x70>)
 8007570:	f7ff fb05 	bl	8006b7e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007574:	480b      	ldr	r0, [pc, #44]	; (80075a4 <prvInitialiseTaskLists+0x74>)
 8007576:	f7ff fb02 	bl	8006b7e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800757a:	4b0b      	ldr	r3, [pc, #44]	; (80075a8 <prvInitialiseTaskLists+0x78>)
 800757c:	4a05      	ldr	r2, [pc, #20]	; (8007594 <prvInitialiseTaskLists+0x64>)
 800757e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007580:	4b0a      	ldr	r3, [pc, #40]	; (80075ac <prvInitialiseTaskLists+0x7c>)
 8007582:	4a05      	ldr	r2, [pc, #20]	; (8007598 <prvInitialiseTaskLists+0x68>)
 8007584:	601a      	str	r2, [r3, #0]
}
 8007586:	bf00      	nop
 8007588:	3708      	adds	r7, #8
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}
 800758e:	bf00      	nop
 8007590:	20000594 	.word	0x20000594
 8007594:	20000620 	.word	0x20000620
 8007598:	20000634 	.word	0x20000634
 800759c:	20000650 	.word	0x20000650
 80075a0:	20000664 	.word	0x20000664
 80075a4:	2000067c 	.word	0x2000067c
 80075a8:	20000648 	.word	0x20000648
 80075ac:	2000064c 	.word	0x2000064c

080075b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b082      	sub	sp, #8
 80075b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80075b6:	e019      	b.n	80075ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80075b8:	f000 fa0c 	bl	80079d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075bc:	4b10      	ldr	r3, [pc, #64]	; (8007600 <prvCheckTasksWaitingTermination+0x50>)
 80075be:	68db      	ldr	r3, [r3, #12]
 80075c0:	68db      	ldr	r3, [r3, #12]
 80075c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	3304      	adds	r3, #4
 80075c8:	4618      	mov	r0, r3
 80075ca:	f7ff fb62 	bl	8006c92 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80075ce:	4b0d      	ldr	r3, [pc, #52]	; (8007604 <prvCheckTasksWaitingTermination+0x54>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	3b01      	subs	r3, #1
 80075d4:	4a0b      	ldr	r2, [pc, #44]	; (8007604 <prvCheckTasksWaitingTermination+0x54>)
 80075d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80075d8:	4b0b      	ldr	r3, [pc, #44]	; (8007608 <prvCheckTasksWaitingTermination+0x58>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	3b01      	subs	r3, #1
 80075de:	4a0a      	ldr	r2, [pc, #40]	; (8007608 <prvCheckTasksWaitingTermination+0x58>)
 80075e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80075e2:	f000 fa27 	bl	8007a34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 f810 	bl	800760c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80075ec:	4b06      	ldr	r3, [pc, #24]	; (8007608 <prvCheckTasksWaitingTermination+0x58>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d1e1      	bne.n	80075b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80075f4:	bf00      	nop
 80075f6:	bf00      	nop
 80075f8:	3708      	adds	r7, #8
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	20000664 	.word	0x20000664
 8007604:	20000690 	.word	0x20000690
 8007608:	20000678 	.word	0x20000678

0800760c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800760c:	b580      	push	{r7, lr}
 800760e:	b084      	sub	sp, #16
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	334c      	adds	r3, #76	; 0x4c
 8007618:	4618      	mov	r0, r3
 800761a:	f000 fcfd 	bl	8008018 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007624:	2b00      	cmp	r3, #0
 8007626:	d108      	bne.n	800763a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800762c:	4618      	mov	r0, r3
 800762e:	f000 fb7f 	bl	8007d30 <vPortFree>
				vPortFree( pxTCB );
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f000 fb7c 	bl	8007d30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007638:	e018      	b.n	800766c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007640:	2b01      	cmp	r3, #1
 8007642:	d103      	bne.n	800764c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 fb73 	bl	8007d30 <vPortFree>
	}
 800764a:	e00f      	b.n	800766c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007652:	2b02      	cmp	r3, #2
 8007654:	d00a      	beq.n	800766c <prvDeleteTCB+0x60>
	__asm volatile
 8007656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800765a:	f383 8811 	msr	BASEPRI, r3
 800765e:	f3bf 8f6f 	isb	sy
 8007662:	f3bf 8f4f 	dsb	sy
 8007666:	60fb      	str	r3, [r7, #12]
}
 8007668:	bf00      	nop
 800766a:	e7fe      	b.n	800766a <prvDeleteTCB+0x5e>
	}
 800766c:	bf00      	nop
 800766e:	3710      	adds	r7, #16
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}

08007674 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007674:	b480      	push	{r7}
 8007676:	b083      	sub	sp, #12
 8007678:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800767a:	4b0c      	ldr	r3, [pc, #48]	; (80076ac <prvResetNextTaskUnblockTime+0x38>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d104      	bne.n	800768e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007684:	4b0a      	ldr	r3, [pc, #40]	; (80076b0 <prvResetNextTaskUnblockTime+0x3c>)
 8007686:	f04f 32ff 	mov.w	r2, #4294967295
 800768a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800768c:	e008      	b.n	80076a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800768e:	4b07      	ldr	r3, [pc, #28]	; (80076ac <prvResetNextTaskUnblockTime+0x38>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	68db      	ldr	r3, [r3, #12]
 8007694:	68db      	ldr	r3, [r3, #12]
 8007696:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	4a04      	ldr	r2, [pc, #16]	; (80076b0 <prvResetNextTaskUnblockTime+0x3c>)
 800769e:	6013      	str	r3, [r2, #0]
}
 80076a0:	bf00      	nop
 80076a2:	370c      	adds	r7, #12
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr
 80076ac:	20000648 	.word	0x20000648
 80076b0:	200006b0 	.word	0x200006b0

080076b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80076be:	4b29      	ldr	r3, [pc, #164]	; (8007764 <prvAddCurrentTaskToDelayedList+0xb0>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076c4:	4b28      	ldr	r3, [pc, #160]	; (8007768 <prvAddCurrentTaskToDelayedList+0xb4>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	3304      	adds	r3, #4
 80076ca:	4618      	mov	r0, r3
 80076cc:	f7ff fae1 	bl	8006c92 <uxListRemove>
 80076d0:	4603      	mov	r3, r0
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d10b      	bne.n	80076ee <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80076d6:	4b24      	ldr	r3, [pc, #144]	; (8007768 <prvAddCurrentTaskToDelayedList+0xb4>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076dc:	2201      	movs	r2, #1
 80076de:	fa02 f303 	lsl.w	r3, r2, r3
 80076e2:	43da      	mvns	r2, r3
 80076e4:	4b21      	ldr	r3, [pc, #132]	; (800776c <prvAddCurrentTaskToDelayedList+0xb8>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4013      	ands	r3, r2
 80076ea:	4a20      	ldr	r2, [pc, #128]	; (800776c <prvAddCurrentTaskToDelayedList+0xb8>)
 80076ec:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076f4:	d10a      	bne.n	800770c <prvAddCurrentTaskToDelayedList+0x58>
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d007      	beq.n	800770c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076fc:	4b1a      	ldr	r3, [pc, #104]	; (8007768 <prvAddCurrentTaskToDelayedList+0xb4>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	3304      	adds	r3, #4
 8007702:	4619      	mov	r1, r3
 8007704:	481a      	ldr	r0, [pc, #104]	; (8007770 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007706:	f7ff fa67 	bl	8006bd8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800770a:	e026      	b.n	800775a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800770c:	68fa      	ldr	r2, [r7, #12]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	4413      	add	r3, r2
 8007712:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007714:	4b14      	ldr	r3, [pc, #80]	; (8007768 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	68ba      	ldr	r2, [r7, #8]
 800771a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800771c:	68ba      	ldr	r2, [r7, #8]
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	429a      	cmp	r2, r3
 8007722:	d209      	bcs.n	8007738 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007724:	4b13      	ldr	r3, [pc, #76]	; (8007774 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007726:	681a      	ldr	r2, [r3, #0]
 8007728:	4b0f      	ldr	r3, [pc, #60]	; (8007768 <prvAddCurrentTaskToDelayedList+0xb4>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	3304      	adds	r3, #4
 800772e:	4619      	mov	r1, r3
 8007730:	4610      	mov	r0, r2
 8007732:	f7ff fa75 	bl	8006c20 <vListInsert>
}
 8007736:	e010      	b.n	800775a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007738:	4b0f      	ldr	r3, [pc, #60]	; (8007778 <prvAddCurrentTaskToDelayedList+0xc4>)
 800773a:	681a      	ldr	r2, [r3, #0]
 800773c:	4b0a      	ldr	r3, [pc, #40]	; (8007768 <prvAddCurrentTaskToDelayedList+0xb4>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	3304      	adds	r3, #4
 8007742:	4619      	mov	r1, r3
 8007744:	4610      	mov	r0, r2
 8007746:	f7ff fa6b 	bl	8006c20 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800774a:	4b0c      	ldr	r3, [pc, #48]	; (800777c <prvAddCurrentTaskToDelayedList+0xc8>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	68ba      	ldr	r2, [r7, #8]
 8007750:	429a      	cmp	r2, r3
 8007752:	d202      	bcs.n	800775a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007754:	4a09      	ldr	r2, [pc, #36]	; (800777c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	6013      	str	r3, [r2, #0]
}
 800775a:	bf00      	nop
 800775c:	3710      	adds	r7, #16
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
 8007762:	bf00      	nop
 8007764:	20000694 	.word	0x20000694
 8007768:	20000590 	.word	0x20000590
 800776c:	20000698 	.word	0x20000698
 8007770:	2000067c 	.word	0x2000067c
 8007774:	2000064c 	.word	0x2000064c
 8007778:	20000648 	.word	0x20000648
 800777c:	200006b0 	.word	0x200006b0

08007780 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007780:	b480      	push	{r7}
 8007782:	b085      	sub	sp, #20
 8007784:	af00      	add	r7, sp, #0
 8007786:	60f8      	str	r0, [r7, #12]
 8007788:	60b9      	str	r1, [r7, #8]
 800778a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	3b04      	subs	r3, #4
 8007790:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007798:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	3b04      	subs	r3, #4
 800779e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	f023 0201 	bic.w	r2, r3, #1
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	3b04      	subs	r3, #4
 80077ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80077b0:	4a0c      	ldr	r2, [pc, #48]	; (80077e4 <pxPortInitialiseStack+0x64>)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	3b14      	subs	r3, #20
 80077ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	3b04      	subs	r3, #4
 80077c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f06f 0202 	mvn.w	r2, #2
 80077ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	3b20      	subs	r3, #32
 80077d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80077d6:	68fb      	ldr	r3, [r7, #12]
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3714      	adds	r7, #20
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr
 80077e4:	080077e9 	.word	0x080077e9

080077e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80077e8:	b480      	push	{r7}
 80077ea:	b085      	sub	sp, #20
 80077ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80077ee:	2300      	movs	r3, #0
 80077f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80077f2:	4b12      	ldr	r3, [pc, #72]	; (800783c <prvTaskExitError+0x54>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077fa:	d00a      	beq.n	8007812 <prvTaskExitError+0x2a>
	__asm volatile
 80077fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007800:	f383 8811 	msr	BASEPRI, r3
 8007804:	f3bf 8f6f 	isb	sy
 8007808:	f3bf 8f4f 	dsb	sy
 800780c:	60fb      	str	r3, [r7, #12]
}
 800780e:	bf00      	nop
 8007810:	e7fe      	b.n	8007810 <prvTaskExitError+0x28>
	__asm volatile
 8007812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007816:	f383 8811 	msr	BASEPRI, r3
 800781a:	f3bf 8f6f 	isb	sy
 800781e:	f3bf 8f4f 	dsb	sy
 8007822:	60bb      	str	r3, [r7, #8]
}
 8007824:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007826:	bf00      	nop
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d0fc      	beq.n	8007828 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800782e:	bf00      	nop
 8007830:	bf00      	nop
 8007832:	3714      	adds	r7, #20
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr
 800783c:	20000028 	.word	0x20000028

08007840 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007840:	4b07      	ldr	r3, [pc, #28]	; (8007860 <pxCurrentTCBConst2>)
 8007842:	6819      	ldr	r1, [r3, #0]
 8007844:	6808      	ldr	r0, [r1, #0]
 8007846:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800784a:	f380 8809 	msr	PSP, r0
 800784e:	f3bf 8f6f 	isb	sy
 8007852:	f04f 0000 	mov.w	r0, #0
 8007856:	f380 8811 	msr	BASEPRI, r0
 800785a:	4770      	bx	lr
 800785c:	f3af 8000 	nop.w

08007860 <pxCurrentTCBConst2>:
 8007860:	20000590 	.word	0x20000590
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007864:	bf00      	nop
 8007866:	bf00      	nop

08007868 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007868:	4808      	ldr	r0, [pc, #32]	; (800788c <prvPortStartFirstTask+0x24>)
 800786a:	6800      	ldr	r0, [r0, #0]
 800786c:	6800      	ldr	r0, [r0, #0]
 800786e:	f380 8808 	msr	MSP, r0
 8007872:	f04f 0000 	mov.w	r0, #0
 8007876:	f380 8814 	msr	CONTROL, r0
 800787a:	b662      	cpsie	i
 800787c:	b661      	cpsie	f
 800787e:	f3bf 8f4f 	dsb	sy
 8007882:	f3bf 8f6f 	isb	sy
 8007886:	df00      	svc	0
 8007888:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800788a:	bf00      	nop
 800788c:	e000ed08 	.word	0xe000ed08

08007890 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b086      	sub	sp, #24
 8007894:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007896:	4b46      	ldr	r3, [pc, #280]	; (80079b0 <xPortStartScheduler+0x120>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a46      	ldr	r2, [pc, #280]	; (80079b4 <xPortStartScheduler+0x124>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d10a      	bne.n	80078b6 <xPortStartScheduler+0x26>
	__asm volatile
 80078a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a4:	f383 8811 	msr	BASEPRI, r3
 80078a8:	f3bf 8f6f 	isb	sy
 80078ac:	f3bf 8f4f 	dsb	sy
 80078b0:	613b      	str	r3, [r7, #16]
}
 80078b2:	bf00      	nop
 80078b4:	e7fe      	b.n	80078b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80078b6:	4b3e      	ldr	r3, [pc, #248]	; (80079b0 <xPortStartScheduler+0x120>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a3f      	ldr	r2, [pc, #252]	; (80079b8 <xPortStartScheduler+0x128>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d10a      	bne.n	80078d6 <xPortStartScheduler+0x46>
	__asm volatile
 80078c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c4:	f383 8811 	msr	BASEPRI, r3
 80078c8:	f3bf 8f6f 	isb	sy
 80078cc:	f3bf 8f4f 	dsb	sy
 80078d0:	60fb      	str	r3, [r7, #12]
}
 80078d2:	bf00      	nop
 80078d4:	e7fe      	b.n	80078d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80078d6:	4b39      	ldr	r3, [pc, #228]	; (80079bc <xPortStartScheduler+0x12c>)
 80078d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	22ff      	movs	r2, #255	; 0xff
 80078e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80078f0:	78fb      	ldrb	r3, [r7, #3]
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80078f8:	b2da      	uxtb	r2, r3
 80078fa:	4b31      	ldr	r3, [pc, #196]	; (80079c0 <xPortStartScheduler+0x130>)
 80078fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80078fe:	4b31      	ldr	r3, [pc, #196]	; (80079c4 <xPortStartScheduler+0x134>)
 8007900:	2207      	movs	r2, #7
 8007902:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007904:	e009      	b.n	800791a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007906:	4b2f      	ldr	r3, [pc, #188]	; (80079c4 <xPortStartScheduler+0x134>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	3b01      	subs	r3, #1
 800790c:	4a2d      	ldr	r2, [pc, #180]	; (80079c4 <xPortStartScheduler+0x134>)
 800790e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007910:	78fb      	ldrb	r3, [r7, #3]
 8007912:	b2db      	uxtb	r3, r3
 8007914:	005b      	lsls	r3, r3, #1
 8007916:	b2db      	uxtb	r3, r3
 8007918:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800791a:	78fb      	ldrb	r3, [r7, #3]
 800791c:	b2db      	uxtb	r3, r3
 800791e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007922:	2b80      	cmp	r3, #128	; 0x80
 8007924:	d0ef      	beq.n	8007906 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007926:	4b27      	ldr	r3, [pc, #156]	; (80079c4 <xPortStartScheduler+0x134>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f1c3 0307 	rsb	r3, r3, #7
 800792e:	2b04      	cmp	r3, #4
 8007930:	d00a      	beq.n	8007948 <xPortStartScheduler+0xb8>
	__asm volatile
 8007932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007936:	f383 8811 	msr	BASEPRI, r3
 800793a:	f3bf 8f6f 	isb	sy
 800793e:	f3bf 8f4f 	dsb	sy
 8007942:	60bb      	str	r3, [r7, #8]
}
 8007944:	bf00      	nop
 8007946:	e7fe      	b.n	8007946 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007948:	4b1e      	ldr	r3, [pc, #120]	; (80079c4 <xPortStartScheduler+0x134>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	021b      	lsls	r3, r3, #8
 800794e:	4a1d      	ldr	r2, [pc, #116]	; (80079c4 <xPortStartScheduler+0x134>)
 8007950:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007952:	4b1c      	ldr	r3, [pc, #112]	; (80079c4 <xPortStartScheduler+0x134>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800795a:	4a1a      	ldr	r2, [pc, #104]	; (80079c4 <xPortStartScheduler+0x134>)
 800795c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	b2da      	uxtb	r2, r3
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007966:	4b18      	ldr	r3, [pc, #96]	; (80079c8 <xPortStartScheduler+0x138>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a17      	ldr	r2, [pc, #92]	; (80079c8 <xPortStartScheduler+0x138>)
 800796c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007970:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007972:	4b15      	ldr	r3, [pc, #84]	; (80079c8 <xPortStartScheduler+0x138>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a14      	ldr	r2, [pc, #80]	; (80079c8 <xPortStartScheduler+0x138>)
 8007978:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800797c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800797e:	f000 f8dd 	bl	8007b3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007982:	4b12      	ldr	r3, [pc, #72]	; (80079cc <xPortStartScheduler+0x13c>)
 8007984:	2200      	movs	r2, #0
 8007986:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007988:	f000 f8fc 	bl	8007b84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800798c:	4b10      	ldr	r3, [pc, #64]	; (80079d0 <xPortStartScheduler+0x140>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a0f      	ldr	r2, [pc, #60]	; (80079d0 <xPortStartScheduler+0x140>)
 8007992:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007996:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007998:	f7ff ff66 	bl	8007868 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800799c:	f7ff fd4e 	bl	800743c <vTaskSwitchContext>
	prvTaskExitError();
 80079a0:	f7ff ff22 	bl	80077e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80079a4:	2300      	movs	r3, #0
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3718      	adds	r7, #24
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	bf00      	nop
 80079b0:	e000ed00 	.word	0xe000ed00
 80079b4:	410fc271 	.word	0x410fc271
 80079b8:	410fc270 	.word	0x410fc270
 80079bc:	e000e400 	.word	0xe000e400
 80079c0:	200006bc 	.word	0x200006bc
 80079c4:	200006c0 	.word	0x200006c0
 80079c8:	e000ed20 	.word	0xe000ed20
 80079cc:	20000028 	.word	0x20000028
 80079d0:	e000ef34 	.word	0xe000ef34

080079d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80079d4:	b480      	push	{r7}
 80079d6:	b083      	sub	sp, #12
 80079d8:	af00      	add	r7, sp, #0
	__asm volatile
 80079da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079de:	f383 8811 	msr	BASEPRI, r3
 80079e2:	f3bf 8f6f 	isb	sy
 80079e6:	f3bf 8f4f 	dsb	sy
 80079ea:	607b      	str	r3, [r7, #4]
}
 80079ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80079ee:	4b0f      	ldr	r3, [pc, #60]	; (8007a2c <vPortEnterCritical+0x58>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	3301      	adds	r3, #1
 80079f4:	4a0d      	ldr	r2, [pc, #52]	; (8007a2c <vPortEnterCritical+0x58>)
 80079f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80079f8:	4b0c      	ldr	r3, [pc, #48]	; (8007a2c <vPortEnterCritical+0x58>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d10f      	bne.n	8007a20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007a00:	4b0b      	ldr	r3, [pc, #44]	; (8007a30 <vPortEnterCritical+0x5c>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d00a      	beq.n	8007a20 <vPortEnterCritical+0x4c>
	__asm volatile
 8007a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a0e:	f383 8811 	msr	BASEPRI, r3
 8007a12:	f3bf 8f6f 	isb	sy
 8007a16:	f3bf 8f4f 	dsb	sy
 8007a1a:	603b      	str	r3, [r7, #0]
}
 8007a1c:	bf00      	nop
 8007a1e:	e7fe      	b.n	8007a1e <vPortEnterCritical+0x4a>
	}
}
 8007a20:	bf00      	nop
 8007a22:	370c      	adds	r7, #12
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr
 8007a2c:	20000028 	.word	0x20000028
 8007a30:	e000ed04 	.word	0xe000ed04

08007a34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007a34:	b480      	push	{r7}
 8007a36:	b083      	sub	sp, #12
 8007a38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007a3a:	4b12      	ldr	r3, [pc, #72]	; (8007a84 <vPortExitCritical+0x50>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d10a      	bne.n	8007a58 <vPortExitCritical+0x24>
	__asm volatile
 8007a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a46:	f383 8811 	msr	BASEPRI, r3
 8007a4a:	f3bf 8f6f 	isb	sy
 8007a4e:	f3bf 8f4f 	dsb	sy
 8007a52:	607b      	str	r3, [r7, #4]
}
 8007a54:	bf00      	nop
 8007a56:	e7fe      	b.n	8007a56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007a58:	4b0a      	ldr	r3, [pc, #40]	; (8007a84 <vPortExitCritical+0x50>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	3b01      	subs	r3, #1
 8007a5e:	4a09      	ldr	r2, [pc, #36]	; (8007a84 <vPortExitCritical+0x50>)
 8007a60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007a62:	4b08      	ldr	r3, [pc, #32]	; (8007a84 <vPortExitCritical+0x50>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d105      	bne.n	8007a76 <vPortExitCritical+0x42>
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007a74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007a76:	bf00      	nop
 8007a78:	370c      	adds	r7, #12
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a80:	4770      	bx	lr
 8007a82:	bf00      	nop
 8007a84:	20000028 	.word	0x20000028
	...

08007a90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007a90:	f3ef 8009 	mrs	r0, PSP
 8007a94:	f3bf 8f6f 	isb	sy
 8007a98:	4b15      	ldr	r3, [pc, #84]	; (8007af0 <pxCurrentTCBConst>)
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	f01e 0f10 	tst.w	lr, #16
 8007aa0:	bf08      	it	eq
 8007aa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007aa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aaa:	6010      	str	r0, [r2, #0]
 8007aac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007ab0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007ab4:	f380 8811 	msr	BASEPRI, r0
 8007ab8:	f3bf 8f4f 	dsb	sy
 8007abc:	f3bf 8f6f 	isb	sy
 8007ac0:	f7ff fcbc 	bl	800743c <vTaskSwitchContext>
 8007ac4:	f04f 0000 	mov.w	r0, #0
 8007ac8:	f380 8811 	msr	BASEPRI, r0
 8007acc:	bc09      	pop	{r0, r3}
 8007ace:	6819      	ldr	r1, [r3, #0]
 8007ad0:	6808      	ldr	r0, [r1, #0]
 8007ad2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ad6:	f01e 0f10 	tst.w	lr, #16
 8007ada:	bf08      	it	eq
 8007adc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007ae0:	f380 8809 	msr	PSP, r0
 8007ae4:	f3bf 8f6f 	isb	sy
 8007ae8:	4770      	bx	lr
 8007aea:	bf00      	nop
 8007aec:	f3af 8000 	nop.w

08007af0 <pxCurrentTCBConst>:
 8007af0:	20000590 	.word	0x20000590
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007af4:	bf00      	nop
 8007af6:	bf00      	nop

08007af8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b082      	sub	sp, #8
 8007afc:	af00      	add	r7, sp, #0
	__asm volatile
 8007afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b02:	f383 8811 	msr	BASEPRI, r3
 8007b06:	f3bf 8f6f 	isb	sy
 8007b0a:	f3bf 8f4f 	dsb	sy
 8007b0e:	607b      	str	r3, [r7, #4]
}
 8007b10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007b12:	f7ff fbdb 	bl	80072cc <xTaskIncrementTick>
 8007b16:	4603      	mov	r3, r0
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d003      	beq.n	8007b24 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007b1c:	4b06      	ldr	r3, [pc, #24]	; (8007b38 <SysTick_Handler+0x40>)
 8007b1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b22:	601a      	str	r2, [r3, #0]
 8007b24:	2300      	movs	r3, #0
 8007b26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	f383 8811 	msr	BASEPRI, r3
}
 8007b2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007b30:	bf00      	nop
 8007b32:	3708      	adds	r7, #8
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}
 8007b38:	e000ed04 	.word	0xe000ed04

08007b3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007b40:	4b0b      	ldr	r3, [pc, #44]	; (8007b70 <vPortSetupTimerInterrupt+0x34>)
 8007b42:	2200      	movs	r2, #0
 8007b44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007b46:	4b0b      	ldr	r3, [pc, #44]	; (8007b74 <vPortSetupTimerInterrupt+0x38>)
 8007b48:	2200      	movs	r2, #0
 8007b4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007b4c:	4b0a      	ldr	r3, [pc, #40]	; (8007b78 <vPortSetupTimerInterrupt+0x3c>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a0a      	ldr	r2, [pc, #40]	; (8007b7c <vPortSetupTimerInterrupt+0x40>)
 8007b52:	fba2 2303 	umull	r2, r3, r2, r3
 8007b56:	099b      	lsrs	r3, r3, #6
 8007b58:	4a09      	ldr	r2, [pc, #36]	; (8007b80 <vPortSetupTimerInterrupt+0x44>)
 8007b5a:	3b01      	subs	r3, #1
 8007b5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007b5e:	4b04      	ldr	r3, [pc, #16]	; (8007b70 <vPortSetupTimerInterrupt+0x34>)
 8007b60:	2207      	movs	r2, #7
 8007b62:	601a      	str	r2, [r3, #0]
}
 8007b64:	bf00      	nop
 8007b66:	46bd      	mov	sp, r7
 8007b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6c:	4770      	bx	lr
 8007b6e:	bf00      	nop
 8007b70:	e000e010 	.word	0xe000e010
 8007b74:	e000e018 	.word	0xe000e018
 8007b78:	2000001c 	.word	0x2000001c
 8007b7c:	10624dd3 	.word	0x10624dd3
 8007b80:	e000e014 	.word	0xe000e014

08007b84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007b84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007b94 <vPortEnableVFP+0x10>
 8007b88:	6801      	ldr	r1, [r0, #0]
 8007b8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007b8e:	6001      	str	r1, [r0, #0]
 8007b90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007b92:	bf00      	nop
 8007b94:	e000ed88 	.word	0xe000ed88

08007b98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b08a      	sub	sp, #40	; 0x28
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007ba4:	f7ff fae8 	bl	8007178 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007ba8:	4b5b      	ldr	r3, [pc, #364]	; (8007d18 <pvPortMalloc+0x180>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d101      	bne.n	8007bb4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007bb0:	f000 f920 	bl	8007df4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007bb4:	4b59      	ldr	r3, [pc, #356]	; (8007d1c <pvPortMalloc+0x184>)
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	4013      	ands	r3, r2
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	f040 8093 	bne.w	8007ce8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d01d      	beq.n	8007c04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007bc8:	2208      	movs	r2, #8
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	4413      	add	r3, r2
 8007bce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f003 0307 	and.w	r3, r3, #7
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d014      	beq.n	8007c04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f023 0307 	bic.w	r3, r3, #7
 8007be0:	3308      	adds	r3, #8
 8007be2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f003 0307 	and.w	r3, r3, #7
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d00a      	beq.n	8007c04 <pvPortMalloc+0x6c>
	__asm volatile
 8007bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf2:	f383 8811 	msr	BASEPRI, r3
 8007bf6:	f3bf 8f6f 	isb	sy
 8007bfa:	f3bf 8f4f 	dsb	sy
 8007bfe:	617b      	str	r3, [r7, #20]
}
 8007c00:	bf00      	nop
 8007c02:	e7fe      	b.n	8007c02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d06e      	beq.n	8007ce8 <pvPortMalloc+0x150>
 8007c0a:	4b45      	ldr	r3, [pc, #276]	; (8007d20 <pvPortMalloc+0x188>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d869      	bhi.n	8007ce8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007c14:	4b43      	ldr	r3, [pc, #268]	; (8007d24 <pvPortMalloc+0x18c>)
 8007c16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007c18:	4b42      	ldr	r3, [pc, #264]	; (8007d24 <pvPortMalloc+0x18c>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c1e:	e004      	b.n	8007c2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d903      	bls.n	8007c3c <pvPortMalloc+0xa4>
 8007c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d1f1      	bne.n	8007c20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007c3c:	4b36      	ldr	r3, [pc, #216]	; (8007d18 <pvPortMalloc+0x180>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d050      	beq.n	8007ce8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007c46:	6a3b      	ldr	r3, [r7, #32]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	2208      	movs	r2, #8
 8007c4c:	4413      	add	r3, r2
 8007c4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	6a3b      	ldr	r3, [r7, #32]
 8007c56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5a:	685a      	ldr	r2, [r3, #4]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	1ad2      	subs	r2, r2, r3
 8007c60:	2308      	movs	r3, #8
 8007c62:	005b      	lsls	r3, r3, #1
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d91f      	bls.n	8007ca8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	4413      	add	r3, r2
 8007c6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c70:	69bb      	ldr	r3, [r7, #24]
 8007c72:	f003 0307 	and.w	r3, r3, #7
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d00a      	beq.n	8007c90 <pvPortMalloc+0xf8>
	__asm volatile
 8007c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c7e:	f383 8811 	msr	BASEPRI, r3
 8007c82:	f3bf 8f6f 	isb	sy
 8007c86:	f3bf 8f4f 	dsb	sy
 8007c8a:	613b      	str	r3, [r7, #16]
}
 8007c8c:	bf00      	nop
 8007c8e:	e7fe      	b.n	8007c8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c92:	685a      	ldr	r2, [r3, #4]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	1ad2      	subs	r2, r2, r3
 8007c98:	69bb      	ldr	r3, [r7, #24]
 8007c9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007ca2:	69b8      	ldr	r0, [r7, #24]
 8007ca4:	f000 f908 	bl	8007eb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007ca8:	4b1d      	ldr	r3, [pc, #116]	; (8007d20 <pvPortMalloc+0x188>)
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	1ad3      	subs	r3, r2, r3
 8007cb2:	4a1b      	ldr	r2, [pc, #108]	; (8007d20 <pvPortMalloc+0x188>)
 8007cb4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007cb6:	4b1a      	ldr	r3, [pc, #104]	; (8007d20 <pvPortMalloc+0x188>)
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	4b1b      	ldr	r3, [pc, #108]	; (8007d28 <pvPortMalloc+0x190>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	429a      	cmp	r2, r3
 8007cc0:	d203      	bcs.n	8007cca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007cc2:	4b17      	ldr	r3, [pc, #92]	; (8007d20 <pvPortMalloc+0x188>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a18      	ldr	r2, [pc, #96]	; (8007d28 <pvPortMalloc+0x190>)
 8007cc8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ccc:	685a      	ldr	r2, [r3, #4]
 8007cce:	4b13      	ldr	r3, [pc, #76]	; (8007d1c <pvPortMalloc+0x184>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	431a      	orrs	r2, r3
 8007cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cda:	2200      	movs	r2, #0
 8007cdc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007cde:	4b13      	ldr	r3, [pc, #76]	; (8007d2c <pvPortMalloc+0x194>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	4a11      	ldr	r2, [pc, #68]	; (8007d2c <pvPortMalloc+0x194>)
 8007ce6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007ce8:	f7ff fa54 	bl	8007194 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007cec:	69fb      	ldr	r3, [r7, #28]
 8007cee:	f003 0307 	and.w	r3, r3, #7
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d00a      	beq.n	8007d0c <pvPortMalloc+0x174>
	__asm volatile
 8007cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cfa:	f383 8811 	msr	BASEPRI, r3
 8007cfe:	f3bf 8f6f 	isb	sy
 8007d02:	f3bf 8f4f 	dsb	sy
 8007d06:	60fb      	str	r3, [r7, #12]
}
 8007d08:	bf00      	nop
 8007d0a:	e7fe      	b.n	8007d0a <pvPortMalloc+0x172>
	return pvReturn;
 8007d0c:	69fb      	ldr	r3, [r7, #28]
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3728      	adds	r7, #40	; 0x28
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	bf00      	nop
 8007d18:	200042cc 	.word	0x200042cc
 8007d1c:	200042e0 	.word	0x200042e0
 8007d20:	200042d0 	.word	0x200042d0
 8007d24:	200042c4 	.word	0x200042c4
 8007d28:	200042d4 	.word	0x200042d4
 8007d2c:	200042d8 	.word	0x200042d8

08007d30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b086      	sub	sp, #24
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d04d      	beq.n	8007dde <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007d42:	2308      	movs	r3, #8
 8007d44:	425b      	negs	r3, r3
 8007d46:	697a      	ldr	r2, [r7, #20]
 8007d48:	4413      	add	r3, r2
 8007d4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	685a      	ldr	r2, [r3, #4]
 8007d54:	4b24      	ldr	r3, [pc, #144]	; (8007de8 <vPortFree+0xb8>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4013      	ands	r3, r2
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d10a      	bne.n	8007d74 <vPortFree+0x44>
	__asm volatile
 8007d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d62:	f383 8811 	msr	BASEPRI, r3
 8007d66:	f3bf 8f6f 	isb	sy
 8007d6a:	f3bf 8f4f 	dsb	sy
 8007d6e:	60fb      	str	r3, [r7, #12]
}
 8007d70:	bf00      	nop
 8007d72:	e7fe      	b.n	8007d72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d00a      	beq.n	8007d92 <vPortFree+0x62>
	__asm volatile
 8007d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d80:	f383 8811 	msr	BASEPRI, r3
 8007d84:	f3bf 8f6f 	isb	sy
 8007d88:	f3bf 8f4f 	dsb	sy
 8007d8c:	60bb      	str	r3, [r7, #8]
}
 8007d8e:	bf00      	nop
 8007d90:	e7fe      	b.n	8007d90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	685a      	ldr	r2, [r3, #4]
 8007d96:	4b14      	ldr	r3, [pc, #80]	; (8007de8 <vPortFree+0xb8>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4013      	ands	r3, r2
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d01e      	beq.n	8007dde <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d11a      	bne.n	8007dde <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	685a      	ldr	r2, [r3, #4]
 8007dac:	4b0e      	ldr	r3, [pc, #56]	; (8007de8 <vPortFree+0xb8>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	43db      	mvns	r3, r3
 8007db2:	401a      	ands	r2, r3
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007db8:	f7ff f9de 	bl	8007178 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	685a      	ldr	r2, [r3, #4]
 8007dc0:	4b0a      	ldr	r3, [pc, #40]	; (8007dec <vPortFree+0xbc>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4413      	add	r3, r2
 8007dc6:	4a09      	ldr	r2, [pc, #36]	; (8007dec <vPortFree+0xbc>)
 8007dc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007dca:	6938      	ldr	r0, [r7, #16]
 8007dcc:	f000 f874 	bl	8007eb8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007dd0:	4b07      	ldr	r3, [pc, #28]	; (8007df0 <vPortFree+0xc0>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	4a06      	ldr	r2, [pc, #24]	; (8007df0 <vPortFree+0xc0>)
 8007dd8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007dda:	f7ff f9db 	bl	8007194 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007dde:	bf00      	nop
 8007de0:	3718      	adds	r7, #24
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
 8007de6:	bf00      	nop
 8007de8:	200042e0 	.word	0x200042e0
 8007dec:	200042d0 	.word	0x200042d0
 8007df0:	200042dc 	.word	0x200042dc

08007df4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007df4:	b480      	push	{r7}
 8007df6:	b085      	sub	sp, #20
 8007df8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007dfa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007dfe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007e00:	4b27      	ldr	r3, [pc, #156]	; (8007ea0 <prvHeapInit+0xac>)
 8007e02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f003 0307 	and.w	r3, r3, #7
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d00c      	beq.n	8007e28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	3307      	adds	r3, #7
 8007e12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f023 0307 	bic.w	r3, r3, #7
 8007e1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007e1c:	68ba      	ldr	r2, [r7, #8]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	1ad3      	subs	r3, r2, r3
 8007e22:	4a1f      	ldr	r2, [pc, #124]	; (8007ea0 <prvHeapInit+0xac>)
 8007e24:	4413      	add	r3, r2
 8007e26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007e2c:	4a1d      	ldr	r2, [pc, #116]	; (8007ea4 <prvHeapInit+0xb0>)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007e32:	4b1c      	ldr	r3, [pc, #112]	; (8007ea4 <prvHeapInit+0xb0>)
 8007e34:	2200      	movs	r2, #0
 8007e36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	68ba      	ldr	r2, [r7, #8]
 8007e3c:	4413      	add	r3, r2
 8007e3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007e40:	2208      	movs	r2, #8
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	1a9b      	subs	r3, r3, r2
 8007e46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f023 0307 	bic.w	r3, r3, #7
 8007e4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	4a15      	ldr	r2, [pc, #84]	; (8007ea8 <prvHeapInit+0xb4>)
 8007e54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007e56:	4b14      	ldr	r3, [pc, #80]	; (8007ea8 <prvHeapInit+0xb4>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007e5e:	4b12      	ldr	r3, [pc, #72]	; (8007ea8 <prvHeapInit+0xb4>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	2200      	movs	r2, #0
 8007e64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	68fa      	ldr	r2, [r7, #12]
 8007e6e:	1ad2      	subs	r2, r2, r3
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007e74:	4b0c      	ldr	r3, [pc, #48]	; (8007ea8 <prvHeapInit+0xb4>)
 8007e76:	681a      	ldr	r2, [r3, #0]
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	4a0a      	ldr	r2, [pc, #40]	; (8007eac <prvHeapInit+0xb8>)
 8007e82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	4a09      	ldr	r2, [pc, #36]	; (8007eb0 <prvHeapInit+0xbc>)
 8007e8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007e8c:	4b09      	ldr	r3, [pc, #36]	; (8007eb4 <prvHeapInit+0xc0>)
 8007e8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007e92:	601a      	str	r2, [r3, #0]
}
 8007e94:	bf00      	nop
 8007e96:	3714      	adds	r7, #20
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr
 8007ea0:	200006c4 	.word	0x200006c4
 8007ea4:	200042c4 	.word	0x200042c4
 8007ea8:	200042cc 	.word	0x200042cc
 8007eac:	200042d4 	.word	0x200042d4
 8007eb0:	200042d0 	.word	0x200042d0
 8007eb4:	200042e0 	.word	0x200042e0

08007eb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b085      	sub	sp, #20
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007ec0:	4b28      	ldr	r3, [pc, #160]	; (8007f64 <prvInsertBlockIntoFreeList+0xac>)
 8007ec2:	60fb      	str	r3, [r7, #12]
 8007ec4:	e002      	b.n	8007ecc <prvInsertBlockIntoFreeList+0x14>
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	60fb      	str	r3, [r7, #12]
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d8f7      	bhi.n	8007ec6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	68ba      	ldr	r2, [r7, #8]
 8007ee0:	4413      	add	r3, r2
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d108      	bne.n	8007efa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	685a      	ldr	r2, [r3, #4]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	441a      	add	r2, r3
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	68ba      	ldr	r2, [r7, #8]
 8007f04:	441a      	add	r2, r3
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d118      	bne.n	8007f40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	4b15      	ldr	r3, [pc, #84]	; (8007f68 <prvInsertBlockIntoFreeList+0xb0>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d00d      	beq.n	8007f36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	685a      	ldr	r2, [r3, #4]
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	441a      	add	r2, r3
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	681a      	ldr	r2, [r3, #0]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	601a      	str	r2, [r3, #0]
 8007f34:	e008      	b.n	8007f48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007f36:	4b0c      	ldr	r3, [pc, #48]	; (8007f68 <prvInsertBlockIntoFreeList+0xb0>)
 8007f38:	681a      	ldr	r2, [r3, #0]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	601a      	str	r2, [r3, #0]
 8007f3e:	e003      	b.n	8007f48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681a      	ldr	r2, [r3, #0]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007f48:	68fa      	ldr	r2, [r7, #12]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d002      	beq.n	8007f56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f56:	bf00      	nop
 8007f58:	3714      	adds	r7, #20
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr
 8007f62:	bf00      	nop
 8007f64:	200042c4 	.word	0x200042c4
 8007f68:	200042cc 	.word	0x200042cc

08007f6c <__libc_init_array>:
 8007f6c:	b570      	push	{r4, r5, r6, lr}
 8007f6e:	4d0d      	ldr	r5, [pc, #52]	; (8007fa4 <__libc_init_array+0x38>)
 8007f70:	4c0d      	ldr	r4, [pc, #52]	; (8007fa8 <__libc_init_array+0x3c>)
 8007f72:	1b64      	subs	r4, r4, r5
 8007f74:	10a4      	asrs	r4, r4, #2
 8007f76:	2600      	movs	r6, #0
 8007f78:	42a6      	cmp	r6, r4
 8007f7a:	d109      	bne.n	8007f90 <__libc_init_array+0x24>
 8007f7c:	4d0b      	ldr	r5, [pc, #44]	; (8007fac <__libc_init_array+0x40>)
 8007f7e:	4c0c      	ldr	r4, [pc, #48]	; (8007fb0 <__libc_init_array+0x44>)
 8007f80:	f000 f944 	bl	800820c <_init>
 8007f84:	1b64      	subs	r4, r4, r5
 8007f86:	10a4      	asrs	r4, r4, #2
 8007f88:	2600      	movs	r6, #0
 8007f8a:	42a6      	cmp	r6, r4
 8007f8c:	d105      	bne.n	8007f9a <__libc_init_array+0x2e>
 8007f8e:	bd70      	pop	{r4, r5, r6, pc}
 8007f90:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f94:	4798      	blx	r3
 8007f96:	3601      	adds	r6, #1
 8007f98:	e7ee      	b.n	8007f78 <__libc_init_array+0xc>
 8007f9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f9e:	4798      	blx	r3
 8007fa0:	3601      	adds	r6, #1
 8007fa2:	e7f2      	b.n	8007f8a <__libc_init_array+0x1e>
 8007fa4:	08008bac 	.word	0x08008bac
 8007fa8:	08008bac 	.word	0x08008bac
 8007fac:	08008bac 	.word	0x08008bac
 8007fb0:	08008bb0 	.word	0x08008bb0

08007fb4 <__itoa>:
 8007fb4:	1e93      	subs	r3, r2, #2
 8007fb6:	2b22      	cmp	r3, #34	; 0x22
 8007fb8:	b510      	push	{r4, lr}
 8007fba:	460c      	mov	r4, r1
 8007fbc:	d904      	bls.n	8007fc8 <__itoa+0x14>
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	700b      	strb	r3, [r1, #0]
 8007fc2:	461c      	mov	r4, r3
 8007fc4:	4620      	mov	r0, r4
 8007fc6:	bd10      	pop	{r4, pc}
 8007fc8:	2a0a      	cmp	r2, #10
 8007fca:	d109      	bne.n	8007fe0 <__itoa+0x2c>
 8007fcc:	2800      	cmp	r0, #0
 8007fce:	da07      	bge.n	8007fe0 <__itoa+0x2c>
 8007fd0:	232d      	movs	r3, #45	; 0x2d
 8007fd2:	700b      	strb	r3, [r1, #0]
 8007fd4:	4240      	negs	r0, r0
 8007fd6:	2101      	movs	r1, #1
 8007fd8:	4421      	add	r1, r4
 8007fda:	f000 f879 	bl	80080d0 <__utoa>
 8007fde:	e7f1      	b.n	8007fc4 <__itoa+0x10>
 8007fe0:	2100      	movs	r1, #0
 8007fe2:	e7f9      	b.n	8007fd8 <__itoa+0x24>

08007fe4 <itoa>:
 8007fe4:	f7ff bfe6 	b.w	8007fb4 <__itoa>

08007fe8 <__retarget_lock_acquire_recursive>:
 8007fe8:	4770      	bx	lr

08007fea <__retarget_lock_release_recursive>:
 8007fea:	4770      	bx	lr

08007fec <memset>:
 8007fec:	4402      	add	r2, r0
 8007fee:	4603      	mov	r3, r0
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d100      	bne.n	8007ff6 <memset+0xa>
 8007ff4:	4770      	bx	lr
 8007ff6:	f803 1b01 	strb.w	r1, [r3], #1
 8007ffa:	e7f9      	b.n	8007ff0 <memset+0x4>

08007ffc <cleanup_glue>:
 8007ffc:	b538      	push	{r3, r4, r5, lr}
 8007ffe:	460c      	mov	r4, r1
 8008000:	6809      	ldr	r1, [r1, #0]
 8008002:	4605      	mov	r5, r0
 8008004:	b109      	cbz	r1, 800800a <cleanup_glue+0xe>
 8008006:	f7ff fff9 	bl	8007ffc <cleanup_glue>
 800800a:	4621      	mov	r1, r4
 800800c:	4628      	mov	r0, r5
 800800e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008012:	f000 b8ab 	b.w	800816c <_free_r>
	...

08008018 <_reclaim_reent>:
 8008018:	4b2c      	ldr	r3, [pc, #176]	; (80080cc <_reclaim_reent+0xb4>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4283      	cmp	r3, r0
 800801e:	b570      	push	{r4, r5, r6, lr}
 8008020:	4604      	mov	r4, r0
 8008022:	d051      	beq.n	80080c8 <_reclaim_reent+0xb0>
 8008024:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008026:	b143      	cbz	r3, 800803a <_reclaim_reent+0x22>
 8008028:	68db      	ldr	r3, [r3, #12]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d14a      	bne.n	80080c4 <_reclaim_reent+0xac>
 800802e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008030:	6819      	ldr	r1, [r3, #0]
 8008032:	b111      	cbz	r1, 800803a <_reclaim_reent+0x22>
 8008034:	4620      	mov	r0, r4
 8008036:	f000 f899 	bl	800816c <_free_r>
 800803a:	6961      	ldr	r1, [r4, #20]
 800803c:	b111      	cbz	r1, 8008044 <_reclaim_reent+0x2c>
 800803e:	4620      	mov	r0, r4
 8008040:	f000 f894 	bl	800816c <_free_r>
 8008044:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008046:	b111      	cbz	r1, 800804e <_reclaim_reent+0x36>
 8008048:	4620      	mov	r0, r4
 800804a:	f000 f88f 	bl	800816c <_free_r>
 800804e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008050:	b111      	cbz	r1, 8008058 <_reclaim_reent+0x40>
 8008052:	4620      	mov	r0, r4
 8008054:	f000 f88a 	bl	800816c <_free_r>
 8008058:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800805a:	b111      	cbz	r1, 8008062 <_reclaim_reent+0x4a>
 800805c:	4620      	mov	r0, r4
 800805e:	f000 f885 	bl	800816c <_free_r>
 8008062:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008064:	b111      	cbz	r1, 800806c <_reclaim_reent+0x54>
 8008066:	4620      	mov	r0, r4
 8008068:	f000 f880 	bl	800816c <_free_r>
 800806c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800806e:	b111      	cbz	r1, 8008076 <_reclaim_reent+0x5e>
 8008070:	4620      	mov	r0, r4
 8008072:	f000 f87b 	bl	800816c <_free_r>
 8008076:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008078:	b111      	cbz	r1, 8008080 <_reclaim_reent+0x68>
 800807a:	4620      	mov	r0, r4
 800807c:	f000 f876 	bl	800816c <_free_r>
 8008080:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008082:	b111      	cbz	r1, 800808a <_reclaim_reent+0x72>
 8008084:	4620      	mov	r0, r4
 8008086:	f000 f871 	bl	800816c <_free_r>
 800808a:	69a3      	ldr	r3, [r4, #24]
 800808c:	b1e3      	cbz	r3, 80080c8 <_reclaim_reent+0xb0>
 800808e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008090:	4620      	mov	r0, r4
 8008092:	4798      	blx	r3
 8008094:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008096:	b1b9      	cbz	r1, 80080c8 <_reclaim_reent+0xb0>
 8008098:	4620      	mov	r0, r4
 800809a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800809e:	f7ff bfad 	b.w	8007ffc <cleanup_glue>
 80080a2:	5949      	ldr	r1, [r1, r5]
 80080a4:	b941      	cbnz	r1, 80080b8 <_reclaim_reent+0xa0>
 80080a6:	3504      	adds	r5, #4
 80080a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080aa:	2d80      	cmp	r5, #128	; 0x80
 80080ac:	68d9      	ldr	r1, [r3, #12]
 80080ae:	d1f8      	bne.n	80080a2 <_reclaim_reent+0x8a>
 80080b0:	4620      	mov	r0, r4
 80080b2:	f000 f85b 	bl	800816c <_free_r>
 80080b6:	e7ba      	b.n	800802e <_reclaim_reent+0x16>
 80080b8:	680e      	ldr	r6, [r1, #0]
 80080ba:	4620      	mov	r0, r4
 80080bc:	f000 f856 	bl	800816c <_free_r>
 80080c0:	4631      	mov	r1, r6
 80080c2:	e7ef      	b.n	80080a4 <_reclaim_reent+0x8c>
 80080c4:	2500      	movs	r5, #0
 80080c6:	e7ef      	b.n	80080a8 <_reclaim_reent+0x90>
 80080c8:	bd70      	pop	{r4, r5, r6, pc}
 80080ca:	bf00      	nop
 80080cc:	2000002c 	.word	0x2000002c

080080d0 <__utoa>:
 80080d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080d2:	4c1f      	ldr	r4, [pc, #124]	; (8008150 <__utoa+0x80>)
 80080d4:	b08b      	sub	sp, #44	; 0x2c
 80080d6:	4605      	mov	r5, r0
 80080d8:	460b      	mov	r3, r1
 80080da:	466e      	mov	r6, sp
 80080dc:	f104 0c20 	add.w	ip, r4, #32
 80080e0:	6820      	ldr	r0, [r4, #0]
 80080e2:	6861      	ldr	r1, [r4, #4]
 80080e4:	4637      	mov	r7, r6
 80080e6:	c703      	stmia	r7!, {r0, r1}
 80080e8:	3408      	adds	r4, #8
 80080ea:	4564      	cmp	r4, ip
 80080ec:	463e      	mov	r6, r7
 80080ee:	d1f7      	bne.n	80080e0 <__utoa+0x10>
 80080f0:	7921      	ldrb	r1, [r4, #4]
 80080f2:	7139      	strb	r1, [r7, #4]
 80080f4:	1e91      	subs	r1, r2, #2
 80080f6:	6820      	ldr	r0, [r4, #0]
 80080f8:	6038      	str	r0, [r7, #0]
 80080fa:	2922      	cmp	r1, #34	; 0x22
 80080fc:	f04f 0100 	mov.w	r1, #0
 8008100:	d904      	bls.n	800810c <__utoa+0x3c>
 8008102:	7019      	strb	r1, [r3, #0]
 8008104:	460b      	mov	r3, r1
 8008106:	4618      	mov	r0, r3
 8008108:	b00b      	add	sp, #44	; 0x2c
 800810a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800810c:	1e58      	subs	r0, r3, #1
 800810e:	4684      	mov	ip, r0
 8008110:	fbb5 f7f2 	udiv	r7, r5, r2
 8008114:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8008118:	fb02 5617 	mls	r6, r2, r7, r5
 800811c:	4476      	add	r6, lr
 800811e:	460c      	mov	r4, r1
 8008120:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8008124:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8008128:	462e      	mov	r6, r5
 800812a:	42b2      	cmp	r2, r6
 800812c:	f101 0101 	add.w	r1, r1, #1
 8008130:	463d      	mov	r5, r7
 8008132:	d9ed      	bls.n	8008110 <__utoa+0x40>
 8008134:	2200      	movs	r2, #0
 8008136:	545a      	strb	r2, [r3, r1]
 8008138:	1919      	adds	r1, r3, r4
 800813a:	1aa5      	subs	r5, r4, r2
 800813c:	42aa      	cmp	r2, r5
 800813e:	dae2      	bge.n	8008106 <__utoa+0x36>
 8008140:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8008144:	780e      	ldrb	r6, [r1, #0]
 8008146:	7006      	strb	r6, [r0, #0]
 8008148:	3201      	adds	r2, #1
 800814a:	f801 5901 	strb.w	r5, [r1], #-1
 800814e:	e7f4      	b.n	800813a <__utoa+0x6a>
 8008150:	08008b7c 	.word	0x08008b7c

08008154 <__malloc_lock>:
 8008154:	4801      	ldr	r0, [pc, #4]	; (800815c <__malloc_lock+0x8>)
 8008156:	f7ff bf47 	b.w	8007fe8 <__retarget_lock_acquire_recursive>
 800815a:	bf00      	nop
 800815c:	2000447c 	.word	0x2000447c

08008160 <__malloc_unlock>:
 8008160:	4801      	ldr	r0, [pc, #4]	; (8008168 <__malloc_unlock+0x8>)
 8008162:	f7ff bf42 	b.w	8007fea <__retarget_lock_release_recursive>
 8008166:	bf00      	nop
 8008168:	2000447c 	.word	0x2000447c

0800816c <_free_r>:
 800816c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800816e:	2900      	cmp	r1, #0
 8008170:	d048      	beq.n	8008204 <_free_r+0x98>
 8008172:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008176:	9001      	str	r0, [sp, #4]
 8008178:	2b00      	cmp	r3, #0
 800817a:	f1a1 0404 	sub.w	r4, r1, #4
 800817e:	bfb8      	it	lt
 8008180:	18e4      	addlt	r4, r4, r3
 8008182:	f7ff ffe7 	bl	8008154 <__malloc_lock>
 8008186:	4a20      	ldr	r2, [pc, #128]	; (8008208 <_free_r+0x9c>)
 8008188:	9801      	ldr	r0, [sp, #4]
 800818a:	6813      	ldr	r3, [r2, #0]
 800818c:	4615      	mov	r5, r2
 800818e:	b933      	cbnz	r3, 800819e <_free_r+0x32>
 8008190:	6063      	str	r3, [r4, #4]
 8008192:	6014      	str	r4, [r2, #0]
 8008194:	b003      	add	sp, #12
 8008196:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800819a:	f7ff bfe1 	b.w	8008160 <__malloc_unlock>
 800819e:	42a3      	cmp	r3, r4
 80081a0:	d90b      	bls.n	80081ba <_free_r+0x4e>
 80081a2:	6821      	ldr	r1, [r4, #0]
 80081a4:	1862      	adds	r2, r4, r1
 80081a6:	4293      	cmp	r3, r2
 80081a8:	bf04      	itt	eq
 80081aa:	681a      	ldreq	r2, [r3, #0]
 80081ac:	685b      	ldreq	r3, [r3, #4]
 80081ae:	6063      	str	r3, [r4, #4]
 80081b0:	bf04      	itt	eq
 80081b2:	1852      	addeq	r2, r2, r1
 80081b4:	6022      	streq	r2, [r4, #0]
 80081b6:	602c      	str	r4, [r5, #0]
 80081b8:	e7ec      	b.n	8008194 <_free_r+0x28>
 80081ba:	461a      	mov	r2, r3
 80081bc:	685b      	ldr	r3, [r3, #4]
 80081be:	b10b      	cbz	r3, 80081c4 <_free_r+0x58>
 80081c0:	42a3      	cmp	r3, r4
 80081c2:	d9fa      	bls.n	80081ba <_free_r+0x4e>
 80081c4:	6811      	ldr	r1, [r2, #0]
 80081c6:	1855      	adds	r5, r2, r1
 80081c8:	42a5      	cmp	r5, r4
 80081ca:	d10b      	bne.n	80081e4 <_free_r+0x78>
 80081cc:	6824      	ldr	r4, [r4, #0]
 80081ce:	4421      	add	r1, r4
 80081d0:	1854      	adds	r4, r2, r1
 80081d2:	42a3      	cmp	r3, r4
 80081d4:	6011      	str	r1, [r2, #0]
 80081d6:	d1dd      	bne.n	8008194 <_free_r+0x28>
 80081d8:	681c      	ldr	r4, [r3, #0]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	6053      	str	r3, [r2, #4]
 80081de:	4421      	add	r1, r4
 80081e0:	6011      	str	r1, [r2, #0]
 80081e2:	e7d7      	b.n	8008194 <_free_r+0x28>
 80081e4:	d902      	bls.n	80081ec <_free_r+0x80>
 80081e6:	230c      	movs	r3, #12
 80081e8:	6003      	str	r3, [r0, #0]
 80081ea:	e7d3      	b.n	8008194 <_free_r+0x28>
 80081ec:	6825      	ldr	r5, [r4, #0]
 80081ee:	1961      	adds	r1, r4, r5
 80081f0:	428b      	cmp	r3, r1
 80081f2:	bf04      	itt	eq
 80081f4:	6819      	ldreq	r1, [r3, #0]
 80081f6:	685b      	ldreq	r3, [r3, #4]
 80081f8:	6063      	str	r3, [r4, #4]
 80081fa:	bf04      	itt	eq
 80081fc:	1949      	addeq	r1, r1, r5
 80081fe:	6021      	streq	r1, [r4, #0]
 8008200:	6054      	str	r4, [r2, #4]
 8008202:	e7c7      	b.n	8008194 <_free_r+0x28>
 8008204:	b003      	add	sp, #12
 8008206:	bd30      	pop	{r4, r5, pc}
 8008208:	200042e4 	.word	0x200042e4

0800820c <_init>:
 800820c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800820e:	bf00      	nop
 8008210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008212:	bc08      	pop	{r3}
 8008214:	469e      	mov	lr, r3
 8008216:	4770      	bx	lr

08008218 <_fini>:
 8008218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800821a:	bf00      	nop
 800821c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800821e:	bc08      	pop	{r3}
 8008220:	469e      	mov	lr, r3
 8008222:	4770      	bx	lr
