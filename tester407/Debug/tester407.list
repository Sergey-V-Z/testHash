
tester407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a058  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000016d4  0800a1e8  0800a1e8  0001a1e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b8bc  0800b8bc  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  0800b8bc  0800b8bc  0001b8bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b8c4  0800b8c4  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b8c4  0800b8c4  0001b8c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b8c8  0800b8c8  0001b8c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800b8cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020084  2**0
                  CONTENTS
 10 .bss          00004854  20000084  20000084  00020084  2**2
                  ALLOC
 11 ._user_heap_stack 00006000  200048d8  200048d8  00020084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002032d  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000040f3  00000000  00000000  000403e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001628  00000000  00000000  000444d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014b0  00000000  00000000  00045b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000270ec  00000000  00000000  00046fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b58e  00000000  00000000  0006e09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d99b9  00000000  00000000  0008962a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00162fe3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000060f0  00000000  00000000  00163038  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a1d0 	.word	0x0800a1d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	0800a1d0 	.word	0x0800a1d0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <_ZN9RV_BUTTONC1EP12GPIO_TypeDeftbb>:
#include "RV_BUTTON.h"

//создание экземпляра класса кнопки, порт, вывод, type (HIGH_PULL / LOW_PULL) и направление dir (NORM_OPEN / NORM_CLOSE)
RV_BUTTON::RV_BUTTON(GPIO_TypeDef *port, uint16_t pin, bool type, bool dir) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af00      	add	r7, sp, #0
 800056e:	60f8      	str	r0, [r7, #12]
 8000570:	60b9      	str	r1, [r7, #8]
 8000572:	4611      	mov	r1, r2
 8000574:	461a      	mov	r2, r3
 8000576:	460b      	mov	r3, r1
 8000578:	80fb      	strh	r3, [r7, #6]
 800057a:	4613      	mov	r3, r2
 800057c:	717b      	strb	r3, [r7, #5]
	_PORT = port;
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	68ba      	ldr	r2, [r7, #8]
 8000582:	605a      	str	r2, [r3, #4]
	_PIN = pin;
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	88fa      	ldrh	r2, [r7, #6]
 8000588:	811a      	strh	r2, [r3, #8]
	RV_BUTTON::init();
 800058a:	68f8      	ldr	r0, [r7, #12]
 800058c:	f000 f80d 	bl	80005aa <_ZN9RV_BUTTON4initEv>
	RV_BUTTON::setType(type);
 8000590:	797b      	ldrb	r3, [r7, #5]
 8000592:	4619      	mov	r1, r3
 8000594:	68f8      	ldr	r0, [r7, #12]
 8000596:	f000 f82e 	bl	80005f6 <_ZN9RV_BUTTON7setTypeEb>
	_inv_state = dir;
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	7e3a      	ldrb	r2, [r7, #24]
 800059e:	761a      	strb	r2, [r3, #24]
}
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	4618      	mov	r0, r3
 80005a4:	3710      	adds	r7, #16
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}

080005aa <_ZN9RV_BUTTON4initEv>:
//инициализация
void RV_BUTTON::init() {
 80005aa:	b580      	push	{r7, lr}
 80005ac:	b082      	sub	sp, #8
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	6078      	str	r0, [r7, #4]
	_mode = false;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	2200      	movs	r2, #0
 80005b6:	765a      	strb	r2, [r3, #25]
	btn_timer = 0;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2200      	movs	r2, #0
 80005bc:	615a      	str	r2, [r3, #20]
	btn_counter = 0;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	2200      	movs	r2, #0
 80005c2:	741a      	strb	r2, [r3, #16]
	last_counter = 0;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2200      	movs	r2, #0
 80005c8:	745a      	strb	r2, [r3, #17]
	_debounce = 120;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	2278      	movs	r2, #120	; 0x78
 80005ce:	815a      	strh	r2, [r3, #10]
	_timeout = 500;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005d6:	819a      	strh	r2, [r3, #12]
	_step_timeout = 400;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80005de:	81da      	strh	r2, [r3, #14]
	_inv_state = NORM_OPEN;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2200      	movs	r2, #0
 80005e4:	761a      	strb	r2, [r3, #24]
	RV_BUTTON::setType(HIGH_PULL);
 80005e6:	2100      	movs	r1, #0
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f000 f804 	bl	80005f6 <_ZN9RV_BUTTON7setTypeEb>
}
 80005ee:	bf00      	nop
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}

080005f6 <_ZN9RV_BUTTON7setTypeEb>:
//установка таймаута между инкрементами (по умолчанию 400 мс)
void RV_BUTTON::setStepTimeout(uint16_t step_timeout) {
	_step_timeout = step_timeout;
}
//установка типа кнопки (HIGH_PULL / LOW_PULL)
void RV_BUTTON::setType(bool type) {
 80005f6:	b480      	push	{r7}
 80005f8:	b083      	sub	sp, #12
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	6078      	str	r0, [r7, #4]
 80005fe:	460b      	mov	r3, r1
 8000600:	70fb      	strb	r3, [r7, #3]
	_type = type;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	78fa      	ldrb	r2, [r7, #3]
 8000606:	769a      	strb	r2, [r3, #26]
}
 8000608:	bf00      	nop
 800060a:	370c      	adds	r7, #12
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr

08000614 <_ZN9RV_BUTTON7isClickEv>:
	}
	else
		return false;
}
//возвращает true при клике. Сбрасывается после вызова
bool RV_BUTTON::isClick() {	
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
	if (flags.isOne_f) {
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	785b      	ldrb	r3, [r3, #1]
 8000620:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000624:	b2db      	uxtb	r3, r3
 8000626:	2b00      	cmp	r3, #0
 8000628:	d006      	beq.n	8000638 <_ZN9RV_BUTTON7isClickEv+0x24>
		flags.isOne_f = false;
 800062a:	687a      	ldr	r2, [r7, #4]
 800062c:	7853      	ldrb	r3, [r2, #1]
 800062e:	f36f 0341 	bfc	r3, #1, #1
 8000632:	7053      	strb	r3, [r2, #1]
		return true;
 8000634:	2301      	movs	r3, #1
 8000636:	e000      	b.n	800063a <_ZN9RV_BUTTON7isClickEv+0x26>
	}
	else
		return false;
 8000638:	2300      	movs	r3, #0
}
 800063a:	4618      	mov	r0, r3
 800063c:	370c      	adds	r7, #12
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr

08000646 <_ZN9RV_BUTTON4tickEv>:
	_mode = true;
	flags.btn_state = state ^ _inv_state;
	_mode = false;
}
//опрос кнопки
void RV_BUTTON::tick() {	
 8000646:	b580      	push	{r7, lr}
 8000648:	b082      	sub	sp, #8
 800064a:	af00      	add	r7, sp, #0
 800064c:	6078      	str	r0, [r7, #4]
	if (!_mode) flags.btn_state = !HAL_GPIO_ReadPin(_PORT, _PIN) ^ (_inv_state ^ _type);
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	7e5b      	ldrb	r3, [r3, #25]
 8000652:	f083 0301 	eor.w	r3, r3, #1
 8000656:	b2db      	uxtb	r3, r3
 8000658:	2b00      	cmp	r3, #0
 800065a:	d01e      	beq.n	800069a <_ZN9RV_BUTTON4tickEv+0x54>
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	685a      	ldr	r2, [r3, #4]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	891b      	ldrh	r3, [r3, #8]
 8000664:	4619      	mov	r1, r3
 8000666:	4610      	mov	r0, r2
 8000668:	f002 fafc 	bl	8002c64 <HAL_GPIO_ReadPin>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	bf0c      	ite	eq
 8000672:	2301      	moveq	r3, #1
 8000674:	2300      	movne	r3, #0
 8000676:	b2db      	uxtb	r3, r3
 8000678:	4619      	mov	r1, r3
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	7e1a      	ldrb	r2, [r3, #24]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	7e9b      	ldrb	r3, [r3, #26]
 8000682:	4053      	eors	r3, r2
 8000684:	b2db      	uxtb	r3, r3
 8000686:	4299      	cmp	r1, r3
 8000688:	bf14      	ite	ne
 800068a:	2301      	movne	r3, #1
 800068c:	2300      	moveq	r3, #0
 800068e:	b2d9      	uxtb	r1, r3
 8000690:	687a      	ldr	r2, [r7, #4]
 8000692:	7813      	ldrb	r3, [r2, #0]
 8000694:	f361 0300 	bfi	r3, r1, #0, #1
 8000698:	7013      	strb	r3, [r2, #0]
	
  if (flags.btn_state && !flags.btn_flag && (HAL_GetTick() - btn_timer >= _debounce)) {
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d015      	beq.n	80006d4 <_ZN9RV_BUTTON4tickEv+0x8e>
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	f083 0301 	eor.w	r3, r3, #1
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d00b      	beq.n	80006d4 <_ZN9RV_BUTTON4tickEv+0x8e>
 80006bc:	f001 ff78 	bl	80025b0 <HAL_GetTick>
 80006c0:	4602      	mov	r2, r0
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	695b      	ldr	r3, [r3, #20]
 80006c6:	1ad3      	subs	r3, r2, r3
 80006c8:	687a      	ldr	r2, [r7, #4]
 80006ca:	8952      	ldrh	r2, [r2, #10]
 80006cc:	4293      	cmp	r3, r2
 80006ce:	d301      	bcc.n	80006d4 <_ZN9RV_BUTTON4tickEv+0x8e>
 80006d0:	2301      	movs	r3, #1
 80006d2:	e000      	b.n	80006d6 <_ZN9RV_BUTTON4tickEv+0x90>
 80006d4:	2300      	movs	r3, #0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d019      	beq.n	800070e <_ZN9RV_BUTTON4tickEv+0xc8>
    flags.btn_flag = true;
 80006da:	687a      	ldr	r2, [r7, #4]
 80006dc:	7813      	ldrb	r3, [r2, #0]
 80006de:	f043 0302 	orr.w	r3, r3, #2
 80006e2:	7013      	strb	r3, [r2, #0]
    btn_counter++;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	7c1b      	ldrb	r3, [r3, #16]
 80006e8:	3301      	adds	r3, #1
 80006ea:	b2da      	uxtb	r2, r3
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	741a      	strb	r2, [r3, #16]
    btn_timer = HAL_GetTick();
 80006f0:	f001 ff5e 	bl	80025b0 <HAL_GetTick>
 80006f4:	4602      	mov	r2, r0
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	615a      	str	r2, [r3, #20]
    flags.isPress_f = true;
 80006fa:	687a      	ldr	r2, [r7, #4]
 80006fc:	7813      	ldrb	r3, [r2, #0]
 80006fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000702:	7013      	strb	r3, [r2, #0]
		flags.oneClick_f = true;
 8000704:	687a      	ldr	r2, [r7, #4]
 8000706:	7853      	ldrb	r3, [r2, #1]
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	7053      	strb	r3, [r2, #1]
  }
  if (!flags.btn_state && flags.btn_flag) {
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000716:	b2db      	uxtb	r3, r3
 8000718:	f083 0301 	eor.w	r3, r3, #1
 800071c:	b2db      	uxtb	r3, r3
 800071e:	2b00      	cmp	r3, #0
 8000720:	d030      	beq.n	8000784 <_ZN9RV_BUTTON4tickEv+0x13e>
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800072a:	b2db      	uxtb	r3, r3
 800072c:	2b00      	cmp	r3, #0
 800072e:	d029      	beq.n	8000784 <_ZN9RV_BUTTON4tickEv+0x13e>
    flags.btn_flag = false;
 8000730:	687a      	ldr	r2, [r7, #4]
 8000732:	7813      	ldrb	r3, [r2, #0]
 8000734:	f36f 0341 	bfc	r3, #1, #1
 8000738:	7013      	strb	r3, [r2, #0]
    flags.hold_flag = false;
 800073a:	687a      	ldr	r2, [r7, #4]
 800073c:	7813      	ldrb	r3, [r2, #0]
 800073e:	f36f 0382 	bfc	r3, #2, #1
 8000742:	7013      	strb	r3, [r2, #0]
    flags.isRelease_f = true;
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	7813      	ldrb	r3, [r2, #0]
 8000748:	f043 0320 	orr.w	r3, r3, #32
 800074c:	7013      	strb	r3, [r2, #0]
		btn_timer = HAL_GetTick();
 800074e:	f001 ff2f 	bl	80025b0 <HAL_GetTick>
 8000752:	4602      	mov	r2, r0
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	615a      	str	r2, [r3, #20]
		flags.step_flag = false;
 8000758:	687a      	ldr	r2, [r7, #4]
 800075a:	7813      	ldrb	r3, [r2, #0]
 800075c:	f36f 13c7 	bfc	r3, #7, #1
 8000760:	7013      	strb	r3, [r2, #0]
		if (flags.oneClick_f) {
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	785b      	ldrb	r3, [r3, #1]
 8000766:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800076a:	b2db      	uxtb	r3, r3
 800076c:	2b00      	cmp	r3, #0
 800076e:	d009      	beq.n	8000784 <_ZN9RV_BUTTON4tickEv+0x13e>
			flags.oneClick_f = false;
 8000770:	687a      	ldr	r2, [r7, #4]
 8000772:	7853      	ldrb	r3, [r2, #1]
 8000774:	f36f 0300 	bfc	r3, #0, #1
 8000778:	7053      	strb	r3, [r2, #1]
			flags.isOne_f = true;
 800077a:	687a      	ldr	r2, [r7, #4]
 800077c:	7853      	ldrb	r3, [r2, #1]
 800077e:	f043 0302 	orr.w	r3, r3, #2
 8000782:	7053      	strb	r3, [r2, #1]
		}
  }
  if (flags.btn_flag && flags.btn_state && (HAL_GetTick() - btn_timer >= _timeout) && !flags.hold_flag) {
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800078c:	b2db      	uxtb	r3, r3
 800078e:	2b00      	cmp	r3, #0
 8000790:	d01c      	beq.n	80007cc <_ZN9RV_BUTTON4tickEv+0x186>
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800079a:	b2db      	uxtb	r3, r3
 800079c:	2b00      	cmp	r3, #0
 800079e:	d015      	beq.n	80007cc <_ZN9RV_BUTTON4tickEv+0x186>
 80007a0:	f001 ff06 	bl	80025b0 <HAL_GetTick>
 80007a4:	4602      	mov	r2, r0
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	695b      	ldr	r3, [r3, #20]
 80007aa:	1ad3      	subs	r3, r2, r3
 80007ac:	687a      	ldr	r2, [r7, #4]
 80007ae:	8992      	ldrh	r2, [r2, #12]
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d30b      	bcc.n	80007cc <_ZN9RV_BUTTON4tickEv+0x186>
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	f083 0301 	eor.w	r3, r3, #1
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <_ZN9RV_BUTTON4tickEv+0x186>
 80007c8:	2301      	movs	r3, #1
 80007ca:	e000      	b.n	80007ce <_ZN9RV_BUTTON4tickEv+0x188>
 80007cc:	2300      	movs	r3, #0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d01b      	beq.n	800080a <_ZN9RV_BUTTON4tickEv+0x1c4>
    flags.hold_flag = true;
 80007d2:	687a      	ldr	r2, [r7, #4]
 80007d4:	7813      	ldrb	r3, [r2, #0]
 80007d6:	f043 0304 	orr.w	r3, r3, #4
 80007da:	7013      	strb	r3, [r2, #0]
    btn_counter = 0;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2200      	movs	r2, #0
 80007e0:	741a      	strb	r2, [r3, #16]
    flags.isHolded_f = true;
 80007e2:	687a      	ldr	r2, [r7, #4]
 80007e4:	7813      	ldrb	r3, [r2, #0]
 80007e6:	f043 0310 	orr.w	r3, r3, #16
 80007ea:	7013      	strb	r3, [r2, #0]
		flags.step_flag = true;
 80007ec:	687a      	ldr	r2, [r7, #4]
 80007ee:	7813      	ldrb	r3, [r2, #0]
 80007f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f4:	7013      	strb	r3, [r2, #0]
		flags.oneClick_f = false;
 80007f6:	687a      	ldr	r2, [r7, #4]
 80007f8:	7853      	ldrb	r3, [r2, #1]
 80007fa:	f36f 0300 	bfc	r3, #0, #1
 80007fe:	7053      	strb	r3, [r2, #1]
		btn_timer = HAL_GetTick();
 8000800:	f001 fed6 	bl	80025b0 <HAL_GetTick>
 8000804:	4602      	mov	r2, r0
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	615a      	str	r2, [r3, #20]
  }
  
  if ((HAL_GetTick() - btn_timer >= _timeout) && (btn_counter != 0)) {    
 800080a:	f001 fed1 	bl	80025b0 <HAL_GetTick>
 800080e:	4602      	mov	r2, r0
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	695b      	ldr	r3, [r3, #20]
 8000814:	1ad3      	subs	r3, r2, r3
 8000816:	687a      	ldr	r2, [r7, #4]
 8000818:	8992      	ldrh	r2, [r2, #12]
 800081a:	4293      	cmp	r3, r2
 800081c:	d305      	bcc.n	800082a <_ZN9RV_BUTTON4tickEv+0x1e4>
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	7c1b      	ldrb	r3, [r3, #16]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <_ZN9RV_BUTTON4tickEv+0x1e4>
 8000826:	2301      	movs	r3, #1
 8000828:	e000      	b.n	800082c <_ZN9RV_BUTTON4tickEv+0x1e6>
 800082a:	2300      	movs	r3, #0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d00b      	beq.n	8000848 <_ZN9RV_BUTTON4tickEv+0x202>
    last_counter = btn_counter;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	7c1a      	ldrb	r2, [r3, #16]
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	745a      	strb	r2, [r3, #17]
    btn_counter = 0;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2200      	movs	r2, #0
 800083c:	741a      	strb	r2, [r3, #16]
		flags.counter_flag = true;
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	7813      	ldrb	r3, [r2, #0]
 8000842:	f043 0308 	orr.w	r3, r3, #8
 8000846:	7013      	strb	r3, [r2, #0]
  }
}
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8000850:	b480      	push	{r7}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0
 8000856:	60f8      	str	r0, [r7, #12]
 8000858:	60b9      	str	r1, [r7, #8]
 800085a:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	4a07      	ldr	r2, [pc, #28]	; (800087c <vApplicationGetIdleTaskMemory+0x2c>)
 8000860:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	4a06      	ldr	r2, [pc, #24]	; (8000880 <vApplicationGetIdleTaskMemory+0x30>)
 8000866:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	2280      	movs	r2, #128	; 0x80
 800086c:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 800086e:	bf00      	nop
 8000870:	3714      	adds	r7, #20
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	200002dc 	.word	0x200002dc
 8000880:	20000390 	.word	0x20000390

08000884 <_Z16MX_FREERTOS_Initv>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000884:	b5b0      	push	{r4, r5, r7, lr}
 8000886:	b09c      	sub	sp, #112	; 0x70
 8000888:	af00      	add	r7, sp, #0
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of testTask */
  osThreadDef(testTask, TestTask, osPriorityNormal, 0, 256);
 800088a:	4b27      	ldr	r3, [pc, #156]	; (8000928 <_Z16MX_FREERTOS_Initv+0xa4>)
 800088c:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000890:	461d      	mov	r5, r3
 8000892:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000894:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000896:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800089a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  testTaskHandle = osThreadCreate(osThread(testTask), NULL);
 800089e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008a2:	2100      	movs	r1, #0
 80008a4:	4618      	mov	r0, r3
 80008a6:	f007 fd70 	bl	800838a <osThreadCreate>
 80008aa:	4603      	mov	r3, r0
 80008ac:	4a1f      	ldr	r2, [pc, #124]	; (800092c <_Z16MX_FREERTOS_Initv+0xa8>)
 80008ae:	6013      	str	r3, [r2, #0]

  /* definition and creation of lcdTask */
  osThreadDef(lcdTask, LCDTask, osPriorityNormal, 0, 512);
 80008b0:	4b1f      	ldr	r3, [pc, #124]	; (8000930 <_Z16MX_FREERTOS_Initv+0xac>)
 80008b2:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80008b6:	461d      	mov	r5, r3
 80008b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  lcdTaskHandle = osThreadCreate(osThread(lcdTask), NULL);
 80008c4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f007 fd5d 	bl	800838a <osThreadCreate>
 80008d0:	4603      	mov	r3, r0
 80008d2:	4a18      	ldr	r2, [pc, #96]	; (8000934 <_Z16MX_FREERTOS_Initv+0xb0>)
 80008d4:	6013      	str	r3, [r2, #0]

  /* definition and creation of I2C_Task */
  osThreadDef(I2C_Task, i2c_Task, osPriorityNormal, 0, 256);
 80008d6:	4b18      	ldr	r3, [pc, #96]	; (8000938 <_Z16MX_FREERTOS_Initv+0xb4>)
 80008d8:	f107 041c 	add.w	r4, r7, #28
 80008dc:	461d      	mov	r5, r3
 80008de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  I2C_TaskHandle = osThreadCreate(osThread(I2C_Task), NULL);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	2100      	movs	r1, #0
 80008f0:	4618      	mov	r0, r3
 80008f2:	f007 fd4a 	bl	800838a <osThreadCreate>
 80008f6:	4603      	mov	r3, r0
 80008f8:	4a10      	ldr	r2, [pc, #64]	; (800093c <_Z16MX_FREERTOS_Initv+0xb8>)
 80008fa:	6013      	str	r3, [r2, #0]

  /* definition and creation of buttonTask */
  osThreadDef(buttonTask, ButtonTask, osPriorityNormal, 0, 128);
 80008fc:	4b10      	ldr	r3, [pc, #64]	; (8000940 <_Z16MX_FREERTOS_Initv+0xbc>)
 80008fe:	463c      	mov	r4, r7
 8000900:	461d      	mov	r5, r3
 8000902:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000904:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000906:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800090a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  buttonTaskHandle = osThreadCreate(osThread(buttonTask), NULL);
 800090e:	463b      	mov	r3, r7
 8000910:	2100      	movs	r1, #0
 8000912:	4618      	mov	r0, r3
 8000914:	f007 fd39 	bl	800838a <osThreadCreate>
 8000918:	4603      	mov	r3, r0
 800091a:	4a0a      	ldr	r2, [pc, #40]	; (8000944 <_Z16MX_FREERTOS_Initv+0xc0>)
 800091c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800091e:	bf00      	nop
 8000920:	3770      	adds	r7, #112	; 0x70
 8000922:	46bd      	mov	sp, r7
 8000924:	bdb0      	pop	{r4, r5, r7, pc}
 8000926:	bf00      	nop
 8000928:	0800a214 	.word	0x0800a214
 800092c:	200002cc 	.word	0x200002cc
 8000930:	0800a230 	.word	0x0800a230
 8000934:	200002d0 	.word	0x200002d0
 8000938:	0800a24c 	.word	0x0800a24c
 800093c:	200002d4 	.word	0x200002d4
 8000940:	0800a268 	.word	0x0800a268
 8000944:	200002d8 	.word	0x200002d8

08000948 <_Z8TestTaskPKv>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_TestTask */
void TestTask(void const * argument)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b088      	sub	sp, #32
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TestTask */

	uint32_t timeOutUART = 50;
 8000950:	2332      	movs	r3, #50	; 0x32
 8000952:	61fb      	str	r3, [r7, #28]
	uint8_t snum[5];
	//команды uart
	uint8_t cmdASIC[7] = { 0x55, 0xAA, 0x52, 0x05, 0x00, 0x00, 0x0A };
 8000954:	4a92      	ldr	r2, [pc, #584]	; (8000ba0 <_Z8TestTaskPKv+0x258>)
 8000956:	f107 030c 	add.w	r3, r7, #12
 800095a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800095e:	6018      	str	r0, [r3, #0]
 8000960:	3304      	adds	r3, #4
 8000962:	8019      	strh	r1, [r3, #0]
 8000964:	3302      	adds	r3, #2
 8000966:	0c0a      	lsrs	r2, r1, #16
 8000968:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(RST_ASIC_GPIO_Port, RST_ASIC_Pin, GPIO_PIN_RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000970:	488c      	ldr	r0, [pc, #560]	; (8000ba4 <_Z8TestTaskPKv+0x25c>)
 8000972:	f002 f98f 	bl	8002c94 <HAL_GPIO_WritePin>


	/* Infinite loop */
	for (;;) {
		if (start && ready) {
 8000976:	4b8c      	ldr	r3, [pc, #560]	; (8000ba8 <_Z8TestTaskPKv+0x260>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	2b00      	cmp	r3, #0
 800097c:	f000 810b 	beq.w	8000b96 <_Z8TestTaskPKv+0x24e>
 8000980:	4b8a      	ldr	r3, [pc, #552]	; (8000bac <_Z8TestTaskPKv+0x264>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	2b00      	cmp	r3, #0
 8000986:	f000 8106 	beq.w	8000b96 <_Z8TestTaskPKv+0x24e>
			counter_bytes = 0;
 800098a:	4b89      	ldr	r3, [pc, #548]	; (8000bb0 <_Z8TestTaskPKv+0x268>)
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(RST_ASIC_GPIO_Port, RST_ASIC_Pin, GPIO_PIN_RESET);
 8000990:	2200      	movs	r2, #0
 8000992:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000996:	4883      	ldr	r0, [pc, #524]	; (8000ba4 <_Z8TestTaskPKv+0x25c>)
 8000998:	f002 f97c 	bl	8002c94 <HAL_GPIO_WritePin>
			osDelay(4);
 800099c:	2004      	movs	r0, #4
 800099e:	f007 fd40 	bl	8008422 <osDelay>
			HAL_GPIO_WritePin(RST_ASIC_GPIO_Port, RST_ASIC_Pin, GPIO_PIN_SET);
 80009a2:	2201      	movs	r2, #1
 80009a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009a8:	487e      	ldr	r0, [pc, #504]	; (8000ba4 <_Z8TestTaskPKv+0x25c>)
 80009aa:	f002 f973 	bl	8002c94 <HAL_GPIO_WritePin>
			osDelay(1200);
 80009ae:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80009b2:	f007 fd36 	bl	8008422 <osDelay>


			if(start == 1 ){
 80009b6:	4b7c      	ldr	r3, [pc, #496]	; (8000ba8 <_Z8TestTaskPKv+0x260>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d17d      	bne.n	8000aba <_Z8TestTaskPKv+0x172>
				//цикл опроса
				while (start) {
 80009be:	4b7a      	ldr	r3, [pc, #488]	; (8000ba8 <_Z8TestTaskPKv+0x260>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	f000 80e7 	beq.w	8000b96 <_Z8TestTaskPKv+0x24e>

					//сброс асиков
					HAL_GPIO_WritePin(RST_ASIC_GPIO_Port, RST_ASIC_Pin, GPIO_PIN_RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009ce:	4875      	ldr	r0, [pc, #468]	; (8000ba4 <_Z8TestTaskPKv+0x25c>)
 80009d0:	f002 f960 	bl	8002c94 <HAL_GPIO_WritePin>
					osDelay(500);
 80009d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009d8:	f007 fd23 	bl	8008422 <osDelay>
					HAL_GPIO_WritePin(RST_ASIC_GPIO_Port, RST_ASIC_Pin, GPIO_PIN_SET);
 80009dc:	2201      	movs	r2, #1
 80009de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009e2:	4870      	ldr	r0, [pc, #448]	; (8000ba4 <_Z8TestTaskPKv+0x25c>)
 80009e4:	f002 f956 	bl	8002c94 <HAL_GPIO_WritePin>
					osDelay(500);
 80009e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009ec:	f007 fd19 	bl	8008422 <osDelay>

					status_uart = HAL_UART_Receive_IT(&huart6, readASIC, 1);
 80009f0:	2201      	movs	r2, #1
 80009f2:	4970      	ldr	r1, [pc, #448]	; (8000bb4 <_Z8TestTaskPKv+0x26c>)
 80009f4:	4870      	ldr	r0, [pc, #448]	; (8000bb8 <_Z8TestTaskPKv+0x270>)
 80009f6:	f006 fd1e 	bl	8007436 <HAL_UART_Receive_IT>
 80009fa:	4603      	mov	r3, r0
 80009fc:	461a      	mov	r2, r3
 80009fe:	4b6f      	ldr	r3, [pc, #444]	; (8000bbc <_Z8TestTaskPKv+0x274>)
 8000a00:	701a      	strb	r2, [r3, #0]
					status_uart = HAL_UART_Transmit(&huart1, cmdASIC, 7, 20);
 8000a02:	f107 010c 	add.w	r1, r7, #12
 8000a06:	2314      	movs	r3, #20
 8000a08:	2207      	movs	r2, #7
 8000a0a:	486d      	ldr	r0, [pc, #436]	; (8000bc0 <_Z8TestTaskPKv+0x278>)
 8000a0c:	f006 fc81 	bl	8007312 <HAL_UART_Transmit>
 8000a10:	4603      	mov	r3, r0
 8000a12:	461a      	mov	r2, r3
 8000a14:	4b69      	ldr	r3, [pc, #420]	; (8000bbc <_Z8TestTaskPKv+0x274>)
 8000a16:	701a      	strb	r2, [r3, #0]

					//запускаем таймер
					status_uartTIM = 1;
 8000a18:	4b6a      	ldr	r3, [pc, #424]	; (8000bc4 <_Z8TestTaskPKv+0x27c>)
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	701a      	strb	r2, [r3, #0]
					// ожидать таймаута по уарту
					while(uartTIM < timeOutUART){
 8000a1e:	4b6a      	ldr	r3, [pc, #424]	; (8000bc8 <_Z8TestTaskPKv+0x280>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	69fa      	ldr	r2, [r7, #28]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d903      	bls.n	8000a30 <_Z8TestTaskPKv+0xe8>
						osDelay(1);
 8000a28:	2001      	movs	r0, #1
 8000a2a:	f007 fcfa 	bl	8008422 <osDelay>
					while(uartTIM < timeOutUART){
 8000a2e:	e7f6      	b.n	8000a1e <_Z8TestTaskPKv+0xd6>
					}
					uartTIM = 0;
 8000a30:	4b65      	ldr	r3, [pc, #404]	; (8000bc8 <_Z8TestTaskPKv+0x280>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
					status_uartTIM = 0;
 8000a36:	4b63      	ldr	r3, [pc, #396]	; (8000bc4 <_Z8TestTaskPKv+0x27c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	701a      	strb	r2, [r3, #0]

					// все данные пришли отключаем уарт
					HAL_UART_AbortReceive(&huart6);
 8000a3c:	485e      	ldr	r0, [pc, #376]	; (8000bb8 <_Z8TestTaskPKv+0x270>)
 8000a3e:	f006 fd2a 	bl	8007496 <HAL_UART_AbortReceive>

					//проверить пришедшие данные сравненией с шаблоном

					//посчитать количесво асиков

					pre_count_ASIC = counter_bytes / 9;
 8000a42:	4b5b      	ldr	r3, [pc, #364]	; (8000bb0 <_Z8TestTaskPKv+0x268>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4a61      	ldr	r2, [pc, #388]	; (8000bcc <_Z8TestTaskPKv+0x284>)
 8000a48:	fba2 2303 	umull	r2, r3, r2, r3
 8000a4c:	085b      	lsrs	r3, r3, #1
 8000a4e:	4a60      	ldr	r2, [pc, #384]	; (8000bd0 <_Z8TestTaskPKv+0x288>)
 8000a50:	6013      	str	r3, [r2, #0]
					if(!start){
 8000a52:	4b55      	ldr	r3, [pc, #340]	; (8000ba8 <_Z8TestTaskPKv+0x260>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d102      	bne.n	8000a60 <_Z8TestTaskPKv+0x118>
						pre_count_ASIC = 0;
 8000a5a:	4b5d      	ldr	r3, [pc, #372]	; (8000bd0 <_Z8TestTaskPKv+0x288>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
					}
					//itoa(pre_count_ASIC, (char*)snum, 10);
					sprintf((char*)snum, "%-2d", (int)pre_count_ASIC);
 8000a60:	4b5b      	ldr	r3, [pc, #364]	; (8000bd0 <_Z8TestTaskPKv+0x288>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	461a      	mov	r2, r3
 8000a66:	f107 0314 	add.w	r3, r7, #20
 8000a6a:	495a      	ldr	r1, [pc, #360]	; (8000bd4 <_Z8TestTaskPKv+0x28c>)
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f009 f815 	bl	8009a9c <siprintf>

					//ssd1306_Fill(Black); //чистим экран
				    ssd1306_SetCursor(2, 28);
 8000a72:	211c      	movs	r1, #28
 8000a74:	2002      	movs	r0, #2
 8000a76:	f001 f979 	bl	8001d6c <ssd1306_SetCursor>
				    ssd1306_WriteString((char*)snum, Font_11x18, White);
 8000a7a:	4a57      	ldr	r2, [pc, #348]	; (8000bd8 <_Z8TestTaskPKv+0x290>)
 8000a7c:	f107 0014 	add.w	r0, r7, #20
 8000a80:	2301      	movs	r3, #1
 8000a82:	ca06      	ldmia	r2, {r1, r2}
 8000a84:	f001 f94c 	bl	8001d20 <ssd1306_WriteString>
				    //ssd1306_UpdateScreen();

					counter_bytes = 0;
 8000a88:	4b49      	ldr	r3, [pc, #292]	; (8000bb0 <_Z8TestTaskPKv+0x268>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
					memset(readASIC, 0, sizeof readASIC);
 8000a8e:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000a92:	2100      	movs	r1, #0
 8000a94:	4847      	ldr	r0, [pc, #284]	; (8000bb4 <_Z8TestTaskPKv+0x26c>)
 8000a96:	f008 ff25 	bl	80098e4 <memset>

					//включить индикатор готовности данных
					ssd1306_DrawCircle(50, 56, 2, White);
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	2202      	movs	r2, #2
 8000a9e:	2138      	movs	r1, #56	; 0x38
 8000aa0:	2032      	movs	r0, #50	; 0x32
 8000aa2:	f001 f97b 	bl	8001d9c <ssd1306_DrawCircle>
					osDelay(200);
 8000aa6:	20c8      	movs	r0, #200	; 0xc8
 8000aa8:	f007 fcbb 	bl	8008422 <osDelay>
					//выключить индикатор
					ssd1306_DrawCircle(50, 56, 2, Black);
 8000aac:	2300      	movs	r3, #0
 8000aae:	2202      	movs	r2, #2
 8000ab0:	2138      	movs	r1, #56	; 0x38
 8000ab2:	2032      	movs	r0, #50	; 0x32
 8000ab4:	f001 f972 	bl	8001d9c <ssd1306_DrawCircle>
				while (start) {
 8000ab8:	e781      	b.n	80009be <_Z8TestTaskPKv+0x76>

				}

			}else if(start == 2){
 8000aba:	4b3b      	ldr	r3, [pc, #236]	; (8000ba8 <_Z8TestTaskPKv+0x260>)
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	2b02      	cmp	r3, #2
 8000ac0:	d169      	bne.n	8000b96 <_Z8TestTaskPKv+0x24e>
				status_uart = HAL_UART_Receive_IT(&huart6, readASIC, 1);
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	493b      	ldr	r1, [pc, #236]	; (8000bb4 <_Z8TestTaskPKv+0x26c>)
 8000ac6:	483c      	ldr	r0, [pc, #240]	; (8000bb8 <_Z8TestTaskPKv+0x270>)
 8000ac8:	f006 fcb5 	bl	8007436 <HAL_UART_Receive_IT>
 8000acc:	4603      	mov	r3, r0
 8000ace:	461a      	mov	r2, r3
 8000ad0:	4b3a      	ldr	r3, [pc, #232]	; (8000bbc <_Z8TestTaskPKv+0x274>)
 8000ad2:	701a      	strb	r2, [r3, #0]
				//цикл опроса
				while (start) {
 8000ad4:	4b34      	ldr	r3, [pc, #208]	; (8000ba8 <_Z8TestTaskPKv+0x260>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d05c      	beq.n	8000b96 <_Z8TestTaskPKv+0x24e>


					status_uart = HAL_UART_Transmit(&huart1, cmdASIC, 7, 20);
 8000adc:	f107 010c 	add.w	r1, r7, #12
 8000ae0:	2314      	movs	r3, #20
 8000ae2:	2207      	movs	r2, #7
 8000ae4:	4836      	ldr	r0, [pc, #216]	; (8000bc0 <_Z8TestTaskPKv+0x278>)
 8000ae6:	f006 fc14 	bl	8007312 <HAL_UART_Transmit>
 8000aea:	4603      	mov	r3, r0
 8000aec:	461a      	mov	r2, r3
 8000aee:	4b33      	ldr	r3, [pc, #204]	; (8000bbc <_Z8TestTaskPKv+0x274>)
 8000af0:	701a      	strb	r2, [r3, #0]

					//запускаем таймер
					uartTIM = 0;
 8000af2:	4b35      	ldr	r3, [pc, #212]	; (8000bc8 <_Z8TestTaskPKv+0x280>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
					status_uartTIM = 1;
 8000af8:	4b32      	ldr	r3, [pc, #200]	; (8000bc4 <_Z8TestTaskPKv+0x27c>)
 8000afa:	2201      	movs	r2, #1
 8000afc:	701a      	strb	r2, [r3, #0]
					// ожидать таймаута по уарту
					while(uartTIM < timeOutUART){
 8000afe:	4b32      	ldr	r3, [pc, #200]	; (8000bc8 <_Z8TestTaskPKv+0x280>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	69fa      	ldr	r2, [r7, #28]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d903      	bls.n	8000b10 <_Z8TestTaskPKv+0x1c8>
						osDelay(1);
 8000b08:	2001      	movs	r0, #1
 8000b0a:	f007 fc8a 	bl	8008422 <osDelay>
					while(uartTIM < timeOutUART){
 8000b0e:	e7f6      	b.n	8000afe <_Z8TestTaskPKv+0x1b6>
					}
					uartTIM = 0;
 8000b10:	4b2d      	ldr	r3, [pc, #180]	; (8000bc8 <_Z8TestTaskPKv+0x280>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
					status_uartTIM = 0;
 8000b16:	4b2b      	ldr	r3, [pc, #172]	; (8000bc4 <_Z8TestTaskPKv+0x27c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	701a      	strb	r2, [r3, #0]

					//проверить пришедшие данные сравненией с шаблоном

					//посчитать количесво асиков

					pre_count_ASIC = counter_bytes / 9;
 8000b1c:	4b24      	ldr	r3, [pc, #144]	; (8000bb0 <_Z8TestTaskPKv+0x268>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a2a      	ldr	r2, [pc, #168]	; (8000bcc <_Z8TestTaskPKv+0x284>)
 8000b22:	fba2 2303 	umull	r2, r3, r2, r3
 8000b26:	085b      	lsrs	r3, r3, #1
 8000b28:	4a29      	ldr	r2, [pc, #164]	; (8000bd0 <_Z8TestTaskPKv+0x288>)
 8000b2a:	6013      	str	r3, [r2, #0]
					if(!start){
 8000b2c:	4b1e      	ldr	r3, [pc, #120]	; (8000ba8 <_Z8TestTaskPKv+0x260>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d102      	bne.n	8000b3a <_Z8TestTaskPKv+0x1f2>
						pre_count_ASIC = 0;
 8000b34:	4b26      	ldr	r3, [pc, #152]	; (8000bd0 <_Z8TestTaskPKv+0x288>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
					}
					sprintf((char*)snum, "%-2d", (int)pre_count_ASIC);
 8000b3a:	4b25      	ldr	r3, [pc, #148]	; (8000bd0 <_Z8TestTaskPKv+0x288>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	461a      	mov	r2, r3
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	4923      	ldr	r1, [pc, #140]	; (8000bd4 <_Z8TestTaskPKv+0x28c>)
 8000b46:	4618      	mov	r0, r3
 8000b48:	f008 ffa8 	bl	8009a9c <siprintf>

				    ssd1306_SetCursor(2, 28);
 8000b4c:	211c      	movs	r1, #28
 8000b4e:	2002      	movs	r0, #2
 8000b50:	f001 f90c 	bl	8001d6c <ssd1306_SetCursor>
				    ssd1306_WriteString((char*)snum, Font_11x18, White);
 8000b54:	4a20      	ldr	r2, [pc, #128]	; (8000bd8 <_Z8TestTaskPKv+0x290>)
 8000b56:	f107 0014 	add.w	r0, r7, #20
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	ca06      	ldmia	r2, {r1, r2}
 8000b5e:	f001 f8df 	bl	8001d20 <ssd1306_WriteString>

					counter_bytes = 0;
 8000b62:	4b13      	ldr	r3, [pc, #76]	; (8000bb0 <_Z8TestTaskPKv+0x268>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
					memset(readASIC, 0, sizeof readASIC);
 8000b68:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	4811      	ldr	r0, [pc, #68]	; (8000bb4 <_Z8TestTaskPKv+0x26c>)
 8000b70:	f008 feb8 	bl	80098e4 <memset>

					//включить индикатор готовности данных
					ssd1306_DrawCircle(50, 56, 2, White);
 8000b74:	2301      	movs	r3, #1
 8000b76:	2202      	movs	r2, #2
 8000b78:	2138      	movs	r1, #56	; 0x38
 8000b7a:	2032      	movs	r0, #50	; 0x32
 8000b7c:	f001 f90e 	bl	8001d9c <ssd1306_DrawCircle>
					osDelay(300);
 8000b80:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b84:	f007 fc4d 	bl	8008422 <osDelay>
					//выключить индикатор
					ssd1306_DrawCircle(50, 56, 2, Black);
 8000b88:	2300      	movs	r3, #0
 8000b8a:	2202      	movs	r2, #2
 8000b8c:	2138      	movs	r1, #56	; 0x38
 8000b8e:	2032      	movs	r0, #50	; 0x32
 8000b90:	f001 f904 	bl	8001d9c <ssd1306_DrawCircle>
				while (start) {
 8000b94:	e79e      	b.n	8000ad4 <_Z8TestTaskPKv+0x18c>

			}


	}
	osDelay(1);
 8000b96:	2001      	movs	r0, #1
 8000b98:	f007 fc43 	bl	8008422 <osDelay>
		if (start && ready) {
 8000b9c:	e6eb      	b.n	8000976 <_Z8TestTaskPKv+0x2e>
 8000b9e:	bf00      	nop
 8000ba0:	0800a28c 	.word	0x0800a28c
 8000ba4:	40020000 	.word	0x40020000
 8000ba8:	200002c8 	.word	0x200002c8
 8000bac:	200002c9 	.word	0x200002c9
 8000bb0:	200000a8 	.word	0x200000a8
 8000bb4:	200000ac 	.word	0x200000ac
 8000bb8:	20004880 	.word	0x20004880
 8000bbc:	200000a1 	.word	0x200000a1
 8000bc0:	2000483c 	.word	0x2000483c
 8000bc4:	20000594 	.word	0x20000594
 8000bc8:	20000590 	.word	0x20000590
 8000bcc:	38e38e39 	.word	0x38e38e39
 8000bd0:	200000a4 	.word	0x200000a4
 8000bd4:	0800a284 	.word	0x0800a284
 8000bd8:	20000008 	.word	0x20000008

08000bdc <_Z7LCDTaskPKv>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_LCDTask */
void LCDTask(void const * argument)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LCDTask */


	uint8_t blink = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	73fb      	strb	r3, [r7, #15]

	ssd1306_Init();
 8000be8:	f000 ff06 	bl	80019f8 <ssd1306_Init>


	//ssd1306_TestAll();
    ssd1306_SetCursor(2, 0);
 8000bec:	2100      	movs	r1, #0
 8000bee:	2002      	movs	r0, #2
 8000bf0:	f001 f8bc 	bl	8001d6c <ssd1306_SetCursor>
    ssd1306_WriteString((char*) "Tester hash v1", Font_7x10, White);
 8000bf4:	4a16      	ldr	r2, [pc, #88]	; (8000c50 <_Z7LCDTaskPKv+0x74>)
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	ca06      	ldmia	r2, {r1, r2}
 8000bfa:	4816      	ldr	r0, [pc, #88]	; (8000c54 <_Z7LCDTaskPKv+0x78>)
 8000bfc:	f001 f890 	bl	8001d20 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8000c00:	f000 ff88 	bl	8001b14 <ssd1306_UpdateScreen>

/* Infinite loop */
for (;;) {


	if(counterRefresh >= 500){
 8000c04:	4b14      	ldr	r3, [pc, #80]	; (8000c58 <_Z7LCDTaskPKv+0x7c>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000c0c:	d319      	bcc.n	8000c42 <_Z7LCDTaskPKv+0x66>
		//ssd1306_SetCursor(100, 56);
		if (blink == 0) {
 8000c0e:	7bfb      	ldrb	r3, [r7, #15]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d10b      	bne.n	8000c2c <_Z7LCDTaskPKv+0x50>
			ssd1306_DrawCircle(100, 56, 4, White);
 8000c14:	2301      	movs	r3, #1
 8000c16:	2204      	movs	r2, #4
 8000c18:	2138      	movs	r1, #56	; 0x38
 8000c1a:	2064      	movs	r0, #100	; 0x64
 8000c1c:	f001 f8be 	bl	8001d9c <ssd1306_DrawCircle>
			//ssd1306_UpdateScreen();
			blink = 1;
 8000c20:	2301      	movs	r3, #1
 8000c22:	73fb      	strb	r3, [r7, #15]
			counterRefresh = 0;
 8000c24:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <_Z7LCDTaskPKv+0x7c>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	e00a      	b.n	8000c42 <_Z7LCDTaskPKv+0x66>
		}else {
			ssd1306_DrawCircle(100, 56, 4, Black);
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	2204      	movs	r2, #4
 8000c30:	2138      	movs	r1, #56	; 0x38
 8000c32:	2064      	movs	r0, #100	; 0x64
 8000c34:	f001 f8b2 	bl	8001d9c <ssd1306_DrawCircle>
			//ssd1306_UpdateScreen();
			blink = 0;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	73fb      	strb	r3, [r7, #15]
			counterRefresh = 0;
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <_Z7LCDTaskPKv+0x7c>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
		}

	}


	ssd1306_UpdateScreen();
 8000c42:	f000 ff67 	bl	8001b14 <ssd1306_UpdateScreen>

	osDelay(84);
 8000c46:	2054      	movs	r0, #84	; 0x54
 8000c48:	f007 fbeb 	bl	8008422 <osDelay>
	if(counterRefresh >= 500){
 8000c4c:	e7da      	b.n	8000c04 <_Z7LCDTaskPKv+0x28>
 8000c4e:	bf00      	nop
 8000c50:	20000000 	.word	0x20000000
 8000c54:	0800a294 	.word	0x0800a294
 8000c58:	20000598 	.word	0x20000598

08000c5c <_Z8i2c_TaskPKv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_i2c_Task */
void i2c_Task(void const * argument)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b09a      	sub	sp, #104	; 0x68
 8000c60:	af02      	add	r7, sp, #8
 8000c62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN i2c_Task */

	//команды i2c
	uint16_t addr = 0x20;
 8000c64:	2320      	movs	r3, #32
 8000c66:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	addr = addr<<1;
 8000c6a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a


	uint8_t cmdStart_1[6] = { 0x55, 0xAA, 0x04, 0x07, 0x00, 0x0B };
 8000c74:	4aa6      	ldr	r2, [pc, #664]	; (8000f10 <_Z8i2c_TaskPKv+0x2b4>)
 8000c76:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c7e:	6018      	str	r0, [r3, #0]
 8000c80:	3304      	adds	r3, #4
 8000c82:	8019      	strh	r1, [r3, #0]
	uint8_t cmdRead_1[2] = { 0x00 };// 0x07 0x01
 8000c84:	2300      	movs	r3, #0
 8000c86:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	uint8_t cmdStart_2[6] = { 0x55, 0xAA, 0x04, 0x06, 0x00, 0x0A };
 8000c8a:	4aa2      	ldr	r2, [pc, #648]	; (8000f14 <_Z8i2c_TaskPKv+0x2b8>)
 8000c8c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c94:	6018      	str	r0, [r3, #0]
 8000c96:	3304      	adds	r3, #4
 8000c98:	8019      	strh	r1, [r3, #0]
	uint8_t cmdRead_2[2] = { 0x00 };// 0x06 0x01
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

	uint8_t cmdStart_3[9] = { 0x55, 0xAA, 0x07, 0x10, 0x19, 0x00, 0x00, 0x00, 0x30 };
 8000ca0:	4a9d      	ldr	r2, [pc, #628]	; (8000f18 <_Z8i2c_TaskPKv+0x2bc>)
 8000ca2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ca6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ca8:	c303      	stmia	r3!, {r0, r1}
 8000caa:	701a      	strb	r2, [r3, #0]
	uint8_t cmdRead_3[2] = { 0x00 };// 0x10 0x01
 8000cac:	2300      	movs	r3, #0
 8000cae:	86bb      	strh	r3, [r7, #52]	; 0x34

	uint8_t cmdStart_4[7] = { 0x55, 0xAA, 0x05, 0x15, 0x01, 0x00, 0x1B };
 8000cb0:	4a9a      	ldr	r2, [pc, #616]	; (8000f1c <_Z8i2c_TaskPKv+0x2c0>)
 8000cb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cb6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cba:	6018      	str	r0, [r3, #0]
 8000cbc:	3304      	adds	r3, #4
 8000cbe:	8019      	strh	r1, [r3, #0]
 8000cc0:	3302      	adds	r3, #2
 8000cc2:	0c0a      	lsrs	r2, r1, #16
 8000cc4:	701a      	strb	r2, [r3, #0]
	uint8_t cmdRead_4[2] = { 0x00 };// 0x15 0x01
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	853b      	strh	r3, [r7, #40]	; 0x28

	uint8_t cmdStop[7] = { 0x55, 0xAA, 0x05, 0x15, 0x00, 0x00, 0x1A };
 8000cca:	4a95      	ldr	r2, [pc, #596]	; (8000f20 <_Z8i2c_TaskPKv+0x2c4>)
 8000ccc:	f107 0320 	add.w	r3, r7, #32
 8000cd0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cd4:	6018      	str	r0, [r3, #0]
 8000cd6:	3304      	adds	r3, #4
 8000cd8:	8019      	strh	r1, [r3, #0]
 8000cda:	3302      	adds	r3, #2
 8000cdc:	0c0a      	lsrs	r2, r1, #16
 8000cde:	701a      	strb	r2, [r3, #0]
	uint8_t cmdRead_stop[2] = { 0x00 };// 0x15 0x01
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	83bb      	strh	r3, [r7, #28]

	uint8_t cmdRefresh[6] = { 0x55, 0xAA, 0x04, 0x16, 0x00, 0x1A };
 8000ce4:	4a8f      	ldr	r2, [pc, #572]	; (8000f24 <_Z8i2c_TaskPKv+0x2c8>)
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cee:	6018      	str	r0, [r3, #0]
 8000cf0:	3304      	adds	r3, #4
 8000cf2:	8019      	strh	r1, [r3, #0]
	uint8_t cmdRead_Refresh[6] = { 0x00 };// 0x06 0x16 0x01 0x00 0x00 0x1D
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	823b      	strh	r3, [r7, #16]


	HAL_GPIO_WritePin(A0_GPIO_Port, A0_Pin, GPIO_PIN_RESET);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2102      	movs	r1, #2
 8000d00:	4889      	ldr	r0, [pc, #548]	; (8000f28 <_Z8i2c_TaskPKv+0x2cc>)
 8000d02:	f001 ffc7 	bl	8002c94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, GPIO_PIN_RESET);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2101      	movs	r1, #1
 8000d0a:	4887      	ldr	r0, [pc, #540]	; (8000f28 <_Z8i2c_TaskPKv+0x2cc>)
 8000d0c:	f001 ffc2 	bl	8002c94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, GPIO_PIN_RESET);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2104      	movs	r1, #4
 8000d14:	4884      	ldr	r0, [pc, #528]	; (8000f28 <_Z8i2c_TaskPKv+0x2cc>)
 8000d16:	f001 ffbd 	bl	8002c94 <HAL_GPIO_WritePin>


  /* Infinite loop */
  for(;;)
  {
	  plug = HAL_GPIO_ReadPin(PLUG_GPIO_Port, PLUG_Pin);
 8000d1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d1e:	4883      	ldr	r0, [pc, #524]	; (8000f2c <_Z8i2c_TaskPKv+0x2d0>)
 8000d20:	f001 ffa0 	bl	8002c64 <HAL_GPIO_ReadPin>
 8000d24:	4603      	mov	r3, r0
 8000d26:	461a      	mov	r2, r3
 8000d28:	4b81      	ldr	r3, [pc, #516]	; (8000f30 <_Z8i2c_TaskPKv+0x2d4>)
 8000d2a:	701a      	strb	r2, [r3, #0]

	  if (start && plug) {
 8000d2c:	4b81      	ldr	r3, [pc, #516]	; (8000f34 <_Z8i2c_TaskPKv+0x2d8>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	f000 823d 	beq.w	80011b0 <_Z8i2c_TaskPKv+0x554>
 8000d36:	4b7e      	ldr	r3, [pc, #504]	; (8000f30 <_Z8i2c_TaskPKv+0x2d4>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	f000 8238 	beq.w	80011b0 <_Z8i2c_TaskPKv+0x554>
					status_i2c = HAL_I2C_Master_Transmit(&hi2c1, addr, cmdStart_1, 6, 20);
 8000d40:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8000d44:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000d48:	2314      	movs	r3, #20
 8000d4a:	9300      	str	r3, [sp, #0]
 8000d4c:	2306      	movs	r3, #6
 8000d4e:	487a      	ldr	r0, [pc, #488]	; (8000f38 <_Z8i2c_TaskPKv+0x2dc>)
 8000d50:	f002 f8fe 	bl	8002f50 <HAL_I2C_Master_Transmit>
 8000d54:	4603      	mov	r3, r0
 8000d56:	461a      	mov	r2, r3
 8000d58:	4b78      	ldr	r3, [pc, #480]	; (8000f3c <_Z8i2c_TaskPKv+0x2e0>)
 8000d5a:	701a      	strb	r2, [r3, #0]
					osDelay(410);
 8000d5c:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8000d60:	f007 fb5f 	bl	8008422 <osDelay>
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_1[0], 1, 20);
 8000d64:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000d68:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000d6c:	2314      	movs	r3, #20
 8000d6e:	9300      	str	r3, [sp, #0]
 8000d70:	2301      	movs	r3, #1
 8000d72:	4871      	ldr	r0, [pc, #452]	; (8000f38 <_Z8i2c_TaskPKv+0x2dc>)
 8000d74:	f002 f9ea 	bl	800314c <HAL_I2C_Master_Receive>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	4b6f      	ldr	r3, [pc, #444]	; (8000f3c <_Z8i2c_TaskPKv+0x2e0>)
 8000d7e:	701a      	strb	r2, [r3, #0]
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_1[1], 1, 20);
 8000d80:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000d84:	1c5a      	adds	r2, r3, #1
 8000d86:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000d8a:	2314      	movs	r3, #20
 8000d8c:	9300      	str	r3, [sp, #0]
 8000d8e:	2301      	movs	r3, #1
 8000d90:	4869      	ldr	r0, [pc, #420]	; (8000f38 <_Z8i2c_TaskPKv+0x2dc>)
 8000d92:	f002 f9db 	bl	800314c <HAL_I2C_Master_Receive>
 8000d96:	4603      	mov	r3, r0
 8000d98:	461a      	mov	r2, r3
 8000d9a:	4b68      	ldr	r3, [pc, #416]	; (8000f3c <_Z8i2c_TaskPKv+0x2e0>)
 8000d9c:	701a      	strb	r2, [r3, #0]
					//проверить ответ
					if (cmdRead_1[0] != 0x07 && cmdRead_1[1] != 0x01) {
 8000d9e:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000da2:	2b07      	cmp	r3, #7
 8000da4:	d017      	beq.n	8000dd6 <_Z8i2c_TaskPKv+0x17a>
 8000da6:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d013      	beq.n	8000dd6 <_Z8i2c_TaskPKv+0x17a>
						start = 0;
 8000dae:	4b61      	ldr	r3, [pc, #388]	; (8000f34 <_Z8i2c_TaskPKv+0x2d8>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	701a      	strb	r2, [r3, #0]
						ready = 0;
 8000db4:	4b62      	ldr	r3, [pc, #392]	; (8000f40 <_Z8i2c_TaskPKv+0x2e4>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	701a      	strb	r2, [r3, #0]
						ssd1306_Fill(Black); //чистим экран
 8000dba:	2000      	movs	r0, #0
 8000dbc:	f000 fe86 	bl	8001acc <ssd1306_Fill>
					    ssd1306_SetCursor(2, 0);
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	2002      	movs	r0, #2
 8000dc4:	f000 ffd2 	bl	8001d6c <ssd1306_SetCursor>
					    ssd1306_WriteString((char*) "error1", Font_7x10, White);
 8000dc8:	4a5e      	ldr	r2, [pc, #376]	; (8000f44 <_Z8i2c_TaskPKv+0x2e8>)
 8000dca:	2301      	movs	r3, #1
 8000dcc:	ca06      	ldmia	r2, {r1, r2}
 8000dce:	485e      	ldr	r0, [pc, #376]	; (8000f48 <_Z8i2c_TaskPKv+0x2ec>)
 8000dd0:	f000 ffa6 	bl	8001d20 <ssd1306_WriteString>
					    //ssd1306_UpdateScreen();
						continue;
 8000dd4:	e1ef      	b.n	80011b6 <_Z8i2c_TaskPKv+0x55a>
					}
					osDelay(710);
 8000dd6:	f240 20c6 	movw	r0, #710	; 0x2c6
 8000dda:	f007 fb22 	bl	8008422 <osDelay>

					status_i2c = HAL_I2C_Master_Transmit(&hi2c1, addr, cmdStart_2, 6, 20);
 8000dde:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000de2:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000de6:	2314      	movs	r3, #20
 8000de8:	9300      	str	r3, [sp, #0]
 8000dea:	2306      	movs	r3, #6
 8000dec:	4852      	ldr	r0, [pc, #328]	; (8000f38 <_Z8i2c_TaskPKv+0x2dc>)
 8000dee:	f002 f8af 	bl	8002f50 <HAL_I2C_Master_Transmit>
 8000df2:	4603      	mov	r3, r0
 8000df4:	461a      	mov	r2, r3
 8000df6:	4b51      	ldr	r3, [pc, #324]	; (8000f3c <_Z8i2c_TaskPKv+0x2e0>)
 8000df8:	701a      	strb	r2, [r3, #0]
					osDelay(110);
 8000dfa:	206e      	movs	r0, #110	; 0x6e
 8000dfc:	f007 fb11 	bl	8008422 <osDelay>
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_2[0], 1, 20);
 8000e00:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000e04:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000e08:	2314      	movs	r3, #20
 8000e0a:	9300      	str	r3, [sp, #0]
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	484a      	ldr	r0, [pc, #296]	; (8000f38 <_Z8i2c_TaskPKv+0x2dc>)
 8000e10:	f002 f99c 	bl	800314c <HAL_I2C_Master_Receive>
 8000e14:	4603      	mov	r3, r0
 8000e16:	461a      	mov	r2, r3
 8000e18:	4b48      	ldr	r3, [pc, #288]	; (8000f3c <_Z8i2c_TaskPKv+0x2e0>)
 8000e1a:	701a      	strb	r2, [r3, #0]
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_2[1], 1, 20);
 8000e1c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000e20:	1c5a      	adds	r2, r3, #1
 8000e22:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000e26:	2314      	movs	r3, #20
 8000e28:	9300      	str	r3, [sp, #0]
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	4842      	ldr	r0, [pc, #264]	; (8000f38 <_Z8i2c_TaskPKv+0x2dc>)
 8000e2e:	f002 f98d 	bl	800314c <HAL_I2C_Master_Receive>
 8000e32:	4603      	mov	r3, r0
 8000e34:	461a      	mov	r2, r3
 8000e36:	4b41      	ldr	r3, [pc, #260]	; (8000f3c <_Z8i2c_TaskPKv+0x2e0>)
 8000e38:	701a      	strb	r2, [r3, #0]
					//проверить ответ
					if (cmdRead_2[0] != 0x06 && cmdRead_2[1] != 0x01) {
 8000e3a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000e3e:	2b06      	cmp	r3, #6
 8000e40:	d017      	beq.n	8000e72 <_Z8i2c_TaskPKv+0x216>
 8000e42:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d013      	beq.n	8000e72 <_Z8i2c_TaskPKv+0x216>
						start = 0;
 8000e4a:	4b3a      	ldr	r3, [pc, #232]	; (8000f34 <_Z8i2c_TaskPKv+0x2d8>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	701a      	strb	r2, [r3, #0]
						ready = 0;
 8000e50:	4b3b      	ldr	r3, [pc, #236]	; (8000f40 <_Z8i2c_TaskPKv+0x2e4>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	701a      	strb	r2, [r3, #0]
						ssd1306_Fill(Black); //чистим экран
 8000e56:	2000      	movs	r0, #0
 8000e58:	f000 fe38 	bl	8001acc <ssd1306_Fill>
					    ssd1306_SetCursor(2, 0);
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	2002      	movs	r0, #2
 8000e60:	f000 ff84 	bl	8001d6c <ssd1306_SetCursor>
					    ssd1306_WriteString((char*) "error2", Font_7x10, White);
 8000e64:	4a37      	ldr	r2, [pc, #220]	; (8000f44 <_Z8i2c_TaskPKv+0x2e8>)
 8000e66:	2301      	movs	r3, #1
 8000e68:	ca06      	ldmia	r2, {r1, r2}
 8000e6a:	4838      	ldr	r0, [pc, #224]	; (8000f4c <_Z8i2c_TaskPKv+0x2f0>)
 8000e6c:	f000 ff58 	bl	8001d20 <ssd1306_WriteString>
					    //ssd1306_UpdateScreen();
						continue;
 8000e70:	e1a1      	b.n	80011b6 <_Z8i2c_TaskPKv+0x55a>
					}
					osDelay(2200);
 8000e72:	f640 0098 	movw	r0, #2200	; 0x898
 8000e76:	f007 fad4 	bl	8008422 <osDelay>

					status_i2c = HAL_I2C_Master_Transmit(&hi2c1, addr, cmdStart_3, 9, 20);
 8000e7a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000e7e:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000e82:	2314      	movs	r3, #20
 8000e84:	9300      	str	r3, [sp, #0]
 8000e86:	2309      	movs	r3, #9
 8000e88:	482b      	ldr	r0, [pc, #172]	; (8000f38 <_Z8i2c_TaskPKv+0x2dc>)
 8000e8a:	f002 f861 	bl	8002f50 <HAL_I2C_Master_Transmit>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	461a      	mov	r2, r3
 8000e92:	4b2a      	ldr	r3, [pc, #168]	; (8000f3c <_Z8i2c_TaskPKv+0x2e0>)
 8000e94:	701a      	strb	r2, [r3, #0]
					osDelay(110);
 8000e96:	206e      	movs	r0, #110	; 0x6e
 8000e98:	f007 fac3 	bl	8008422 <osDelay>
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_3[0], 1, 20);
 8000e9c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000ea0:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000ea4:	2314      	movs	r3, #20
 8000ea6:	9300      	str	r3, [sp, #0]
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	4823      	ldr	r0, [pc, #140]	; (8000f38 <_Z8i2c_TaskPKv+0x2dc>)
 8000eac:	f002 f94e 	bl	800314c <HAL_I2C_Master_Receive>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	4b21      	ldr	r3, [pc, #132]	; (8000f3c <_Z8i2c_TaskPKv+0x2e0>)
 8000eb6:	701a      	strb	r2, [r3, #0]
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_3[1], 1, 20);
 8000eb8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ebc:	1c5a      	adds	r2, r3, #1
 8000ebe:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000ec2:	2314      	movs	r3, #20
 8000ec4:	9300      	str	r3, [sp, #0]
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	481b      	ldr	r0, [pc, #108]	; (8000f38 <_Z8i2c_TaskPKv+0x2dc>)
 8000eca:	f002 f93f 	bl	800314c <HAL_I2C_Master_Receive>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	4b1a      	ldr	r3, [pc, #104]	; (8000f3c <_Z8i2c_TaskPKv+0x2e0>)
 8000ed4:	701a      	strb	r2, [r3, #0]
					//проверить ответ
					if (cmdRead_3[0] != 0x10 && cmdRead_3[1] != 0x01) {
 8000ed6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000eda:	2b10      	cmp	r3, #16
 8000edc:	d03a      	beq.n	8000f54 <_Z8i2c_TaskPKv+0x2f8>
 8000ede:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d036      	beq.n	8000f54 <_Z8i2c_TaskPKv+0x2f8>
						start = 0;
 8000ee6:	4b13      	ldr	r3, [pc, #76]	; (8000f34 <_Z8i2c_TaskPKv+0x2d8>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	701a      	strb	r2, [r3, #0]
						ready = 0;
 8000eec:	4b14      	ldr	r3, [pc, #80]	; (8000f40 <_Z8i2c_TaskPKv+0x2e4>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	701a      	strb	r2, [r3, #0]
						ssd1306_Fill(Black); //чистим экран
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f000 fdea 	bl	8001acc <ssd1306_Fill>
					    ssd1306_SetCursor(2, 0);
 8000ef8:	2100      	movs	r1, #0
 8000efa:	2002      	movs	r0, #2
 8000efc:	f000 ff36 	bl	8001d6c <ssd1306_SetCursor>
					    ssd1306_WriteString((char*) "error3", Font_7x10, White);
 8000f00:	4a10      	ldr	r2, [pc, #64]	; (8000f44 <_Z8i2c_TaskPKv+0x2e8>)
 8000f02:	2301      	movs	r3, #1
 8000f04:	ca06      	ldmia	r2, {r1, r2}
 8000f06:	4812      	ldr	r0, [pc, #72]	; (8000f50 <_Z8i2c_TaskPKv+0x2f4>)
 8000f08:	f000 ff0a 	bl	8001d20 <ssd1306_WriteString>
					    //ssd1306_UpdateScreen();
						continue;
 8000f0c:	e153      	b.n	80011b6 <_Z8i2c_TaskPKv+0x55a>
 8000f0e:	bf00      	nop
 8000f10:	0800a2c4 	.word	0x0800a2c4
 8000f14:	0800a2cc 	.word	0x0800a2cc
 8000f18:	0800a2d4 	.word	0x0800a2d4
 8000f1c:	0800a2e0 	.word	0x0800a2e0
 8000f20:	0800a2e8 	.word	0x0800a2e8
 8000f24:	0800a2f0 	.word	0x0800a2f0
 8000f28:	40020c00 	.word	0x40020c00
 8000f2c:	40020800 	.word	0x40020800
 8000f30:	200002ca 	.word	0x200002ca
 8000f34:	200002c8 	.word	0x200002c8
 8000f38:	20004758 	.word	0x20004758
 8000f3c:	200000a0 	.word	0x200000a0
 8000f40:	200002c9 	.word	0x200002c9
 8000f44:	20000000 	.word	0x20000000
 8000f48:	0800a2a4 	.word	0x0800a2a4
 8000f4c:	0800a2ac 	.word	0x0800a2ac
 8000f50:	0800a2b4 	.word	0x0800a2b4
					}
					osDelay(710);
 8000f54:	f240 20c6 	movw	r0, #710	; 0x2c6
 8000f58:	f007 fa63 	bl	8008422 <osDelay>

					status_i2c = HAL_I2C_Master_Transmit(&hi2c1, addr, cmdStart_4, 7, 20);
 8000f5c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000f60:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000f64:	2314      	movs	r3, #20
 8000f66:	9300      	str	r3, [sp, #0]
 8000f68:	2307      	movs	r3, #7
 8000f6a:	4893      	ldr	r0, [pc, #588]	; (80011b8 <_Z8i2c_TaskPKv+0x55c>)
 8000f6c:	f001 fff0 	bl	8002f50 <HAL_I2C_Master_Transmit>
 8000f70:	4603      	mov	r3, r0
 8000f72:	461a      	mov	r2, r3
 8000f74:	4b91      	ldr	r3, [pc, #580]	; (80011bc <_Z8i2c_TaskPKv+0x560>)
 8000f76:	701a      	strb	r2, [r3, #0]
					osDelay(30);
 8000f78:	201e      	movs	r0, #30
 8000f7a:	f007 fa52 	bl	8008422 <osDelay>
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_4[0], 1, 20);
 8000f7e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000f82:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000f86:	2314      	movs	r3, #20
 8000f88:	9300      	str	r3, [sp, #0]
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	488a      	ldr	r0, [pc, #552]	; (80011b8 <_Z8i2c_TaskPKv+0x55c>)
 8000f8e:	f002 f8dd 	bl	800314c <HAL_I2C_Master_Receive>
 8000f92:	4603      	mov	r3, r0
 8000f94:	461a      	mov	r2, r3
 8000f96:	4b89      	ldr	r3, [pc, #548]	; (80011bc <_Z8i2c_TaskPKv+0x560>)
 8000f98:	701a      	strb	r2, [r3, #0]
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_4[1], 1, 20);
 8000f9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f9e:	1c5a      	adds	r2, r3, #1
 8000fa0:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000fa4:	2314      	movs	r3, #20
 8000fa6:	9300      	str	r3, [sp, #0]
 8000fa8:	2301      	movs	r3, #1
 8000faa:	4883      	ldr	r0, [pc, #524]	; (80011b8 <_Z8i2c_TaskPKv+0x55c>)
 8000fac:	f002 f8ce 	bl	800314c <HAL_I2C_Master_Receive>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	4b81      	ldr	r3, [pc, #516]	; (80011bc <_Z8i2c_TaskPKv+0x560>)
 8000fb6:	701a      	strb	r2, [r3, #0]
					//проверить ответ
					if (cmdRead_4[0] != 0x15 && cmdRead_4[1] != 0x01) {
 8000fb8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000fbc:	2b15      	cmp	r3, #21
 8000fbe:	d017      	beq.n	8000ff0 <_Z8i2c_TaskPKv+0x394>
 8000fc0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d013      	beq.n	8000ff0 <_Z8i2c_TaskPKv+0x394>
						start = 0;
 8000fc8:	4b7d      	ldr	r3, [pc, #500]	; (80011c0 <_Z8i2c_TaskPKv+0x564>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	701a      	strb	r2, [r3, #0]
						ready = 0;
 8000fce:	4b7d      	ldr	r3, [pc, #500]	; (80011c4 <_Z8i2c_TaskPKv+0x568>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	701a      	strb	r2, [r3, #0]
						ssd1306_Fill(Black); //чистим экран
 8000fd4:	2000      	movs	r0, #0
 8000fd6:	f000 fd79 	bl	8001acc <ssd1306_Fill>
					    ssd1306_SetCursor(2, 0);
 8000fda:	2100      	movs	r1, #0
 8000fdc:	2002      	movs	r0, #2
 8000fde:	f000 fec5 	bl	8001d6c <ssd1306_SetCursor>
					    ssd1306_WriteString((char*) "error4", Font_7x10, White);
 8000fe2:	4a79      	ldr	r2, [pc, #484]	; (80011c8 <_Z8i2c_TaskPKv+0x56c>)
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	ca06      	ldmia	r2, {r1, r2}
 8000fe8:	4878      	ldr	r0, [pc, #480]	; (80011cc <_Z8i2c_TaskPKv+0x570>)
 8000fea:	f000 fe99 	bl	8001d20 <ssd1306_WriteString>
					    //ssd1306_UpdateScreen();
						continue;
 8000fee:	e0e2      	b.n	80011b6 <_Z8i2c_TaskPKv+0x55a>
					}


					osDelay(500);
 8000ff0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ff4:	f007 fa15 	bl	8008422 <osDelay>
					//выдать флаг готовности питания
					ready = 1;
 8000ff8:	4b72      	ldr	r3, [pc, #456]	; (80011c4 <_Z8i2c_TaskPKv+0x568>)
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	701a      	strb	r2, [r3, #0]

					osDelay(3000);
 8000ffe:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001002:	f007 fa0e 	bl	8008422 <osDelay>
					//обновляем пик
					status_i2c = HAL_I2C_Master_Transmit(&hi2c1, addr, cmdRefresh, 6, 20);
 8001006:	f107 0214 	add.w	r2, r7, #20
 800100a:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 800100e:	2314      	movs	r3, #20
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	2306      	movs	r3, #6
 8001014:	4868      	ldr	r0, [pc, #416]	; (80011b8 <_Z8i2c_TaskPKv+0x55c>)
 8001016:	f001 ff9b 	bl	8002f50 <HAL_I2C_Master_Transmit>
 800101a:	4603      	mov	r3, r0
 800101c:	461a      	mov	r2, r3
 800101e:	4b67      	ldr	r3, [pc, #412]	; (80011bc <_Z8i2c_TaskPKv+0x560>)
 8001020:	701a      	strb	r2, [r3, #0]
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, cmdRead_Refresh, 6, 20);
 8001022:	f107 020c 	add.w	r2, r7, #12
 8001026:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 800102a:	2314      	movs	r3, #20
 800102c:	9300      	str	r3, [sp, #0]
 800102e:	2306      	movs	r3, #6
 8001030:	4861      	ldr	r0, [pc, #388]	; (80011b8 <_Z8i2c_TaskPKv+0x55c>)
 8001032:	f002 f88b 	bl	800314c <HAL_I2C_Master_Receive>
 8001036:	4603      	mov	r3, r0
 8001038:	461a      	mov	r2, r3
 800103a:	4b60      	ldr	r3, [pc, #384]	; (80011bc <_Z8i2c_TaskPKv+0x560>)
 800103c:	701a      	strb	r2, [r3, #0]

					// запустить цикл обновления до остановки пользователем
					while(start){
 800103e:	4b60      	ldr	r3, [pc, #384]	; (80011c0 <_Z8i2c_TaskPKv+0x564>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	f000 8083 	beq.w	800114e <_Z8i2c_TaskPKv+0x4f2>
							//обновляем пик
							status_i2c = HAL_I2C_Master_Transmit(&hi2c1, addr, cmdRefresh, 6, 20);
 8001048:	f107 0214 	add.w	r2, r7, #20
 800104c:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8001050:	2314      	movs	r3, #20
 8001052:	9300      	str	r3, [sp, #0]
 8001054:	2306      	movs	r3, #6
 8001056:	4858      	ldr	r0, [pc, #352]	; (80011b8 <_Z8i2c_TaskPKv+0x55c>)
 8001058:	f001 ff7a 	bl	8002f50 <HAL_I2C_Master_Transmit>
 800105c:	4603      	mov	r3, r0
 800105e:	461a      	mov	r2, r3
 8001060:	4b56      	ldr	r3, [pc, #344]	; (80011bc <_Z8i2c_TaskPKv+0x560>)
 8001062:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 8001064:	200a      	movs	r0, #10
 8001066:	f007 f9dc 	bl	8008422 <osDelay>
							status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_Refresh[0], 1, 20);
 800106a:	f107 020c 	add.w	r2, r7, #12
 800106e:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8001072:	2314      	movs	r3, #20
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	2301      	movs	r3, #1
 8001078:	484f      	ldr	r0, [pc, #316]	; (80011b8 <_Z8i2c_TaskPKv+0x55c>)
 800107a:	f002 f867 	bl	800314c <HAL_I2C_Master_Receive>
 800107e:	4603      	mov	r3, r0
 8001080:	461a      	mov	r2, r3
 8001082:	4b4e      	ldr	r3, [pc, #312]	; (80011bc <_Z8i2c_TaskPKv+0x560>)
 8001084:	701a      	strb	r2, [r3, #0]
							status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_Refresh[1], 1, 20);
 8001086:	f107 030c 	add.w	r3, r7, #12
 800108a:	1c5a      	adds	r2, r3, #1
 800108c:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8001090:	2314      	movs	r3, #20
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	2301      	movs	r3, #1
 8001096:	4848      	ldr	r0, [pc, #288]	; (80011b8 <_Z8i2c_TaskPKv+0x55c>)
 8001098:	f002 f858 	bl	800314c <HAL_I2C_Master_Receive>
 800109c:	4603      	mov	r3, r0
 800109e:	461a      	mov	r2, r3
 80010a0:	4b46      	ldr	r3, [pc, #280]	; (80011bc <_Z8i2c_TaskPKv+0x560>)
 80010a2:	701a      	strb	r2, [r3, #0]
							status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_Refresh[2], 1, 20);
 80010a4:	f107 030c 	add.w	r3, r7, #12
 80010a8:	1c9a      	adds	r2, r3, #2
 80010aa:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 80010ae:	2314      	movs	r3, #20
 80010b0:	9300      	str	r3, [sp, #0]
 80010b2:	2301      	movs	r3, #1
 80010b4:	4840      	ldr	r0, [pc, #256]	; (80011b8 <_Z8i2c_TaskPKv+0x55c>)
 80010b6:	f002 f849 	bl	800314c <HAL_I2C_Master_Receive>
 80010ba:	4603      	mov	r3, r0
 80010bc:	461a      	mov	r2, r3
 80010be:	4b3f      	ldr	r3, [pc, #252]	; (80011bc <_Z8i2c_TaskPKv+0x560>)
 80010c0:	701a      	strb	r2, [r3, #0]
							status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_Refresh[3], 1, 20);
 80010c2:	f107 030c 	add.w	r3, r7, #12
 80010c6:	1cda      	adds	r2, r3, #3
 80010c8:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 80010cc:	2314      	movs	r3, #20
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	2301      	movs	r3, #1
 80010d2:	4839      	ldr	r0, [pc, #228]	; (80011b8 <_Z8i2c_TaskPKv+0x55c>)
 80010d4:	f002 f83a 	bl	800314c <HAL_I2C_Master_Receive>
 80010d8:	4603      	mov	r3, r0
 80010da:	461a      	mov	r2, r3
 80010dc:	4b37      	ldr	r3, [pc, #220]	; (80011bc <_Z8i2c_TaskPKv+0x560>)
 80010de:	701a      	strb	r2, [r3, #0]
							status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_Refresh[4], 1, 20);
 80010e0:	f107 030c 	add.w	r3, r7, #12
 80010e4:	1d1a      	adds	r2, r3, #4
 80010e6:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 80010ea:	2314      	movs	r3, #20
 80010ec:	9300      	str	r3, [sp, #0]
 80010ee:	2301      	movs	r3, #1
 80010f0:	4831      	ldr	r0, [pc, #196]	; (80011b8 <_Z8i2c_TaskPKv+0x55c>)
 80010f2:	f002 f82b 	bl	800314c <HAL_I2C_Master_Receive>
 80010f6:	4603      	mov	r3, r0
 80010f8:	461a      	mov	r2, r3
 80010fa:	4b30      	ldr	r3, [pc, #192]	; (80011bc <_Z8i2c_TaskPKv+0x560>)
 80010fc:	701a      	strb	r2, [r3, #0]
							status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_Refresh[5], 1, 20);
 80010fe:	f107 030c 	add.w	r3, r7, #12
 8001102:	1d5a      	adds	r2, r3, #5
 8001104:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8001108:	2314      	movs	r3, #20
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	2301      	movs	r3, #1
 800110e:	482a      	ldr	r0, [pc, #168]	; (80011b8 <_Z8i2c_TaskPKv+0x55c>)
 8001110:	f002 f81c 	bl	800314c <HAL_I2C_Master_Receive>
 8001114:	4603      	mov	r3, r0
 8001116:	461a      	mov	r2, r3
 8001118:	4b28      	ldr	r3, [pc, #160]	; (80011bc <_Z8i2c_TaskPKv+0x560>)
 800111a:	701a      	strb	r2, [r3, #0]

							//ожидаем 10 секунд и обновляем пик если за это время был останов то выходим из цикла
							for (int var = 0; var < 10000; ++var) {
 800111c:	2300      	movs	r3, #0
 800111e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001120:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001122:	f242 720f 	movw	r2, #9999	; 0x270f
 8001126:	4293      	cmp	r3, r2
 8001128:	dc0b      	bgt.n	8001142 <_Z8i2c_TaskPKv+0x4e6>
								if(!start){
 800112a:	4b25      	ldr	r3, [pc, #148]	; (80011c0 <_Z8i2c_TaskPKv+0x564>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d006      	beq.n	8001140 <_Z8i2c_TaskPKv+0x4e4>
									break;
								}
								osDelay(1);
 8001132:	2001      	movs	r0, #1
 8001134:	f007 f975 	bl	8008422 <osDelay>
							for (int var = 0; var < 10000; ++var) {
 8001138:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800113a:	3301      	adds	r3, #1
 800113c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800113e:	e7ef      	b.n	8001120 <_Z8i2c_TaskPKv+0x4c4>
									break;
 8001140:	bf00      	nop
							}

							if(!start){
 8001142:	4b1f      	ldr	r3, [pc, #124]	; (80011c0 <_Z8i2c_TaskPKv+0x564>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d000      	beq.n	800114c <_Z8i2c_TaskPKv+0x4f0>
					while(start){
 800114a:	e778      	b.n	800103e <_Z8i2c_TaskPKv+0x3e2>
									break;
 800114c:	bf00      	nop
							}

					}

					// выключение питания
					status_i2c = HAL_I2C_Master_Transmit(&hi2c1, addr, cmdStop, 7, 20);
 800114e:	f107 0220 	add.w	r2, r7, #32
 8001152:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8001156:	2314      	movs	r3, #20
 8001158:	9300      	str	r3, [sp, #0]
 800115a:	2307      	movs	r3, #7
 800115c:	4816      	ldr	r0, [pc, #88]	; (80011b8 <_Z8i2c_TaskPKv+0x55c>)
 800115e:	f001 fef7 	bl	8002f50 <HAL_I2C_Master_Transmit>
 8001162:	4603      	mov	r3, r0
 8001164:	461a      	mov	r2, r3
 8001166:	4b15      	ldr	r3, [pc, #84]	; (80011bc <_Z8i2c_TaskPKv+0x560>)
 8001168:	701a      	strb	r2, [r3, #0]
					osDelay(20);
 800116a:	2014      	movs	r0, #20
 800116c:	f007 f959 	bl	8008422 <osDelay>
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_stop[0], 1, 20);
 8001170:	f107 021c 	add.w	r2, r7, #28
 8001174:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8001178:	2314      	movs	r3, #20
 800117a:	9300      	str	r3, [sp, #0]
 800117c:	2301      	movs	r3, #1
 800117e:	480e      	ldr	r0, [pc, #56]	; (80011b8 <_Z8i2c_TaskPKv+0x55c>)
 8001180:	f001 ffe4 	bl	800314c <HAL_I2C_Master_Receive>
 8001184:	4603      	mov	r3, r0
 8001186:	461a      	mov	r2, r3
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <_Z8i2c_TaskPKv+0x560>)
 800118a:	701a      	strb	r2, [r3, #0]
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_stop[1], 1, 20);
 800118c:	f107 031c 	add.w	r3, r7, #28
 8001190:	1c5a      	adds	r2, r3, #1
 8001192:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8001196:	2314      	movs	r3, #20
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	2301      	movs	r3, #1
 800119c:	4806      	ldr	r0, [pc, #24]	; (80011b8 <_Z8i2c_TaskPKv+0x55c>)
 800119e:	f001 ffd5 	bl	800314c <HAL_I2C_Master_Receive>
 80011a2:	4603      	mov	r3, r0
 80011a4:	461a      	mov	r2, r3
 80011a6:	4b05      	ldr	r3, [pc, #20]	; (80011bc <_Z8i2c_TaskPKv+0x560>)
 80011a8:	701a      	strb	r2, [r3, #0]
					//выдать флаг отключения питания
					ready = 0;
 80011aa:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <_Z8i2c_TaskPKv+0x568>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	701a      	strb	r2, [r3, #0]
	  }

	  osDelay(1);
 80011b0:	2001      	movs	r0, #1
 80011b2:	f007 f936 	bl	8008422 <osDelay>
  }
 80011b6:	e5b0      	b.n	8000d1a <_Z8i2c_TaskPKv+0xbe>
 80011b8:	20004758 	.word	0x20004758
 80011bc:	200000a0 	.word	0x200000a0
 80011c0:	200002c8 	.word	0x200002c8
 80011c4:	200002c9 	.word	0x200002c9
 80011c8:	20000000 	.word	0x20000000
 80011cc:	0800a2bc 	.word	0x0800a2bc

080011d0 <_Z10ButtonTaskPKv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ButtonTask */
void ButtonTask(void const * argument)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b09c      	sub	sp, #112	; 0x70
 80011d4:	af02      	add	r7, sp, #8
 80011d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ButtonTask */

	RV_BUTTON button1(B1_GPIO_Port, B1_Pin, HIGH_PULL, NORM_OPEN);
 80011d8:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80011dc:	2300      	movs	r3, #0
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	2300      	movs	r3, #0
 80011e2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011e6:	498c      	ldr	r1, [pc, #560]	; (8001418 <_Z10ButtonTaskPKv+0x248>)
 80011e8:	f7ff f9be 	bl	8000568 <_ZN9RV_BUTTONC1EP12GPIO_TypeDeftbb>
	RV_BUTTON button2(B2_GPIO_Port, B2_Pin, HIGH_PULL, NORM_OPEN);
 80011ec:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80011f0:	2300      	movs	r3, #0
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	2300      	movs	r3, #0
 80011f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011fa:	4988      	ldr	r1, [pc, #544]	; (800141c <_Z10ButtonTaskPKv+0x24c>)
 80011fc:	f7ff f9b4 	bl	8000568 <_ZN9RV_BUTTONC1EP12GPIO_TypeDeftbb>
	RV_BUTTON button3(B3_GPIO_Port, B3_Pin, HIGH_PULL, NORM_OPEN);
 8001200:	f107 0010 	add.w	r0, r7, #16
 8001204:	2300      	movs	r3, #0
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	2300      	movs	r3, #0
 800120a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800120e:	4983      	ldr	r1, [pc, #524]	; (800141c <_Z10ButtonTaskPKv+0x24c>)
 8001210:	f7ff f9aa 	bl	8000568 <_ZN9RV_BUTTONC1EP12GPIO_TypeDeftbb>
	uint8_t snum[5];
	uint8_t fan = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	button1.isClick();
 800121a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff f9f8 	bl	8000614 <_ZN9RV_BUTTON7isClickEv>
	button2.isClick();
 8001224:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff f9f3 	bl	8000614 <_ZN9RV_BUTTON7isClickEv>
	button3.isClick();
 800122e:	f107 0310 	add.w	r3, r7, #16
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff f9ee 	bl	8000614 <_ZN9RV_BUTTON7isClickEv>

	htim4.Instance->CCR3 = 0;
 8001238:	4b79      	ldr	r3, [pc, #484]	; (8001420 <_Z10ButtonTaskPKv+0x250>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2200      	movs	r2, #0
 800123e:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001240:	2108      	movs	r1, #8
 8001242:	4877      	ldr	r0, [pc, #476]	; (8001420 <_Z10ButtonTaskPKv+0x250>)
 8001244:	f005 f8f6 	bl	8006434 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  for(;;)
  {
	button1.tick();
 8001248:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff f9fa 	bl	8000646 <_ZN9RV_BUTTON4tickEv>
	button2.tick();
 8001252:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff f9f5 	bl	8000646 <_ZN9RV_BUTTON4tickEv>
	button3.tick();
 800125c:	f107 0310 	add.w	r3, r7, #16
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff f9f0 	bl	8000646 <_ZN9RV_BUTTON4tickEv>

	if (button1.isClick() ){
 8001266:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff f9d2 	bl	8000614 <_ZN9RV_BUTTON7isClickEv>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d04a      	beq.n	800130c <_Z10ButtonTaskPKv+0x13c>
		if (start == 0 && plug == GPIO_PIN_SET) {
 8001276:	4b6b      	ldr	r3, [pc, #428]	; (8001424 <_Z10ButtonTaskPKv+0x254>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d111      	bne.n	80012a2 <_Z10ButtonTaskPKv+0xd2>
 800127e:	4b6a      	ldr	r3, [pc, #424]	; (8001428 <_Z10ButtonTaskPKv+0x258>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d10d      	bne.n	80012a2 <_Z10ButtonTaskPKv+0xd2>
			start = 1;
 8001286:	4b67      	ldr	r3, [pc, #412]	; (8001424 <_Z10ButtonTaskPKv+0x254>)
 8001288:	2201      	movs	r2, #1
 800128a:	701a      	strb	r2, [r3, #0]
			ssd1306_SetCursor(2, 0);
 800128c:	2100      	movs	r1, #0
 800128e:	2002      	movs	r0, #2
 8001290:	f000 fd6c 	bl	8001d6c <ssd1306_SetCursor>
			ssd1306_WriteString((char*) "Test started   ", Font_7x10, White);
 8001294:	4a65      	ldr	r2, [pc, #404]	; (800142c <_Z10ButtonTaskPKv+0x25c>)
 8001296:	2301      	movs	r3, #1
 8001298:	ca06      	ldmia	r2, {r1, r2}
 800129a:	4865      	ldr	r0, [pc, #404]	; (8001430 <_Z10ButtonTaskPKv+0x260>)
 800129c:	f000 fd40 	bl	8001d20 <ssd1306_WriteString>
 80012a0:	e034      	b.n	800130c <_Z10ButtonTaskPKv+0x13c>

		}else if(start >= 1 && plug == GPIO_PIN_SET){
 80012a2:	4b60      	ldr	r3, [pc, #384]	; (8001424 <_Z10ButtonTaskPKv+0x254>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d023      	beq.n	80012f2 <_Z10ButtonTaskPKv+0x122>
 80012aa:	4b5f      	ldr	r3, [pc, #380]	; (8001428 <_Z10ButtonTaskPKv+0x258>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d11f      	bne.n	80012f2 <_Z10ButtonTaskPKv+0x122>
			start = 0;
 80012b2:	4b5c      	ldr	r3, [pc, #368]	; (8001424 <_Z10ButtonTaskPKv+0x254>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	701a      	strb	r2, [r3, #0]
			ssd1306_SetCursor(2, 0);
 80012b8:	2100      	movs	r1, #0
 80012ba:	2002      	movs	r0, #2
 80012bc:	f000 fd56 	bl	8001d6c <ssd1306_SetCursor>
			ssd1306_WriteString((char*) "Test stoped     ", Font_7x10, White);
 80012c0:	4a5a      	ldr	r2, [pc, #360]	; (800142c <_Z10ButtonTaskPKv+0x25c>)
 80012c2:	2301      	movs	r3, #1
 80012c4:	ca06      	ldmia	r2, {r1, r2}
 80012c6:	485b      	ldr	r0, [pc, #364]	; (8001434 <_Z10ButtonTaskPKv+0x264>)
 80012c8:	f000 fd2a 	bl	8001d20 <ssd1306_WriteString>

			sprintf((char*)snum, "%-2d", 0);
 80012cc:	f107 0308 	add.w	r3, r7, #8
 80012d0:	2200      	movs	r2, #0
 80012d2:	4959      	ldr	r1, [pc, #356]	; (8001438 <_Z10ButtonTaskPKv+0x268>)
 80012d4:	4618      	mov	r0, r3
 80012d6:	f008 fbe1 	bl	8009a9c <siprintf>
		    ssd1306_SetCursor(2, 28);
 80012da:	211c      	movs	r1, #28
 80012dc:	2002      	movs	r0, #2
 80012de:	f000 fd45 	bl	8001d6c <ssd1306_SetCursor>
		    ssd1306_WriteString((char*)snum, Font_11x18, White);
 80012e2:	4a56      	ldr	r2, [pc, #344]	; (800143c <_Z10ButtonTaskPKv+0x26c>)
 80012e4:	f107 0008 	add.w	r0, r7, #8
 80012e8:	2301      	movs	r3, #1
 80012ea:	ca06      	ldmia	r2, {r1, r2}
 80012ec:	f000 fd18 	bl	8001d20 <ssd1306_WriteString>
 80012f0:	e00c      	b.n	800130c <_Z10ButtonTaskPKv+0x13c>

		}else {
			start = 0;
 80012f2:	4b4c      	ldr	r3, [pc, #304]	; (8001424 <_Z10ButtonTaskPKv+0x254>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	701a      	strb	r2, [r3, #0]
			ssd1306_SetCursor(2, 0);
 80012f8:	2100      	movs	r1, #0
 80012fa:	2002      	movs	r0, #2
 80012fc:	f000 fd36 	bl	8001d6c <ssd1306_SetCursor>
			ssd1306_WriteString((char*) "No plug        ", Font_7x10, White);
 8001300:	4a4a      	ldr	r2, [pc, #296]	; (800142c <_Z10ButtonTaskPKv+0x25c>)
 8001302:	2301      	movs	r3, #1
 8001304:	ca06      	ldmia	r2, {r1, r2}
 8001306:	484e      	ldr	r0, [pc, #312]	; (8001440 <_Z10ButtonTaskPKv+0x270>)
 8001308:	f000 fd0a 	bl	8001d20 <ssd1306_WriteString>
		}

	}
	if (button2.isClick() ){
 800130c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff f97f 	bl	8000614 <_ZN9RV_BUTTON7isClickEv>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d04a      	beq.n	80013b2 <_Z10ButtonTaskPKv+0x1e2>
		if (start == 0 && plug == GPIO_PIN_SET) {
 800131c:	4b41      	ldr	r3, [pc, #260]	; (8001424 <_Z10ButtonTaskPKv+0x254>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d111      	bne.n	8001348 <_Z10ButtonTaskPKv+0x178>
 8001324:	4b40      	ldr	r3, [pc, #256]	; (8001428 <_Z10ButtonTaskPKv+0x258>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d10d      	bne.n	8001348 <_Z10ButtonTaskPKv+0x178>
			start = 2;
 800132c:	4b3d      	ldr	r3, [pc, #244]	; (8001424 <_Z10ButtonTaskPKv+0x254>)
 800132e:	2202      	movs	r2, #2
 8001330:	701a      	strb	r2, [r3, #0]
			ssd1306_SetCursor(2, 0);
 8001332:	2100      	movs	r1, #0
 8001334:	2002      	movs	r0, #2
 8001336:	f000 fd19 	bl	8001d6c <ssd1306_SetCursor>
			ssd1306_WriteString((char*) "Test2 started   ", Font_7x10, White);
 800133a:	4a3c      	ldr	r2, [pc, #240]	; (800142c <_Z10ButtonTaskPKv+0x25c>)
 800133c:	2301      	movs	r3, #1
 800133e:	ca06      	ldmia	r2, {r1, r2}
 8001340:	4840      	ldr	r0, [pc, #256]	; (8001444 <_Z10ButtonTaskPKv+0x274>)
 8001342:	f000 fced 	bl	8001d20 <ssd1306_WriteString>
 8001346:	e034      	b.n	80013b2 <_Z10ButtonTaskPKv+0x1e2>

		}else if(start >= 1 && plug == GPIO_PIN_SET){
 8001348:	4b36      	ldr	r3, [pc, #216]	; (8001424 <_Z10ButtonTaskPKv+0x254>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d023      	beq.n	8001398 <_Z10ButtonTaskPKv+0x1c8>
 8001350:	4b35      	ldr	r3, [pc, #212]	; (8001428 <_Z10ButtonTaskPKv+0x258>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d11f      	bne.n	8001398 <_Z10ButtonTaskPKv+0x1c8>
			start = 0;
 8001358:	4b32      	ldr	r3, [pc, #200]	; (8001424 <_Z10ButtonTaskPKv+0x254>)
 800135a:	2200      	movs	r2, #0
 800135c:	701a      	strb	r2, [r3, #0]
			ssd1306_SetCursor(2, 0);
 800135e:	2100      	movs	r1, #0
 8001360:	2002      	movs	r0, #2
 8001362:	f000 fd03 	bl	8001d6c <ssd1306_SetCursor>
			ssd1306_WriteString((char*) "Test stoped     ", Font_7x10, White);
 8001366:	4a31      	ldr	r2, [pc, #196]	; (800142c <_Z10ButtonTaskPKv+0x25c>)
 8001368:	2301      	movs	r3, #1
 800136a:	ca06      	ldmia	r2, {r1, r2}
 800136c:	4831      	ldr	r0, [pc, #196]	; (8001434 <_Z10ButtonTaskPKv+0x264>)
 800136e:	f000 fcd7 	bl	8001d20 <ssd1306_WriteString>

			sprintf((char*)snum, "%-2d", 0);
 8001372:	f107 0308 	add.w	r3, r7, #8
 8001376:	2200      	movs	r2, #0
 8001378:	492f      	ldr	r1, [pc, #188]	; (8001438 <_Z10ButtonTaskPKv+0x268>)
 800137a:	4618      	mov	r0, r3
 800137c:	f008 fb8e 	bl	8009a9c <siprintf>
		    ssd1306_SetCursor(2, 28);
 8001380:	211c      	movs	r1, #28
 8001382:	2002      	movs	r0, #2
 8001384:	f000 fcf2 	bl	8001d6c <ssd1306_SetCursor>
		    ssd1306_WriteString((char*)snum, Font_11x18, White);
 8001388:	4a2c      	ldr	r2, [pc, #176]	; (800143c <_Z10ButtonTaskPKv+0x26c>)
 800138a:	f107 0008 	add.w	r0, r7, #8
 800138e:	2301      	movs	r3, #1
 8001390:	ca06      	ldmia	r2, {r1, r2}
 8001392:	f000 fcc5 	bl	8001d20 <ssd1306_WriteString>
 8001396:	e00c      	b.n	80013b2 <_Z10ButtonTaskPKv+0x1e2>

		}else {
			start = 0;
 8001398:	4b22      	ldr	r3, [pc, #136]	; (8001424 <_Z10ButtonTaskPKv+0x254>)
 800139a:	2200      	movs	r2, #0
 800139c:	701a      	strb	r2, [r3, #0]
			ssd1306_SetCursor(2, 0);
 800139e:	2100      	movs	r1, #0
 80013a0:	2002      	movs	r0, #2
 80013a2:	f000 fce3 	bl	8001d6c <ssd1306_SetCursor>
			ssd1306_WriteString((char*) "No plug        ", Font_7x10, White);
 80013a6:	4a21      	ldr	r2, [pc, #132]	; (800142c <_Z10ButtonTaskPKv+0x25c>)
 80013a8:	2301      	movs	r3, #1
 80013aa:	ca06      	ldmia	r2, {r1, r2}
 80013ac:	4824      	ldr	r0, [pc, #144]	; (8001440 <_Z10ButtonTaskPKv+0x270>)
 80013ae:	f000 fcb7 	bl	8001d20 <ssd1306_WriteString>
		}

	}

	if (button3.isClick() ){
 80013b2:	f107 0310 	add.w	r3, r7, #16
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff f92c 	bl	8000614 <_ZN9RV_BUTTON7isClickEv>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d025      	beq.n	800140e <_Z10ButtonTaskPKv+0x23e>
		//HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
		if(fan){
 80013c2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d01a      	beq.n	8001400 <_Z10ButtonTaskPKv+0x230>
			fan = 0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			htim4.Instance->CCR3 = ((htim4.Instance->ARR*1000/100)*30)/1000;
 80013d0:	4b13      	ldr	r3, [pc, #76]	; (8001420 <_Z10ButtonTaskPKv+0x250>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013da:	fb02 f303 	mul.w	r3, r2, r3
 80013de:	4a1a      	ldr	r2, [pc, #104]	; (8001448 <_Z10ButtonTaskPKv+0x278>)
 80013e0:	fba2 2303 	umull	r2, r3, r2, r3
 80013e4:	095a      	lsrs	r2, r3, #5
 80013e6:	4613      	mov	r3, r2
 80013e8:	011b      	lsls	r3, r3, #4
 80013ea:	1a9b      	subs	r3, r3, r2
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	4619      	mov	r1, r3
 80013f0:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <_Z10ButtonTaskPKv+0x250>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a15      	ldr	r2, [pc, #84]	; (800144c <_Z10ButtonTaskPKv+0x27c>)
 80013f6:	fba2 1201 	umull	r1, r2, r2, r1
 80013fa:	0992      	lsrs	r2, r2, #6
 80013fc:	63da      	str	r2, [r3, #60]	; 0x3c
 80013fe:	e006      	b.n	800140e <_Z10ButtonTaskPKv+0x23e>
		}else{
			fan = 1;
 8001400:	2301      	movs	r3, #1
 8001402:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			htim4.Instance->CCR3 = 0;
 8001406:	4b06      	ldr	r3, [pc, #24]	; (8001420 <_Z10ButtonTaskPKv+0x250>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2200      	movs	r2, #0
 800140c:	63da      	str	r2, [r3, #60]	; 0x3c
		}
	}


    osDelay(1);
 800140e:	2001      	movs	r0, #1
 8001410:	f007 f807 	bl	8008422 <osDelay>
	button1.tick();
 8001414:	e718      	b.n	8001248 <_Z10ButtonTaskPKv+0x78>
 8001416:	bf00      	nop
 8001418:	40020000 	.word	0x40020000
 800141c:	40020800 	.word	0x40020800
 8001420:	200047f4 	.word	0x200047f4
 8001424:	200002c8 	.word	0x200002c8
 8001428:	200002ca 	.word	0x200002ca
 800142c:	20000000 	.word	0x20000000
 8001430:	0800a2f8 	.word	0x0800a2f8
 8001434:	0800a308 	.word	0x0800a308
 8001438:	0800a284 	.word	0x0800a284
 800143c:	20000008 	.word	0x20000008
 8001440:	0800a31c 	.word	0x0800a31c
 8001444:	0800a32c 	.word	0x0800a32c
 8001448:	51eb851f 	.word	0x51eb851f
 800144c:	10624dd3 	.word	0x10624dd3

08001450 <HAL_UART_RxCpltCallback>:
  /* USER CODE END ButtonTask */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]

	status_uart = HAL_UART_Receive_IT(&huart6, &readASIC[counter_bytes], 1);
 8001458:	4b0c      	ldr	r3, [pc, #48]	; (800148c <HAL_UART_RxCpltCallback+0x3c>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a0c      	ldr	r2, [pc, #48]	; (8001490 <HAL_UART_RxCpltCallback+0x40>)
 800145e:	4413      	add	r3, r2
 8001460:	2201      	movs	r2, #1
 8001462:	4619      	mov	r1, r3
 8001464:	480b      	ldr	r0, [pc, #44]	; (8001494 <HAL_UART_RxCpltCallback+0x44>)
 8001466:	f005 ffe6 	bl	8007436 <HAL_UART_Receive_IT>
 800146a:	4603      	mov	r3, r0
 800146c:	461a      	mov	r2, r3
 800146e:	4b0a      	ldr	r3, [pc, #40]	; (8001498 <HAL_UART_RxCpltCallback+0x48>)
 8001470:	701a      	strb	r2, [r3, #0]
	counter_bytes++;
 8001472:	4b06      	ldr	r3, [pc, #24]	; (800148c <HAL_UART_RxCpltCallback+0x3c>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	3301      	adds	r3, #1
 8001478:	4a04      	ldr	r2, [pc, #16]	; (800148c <HAL_UART_RxCpltCallback+0x3c>)
 800147a:	6013      	str	r3, [r2, #0]
	uartTIM = 0; //сбрасываем таймер до тех пор пока не придут все данные
 800147c:	4b07      	ldr	r3, [pc, #28]	; (800149c <HAL_UART_RxCpltCallback+0x4c>)
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	200000a8 	.word	0x200000a8
 8001490:	200000ac 	.word	0x200000ac
 8001494:	20004880 	.word	0x20004880
 8001498:	200000a1 	.word	0x200000a1
 800149c:	20000590 	.word	0x20000590

080014a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08a      	sub	sp, #40	; 0x28
 80014a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a6:	f107 0314 	add.w	r3, r7, #20
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	60da      	str	r2, [r3, #12]
 80014b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	613b      	str	r3, [r7, #16]
 80014ba:	4b4b      	ldr	r3, [pc, #300]	; (80015e8 <MX_GPIO_Init+0x148>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a4a      	ldr	r2, [pc, #296]	; (80015e8 <MX_GPIO_Init+0x148>)
 80014c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b48      	ldr	r3, [pc, #288]	; (80015e8 <MX_GPIO_Init+0x148>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ce:	613b      	str	r3, [r7, #16]
 80014d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	4b44      	ldr	r3, [pc, #272]	; (80015e8 <MX_GPIO_Init+0x148>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	4a43      	ldr	r2, [pc, #268]	; (80015e8 <MX_GPIO_Init+0x148>)
 80014dc:	f043 0308 	orr.w	r3, r3, #8
 80014e0:	6313      	str	r3, [r2, #48]	; 0x30
 80014e2:	4b41      	ldr	r3, [pc, #260]	; (80015e8 <MX_GPIO_Init+0x148>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f003 0308 	and.w	r3, r3, #8
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	60bb      	str	r3, [r7, #8]
 80014f2:	4b3d      	ldr	r3, [pc, #244]	; (80015e8 <MX_GPIO_Init+0x148>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	4a3c      	ldr	r2, [pc, #240]	; (80015e8 <MX_GPIO_Init+0x148>)
 80014f8:	f043 0304 	orr.w	r3, r3, #4
 80014fc:	6313      	str	r3, [r2, #48]	; 0x30
 80014fe:	4b3a      	ldr	r3, [pc, #232]	; (80015e8 <MX_GPIO_Init+0x148>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	f003 0304 	and.w	r3, r3, #4
 8001506:	60bb      	str	r3, [r7, #8]
 8001508:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	607b      	str	r3, [r7, #4]
 800150e:	4b36      	ldr	r3, [pc, #216]	; (80015e8 <MX_GPIO_Init+0x148>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	4a35      	ldr	r2, [pc, #212]	; (80015e8 <MX_GPIO_Init+0x148>)
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	6313      	str	r3, [r2, #48]	; 0x30
 800151a:	4b33      	ldr	r3, [pc, #204]	; (80015e8 <MX_GPIO_Init+0x148>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	607b      	str	r3, [r7, #4]
 8001524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	603b      	str	r3, [r7, #0]
 800152a:	4b2f      	ldr	r3, [pc, #188]	; (80015e8 <MX_GPIO_Init+0x148>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	4a2e      	ldr	r2, [pc, #184]	; (80015e8 <MX_GPIO_Init+0x148>)
 8001530:	f043 0302 	orr.w	r3, r3, #2
 8001534:	6313      	str	r3, [r2, #48]	; 0x30
 8001536:	4b2c      	ldr	r3, [pc, #176]	; (80015e8 <MX_GPIO_Init+0x148>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	603b      	str	r3, [r7, #0]
 8001540:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_ASIC_GPIO_Port, RST_ASIC_Pin, GPIO_PIN_SET);
 8001542:	2201      	movs	r2, #1
 8001544:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001548:	4828      	ldr	r0, [pc, #160]	; (80015ec <MX_GPIO_Init+0x14c>)
 800154a:	f001 fba3 	bl	8002c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, A1_Pin|A0_Pin|A2_Pin, GPIO_PIN_SET);
 800154e:	2201      	movs	r2, #1
 8001550:	2107      	movs	r1, #7
 8001552:	4827      	ldr	r0, [pc, #156]	; (80015f0 <MX_GPIO_Init+0x150>)
 8001554:	f001 fb9e 	bl	8002c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RST_ASIC_Pin;
 8001558:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800155c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155e:	2301      	movs	r3, #1
 8001560:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001562:	2300      	movs	r3, #0
 8001564:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001566:	2300      	movs	r3, #0
 8001568:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RST_ASIC_GPIO_Port, &GPIO_InitStruct);
 800156a:	f107 0314 	add.w	r3, r7, #20
 800156e:	4619      	mov	r1, r3
 8001570:	481e      	ldr	r0, [pc, #120]	; (80015ec <MX_GPIO_Init+0x14c>)
 8001572:	f001 f9db 	bl	800292c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001576:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800157a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800157c:	2300      	movs	r3, #0
 800157e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001580:	2301      	movs	r3, #1
 8001582:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	4619      	mov	r1, r3
 800158a:	4818      	ldr	r0, [pc, #96]	; (80015ec <MX_GPIO_Init+0x14c>)
 800158c:	f001 f9ce 	bl	800292c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8001590:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001594:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001596:	2300      	movs	r3, #0
 8001598:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800159a:	2301      	movs	r3, #1
 800159c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800159e:	f107 0314 	add.w	r3, r7, #20
 80015a2:	4619      	mov	r1, r3
 80015a4:	4813      	ldr	r0, [pc, #76]	; (80015f4 <MX_GPIO_Init+0x154>)
 80015a6:	f001 f9c1 	bl	800292c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PLUG_Pin;
 80015aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015b0:	2300      	movs	r3, #0
 80015b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015b4:	2302      	movs	r3, #2
 80015b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PLUG_GPIO_Port, &GPIO_InitStruct);
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	4619      	mov	r1, r3
 80015be:	480d      	ldr	r0, [pc, #52]	; (80015f4 <MX_GPIO_Init+0x154>)
 80015c0:	f001 f9b4 	bl	800292c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = A1_Pin|A0_Pin|A2_Pin;
 80015c4:	2307      	movs	r3, #7
 80015c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c8:	2301      	movs	r3, #1
 80015ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d0:	2300      	movs	r3, #0
 80015d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	4619      	mov	r1, r3
 80015da:	4805      	ldr	r0, [pc, #20]	; (80015f0 <MX_GPIO_Init+0x150>)
 80015dc:	f001 f9a6 	bl	800292c <HAL_GPIO_Init>

}
 80015e0:	bf00      	nop
 80015e2:	3728      	adds	r7, #40	; 0x28
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40023800 	.word	0x40023800
 80015ec:	40020000 	.word	0x40020000
 80015f0:	40020c00 	.word	0x40020c00
 80015f4:	40020800 	.word	0x40020800

080015f8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015fc:	4b13      	ldr	r3, [pc, #76]	; (800164c <MX_I2C1_Init+0x54>)
 80015fe:	4a14      	ldr	r2, [pc, #80]	; (8001650 <MX_I2C1_Init+0x58>)
 8001600:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 35000;
 8001602:	4b12      	ldr	r3, [pc, #72]	; (800164c <MX_I2C1_Init+0x54>)
 8001604:	f648 02b8 	movw	r2, #35000	; 0x88b8
 8001608:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800160a:	4b10      	ldr	r3, [pc, #64]	; (800164c <MX_I2C1_Init+0x54>)
 800160c:	2200      	movs	r2, #0
 800160e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001610:	4b0e      	ldr	r3, [pc, #56]	; (800164c <MX_I2C1_Init+0x54>)
 8001612:	2200      	movs	r2, #0
 8001614:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001616:	4b0d      	ldr	r3, [pc, #52]	; (800164c <MX_I2C1_Init+0x54>)
 8001618:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800161c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800161e:	4b0b      	ldr	r3, [pc, #44]	; (800164c <MX_I2C1_Init+0x54>)
 8001620:	2200      	movs	r2, #0
 8001622:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001624:	4b09      	ldr	r3, [pc, #36]	; (800164c <MX_I2C1_Init+0x54>)
 8001626:	2200      	movs	r2, #0
 8001628:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800162a:	4b08      	ldr	r3, [pc, #32]	; (800164c <MX_I2C1_Init+0x54>)
 800162c:	2200      	movs	r2, #0
 800162e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001630:	4b06      	ldr	r3, [pc, #24]	; (800164c <MX_I2C1_Init+0x54>)
 8001632:	2200      	movs	r2, #0
 8001634:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001636:	4805      	ldr	r0, [pc, #20]	; (800164c <MX_I2C1_Init+0x54>)
 8001638:	f001 fb46 	bl	8002cc8 <HAL_I2C_Init>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8001642:	f000 f99b 	bl	800197c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20004758 	.word	0x20004758
 8001650:	40005400 	.word	0x40005400

08001654 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001658:	4b12      	ldr	r3, [pc, #72]	; (80016a4 <MX_I2C3_Init+0x50>)
 800165a:	4a13      	ldr	r2, [pc, #76]	; (80016a8 <MX_I2C3_Init+0x54>)
 800165c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 800165e:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <MX_I2C3_Init+0x50>)
 8001660:	4a12      	ldr	r2, [pc, #72]	; (80016ac <MX_I2C3_Init+0x58>)
 8001662:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001664:	4b0f      	ldr	r3, [pc, #60]	; (80016a4 <MX_I2C3_Init+0x50>)
 8001666:	2200      	movs	r2, #0
 8001668:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800166a:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <MX_I2C3_Init+0x50>)
 800166c:	2200      	movs	r2, #0
 800166e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001670:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <MX_I2C3_Init+0x50>)
 8001672:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001676:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001678:	4b0a      	ldr	r3, [pc, #40]	; (80016a4 <MX_I2C3_Init+0x50>)
 800167a:	2200      	movs	r2, #0
 800167c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800167e:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <MX_I2C3_Init+0x50>)
 8001680:	2200      	movs	r2, #0
 8001682:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001684:	4b07      	ldr	r3, [pc, #28]	; (80016a4 <MX_I2C3_Init+0x50>)
 8001686:	2200      	movs	r2, #0
 8001688:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800168a:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <MX_I2C3_Init+0x50>)
 800168c:	2200      	movs	r2, #0
 800168e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001690:	4804      	ldr	r0, [pc, #16]	; (80016a4 <MX_I2C3_Init+0x50>)
 8001692:	f001 fb19 	bl	8002cc8 <HAL_I2C_Init>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800169c:	f000 f96e 	bl	800197c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80016a0:	bf00      	nop
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20004704 	.word	0x20004704
 80016a8:	40005c00 	.word	0x40005c00
 80016ac:	00061a80 	.word	0x00061a80

080016b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b08c      	sub	sp, #48	; 0x30
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b8:	f107 031c 	add.w	r3, r7, #28
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
 80016c6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a4a      	ldr	r2, [pc, #296]	; (80017f8 <HAL_I2C_MspInit+0x148>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d12c      	bne.n	800172c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	61bb      	str	r3, [r7, #24]
 80016d6:	4b49      	ldr	r3, [pc, #292]	; (80017fc <HAL_I2C_MspInit+0x14c>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	4a48      	ldr	r2, [pc, #288]	; (80017fc <HAL_I2C_MspInit+0x14c>)
 80016dc:	f043 0302 	orr.w	r3, r3, #2
 80016e0:	6313      	str	r3, [r2, #48]	; 0x30
 80016e2:	4b46      	ldr	r3, [pc, #280]	; (80017fc <HAL_I2C_MspInit+0x14c>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	61bb      	str	r3, [r7, #24]
 80016ec:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016ee:	23c0      	movs	r3, #192	; 0xc0
 80016f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016f2:	2312      	movs	r3, #18
 80016f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016fa:	2303      	movs	r3, #3
 80016fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016fe:	2304      	movs	r3, #4
 8001700:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001702:	f107 031c 	add.w	r3, r7, #28
 8001706:	4619      	mov	r1, r3
 8001708:	483d      	ldr	r0, [pc, #244]	; (8001800 <HAL_I2C_MspInit+0x150>)
 800170a:	f001 f90f 	bl	800292c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	617b      	str	r3, [r7, #20]
 8001712:	4b3a      	ldr	r3, [pc, #232]	; (80017fc <HAL_I2C_MspInit+0x14c>)
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	4a39      	ldr	r2, [pc, #228]	; (80017fc <HAL_I2C_MspInit+0x14c>)
 8001718:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800171c:	6413      	str	r3, [r2, #64]	; 0x40
 800171e:	4b37      	ldr	r3, [pc, #220]	; (80017fc <HAL_I2C_MspInit+0x14c>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001726:	617b      	str	r3, [r7, #20]
 8001728:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800172a:	e060      	b.n	80017ee <HAL_I2C_MspInit+0x13e>
  else if(i2cHandle->Instance==I2C3)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a34      	ldr	r2, [pc, #208]	; (8001804 <HAL_I2C_MspInit+0x154>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d15b      	bne.n	80017ee <HAL_I2C_MspInit+0x13e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	613b      	str	r3, [r7, #16]
 800173a:	4b30      	ldr	r3, [pc, #192]	; (80017fc <HAL_I2C_MspInit+0x14c>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	4a2f      	ldr	r2, [pc, #188]	; (80017fc <HAL_I2C_MspInit+0x14c>)
 8001740:	f043 0304 	orr.w	r3, r3, #4
 8001744:	6313      	str	r3, [r2, #48]	; 0x30
 8001746:	4b2d      	ldr	r3, [pc, #180]	; (80017fc <HAL_I2C_MspInit+0x14c>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	f003 0304 	and.w	r3, r3, #4
 800174e:	613b      	str	r3, [r7, #16]
 8001750:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	4b29      	ldr	r3, [pc, #164]	; (80017fc <HAL_I2C_MspInit+0x14c>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	4a28      	ldr	r2, [pc, #160]	; (80017fc <HAL_I2C_MspInit+0x14c>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	6313      	str	r3, [r2, #48]	; 0x30
 8001762:	4b26      	ldr	r3, [pc, #152]	; (80017fc <HAL_I2C_MspInit+0x14c>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800176e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001772:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001774:	2312      	movs	r3, #18
 8001776:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800177c:	2303      	movs	r3, #3
 800177e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001780:	2304      	movs	r3, #4
 8001782:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001784:	f107 031c 	add.w	r3, r7, #28
 8001788:	4619      	mov	r1, r3
 800178a:	481f      	ldr	r0, [pc, #124]	; (8001808 <HAL_I2C_MspInit+0x158>)
 800178c:	f001 f8ce 	bl	800292c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001790:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001794:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001796:	2312      	movs	r3, #18
 8001798:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800179e:	2303      	movs	r3, #3
 80017a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80017a2:	2304      	movs	r3, #4
 80017a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a6:	f107 031c 	add.w	r3, r7, #28
 80017aa:	4619      	mov	r1, r3
 80017ac:	4817      	ldr	r0, [pc, #92]	; (800180c <HAL_I2C_MspInit+0x15c>)
 80017ae:	f001 f8bd 	bl	800292c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	60bb      	str	r3, [r7, #8]
 80017b6:	4b11      	ldr	r3, [pc, #68]	; (80017fc <HAL_I2C_MspInit+0x14c>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	4a10      	ldr	r2, [pc, #64]	; (80017fc <HAL_I2C_MspInit+0x14c>)
 80017bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80017c0:	6413      	str	r3, [r2, #64]	; 0x40
 80017c2:	4b0e      	ldr	r3, [pc, #56]	; (80017fc <HAL_I2C_MspInit+0x14c>)
 80017c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80017ca:	60bb      	str	r3, [r7, #8]
 80017cc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 5, 0);
 80017ce:	2200      	movs	r2, #0
 80017d0:	2105      	movs	r1, #5
 80017d2:	2048      	movs	r0, #72	; 0x48
 80017d4:	f000 ffd4 	bl	8002780 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80017d8:	2048      	movs	r0, #72	; 0x48
 80017da:	f000 ffed 	bl	80027b8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 5, 0);
 80017de:	2200      	movs	r2, #0
 80017e0:	2105      	movs	r1, #5
 80017e2:	2049      	movs	r0, #73	; 0x49
 80017e4:	f000 ffcc 	bl	8002780 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 80017e8:	2049      	movs	r0, #73	; 0x49
 80017ea:	f000 ffe5 	bl	80027b8 <HAL_NVIC_EnableIRQ>
}
 80017ee:	bf00      	nop
 80017f0:	3730      	adds	r7, #48	; 0x30
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40005400 	.word	0x40005400
 80017fc:	40023800 	.word	0x40023800
 8001800:	40020400 	.word	0x40020400
 8001804:	40005c00 	.word	0x40005c00
 8001808:	40020800 	.word	0x40020800
 800180c:	40020000 	.word	0x40020000

08001810 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001814:	f000 fe96 	bl	8002544 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001818:	f000 f812 	bl	8001840 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800181c:	f7ff fe40 	bl	80014a0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001820:	f7ff feea 	bl	80015f8 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001824:	f7ff ff16 	bl	8001654 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 8001828:	f000 fd80 	bl	800232c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800182c:	f000 fda8 	bl	8002380 <MX_USART6_UART_Init>
  MX_TIM4_Init();
 8001830:	f000 fca4 	bl	800217c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001834:	f7ff f826 	bl	8000884 <_Z16MX_FREERTOS_Initv>
  /* Start scheduler */
  osKernelStart();
 8001838:	f006 fda0 	bl	800837c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800183c:	e7fe      	b.n	800183c <main+0x2c>
	...

08001840 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b094      	sub	sp, #80	; 0x50
 8001844:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001846:	f107 0320 	add.w	r3, r7, #32
 800184a:	2230      	movs	r2, #48	; 0x30
 800184c:	2100      	movs	r1, #0
 800184e:	4618      	mov	r0, r3
 8001850:	f008 f848 	bl	80098e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001854:	f107 030c 	add.w	r3, r7, #12
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]
 8001860:	60da      	str	r2, [r3, #12]
 8001862:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001864:	2300      	movs	r3, #0
 8001866:	60bb      	str	r3, [r7, #8]
 8001868:	4b2d      	ldr	r3, [pc, #180]	; (8001920 <_Z18SystemClock_Configv+0xe0>)
 800186a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186c:	4a2c      	ldr	r2, [pc, #176]	; (8001920 <_Z18SystemClock_Configv+0xe0>)
 800186e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001872:	6413      	str	r3, [r2, #64]	; 0x40
 8001874:	4b2a      	ldr	r3, [pc, #168]	; (8001920 <_Z18SystemClock_Configv+0xe0>)
 8001876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800187c:	60bb      	str	r3, [r7, #8]
 800187e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001880:	2300      	movs	r3, #0
 8001882:	607b      	str	r3, [r7, #4]
 8001884:	4b27      	ldr	r3, [pc, #156]	; (8001924 <_Z18SystemClock_Configv+0xe4>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a26      	ldr	r2, [pc, #152]	; (8001924 <_Z18SystemClock_Configv+0xe4>)
 800188a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800188e:	6013      	str	r3, [r2, #0]
 8001890:	4b24      	ldr	r3, [pc, #144]	; (8001924 <_Z18SystemClock_Configv+0xe4>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001898:	607b      	str	r3, [r7, #4]
 800189a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800189c:	2301      	movs	r3, #1
 800189e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018a6:	2302      	movs	r3, #2
 80018a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80018b0:	2304      	movs	r3, #4
 80018b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80018b4:	23a8      	movs	r3, #168	; 0xa8
 80018b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018b8:	2302      	movs	r3, #2
 80018ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80018bc:	2304      	movs	r3, #4
 80018be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018c0:	f107 0320 	add.w	r3, r7, #32
 80018c4:	4618      	mov	r0, r3
 80018c6:	f003 fff5 	bl	80058b4 <HAL_RCC_OscConfig>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	bf14      	ite	ne
 80018d0:	2301      	movne	r3, #1
 80018d2:	2300      	moveq	r3, #0
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 80018da:	f000 f84f 	bl	800197c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018de:	230f      	movs	r3, #15
 80018e0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018e2:	2302      	movs	r3, #2
 80018e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018e6:	2300      	movs	r3, #0
 80018e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018ea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80018ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80018f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80018f6:	f107 030c 	add.w	r3, r7, #12
 80018fa:	2105      	movs	r1, #5
 80018fc:	4618      	mov	r0, r3
 80018fe:	f004 fa51 	bl	8005da4 <HAL_RCC_ClockConfig>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	bf14      	ite	ne
 8001908:	2301      	movne	r3, #1
 800190a:	2300      	moveq	r3, #0
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 8001912:	f000 f833 	bl	800197c <Error_Handler>
  }
}
 8001916:	bf00      	nop
 8001918:	3750      	adds	r7, #80	; 0x50
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40023800 	.word	0x40023800
 8001924:	40007000 	.word	0x40007000

08001928 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	  if (htim->Instance == TIM7) {
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a0d      	ldr	r2, [pc, #52]	; (800196c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d10d      	bne.n	8001956 <HAL_TIM_PeriodElapsedCallback+0x2e>
	    if (status_uartTIM) {
 800193a:	4b0d      	ldr	r3, [pc, #52]	; (8001970 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d004      	beq.n	800194c <HAL_TIM_PeriodElapsedCallback+0x24>
	    	uartTIM++;
 8001942:	4b0c      	ldr	r3, [pc, #48]	; (8001974 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	3301      	adds	r3, #1
 8001948:	4a0a      	ldr	r2, [pc, #40]	; (8001974 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800194a:	6013      	str	r3, [r2, #0]
		}
	    counterRefresh ++;
 800194c:	4b0a      	ldr	r3, [pc, #40]	; (8001978 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	3301      	adds	r3, #1
 8001952:	4a09      	ldr	r2, [pc, #36]	; (8001978 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001954:	6013      	str	r3, [r2, #0]

	  }

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a04      	ldr	r2, [pc, #16]	; (800196c <HAL_TIM_PeriodElapsedCallback+0x44>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d101      	bne.n	8001964 <HAL_TIM_PeriodElapsedCallback+0x3c>
    HAL_IncTick();
 8001960:	f000 fe12 	bl	8002588 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001964:	bf00      	nop
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40001400 	.word	0x40001400
 8001970:	20000594 	.word	0x20000594
 8001974:	20000590 	.word	0x20000590
 8001978:	20000598 	.word	0x20000598

0800197c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001980:	b672      	cpsid	i
}
 8001982:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001984:	e7fe      	b.n	8001984 <Error_Handler+0x8>

08001986 <ssd1306_Reset>:
#include <string.h>  // For memcpy


#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800198a:	bf00      	nop
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af04      	add	r7, sp, #16
 800199a:	4603      	mov	r3, r0
 800199c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800199e:	f04f 33ff 	mov.w	r3, #4294967295
 80019a2:	9302      	str	r3, [sp, #8]
 80019a4:	2301      	movs	r3, #1
 80019a6:	9301      	str	r3, [sp, #4]
 80019a8:	1dfb      	adds	r3, r7, #7
 80019aa:	9300      	str	r3, [sp, #0]
 80019ac:	2301      	movs	r3, #1
 80019ae:	2200      	movs	r2, #0
 80019b0:	2178      	movs	r1, #120	; 0x78
 80019b2:	4803      	ldr	r0, [pc, #12]	; (80019c0 <ssd1306_WriteCommand+0x2c>)
 80019b4:	f001 fdf0 	bl	8003598 <HAL_I2C_Mem_Write>
}
 80019b8:	bf00      	nop
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20004704 	.word	0x20004704

080019c4 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af04      	add	r7, sp, #16
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	f04f 32ff 	mov.w	r2, #4294967295
 80019d6:	9202      	str	r2, [sp, #8]
 80019d8:	9301      	str	r3, [sp, #4]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	9300      	str	r3, [sp, #0]
 80019de:	2301      	movs	r3, #1
 80019e0:	2240      	movs	r2, #64	; 0x40
 80019e2:	2178      	movs	r1, #120	; 0x78
 80019e4:	4803      	ldr	r0, [pc, #12]	; (80019f4 <ssd1306_WriteData+0x30>)
 80019e6:	f001 fdd7 	bl	8003598 <HAL_I2C_Mem_Write>
}
 80019ea:	bf00      	nop
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20004704 	.word	0x20004704

080019f8 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80019fc:	f7ff ffc3 	bl	8001986 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001a00:	2064      	movs	r0, #100	; 0x64
 8001a02:	f000 fde1 	bl	80025c8 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001a06:	2000      	movs	r0, #0
 8001a08:	f000 fa62 	bl	8001ed0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001a0c:	2020      	movs	r0, #32
 8001a0e:	f7ff ffc1 	bl	8001994 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001a12:	2000      	movs	r0, #0
 8001a14:	f7ff ffbe 	bl	8001994 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001a18:	20b0      	movs	r0, #176	; 0xb0
 8001a1a:	f7ff ffbb 	bl	8001994 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001a1e:	20c8      	movs	r0, #200	; 0xc8
 8001a20:	f7ff ffb8 	bl	8001994 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001a24:	2000      	movs	r0, #0
 8001a26:	f7ff ffb5 	bl	8001994 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001a2a:	2010      	movs	r0, #16
 8001a2c:	f7ff ffb2 	bl	8001994 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001a30:	2040      	movs	r0, #64	; 0x40
 8001a32:	f7ff ffaf 	bl	8001994 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001a36:	20ff      	movs	r0, #255	; 0xff
 8001a38:	f000 fa37 	bl	8001eaa <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001a3c:	20a1      	movs	r0, #161	; 0xa1
 8001a3e:	f7ff ffa9 	bl	8001994 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001a42:	20a6      	movs	r0, #166	; 0xa6
 8001a44:	f7ff ffa6 	bl	8001994 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001a48:	20a8      	movs	r0, #168	; 0xa8
 8001a4a:	f7ff ffa3 	bl	8001994 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001a4e:	203f      	movs	r0, #63	; 0x3f
 8001a50:	f7ff ffa0 	bl	8001994 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001a54:	20a4      	movs	r0, #164	; 0xa4
 8001a56:	f7ff ff9d 	bl	8001994 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001a5a:	20d3      	movs	r0, #211	; 0xd3
 8001a5c:	f7ff ff9a 	bl	8001994 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001a60:	2000      	movs	r0, #0
 8001a62:	f7ff ff97 	bl	8001994 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001a66:	20d5      	movs	r0, #213	; 0xd5
 8001a68:	f7ff ff94 	bl	8001994 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001a6c:	20f0      	movs	r0, #240	; 0xf0
 8001a6e:	f7ff ff91 	bl	8001994 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001a72:	20d9      	movs	r0, #217	; 0xd9
 8001a74:	f7ff ff8e 	bl	8001994 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001a78:	2022      	movs	r0, #34	; 0x22
 8001a7a:	f7ff ff8b 	bl	8001994 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001a7e:	20da      	movs	r0, #218	; 0xda
 8001a80:	f7ff ff88 	bl	8001994 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001a84:	2012      	movs	r0, #18
 8001a86:	f7ff ff85 	bl	8001994 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001a8a:	20db      	movs	r0, #219	; 0xdb
 8001a8c:	f7ff ff82 	bl	8001994 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001a90:	2020      	movs	r0, #32
 8001a92:	f7ff ff7f 	bl	8001994 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001a96:	208d      	movs	r0, #141	; 0x8d
 8001a98:	f7ff ff7c 	bl	8001994 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001a9c:	2014      	movs	r0, #20
 8001a9e:	f7ff ff79 	bl	8001994 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001aa2:	2001      	movs	r0, #1
 8001aa4:	f000 fa14 	bl	8001ed0 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001aa8:	2000      	movs	r0, #0
 8001aaa:	f000 f80f 	bl	8001acc <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001aae:	f000 f831 	bl	8001b14 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001ab2:	4b05      	ldr	r3, [pc, #20]	; (8001ac8 <ssd1306_Init+0xd0>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001ab8:	4b03      	ldr	r3, [pc, #12]	; (8001ac8 <ssd1306_Init+0xd0>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001abe:	4b02      	ldr	r3, [pc, #8]	; (8001ac8 <ssd1306_Init+0xd0>)
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	711a      	strb	r2, [r3, #4]
}
 8001ac4:	bf00      	nop
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	2000099c 	.word	0x2000099c

08001acc <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    taskENTER_CRITICAL();
 8001ad6:	f007 fbe5 	bl	80092a4 <vPortEnterCritical>
    {
		for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001ada:	2300      	movs	r3, #0
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	e00d      	b.n	8001afc <ssd1306_Fill+0x30>
			SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001ae0:	79fb      	ldrb	r3, [r7, #7]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d101      	bne.n	8001aea <ssd1306_Fill+0x1e>
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	e000      	b.n	8001aec <ssd1306_Fill+0x20>
 8001aea:	21ff      	movs	r1, #255	; 0xff
 8001aec:	4a08      	ldr	r2, [pc, #32]	; (8001b10 <ssd1306_Fill+0x44>)
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	4413      	add	r3, r2
 8001af2:	460a      	mov	r2, r1
 8001af4:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	3301      	adds	r3, #1
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b02:	d3ed      	bcc.n	8001ae0 <ssd1306_Fill+0x14>
		}
    }
    taskEXIT_CRITICAL();
 8001b04:	f007 fbfe 	bl	8009304 <vPortExitCritical>

}
 8001b08:	bf00      	nop
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	2000059c 	.word	0x2000059c

08001b14 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
	//osMutexWait(mutex_OLEDHandle, 0);
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	71fb      	strb	r3, [r7, #7]
 8001b1e:	e016      	b.n	8001b4e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001b20:	79fb      	ldrb	r3, [r7, #7]
 8001b22:	3b50      	subs	r3, #80	; 0x50
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff ff34 	bl	8001994 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8001b2c:	2000      	movs	r0, #0
 8001b2e:	f7ff ff31 	bl	8001994 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8001b32:	2010      	movs	r0, #16
 8001b34:	f7ff ff2e 	bl	8001994 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001b38:	79fb      	ldrb	r3, [r7, #7]
 8001b3a:	01db      	lsls	r3, r3, #7
 8001b3c:	4a08      	ldr	r2, [pc, #32]	; (8001b60 <ssd1306_UpdateScreen+0x4c>)
 8001b3e:	4413      	add	r3, r2
 8001b40:	2180      	movs	r1, #128	; 0x80
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff ff3e 	bl	80019c4 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001b48:	79fb      	ldrb	r3, [r7, #7]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	71fb      	strb	r3, [r7, #7]
 8001b4e:	79fb      	ldrb	r3, [r7, #7]
 8001b50:	2b07      	cmp	r3, #7
 8001b52:	d9e5      	bls.n	8001b20 <ssd1306_UpdateScreen+0xc>
    }
    //osMutexRelease(mutex_OLEDHandle);
}
 8001b54:	bf00      	nop
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	2000059c 	.word	0x2000059c

08001b64 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	71fb      	strb	r3, [r7, #7]
 8001b6e:	460b      	mov	r3, r1
 8001b70:	71bb      	strb	r3, [r7, #6]
 8001b72:	4613      	mov	r3, r2
 8001b74:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	db41      	blt.n	8001c02 <ssd1306_DrawPixel+0x9e>
 8001b7e:	79bb      	ldrb	r3, [r7, #6]
 8001b80:	2b3f      	cmp	r3, #63	; 0x3f
 8001b82:	d83e      	bhi.n	8001c02 <ssd1306_DrawPixel+0x9e>
        // Don't write outside the buffer
        return;
    }
   
    taskENTER_CRITICAL();
 8001b84:	f007 fb8e 	bl	80092a4 <vPortEnterCritical>
    {
	   // Draw in the right color
		if(color == White) {
 8001b88:	797b      	ldrb	r3, [r7, #5]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d11a      	bne.n	8001bc4 <ssd1306_DrawPixel+0x60>
			SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001b8e:	79fa      	ldrb	r2, [r7, #7]
 8001b90:	79bb      	ldrb	r3, [r7, #6]
 8001b92:	08db      	lsrs	r3, r3, #3
 8001b94:	b2d8      	uxtb	r0, r3
 8001b96:	4603      	mov	r3, r0
 8001b98:	01db      	lsls	r3, r3, #7
 8001b9a:	4413      	add	r3, r2
 8001b9c:	4a1b      	ldr	r2, [pc, #108]	; (8001c0c <ssd1306_DrawPixel+0xa8>)
 8001b9e:	5cd3      	ldrb	r3, [r2, r3]
 8001ba0:	b25a      	sxtb	r2, r3
 8001ba2:	79bb      	ldrb	r3, [r7, #6]
 8001ba4:	f003 0307 	and.w	r3, r3, #7
 8001ba8:	2101      	movs	r1, #1
 8001baa:	fa01 f303 	lsl.w	r3, r1, r3
 8001bae:	b25b      	sxtb	r3, r3
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	b259      	sxtb	r1, r3
 8001bb4:	79fa      	ldrb	r2, [r7, #7]
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	01db      	lsls	r3, r3, #7
 8001bba:	4413      	add	r3, r2
 8001bbc:	b2c9      	uxtb	r1, r1
 8001bbe:	4a13      	ldr	r2, [pc, #76]	; (8001c0c <ssd1306_DrawPixel+0xa8>)
 8001bc0:	54d1      	strb	r1, [r2, r3]
 8001bc2:	e01b      	b.n	8001bfc <ssd1306_DrawPixel+0x98>
		} else {
			SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001bc4:	79fa      	ldrb	r2, [r7, #7]
 8001bc6:	79bb      	ldrb	r3, [r7, #6]
 8001bc8:	08db      	lsrs	r3, r3, #3
 8001bca:	b2d8      	uxtb	r0, r3
 8001bcc:	4603      	mov	r3, r0
 8001bce:	01db      	lsls	r3, r3, #7
 8001bd0:	4413      	add	r3, r2
 8001bd2:	4a0e      	ldr	r2, [pc, #56]	; (8001c0c <ssd1306_DrawPixel+0xa8>)
 8001bd4:	5cd3      	ldrb	r3, [r2, r3]
 8001bd6:	b25a      	sxtb	r2, r3
 8001bd8:	79bb      	ldrb	r3, [r7, #6]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	2101      	movs	r1, #1
 8001be0:	fa01 f303 	lsl.w	r3, r1, r3
 8001be4:	b25b      	sxtb	r3, r3
 8001be6:	43db      	mvns	r3, r3
 8001be8:	b25b      	sxtb	r3, r3
 8001bea:	4013      	ands	r3, r2
 8001bec:	b259      	sxtb	r1, r3
 8001bee:	79fa      	ldrb	r2, [r7, #7]
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	01db      	lsls	r3, r3, #7
 8001bf4:	4413      	add	r3, r2
 8001bf6:	b2c9      	uxtb	r1, r1
 8001bf8:	4a04      	ldr	r2, [pc, #16]	; (8001c0c <ssd1306_DrawPixel+0xa8>)
 8001bfa:	54d1      	strb	r1, [r2, r3]
		}
    }
    taskEXIT_CRITICAL();
 8001bfc:	f007 fb82 	bl	8009304 <vPortExitCritical>
 8001c00:	e000      	b.n	8001c04 <ssd1306_DrawPixel+0xa0>
        return;
 8001c02:	bf00      	nop

}
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	2000059c 	.word	0x2000059c

08001c10 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001c10:	b590      	push	{r4, r7, lr}
 8001c12:	b089      	sub	sp, #36	; 0x24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4604      	mov	r4, r0
 8001c18:	1d38      	adds	r0, r7, #4
 8001c1a:	e880 0006 	stmia.w	r0, {r1, r2}
 8001c1e:	461a      	mov	r2, r3
 8001c20:	4623      	mov	r3, r4
 8001c22:	73fb      	strb	r3, [r7, #15]
 8001c24:	4613      	mov	r3, r2
 8001c26:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001c28:	7bfb      	ldrb	r3, [r7, #15]
 8001c2a:	2b1f      	cmp	r3, #31
 8001c2c:	d902      	bls.n	8001c34 <ssd1306_WriteChar+0x24>
 8001c2e:	7bfb      	ldrb	r3, [r7, #15]
 8001c30:	2b7e      	cmp	r3, #126	; 0x7e
 8001c32:	d901      	bls.n	8001c38 <ssd1306_WriteChar+0x28>
        return 0;
 8001c34:	2300      	movs	r3, #0
 8001c36:	e06d      	b.n	8001d14 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001c38:	4b38      	ldr	r3, [pc, #224]	; (8001d1c <ssd1306_WriteChar+0x10c>)
 8001c3a:	881b      	ldrh	r3, [r3, #0]
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	793b      	ldrb	r3, [r7, #4]
 8001c40:	4413      	add	r3, r2
 8001c42:	2b80      	cmp	r3, #128	; 0x80
 8001c44:	dc06      	bgt.n	8001c54 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001c46:	4b35      	ldr	r3, [pc, #212]	; (8001d1c <ssd1306_WriteChar+0x10c>)
 8001c48:	885b      	ldrh	r3, [r3, #2]
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	797b      	ldrb	r3, [r7, #5]
 8001c4e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001c50:	2b40      	cmp	r3, #64	; 0x40
 8001c52:	dd01      	ble.n	8001c58 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001c54:	2300      	movs	r3, #0
 8001c56:	e05d      	b.n	8001d14 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001c58:	2300      	movs	r3, #0
 8001c5a:	61fb      	str	r3, [r7, #28]
 8001c5c:	e04c      	b.n	8001cf8 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001c5e:	68ba      	ldr	r2, [r7, #8]
 8001c60:	7bfb      	ldrb	r3, [r7, #15]
 8001c62:	3b20      	subs	r3, #32
 8001c64:	7979      	ldrb	r1, [r7, #5]
 8001c66:	fb01 f303 	mul.w	r3, r1, r3
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	440b      	add	r3, r1
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	4413      	add	r3, r2
 8001c74:	881b      	ldrh	r3, [r3, #0]
 8001c76:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61bb      	str	r3, [r7, #24]
 8001c7c:	e034      	b.n	8001ce8 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001c7e:	697a      	ldr	r2, [r7, #20]
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d012      	beq.n	8001cb4 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001c8e:	4b23      	ldr	r3, [pc, #140]	; (8001d1c <ssd1306_WriteChar+0x10c>)
 8001c90:	881b      	ldrh	r3, [r3, #0]
 8001c92:	b2da      	uxtb	r2, r3
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	4413      	add	r3, r2
 8001c9a:	b2d8      	uxtb	r0, r3
 8001c9c:	4b1f      	ldr	r3, [pc, #124]	; (8001d1c <ssd1306_WriteChar+0x10c>)
 8001c9e:	885b      	ldrh	r3, [r3, #2]
 8001ca0:	b2da      	uxtb	r2, r3
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	4413      	add	r3, r2
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	7bba      	ldrb	r2, [r7, #14]
 8001cac:	4619      	mov	r1, r3
 8001cae:	f7ff ff59 	bl	8001b64 <ssd1306_DrawPixel>
 8001cb2:	e016      	b.n	8001ce2 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001cb4:	4b19      	ldr	r3, [pc, #100]	; (8001d1c <ssd1306_WriteChar+0x10c>)
 8001cb6:	881b      	ldrh	r3, [r3, #0]
 8001cb8:	b2da      	uxtb	r2, r3
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	4413      	add	r3, r2
 8001cc0:	b2d8      	uxtb	r0, r3
 8001cc2:	4b16      	ldr	r3, [pc, #88]	; (8001d1c <ssd1306_WriteChar+0x10c>)
 8001cc4:	885b      	ldrh	r3, [r3, #2]
 8001cc6:	b2da      	uxtb	r2, r3
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	4413      	add	r3, r2
 8001cce:	b2d9      	uxtb	r1, r3
 8001cd0:	7bbb      	ldrb	r3, [r7, #14]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	bf0c      	ite	eq
 8001cd6:	2301      	moveq	r3, #1
 8001cd8:	2300      	movne	r3, #0
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	461a      	mov	r2, r3
 8001cde:	f7ff ff41 	bl	8001b64 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	61bb      	str	r3, [r7, #24]
 8001ce8:	793b      	ldrb	r3, [r7, #4]
 8001cea:	461a      	mov	r2, r3
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d3c5      	bcc.n	8001c7e <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	61fb      	str	r3, [r7, #28]
 8001cf8:	797b      	ldrb	r3, [r7, #5]
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d3ad      	bcc.n	8001c5e <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001d02:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <ssd1306_WriteChar+0x10c>)
 8001d04:	881a      	ldrh	r2, [r3, #0]
 8001d06:	793b      	ldrb	r3, [r7, #4]
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	4413      	add	r3, r2
 8001d0c:	b29a      	uxth	r2, r3
 8001d0e:	4b03      	ldr	r3, [pc, #12]	; (8001d1c <ssd1306_WriteChar+0x10c>)
 8001d10:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3724      	adds	r7, #36	; 0x24
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd90      	pop	{r4, r7, pc}
 8001d1c:	2000099c 	.word	0x2000099c

08001d20 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	1d38      	adds	r0, r7, #4
 8001d2a:	e880 0006 	stmia.w	r0, {r1, r2}
 8001d2e:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8001d30:	e012      	b.n	8001d58 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	7818      	ldrb	r0, [r3, #0]
 8001d36:	78fb      	ldrb	r3, [r7, #3]
 8001d38:	1d3a      	adds	r2, r7, #4
 8001d3a:	ca06      	ldmia	r2, {r1, r2}
 8001d3c:	f7ff ff68 	bl	8001c10 <ssd1306_WriteChar>
 8001d40:	4603      	mov	r3, r0
 8001d42:	461a      	mov	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d002      	beq.n	8001d52 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	e008      	b.n	8001d64 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	3301      	adds	r3, #1
 8001d56:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d1e8      	bne.n	8001d32 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	781b      	ldrb	r3, [r3, #0]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3710      	adds	r7, #16
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	460a      	mov	r2, r1
 8001d76:	71fb      	strb	r3, [r7, #7]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001d7c:	79fb      	ldrb	r3, [r7, #7]
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <ssd1306_SetCursor+0x2c>)
 8001d82:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001d84:	79bb      	ldrb	r3, [r7, #6]
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	4b03      	ldr	r3, [pc, #12]	; (8001d98 <ssd1306_SetCursor+0x2c>)
 8001d8a:	805a      	strh	r2, [r3, #2]
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	2000099c 	.word	0x2000099c

08001d9c <ssd1306_DrawCircle>:
    }
    
    return;
}
//Draw circle by Bresenhem's algorithm
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 8001d9c:	b590      	push	{r4, r7, lr}
 8001d9e:	b087      	sub	sp, #28
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4604      	mov	r4, r0
 8001da4:	4608      	mov	r0, r1
 8001da6:	4611      	mov	r1, r2
 8001da8:	461a      	mov	r2, r3
 8001daa:	4623      	mov	r3, r4
 8001dac:	71fb      	strb	r3, [r7, #7]
 8001dae:	4603      	mov	r3, r0
 8001db0:	71bb      	strb	r3, [r7, #6]
 8001db2:	460b      	mov	r3, r1
 8001db4:	717b      	strb	r3, [r7, #5]
 8001db6:	4613      	mov	r3, r2
 8001db8:	713b      	strb	r3, [r7, #4]
  int32_t x = -par_r;
 8001dba:	797b      	ldrb	r3, [r7, #5]
 8001dbc:	425b      	negs	r3, r3
 8001dbe:	617b      	str	r3, [r7, #20]
  int32_t y = 0;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	613b      	str	r3, [r7, #16]
  int32_t err = 2 - 2 * par_r;
 8001dc4:	797b      	ldrb	r3, [r7, #5]
 8001dc6:	f1c3 0301 	rsb	r3, r3, #1
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	60fb      	str	r3, [r7, #12]
  int32_t e2;

  if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 8001dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	db65      	blt.n	8001ea2 <ssd1306_DrawCircle+0x106>
 8001dd6:	79bb      	ldrb	r3, [r7, #6]
 8001dd8:	2b3f      	cmp	r3, #63	; 0x3f
 8001dda:	d862      	bhi.n	8001ea2 <ssd1306_DrawCircle+0x106>
    return;
  }

    do {
      ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	79fa      	ldrb	r2, [r7, #7]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	b2d8      	uxtb	r0, r3
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	79bb      	ldrb	r3, [r7, #6]
 8001dec:	4413      	add	r3, r2
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	793a      	ldrb	r2, [r7, #4]
 8001df2:	4619      	mov	r1, r3
 8001df4:	f7ff feb6 	bl	8001b64 <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	b2da      	uxtb	r2, r3
 8001dfc:	79fb      	ldrb	r3, [r7, #7]
 8001dfe:	4413      	add	r3, r2
 8001e00:	b2d8      	uxtb	r0, r3
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	79bb      	ldrb	r3, [r7, #6]
 8001e08:	4413      	add	r3, r2
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	793a      	ldrb	r2, [r7, #4]
 8001e0e:	4619      	mov	r1, r3
 8001e10:	f7ff fea8 	bl	8001b64 <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	b2da      	uxtb	r2, r3
 8001e18:	79fb      	ldrb	r3, [r7, #7]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	b2d8      	uxtb	r0, r3
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	79ba      	ldrb	r2, [r7, #6]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	793a      	ldrb	r2, [r7, #4]
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	f7ff fe9a 	bl	8001b64 <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	79fa      	ldrb	r2, [r7, #7]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	b2d8      	uxtb	r0, r3
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	79ba      	ldrb	r2, [r7, #6]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	793a      	ldrb	r2, [r7, #4]
 8001e46:	4619      	mov	r1, r3
 8001e48:	f7ff fe8c 	bl	8001b64 <ssd1306_DrawPixel>
        e2 = err;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	60bb      	str	r3, [r7, #8]
        if (e2 <= y) {
 8001e50:	68ba      	ldr	r2, [r7, #8]
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	dc13      	bgt.n	8001e80 <ssd1306_DrawCircle+0xe4>
            y++;
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	3301      	adds	r3, #1
 8001e64:	68fa      	ldr	r2, [r7, #12]
 8001e66:	4413      	add	r3, r2
 8001e68:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	425b      	negs	r3, r3
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d105      	bne.n	8001e80 <ssd1306_DrawCircle+0xe4>
 8001e74:	68ba      	ldr	r2, [r7, #8]
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	dc01      	bgt.n	8001e80 <ssd1306_DrawCircle+0xe4>
              e2 = 0;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          /*nothing to do*/
        }
        if(e2 > x) {
 8001e80:	68ba      	ldr	r2, [r7, #8]
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	dd08      	ble.n	8001e9a <ssd1306_DrawCircle+0xfe>
          x++;
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	617b      	str	r3, [r7, #20]
          err = err + (x * 2 + 1);
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	3301      	adds	r3, #1
 8001e94:	68fa      	ldr	r2, [r7, #12]
 8001e96:	4413      	add	r3, r2
 8001e98:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          /*nothing to do*/
        }
    } while(x <= 0);
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	dd9d      	ble.n	8001ddc <ssd1306_DrawCircle+0x40>

    return;
 8001ea0:	e000      	b.n	8001ea4 <ssd1306_DrawCircle+0x108>
    return;
 8001ea2:	bf00      	nop
}
 8001ea4:	371c      	adds	r7, #28
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd90      	pop	{r4, r7, pc}

08001eaa <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b084      	sub	sp, #16
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001eb4:	2381      	movs	r3, #129	; 0x81
 8001eb6:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001eb8:	7bfb      	ldrb	r3, [r7, #15]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff fd6a 	bl	8001994 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001ec0:	79fb      	ldrb	r3, [r7, #7]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff fd66 	bl	8001994 <ssd1306_WriteCommand>
}
 8001ec8:	bf00      	nop
 8001eca:	3710      	adds	r7, #16
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001eda:	79fb      	ldrb	r3, [r7, #7]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d005      	beq.n	8001eec <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001ee0:	23af      	movs	r3, #175	; 0xaf
 8001ee2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001ee4:	4b08      	ldr	r3, [pc, #32]	; (8001f08 <ssd1306_SetDisplayOn+0x38>)
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	715a      	strb	r2, [r3, #5]
 8001eea:	e004      	b.n	8001ef6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001eec:	23ae      	movs	r3, #174	; 0xae
 8001eee:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001ef0:	4b05      	ldr	r3, [pc, #20]	; (8001f08 <ssd1306_SetDisplayOn+0x38>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001ef6:	7bfb      	ldrb	r3, [r7, #15]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff fd4b 	bl	8001994 <ssd1306_WriteCommand>
}
 8001efe:	bf00      	nop
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	2000099c 	.word	0x2000099c

08001f0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	607b      	str	r3, [r7, #4]
 8001f16:	4b12      	ldr	r3, [pc, #72]	; (8001f60 <HAL_MspInit+0x54>)
 8001f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1a:	4a11      	ldr	r2, [pc, #68]	; (8001f60 <HAL_MspInit+0x54>)
 8001f1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f20:	6453      	str	r3, [r2, #68]	; 0x44
 8001f22:	4b0f      	ldr	r3, [pc, #60]	; (8001f60 <HAL_MspInit+0x54>)
 8001f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f2a:	607b      	str	r3, [r7, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	603b      	str	r3, [r7, #0]
 8001f32:	4b0b      	ldr	r3, [pc, #44]	; (8001f60 <HAL_MspInit+0x54>)
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	4a0a      	ldr	r2, [pc, #40]	; (8001f60 <HAL_MspInit+0x54>)
 8001f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f3e:	4b08      	ldr	r3, [pc, #32]	; (8001f60 <HAL_MspInit+0x54>)
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f46:	603b      	str	r3, [r7, #0]
 8001f48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	210f      	movs	r1, #15
 8001f4e:	f06f 0001 	mvn.w	r0, #1
 8001f52:	f000 fc15 	bl	8002780 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f56:	bf00      	nop
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40023800 	.word	0x40023800

08001f64 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b08c      	sub	sp, #48	; 0x30
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001f70:	2300      	movs	r3, #0
 8001f72:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8001f74:	2200      	movs	r2, #0
 8001f76:	6879      	ldr	r1, [r7, #4]
 8001f78:	2037      	movs	r0, #55	; 0x37
 8001f7a:	f000 fc01 	bl	8002780 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001f7e:	2037      	movs	r0, #55	; 0x37
 8001f80:	f000 fc1a 	bl	80027b8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001f84:	2300      	movs	r3, #0
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	4b1f      	ldr	r3, [pc, #124]	; (8002008 <HAL_InitTick+0xa4>)
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8c:	4a1e      	ldr	r2, [pc, #120]	; (8002008 <HAL_InitTick+0xa4>)
 8001f8e:	f043 0320 	orr.w	r3, r3, #32
 8001f92:	6413      	str	r3, [r2, #64]	; 0x40
 8001f94:	4b1c      	ldr	r3, [pc, #112]	; (8002008 <HAL_InitTick+0xa4>)
 8001f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f98:	f003 0320 	and.w	r3, r3, #32
 8001f9c:	60fb      	str	r3, [r7, #12]
 8001f9e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001fa0:	f107 0210 	add.w	r2, r7, #16
 8001fa4:	f107 0314 	add.w	r3, r7, #20
 8001fa8:	4611      	mov	r1, r2
 8001faa:	4618      	mov	r0, r3
 8001fac:	f004 f8f6 	bl	800619c <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001fb0:	f004 f8cc 	bl	800614c <HAL_RCC_GetPCLK1Freq>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fbc:	4a13      	ldr	r2, [pc, #76]	; (800200c <HAL_InitTick+0xa8>)
 8001fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc2:	0c9b      	lsrs	r3, r3, #18
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001fc8:	4b11      	ldr	r3, [pc, #68]	; (8002010 <HAL_InitTick+0xac>)
 8001fca:	4a12      	ldr	r2, [pc, #72]	; (8002014 <HAL_InitTick+0xb0>)
 8001fcc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001fce:	4b10      	ldr	r3, [pc, #64]	; (8002010 <HAL_InitTick+0xac>)
 8001fd0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001fd4:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001fd6:	4a0e      	ldr	r2, [pc, #56]	; (8002010 <HAL_InitTick+0xac>)
 8001fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fda:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001fdc:	4b0c      	ldr	r3, [pc, #48]	; (8002010 <HAL_InitTick+0xac>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fe2:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <HAL_InitTick+0xac>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8001fe8:	4809      	ldr	r0, [pc, #36]	; (8002010 <HAL_InitTick+0xac>)
 8001fea:	f004 f909 	bl	8006200 <HAL_TIM_Base_Init>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d104      	bne.n	8001ffe <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8001ff4:	4806      	ldr	r0, [pc, #24]	; (8002010 <HAL_InitTick+0xac>)
 8001ff6:	f004 f953 	bl	80062a0 <HAL_TIM_Base_Start_IT>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	e000      	b.n	8002000 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
}
 8002000:	4618      	mov	r0, r3
 8002002:	3730      	adds	r7, #48	; 0x30
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40023800 	.word	0x40023800
 800200c:	431bde83 	.word	0x431bde83
 8002010:	200047ac 	.word	0x200047ac
 8002014:	40001400 	.word	0x40001400

08002018 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800201c:	f3bf 8f4f 	dsb	sy
}
 8002020:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002022:	4b06      	ldr	r3, [pc, #24]	; (800203c <__NVIC_SystemReset+0x24>)
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800202a:	4904      	ldr	r1, [pc, #16]	; (800203c <__NVIC_SystemReset+0x24>)
 800202c:	4b04      	ldr	r3, [pc, #16]	; (8002040 <__NVIC_SystemReset+0x28>)
 800202e:	4313      	orrs	r3, r2
 8002030:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002032:	f3bf 8f4f 	dsb	sy
}
 8002036:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002038:	bf00      	nop
 800203a:	e7fd      	b.n	8002038 <__NVIC_SystemReset+0x20>
 800203c:	e000ed00 	.word	0xe000ed00
 8002040:	05fa0004 	.word	0x05fa0004

08002044 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002048:	e7fe      	b.n	8002048 <NMI_Handler+0x4>

0800204a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  NVIC_SystemReset();
 800204e:	f7ff ffe3 	bl	8002018 <__NVIC_SystemReset>

08002052 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002052:	b480      	push	{r7}
 8002054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002056:	e7fe      	b.n	8002056 <MemManage_Handler+0x4>

08002058 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800205c:	e7fe      	b.n	800205c <BusFault_Handler+0x4>

0800205e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800205e:	b480      	push	{r7}
 8002060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002062:	e7fe      	b.n	8002062 <UsageFault_Handler+0x4>

08002064 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002068:	bf00      	nop
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
	...

08002074 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002078:	4802      	ldr	r0, [pc, #8]	; (8002084 <TIM4_IRQHandler+0x10>)
 800207a:	f004 faa3 	bl	80065c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800207e:	bf00      	nop
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	200047f4 	.word	0x200047f4

08002088 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800208c:	4802      	ldr	r0, [pc, #8]	; (8002098 <USART1_IRQHandler+0x10>)
 800208e:	f005 faa5 	bl	80075dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002092:	bf00      	nop
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	2000483c 	.word	0x2000483c

0800209c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80020a0:	4802      	ldr	r0, [pc, #8]	; (80020ac <TIM7_IRQHandler+0x10>)
 80020a2:	f004 fa8f 	bl	80065c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80020a6:	bf00      	nop
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	200047ac 	.word	0x200047ac

080020b0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80020b4:	4802      	ldr	r0, [pc, #8]	; (80020c0 <USART6_IRQHandler+0x10>)
 80020b6:	f005 fa91 	bl	80075dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	20004880 	.word	0x20004880

080020c4 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 80020c8:	4802      	ldr	r0, [pc, #8]	; (80020d4 <I2C3_EV_IRQHandler+0x10>)
 80020ca:	f001 fb5f 	bl	800378c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 80020ce:	bf00      	nop
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	20004704 	.word	0x20004704

080020d8 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 80020dc:	4802      	ldr	r0, [pc, #8]	; (80020e8 <I2C3_ER_IRQHandler+0x10>)
 80020de:	f001 fcc6 	bl	8003a6e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 80020e2:	bf00      	nop
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	20004704 	.word	0x20004704

080020ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020f4:	4a14      	ldr	r2, [pc, #80]	; (8002148 <_sbrk+0x5c>)
 80020f6:	4b15      	ldr	r3, [pc, #84]	; (800214c <_sbrk+0x60>)
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002100:	4b13      	ldr	r3, [pc, #76]	; (8002150 <_sbrk+0x64>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d102      	bne.n	800210e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002108:	4b11      	ldr	r3, [pc, #68]	; (8002150 <_sbrk+0x64>)
 800210a:	4a12      	ldr	r2, [pc, #72]	; (8002154 <_sbrk+0x68>)
 800210c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800210e:	4b10      	ldr	r3, [pc, #64]	; (8002150 <_sbrk+0x64>)
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4413      	add	r3, r2
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	429a      	cmp	r2, r3
 800211a:	d207      	bcs.n	800212c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800211c:	f007 fb8e 	bl	800983c <__errno>
 8002120:	4603      	mov	r3, r0
 8002122:	220c      	movs	r2, #12
 8002124:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002126:	f04f 33ff 	mov.w	r3, #4294967295
 800212a:	e009      	b.n	8002140 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800212c:	4b08      	ldr	r3, [pc, #32]	; (8002150 <_sbrk+0x64>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002132:	4b07      	ldr	r3, [pc, #28]	; (8002150 <_sbrk+0x64>)
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4413      	add	r3, r2
 800213a:	4a05      	ldr	r2, [pc, #20]	; (8002150 <_sbrk+0x64>)
 800213c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800213e:	68fb      	ldr	r3, [r7, #12]
}
 8002140:	4618      	mov	r0, r3
 8002142:	3718      	adds	r7, #24
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	20020000 	.word	0x20020000
 800214c:	00004000 	.word	0x00004000
 8002150:	200009a4 	.word	0x200009a4
 8002154:	200048d8 	.word	0x200048d8

08002158 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800215c:	4b06      	ldr	r3, [pc, #24]	; (8002178 <SystemInit+0x20>)
 800215e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002162:	4a05      	ldr	r2, [pc, #20]	; (8002178 <SystemInit+0x20>)
 8002164:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002168:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800216c:	bf00      	nop
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	e000ed00 	.word	0xe000ed00

0800217c <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b08e      	sub	sp, #56	; 0x38
 8002180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002182:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	605a      	str	r2, [r3, #4]
 800218c:	609a      	str	r2, [r3, #8]
 800218e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002190:	f107 0320 	add.w	r3, r7, #32
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800219a:	1d3b      	adds	r3, r7, #4
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	60da      	str	r2, [r3, #12]
 80021a6:	611a      	str	r2, [r3, #16]
 80021a8:	615a      	str	r2, [r3, #20]
 80021aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80021ac:	4b2c      	ldr	r3, [pc, #176]	; (8002260 <MX_TIM4_Init+0xe4>)
 80021ae:	4a2d      	ldr	r2, [pc, #180]	; (8002264 <MX_TIM4_Init+0xe8>)
 80021b0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 168-1;
 80021b2:	4b2b      	ldr	r3, [pc, #172]	; (8002260 <MX_TIM4_Init+0xe4>)
 80021b4:	22a7      	movs	r2, #167	; 0xa7
 80021b6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021b8:	4b29      	ldr	r3, [pc, #164]	; (8002260 <MX_TIM4_Init+0xe4>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 40;
 80021be:	4b28      	ldr	r3, [pc, #160]	; (8002260 <MX_TIM4_Init+0xe4>)
 80021c0:	2228      	movs	r2, #40	; 0x28
 80021c2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021c4:	4b26      	ldr	r3, [pc, #152]	; (8002260 <MX_TIM4_Init+0xe4>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ca:	4b25      	ldr	r3, [pc, #148]	; (8002260 <MX_TIM4_Init+0xe4>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80021d0:	4823      	ldr	r0, [pc, #140]	; (8002260 <MX_TIM4_Init+0xe4>)
 80021d2:	f004 f815 	bl	8006200 <HAL_TIM_Base_Init>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 80021dc:	f7ff fbce 	bl	800197c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021e4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80021e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021ea:	4619      	mov	r1, r3
 80021ec:	481c      	ldr	r0, [pc, #112]	; (8002260 <MX_TIM4_Init+0xe4>)
 80021ee:	f004 fbb3 	bl	8006958 <HAL_TIM_ConfigClockSource>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 80021f8:	f7ff fbc0 	bl	800197c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80021fc:	4818      	ldr	r0, [pc, #96]	; (8002260 <MX_TIM4_Init+0xe4>)
 80021fe:	f004 f8bf 	bl	8006380 <HAL_TIM_PWM_Init>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8002208:	f7ff fbb8 	bl	800197c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800220c:	2300      	movs	r3, #0
 800220e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002210:	2300      	movs	r3, #0
 8002212:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002214:	f107 0320 	add.w	r3, r7, #32
 8002218:	4619      	mov	r1, r3
 800221a:	4811      	ldr	r0, [pc, #68]	; (8002260 <MX_TIM4_Init+0xe4>)
 800221c:	f004 ff9c 	bl	8007158 <HAL_TIMEx_MasterConfigSynchronization>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8002226:	f7ff fba9 	bl	800197c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800222a:	2360      	movs	r3, #96	; 0x60
 800222c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800222e:	2300      	movs	r3, #0
 8002230:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002232:	2300      	movs	r3, #0
 8002234:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002236:	2300      	movs	r3, #0
 8002238:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800223a:	1d3b      	adds	r3, r7, #4
 800223c:	2208      	movs	r2, #8
 800223e:	4619      	mov	r1, r3
 8002240:	4807      	ldr	r0, [pc, #28]	; (8002260 <MX_TIM4_Init+0xe4>)
 8002242:	f004 fac7 	bl	80067d4 <HAL_TIM_PWM_ConfigChannel>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 800224c:	f7ff fb96 	bl	800197c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002250:	4803      	ldr	r0, [pc, #12]	; (8002260 <MX_TIM4_Init+0xe4>)
 8002252:	f000 f831 	bl	80022b8 <HAL_TIM_MspPostInit>

}
 8002256:	bf00      	nop
 8002258:	3738      	adds	r7, #56	; 0x38
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	200047f4 	.word	0x200047f4
 8002264:	40000800 	.word	0x40000800

08002268 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a0e      	ldr	r2, [pc, #56]	; (80022b0 <HAL_TIM_Base_MspInit+0x48>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d115      	bne.n	80022a6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800227a:	2300      	movs	r3, #0
 800227c:	60fb      	str	r3, [r7, #12]
 800227e:	4b0d      	ldr	r3, [pc, #52]	; (80022b4 <HAL_TIM_Base_MspInit+0x4c>)
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	4a0c      	ldr	r2, [pc, #48]	; (80022b4 <HAL_TIM_Base_MspInit+0x4c>)
 8002284:	f043 0304 	orr.w	r3, r3, #4
 8002288:	6413      	str	r3, [r2, #64]	; 0x40
 800228a:	4b0a      	ldr	r3, [pc, #40]	; (80022b4 <HAL_TIM_Base_MspInit+0x4c>)
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	f003 0304 	and.w	r3, r3, #4
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002296:	2200      	movs	r2, #0
 8002298:	2105      	movs	r1, #5
 800229a:	201e      	movs	r0, #30
 800229c:	f000 fa70 	bl	8002780 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80022a0:	201e      	movs	r0, #30
 80022a2:	f000 fa89 	bl	80027b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80022a6:	bf00      	nop
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	40000800 	.word	0x40000800
 80022b4:	40023800 	.word	0x40023800

080022b8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b088      	sub	sp, #32
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c0:	f107 030c 	add.w	r3, r7, #12
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	605a      	str	r2, [r3, #4]
 80022ca:	609a      	str	r2, [r3, #8]
 80022cc:	60da      	str	r2, [r3, #12]
 80022ce:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a12      	ldr	r2, [pc, #72]	; (8002320 <HAL_TIM_MspPostInit+0x68>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d11e      	bne.n	8002318 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022da:	2300      	movs	r3, #0
 80022dc:	60bb      	str	r3, [r7, #8]
 80022de:	4b11      	ldr	r3, [pc, #68]	; (8002324 <HAL_TIM_MspPostInit+0x6c>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	4a10      	ldr	r2, [pc, #64]	; (8002324 <HAL_TIM_MspPostInit+0x6c>)
 80022e4:	f043 0308 	orr.w	r3, r3, #8
 80022e8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ea:	4b0e      	ldr	r3, [pc, #56]	; (8002324 <HAL_TIM_MspPostInit+0x6c>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	f003 0308 	and.w	r3, r3, #8
 80022f2:	60bb      	str	r3, [r7, #8]
 80022f4:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80022f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022fa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fc:	2302      	movs	r3, #2
 80022fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002300:	2300      	movs	r3, #0
 8002302:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002304:	2300      	movs	r3, #0
 8002306:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002308:	2302      	movs	r3, #2
 800230a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800230c:	f107 030c 	add.w	r3, r7, #12
 8002310:	4619      	mov	r1, r3
 8002312:	4805      	ldr	r0, [pc, #20]	; (8002328 <HAL_TIM_MspPostInit+0x70>)
 8002314:	f000 fb0a 	bl	800292c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002318:	bf00      	nop
 800231a:	3720      	adds	r7, #32
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40000800 	.word	0x40000800
 8002324:	40023800 	.word	0x40023800
 8002328:	40020c00 	.word	0x40020c00

0800232c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002330:	4b11      	ldr	r3, [pc, #68]	; (8002378 <MX_USART1_UART_Init+0x4c>)
 8002332:	4a12      	ldr	r2, [pc, #72]	; (800237c <MX_USART1_UART_Init+0x50>)
 8002334:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002336:	4b10      	ldr	r3, [pc, #64]	; (8002378 <MX_USART1_UART_Init+0x4c>)
 8002338:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800233c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800233e:	4b0e      	ldr	r3, [pc, #56]	; (8002378 <MX_USART1_UART_Init+0x4c>)
 8002340:	2200      	movs	r2, #0
 8002342:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002344:	4b0c      	ldr	r3, [pc, #48]	; (8002378 <MX_USART1_UART_Init+0x4c>)
 8002346:	2200      	movs	r2, #0
 8002348:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800234a:	4b0b      	ldr	r3, [pc, #44]	; (8002378 <MX_USART1_UART_Init+0x4c>)
 800234c:	2200      	movs	r2, #0
 800234e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002350:	4b09      	ldr	r3, [pc, #36]	; (8002378 <MX_USART1_UART_Init+0x4c>)
 8002352:	220c      	movs	r2, #12
 8002354:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002356:	4b08      	ldr	r3, [pc, #32]	; (8002378 <MX_USART1_UART_Init+0x4c>)
 8002358:	2200      	movs	r2, #0
 800235a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800235c:	4b06      	ldr	r3, [pc, #24]	; (8002378 <MX_USART1_UART_Init+0x4c>)
 800235e:	2200      	movs	r2, #0
 8002360:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002362:	4805      	ldr	r0, [pc, #20]	; (8002378 <MX_USART1_UART_Init+0x4c>)
 8002364:	f004 ff88 	bl	8007278 <HAL_UART_Init>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800236e:	f7ff fb05 	bl	800197c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002372:	bf00      	nop
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	2000483c 	.word	0x2000483c
 800237c:	40011000 	.word	0x40011000

08002380 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002384:	4b11      	ldr	r3, [pc, #68]	; (80023cc <MX_USART6_UART_Init+0x4c>)
 8002386:	4a12      	ldr	r2, [pc, #72]	; (80023d0 <MX_USART6_UART_Init+0x50>)
 8002388:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800238a:	4b10      	ldr	r3, [pc, #64]	; (80023cc <MX_USART6_UART_Init+0x4c>)
 800238c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002390:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002392:	4b0e      	ldr	r3, [pc, #56]	; (80023cc <MX_USART6_UART_Init+0x4c>)
 8002394:	2200      	movs	r2, #0
 8002396:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002398:	4b0c      	ldr	r3, [pc, #48]	; (80023cc <MX_USART6_UART_Init+0x4c>)
 800239a:	2200      	movs	r2, #0
 800239c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800239e:	4b0b      	ldr	r3, [pc, #44]	; (80023cc <MX_USART6_UART_Init+0x4c>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80023a4:	4b09      	ldr	r3, [pc, #36]	; (80023cc <MX_USART6_UART_Init+0x4c>)
 80023a6:	220c      	movs	r2, #12
 80023a8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023aa:	4b08      	ldr	r3, [pc, #32]	; (80023cc <MX_USART6_UART_Init+0x4c>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80023b0:	4b06      	ldr	r3, [pc, #24]	; (80023cc <MX_USART6_UART_Init+0x4c>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80023b6:	4805      	ldr	r0, [pc, #20]	; (80023cc <MX_USART6_UART_Init+0x4c>)
 80023b8:	f004 ff5e 	bl	8007278 <HAL_UART_Init>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80023c2:	f7ff fadb 	bl	800197c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80023c6:	bf00      	nop
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	20004880 	.word	0x20004880
 80023d0:	40011400 	.word	0x40011400

080023d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b08c      	sub	sp, #48	; 0x30
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023dc:	f107 031c 	add.w	r3, r7, #28
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	605a      	str	r2, [r3, #4]
 80023e6:	609a      	str	r2, [r3, #8]
 80023e8:	60da      	str	r2, [r3, #12]
 80023ea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a3a      	ldr	r2, [pc, #232]	; (80024dc <HAL_UART_MspInit+0x108>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d135      	bne.n	8002462 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023f6:	2300      	movs	r3, #0
 80023f8:	61bb      	str	r3, [r7, #24]
 80023fa:	4b39      	ldr	r3, [pc, #228]	; (80024e0 <HAL_UART_MspInit+0x10c>)
 80023fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fe:	4a38      	ldr	r2, [pc, #224]	; (80024e0 <HAL_UART_MspInit+0x10c>)
 8002400:	f043 0310 	orr.w	r3, r3, #16
 8002404:	6453      	str	r3, [r2, #68]	; 0x44
 8002406:	4b36      	ldr	r3, [pc, #216]	; (80024e0 <HAL_UART_MspInit+0x10c>)
 8002408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240a:	f003 0310 	and.w	r3, r3, #16
 800240e:	61bb      	str	r3, [r7, #24]
 8002410:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002412:	2300      	movs	r3, #0
 8002414:	617b      	str	r3, [r7, #20]
 8002416:	4b32      	ldr	r3, [pc, #200]	; (80024e0 <HAL_UART_MspInit+0x10c>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	4a31      	ldr	r2, [pc, #196]	; (80024e0 <HAL_UART_MspInit+0x10c>)
 800241c:	f043 0301 	orr.w	r3, r3, #1
 8002420:	6313      	str	r3, [r2, #48]	; 0x30
 8002422:	4b2f      	ldr	r3, [pc, #188]	; (80024e0 <HAL_UART_MspInit+0x10c>)
 8002424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	617b      	str	r3, [r7, #20]
 800242c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800242e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002432:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002434:	2302      	movs	r3, #2
 8002436:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002438:	2300      	movs	r3, #0
 800243a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800243c:	2303      	movs	r3, #3
 800243e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002440:	2307      	movs	r3, #7
 8002442:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002444:	f107 031c 	add.w	r3, r7, #28
 8002448:	4619      	mov	r1, r3
 800244a:	4826      	ldr	r0, [pc, #152]	; (80024e4 <HAL_UART_MspInit+0x110>)
 800244c:	f000 fa6e 	bl	800292c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002450:	2200      	movs	r2, #0
 8002452:	2105      	movs	r1, #5
 8002454:	2025      	movs	r0, #37	; 0x25
 8002456:	f000 f993 	bl	8002780 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800245a:	2025      	movs	r0, #37	; 0x25
 800245c:	f000 f9ac 	bl	80027b8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002460:	e038      	b.n	80024d4 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART6)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a20      	ldr	r2, [pc, #128]	; (80024e8 <HAL_UART_MspInit+0x114>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d133      	bne.n	80024d4 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART6_CLK_ENABLE();
 800246c:	2300      	movs	r3, #0
 800246e:	613b      	str	r3, [r7, #16]
 8002470:	4b1b      	ldr	r3, [pc, #108]	; (80024e0 <HAL_UART_MspInit+0x10c>)
 8002472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002474:	4a1a      	ldr	r2, [pc, #104]	; (80024e0 <HAL_UART_MspInit+0x10c>)
 8002476:	f043 0320 	orr.w	r3, r3, #32
 800247a:	6453      	str	r3, [r2, #68]	; 0x44
 800247c:	4b18      	ldr	r3, [pc, #96]	; (80024e0 <HAL_UART_MspInit+0x10c>)
 800247e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002480:	f003 0320 	and.w	r3, r3, #32
 8002484:	613b      	str	r3, [r7, #16]
 8002486:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002488:	2300      	movs	r3, #0
 800248a:	60fb      	str	r3, [r7, #12]
 800248c:	4b14      	ldr	r3, [pc, #80]	; (80024e0 <HAL_UART_MspInit+0x10c>)
 800248e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002490:	4a13      	ldr	r2, [pc, #76]	; (80024e0 <HAL_UART_MspInit+0x10c>)
 8002492:	f043 0304 	orr.w	r3, r3, #4
 8002496:	6313      	str	r3, [r2, #48]	; 0x30
 8002498:	4b11      	ldr	r3, [pc, #68]	; (80024e0 <HAL_UART_MspInit+0x10c>)
 800249a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249c:	f003 0304 	and.w	r3, r3, #4
 80024a0:	60fb      	str	r3, [r7, #12]
 80024a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80024a4:	23c0      	movs	r3, #192	; 0xc0
 80024a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a8:	2302      	movs	r3, #2
 80024aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ac:	2300      	movs	r3, #0
 80024ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024b0:	2303      	movs	r3, #3
 80024b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80024b4:	2308      	movs	r3, #8
 80024b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024b8:	f107 031c 	add.w	r3, r7, #28
 80024bc:	4619      	mov	r1, r3
 80024be:	480b      	ldr	r0, [pc, #44]	; (80024ec <HAL_UART_MspInit+0x118>)
 80024c0:	f000 fa34 	bl	800292c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80024c4:	2200      	movs	r2, #0
 80024c6:	2105      	movs	r1, #5
 80024c8:	2047      	movs	r0, #71	; 0x47
 80024ca:	f000 f959 	bl	8002780 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80024ce:	2047      	movs	r0, #71	; 0x47
 80024d0:	f000 f972 	bl	80027b8 <HAL_NVIC_EnableIRQ>
}
 80024d4:	bf00      	nop
 80024d6:	3730      	adds	r7, #48	; 0x30
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	40011000 	.word	0x40011000
 80024e0:	40023800 	.word	0x40023800
 80024e4:	40020000 	.word	0x40020000
 80024e8:	40011400 	.word	0x40011400
 80024ec:	40020800 	.word	0x40020800

080024f0 <Reset_Handler>:
 80024f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002528 <LoopFillZerobss+0x12>
 80024f4:	480d      	ldr	r0, [pc, #52]	; (800252c <LoopFillZerobss+0x16>)
 80024f6:	490e      	ldr	r1, [pc, #56]	; (8002530 <LoopFillZerobss+0x1a>)
 80024f8:	4a0e      	ldr	r2, [pc, #56]	; (8002534 <LoopFillZerobss+0x1e>)
 80024fa:	2300      	movs	r3, #0
 80024fc:	e002      	b.n	8002504 <LoopCopyDataInit>

080024fe <CopyDataInit>:
 80024fe:	58d4      	ldr	r4, [r2, r3]
 8002500:	50c4      	str	r4, [r0, r3]
 8002502:	3304      	adds	r3, #4

08002504 <LoopCopyDataInit>:
 8002504:	18c4      	adds	r4, r0, r3
 8002506:	428c      	cmp	r4, r1
 8002508:	d3f9      	bcc.n	80024fe <CopyDataInit>
 800250a:	4a0b      	ldr	r2, [pc, #44]	; (8002538 <LoopFillZerobss+0x22>)
 800250c:	4c0b      	ldr	r4, [pc, #44]	; (800253c <LoopFillZerobss+0x26>)
 800250e:	2300      	movs	r3, #0
 8002510:	e001      	b.n	8002516 <LoopFillZerobss>

08002512 <FillZerobss>:
 8002512:	6013      	str	r3, [r2, #0]
 8002514:	3204      	adds	r2, #4

08002516 <LoopFillZerobss>:
 8002516:	42a2      	cmp	r2, r4
 8002518:	d3fb      	bcc.n	8002512 <FillZerobss>
 800251a:	f7ff fe1d 	bl	8002158 <SystemInit>
 800251e:	f007 f993 	bl	8009848 <__libc_init_array>
 8002522:	f7ff f975 	bl	8001810 <main>
 8002526:	4770      	bx	lr
 8002528:	20020000 	.word	0x20020000
 800252c:	20000000 	.word	0x20000000
 8002530:	20000084 	.word	0x20000084
 8002534:	0800b8cc 	.word	0x0800b8cc
 8002538:	20000084 	.word	0x20000084
 800253c:	200048d8 	.word	0x200048d8

08002540 <ADC_IRQHandler>:
 8002540:	e7fe      	b.n	8002540 <ADC_IRQHandler>
	...

08002544 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002548:	4b0e      	ldr	r3, [pc, #56]	; (8002584 <HAL_Init+0x40>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a0d      	ldr	r2, [pc, #52]	; (8002584 <HAL_Init+0x40>)
 800254e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002552:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002554:	4b0b      	ldr	r3, [pc, #44]	; (8002584 <HAL_Init+0x40>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a0a      	ldr	r2, [pc, #40]	; (8002584 <HAL_Init+0x40>)
 800255a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800255e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002560:	4b08      	ldr	r3, [pc, #32]	; (8002584 <HAL_Init+0x40>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a07      	ldr	r2, [pc, #28]	; (8002584 <HAL_Init+0x40>)
 8002566:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800256a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800256c:	2003      	movs	r0, #3
 800256e:	f000 f8fc 	bl	800276a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002572:	200f      	movs	r0, #15
 8002574:	f7ff fcf6 	bl	8001f64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002578:	f7ff fcc8 	bl	8001f0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	40023c00 	.word	0x40023c00

08002588 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800258c:	4b06      	ldr	r3, [pc, #24]	; (80025a8 <HAL_IncTick+0x20>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	461a      	mov	r2, r3
 8002592:	4b06      	ldr	r3, [pc, #24]	; (80025ac <HAL_IncTick+0x24>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4413      	add	r3, r2
 8002598:	4a04      	ldr	r2, [pc, #16]	; (80025ac <HAL_IncTick+0x24>)
 800259a:	6013      	str	r3, [r2, #0]
}
 800259c:	bf00      	nop
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	20000018 	.word	0x20000018
 80025ac:	200048c4 	.word	0x200048c4

080025b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  return uwTick;
 80025b4:	4b03      	ldr	r3, [pc, #12]	; (80025c4 <HAL_GetTick+0x14>)
 80025b6:	681b      	ldr	r3, [r3, #0]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	200048c4 	.word	0x200048c4

080025c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025d0:	f7ff ffee 	bl	80025b0 <HAL_GetTick>
 80025d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e0:	d005      	beq.n	80025ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025e2:	4b0a      	ldr	r3, [pc, #40]	; (800260c <HAL_Delay+0x44>)
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	461a      	mov	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	4413      	add	r3, r2
 80025ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025ee:	bf00      	nop
 80025f0:	f7ff ffde 	bl	80025b0 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d8f7      	bhi.n	80025f0 <HAL_Delay+0x28>
  {
  }
}
 8002600:	bf00      	nop
 8002602:	bf00      	nop
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	20000018 	.word	0x20000018

08002610 <__NVIC_SetPriorityGrouping>:
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f003 0307 	and.w	r3, r3, #7
 800261e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002620:	4b0c      	ldr	r3, [pc, #48]	; (8002654 <__NVIC_SetPriorityGrouping+0x44>)
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002626:	68ba      	ldr	r2, [r7, #8]
 8002628:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800262c:	4013      	ands	r3, r2
 800262e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002638:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800263c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002640:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002642:	4a04      	ldr	r2, [pc, #16]	; (8002654 <__NVIC_SetPriorityGrouping+0x44>)
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	60d3      	str	r3, [r2, #12]
}
 8002648:	bf00      	nop
 800264a:	3714      	adds	r7, #20
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr
 8002654:	e000ed00 	.word	0xe000ed00

08002658 <__NVIC_GetPriorityGrouping>:
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800265c:	4b04      	ldr	r3, [pc, #16]	; (8002670 <__NVIC_GetPriorityGrouping+0x18>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	0a1b      	lsrs	r3, r3, #8
 8002662:	f003 0307 	and.w	r3, r3, #7
}
 8002666:	4618      	mov	r0, r3
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr
 8002670:	e000ed00 	.word	0xe000ed00

08002674 <__NVIC_EnableIRQ>:
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	4603      	mov	r3, r0
 800267c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800267e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002682:	2b00      	cmp	r3, #0
 8002684:	db0b      	blt.n	800269e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002686:	79fb      	ldrb	r3, [r7, #7]
 8002688:	f003 021f 	and.w	r2, r3, #31
 800268c:	4907      	ldr	r1, [pc, #28]	; (80026ac <__NVIC_EnableIRQ+0x38>)
 800268e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002692:	095b      	lsrs	r3, r3, #5
 8002694:	2001      	movs	r0, #1
 8002696:	fa00 f202 	lsl.w	r2, r0, r2
 800269a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800269e:	bf00      	nop
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	e000e100 	.word	0xe000e100

080026b0 <__NVIC_SetPriority>:
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	6039      	str	r1, [r7, #0]
 80026ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	db0a      	blt.n	80026da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	b2da      	uxtb	r2, r3
 80026c8:	490c      	ldr	r1, [pc, #48]	; (80026fc <__NVIC_SetPriority+0x4c>)
 80026ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ce:	0112      	lsls	r2, r2, #4
 80026d0:	b2d2      	uxtb	r2, r2
 80026d2:	440b      	add	r3, r1
 80026d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80026d8:	e00a      	b.n	80026f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	b2da      	uxtb	r2, r3
 80026de:	4908      	ldr	r1, [pc, #32]	; (8002700 <__NVIC_SetPriority+0x50>)
 80026e0:	79fb      	ldrb	r3, [r7, #7]
 80026e2:	f003 030f 	and.w	r3, r3, #15
 80026e6:	3b04      	subs	r3, #4
 80026e8:	0112      	lsls	r2, r2, #4
 80026ea:	b2d2      	uxtb	r2, r2
 80026ec:	440b      	add	r3, r1
 80026ee:	761a      	strb	r2, [r3, #24]
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	e000e100 	.word	0xe000e100
 8002700:	e000ed00 	.word	0xe000ed00

08002704 <NVIC_EncodePriority>:
{
 8002704:	b480      	push	{r7}
 8002706:	b089      	sub	sp, #36	; 0x24
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f003 0307 	and.w	r3, r3, #7
 8002716:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	f1c3 0307 	rsb	r3, r3, #7
 800271e:	2b04      	cmp	r3, #4
 8002720:	bf28      	it	cs
 8002722:	2304      	movcs	r3, #4
 8002724:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	3304      	adds	r3, #4
 800272a:	2b06      	cmp	r3, #6
 800272c:	d902      	bls.n	8002734 <NVIC_EncodePriority+0x30>
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	3b03      	subs	r3, #3
 8002732:	e000      	b.n	8002736 <NVIC_EncodePriority+0x32>
 8002734:	2300      	movs	r3, #0
 8002736:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002738:	f04f 32ff 	mov.w	r2, #4294967295
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	43da      	mvns	r2, r3
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	401a      	ands	r2, r3
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800274c:	f04f 31ff 	mov.w	r1, #4294967295
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	fa01 f303 	lsl.w	r3, r1, r3
 8002756:	43d9      	mvns	r1, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800275c:	4313      	orrs	r3, r2
}
 800275e:	4618      	mov	r0, r3
 8002760:	3724      	adds	r7, #36	; 0x24
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr

0800276a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b082      	sub	sp, #8
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7ff ff4c 	bl	8002610 <__NVIC_SetPriorityGrouping>
}
 8002778:	bf00      	nop
 800277a:	3708      	adds	r7, #8
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af00      	add	r7, sp, #0
 8002786:	4603      	mov	r3, r0
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]
 800278c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800278e:	2300      	movs	r3, #0
 8002790:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002792:	f7ff ff61 	bl	8002658 <__NVIC_GetPriorityGrouping>
 8002796:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	68b9      	ldr	r1, [r7, #8]
 800279c:	6978      	ldr	r0, [r7, #20]
 800279e:	f7ff ffb1 	bl	8002704 <NVIC_EncodePriority>
 80027a2:	4602      	mov	r2, r0
 80027a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027a8:	4611      	mov	r1, r2
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff ff80 	bl	80026b0 <__NVIC_SetPriority>
}
 80027b0:	bf00      	nop
 80027b2:	3718      	adds	r7, #24
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	4603      	mov	r3, r0
 80027c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7ff ff54 	bl	8002674 <__NVIC_EnableIRQ>
}
 80027cc:	bf00      	nop
 80027ce:	3708      	adds	r7, #8
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80027e2:	f7ff fee5 	bl	80025b0 <HAL_GetTick>
 80027e6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d008      	beq.n	8002806 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2280      	movs	r2, #128	; 0x80
 80027f8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e052      	b.n	80028ac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f022 0216 	bic.w	r2, r2, #22
 8002814:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	695a      	ldr	r2, [r3, #20]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002824:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282a:	2b00      	cmp	r3, #0
 800282c:	d103      	bne.n	8002836 <HAL_DMA_Abort+0x62>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002832:	2b00      	cmp	r3, #0
 8002834:	d007      	beq.n	8002846 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 0208 	bic.w	r2, r2, #8
 8002844:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f022 0201 	bic.w	r2, r2, #1
 8002854:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002856:	e013      	b.n	8002880 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002858:	f7ff feaa 	bl	80025b0 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b05      	cmp	r3, #5
 8002864:	d90c      	bls.n	8002880 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2220      	movs	r2, #32
 800286a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2203      	movs	r2, #3
 8002870:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e015      	b.n	80028ac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	2b00      	cmp	r3, #0
 800288c:	d1e4      	bne.n	8002858 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002892:	223f      	movs	r2, #63	; 0x3f
 8002894:	409a      	lsls	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2201      	movs	r2, #1
 800289e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3710      	adds	r7, #16
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d004      	beq.n	80028d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2280      	movs	r2, #128	; 0x80
 80028cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e00c      	b.n	80028ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2205      	movs	r2, #5
 80028d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f022 0201 	bic.w	r2, r2, #1
 80028e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002906:	b2db      	uxtb	r3, r3
}
 8002908:	4618      	mov	r0, r3
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002920:	4618      	mov	r0, r3
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800292c:	b480      	push	{r7}
 800292e:	b089      	sub	sp, #36	; 0x24
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002936:	2300      	movs	r3, #0
 8002938:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800293a:	2300      	movs	r3, #0
 800293c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800293e:	2300      	movs	r3, #0
 8002940:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002942:	2300      	movs	r3, #0
 8002944:	61fb      	str	r3, [r7, #28]
 8002946:	e16b      	b.n	8002c20 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002948:	2201      	movs	r2, #1
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	4013      	ands	r3, r2
 800295a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	429a      	cmp	r2, r3
 8002962:	f040 815a 	bne.w	8002c1a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f003 0303 	and.w	r3, r3, #3
 800296e:	2b01      	cmp	r3, #1
 8002970:	d005      	beq.n	800297e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800297a:	2b02      	cmp	r3, #2
 800297c:	d130      	bne.n	80029e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	2203      	movs	r2, #3
 800298a:	fa02 f303 	lsl.w	r3, r2, r3
 800298e:	43db      	mvns	r3, r3
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	4013      	ands	r3, r2
 8002994:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	68da      	ldr	r2, [r3, #12]
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	fa02 f303 	lsl.w	r3, r2, r3
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029b4:	2201      	movs	r2, #1
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	43db      	mvns	r3, r3
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	4013      	ands	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	091b      	lsrs	r3, r3, #4
 80029ca:	f003 0201 	and.w	r2, r3, #1
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f003 0303 	and.w	r3, r3, #3
 80029e8:	2b03      	cmp	r3, #3
 80029ea:	d017      	beq.n	8002a1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	2203      	movs	r2, #3
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	43db      	mvns	r3, r3
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	4013      	ands	r3, r2
 8002a02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	689a      	ldr	r2, [r3, #8]
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f003 0303 	and.w	r3, r3, #3
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d123      	bne.n	8002a70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	08da      	lsrs	r2, r3, #3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	3208      	adds	r2, #8
 8002a30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	f003 0307 	and.w	r3, r3, #7
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	220f      	movs	r2, #15
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	43db      	mvns	r3, r3
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	691a      	ldr	r2, [r3, #16]
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	f003 0307 	and.w	r3, r3, #7
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	08da      	lsrs	r2, r3, #3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	3208      	adds	r2, #8
 8002a6a:	69b9      	ldr	r1, [r7, #24]
 8002a6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	2203      	movs	r2, #3
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	43db      	mvns	r3, r3
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	4013      	ands	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f003 0203 	and.w	r2, r3, #3
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f000 80b4 	beq.w	8002c1a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60fb      	str	r3, [r7, #12]
 8002ab6:	4b60      	ldr	r3, [pc, #384]	; (8002c38 <HAL_GPIO_Init+0x30c>)
 8002ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aba:	4a5f      	ldr	r2, [pc, #380]	; (8002c38 <HAL_GPIO_Init+0x30c>)
 8002abc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ac0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ac2:	4b5d      	ldr	r3, [pc, #372]	; (8002c38 <HAL_GPIO_Init+0x30c>)
 8002ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ace:	4a5b      	ldr	r2, [pc, #364]	; (8002c3c <HAL_GPIO_Init+0x310>)
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	089b      	lsrs	r3, r3, #2
 8002ad4:	3302      	adds	r3, #2
 8002ad6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	f003 0303 	and.w	r3, r3, #3
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	220f      	movs	r2, #15
 8002ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aea:	43db      	mvns	r3, r3
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	4013      	ands	r3, r2
 8002af0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a52      	ldr	r2, [pc, #328]	; (8002c40 <HAL_GPIO_Init+0x314>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d02b      	beq.n	8002b52 <HAL_GPIO_Init+0x226>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a51      	ldr	r2, [pc, #324]	; (8002c44 <HAL_GPIO_Init+0x318>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d025      	beq.n	8002b4e <HAL_GPIO_Init+0x222>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a50      	ldr	r2, [pc, #320]	; (8002c48 <HAL_GPIO_Init+0x31c>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d01f      	beq.n	8002b4a <HAL_GPIO_Init+0x21e>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a4f      	ldr	r2, [pc, #316]	; (8002c4c <HAL_GPIO_Init+0x320>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d019      	beq.n	8002b46 <HAL_GPIO_Init+0x21a>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a4e      	ldr	r2, [pc, #312]	; (8002c50 <HAL_GPIO_Init+0x324>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d013      	beq.n	8002b42 <HAL_GPIO_Init+0x216>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a4d      	ldr	r2, [pc, #308]	; (8002c54 <HAL_GPIO_Init+0x328>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d00d      	beq.n	8002b3e <HAL_GPIO_Init+0x212>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a4c      	ldr	r2, [pc, #304]	; (8002c58 <HAL_GPIO_Init+0x32c>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d007      	beq.n	8002b3a <HAL_GPIO_Init+0x20e>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a4b      	ldr	r2, [pc, #300]	; (8002c5c <HAL_GPIO_Init+0x330>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d101      	bne.n	8002b36 <HAL_GPIO_Init+0x20a>
 8002b32:	2307      	movs	r3, #7
 8002b34:	e00e      	b.n	8002b54 <HAL_GPIO_Init+0x228>
 8002b36:	2308      	movs	r3, #8
 8002b38:	e00c      	b.n	8002b54 <HAL_GPIO_Init+0x228>
 8002b3a:	2306      	movs	r3, #6
 8002b3c:	e00a      	b.n	8002b54 <HAL_GPIO_Init+0x228>
 8002b3e:	2305      	movs	r3, #5
 8002b40:	e008      	b.n	8002b54 <HAL_GPIO_Init+0x228>
 8002b42:	2304      	movs	r3, #4
 8002b44:	e006      	b.n	8002b54 <HAL_GPIO_Init+0x228>
 8002b46:	2303      	movs	r3, #3
 8002b48:	e004      	b.n	8002b54 <HAL_GPIO_Init+0x228>
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	e002      	b.n	8002b54 <HAL_GPIO_Init+0x228>
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e000      	b.n	8002b54 <HAL_GPIO_Init+0x228>
 8002b52:	2300      	movs	r3, #0
 8002b54:	69fa      	ldr	r2, [r7, #28]
 8002b56:	f002 0203 	and.w	r2, r2, #3
 8002b5a:	0092      	lsls	r2, r2, #2
 8002b5c:	4093      	lsls	r3, r2
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b64:	4935      	ldr	r1, [pc, #212]	; (8002c3c <HAL_GPIO_Init+0x310>)
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	089b      	lsrs	r3, r3, #2
 8002b6a:	3302      	adds	r3, #2
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b72:	4b3b      	ldr	r3, [pc, #236]	; (8002c60 <HAL_GPIO_Init+0x334>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	43db      	mvns	r3, r3
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d003      	beq.n	8002b96 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b96:	4a32      	ldr	r2, [pc, #200]	; (8002c60 <HAL_GPIO_Init+0x334>)
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002b9c:	4b30      	ldr	r3, [pc, #192]	; (8002c60 <HAL_GPIO_Init+0x334>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	43db      	mvns	r3, r3
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d003      	beq.n	8002bc0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bc0:	4a27      	ldr	r2, [pc, #156]	; (8002c60 <HAL_GPIO_Init+0x334>)
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bc6:	4b26      	ldr	r3, [pc, #152]	; (8002c60 <HAL_GPIO_Init+0x334>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	43db      	mvns	r3, r3
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d003      	beq.n	8002bea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002be2:	69ba      	ldr	r2, [r7, #24]
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bea:	4a1d      	ldr	r2, [pc, #116]	; (8002c60 <HAL_GPIO_Init+0x334>)
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bf0:	4b1b      	ldr	r3, [pc, #108]	; (8002c60 <HAL_GPIO_Init+0x334>)
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	43db      	mvns	r3, r3
 8002bfa:	69ba      	ldr	r2, [r7, #24]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d003      	beq.n	8002c14 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c14:	4a12      	ldr	r2, [pc, #72]	; (8002c60 <HAL_GPIO_Init+0x334>)
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	61fb      	str	r3, [r7, #28]
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	2b0f      	cmp	r3, #15
 8002c24:	f67f ae90 	bls.w	8002948 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c28:	bf00      	nop
 8002c2a:	bf00      	nop
 8002c2c:	3724      	adds	r7, #36	; 0x24
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	40013800 	.word	0x40013800
 8002c40:	40020000 	.word	0x40020000
 8002c44:	40020400 	.word	0x40020400
 8002c48:	40020800 	.word	0x40020800
 8002c4c:	40020c00 	.word	0x40020c00
 8002c50:	40021000 	.word	0x40021000
 8002c54:	40021400 	.word	0x40021400
 8002c58:	40021800 	.word	0x40021800
 8002c5c:	40021c00 	.word	0x40021c00
 8002c60:	40013c00 	.word	0x40013c00

08002c64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	691a      	ldr	r2, [r3, #16]
 8002c74:	887b      	ldrh	r3, [r7, #2]
 8002c76:	4013      	ands	r3, r2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d002      	beq.n	8002c82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	73fb      	strb	r3, [r7, #15]
 8002c80:	e001      	b.n	8002c86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c82:	2300      	movs	r3, #0
 8002c84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3714      	adds	r7, #20
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	807b      	strh	r3, [r7, #2]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ca4:	787b      	ldrb	r3, [r7, #1]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d003      	beq.n	8002cb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002caa:	887a      	ldrh	r2, [r7, #2]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cb0:	e003      	b.n	8002cba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cb2:	887b      	ldrh	r3, [r7, #2]
 8002cb4:	041a      	lsls	r2, r3, #16
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	619a      	str	r2, [r3, #24]
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
	...

08002cc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e12b      	b.n	8002f32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d106      	bne.n	8002cf4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f7fe fcde 	bl	80016b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2224      	movs	r2, #36	; 0x24
 8002cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 0201 	bic.w	r2, r2, #1
 8002d0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d2c:	f003 fa0e 	bl	800614c <HAL_RCC_GetPCLK1Freq>
 8002d30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	4a81      	ldr	r2, [pc, #516]	; (8002f3c <HAL_I2C_Init+0x274>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d807      	bhi.n	8002d4c <HAL_I2C_Init+0x84>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	4a80      	ldr	r2, [pc, #512]	; (8002f40 <HAL_I2C_Init+0x278>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	bf94      	ite	ls
 8002d44:	2301      	movls	r3, #1
 8002d46:	2300      	movhi	r3, #0
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	e006      	b.n	8002d5a <HAL_I2C_Init+0x92>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	4a7d      	ldr	r2, [pc, #500]	; (8002f44 <HAL_I2C_Init+0x27c>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	bf94      	ite	ls
 8002d54:	2301      	movls	r3, #1
 8002d56:	2300      	movhi	r3, #0
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e0e7      	b.n	8002f32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	4a78      	ldr	r2, [pc, #480]	; (8002f48 <HAL_I2C_Init+0x280>)
 8002d66:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6a:	0c9b      	lsrs	r3, r3, #18
 8002d6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68ba      	ldr	r2, [r7, #8]
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	4a6a      	ldr	r2, [pc, #424]	; (8002f3c <HAL_I2C_Init+0x274>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d802      	bhi.n	8002d9c <HAL_I2C_Init+0xd4>
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	3301      	adds	r3, #1
 8002d9a:	e009      	b.n	8002db0 <HAL_I2C_Init+0xe8>
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002da2:	fb02 f303 	mul.w	r3, r2, r3
 8002da6:	4a69      	ldr	r2, [pc, #420]	; (8002f4c <HAL_I2C_Init+0x284>)
 8002da8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dac:	099b      	lsrs	r3, r3, #6
 8002dae:	3301      	adds	r3, #1
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	6812      	ldr	r2, [r2, #0]
 8002db4:	430b      	orrs	r3, r1
 8002db6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	69db      	ldr	r3, [r3, #28]
 8002dbe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002dc2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	495c      	ldr	r1, [pc, #368]	; (8002f3c <HAL_I2C_Init+0x274>)
 8002dcc:	428b      	cmp	r3, r1
 8002dce:	d819      	bhi.n	8002e04 <HAL_I2C_Init+0x13c>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	1e59      	subs	r1, r3, #1
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	fbb1 f3f3 	udiv	r3, r1, r3
 8002dde:	1c59      	adds	r1, r3, #1
 8002de0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002de4:	400b      	ands	r3, r1
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00a      	beq.n	8002e00 <HAL_I2C_Init+0x138>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	1e59      	subs	r1, r3, #1
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002df8:	3301      	adds	r3, #1
 8002dfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dfe:	e051      	b.n	8002ea4 <HAL_I2C_Init+0x1dc>
 8002e00:	2304      	movs	r3, #4
 8002e02:	e04f      	b.n	8002ea4 <HAL_I2C_Init+0x1dc>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d111      	bne.n	8002e30 <HAL_I2C_Init+0x168>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	1e58      	subs	r0, r3, #1
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6859      	ldr	r1, [r3, #4]
 8002e14:	460b      	mov	r3, r1
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	440b      	add	r3, r1
 8002e1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e1e:	3301      	adds	r3, #1
 8002e20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	bf0c      	ite	eq
 8002e28:	2301      	moveq	r3, #1
 8002e2a:	2300      	movne	r3, #0
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	e012      	b.n	8002e56 <HAL_I2C_Init+0x18e>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	1e58      	subs	r0, r3, #1
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6859      	ldr	r1, [r3, #4]
 8002e38:	460b      	mov	r3, r1
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	0099      	lsls	r1, r3, #2
 8002e40:	440b      	add	r3, r1
 8002e42:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e46:	3301      	adds	r3, #1
 8002e48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	bf0c      	ite	eq
 8002e50:	2301      	moveq	r3, #1
 8002e52:	2300      	movne	r3, #0
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <HAL_I2C_Init+0x196>
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e022      	b.n	8002ea4 <HAL_I2C_Init+0x1dc>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d10e      	bne.n	8002e84 <HAL_I2C_Init+0x1bc>
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	1e58      	subs	r0, r3, #1
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6859      	ldr	r1, [r3, #4]
 8002e6e:	460b      	mov	r3, r1
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	440b      	add	r3, r1
 8002e74:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e78:	3301      	adds	r3, #1
 8002e7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e82:	e00f      	b.n	8002ea4 <HAL_I2C_Init+0x1dc>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	1e58      	subs	r0, r3, #1
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6859      	ldr	r1, [r3, #4]
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	440b      	add	r3, r1
 8002e92:	0099      	lsls	r1, r3, #2
 8002e94:	440b      	add	r3, r1
 8002e96:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ea0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ea4:	6879      	ldr	r1, [r7, #4]
 8002ea6:	6809      	ldr	r1, [r1, #0]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	69da      	ldr	r2, [r3, #28]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ed2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	6911      	ldr	r1, [r2, #16]
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	68d2      	ldr	r2, [r2, #12]
 8002ede:	4311      	orrs	r1, r2
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	6812      	ldr	r2, [r2, #0]
 8002ee4:	430b      	orrs	r3, r1
 8002ee6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	695a      	ldr	r2, [r3, #20]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	431a      	orrs	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	430a      	orrs	r2, r1
 8002f02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f042 0201 	orr.w	r2, r2, #1
 8002f12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2220      	movs	r2, #32
 8002f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	000186a0 	.word	0x000186a0
 8002f40:	001e847f 	.word	0x001e847f
 8002f44:	003d08ff 	.word	0x003d08ff
 8002f48:	431bde83 	.word	0x431bde83
 8002f4c:	10624dd3 	.word	0x10624dd3

08002f50 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b088      	sub	sp, #32
 8002f54:	af02      	add	r7, sp, #8
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	607a      	str	r2, [r7, #4]
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	817b      	strh	r3, [r7, #10]
 8002f60:	4613      	mov	r3, r2
 8002f62:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f64:	f7ff fb24 	bl	80025b0 <HAL_GetTick>
 8002f68:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b20      	cmp	r3, #32
 8002f74:	f040 80e0 	bne.w	8003138 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	9300      	str	r3, [sp, #0]
 8002f7c:	2319      	movs	r3, #25
 8002f7e:	2201      	movs	r2, #1
 8002f80:	4970      	ldr	r1, [pc, #448]	; (8003144 <HAL_I2C_Master_Transmit+0x1f4>)
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f002 fa6c 	bl	8005460 <I2C_WaitOnFlagUntilTimeout>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002f8e:	2302      	movs	r3, #2
 8002f90:	e0d3      	b.n	800313a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d101      	bne.n	8002fa0 <HAL_I2C_Master_Transmit+0x50>
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	e0cc      	b.n	800313a <HAL_I2C_Master_Transmit+0x1ea>
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d007      	beq.n	8002fc6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f042 0201 	orr.w	r2, r2, #1
 8002fc4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fd4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2221      	movs	r2, #33	; 0x21
 8002fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2210      	movs	r2, #16
 8002fe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	893a      	ldrh	r2, [r7, #8]
 8002ff6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ffc:	b29a      	uxth	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	4a50      	ldr	r2, [pc, #320]	; (8003148 <HAL_I2C_Master_Transmit+0x1f8>)
 8003006:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003008:	8979      	ldrh	r1, [r7, #10]
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	6a3a      	ldr	r2, [r7, #32]
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f001 ff98 	bl	8004f44 <I2C_MasterRequestWrite>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e08d      	b.n	800313a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800301e:	2300      	movs	r3, #0
 8003020:	613b      	str	r3, [r7, #16]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	695b      	ldr	r3, [r3, #20]
 8003028:	613b      	str	r3, [r7, #16]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	613b      	str	r3, [r7, #16]
 8003032:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003034:	e066      	b.n	8003104 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	6a39      	ldr	r1, [r7, #32]
 800303a:	68f8      	ldr	r0, [r7, #12]
 800303c:	f002 fae6 	bl	800560c <I2C_WaitOnTXEFlagUntilTimeout>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d00d      	beq.n	8003062 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304a:	2b04      	cmp	r3, #4
 800304c:	d107      	bne.n	800305e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800305c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e06b      	b.n	800313a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003066:	781a      	ldrb	r2, [r3, #0]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003072:	1c5a      	adds	r2, r3, #1
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800307c:	b29b      	uxth	r3, r3
 800307e:	3b01      	subs	r3, #1
 8003080:	b29a      	uxth	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800308a:	3b01      	subs	r3, #1
 800308c:	b29a      	uxth	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	695b      	ldr	r3, [r3, #20]
 8003098:	f003 0304 	and.w	r3, r3, #4
 800309c:	2b04      	cmp	r3, #4
 800309e:	d11b      	bne.n	80030d8 <HAL_I2C_Master_Transmit+0x188>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d017      	beq.n	80030d8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ac:	781a      	ldrb	r2, [r3, #0]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b8:	1c5a      	adds	r2, r3, #1
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	3b01      	subs	r3, #1
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d0:	3b01      	subs	r3, #1
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030d8:	697a      	ldr	r2, [r7, #20]
 80030da:	6a39      	ldr	r1, [r7, #32]
 80030dc:	68f8      	ldr	r0, [r7, #12]
 80030de:	f002 fad6 	bl	800568e <I2C_WaitOnBTFFlagUntilTimeout>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d00d      	beq.n	8003104 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ec:	2b04      	cmp	r3, #4
 80030ee:	d107      	bne.n	8003100 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030fe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e01a      	b.n	800313a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003108:	2b00      	cmp	r3, #0
 800310a:	d194      	bne.n	8003036 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800311a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2220      	movs	r2, #32
 8003120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003134:	2300      	movs	r3, #0
 8003136:	e000      	b.n	800313a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003138:	2302      	movs	r3, #2
  }
}
 800313a:	4618      	mov	r0, r3
 800313c:	3718      	adds	r7, #24
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	00100002 	.word	0x00100002
 8003148:	ffff0000 	.word	0xffff0000

0800314c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b08c      	sub	sp, #48	; 0x30
 8003150:	af02      	add	r7, sp, #8
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	607a      	str	r2, [r7, #4]
 8003156:	461a      	mov	r2, r3
 8003158:	460b      	mov	r3, r1
 800315a:	817b      	strh	r3, [r7, #10]
 800315c:	4613      	mov	r3, r2
 800315e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003160:	f7ff fa26 	bl	80025b0 <HAL_GetTick>
 8003164:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b20      	cmp	r3, #32
 8003170:	f040 820b 	bne.w	800358a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003176:	9300      	str	r3, [sp, #0]
 8003178:	2319      	movs	r3, #25
 800317a:	2201      	movs	r2, #1
 800317c:	497c      	ldr	r1, [pc, #496]	; (8003370 <HAL_I2C_Master_Receive+0x224>)
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	f002 f96e 	bl	8005460 <I2C_WaitOnFlagUntilTimeout>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800318a:	2302      	movs	r3, #2
 800318c:	e1fe      	b.n	800358c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003194:	2b01      	cmp	r3, #1
 8003196:	d101      	bne.n	800319c <HAL_I2C_Master_Receive+0x50>
 8003198:	2302      	movs	r3, #2
 800319a:	e1f7      	b.n	800358c <HAL_I2C_Master_Receive+0x440>
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d007      	beq.n	80031c2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f042 0201 	orr.w	r2, r2, #1
 80031c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2222      	movs	r2, #34	; 0x22
 80031d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2210      	movs	r2, #16
 80031de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	893a      	ldrh	r2, [r7, #8]
 80031f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f8:	b29a      	uxth	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	4a5c      	ldr	r2, [pc, #368]	; (8003374 <HAL_I2C_Master_Receive+0x228>)
 8003202:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003204:	8979      	ldrh	r1, [r7, #10]
 8003206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003208:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f001 ff1c 	bl	8005048 <I2C_MasterRequestRead>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e1b8      	b.n	800358c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800321e:	2b00      	cmp	r3, #0
 8003220:	d113      	bne.n	800324a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003222:	2300      	movs	r3, #0
 8003224:	623b      	str	r3, [r7, #32]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	623b      	str	r3, [r7, #32]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	623b      	str	r3, [r7, #32]
 8003236:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003246:	601a      	str	r2, [r3, #0]
 8003248:	e18c      	b.n	8003564 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800324e:	2b01      	cmp	r3, #1
 8003250:	d11b      	bne.n	800328a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003260:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003262:	2300      	movs	r3, #0
 8003264:	61fb      	str	r3, [r7, #28]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	695b      	ldr	r3, [r3, #20]
 800326c:	61fb      	str	r3, [r7, #28]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	61fb      	str	r3, [r7, #28]
 8003276:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003286:	601a      	str	r2, [r3, #0]
 8003288:	e16c      	b.n	8003564 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800328e:	2b02      	cmp	r3, #2
 8003290:	d11b      	bne.n	80032ca <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032a0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032b2:	2300      	movs	r3, #0
 80032b4:	61bb      	str	r3, [r7, #24]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	695b      	ldr	r3, [r3, #20]
 80032bc:	61bb      	str	r3, [r7, #24]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	61bb      	str	r3, [r7, #24]
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	e14c      	b.n	8003564 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032da:	2300      	movs	r3, #0
 80032dc:	617b      	str	r3, [r7, #20]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	695b      	ldr	r3, [r3, #20]
 80032e4:	617b      	str	r3, [r7, #20]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	617b      	str	r3, [r7, #20]
 80032ee:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80032f0:	e138      	b.n	8003564 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032f6:	2b03      	cmp	r3, #3
 80032f8:	f200 80f1 	bhi.w	80034de <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003300:	2b01      	cmp	r3, #1
 8003302:	d123      	bne.n	800334c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003306:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003308:	68f8      	ldr	r0, [r7, #12]
 800330a:	f002 fa33 	bl	8005774 <I2C_WaitOnRXNEFlagUntilTimeout>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d001      	beq.n	8003318 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e139      	b.n	800358c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	691a      	ldr	r2, [r3, #16]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003322:	b2d2      	uxtb	r2, r2
 8003324:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332a:	1c5a      	adds	r2, r3, #1
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003334:	3b01      	subs	r3, #1
 8003336:	b29a      	uxth	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003340:	b29b      	uxth	r3, r3
 8003342:	3b01      	subs	r3, #1
 8003344:	b29a      	uxth	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	855a      	strh	r2, [r3, #42]	; 0x2a
 800334a:	e10b      	b.n	8003564 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003350:	2b02      	cmp	r3, #2
 8003352:	d14e      	bne.n	80033f2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003356:	9300      	str	r3, [sp, #0]
 8003358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800335a:	2200      	movs	r2, #0
 800335c:	4906      	ldr	r1, [pc, #24]	; (8003378 <HAL_I2C_Master_Receive+0x22c>)
 800335e:	68f8      	ldr	r0, [r7, #12]
 8003360:	f002 f87e 	bl	8005460 <I2C_WaitOnFlagUntilTimeout>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d008      	beq.n	800337c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e10e      	b.n	800358c <HAL_I2C_Master_Receive+0x440>
 800336e:	bf00      	nop
 8003370:	00100002 	.word	0x00100002
 8003374:	ffff0000 	.word	0xffff0000
 8003378:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800338a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	691a      	ldr	r2, [r3, #16]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003396:	b2d2      	uxtb	r2, r2
 8003398:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339e:	1c5a      	adds	r2, r3, #1
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033a8:	3b01      	subs	r3, #1
 80033aa:	b29a      	uxth	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	3b01      	subs	r3, #1
 80033b8:	b29a      	uxth	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	691a      	ldr	r2, [r3, #16]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c8:	b2d2      	uxtb	r2, r2
 80033ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d0:	1c5a      	adds	r2, r3, #1
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033da:	3b01      	subs	r3, #1
 80033dc:	b29a      	uxth	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	3b01      	subs	r3, #1
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033f0:	e0b8      	b.n	8003564 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f4:	9300      	str	r3, [sp, #0]
 80033f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f8:	2200      	movs	r2, #0
 80033fa:	4966      	ldr	r1, [pc, #408]	; (8003594 <HAL_I2C_Master_Receive+0x448>)
 80033fc:	68f8      	ldr	r0, [r7, #12]
 80033fe:	f002 f82f 	bl	8005460 <I2C_WaitOnFlagUntilTimeout>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d001      	beq.n	800340c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e0bf      	b.n	800358c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800341a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	691a      	ldr	r2, [r3, #16]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003426:	b2d2      	uxtb	r2, r2
 8003428:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342e:	1c5a      	adds	r2, r3, #1
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003438:	3b01      	subs	r3, #1
 800343a:	b29a      	uxth	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003444:	b29b      	uxth	r3, r3
 8003446:	3b01      	subs	r3, #1
 8003448:	b29a      	uxth	r2, r3
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800344e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003450:	9300      	str	r3, [sp, #0]
 8003452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003454:	2200      	movs	r2, #0
 8003456:	494f      	ldr	r1, [pc, #316]	; (8003594 <HAL_I2C_Master_Receive+0x448>)
 8003458:	68f8      	ldr	r0, [r7, #12]
 800345a:	f002 f801 	bl	8005460 <I2C_WaitOnFlagUntilTimeout>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d001      	beq.n	8003468 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e091      	b.n	800358c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003476:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	691a      	ldr	r2, [r3, #16]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003482:	b2d2      	uxtb	r2, r2
 8003484:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348a:	1c5a      	adds	r2, r3, #1
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003494:	3b01      	subs	r3, #1
 8003496:	b29a      	uxth	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	3b01      	subs	r3, #1
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	691a      	ldr	r2, [r3, #16]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b4:	b2d2      	uxtb	r2, r2
 80034b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034bc:	1c5a      	adds	r2, r3, #1
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c6:	3b01      	subs	r3, #1
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	3b01      	subs	r3, #1
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034dc:	e042      	b.n	8003564 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80034e2:	68f8      	ldr	r0, [r7, #12]
 80034e4:	f002 f946 	bl	8005774 <I2C_WaitOnRXNEFlagUntilTimeout>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e04c      	b.n	800358c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	691a      	ldr	r2, [r3, #16]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fc:	b2d2      	uxtb	r2, r2
 80034fe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003504:	1c5a      	adds	r2, r3, #1
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800350e:	3b01      	subs	r3, #1
 8003510:	b29a      	uxth	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800351a:	b29b      	uxth	r3, r3
 800351c:	3b01      	subs	r3, #1
 800351e:	b29a      	uxth	r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	f003 0304 	and.w	r3, r3, #4
 800352e:	2b04      	cmp	r3, #4
 8003530:	d118      	bne.n	8003564 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	691a      	ldr	r2, [r3, #16]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353c:	b2d2      	uxtb	r2, r2
 800353e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003544:	1c5a      	adds	r2, r3, #1
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800354e:	3b01      	subs	r3, #1
 8003550:	b29a      	uxth	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800355a:	b29b      	uxth	r3, r3
 800355c:	3b01      	subs	r3, #1
 800355e:	b29a      	uxth	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003568:	2b00      	cmp	r3, #0
 800356a:	f47f aec2 	bne.w	80032f2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2220      	movs	r2, #32
 8003572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003586:	2300      	movs	r3, #0
 8003588:	e000      	b.n	800358c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800358a:	2302      	movs	r3, #2
  }
}
 800358c:	4618      	mov	r0, r3
 800358e:	3728      	adds	r7, #40	; 0x28
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	00010004 	.word	0x00010004

08003598 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b088      	sub	sp, #32
 800359c:	af02      	add	r7, sp, #8
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	4608      	mov	r0, r1
 80035a2:	4611      	mov	r1, r2
 80035a4:	461a      	mov	r2, r3
 80035a6:	4603      	mov	r3, r0
 80035a8:	817b      	strh	r3, [r7, #10]
 80035aa:	460b      	mov	r3, r1
 80035ac:	813b      	strh	r3, [r7, #8]
 80035ae:	4613      	mov	r3, r2
 80035b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035b2:	f7fe fffd 	bl	80025b0 <HAL_GetTick>
 80035b6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	2b20      	cmp	r3, #32
 80035c2:	f040 80d9 	bne.w	8003778 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	9300      	str	r3, [sp, #0]
 80035ca:	2319      	movs	r3, #25
 80035cc:	2201      	movs	r2, #1
 80035ce:	496d      	ldr	r1, [pc, #436]	; (8003784 <HAL_I2C_Mem_Write+0x1ec>)
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f001 ff45 	bl	8005460 <I2C_WaitOnFlagUntilTimeout>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d001      	beq.n	80035e0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80035dc:	2302      	movs	r3, #2
 80035de:	e0cc      	b.n	800377a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d101      	bne.n	80035ee <HAL_I2C_Mem_Write+0x56>
 80035ea:	2302      	movs	r3, #2
 80035ec:	e0c5      	b.n	800377a <HAL_I2C_Mem_Write+0x1e2>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	2b01      	cmp	r3, #1
 8003602:	d007      	beq.n	8003614 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f042 0201 	orr.w	r2, r2, #1
 8003612:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003622:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2221      	movs	r2, #33	; 0x21
 8003628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2240      	movs	r2, #64	; 0x40
 8003630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6a3a      	ldr	r2, [r7, #32]
 800363e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003644:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800364a:	b29a      	uxth	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	4a4d      	ldr	r2, [pc, #308]	; (8003788 <HAL_I2C_Mem_Write+0x1f0>)
 8003654:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003656:	88f8      	ldrh	r0, [r7, #6]
 8003658:	893a      	ldrh	r2, [r7, #8]
 800365a:	8979      	ldrh	r1, [r7, #10]
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	9301      	str	r3, [sp, #4]
 8003660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003662:	9300      	str	r3, [sp, #0]
 8003664:	4603      	mov	r3, r0
 8003666:	68f8      	ldr	r0, [r7, #12]
 8003668:	f001 fdbc 	bl	80051e4 <I2C_RequestMemoryWrite>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d052      	beq.n	8003718 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e081      	b.n	800377a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003676:	697a      	ldr	r2, [r7, #20]
 8003678:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800367a:	68f8      	ldr	r0, [r7, #12]
 800367c:	f001 ffc6 	bl	800560c <I2C_WaitOnTXEFlagUntilTimeout>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00d      	beq.n	80036a2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368a:	2b04      	cmp	r3, #4
 800368c:	d107      	bne.n	800369e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800369c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e06b      	b.n	800377a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a6:	781a      	ldrb	r2, [r3, #0]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b2:	1c5a      	adds	r2, r3, #1
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036bc:	3b01      	subs	r3, #1
 80036be:	b29a      	uxth	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	3b01      	subs	r3, #1
 80036cc:	b29a      	uxth	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	695b      	ldr	r3, [r3, #20]
 80036d8:	f003 0304 	and.w	r3, r3, #4
 80036dc:	2b04      	cmp	r3, #4
 80036de:	d11b      	bne.n	8003718 <HAL_I2C_Mem_Write+0x180>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d017      	beq.n	8003718 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ec:	781a      	ldrb	r2, [r3, #0]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f8:	1c5a      	adds	r2, r3, #1
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003702:	3b01      	subs	r3, #1
 8003704:	b29a      	uxth	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800370e:	b29b      	uxth	r3, r3
 8003710:	3b01      	subs	r3, #1
 8003712:	b29a      	uxth	r2, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800371c:	2b00      	cmp	r3, #0
 800371e:	d1aa      	bne.n	8003676 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003720:	697a      	ldr	r2, [r7, #20]
 8003722:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	f001 ffb2 	bl	800568e <I2C_WaitOnBTFFlagUntilTimeout>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00d      	beq.n	800374c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003734:	2b04      	cmp	r3, #4
 8003736:	d107      	bne.n	8003748 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003746:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e016      	b.n	800377a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800375a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2220      	movs	r2, #32
 8003760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003774:	2300      	movs	r3, #0
 8003776:	e000      	b.n	800377a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003778:	2302      	movs	r3, #2
  }
}
 800377a:	4618      	mov	r0, r3
 800377c:	3718      	adds	r7, #24
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	00100002 	.word	0x00100002
 8003788:	ffff0000 	.word	0xffff0000

0800378c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b088      	sub	sp, #32
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003794:	2300      	movs	r3, #0
 8003796:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037ac:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037b4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80037b6:	7bfb      	ldrb	r3, [r7, #15]
 80037b8:	2b10      	cmp	r3, #16
 80037ba:	d003      	beq.n	80037c4 <HAL_I2C_EV_IRQHandler+0x38>
 80037bc:	7bfb      	ldrb	r3, [r7, #15]
 80037be:	2b40      	cmp	r3, #64	; 0x40
 80037c0:	f040 80c1 	bne.w	8003946 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d10d      	bne.n	80037fa <HAL_I2C_EV_IRQHandler+0x6e>
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80037e4:	d003      	beq.n	80037ee <HAL_I2C_EV_IRQHandler+0x62>
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80037ec:	d101      	bne.n	80037f2 <HAL_I2C_EV_IRQHandler+0x66>
 80037ee:	2301      	movs	r3, #1
 80037f0:	e000      	b.n	80037f4 <HAL_I2C_EV_IRQHandler+0x68>
 80037f2:	2300      	movs	r3, #0
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	f000 8132 	beq.w	8003a5e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	f003 0301 	and.w	r3, r3, #1
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00c      	beq.n	800381e <HAL_I2C_EV_IRQHandler+0x92>
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	0a5b      	lsrs	r3, r3, #9
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	2b00      	cmp	r3, #0
 800380e:	d006      	beq.n	800381e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f002 f834 	bl	800587e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 fd79 	bl	800430e <I2C_Master_SB>
 800381c:	e092      	b.n	8003944 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	08db      	lsrs	r3, r3, #3
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b00      	cmp	r3, #0
 8003828:	d009      	beq.n	800383e <HAL_I2C_EV_IRQHandler+0xb2>
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	0a5b      	lsrs	r3, r3, #9
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	2b00      	cmp	r3, #0
 8003834:	d003      	beq.n	800383e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 fdef 	bl	800441a <I2C_Master_ADD10>
 800383c:	e082      	b.n	8003944 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	085b      	lsrs	r3, r3, #1
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	2b00      	cmp	r3, #0
 8003848:	d009      	beq.n	800385e <HAL_I2C_EV_IRQHandler+0xd2>
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	0a5b      	lsrs	r3, r3, #9
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b00      	cmp	r3, #0
 8003854:	d003      	beq.n	800385e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 fe09 	bl	800446e <I2C_Master_ADDR>
 800385c:	e072      	b.n	8003944 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	089b      	lsrs	r3, r3, #2
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b00      	cmp	r3, #0
 8003868:	d03b      	beq.n	80038e2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003874:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003878:	f000 80f3 	beq.w	8003a62 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	09db      	lsrs	r3, r3, #7
 8003880:	f003 0301 	and.w	r3, r3, #1
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00f      	beq.n	80038a8 <HAL_I2C_EV_IRQHandler+0x11c>
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	0a9b      	lsrs	r3, r3, #10
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	2b00      	cmp	r3, #0
 8003892:	d009      	beq.n	80038a8 <HAL_I2C_EV_IRQHandler+0x11c>
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	089b      	lsrs	r3, r3, #2
 8003898:	f003 0301 	and.w	r3, r3, #1
 800389c:	2b00      	cmp	r3, #0
 800389e:	d103      	bne.n	80038a8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 f9f3 	bl	8003c8c <I2C_MasterTransmit_TXE>
 80038a6:	e04d      	b.n	8003944 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	089b      	lsrs	r3, r3, #2
 80038ac:	f003 0301 	and.w	r3, r3, #1
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f000 80d6 	beq.w	8003a62 <HAL_I2C_EV_IRQHandler+0x2d6>
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	0a5b      	lsrs	r3, r3, #9
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	2b00      	cmp	r3, #0
 80038c0:	f000 80cf 	beq.w	8003a62 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80038c4:	7bbb      	ldrb	r3, [r7, #14]
 80038c6:	2b21      	cmp	r3, #33	; 0x21
 80038c8:	d103      	bne.n	80038d2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 fa7a 	bl	8003dc4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038d0:	e0c7      	b.n	8003a62 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80038d2:	7bfb      	ldrb	r3, [r7, #15]
 80038d4:	2b40      	cmp	r3, #64	; 0x40
 80038d6:	f040 80c4 	bne.w	8003a62 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 fae8 	bl	8003eb0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038e0:	e0bf      	b.n	8003a62 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038f0:	f000 80b7 	beq.w	8003a62 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	099b      	lsrs	r3, r3, #6
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00f      	beq.n	8003920 <HAL_I2C_EV_IRQHandler+0x194>
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	0a9b      	lsrs	r3, r3, #10
 8003904:	f003 0301 	and.w	r3, r3, #1
 8003908:	2b00      	cmp	r3, #0
 800390a:	d009      	beq.n	8003920 <HAL_I2C_EV_IRQHandler+0x194>
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	089b      	lsrs	r3, r3, #2
 8003910:	f003 0301 	and.w	r3, r3, #1
 8003914:	2b00      	cmp	r3, #0
 8003916:	d103      	bne.n	8003920 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 fb5d 	bl	8003fd8 <I2C_MasterReceive_RXNE>
 800391e:	e011      	b.n	8003944 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	089b      	lsrs	r3, r3, #2
 8003924:	f003 0301 	and.w	r3, r3, #1
 8003928:	2b00      	cmp	r3, #0
 800392a:	f000 809a 	beq.w	8003a62 <HAL_I2C_EV_IRQHandler+0x2d6>
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	0a5b      	lsrs	r3, r3, #9
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b00      	cmp	r3, #0
 8003938:	f000 8093 	beq.w	8003a62 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 fbfc 	bl	800413a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003942:	e08e      	b.n	8003a62 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003944:	e08d      	b.n	8003a62 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394a:	2b00      	cmp	r3, #0
 800394c:	d004      	beq.n	8003958 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	695b      	ldr	r3, [r3, #20]
 8003954:	61fb      	str	r3, [r7, #28]
 8003956:	e007      	b.n	8003968 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	085b      	lsrs	r3, r3, #1
 800396c:	f003 0301 	and.w	r3, r3, #1
 8003970:	2b00      	cmp	r3, #0
 8003972:	d012      	beq.n	800399a <HAL_I2C_EV_IRQHandler+0x20e>
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	0a5b      	lsrs	r3, r3, #9
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00c      	beq.n	800399a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003984:	2b00      	cmp	r3, #0
 8003986:	d003      	beq.n	8003990 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003990:	69b9      	ldr	r1, [r7, #24]
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 ffba 	bl	800490c <I2C_Slave_ADDR>
 8003998:	e066      	b.n	8003a68 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	091b      	lsrs	r3, r3, #4
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d009      	beq.n	80039ba <HAL_I2C_EV_IRQHandler+0x22e>
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	0a5b      	lsrs	r3, r3, #9
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d003      	beq.n	80039ba <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 fff4 	bl	80049a0 <I2C_Slave_STOPF>
 80039b8:	e056      	b.n	8003a68 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80039ba:	7bbb      	ldrb	r3, [r7, #14]
 80039bc:	2b21      	cmp	r3, #33	; 0x21
 80039be:	d002      	beq.n	80039c6 <HAL_I2C_EV_IRQHandler+0x23a>
 80039c0:	7bbb      	ldrb	r3, [r7, #14]
 80039c2:	2b29      	cmp	r3, #41	; 0x29
 80039c4:	d125      	bne.n	8003a12 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	09db      	lsrs	r3, r3, #7
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00f      	beq.n	80039f2 <HAL_I2C_EV_IRQHandler+0x266>
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	0a9b      	lsrs	r3, r3, #10
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d009      	beq.n	80039f2 <HAL_I2C_EV_IRQHandler+0x266>
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	089b      	lsrs	r3, r3, #2
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d103      	bne.n	80039f2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 fed0 	bl	8004790 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80039f0:	e039      	b.n	8003a66 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	089b      	lsrs	r3, r3, #2
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d033      	beq.n	8003a66 <HAL_I2C_EV_IRQHandler+0x2da>
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	0a5b      	lsrs	r3, r3, #9
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d02d      	beq.n	8003a66 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 fefd 	bl	800480a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a10:	e029      	b.n	8003a66 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	099b      	lsrs	r3, r3, #6
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00f      	beq.n	8003a3e <HAL_I2C_EV_IRQHandler+0x2b2>
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	0a9b      	lsrs	r3, r3, #10
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d009      	beq.n	8003a3e <HAL_I2C_EV_IRQHandler+0x2b2>
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	089b      	lsrs	r3, r3, #2
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d103      	bne.n	8003a3e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 ff08 	bl	800484c <I2C_SlaveReceive_RXNE>
 8003a3c:	e014      	b.n	8003a68 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	089b      	lsrs	r3, r3, #2
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00e      	beq.n	8003a68 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	0a5b      	lsrs	r3, r3, #9
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d008      	beq.n	8003a68 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 ff36 	bl	80048c8 <I2C_SlaveReceive_BTF>
 8003a5c:	e004      	b.n	8003a68 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003a5e:	bf00      	nop
 8003a60:	e002      	b.n	8003a68 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a62:	bf00      	nop
 8003a64:	e000      	b.n	8003a68 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a66:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003a68:	3720      	adds	r7, #32
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b08a      	sub	sp, #40	; 0x28
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	695b      	ldr	r3, [r3, #20]
 8003a7c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003a86:	2300      	movs	r3, #0
 8003a88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a90:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003a92:	6a3b      	ldr	r3, [r7, #32]
 8003a94:	0a1b      	lsrs	r3, r3, #8
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00e      	beq.n	8003abc <HAL_I2C_ER_IRQHandler+0x4e>
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	0a1b      	lsrs	r3, r3, #8
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d008      	beq.n	8003abc <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aac:	f043 0301 	orr.w	r3, r3, #1
 8003ab0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003aba:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003abc:	6a3b      	ldr	r3, [r7, #32]
 8003abe:	0a5b      	lsrs	r3, r3, #9
 8003ac0:	f003 0301 	and.w	r3, r3, #1
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00e      	beq.n	8003ae6 <HAL_I2C_ER_IRQHandler+0x78>
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	0a1b      	lsrs	r3, r3, #8
 8003acc:	f003 0301 	and.w	r3, r3, #1
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d008      	beq.n	8003ae6 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad6:	f043 0302 	orr.w	r3, r3, #2
 8003ada:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003ae4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003ae6:	6a3b      	ldr	r3, [r7, #32]
 8003ae8:	0a9b      	lsrs	r3, r3, #10
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d03f      	beq.n	8003b72 <HAL_I2C_ER_IRQHandler+0x104>
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	0a1b      	lsrs	r3, r3, #8
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d039      	beq.n	8003b72 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8003afe:	7efb      	ldrb	r3, [r7, #27]
 8003b00:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b10:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b16:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003b18:	7ebb      	ldrb	r3, [r7, #26]
 8003b1a:	2b20      	cmp	r3, #32
 8003b1c:	d112      	bne.n	8003b44 <HAL_I2C_ER_IRQHandler+0xd6>
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d10f      	bne.n	8003b44 <HAL_I2C_ER_IRQHandler+0xd6>
 8003b24:	7cfb      	ldrb	r3, [r7, #19]
 8003b26:	2b21      	cmp	r3, #33	; 0x21
 8003b28:	d008      	beq.n	8003b3c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003b2a:	7cfb      	ldrb	r3, [r7, #19]
 8003b2c:	2b29      	cmp	r3, #41	; 0x29
 8003b2e:	d005      	beq.n	8003b3c <HAL_I2C_ER_IRQHandler+0xce>
 8003b30:	7cfb      	ldrb	r3, [r7, #19]
 8003b32:	2b28      	cmp	r3, #40	; 0x28
 8003b34:	d106      	bne.n	8003b44 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2b21      	cmp	r3, #33	; 0x21
 8003b3a:	d103      	bne.n	8003b44 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f001 f85f 	bl	8004c00 <I2C_Slave_AF>
 8003b42:	e016      	b.n	8003b72 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b4c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b50:	f043 0304 	orr.w	r3, r3, #4
 8003b54:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003b56:	7efb      	ldrb	r3, [r7, #27]
 8003b58:	2b10      	cmp	r3, #16
 8003b5a:	d002      	beq.n	8003b62 <HAL_I2C_ER_IRQHandler+0xf4>
 8003b5c:	7efb      	ldrb	r3, [r7, #27]
 8003b5e:	2b40      	cmp	r3, #64	; 0x40
 8003b60:	d107      	bne.n	8003b72 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b70:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003b72:	6a3b      	ldr	r3, [r7, #32]
 8003b74:	0adb      	lsrs	r3, r3, #11
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00e      	beq.n	8003b9c <HAL_I2C_ER_IRQHandler+0x12e>
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	0a1b      	lsrs	r3, r3, #8
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d008      	beq.n	8003b9c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8c:	f043 0308 	orr.w	r3, r3, #8
 8003b90:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003b9a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d008      	beq.n	8003bb4 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba8:	431a      	orrs	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f001 f896 	bl	8004ce0 <I2C_ITError>
  }
}
 8003bb4:	bf00      	nop
 8003bb6:	3728      	adds	r7, #40	; 0x28
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003c00:	bf00      	nop
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	460b      	mov	r3, r1
 8003c16:	70fb      	strb	r3, [r7, #3]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003c58:	bf00      	nop
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003c6c:	bf00      	nop
 8003c6e:	370c      	adds	r7, #12
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003c80:	bf00      	nop
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c9a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ca2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d150      	bne.n	8003d54 <I2C_MasterTransmit_TXE+0xc8>
 8003cb2:	7bfb      	ldrb	r3, [r7, #15]
 8003cb4:	2b21      	cmp	r3, #33	; 0x21
 8003cb6:	d14d      	bne.n	8003d54 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	2b08      	cmp	r3, #8
 8003cbc:	d01d      	beq.n	8003cfa <I2C_MasterTransmit_TXE+0x6e>
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	2b20      	cmp	r3, #32
 8003cc2:	d01a      	beq.n	8003cfa <I2C_MasterTransmit_TXE+0x6e>
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003cca:	d016      	beq.n	8003cfa <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	685a      	ldr	r2, [r3, #4]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003cda:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2211      	movs	r2, #17
 8003ce0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2220      	movs	r2, #32
 8003cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f7ff ff62 	bl	8003bbc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003cf8:	e060      	b.n	8003dbc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	685a      	ldr	r2, [r3, #4]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d08:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d18:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2220      	movs	r2, #32
 8003d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	2b40      	cmp	r3, #64	; 0x40
 8003d32:	d107      	bne.n	8003d44 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f7ff ff7d 	bl	8003c3c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003d42:	e03b      	b.n	8003dbc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f7ff ff35 	bl	8003bbc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003d52:	e033      	b.n	8003dbc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003d54:	7bfb      	ldrb	r3, [r7, #15]
 8003d56:	2b21      	cmp	r3, #33	; 0x21
 8003d58:	d005      	beq.n	8003d66 <I2C_MasterTransmit_TXE+0xda>
 8003d5a:	7bbb      	ldrb	r3, [r7, #14]
 8003d5c:	2b40      	cmp	r3, #64	; 0x40
 8003d5e:	d12d      	bne.n	8003dbc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003d60:	7bfb      	ldrb	r3, [r7, #15]
 8003d62:	2b22      	cmp	r3, #34	; 0x22
 8003d64:	d12a      	bne.n	8003dbc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d108      	bne.n	8003d82 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	685a      	ldr	r2, [r3, #4]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d7e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003d80:	e01c      	b.n	8003dbc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b40      	cmp	r3, #64	; 0x40
 8003d8c:	d103      	bne.n	8003d96 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 f88e 	bl	8003eb0 <I2C_MemoryTransmit_TXE_BTF>
}
 8003d94:	e012      	b.n	8003dbc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9a:	781a      	ldrb	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da6:	1c5a      	adds	r2, r3, #1
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	3b01      	subs	r3, #1
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003dba:	e7ff      	b.n	8003dbc <I2C_MasterTransmit_TXE+0x130>
 8003dbc:	bf00      	nop
 8003dbe:	3710      	adds	r7, #16
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b21      	cmp	r3, #33	; 0x21
 8003ddc:	d164      	bne.n	8003ea8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d012      	beq.n	8003e0e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dec:	781a      	ldrb	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df8:	1c5a      	adds	r2, r3, #1
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	3b01      	subs	r3, #1
 8003e06:	b29a      	uxth	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003e0c:	e04c      	b.n	8003ea8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2b08      	cmp	r3, #8
 8003e12:	d01d      	beq.n	8003e50 <I2C_MasterTransmit_BTF+0x8c>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2b20      	cmp	r3, #32
 8003e18:	d01a      	beq.n	8003e50 <I2C_MasterTransmit_BTF+0x8c>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e20:	d016      	beq.n	8003e50 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	685a      	ldr	r2, [r3, #4]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e30:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2211      	movs	r2, #17
 8003e36:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2220      	movs	r2, #32
 8003e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f7ff feb7 	bl	8003bbc <HAL_I2C_MasterTxCpltCallback>
}
 8003e4e:	e02b      	b.n	8003ea8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	685a      	ldr	r2, [r3, #4]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e5e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e6e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2220      	movs	r2, #32
 8003e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b40      	cmp	r3, #64	; 0x40
 8003e88:	d107      	bne.n	8003e9a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f7ff fed2 	bl	8003c3c <HAL_I2C_MemTxCpltCallback>
}
 8003e98:	e006      	b.n	8003ea8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f7ff fe8a 	bl	8003bbc <HAL_I2C_MasterTxCpltCallback>
}
 8003ea8:	bf00      	nop
 8003eaa:	3710      	adds	r7, #16
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ebe:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d11d      	bne.n	8003f04 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d10b      	bne.n	8003ee8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ed4:	b2da      	uxtb	r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ee0:	1c9a      	adds	r2, r3, #2
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003ee6:	e073      	b.n	8003fd0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	121b      	asrs	r3, r3, #8
 8003ef0:	b2da      	uxtb	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003efc:	1c5a      	adds	r2, r3, #1
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003f02:	e065      	b.n	8003fd0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d10b      	bne.n	8003f24 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f10:	b2da      	uxtb	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f1c:	1c5a      	adds	r2, r3, #1
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003f22:	e055      	b.n	8003fd0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d151      	bne.n	8003fd0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003f2c:	7bfb      	ldrb	r3, [r7, #15]
 8003f2e:	2b22      	cmp	r3, #34	; 0x22
 8003f30:	d10d      	bne.n	8003f4e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f40:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f46:	1c5a      	adds	r2, r3, #1
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003f4c:	e040      	b.n	8003fd0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d015      	beq.n	8003f84 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003f58:	7bfb      	ldrb	r3, [r7, #15]
 8003f5a:	2b21      	cmp	r3, #33	; 0x21
 8003f5c:	d112      	bne.n	8003f84 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f62:	781a      	ldrb	r2, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6e:	1c5a      	adds	r2, r3, #1
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003f82:	e025      	b.n	8003fd0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d120      	bne.n	8003fd0 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003f8e:	7bfb      	ldrb	r3, [r7, #15]
 8003f90:	2b21      	cmp	r3, #33	; 0x21
 8003f92:	d11d      	bne.n	8003fd0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	685a      	ldr	r2, [r3, #4]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003fa2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fb2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2220      	movs	r2, #32
 8003fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f7ff fe36 	bl	8003c3c <HAL_I2C_MemTxCpltCallback>
}
 8003fd0:	bf00      	nop
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	2b22      	cmp	r3, #34	; 0x22
 8003fea:	f040 80a2 	bne.w	8004132 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2b03      	cmp	r3, #3
 8003ffa:	d921      	bls.n	8004040 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	691a      	ldr	r2, [r3, #16]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004006:	b2d2      	uxtb	r2, r2
 8004008:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400e:	1c5a      	adds	r2, r3, #1
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004018:	b29b      	uxth	r3, r3
 800401a:	3b01      	subs	r3, #1
 800401c:	b29a      	uxth	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004026:	b29b      	uxth	r3, r3
 8004028:	2b03      	cmp	r3, #3
 800402a:	f040 8082 	bne.w	8004132 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	685a      	ldr	r2, [r3, #4]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800403c:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800403e:	e078      	b.n	8004132 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004044:	2b02      	cmp	r3, #2
 8004046:	d074      	beq.n	8004132 <I2C_MasterReceive_RXNE+0x15a>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2b01      	cmp	r3, #1
 800404c:	d002      	beq.n	8004054 <I2C_MasterReceive_RXNE+0x7c>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d16e      	bne.n	8004132 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f001 fb5b 	bl	8005710 <I2C_WaitOnSTOPRequestThroughIT>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d142      	bne.n	80040e6 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800406e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	685a      	ldr	r2, [r3, #4]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800407e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	691a      	ldr	r2, [r3, #16]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408a:	b2d2      	uxtb	r2, r2
 800408c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004092:	1c5a      	adds	r2, r3, #1
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800409c:	b29b      	uxth	r3, r3
 800409e:	3b01      	subs	r3, #1
 80040a0:	b29a      	uxth	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2220      	movs	r2, #32
 80040aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	2b40      	cmp	r3, #64	; 0x40
 80040b8:	d10a      	bne.n	80040d0 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f7ff fdc1 	bl	8003c50 <HAL_I2C_MemRxCpltCallback>
}
 80040ce:	e030      	b.n	8004132 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2212      	movs	r2, #18
 80040dc:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f7ff fd76 	bl	8003bd0 <HAL_I2C_MasterRxCpltCallback>
}
 80040e4:	e025      	b.n	8004132 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	685a      	ldr	r2, [r3, #4]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80040f4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	691a      	ldr	r2, [r3, #16]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004100:	b2d2      	uxtb	r2, r2
 8004102:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004108:	1c5a      	adds	r2, r3, #1
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004112:	b29b      	uxth	r3, r3
 8004114:	3b01      	subs	r3, #1
 8004116:	b29a      	uxth	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2220      	movs	r2, #32
 8004120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f7ff fd99 	bl	8003c64 <HAL_I2C_ErrorCallback>
}
 8004132:	bf00      	nop
 8004134:	3710      	adds	r7, #16
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}

0800413a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800413a:	b580      	push	{r7, lr}
 800413c:	b084      	sub	sp, #16
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004146:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800414c:	b29b      	uxth	r3, r3
 800414e:	2b04      	cmp	r3, #4
 8004150:	d11b      	bne.n	800418a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	685a      	ldr	r2, [r3, #4]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004160:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	691a      	ldr	r2, [r3, #16]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416c:	b2d2      	uxtb	r2, r2
 800416e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004174:	1c5a      	adds	r2, r3, #1
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800417e:	b29b      	uxth	r3, r3
 8004180:	3b01      	subs	r3, #1
 8004182:	b29a      	uxth	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004188:	e0bd      	b.n	8004306 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800418e:	b29b      	uxth	r3, r3
 8004190:	2b03      	cmp	r3, #3
 8004192:	d129      	bne.n	80041e8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	685a      	ldr	r2, [r3, #4]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041a2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2b04      	cmp	r3, #4
 80041a8:	d00a      	beq.n	80041c0 <I2C_MasterReceive_BTF+0x86>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d007      	beq.n	80041c0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041be:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	691a      	ldr	r2, [r3, #16]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ca:	b2d2      	uxtb	r2, r2
 80041cc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d2:	1c5a      	adds	r2, r3, #1
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041dc:	b29b      	uxth	r3, r3
 80041de:	3b01      	subs	r3, #1
 80041e0:	b29a      	uxth	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80041e6:	e08e      	b.n	8004306 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d176      	bne.n	80042e0 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d002      	beq.n	80041fe <I2C_MasterReceive_BTF+0xc4>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2b10      	cmp	r3, #16
 80041fc:	d108      	bne.n	8004210 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800420c:	601a      	str	r2, [r3, #0]
 800420e:	e019      	b.n	8004244 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2b04      	cmp	r3, #4
 8004214:	d002      	beq.n	800421c <I2C_MasterReceive_BTF+0xe2>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2b02      	cmp	r3, #2
 800421a:	d108      	bne.n	800422e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800422a:	601a      	str	r2, [r3, #0]
 800422c:	e00a      	b.n	8004244 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2b10      	cmp	r3, #16
 8004232:	d007      	beq.n	8004244 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004242:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	691a      	ldr	r2, [r3, #16]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424e:	b2d2      	uxtb	r2, r2
 8004250:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004256:	1c5a      	adds	r2, r3, #1
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004260:	b29b      	uxth	r3, r3
 8004262:	3b01      	subs	r3, #1
 8004264:	b29a      	uxth	r2, r3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	691a      	ldr	r2, [r3, #16]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004274:	b2d2      	uxtb	r2, r2
 8004276:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427c:	1c5a      	adds	r2, r3, #1
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004286:	b29b      	uxth	r3, r3
 8004288:	3b01      	subs	r3, #1
 800428a:	b29a      	uxth	r2, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	685a      	ldr	r2, [r3, #4]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800429e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2220      	movs	r2, #32
 80042a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	2b40      	cmp	r3, #64	; 0x40
 80042b2:	d10a      	bne.n	80042ca <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f7ff fcc4 	bl	8003c50 <HAL_I2C_MemRxCpltCallback>
}
 80042c8:	e01d      	b.n	8004306 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2212      	movs	r2, #18
 80042d6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f7ff fc79 	bl	8003bd0 <HAL_I2C_MasterRxCpltCallback>
}
 80042de:	e012      	b.n	8004306 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	691a      	ldr	r2, [r3, #16]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ea:	b2d2      	uxtb	r2, r2
 80042ec:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f2:	1c5a      	adds	r2, r3, #1
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	3b01      	subs	r3, #1
 8004300:	b29a      	uxth	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004306:	bf00      	nop
 8004308:	3710      	adds	r7, #16
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}

0800430e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800430e:	b480      	push	{r7}
 8004310:	b083      	sub	sp, #12
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b40      	cmp	r3, #64	; 0x40
 8004320:	d117      	bne.n	8004352 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004326:	2b00      	cmp	r3, #0
 8004328:	d109      	bne.n	800433e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800432e:	b2db      	uxtb	r3, r3
 8004330:	461a      	mov	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800433a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800433c:	e067      	b.n	800440e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004342:	b2db      	uxtb	r3, r3
 8004344:	f043 0301 	orr.w	r3, r3, #1
 8004348:	b2da      	uxtb	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	611a      	str	r2, [r3, #16]
}
 8004350:	e05d      	b.n	800440e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800435a:	d133      	bne.n	80043c4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004362:	b2db      	uxtb	r3, r3
 8004364:	2b21      	cmp	r3, #33	; 0x21
 8004366:	d109      	bne.n	800437c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436c:	b2db      	uxtb	r3, r3
 800436e:	461a      	mov	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004378:	611a      	str	r2, [r3, #16]
 800437a:	e008      	b.n	800438e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004380:	b2db      	uxtb	r3, r3
 8004382:	f043 0301 	orr.w	r3, r3, #1
 8004386:	b2da      	uxtb	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004392:	2b00      	cmp	r3, #0
 8004394:	d004      	beq.n	80043a0 <I2C_Master_SB+0x92>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800439a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800439c:	2b00      	cmp	r3, #0
 800439e:	d108      	bne.n	80043b2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d032      	beq.n	800440e <I2C_Master_SB+0x100>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d02d      	beq.n	800440e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	685a      	ldr	r2, [r3, #4]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043c0:	605a      	str	r2, [r3, #4]
}
 80043c2:	e024      	b.n	800440e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d10e      	bne.n	80043ea <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	11db      	asrs	r3, r3, #7
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	f003 0306 	and.w	r3, r3, #6
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	f063 030f 	orn	r3, r3, #15
 80043e0:	b2da      	uxtb	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	611a      	str	r2, [r3, #16]
}
 80043e8:	e011      	b.n	800440e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d10d      	bne.n	800440e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	11db      	asrs	r3, r3, #7
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	f003 0306 	and.w	r3, r3, #6
 8004400:	b2db      	uxtb	r3, r3
 8004402:	f063 030e 	orn	r3, r3, #14
 8004406:	b2da      	uxtb	r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	611a      	str	r2, [r3, #16]
}
 800440e:	bf00      	nop
 8004410:	370c      	adds	r7, #12
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr

0800441a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800441a:	b480      	push	{r7}
 800441c:	b083      	sub	sp, #12
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004426:	b2da      	uxtb	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004432:	2b00      	cmp	r3, #0
 8004434:	d004      	beq.n	8004440 <I2C_Master_ADD10+0x26>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800443a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800443c:	2b00      	cmp	r3, #0
 800443e:	d108      	bne.n	8004452 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00c      	beq.n	8004462 <I2C_Master_ADD10+0x48>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800444e:	2b00      	cmp	r3, #0
 8004450:	d007      	beq.n	8004462 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	685a      	ldr	r2, [r3, #4]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004460:	605a      	str	r2, [r3, #4]
  }
}
 8004462:	bf00      	nop
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr

0800446e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800446e:	b480      	push	{r7}
 8004470:	b091      	sub	sp, #68	; 0x44
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800447c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004484:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004492:	b2db      	uxtb	r3, r3
 8004494:	2b22      	cmp	r3, #34	; 0x22
 8004496:	f040 8169 	bne.w	800476c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d10f      	bne.n	80044c2 <I2C_Master_ADDR+0x54>
 80044a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80044a6:	2b40      	cmp	r3, #64	; 0x40
 80044a8:	d10b      	bne.n	80044c2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044aa:	2300      	movs	r3, #0
 80044ac:	633b      	str	r3, [r7, #48]	; 0x30
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	695b      	ldr	r3, [r3, #20]
 80044b4:	633b      	str	r3, [r7, #48]	; 0x30
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	633b      	str	r3, [r7, #48]	; 0x30
 80044be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c0:	e160      	b.n	8004784 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d11d      	bne.n	8004506 <I2C_Master_ADDR+0x98>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80044d2:	d118      	bne.n	8004506 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044d4:	2300      	movs	r3, #0
 80044d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044f8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044fe:	1c5a      	adds	r2, r3, #1
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	651a      	str	r2, [r3, #80]	; 0x50
 8004504:	e13e      	b.n	8004784 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800450a:	b29b      	uxth	r3, r3
 800450c:	2b00      	cmp	r3, #0
 800450e:	d113      	bne.n	8004538 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004510:	2300      	movs	r3, #0
 8004512:	62bb      	str	r3, [r7, #40]	; 0x28
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	62bb      	str	r3, [r7, #40]	; 0x28
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	62bb      	str	r3, [r7, #40]	; 0x28
 8004524:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004534:	601a      	str	r2, [r3, #0]
 8004536:	e115      	b.n	8004764 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800453c:	b29b      	uxth	r3, r3
 800453e:	2b01      	cmp	r3, #1
 8004540:	f040 808a 	bne.w	8004658 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004546:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800454a:	d137      	bne.n	80045bc <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800455a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004566:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800456a:	d113      	bne.n	8004594 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800457a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800457c:	2300      	movs	r3, #0
 800457e:	627b      	str	r3, [r7, #36]	; 0x24
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	627b      	str	r3, [r7, #36]	; 0x24
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	627b      	str	r3, [r7, #36]	; 0x24
 8004590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004592:	e0e7      	b.n	8004764 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004594:	2300      	movs	r3, #0
 8004596:	623b      	str	r3, [r7, #32]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	623b      	str	r3, [r7, #32]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	623b      	str	r3, [r7, #32]
 80045a8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045b8:	601a      	str	r2, [r3, #0]
 80045ba:	e0d3      	b.n	8004764 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80045bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045be:	2b08      	cmp	r3, #8
 80045c0:	d02e      	beq.n	8004620 <I2C_Master_ADDR+0x1b2>
 80045c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c4:	2b20      	cmp	r3, #32
 80045c6:	d02b      	beq.n	8004620 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80045c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ca:	2b12      	cmp	r3, #18
 80045cc:	d102      	bne.n	80045d4 <I2C_Master_ADDR+0x166>
 80045ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d125      	bne.n	8004620 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80045d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045d6:	2b04      	cmp	r3, #4
 80045d8:	d00e      	beq.n	80045f8 <I2C_Master_ADDR+0x18a>
 80045da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d00b      	beq.n	80045f8 <I2C_Master_ADDR+0x18a>
 80045e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045e2:	2b10      	cmp	r3, #16
 80045e4:	d008      	beq.n	80045f8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045f4:	601a      	str	r2, [r3, #0]
 80045f6:	e007      	b.n	8004608 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004606:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004608:	2300      	movs	r3, #0
 800460a:	61fb      	str	r3, [r7, #28]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	61fb      	str	r3, [r7, #28]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	61fb      	str	r3, [r7, #28]
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	e0a1      	b.n	8004764 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800462e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004630:	2300      	movs	r3, #0
 8004632:	61bb      	str	r3, [r7, #24]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	695b      	ldr	r3, [r3, #20]
 800463a:	61bb      	str	r3, [r7, #24]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	61bb      	str	r3, [r7, #24]
 8004644:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004654:	601a      	str	r2, [r3, #0]
 8004656:	e085      	b.n	8004764 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800465c:	b29b      	uxth	r3, r3
 800465e:	2b02      	cmp	r3, #2
 8004660:	d14d      	bne.n	80046fe <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004664:	2b04      	cmp	r3, #4
 8004666:	d016      	beq.n	8004696 <I2C_Master_ADDR+0x228>
 8004668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800466a:	2b02      	cmp	r3, #2
 800466c:	d013      	beq.n	8004696 <I2C_Master_ADDR+0x228>
 800466e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004670:	2b10      	cmp	r3, #16
 8004672:	d010      	beq.n	8004696 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004682:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004692:	601a      	str	r2, [r3, #0]
 8004694:	e007      	b.n	80046a6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80046a4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046b4:	d117      	bne.n	80046e6 <I2C_Master_ADDR+0x278>
 80046b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80046bc:	d00b      	beq.n	80046d6 <I2C_Master_ADDR+0x268>
 80046be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d008      	beq.n	80046d6 <I2C_Master_ADDR+0x268>
 80046c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046c6:	2b08      	cmp	r3, #8
 80046c8:	d005      	beq.n	80046d6 <I2C_Master_ADDR+0x268>
 80046ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046cc:	2b10      	cmp	r3, #16
 80046ce:	d002      	beq.n	80046d6 <I2C_Master_ADDR+0x268>
 80046d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046d2:	2b20      	cmp	r3, #32
 80046d4:	d107      	bne.n	80046e6 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	685a      	ldr	r2, [r3, #4]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80046e4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046e6:	2300      	movs	r3, #0
 80046e8:	617b      	str	r3, [r7, #20]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	695b      	ldr	r3, [r3, #20]
 80046f0:	617b      	str	r3, [r7, #20]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	699b      	ldr	r3, [r3, #24]
 80046f8:	617b      	str	r3, [r7, #20]
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	e032      	b.n	8004764 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800470c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004718:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800471c:	d117      	bne.n	800474e <I2C_Master_ADDR+0x2e0>
 800471e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004720:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004724:	d00b      	beq.n	800473e <I2C_Master_ADDR+0x2d0>
 8004726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004728:	2b01      	cmp	r3, #1
 800472a:	d008      	beq.n	800473e <I2C_Master_ADDR+0x2d0>
 800472c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800472e:	2b08      	cmp	r3, #8
 8004730:	d005      	beq.n	800473e <I2C_Master_ADDR+0x2d0>
 8004732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004734:	2b10      	cmp	r3, #16
 8004736:	d002      	beq.n	800473e <I2C_Master_ADDR+0x2d0>
 8004738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800473a:	2b20      	cmp	r3, #32
 800473c:	d107      	bne.n	800474e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800474c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800474e:	2300      	movs	r3, #0
 8004750:	613b      	str	r3, [r7, #16]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	695b      	ldr	r3, [r3, #20]
 8004758:	613b      	str	r3, [r7, #16]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	699b      	ldr	r3, [r3, #24]
 8004760:	613b      	str	r3, [r7, #16]
 8004762:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800476a:	e00b      	b.n	8004784 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800476c:	2300      	movs	r3, #0
 800476e:	60fb      	str	r3, [r7, #12]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	60fb      	str	r3, [r7, #12]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	699b      	ldr	r3, [r3, #24]
 800477e:	60fb      	str	r3, [r7, #12]
 8004780:	68fb      	ldr	r3, [r7, #12]
}
 8004782:	e7ff      	b.n	8004784 <I2C_Master_ADDR+0x316>
 8004784:	bf00      	nop
 8004786:	3744      	adds	r7, #68	; 0x44
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800479e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d02b      	beq.n	8004802 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ae:	781a      	ldrb	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ba:	1c5a      	adds	r2, r3, #1
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	3b01      	subs	r3, #1
 80047c8:	b29a      	uxth	r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d114      	bne.n	8004802 <I2C_SlaveTransmit_TXE+0x72>
 80047d8:	7bfb      	ldrb	r3, [r7, #15]
 80047da:	2b29      	cmp	r3, #41	; 0x29
 80047dc:	d111      	bne.n	8004802 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	685a      	ldr	r2, [r3, #4]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047ec:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2221      	movs	r2, #33	; 0x21
 80047f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2228      	movs	r2, #40	; 0x28
 80047f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f7ff f9f1 	bl	8003be4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004802:	bf00      	nop
 8004804:	3710      	adds	r7, #16
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}

0800480a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800480a:	b480      	push	{r7}
 800480c:	b083      	sub	sp, #12
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004816:	b29b      	uxth	r3, r3
 8004818:	2b00      	cmp	r3, #0
 800481a:	d011      	beq.n	8004840 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004820:	781a      	ldrb	r2, [r3, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482c:	1c5a      	adds	r2, r3, #1
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004836:	b29b      	uxth	r3, r3
 8004838:	3b01      	subs	r3, #1
 800483a:	b29a      	uxth	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800485a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004860:	b29b      	uxth	r3, r3
 8004862:	2b00      	cmp	r3, #0
 8004864:	d02c      	beq.n	80048c0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	691a      	ldr	r2, [r3, #16]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004870:	b2d2      	uxtb	r2, r2
 8004872:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004878:	1c5a      	adds	r2, r3, #1
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004882:	b29b      	uxth	r3, r3
 8004884:	3b01      	subs	r3, #1
 8004886:	b29a      	uxth	r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004890:	b29b      	uxth	r3, r3
 8004892:	2b00      	cmp	r3, #0
 8004894:	d114      	bne.n	80048c0 <I2C_SlaveReceive_RXNE+0x74>
 8004896:	7bfb      	ldrb	r3, [r7, #15]
 8004898:	2b2a      	cmp	r3, #42	; 0x2a
 800489a:	d111      	bne.n	80048c0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	685a      	ldr	r2, [r3, #4]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048aa:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2222      	movs	r2, #34	; 0x22
 80048b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2228      	movs	r2, #40	; 0x28
 80048b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f7ff f99c 	bl	8003bf8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80048c0:	bf00      	nop
 80048c2:	3710      	adds	r7, #16
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d012      	beq.n	8004900 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	691a      	ldr	r2, [r3, #16]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e4:	b2d2      	uxtb	r2, r2
 80048e6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ec:	1c5a      	adds	r2, r3, #1
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	3b01      	subs	r3, #1
 80048fa:	b29a      	uxth	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004900:	bf00      	nop
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004916:	2300      	movs	r3, #0
 8004918:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004920:	b2db      	uxtb	r3, r3
 8004922:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004926:	2b28      	cmp	r3, #40	; 0x28
 8004928:	d127      	bne.n	800497a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	685a      	ldr	r2, [r3, #4]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004938:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	089b      	lsrs	r3, r3, #2
 800493e:	f003 0301 	and.w	r3, r3, #1
 8004942:	2b00      	cmp	r3, #0
 8004944:	d101      	bne.n	800494a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004946:	2301      	movs	r3, #1
 8004948:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	09db      	lsrs	r3, r3, #7
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	2b00      	cmp	r3, #0
 8004954:	d103      	bne.n	800495e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	81bb      	strh	r3, [r7, #12]
 800495c:	e002      	b.n	8004964 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800496c:	89ba      	ldrh	r2, [r7, #12]
 800496e:	7bfb      	ldrb	r3, [r7, #15]
 8004970:	4619      	mov	r1, r3
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f7ff f94a 	bl	8003c0c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004978:	e00e      	b.n	8004998 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800497a:	2300      	movs	r3, #0
 800497c:	60bb      	str	r3, [r7, #8]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	695b      	ldr	r3, [r3, #20]
 8004984:	60bb      	str	r3, [r7, #8]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	699b      	ldr	r3, [r3, #24]
 800498c:	60bb      	str	r3, [r7, #8]
 800498e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004998:	bf00      	nop
 800499a:	3710      	adds	r7, #16
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ae:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	685a      	ldr	r2, [r3, #4]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80049be:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80049c0:	2300      	movs	r3, #0
 80049c2:	60bb      	str	r3, [r7, #8]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	60bb      	str	r3, [r7, #8]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f042 0201 	orr.w	r2, r2, #1
 80049da:	601a      	str	r2, [r3, #0]
 80049dc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049ec:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049fc:	d172      	bne.n	8004ae4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80049fe:	7bfb      	ldrb	r3, [r7, #15]
 8004a00:	2b22      	cmp	r3, #34	; 0x22
 8004a02:	d002      	beq.n	8004a0a <I2C_Slave_STOPF+0x6a>
 8004a04:	7bfb      	ldrb	r3, [r7, #15]
 8004a06:	2b2a      	cmp	r3, #42	; 0x2a
 8004a08:	d135      	bne.n	8004a76 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d005      	beq.n	8004a2e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a26:	f043 0204 	orr.w	r2, r3, #4
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	685a      	ldr	r2, [r3, #4]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a3c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7fd ff58 	bl	80028f8 <HAL_DMA_GetState>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d049      	beq.n	8004ae2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a52:	4a69      	ldr	r2, [pc, #420]	; (8004bf8 <I2C_Slave_STOPF+0x258>)
 8004a54:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f7fd ff2a 	bl	80028b4 <HAL_DMA_Abort_IT>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d03d      	beq.n	8004ae2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a70:	4610      	mov	r0, r2
 8004a72:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a74:	e035      	b.n	8004ae2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	b29a      	uxth	r2, r3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d005      	beq.n	8004a9a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a92:	f043 0204 	orr.w	r2, r3, #4
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	685a      	ldr	r2, [r3, #4]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004aa8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7fd ff22 	bl	80028f8 <HAL_DMA_GetState>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d014      	beq.n	8004ae4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004abe:	4a4e      	ldr	r2, [pc, #312]	; (8004bf8 <I2C_Slave_STOPF+0x258>)
 8004ac0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7fd fef4 	bl	80028b4 <HAL_DMA_Abort_IT>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d008      	beq.n	8004ae4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004adc:	4610      	mov	r0, r2
 8004ade:	4798      	blx	r3
 8004ae0:	e000      	b.n	8004ae4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ae2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d03e      	beq.n	8004b6c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	695b      	ldr	r3, [r3, #20]
 8004af4:	f003 0304 	and.w	r3, r3, #4
 8004af8:	2b04      	cmp	r3, #4
 8004afa:	d112      	bne.n	8004b22 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	691a      	ldr	r2, [r3, #16]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b06:	b2d2      	uxtb	r2, r2
 8004b08:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0e:	1c5a      	adds	r2, r3, #1
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	b29a      	uxth	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	695b      	ldr	r3, [r3, #20]
 8004b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b2c:	2b40      	cmp	r3, #64	; 0x40
 8004b2e:	d112      	bne.n	8004b56 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	691a      	ldr	r2, [r3, #16]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3a:	b2d2      	uxtb	r2, r2
 8004b3c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b42:	1c5a      	adds	r2, r3, #1
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	b29a      	uxth	r2, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d005      	beq.n	8004b6c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b64:	f043 0204 	orr.w	r2, r3, #4
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d003      	beq.n	8004b7c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f000 f8b3 	bl	8004ce0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004b7a:	e039      	b.n	8004bf0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004b7c:	7bfb      	ldrb	r3, [r7, #15]
 8004b7e:	2b2a      	cmp	r3, #42	; 0x2a
 8004b80:	d109      	bne.n	8004b96 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2228      	movs	r2, #40	; 0x28
 8004b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f7ff f831 	bl	8003bf8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b28      	cmp	r3, #40	; 0x28
 8004ba0:	d111      	bne.n	8004bc6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a15      	ldr	r2, [pc, #84]	; (8004bfc <I2C_Slave_STOPF+0x25c>)
 8004ba6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2220      	movs	r2, #32
 8004bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f7ff f832 	bl	8003c28 <HAL_I2C_ListenCpltCallback>
}
 8004bc4:	e014      	b.n	8004bf0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bca:	2b22      	cmp	r3, #34	; 0x22
 8004bcc:	d002      	beq.n	8004bd4 <I2C_Slave_STOPF+0x234>
 8004bce:	7bfb      	ldrb	r3, [r7, #15]
 8004bd0:	2b22      	cmp	r3, #34	; 0x22
 8004bd2:	d10d      	bne.n	8004bf0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2220      	movs	r2, #32
 8004bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f7ff f804 	bl	8003bf8 <HAL_I2C_SlaveRxCpltCallback>
}
 8004bf0:	bf00      	nop
 8004bf2:	3710      	adds	r7, #16
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	08005311 	.word	0x08005311
 8004bfc:	ffff0000 	.word	0xffff0000

08004c00 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c0e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c14:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	2b08      	cmp	r3, #8
 8004c1a:	d002      	beq.n	8004c22 <I2C_Slave_AF+0x22>
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	2b20      	cmp	r3, #32
 8004c20:	d129      	bne.n	8004c76 <I2C_Slave_AF+0x76>
 8004c22:	7bfb      	ldrb	r3, [r7, #15]
 8004c24:	2b28      	cmp	r3, #40	; 0x28
 8004c26:	d126      	bne.n	8004c76 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a2c      	ldr	r2, [pc, #176]	; (8004cdc <I2C_Slave_AF+0xdc>)
 8004c2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	685a      	ldr	r2, [r3, #4]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c3c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c46:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c56:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2220      	movs	r2, #32
 8004c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f7fe ffda 	bl	8003c28 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004c74:	e02e      	b.n	8004cd4 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004c76:	7bfb      	ldrb	r3, [r7, #15]
 8004c78:	2b21      	cmp	r3, #33	; 0x21
 8004c7a:	d126      	bne.n	8004cca <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a17      	ldr	r2, [pc, #92]	; (8004cdc <I2C_Slave_AF+0xdc>)
 8004c80:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2221      	movs	r2, #33	; 0x21
 8004c86:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	685a      	ldr	r2, [r3, #4]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ca6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004cb0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cc0:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f7fe ff8e 	bl	8003be4 <HAL_I2C_SlaveTxCpltCallback>
}
 8004cc8:	e004      	b.n	8004cd4 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004cd2:	615a      	str	r2, [r3, #20]
}
 8004cd4:	bf00      	nop
 8004cd6:	3710      	adds	r7, #16
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	ffff0000 	.word	0xffff0000

08004ce0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cee:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cf6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004cf8:	7bbb      	ldrb	r3, [r7, #14]
 8004cfa:	2b10      	cmp	r3, #16
 8004cfc:	d002      	beq.n	8004d04 <I2C_ITError+0x24>
 8004cfe:	7bbb      	ldrb	r3, [r7, #14]
 8004d00:	2b40      	cmp	r3, #64	; 0x40
 8004d02:	d10a      	bne.n	8004d1a <I2C_ITError+0x3a>
 8004d04:	7bfb      	ldrb	r3, [r7, #15]
 8004d06:	2b22      	cmp	r3, #34	; 0x22
 8004d08:	d107      	bne.n	8004d1a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d18:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d1a:	7bfb      	ldrb	r3, [r7, #15]
 8004d1c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004d20:	2b28      	cmp	r3, #40	; 0x28
 8004d22:	d107      	bne.n	8004d34 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2228      	movs	r2, #40	; 0x28
 8004d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004d32:	e015      	b.n	8004d60 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d42:	d00a      	beq.n	8004d5a <I2C_ITError+0x7a>
 8004d44:	7bfb      	ldrb	r3, [r7, #15]
 8004d46:	2b60      	cmp	r3, #96	; 0x60
 8004d48:	d007      	beq.n	8004d5a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2220      	movs	r2, #32
 8004d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d6e:	d162      	bne.n	8004e36 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	685a      	ldr	r2, [r3, #4]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d7e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d020      	beq.n	8004dd0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d92:	4a6a      	ldr	r2, [pc, #424]	; (8004f3c <I2C_ITError+0x25c>)
 8004d94:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f7fd fd8a 	bl	80028b4 <HAL_DMA_Abort_IT>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	f000 8089 	beq.w	8004eba <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f022 0201 	bic.w	r2, r2, #1
 8004db6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2220      	movs	r2, #32
 8004dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004dca:	4610      	mov	r0, r2
 8004dcc:	4798      	blx	r3
 8004dce:	e074      	b.n	8004eba <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd4:	4a59      	ldr	r2, [pc, #356]	; (8004f3c <I2C_ITError+0x25c>)
 8004dd6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f7fd fd69 	bl	80028b4 <HAL_DMA_Abort_IT>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d068      	beq.n	8004eba <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	695b      	ldr	r3, [r3, #20]
 8004dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df2:	2b40      	cmp	r3, #64	; 0x40
 8004df4:	d10b      	bne.n	8004e0e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	691a      	ldr	r2, [r3, #16]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e00:	b2d2      	uxtb	r2, r2
 8004e02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e08:	1c5a      	adds	r2, r3, #1
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f022 0201 	bic.w	r2, r2, #1
 8004e1c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2220      	movs	r2, #32
 8004e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e30:	4610      	mov	r0, r2
 8004e32:	4798      	blx	r3
 8004e34:	e041      	b.n	8004eba <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	2b60      	cmp	r3, #96	; 0x60
 8004e40:	d125      	bne.n	8004e8e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2220      	movs	r2, #32
 8004e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	695b      	ldr	r3, [r3, #20]
 8004e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e5a:	2b40      	cmp	r3, #64	; 0x40
 8004e5c:	d10b      	bne.n	8004e76 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	691a      	ldr	r2, [r3, #16]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e68:	b2d2      	uxtb	r2, r2
 8004e6a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e70:	1c5a      	adds	r2, r3, #1
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f022 0201 	bic.w	r2, r2, #1
 8004e84:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f7fe fef6 	bl	8003c78 <HAL_I2C_AbortCpltCallback>
 8004e8c:	e015      	b.n	8004eba <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	695b      	ldr	r3, [r3, #20]
 8004e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e98:	2b40      	cmp	r3, #64	; 0x40
 8004e9a:	d10b      	bne.n	8004eb4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	691a      	ldr	r2, [r3, #16]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea6:	b2d2      	uxtb	r2, r2
 8004ea8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eae:	1c5a      	adds	r2, r3, #1
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f7fe fed5 	bl	8003c64 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ebe:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	f003 0301 	and.w	r3, r3, #1
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d10e      	bne.n	8004ee8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d109      	bne.n	8004ee8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d104      	bne.n	8004ee8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d007      	beq.n	8004ef8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	685a      	ldr	r2, [r3, #4]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ef6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004efe:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f04:	f003 0304 	and.w	r3, r3, #4
 8004f08:	2b04      	cmp	r3, #4
 8004f0a:	d113      	bne.n	8004f34 <I2C_ITError+0x254>
 8004f0c:	7bfb      	ldrb	r3, [r7, #15]
 8004f0e:	2b28      	cmp	r3, #40	; 0x28
 8004f10:	d110      	bne.n	8004f34 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a0a      	ldr	r2, [pc, #40]	; (8004f40 <I2C_ITError+0x260>)
 8004f16:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2220      	movs	r2, #32
 8004f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f7fe fe7a 	bl	8003c28 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004f34:	bf00      	nop
 8004f36:	3710      	adds	r7, #16
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	08005311 	.word	0x08005311
 8004f40:	ffff0000 	.word	0xffff0000

08004f44 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b088      	sub	sp, #32
 8004f48:	af02      	add	r7, sp, #8
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	607a      	str	r2, [r7, #4]
 8004f4e:	603b      	str	r3, [r7, #0]
 8004f50:	460b      	mov	r3, r1
 8004f52:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f58:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	2b08      	cmp	r3, #8
 8004f5e:	d006      	beq.n	8004f6e <I2C_MasterRequestWrite+0x2a>
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d003      	beq.n	8004f6e <I2C_MasterRequestWrite+0x2a>
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f6c:	d108      	bne.n	8004f80 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f7c:	601a      	str	r2, [r3, #0]
 8004f7e:	e00b      	b.n	8004f98 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f84:	2b12      	cmp	r3, #18
 8004f86:	d107      	bne.n	8004f98 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f96:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	9300      	str	r3, [sp, #0]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004fa4:	68f8      	ldr	r0, [r7, #12]
 8004fa6:	f000 fa5b 	bl	8005460 <I2C_WaitOnFlagUntilTimeout>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d00d      	beq.n	8004fcc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fbe:	d103      	bne.n	8004fc8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fc6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e035      	b.n	8005038 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fd4:	d108      	bne.n	8004fe8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004fd6:	897b      	ldrh	r3, [r7, #10]
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	461a      	mov	r2, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004fe4:	611a      	str	r2, [r3, #16]
 8004fe6:	e01b      	b.n	8005020 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004fe8:	897b      	ldrh	r3, [r7, #10]
 8004fea:	11db      	asrs	r3, r3, #7
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	f003 0306 	and.w	r3, r3, #6
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	f063 030f 	orn	r3, r3, #15
 8004ff8:	b2da      	uxtb	r2, r3
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	490e      	ldr	r1, [pc, #56]	; (8005040 <I2C_MasterRequestWrite+0xfc>)
 8005006:	68f8      	ldr	r0, [r7, #12]
 8005008:	f000 fa81 	bl	800550e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d001      	beq.n	8005016 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e010      	b.n	8005038 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005016:	897b      	ldrh	r3, [r7, #10]
 8005018:	b2da      	uxtb	r2, r3
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	4907      	ldr	r1, [pc, #28]	; (8005044 <I2C_MasterRequestWrite+0x100>)
 8005026:	68f8      	ldr	r0, [r7, #12]
 8005028:	f000 fa71 	bl	800550e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d001      	beq.n	8005036 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e000      	b.n	8005038 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005036:	2300      	movs	r3, #0
}
 8005038:	4618      	mov	r0, r3
 800503a:	3718      	adds	r7, #24
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}
 8005040:	00010008 	.word	0x00010008
 8005044:	00010002 	.word	0x00010002

08005048 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b088      	sub	sp, #32
 800504c:	af02      	add	r7, sp, #8
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	607a      	str	r2, [r7, #4]
 8005052:	603b      	str	r3, [r7, #0]
 8005054:	460b      	mov	r3, r1
 8005056:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800506c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	2b08      	cmp	r3, #8
 8005072:	d006      	beq.n	8005082 <I2C_MasterRequestRead+0x3a>
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	2b01      	cmp	r3, #1
 8005078:	d003      	beq.n	8005082 <I2C_MasterRequestRead+0x3a>
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005080:	d108      	bne.n	8005094 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005090:	601a      	str	r2, [r3, #0]
 8005092:	e00b      	b.n	80050ac <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005098:	2b11      	cmp	r3, #17
 800509a:	d107      	bne.n	80050ac <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	9300      	str	r3, [sp, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80050b8:	68f8      	ldr	r0, [r7, #12]
 80050ba:	f000 f9d1 	bl	8005460 <I2C_WaitOnFlagUntilTimeout>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d00d      	beq.n	80050e0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050d2:	d103      	bne.n	80050dc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e079      	b.n	80051d4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050e8:	d108      	bne.n	80050fc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80050ea:	897b      	ldrh	r3, [r7, #10]
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	f043 0301 	orr.w	r3, r3, #1
 80050f2:	b2da      	uxtb	r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	611a      	str	r2, [r3, #16]
 80050fa:	e05f      	b.n	80051bc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80050fc:	897b      	ldrh	r3, [r7, #10]
 80050fe:	11db      	asrs	r3, r3, #7
 8005100:	b2db      	uxtb	r3, r3
 8005102:	f003 0306 	and.w	r3, r3, #6
 8005106:	b2db      	uxtb	r3, r3
 8005108:	f063 030f 	orn	r3, r3, #15
 800510c:	b2da      	uxtb	r2, r3
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	4930      	ldr	r1, [pc, #192]	; (80051dc <I2C_MasterRequestRead+0x194>)
 800511a:	68f8      	ldr	r0, [r7, #12]
 800511c:	f000 f9f7 	bl	800550e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d001      	beq.n	800512a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e054      	b.n	80051d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800512a:	897b      	ldrh	r3, [r7, #10]
 800512c:	b2da      	uxtb	r2, r3
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	4929      	ldr	r1, [pc, #164]	; (80051e0 <I2C_MasterRequestRead+0x198>)
 800513a:	68f8      	ldr	r0, [r7, #12]
 800513c:	f000 f9e7 	bl	800550e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d001      	beq.n	800514a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e044      	b.n	80051d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800514a:	2300      	movs	r3, #0
 800514c:	613b      	str	r3, [r7, #16]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	695b      	ldr	r3, [r3, #20]
 8005154:	613b      	str	r3, [r7, #16]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	699b      	ldr	r3, [r3, #24]
 800515c:	613b      	str	r3, [r7, #16]
 800515e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800516e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	9300      	str	r3, [sp, #0]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800517c:	68f8      	ldr	r0, [r7, #12]
 800517e:	f000 f96f 	bl	8005460 <I2C_WaitOnFlagUntilTimeout>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d00d      	beq.n	80051a4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005192:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005196:	d103      	bne.n	80051a0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800519e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e017      	b.n	80051d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80051a4:	897b      	ldrh	r3, [r7, #10]
 80051a6:	11db      	asrs	r3, r3, #7
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	f003 0306 	and.w	r3, r3, #6
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	f063 030e 	orn	r3, r3, #14
 80051b4:	b2da      	uxtb	r2, r3
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	4907      	ldr	r1, [pc, #28]	; (80051e0 <I2C_MasterRequestRead+0x198>)
 80051c2:	68f8      	ldr	r0, [r7, #12]
 80051c4:	f000 f9a3 	bl	800550e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d001      	beq.n	80051d2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e000      	b.n	80051d4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3718      	adds	r7, #24
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	00010008 	.word	0x00010008
 80051e0:	00010002 	.word	0x00010002

080051e4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b088      	sub	sp, #32
 80051e8:	af02      	add	r7, sp, #8
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	4608      	mov	r0, r1
 80051ee:	4611      	mov	r1, r2
 80051f0:	461a      	mov	r2, r3
 80051f2:	4603      	mov	r3, r0
 80051f4:	817b      	strh	r3, [r7, #10]
 80051f6:	460b      	mov	r3, r1
 80051f8:	813b      	strh	r3, [r7, #8]
 80051fa:	4613      	mov	r3, r2
 80051fc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800520c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800520e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005210:	9300      	str	r3, [sp, #0]
 8005212:	6a3b      	ldr	r3, [r7, #32]
 8005214:	2200      	movs	r2, #0
 8005216:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800521a:	68f8      	ldr	r0, [r7, #12]
 800521c:	f000 f920 	bl	8005460 <I2C_WaitOnFlagUntilTimeout>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00d      	beq.n	8005242 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005230:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005234:	d103      	bne.n	800523e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f44f 7200 	mov.w	r2, #512	; 0x200
 800523c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e05f      	b.n	8005302 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005242:	897b      	ldrh	r3, [r7, #10]
 8005244:	b2db      	uxtb	r3, r3
 8005246:	461a      	mov	r2, r3
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005250:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005254:	6a3a      	ldr	r2, [r7, #32]
 8005256:	492d      	ldr	r1, [pc, #180]	; (800530c <I2C_RequestMemoryWrite+0x128>)
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f000 f958 	bl	800550e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d001      	beq.n	8005268 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e04c      	b.n	8005302 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005268:	2300      	movs	r3, #0
 800526a:	617b      	str	r3, [r7, #20]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	617b      	str	r3, [r7, #20]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	617b      	str	r3, [r7, #20]
 800527c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800527e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005280:	6a39      	ldr	r1, [r7, #32]
 8005282:	68f8      	ldr	r0, [r7, #12]
 8005284:	f000 f9c2 	bl	800560c <I2C_WaitOnTXEFlagUntilTimeout>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00d      	beq.n	80052aa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005292:	2b04      	cmp	r3, #4
 8005294:	d107      	bne.n	80052a6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e02b      	b.n	8005302 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80052aa:	88fb      	ldrh	r3, [r7, #6]
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d105      	bne.n	80052bc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80052b0:	893b      	ldrh	r3, [r7, #8]
 80052b2:	b2da      	uxtb	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	611a      	str	r2, [r3, #16]
 80052ba:	e021      	b.n	8005300 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80052bc:	893b      	ldrh	r3, [r7, #8]
 80052be:	0a1b      	lsrs	r3, r3, #8
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	b2da      	uxtb	r2, r3
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052cc:	6a39      	ldr	r1, [r7, #32]
 80052ce:	68f8      	ldr	r0, [r7, #12]
 80052d0:	f000 f99c 	bl	800560c <I2C_WaitOnTXEFlagUntilTimeout>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d00d      	beq.n	80052f6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052de:	2b04      	cmp	r3, #4
 80052e0:	d107      	bne.n	80052f2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e005      	b.n	8005302 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80052f6:	893b      	ldrh	r3, [r7, #8]
 80052f8:	b2da      	uxtb	r2, r3
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3718      	adds	r7, #24
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	00010002 	.word	0x00010002

08005310 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b086      	sub	sp, #24
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005318:	2300      	movs	r3, #0
 800531a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005320:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005328:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800532a:	4b4b      	ldr	r3, [pc, #300]	; (8005458 <I2C_DMAAbort+0x148>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	08db      	lsrs	r3, r3, #3
 8005330:	4a4a      	ldr	r2, [pc, #296]	; (800545c <I2C_DMAAbort+0x14c>)
 8005332:	fba2 2303 	umull	r2, r3, r2, r3
 8005336:	0a1a      	lsrs	r2, r3, #8
 8005338:	4613      	mov	r3, r2
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	4413      	add	r3, r2
 800533e:	00da      	lsls	r2, r3, #3
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d106      	bne.n	8005358 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534e:	f043 0220 	orr.w	r2, r3, #32
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005356:	e00a      	b.n	800536e <I2C_DMAAbort+0x5e>
    }
    count--;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	3b01      	subs	r3, #1
 800535c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005368:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800536c:	d0ea      	beq.n	8005344 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005372:	2b00      	cmp	r3, #0
 8005374:	d003      	beq.n	800537e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800537a:	2200      	movs	r2, #0
 800537c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005382:	2b00      	cmp	r3, #0
 8005384:	d003      	beq.n	800538e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538a:	2200      	movs	r2, #0
 800538c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800539c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	2200      	movs	r2, #0
 80053a2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d003      	beq.n	80053b4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053b0:	2200      	movs	r2, #0
 80053b2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d003      	beq.n	80053c4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c0:	2200      	movs	r2, #0
 80053c2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f022 0201 	bic.w	r2, r2, #1
 80053d2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	2b60      	cmp	r3, #96	; 0x60
 80053de:	d10e      	bne.n	80053fe <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	2220      	movs	r2, #32
 80053e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	2200      	movs	r2, #0
 80053f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80053f6:	6978      	ldr	r0, [r7, #20]
 80053f8:	f7fe fc3e 	bl	8003c78 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80053fc:	e027      	b.n	800544e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80053fe:	7cfb      	ldrb	r3, [r7, #19]
 8005400:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005404:	2b28      	cmp	r3, #40	; 0x28
 8005406:	d117      	bne.n	8005438 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f042 0201 	orr.w	r2, r2, #1
 8005416:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005426:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	2200      	movs	r2, #0
 800542c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	2228      	movs	r2, #40	; 0x28
 8005432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005436:	e007      	b.n	8005448 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	2220      	movs	r2, #32
 800543c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	2200      	movs	r2, #0
 8005444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005448:	6978      	ldr	r0, [r7, #20]
 800544a:	f7fe fc0b 	bl	8003c64 <HAL_I2C_ErrorCallback>
}
 800544e:	bf00      	nop
 8005450:	3718      	adds	r7, #24
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	20000010 	.word	0x20000010
 800545c:	14f8b589 	.word	0x14f8b589

08005460 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	603b      	str	r3, [r7, #0]
 800546c:	4613      	mov	r3, r2
 800546e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005470:	e025      	b.n	80054be <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005478:	d021      	beq.n	80054be <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800547a:	f7fd f899 	bl	80025b0 <HAL_GetTick>
 800547e:	4602      	mov	r2, r0
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	683a      	ldr	r2, [r7, #0]
 8005486:	429a      	cmp	r2, r3
 8005488:	d302      	bcc.n	8005490 <I2C_WaitOnFlagUntilTimeout+0x30>
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d116      	bne.n	80054be <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2200      	movs	r2, #0
 8005494:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2220      	movs	r2, #32
 800549a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054aa:	f043 0220 	orr.w	r2, r3, #32
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e023      	b.n	8005506 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	0c1b      	lsrs	r3, r3, #16
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d10d      	bne.n	80054e4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	695b      	ldr	r3, [r3, #20]
 80054ce:	43da      	mvns	r2, r3
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	4013      	ands	r3, r2
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	bf0c      	ite	eq
 80054da:	2301      	moveq	r3, #1
 80054dc:	2300      	movne	r3, #0
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	461a      	mov	r2, r3
 80054e2:	e00c      	b.n	80054fe <I2C_WaitOnFlagUntilTimeout+0x9e>
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	699b      	ldr	r3, [r3, #24]
 80054ea:	43da      	mvns	r2, r3
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	4013      	ands	r3, r2
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	bf0c      	ite	eq
 80054f6:	2301      	moveq	r3, #1
 80054f8:	2300      	movne	r3, #0
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	461a      	mov	r2, r3
 80054fe:	79fb      	ldrb	r3, [r7, #7]
 8005500:	429a      	cmp	r2, r3
 8005502:	d0b6      	beq.n	8005472 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3710      	adds	r7, #16
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}

0800550e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800550e:	b580      	push	{r7, lr}
 8005510:	b084      	sub	sp, #16
 8005512:	af00      	add	r7, sp, #0
 8005514:	60f8      	str	r0, [r7, #12]
 8005516:	60b9      	str	r1, [r7, #8]
 8005518:	607a      	str	r2, [r7, #4]
 800551a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800551c:	e051      	b.n	80055c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	695b      	ldr	r3, [r3, #20]
 8005524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005528:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800552c:	d123      	bne.n	8005576 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800553c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005546:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2200      	movs	r2, #0
 800554c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2220      	movs	r2, #32
 8005552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005562:	f043 0204 	orr.w	r2, r3, #4
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e046      	b.n	8005604 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800557c:	d021      	beq.n	80055c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800557e:	f7fd f817 	bl	80025b0 <HAL_GetTick>
 8005582:	4602      	mov	r2, r0
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	429a      	cmp	r2, r3
 800558c:	d302      	bcc.n	8005594 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d116      	bne.n	80055c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2200      	movs	r2, #0
 8005598:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2220      	movs	r2, #32
 800559e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ae:	f043 0220 	orr.w	r2, r3, #32
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e020      	b.n	8005604 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	0c1b      	lsrs	r3, r3, #16
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d10c      	bne.n	80055e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	695b      	ldr	r3, [r3, #20]
 80055d2:	43da      	mvns	r2, r3
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	4013      	ands	r3, r2
 80055d8:	b29b      	uxth	r3, r3
 80055da:	2b00      	cmp	r3, #0
 80055dc:	bf14      	ite	ne
 80055de:	2301      	movne	r3, #1
 80055e0:	2300      	moveq	r3, #0
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	e00b      	b.n	80055fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	699b      	ldr	r3, [r3, #24]
 80055ec:	43da      	mvns	r2, r3
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	4013      	ands	r3, r2
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	bf14      	ite	ne
 80055f8:	2301      	movne	r3, #1
 80055fa:	2300      	moveq	r3, #0
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d18d      	bne.n	800551e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005602:	2300      	movs	r3, #0
}
 8005604:	4618      	mov	r0, r3
 8005606:	3710      	adds	r7, #16
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005618:	e02d      	b.n	8005676 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800561a:	68f8      	ldr	r0, [r7, #12]
 800561c:	f000 f900 	bl	8005820 <I2C_IsAcknowledgeFailed>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d001      	beq.n	800562a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e02d      	b.n	8005686 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005630:	d021      	beq.n	8005676 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005632:	f7fc ffbd 	bl	80025b0 <HAL_GetTick>
 8005636:	4602      	mov	r2, r0
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	68ba      	ldr	r2, [r7, #8]
 800563e:	429a      	cmp	r2, r3
 8005640:	d302      	bcc.n	8005648 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d116      	bne.n	8005676 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2200      	movs	r2, #0
 800564c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2220      	movs	r2, #32
 8005652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005662:	f043 0220 	orr.w	r2, r3, #32
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2200      	movs	r2, #0
 800566e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e007      	b.n	8005686 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	695b      	ldr	r3, [r3, #20]
 800567c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005680:	2b80      	cmp	r3, #128	; 0x80
 8005682:	d1ca      	bne.n	800561a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3710      	adds	r7, #16
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}

0800568e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800568e:	b580      	push	{r7, lr}
 8005690:	b084      	sub	sp, #16
 8005692:	af00      	add	r7, sp, #0
 8005694:	60f8      	str	r0, [r7, #12]
 8005696:	60b9      	str	r1, [r7, #8]
 8005698:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800569a:	e02d      	b.n	80056f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800569c:	68f8      	ldr	r0, [r7, #12]
 800569e:	f000 f8bf 	bl	8005820 <I2C_IsAcknowledgeFailed>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d001      	beq.n	80056ac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e02d      	b.n	8005708 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b2:	d021      	beq.n	80056f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056b4:	f7fc ff7c 	bl	80025b0 <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	68ba      	ldr	r2, [r7, #8]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d302      	bcc.n	80056ca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d116      	bne.n	80056f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2220      	movs	r2, #32
 80056d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e4:	f043 0220 	orr.w	r2, r3, #32
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e007      	b.n	8005708 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	695b      	ldr	r3, [r3, #20]
 80056fe:	f003 0304 	and.w	r3, r3, #4
 8005702:	2b04      	cmp	r3, #4
 8005704:	d1ca      	bne.n	800569c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005706:	2300      	movs	r3, #0
}
 8005708:	4618      	mov	r0, r3
 800570a:	3710      	adds	r7, #16
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005718:	2300      	movs	r3, #0
 800571a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800571c:	4b13      	ldr	r3, [pc, #76]	; (800576c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	08db      	lsrs	r3, r3, #3
 8005722:	4a13      	ldr	r2, [pc, #76]	; (8005770 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005724:	fba2 2303 	umull	r2, r3, r2, r3
 8005728:	0a1a      	lsrs	r2, r3, #8
 800572a:	4613      	mov	r3, r2
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	4413      	add	r3, r2
 8005730:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	3b01      	subs	r3, #1
 8005736:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d107      	bne.n	800574e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005742:	f043 0220 	orr.w	r2, r3, #32
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e008      	b.n	8005760 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005758:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800575c:	d0e9      	beq.n	8005732 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	3714      	adds	r7, #20
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr
 800576c:	20000010 	.word	0x20000010
 8005770:	14f8b589 	.word	0x14f8b589

08005774 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005780:	e042      	b.n	8005808 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	695b      	ldr	r3, [r3, #20]
 8005788:	f003 0310 	and.w	r3, r3, #16
 800578c:	2b10      	cmp	r3, #16
 800578e:	d119      	bne.n	80057c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f06f 0210 	mvn.w	r2, #16
 8005798:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2200      	movs	r2, #0
 800579e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2220      	movs	r2, #32
 80057a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e029      	b.n	8005818 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057c4:	f7fc fef4 	bl	80025b0 <HAL_GetTick>
 80057c8:	4602      	mov	r2, r0
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	68ba      	ldr	r2, [r7, #8]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d302      	bcc.n	80057da <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d116      	bne.n	8005808 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2220      	movs	r2, #32
 80057e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f4:	f043 0220 	orr.w	r2, r3, #32
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e007      	b.n	8005818 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	695b      	ldr	r3, [r3, #20]
 800580e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005812:	2b40      	cmp	r3, #64	; 0x40
 8005814:	d1b5      	bne.n	8005782 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	3710      	adds	r7, #16
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	695b      	ldr	r3, [r3, #20]
 800582e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005832:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005836:	d11b      	bne.n	8005870 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005840:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2220      	movs	r2, #32
 800584c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585c:	f043 0204 	orr.w	r2, r3, #4
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e000      	b.n	8005872 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005870:	2300      	movs	r3, #0
}
 8005872:	4618      	mov	r0, r3
 8005874:	370c      	adds	r7, #12
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr

0800587e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800587e:	b480      	push	{r7}
 8005880:	b083      	sub	sp, #12
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800588a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800588e:	d103      	bne.n	8005898 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005896:	e007      	b.n	80058a8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80058a0:	d102      	bne.n	80058a8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2208      	movs	r2, #8
 80058a6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80058a8:	bf00      	nop
 80058aa:	370c      	adds	r7, #12
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b086      	sub	sp, #24
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d101      	bne.n	80058c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e264      	b.n	8005d90 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0301 	and.w	r3, r3, #1
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d075      	beq.n	80059be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80058d2:	4ba3      	ldr	r3, [pc, #652]	; (8005b60 <HAL_RCC_OscConfig+0x2ac>)
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f003 030c 	and.w	r3, r3, #12
 80058da:	2b04      	cmp	r3, #4
 80058dc:	d00c      	beq.n	80058f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058de:	4ba0      	ldr	r3, [pc, #640]	; (8005b60 <HAL_RCC_OscConfig+0x2ac>)
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80058e6:	2b08      	cmp	r3, #8
 80058e8:	d112      	bne.n	8005910 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058ea:	4b9d      	ldr	r3, [pc, #628]	; (8005b60 <HAL_RCC_OscConfig+0x2ac>)
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058f6:	d10b      	bne.n	8005910 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058f8:	4b99      	ldr	r3, [pc, #612]	; (8005b60 <HAL_RCC_OscConfig+0x2ac>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005900:	2b00      	cmp	r3, #0
 8005902:	d05b      	beq.n	80059bc <HAL_RCC_OscConfig+0x108>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d157      	bne.n	80059bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e23f      	b.n	8005d90 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005918:	d106      	bne.n	8005928 <HAL_RCC_OscConfig+0x74>
 800591a:	4b91      	ldr	r3, [pc, #580]	; (8005b60 <HAL_RCC_OscConfig+0x2ac>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a90      	ldr	r2, [pc, #576]	; (8005b60 <HAL_RCC_OscConfig+0x2ac>)
 8005920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005924:	6013      	str	r3, [r2, #0]
 8005926:	e01d      	b.n	8005964 <HAL_RCC_OscConfig+0xb0>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005930:	d10c      	bne.n	800594c <HAL_RCC_OscConfig+0x98>
 8005932:	4b8b      	ldr	r3, [pc, #556]	; (8005b60 <HAL_RCC_OscConfig+0x2ac>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a8a      	ldr	r2, [pc, #552]	; (8005b60 <HAL_RCC_OscConfig+0x2ac>)
 8005938:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800593c:	6013      	str	r3, [r2, #0]
 800593e:	4b88      	ldr	r3, [pc, #544]	; (8005b60 <HAL_RCC_OscConfig+0x2ac>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a87      	ldr	r2, [pc, #540]	; (8005b60 <HAL_RCC_OscConfig+0x2ac>)
 8005944:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005948:	6013      	str	r3, [r2, #0]
 800594a:	e00b      	b.n	8005964 <HAL_RCC_OscConfig+0xb0>
 800594c:	4b84      	ldr	r3, [pc, #528]	; (8005b60 <HAL_RCC_OscConfig+0x2ac>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a83      	ldr	r2, [pc, #524]	; (8005b60 <HAL_RCC_OscConfig+0x2ac>)
 8005952:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005956:	6013      	str	r3, [r2, #0]
 8005958:	4b81      	ldr	r3, [pc, #516]	; (8005b60 <HAL_RCC_OscConfig+0x2ac>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a80      	ldr	r2, [pc, #512]	; (8005b60 <HAL_RCC_OscConfig+0x2ac>)
 800595e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005962:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d013      	beq.n	8005994 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800596c:	f7fc fe20 	bl	80025b0 <HAL_GetTick>
 8005970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005972:	e008      	b.n	8005986 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005974:	f7fc fe1c 	bl	80025b0 <HAL_GetTick>
 8005978:	4602      	mov	r2, r0
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	2b64      	cmp	r3, #100	; 0x64
 8005980:	d901      	bls.n	8005986 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005982:	2303      	movs	r3, #3
 8005984:	e204      	b.n	8005d90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005986:	4b76      	ldr	r3, [pc, #472]	; (8005b60 <HAL_RCC_OscConfig+0x2ac>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800598e:	2b00      	cmp	r3, #0
 8005990:	d0f0      	beq.n	8005974 <HAL_RCC_OscConfig+0xc0>
 8005992:	e014      	b.n	80059be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005994:	f7fc fe0c 	bl	80025b0 <HAL_GetTick>
 8005998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800599a:	e008      	b.n	80059ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800599c:	f7fc fe08 	bl	80025b0 <HAL_GetTick>
 80059a0:	4602      	mov	r2, r0
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	2b64      	cmp	r3, #100	; 0x64
 80059a8:	d901      	bls.n	80059ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80059aa:	2303      	movs	r3, #3
 80059ac:	e1f0      	b.n	8005d90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059ae:	4b6c      	ldr	r3, [pc, #432]	; (8005b60 <HAL_RCC_OscConfig+0x2ac>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d1f0      	bne.n	800599c <HAL_RCC_OscConfig+0xe8>
 80059ba:	e000      	b.n	80059be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 0302 	and.w	r3, r3, #2
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d063      	beq.n	8005a92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80059ca:	4b65      	ldr	r3, [pc, #404]	; (8005b60 <HAL_RCC_OscConfig+0x2ac>)
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f003 030c 	and.w	r3, r3, #12
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00b      	beq.n	80059ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059d6:	4b62      	ldr	r3, [pc, #392]	; (8005b60 <HAL_RCC_OscConfig+0x2ac>)
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80059de:	2b08      	cmp	r3, #8
 80059e0:	d11c      	bne.n	8005a1c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059e2:	4b5f      	ldr	r3, [pc, #380]	; (8005b60 <HAL_RCC_OscConfig+0x2ac>)
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d116      	bne.n	8005a1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059ee:	4b5c      	ldr	r3, [pc, #368]	; (8005b60 <HAL_RCC_OscConfig+0x2ac>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 0302 	and.w	r3, r3, #2
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d005      	beq.n	8005a06 <HAL_RCC_OscConfig+0x152>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d001      	beq.n	8005a06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e1c4      	b.n	8005d90 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a06:	4b56      	ldr	r3, [pc, #344]	; (8005b60 <HAL_RCC_OscConfig+0x2ac>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	00db      	lsls	r3, r3, #3
 8005a14:	4952      	ldr	r1, [pc, #328]	; (8005b60 <HAL_RCC_OscConfig+0x2ac>)
 8005a16:	4313      	orrs	r3, r2
 8005a18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a1a:	e03a      	b.n	8005a92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d020      	beq.n	8005a66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a24:	4b4f      	ldr	r3, [pc, #316]	; (8005b64 <HAL_RCC_OscConfig+0x2b0>)
 8005a26:	2201      	movs	r2, #1
 8005a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a2a:	f7fc fdc1 	bl	80025b0 <HAL_GetTick>
 8005a2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a30:	e008      	b.n	8005a44 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a32:	f7fc fdbd 	bl	80025b0 <HAL_GetTick>
 8005a36:	4602      	mov	r2, r0
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	1ad3      	subs	r3, r2, r3
 8005a3c:	2b02      	cmp	r3, #2
 8005a3e:	d901      	bls.n	8005a44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005a40:	2303      	movs	r3, #3
 8005a42:	e1a5      	b.n	8005d90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a44:	4b46      	ldr	r3, [pc, #280]	; (8005b60 <HAL_RCC_OscConfig+0x2ac>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0302 	and.w	r3, r3, #2
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d0f0      	beq.n	8005a32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a50:	4b43      	ldr	r3, [pc, #268]	; (8005b60 <HAL_RCC_OscConfig+0x2ac>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	691b      	ldr	r3, [r3, #16]
 8005a5c:	00db      	lsls	r3, r3, #3
 8005a5e:	4940      	ldr	r1, [pc, #256]	; (8005b60 <HAL_RCC_OscConfig+0x2ac>)
 8005a60:	4313      	orrs	r3, r2
 8005a62:	600b      	str	r3, [r1, #0]
 8005a64:	e015      	b.n	8005a92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a66:	4b3f      	ldr	r3, [pc, #252]	; (8005b64 <HAL_RCC_OscConfig+0x2b0>)
 8005a68:	2200      	movs	r2, #0
 8005a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a6c:	f7fc fda0 	bl	80025b0 <HAL_GetTick>
 8005a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a72:	e008      	b.n	8005a86 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a74:	f7fc fd9c 	bl	80025b0 <HAL_GetTick>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d901      	bls.n	8005a86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	e184      	b.n	8005d90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a86:	4b36      	ldr	r3, [pc, #216]	; (8005b60 <HAL_RCC_OscConfig+0x2ac>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 0302 	and.w	r3, r3, #2
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d1f0      	bne.n	8005a74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 0308 	and.w	r3, r3, #8
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d030      	beq.n	8005b00 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	695b      	ldr	r3, [r3, #20]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d016      	beq.n	8005ad4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005aa6:	4b30      	ldr	r3, [pc, #192]	; (8005b68 <HAL_RCC_OscConfig+0x2b4>)
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aac:	f7fc fd80 	bl	80025b0 <HAL_GetTick>
 8005ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ab2:	e008      	b.n	8005ac6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ab4:	f7fc fd7c 	bl	80025b0 <HAL_GetTick>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	2b02      	cmp	r3, #2
 8005ac0:	d901      	bls.n	8005ac6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005ac2:	2303      	movs	r3, #3
 8005ac4:	e164      	b.n	8005d90 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ac6:	4b26      	ldr	r3, [pc, #152]	; (8005b60 <HAL_RCC_OscConfig+0x2ac>)
 8005ac8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005aca:	f003 0302 	and.w	r3, r3, #2
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d0f0      	beq.n	8005ab4 <HAL_RCC_OscConfig+0x200>
 8005ad2:	e015      	b.n	8005b00 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ad4:	4b24      	ldr	r3, [pc, #144]	; (8005b68 <HAL_RCC_OscConfig+0x2b4>)
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ada:	f7fc fd69 	bl	80025b0 <HAL_GetTick>
 8005ade:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ae0:	e008      	b.n	8005af4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ae2:	f7fc fd65 	bl	80025b0 <HAL_GetTick>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	1ad3      	subs	r3, r2, r3
 8005aec:	2b02      	cmp	r3, #2
 8005aee:	d901      	bls.n	8005af4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005af0:	2303      	movs	r3, #3
 8005af2:	e14d      	b.n	8005d90 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005af4:	4b1a      	ldr	r3, [pc, #104]	; (8005b60 <HAL_RCC_OscConfig+0x2ac>)
 8005af6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005af8:	f003 0302 	and.w	r3, r3, #2
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d1f0      	bne.n	8005ae2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 0304 	and.w	r3, r3, #4
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	f000 80a0 	beq.w	8005c4e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b12:	4b13      	ldr	r3, [pc, #76]	; (8005b60 <HAL_RCC_OscConfig+0x2ac>)
 8005b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d10f      	bne.n	8005b3e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b1e:	2300      	movs	r3, #0
 8005b20:	60bb      	str	r3, [r7, #8]
 8005b22:	4b0f      	ldr	r3, [pc, #60]	; (8005b60 <HAL_RCC_OscConfig+0x2ac>)
 8005b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b26:	4a0e      	ldr	r2, [pc, #56]	; (8005b60 <HAL_RCC_OscConfig+0x2ac>)
 8005b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8005b2e:	4b0c      	ldr	r3, [pc, #48]	; (8005b60 <HAL_RCC_OscConfig+0x2ac>)
 8005b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b36:	60bb      	str	r3, [r7, #8]
 8005b38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b3e:	4b0b      	ldr	r3, [pc, #44]	; (8005b6c <HAL_RCC_OscConfig+0x2b8>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d121      	bne.n	8005b8e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b4a:	4b08      	ldr	r3, [pc, #32]	; (8005b6c <HAL_RCC_OscConfig+0x2b8>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a07      	ldr	r2, [pc, #28]	; (8005b6c <HAL_RCC_OscConfig+0x2b8>)
 8005b50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b56:	f7fc fd2b 	bl	80025b0 <HAL_GetTick>
 8005b5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b5c:	e011      	b.n	8005b82 <HAL_RCC_OscConfig+0x2ce>
 8005b5e:	bf00      	nop
 8005b60:	40023800 	.word	0x40023800
 8005b64:	42470000 	.word	0x42470000
 8005b68:	42470e80 	.word	0x42470e80
 8005b6c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b70:	f7fc fd1e 	bl	80025b0 <HAL_GetTick>
 8005b74:	4602      	mov	r2, r0
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	2b02      	cmp	r3, #2
 8005b7c:	d901      	bls.n	8005b82 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005b7e:	2303      	movs	r3, #3
 8005b80:	e106      	b.n	8005d90 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b82:	4b85      	ldr	r3, [pc, #532]	; (8005d98 <HAL_RCC_OscConfig+0x4e4>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d0f0      	beq.n	8005b70 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d106      	bne.n	8005ba4 <HAL_RCC_OscConfig+0x2f0>
 8005b96:	4b81      	ldr	r3, [pc, #516]	; (8005d9c <HAL_RCC_OscConfig+0x4e8>)
 8005b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b9a:	4a80      	ldr	r2, [pc, #512]	; (8005d9c <HAL_RCC_OscConfig+0x4e8>)
 8005b9c:	f043 0301 	orr.w	r3, r3, #1
 8005ba0:	6713      	str	r3, [r2, #112]	; 0x70
 8005ba2:	e01c      	b.n	8005bde <HAL_RCC_OscConfig+0x32a>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	2b05      	cmp	r3, #5
 8005baa:	d10c      	bne.n	8005bc6 <HAL_RCC_OscConfig+0x312>
 8005bac:	4b7b      	ldr	r3, [pc, #492]	; (8005d9c <HAL_RCC_OscConfig+0x4e8>)
 8005bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bb0:	4a7a      	ldr	r2, [pc, #488]	; (8005d9c <HAL_RCC_OscConfig+0x4e8>)
 8005bb2:	f043 0304 	orr.w	r3, r3, #4
 8005bb6:	6713      	str	r3, [r2, #112]	; 0x70
 8005bb8:	4b78      	ldr	r3, [pc, #480]	; (8005d9c <HAL_RCC_OscConfig+0x4e8>)
 8005bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bbc:	4a77      	ldr	r2, [pc, #476]	; (8005d9c <HAL_RCC_OscConfig+0x4e8>)
 8005bbe:	f043 0301 	orr.w	r3, r3, #1
 8005bc2:	6713      	str	r3, [r2, #112]	; 0x70
 8005bc4:	e00b      	b.n	8005bde <HAL_RCC_OscConfig+0x32a>
 8005bc6:	4b75      	ldr	r3, [pc, #468]	; (8005d9c <HAL_RCC_OscConfig+0x4e8>)
 8005bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bca:	4a74      	ldr	r2, [pc, #464]	; (8005d9c <HAL_RCC_OscConfig+0x4e8>)
 8005bcc:	f023 0301 	bic.w	r3, r3, #1
 8005bd0:	6713      	str	r3, [r2, #112]	; 0x70
 8005bd2:	4b72      	ldr	r3, [pc, #456]	; (8005d9c <HAL_RCC_OscConfig+0x4e8>)
 8005bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bd6:	4a71      	ldr	r2, [pc, #452]	; (8005d9c <HAL_RCC_OscConfig+0x4e8>)
 8005bd8:	f023 0304 	bic.w	r3, r3, #4
 8005bdc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d015      	beq.n	8005c12 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005be6:	f7fc fce3 	bl	80025b0 <HAL_GetTick>
 8005bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bec:	e00a      	b.n	8005c04 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005bee:	f7fc fcdf 	bl	80025b0 <HAL_GetTick>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d901      	bls.n	8005c04 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005c00:	2303      	movs	r3, #3
 8005c02:	e0c5      	b.n	8005d90 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c04:	4b65      	ldr	r3, [pc, #404]	; (8005d9c <HAL_RCC_OscConfig+0x4e8>)
 8005c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c08:	f003 0302 	and.w	r3, r3, #2
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d0ee      	beq.n	8005bee <HAL_RCC_OscConfig+0x33a>
 8005c10:	e014      	b.n	8005c3c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c12:	f7fc fccd 	bl	80025b0 <HAL_GetTick>
 8005c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c18:	e00a      	b.n	8005c30 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c1a:	f7fc fcc9 	bl	80025b0 <HAL_GetTick>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	1ad3      	subs	r3, r2, r3
 8005c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d901      	bls.n	8005c30 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005c2c:	2303      	movs	r3, #3
 8005c2e:	e0af      	b.n	8005d90 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c30:	4b5a      	ldr	r3, [pc, #360]	; (8005d9c <HAL_RCC_OscConfig+0x4e8>)
 8005c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c34:	f003 0302 	and.w	r3, r3, #2
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d1ee      	bne.n	8005c1a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c3c:	7dfb      	ldrb	r3, [r7, #23]
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d105      	bne.n	8005c4e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c42:	4b56      	ldr	r3, [pc, #344]	; (8005d9c <HAL_RCC_OscConfig+0x4e8>)
 8005c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c46:	4a55      	ldr	r2, [pc, #340]	; (8005d9c <HAL_RCC_OscConfig+0x4e8>)
 8005c48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c4c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	699b      	ldr	r3, [r3, #24]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	f000 809b 	beq.w	8005d8e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c58:	4b50      	ldr	r3, [pc, #320]	; (8005d9c <HAL_RCC_OscConfig+0x4e8>)
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	f003 030c 	and.w	r3, r3, #12
 8005c60:	2b08      	cmp	r3, #8
 8005c62:	d05c      	beq.n	8005d1e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	699b      	ldr	r3, [r3, #24]
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	d141      	bne.n	8005cf0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c6c:	4b4c      	ldr	r3, [pc, #304]	; (8005da0 <HAL_RCC_OscConfig+0x4ec>)
 8005c6e:	2200      	movs	r2, #0
 8005c70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c72:	f7fc fc9d 	bl	80025b0 <HAL_GetTick>
 8005c76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c78:	e008      	b.n	8005c8c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c7a:	f7fc fc99 	bl	80025b0 <HAL_GetTick>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	1ad3      	subs	r3, r2, r3
 8005c84:	2b02      	cmp	r3, #2
 8005c86:	d901      	bls.n	8005c8c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	e081      	b.n	8005d90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c8c:	4b43      	ldr	r3, [pc, #268]	; (8005d9c <HAL_RCC_OscConfig+0x4e8>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d1f0      	bne.n	8005c7a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	69da      	ldr	r2, [r3, #28]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a1b      	ldr	r3, [r3, #32]
 8005ca0:	431a      	orrs	r2, r3
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca6:	019b      	lsls	r3, r3, #6
 8005ca8:	431a      	orrs	r2, r3
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cae:	085b      	lsrs	r3, r3, #1
 8005cb0:	3b01      	subs	r3, #1
 8005cb2:	041b      	lsls	r3, r3, #16
 8005cb4:	431a      	orrs	r2, r3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cba:	061b      	lsls	r3, r3, #24
 8005cbc:	4937      	ldr	r1, [pc, #220]	; (8005d9c <HAL_RCC_OscConfig+0x4e8>)
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005cc2:	4b37      	ldr	r3, [pc, #220]	; (8005da0 <HAL_RCC_OscConfig+0x4ec>)
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cc8:	f7fc fc72 	bl	80025b0 <HAL_GetTick>
 8005ccc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cce:	e008      	b.n	8005ce2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cd0:	f7fc fc6e 	bl	80025b0 <HAL_GetTick>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	1ad3      	subs	r3, r2, r3
 8005cda:	2b02      	cmp	r3, #2
 8005cdc:	d901      	bls.n	8005ce2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005cde:	2303      	movs	r3, #3
 8005ce0:	e056      	b.n	8005d90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ce2:	4b2e      	ldr	r3, [pc, #184]	; (8005d9c <HAL_RCC_OscConfig+0x4e8>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d0f0      	beq.n	8005cd0 <HAL_RCC_OscConfig+0x41c>
 8005cee:	e04e      	b.n	8005d8e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cf0:	4b2b      	ldr	r3, [pc, #172]	; (8005da0 <HAL_RCC_OscConfig+0x4ec>)
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cf6:	f7fc fc5b 	bl	80025b0 <HAL_GetTick>
 8005cfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cfc:	e008      	b.n	8005d10 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cfe:	f7fc fc57 	bl	80025b0 <HAL_GetTick>
 8005d02:	4602      	mov	r2, r0
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	1ad3      	subs	r3, r2, r3
 8005d08:	2b02      	cmp	r3, #2
 8005d0a:	d901      	bls.n	8005d10 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005d0c:	2303      	movs	r3, #3
 8005d0e:	e03f      	b.n	8005d90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d10:	4b22      	ldr	r3, [pc, #136]	; (8005d9c <HAL_RCC_OscConfig+0x4e8>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d1f0      	bne.n	8005cfe <HAL_RCC_OscConfig+0x44a>
 8005d1c:	e037      	b.n	8005d8e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d101      	bne.n	8005d2a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e032      	b.n	8005d90 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d2a:	4b1c      	ldr	r3, [pc, #112]	; (8005d9c <HAL_RCC_OscConfig+0x4e8>)
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	699b      	ldr	r3, [r3, #24]
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d028      	beq.n	8005d8a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d121      	bne.n	8005d8a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d11a      	bne.n	8005d8a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005d60:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d111      	bne.n	8005d8a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d70:	085b      	lsrs	r3, r3, #1
 8005d72:	3b01      	subs	r3, #1
 8005d74:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d107      	bne.n	8005d8a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d84:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d001      	beq.n	8005d8e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e000      	b.n	8005d90 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005d8e:	2300      	movs	r3, #0
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3718      	adds	r7, #24
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}
 8005d98:	40007000 	.word	0x40007000
 8005d9c:	40023800 	.word	0x40023800
 8005da0:	42470060 	.word	0x42470060

08005da4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b084      	sub	sp, #16
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d101      	bne.n	8005db8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	e0cc      	b.n	8005f52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005db8:	4b68      	ldr	r3, [pc, #416]	; (8005f5c <HAL_RCC_ClockConfig+0x1b8>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 0307 	and.w	r3, r3, #7
 8005dc0:	683a      	ldr	r2, [r7, #0]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d90c      	bls.n	8005de0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dc6:	4b65      	ldr	r3, [pc, #404]	; (8005f5c <HAL_RCC_ClockConfig+0x1b8>)
 8005dc8:	683a      	ldr	r2, [r7, #0]
 8005dca:	b2d2      	uxtb	r2, r2
 8005dcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dce:	4b63      	ldr	r3, [pc, #396]	; (8005f5c <HAL_RCC_ClockConfig+0x1b8>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 0307 	and.w	r3, r3, #7
 8005dd6:	683a      	ldr	r2, [r7, #0]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d001      	beq.n	8005de0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e0b8      	b.n	8005f52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 0302 	and.w	r3, r3, #2
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d020      	beq.n	8005e2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 0304 	and.w	r3, r3, #4
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d005      	beq.n	8005e04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005df8:	4b59      	ldr	r3, [pc, #356]	; (8005f60 <HAL_RCC_ClockConfig+0x1bc>)
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	4a58      	ldr	r2, [pc, #352]	; (8005f60 <HAL_RCC_ClockConfig+0x1bc>)
 8005dfe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005e02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 0308 	and.w	r3, r3, #8
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d005      	beq.n	8005e1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e10:	4b53      	ldr	r3, [pc, #332]	; (8005f60 <HAL_RCC_ClockConfig+0x1bc>)
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	4a52      	ldr	r2, [pc, #328]	; (8005f60 <HAL_RCC_ClockConfig+0x1bc>)
 8005e16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005e1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e1c:	4b50      	ldr	r3, [pc, #320]	; (8005f60 <HAL_RCC_ClockConfig+0x1bc>)
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	494d      	ldr	r1, [pc, #308]	; (8005f60 <HAL_RCC_ClockConfig+0x1bc>)
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 0301 	and.w	r3, r3, #1
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d044      	beq.n	8005ec4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d107      	bne.n	8005e52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e42:	4b47      	ldr	r3, [pc, #284]	; (8005f60 <HAL_RCC_ClockConfig+0x1bc>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d119      	bne.n	8005e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e07f      	b.n	8005f52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	2b02      	cmp	r3, #2
 8005e58:	d003      	beq.n	8005e62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e5e:	2b03      	cmp	r3, #3
 8005e60:	d107      	bne.n	8005e72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e62:	4b3f      	ldr	r3, [pc, #252]	; (8005f60 <HAL_RCC_ClockConfig+0x1bc>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d109      	bne.n	8005e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e06f      	b.n	8005f52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e72:	4b3b      	ldr	r3, [pc, #236]	; (8005f60 <HAL_RCC_ClockConfig+0x1bc>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 0302 	and.w	r3, r3, #2
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d101      	bne.n	8005e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e067      	b.n	8005f52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e82:	4b37      	ldr	r3, [pc, #220]	; (8005f60 <HAL_RCC_ClockConfig+0x1bc>)
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	f023 0203 	bic.w	r2, r3, #3
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	4934      	ldr	r1, [pc, #208]	; (8005f60 <HAL_RCC_ClockConfig+0x1bc>)
 8005e90:	4313      	orrs	r3, r2
 8005e92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e94:	f7fc fb8c 	bl	80025b0 <HAL_GetTick>
 8005e98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e9a:	e00a      	b.n	8005eb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e9c:	f7fc fb88 	bl	80025b0 <HAL_GetTick>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	1ad3      	subs	r3, r2, r3
 8005ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d901      	bls.n	8005eb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	e04f      	b.n	8005f52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005eb2:	4b2b      	ldr	r3, [pc, #172]	; (8005f60 <HAL_RCC_ClockConfig+0x1bc>)
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	f003 020c 	and.w	r2, r3, #12
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d1eb      	bne.n	8005e9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ec4:	4b25      	ldr	r3, [pc, #148]	; (8005f5c <HAL_RCC_ClockConfig+0x1b8>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 0307 	and.w	r3, r3, #7
 8005ecc:	683a      	ldr	r2, [r7, #0]
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d20c      	bcs.n	8005eec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ed2:	4b22      	ldr	r3, [pc, #136]	; (8005f5c <HAL_RCC_ClockConfig+0x1b8>)
 8005ed4:	683a      	ldr	r2, [r7, #0]
 8005ed6:	b2d2      	uxtb	r2, r2
 8005ed8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005eda:	4b20      	ldr	r3, [pc, #128]	; (8005f5c <HAL_RCC_ClockConfig+0x1b8>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f003 0307 	and.w	r3, r3, #7
 8005ee2:	683a      	ldr	r2, [r7, #0]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d001      	beq.n	8005eec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e032      	b.n	8005f52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 0304 	and.w	r3, r3, #4
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d008      	beq.n	8005f0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ef8:	4b19      	ldr	r3, [pc, #100]	; (8005f60 <HAL_RCC_ClockConfig+0x1bc>)
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	4916      	ldr	r1, [pc, #88]	; (8005f60 <HAL_RCC_ClockConfig+0x1bc>)
 8005f06:	4313      	orrs	r3, r2
 8005f08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 0308 	and.w	r3, r3, #8
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d009      	beq.n	8005f2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f16:	4b12      	ldr	r3, [pc, #72]	; (8005f60 <HAL_RCC_ClockConfig+0x1bc>)
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	00db      	lsls	r3, r3, #3
 8005f24:	490e      	ldr	r1, [pc, #56]	; (8005f60 <HAL_RCC_ClockConfig+0x1bc>)
 8005f26:	4313      	orrs	r3, r2
 8005f28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005f2a:	f000 f821 	bl	8005f70 <HAL_RCC_GetSysClockFreq>
 8005f2e:	4602      	mov	r2, r0
 8005f30:	4b0b      	ldr	r3, [pc, #44]	; (8005f60 <HAL_RCC_ClockConfig+0x1bc>)
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	091b      	lsrs	r3, r3, #4
 8005f36:	f003 030f 	and.w	r3, r3, #15
 8005f3a:	490a      	ldr	r1, [pc, #40]	; (8005f64 <HAL_RCC_ClockConfig+0x1c0>)
 8005f3c:	5ccb      	ldrb	r3, [r1, r3]
 8005f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8005f42:	4a09      	ldr	r2, [pc, #36]	; (8005f68 <HAL_RCC_ClockConfig+0x1c4>)
 8005f44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005f46:	4b09      	ldr	r3, [pc, #36]	; (8005f6c <HAL_RCC_ClockConfig+0x1c8>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f7fc f80a 	bl	8001f64 <HAL_InitTick>

  return HAL_OK;
 8005f50:	2300      	movs	r3, #0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3710      	adds	r7, #16
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
 8005f5a:	bf00      	nop
 8005f5c:	40023c00 	.word	0x40023c00
 8005f60:	40023800 	.word	0x40023800
 8005f64:	0800b810 	.word	0x0800b810
 8005f68:	20000010 	.word	0x20000010
 8005f6c:	20000014 	.word	0x20000014

08005f70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f70:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005f74:	b084      	sub	sp, #16
 8005f76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	607b      	str	r3, [r7, #4]
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	60fb      	str	r3, [r7, #12]
 8005f80:	2300      	movs	r3, #0
 8005f82:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005f84:	2300      	movs	r3, #0
 8005f86:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f88:	4b67      	ldr	r3, [pc, #412]	; (8006128 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	f003 030c 	and.w	r3, r3, #12
 8005f90:	2b08      	cmp	r3, #8
 8005f92:	d00d      	beq.n	8005fb0 <HAL_RCC_GetSysClockFreq+0x40>
 8005f94:	2b08      	cmp	r3, #8
 8005f96:	f200 80bd 	bhi.w	8006114 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d002      	beq.n	8005fa4 <HAL_RCC_GetSysClockFreq+0x34>
 8005f9e:	2b04      	cmp	r3, #4
 8005fa0:	d003      	beq.n	8005faa <HAL_RCC_GetSysClockFreq+0x3a>
 8005fa2:	e0b7      	b.n	8006114 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005fa4:	4b61      	ldr	r3, [pc, #388]	; (800612c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005fa6:	60bb      	str	r3, [r7, #8]
       break;
 8005fa8:	e0b7      	b.n	800611a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005faa:	4b61      	ldr	r3, [pc, #388]	; (8006130 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005fac:	60bb      	str	r3, [r7, #8]
      break;
 8005fae:	e0b4      	b.n	800611a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005fb0:	4b5d      	ldr	r3, [pc, #372]	; (8006128 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fb8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005fba:	4b5b      	ldr	r3, [pc, #364]	; (8006128 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d04d      	beq.n	8006062 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fc6:	4b58      	ldr	r3, [pc, #352]	; (8006128 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	099b      	lsrs	r3, r3, #6
 8005fcc:	461a      	mov	r2, r3
 8005fce:	f04f 0300 	mov.w	r3, #0
 8005fd2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005fd6:	f04f 0100 	mov.w	r1, #0
 8005fda:	ea02 0800 	and.w	r8, r2, r0
 8005fde:	ea03 0901 	and.w	r9, r3, r1
 8005fe2:	4640      	mov	r0, r8
 8005fe4:	4649      	mov	r1, r9
 8005fe6:	f04f 0200 	mov.w	r2, #0
 8005fea:	f04f 0300 	mov.w	r3, #0
 8005fee:	014b      	lsls	r3, r1, #5
 8005ff0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005ff4:	0142      	lsls	r2, r0, #5
 8005ff6:	4610      	mov	r0, r2
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	ebb0 0008 	subs.w	r0, r0, r8
 8005ffe:	eb61 0109 	sbc.w	r1, r1, r9
 8006002:	f04f 0200 	mov.w	r2, #0
 8006006:	f04f 0300 	mov.w	r3, #0
 800600a:	018b      	lsls	r3, r1, #6
 800600c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006010:	0182      	lsls	r2, r0, #6
 8006012:	1a12      	subs	r2, r2, r0
 8006014:	eb63 0301 	sbc.w	r3, r3, r1
 8006018:	f04f 0000 	mov.w	r0, #0
 800601c:	f04f 0100 	mov.w	r1, #0
 8006020:	00d9      	lsls	r1, r3, #3
 8006022:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006026:	00d0      	lsls	r0, r2, #3
 8006028:	4602      	mov	r2, r0
 800602a:	460b      	mov	r3, r1
 800602c:	eb12 0208 	adds.w	r2, r2, r8
 8006030:	eb43 0309 	adc.w	r3, r3, r9
 8006034:	f04f 0000 	mov.w	r0, #0
 8006038:	f04f 0100 	mov.w	r1, #0
 800603c:	0259      	lsls	r1, r3, #9
 800603e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006042:	0250      	lsls	r0, r2, #9
 8006044:	4602      	mov	r2, r0
 8006046:	460b      	mov	r3, r1
 8006048:	4610      	mov	r0, r2
 800604a:	4619      	mov	r1, r3
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	461a      	mov	r2, r3
 8006050:	f04f 0300 	mov.w	r3, #0
 8006054:	f7fa f90c 	bl	8000270 <__aeabi_uldivmod>
 8006058:	4602      	mov	r2, r0
 800605a:	460b      	mov	r3, r1
 800605c:	4613      	mov	r3, r2
 800605e:	60fb      	str	r3, [r7, #12]
 8006060:	e04a      	b.n	80060f8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006062:	4b31      	ldr	r3, [pc, #196]	; (8006128 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	099b      	lsrs	r3, r3, #6
 8006068:	461a      	mov	r2, r3
 800606a:	f04f 0300 	mov.w	r3, #0
 800606e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006072:	f04f 0100 	mov.w	r1, #0
 8006076:	ea02 0400 	and.w	r4, r2, r0
 800607a:	ea03 0501 	and.w	r5, r3, r1
 800607e:	4620      	mov	r0, r4
 8006080:	4629      	mov	r1, r5
 8006082:	f04f 0200 	mov.w	r2, #0
 8006086:	f04f 0300 	mov.w	r3, #0
 800608a:	014b      	lsls	r3, r1, #5
 800608c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006090:	0142      	lsls	r2, r0, #5
 8006092:	4610      	mov	r0, r2
 8006094:	4619      	mov	r1, r3
 8006096:	1b00      	subs	r0, r0, r4
 8006098:	eb61 0105 	sbc.w	r1, r1, r5
 800609c:	f04f 0200 	mov.w	r2, #0
 80060a0:	f04f 0300 	mov.w	r3, #0
 80060a4:	018b      	lsls	r3, r1, #6
 80060a6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80060aa:	0182      	lsls	r2, r0, #6
 80060ac:	1a12      	subs	r2, r2, r0
 80060ae:	eb63 0301 	sbc.w	r3, r3, r1
 80060b2:	f04f 0000 	mov.w	r0, #0
 80060b6:	f04f 0100 	mov.w	r1, #0
 80060ba:	00d9      	lsls	r1, r3, #3
 80060bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80060c0:	00d0      	lsls	r0, r2, #3
 80060c2:	4602      	mov	r2, r0
 80060c4:	460b      	mov	r3, r1
 80060c6:	1912      	adds	r2, r2, r4
 80060c8:	eb45 0303 	adc.w	r3, r5, r3
 80060cc:	f04f 0000 	mov.w	r0, #0
 80060d0:	f04f 0100 	mov.w	r1, #0
 80060d4:	0299      	lsls	r1, r3, #10
 80060d6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80060da:	0290      	lsls	r0, r2, #10
 80060dc:	4602      	mov	r2, r0
 80060de:	460b      	mov	r3, r1
 80060e0:	4610      	mov	r0, r2
 80060e2:	4619      	mov	r1, r3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	461a      	mov	r2, r3
 80060e8:	f04f 0300 	mov.w	r3, #0
 80060ec:	f7fa f8c0 	bl	8000270 <__aeabi_uldivmod>
 80060f0:	4602      	mov	r2, r0
 80060f2:	460b      	mov	r3, r1
 80060f4:	4613      	mov	r3, r2
 80060f6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80060f8:	4b0b      	ldr	r3, [pc, #44]	; (8006128 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	0c1b      	lsrs	r3, r3, #16
 80060fe:	f003 0303 	and.w	r3, r3, #3
 8006102:	3301      	adds	r3, #1
 8006104:	005b      	lsls	r3, r3, #1
 8006106:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006110:	60bb      	str	r3, [r7, #8]
      break;
 8006112:	e002      	b.n	800611a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006114:	4b05      	ldr	r3, [pc, #20]	; (800612c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006116:	60bb      	str	r3, [r7, #8]
      break;
 8006118:	bf00      	nop
    }
  }
  return sysclockfreq;
 800611a:	68bb      	ldr	r3, [r7, #8]
}
 800611c:	4618      	mov	r0, r3
 800611e:	3710      	adds	r7, #16
 8006120:	46bd      	mov	sp, r7
 8006122:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006126:	bf00      	nop
 8006128:	40023800 	.word	0x40023800
 800612c:	00f42400 	.word	0x00f42400
 8006130:	007a1200 	.word	0x007a1200

08006134 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006134:	b480      	push	{r7}
 8006136:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006138:	4b03      	ldr	r3, [pc, #12]	; (8006148 <HAL_RCC_GetHCLKFreq+0x14>)
 800613a:	681b      	ldr	r3, [r3, #0]
}
 800613c:	4618      	mov	r0, r3
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr
 8006146:	bf00      	nop
 8006148:	20000010 	.word	0x20000010

0800614c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006150:	f7ff fff0 	bl	8006134 <HAL_RCC_GetHCLKFreq>
 8006154:	4602      	mov	r2, r0
 8006156:	4b05      	ldr	r3, [pc, #20]	; (800616c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	0a9b      	lsrs	r3, r3, #10
 800615c:	f003 0307 	and.w	r3, r3, #7
 8006160:	4903      	ldr	r1, [pc, #12]	; (8006170 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006162:	5ccb      	ldrb	r3, [r1, r3]
 8006164:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006168:	4618      	mov	r0, r3
 800616a:	bd80      	pop	{r7, pc}
 800616c:	40023800 	.word	0x40023800
 8006170:	0800b820 	.word	0x0800b820

08006174 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006178:	f7ff ffdc 	bl	8006134 <HAL_RCC_GetHCLKFreq>
 800617c:	4602      	mov	r2, r0
 800617e:	4b05      	ldr	r3, [pc, #20]	; (8006194 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	0b5b      	lsrs	r3, r3, #13
 8006184:	f003 0307 	and.w	r3, r3, #7
 8006188:	4903      	ldr	r1, [pc, #12]	; (8006198 <HAL_RCC_GetPCLK2Freq+0x24>)
 800618a:	5ccb      	ldrb	r3, [r1, r3]
 800618c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006190:	4618      	mov	r0, r3
 8006192:	bd80      	pop	{r7, pc}
 8006194:	40023800 	.word	0x40023800
 8006198:	0800b820 	.word	0x0800b820

0800619c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	220f      	movs	r2, #15
 80061aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80061ac:	4b12      	ldr	r3, [pc, #72]	; (80061f8 <HAL_RCC_GetClockConfig+0x5c>)
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	f003 0203 	and.w	r2, r3, #3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80061b8:	4b0f      	ldr	r3, [pc, #60]	; (80061f8 <HAL_RCC_GetClockConfig+0x5c>)
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80061c4:	4b0c      	ldr	r3, [pc, #48]	; (80061f8 <HAL_RCC_GetClockConfig+0x5c>)
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80061d0:	4b09      	ldr	r3, [pc, #36]	; (80061f8 <HAL_RCC_GetClockConfig+0x5c>)
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	08db      	lsrs	r3, r3, #3
 80061d6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80061de:	4b07      	ldr	r3, [pc, #28]	; (80061fc <HAL_RCC_GetClockConfig+0x60>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f003 0207 	and.w	r2, r3, #7
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	601a      	str	r2, [r3, #0]
}
 80061ea:	bf00      	nop
 80061ec:	370c      	adds	r7, #12
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr
 80061f6:	bf00      	nop
 80061f8:	40023800 	.word	0x40023800
 80061fc:	40023c00 	.word	0x40023c00

08006200 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b082      	sub	sp, #8
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d101      	bne.n	8006212 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	e041      	b.n	8006296 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006218:	b2db      	uxtb	r3, r3
 800621a:	2b00      	cmp	r3, #0
 800621c:	d106      	bne.n	800622c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f7fc f81e 	bl	8002268 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2202      	movs	r2, #2
 8006230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	3304      	adds	r3, #4
 800623c:	4619      	mov	r1, r3
 800623e:	4610      	mov	r0, r2
 8006240:	f000 fc7a 	bl	8006b38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3708      	adds	r7, #8
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
	...

080062a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b085      	sub	sp, #20
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d001      	beq.n	80062b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	e04e      	b.n	8006356 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2202      	movs	r2, #2
 80062bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68da      	ldr	r2, [r3, #12]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f042 0201 	orr.w	r2, r2, #1
 80062ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a23      	ldr	r2, [pc, #140]	; (8006364 <HAL_TIM_Base_Start_IT+0xc4>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d022      	beq.n	8006320 <HAL_TIM_Base_Start_IT+0x80>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062e2:	d01d      	beq.n	8006320 <HAL_TIM_Base_Start_IT+0x80>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a1f      	ldr	r2, [pc, #124]	; (8006368 <HAL_TIM_Base_Start_IT+0xc8>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d018      	beq.n	8006320 <HAL_TIM_Base_Start_IT+0x80>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a1e      	ldr	r2, [pc, #120]	; (800636c <HAL_TIM_Base_Start_IT+0xcc>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d013      	beq.n	8006320 <HAL_TIM_Base_Start_IT+0x80>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a1c      	ldr	r2, [pc, #112]	; (8006370 <HAL_TIM_Base_Start_IT+0xd0>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d00e      	beq.n	8006320 <HAL_TIM_Base_Start_IT+0x80>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a1b      	ldr	r2, [pc, #108]	; (8006374 <HAL_TIM_Base_Start_IT+0xd4>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d009      	beq.n	8006320 <HAL_TIM_Base_Start_IT+0x80>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a19      	ldr	r2, [pc, #100]	; (8006378 <HAL_TIM_Base_Start_IT+0xd8>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d004      	beq.n	8006320 <HAL_TIM_Base_Start_IT+0x80>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a18      	ldr	r2, [pc, #96]	; (800637c <HAL_TIM_Base_Start_IT+0xdc>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d111      	bne.n	8006344 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	f003 0307 	and.w	r3, r3, #7
 800632a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2b06      	cmp	r3, #6
 8006330:	d010      	beq.n	8006354 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f042 0201 	orr.w	r2, r2, #1
 8006340:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006342:	e007      	b.n	8006354 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f042 0201 	orr.w	r2, r2, #1
 8006352:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006354:	2300      	movs	r3, #0
}
 8006356:	4618      	mov	r0, r3
 8006358:	3714      	adds	r7, #20
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	40010000 	.word	0x40010000
 8006368:	40000400 	.word	0x40000400
 800636c:	40000800 	.word	0x40000800
 8006370:	40000c00 	.word	0x40000c00
 8006374:	40010400 	.word	0x40010400
 8006378:	40014000 	.word	0x40014000
 800637c:	40001800 	.word	0x40001800

08006380 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b082      	sub	sp, #8
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d101      	bne.n	8006392 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e041      	b.n	8006416 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006398:	b2db      	uxtb	r3, r3
 800639a:	2b00      	cmp	r3, #0
 800639c:	d106      	bne.n	80063ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 f839 	bl	800641e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2202      	movs	r2, #2
 80063b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	3304      	adds	r3, #4
 80063bc:	4619      	mov	r1, r3
 80063be:	4610      	mov	r0, r2
 80063c0:	f000 fbba 	bl	8006b38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2201      	movs	r2, #1
 8006400:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3708      	adds	r7, #8
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800641e:	b480      	push	{r7}
 8006420:	b083      	sub	sp, #12
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006426:	bf00      	nop
 8006428:	370c      	adds	r7, #12
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr
	...

08006434 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d109      	bne.n	8006458 <HAL_TIM_PWM_Start+0x24>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800644a:	b2db      	uxtb	r3, r3
 800644c:	2b01      	cmp	r3, #1
 800644e:	bf14      	ite	ne
 8006450:	2301      	movne	r3, #1
 8006452:	2300      	moveq	r3, #0
 8006454:	b2db      	uxtb	r3, r3
 8006456:	e022      	b.n	800649e <HAL_TIM_PWM_Start+0x6a>
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	2b04      	cmp	r3, #4
 800645c:	d109      	bne.n	8006472 <HAL_TIM_PWM_Start+0x3e>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006464:	b2db      	uxtb	r3, r3
 8006466:	2b01      	cmp	r3, #1
 8006468:	bf14      	ite	ne
 800646a:	2301      	movne	r3, #1
 800646c:	2300      	moveq	r3, #0
 800646e:	b2db      	uxtb	r3, r3
 8006470:	e015      	b.n	800649e <HAL_TIM_PWM_Start+0x6a>
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	2b08      	cmp	r3, #8
 8006476:	d109      	bne.n	800648c <HAL_TIM_PWM_Start+0x58>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800647e:	b2db      	uxtb	r3, r3
 8006480:	2b01      	cmp	r3, #1
 8006482:	bf14      	ite	ne
 8006484:	2301      	movne	r3, #1
 8006486:	2300      	moveq	r3, #0
 8006488:	b2db      	uxtb	r3, r3
 800648a:	e008      	b.n	800649e <HAL_TIM_PWM_Start+0x6a>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006492:	b2db      	uxtb	r3, r3
 8006494:	2b01      	cmp	r3, #1
 8006496:	bf14      	ite	ne
 8006498:	2301      	movne	r3, #1
 800649a:	2300      	moveq	r3, #0
 800649c:	b2db      	uxtb	r3, r3
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d001      	beq.n	80064a6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	e07c      	b.n	80065a0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d104      	bne.n	80064b6 <HAL_TIM_PWM_Start+0x82>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2202      	movs	r2, #2
 80064b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064b4:	e013      	b.n	80064de <HAL_TIM_PWM_Start+0xaa>
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	2b04      	cmp	r3, #4
 80064ba:	d104      	bne.n	80064c6 <HAL_TIM_PWM_Start+0x92>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2202      	movs	r2, #2
 80064c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064c4:	e00b      	b.n	80064de <HAL_TIM_PWM_Start+0xaa>
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	2b08      	cmp	r3, #8
 80064ca:	d104      	bne.n	80064d6 <HAL_TIM_PWM_Start+0xa2>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2202      	movs	r2, #2
 80064d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064d4:	e003      	b.n	80064de <HAL_TIM_PWM_Start+0xaa>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2202      	movs	r2, #2
 80064da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	2201      	movs	r2, #1
 80064e4:	6839      	ldr	r1, [r7, #0]
 80064e6:	4618      	mov	r0, r3
 80064e8:	f000 fe10 	bl	800710c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a2d      	ldr	r2, [pc, #180]	; (80065a8 <HAL_TIM_PWM_Start+0x174>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d004      	beq.n	8006500 <HAL_TIM_PWM_Start+0xcc>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a2c      	ldr	r2, [pc, #176]	; (80065ac <HAL_TIM_PWM_Start+0x178>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d101      	bne.n	8006504 <HAL_TIM_PWM_Start+0xd0>
 8006500:	2301      	movs	r3, #1
 8006502:	e000      	b.n	8006506 <HAL_TIM_PWM_Start+0xd2>
 8006504:	2300      	movs	r3, #0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d007      	beq.n	800651a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006518:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a22      	ldr	r2, [pc, #136]	; (80065a8 <HAL_TIM_PWM_Start+0x174>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d022      	beq.n	800656a <HAL_TIM_PWM_Start+0x136>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800652c:	d01d      	beq.n	800656a <HAL_TIM_PWM_Start+0x136>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a1f      	ldr	r2, [pc, #124]	; (80065b0 <HAL_TIM_PWM_Start+0x17c>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d018      	beq.n	800656a <HAL_TIM_PWM_Start+0x136>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a1d      	ldr	r2, [pc, #116]	; (80065b4 <HAL_TIM_PWM_Start+0x180>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d013      	beq.n	800656a <HAL_TIM_PWM_Start+0x136>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a1c      	ldr	r2, [pc, #112]	; (80065b8 <HAL_TIM_PWM_Start+0x184>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d00e      	beq.n	800656a <HAL_TIM_PWM_Start+0x136>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a16      	ldr	r2, [pc, #88]	; (80065ac <HAL_TIM_PWM_Start+0x178>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d009      	beq.n	800656a <HAL_TIM_PWM_Start+0x136>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a18      	ldr	r2, [pc, #96]	; (80065bc <HAL_TIM_PWM_Start+0x188>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d004      	beq.n	800656a <HAL_TIM_PWM_Start+0x136>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a16      	ldr	r2, [pc, #88]	; (80065c0 <HAL_TIM_PWM_Start+0x18c>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d111      	bne.n	800658e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	f003 0307 	and.w	r3, r3, #7
 8006574:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2b06      	cmp	r3, #6
 800657a:	d010      	beq.n	800659e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f042 0201 	orr.w	r2, r2, #1
 800658a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800658c:	e007      	b.n	800659e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f042 0201 	orr.w	r2, r2, #1
 800659c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800659e:	2300      	movs	r3, #0
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3710      	adds	r7, #16
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	40010000 	.word	0x40010000
 80065ac:	40010400 	.word	0x40010400
 80065b0:	40000400 	.word	0x40000400
 80065b4:	40000800 	.word	0x40000800
 80065b8:	40000c00 	.word	0x40000c00
 80065bc:	40014000 	.word	0x40014000
 80065c0:	40001800 	.word	0x40001800

080065c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b082      	sub	sp, #8
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	f003 0302 	and.w	r3, r3, #2
 80065d6:	2b02      	cmp	r3, #2
 80065d8:	d122      	bne.n	8006620 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	68db      	ldr	r3, [r3, #12]
 80065e0:	f003 0302 	and.w	r3, r3, #2
 80065e4:	2b02      	cmp	r3, #2
 80065e6:	d11b      	bne.n	8006620 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f06f 0202 	mvn.w	r2, #2
 80065f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2201      	movs	r2, #1
 80065f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	699b      	ldr	r3, [r3, #24]
 80065fe:	f003 0303 	and.w	r3, r3, #3
 8006602:	2b00      	cmp	r3, #0
 8006604:	d003      	beq.n	800660e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 fa77 	bl	8006afa <HAL_TIM_IC_CaptureCallback>
 800660c:	e005      	b.n	800661a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 fa69 	bl	8006ae6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f000 fa7a 	bl	8006b0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	f003 0304 	and.w	r3, r3, #4
 800662a:	2b04      	cmp	r3, #4
 800662c:	d122      	bne.n	8006674 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	f003 0304 	and.w	r3, r3, #4
 8006638:	2b04      	cmp	r3, #4
 800663a:	d11b      	bne.n	8006674 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f06f 0204 	mvn.w	r2, #4
 8006644:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2202      	movs	r2, #2
 800664a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	699b      	ldr	r3, [r3, #24]
 8006652:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006656:	2b00      	cmp	r3, #0
 8006658:	d003      	beq.n	8006662 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 fa4d 	bl	8006afa <HAL_TIM_IC_CaptureCallback>
 8006660:	e005      	b.n	800666e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 fa3f 	bl	8006ae6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 fa50 	bl	8006b0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	691b      	ldr	r3, [r3, #16]
 800667a:	f003 0308 	and.w	r3, r3, #8
 800667e:	2b08      	cmp	r3, #8
 8006680:	d122      	bne.n	80066c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	f003 0308 	and.w	r3, r3, #8
 800668c:	2b08      	cmp	r3, #8
 800668e:	d11b      	bne.n	80066c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f06f 0208 	mvn.w	r2, #8
 8006698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2204      	movs	r2, #4
 800669e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	69db      	ldr	r3, [r3, #28]
 80066a6:	f003 0303 	and.w	r3, r3, #3
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d003      	beq.n	80066b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 fa23 	bl	8006afa <HAL_TIM_IC_CaptureCallback>
 80066b4:	e005      	b.n	80066c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 fa15 	bl	8006ae6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 fa26 	bl	8006b0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	691b      	ldr	r3, [r3, #16]
 80066ce:	f003 0310 	and.w	r3, r3, #16
 80066d2:	2b10      	cmp	r3, #16
 80066d4:	d122      	bne.n	800671c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	f003 0310 	and.w	r3, r3, #16
 80066e0:	2b10      	cmp	r3, #16
 80066e2:	d11b      	bne.n	800671c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f06f 0210 	mvn.w	r2, #16
 80066ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2208      	movs	r2, #8
 80066f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	69db      	ldr	r3, [r3, #28]
 80066fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d003      	beq.n	800670a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 f9f9 	bl	8006afa <HAL_TIM_IC_CaptureCallback>
 8006708:	e005      	b.n	8006716 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 f9eb 	bl	8006ae6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 f9fc 	bl	8006b0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	691b      	ldr	r3, [r3, #16]
 8006722:	f003 0301 	and.w	r3, r3, #1
 8006726:	2b01      	cmp	r3, #1
 8006728:	d10e      	bne.n	8006748 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	f003 0301 	and.w	r3, r3, #1
 8006734:	2b01      	cmp	r3, #1
 8006736:	d107      	bne.n	8006748 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f06f 0201 	mvn.w	r2, #1
 8006740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f7fb f8f0 	bl	8001928 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	691b      	ldr	r3, [r3, #16]
 800674e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006752:	2b80      	cmp	r3, #128	; 0x80
 8006754:	d10e      	bne.n	8006774 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006760:	2b80      	cmp	r3, #128	; 0x80
 8006762:	d107      	bne.n	8006774 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800676c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 fd78 	bl	8007264 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	691b      	ldr	r3, [r3, #16]
 800677a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800677e:	2b40      	cmp	r3, #64	; 0x40
 8006780:	d10e      	bne.n	80067a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800678c:	2b40      	cmp	r3, #64	; 0x40
 800678e:	d107      	bne.n	80067a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 f9c1 	bl	8006b22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	691b      	ldr	r3, [r3, #16]
 80067a6:	f003 0320 	and.w	r3, r3, #32
 80067aa:	2b20      	cmp	r3, #32
 80067ac:	d10e      	bne.n	80067cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	68db      	ldr	r3, [r3, #12]
 80067b4:	f003 0320 	and.w	r3, r3, #32
 80067b8:	2b20      	cmp	r3, #32
 80067ba:	d107      	bne.n	80067cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f06f 0220 	mvn.w	r2, #32
 80067c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 fd42 	bl	8007250 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80067cc:	bf00      	nop
 80067ce:	3708      	adds	r7, #8
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b086      	sub	sp, #24
 80067d8:	af00      	add	r7, sp, #0
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	60b9      	str	r1, [r7, #8]
 80067de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067e0:	2300      	movs	r3, #0
 80067e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d101      	bne.n	80067f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80067ee:	2302      	movs	r3, #2
 80067f0:	e0ae      	b.n	8006950 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2201      	movs	r2, #1
 80067f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2b0c      	cmp	r3, #12
 80067fe:	f200 809f 	bhi.w	8006940 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006802:	a201      	add	r2, pc, #4	; (adr r2, 8006808 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006808:	0800683d 	.word	0x0800683d
 800680c:	08006941 	.word	0x08006941
 8006810:	08006941 	.word	0x08006941
 8006814:	08006941 	.word	0x08006941
 8006818:	0800687d 	.word	0x0800687d
 800681c:	08006941 	.word	0x08006941
 8006820:	08006941 	.word	0x08006941
 8006824:	08006941 	.word	0x08006941
 8006828:	080068bf 	.word	0x080068bf
 800682c:	08006941 	.word	0x08006941
 8006830:	08006941 	.word	0x08006941
 8006834:	08006941 	.word	0x08006941
 8006838:	080068ff 	.word	0x080068ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	68b9      	ldr	r1, [r7, #8]
 8006842:	4618      	mov	r0, r3
 8006844:	f000 fa18 	bl	8006c78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	699a      	ldr	r2, [r3, #24]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f042 0208 	orr.w	r2, r2, #8
 8006856:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	699a      	ldr	r2, [r3, #24]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f022 0204 	bic.w	r2, r2, #4
 8006866:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	6999      	ldr	r1, [r3, #24]
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	691a      	ldr	r2, [r3, #16]
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	430a      	orrs	r2, r1
 8006878:	619a      	str	r2, [r3, #24]
      break;
 800687a:	e064      	b.n	8006946 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	68b9      	ldr	r1, [r7, #8]
 8006882:	4618      	mov	r0, r3
 8006884:	f000 fa68 	bl	8006d58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	699a      	ldr	r2, [r3, #24]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006896:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	699a      	ldr	r2, [r3, #24]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	6999      	ldr	r1, [r3, #24]
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	691b      	ldr	r3, [r3, #16]
 80068b2:	021a      	lsls	r2, r3, #8
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	430a      	orrs	r2, r1
 80068ba:	619a      	str	r2, [r3, #24]
      break;
 80068bc:	e043      	b.n	8006946 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	68b9      	ldr	r1, [r7, #8]
 80068c4:	4618      	mov	r0, r3
 80068c6:	f000 fabd 	bl	8006e44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	69da      	ldr	r2, [r3, #28]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f042 0208 	orr.w	r2, r2, #8
 80068d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	69da      	ldr	r2, [r3, #28]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f022 0204 	bic.w	r2, r2, #4
 80068e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	69d9      	ldr	r1, [r3, #28]
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	691a      	ldr	r2, [r3, #16]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	430a      	orrs	r2, r1
 80068fa:	61da      	str	r2, [r3, #28]
      break;
 80068fc:	e023      	b.n	8006946 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	68b9      	ldr	r1, [r7, #8]
 8006904:	4618      	mov	r0, r3
 8006906:	f000 fb11 	bl	8006f2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	69da      	ldr	r2, [r3, #28]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006918:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	69da      	ldr	r2, [r3, #28]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006928:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	69d9      	ldr	r1, [r3, #28]
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	691b      	ldr	r3, [r3, #16]
 8006934:	021a      	lsls	r2, r3, #8
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	430a      	orrs	r2, r1
 800693c:	61da      	str	r2, [r3, #28]
      break;
 800693e:	e002      	b.n	8006946 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	75fb      	strb	r3, [r7, #23]
      break;
 8006944:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2200      	movs	r2, #0
 800694a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800694e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006950:	4618      	mov	r0, r3
 8006952:	3718      	adds	r7, #24
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006962:	2300      	movs	r3, #0
 8006964:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800696c:	2b01      	cmp	r3, #1
 800696e:	d101      	bne.n	8006974 <HAL_TIM_ConfigClockSource+0x1c>
 8006970:	2302      	movs	r3, #2
 8006972:	e0b4      	b.n	8006ade <HAL_TIM_ConfigClockSource+0x186>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2202      	movs	r2, #2
 8006980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006992:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800699a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68ba      	ldr	r2, [r7, #8]
 80069a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069ac:	d03e      	beq.n	8006a2c <HAL_TIM_ConfigClockSource+0xd4>
 80069ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069b2:	f200 8087 	bhi.w	8006ac4 <HAL_TIM_ConfigClockSource+0x16c>
 80069b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069ba:	f000 8086 	beq.w	8006aca <HAL_TIM_ConfigClockSource+0x172>
 80069be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069c2:	d87f      	bhi.n	8006ac4 <HAL_TIM_ConfigClockSource+0x16c>
 80069c4:	2b70      	cmp	r3, #112	; 0x70
 80069c6:	d01a      	beq.n	80069fe <HAL_TIM_ConfigClockSource+0xa6>
 80069c8:	2b70      	cmp	r3, #112	; 0x70
 80069ca:	d87b      	bhi.n	8006ac4 <HAL_TIM_ConfigClockSource+0x16c>
 80069cc:	2b60      	cmp	r3, #96	; 0x60
 80069ce:	d050      	beq.n	8006a72 <HAL_TIM_ConfigClockSource+0x11a>
 80069d0:	2b60      	cmp	r3, #96	; 0x60
 80069d2:	d877      	bhi.n	8006ac4 <HAL_TIM_ConfigClockSource+0x16c>
 80069d4:	2b50      	cmp	r3, #80	; 0x50
 80069d6:	d03c      	beq.n	8006a52 <HAL_TIM_ConfigClockSource+0xfa>
 80069d8:	2b50      	cmp	r3, #80	; 0x50
 80069da:	d873      	bhi.n	8006ac4 <HAL_TIM_ConfigClockSource+0x16c>
 80069dc:	2b40      	cmp	r3, #64	; 0x40
 80069de:	d058      	beq.n	8006a92 <HAL_TIM_ConfigClockSource+0x13a>
 80069e0:	2b40      	cmp	r3, #64	; 0x40
 80069e2:	d86f      	bhi.n	8006ac4 <HAL_TIM_ConfigClockSource+0x16c>
 80069e4:	2b30      	cmp	r3, #48	; 0x30
 80069e6:	d064      	beq.n	8006ab2 <HAL_TIM_ConfigClockSource+0x15a>
 80069e8:	2b30      	cmp	r3, #48	; 0x30
 80069ea:	d86b      	bhi.n	8006ac4 <HAL_TIM_ConfigClockSource+0x16c>
 80069ec:	2b20      	cmp	r3, #32
 80069ee:	d060      	beq.n	8006ab2 <HAL_TIM_ConfigClockSource+0x15a>
 80069f0:	2b20      	cmp	r3, #32
 80069f2:	d867      	bhi.n	8006ac4 <HAL_TIM_ConfigClockSource+0x16c>
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d05c      	beq.n	8006ab2 <HAL_TIM_ConfigClockSource+0x15a>
 80069f8:	2b10      	cmp	r3, #16
 80069fa:	d05a      	beq.n	8006ab2 <HAL_TIM_ConfigClockSource+0x15a>
 80069fc:	e062      	b.n	8006ac4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6818      	ldr	r0, [r3, #0]
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	6899      	ldr	r1, [r3, #8]
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	685a      	ldr	r2, [r3, #4]
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	68db      	ldr	r3, [r3, #12]
 8006a0e:	f000 fb5d 	bl	80070cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006a20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	68ba      	ldr	r2, [r7, #8]
 8006a28:	609a      	str	r2, [r3, #8]
      break;
 8006a2a:	e04f      	b.n	8006acc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6818      	ldr	r0, [r3, #0]
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	6899      	ldr	r1, [r3, #8]
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	685a      	ldr	r2, [r3, #4]
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	f000 fb46 	bl	80070cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	689a      	ldr	r2, [r3, #8]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a4e:	609a      	str	r2, [r3, #8]
      break;
 8006a50:	e03c      	b.n	8006acc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6818      	ldr	r0, [r3, #0]
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	6859      	ldr	r1, [r3, #4]
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	68db      	ldr	r3, [r3, #12]
 8006a5e:	461a      	mov	r2, r3
 8006a60:	f000 faba 	bl	8006fd8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	2150      	movs	r1, #80	; 0x50
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f000 fb13 	bl	8007096 <TIM_ITRx_SetConfig>
      break;
 8006a70:	e02c      	b.n	8006acc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6818      	ldr	r0, [r3, #0]
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	6859      	ldr	r1, [r3, #4]
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	68db      	ldr	r3, [r3, #12]
 8006a7e:	461a      	mov	r2, r3
 8006a80:	f000 fad9 	bl	8007036 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	2160      	movs	r1, #96	; 0x60
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f000 fb03 	bl	8007096 <TIM_ITRx_SetConfig>
      break;
 8006a90:	e01c      	b.n	8006acc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6818      	ldr	r0, [r3, #0]
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	6859      	ldr	r1, [r3, #4]
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	68db      	ldr	r3, [r3, #12]
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	f000 fa9a 	bl	8006fd8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	2140      	movs	r1, #64	; 0x40
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f000 faf3 	bl	8007096 <TIM_ITRx_SetConfig>
      break;
 8006ab0:	e00c      	b.n	8006acc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4619      	mov	r1, r3
 8006abc:	4610      	mov	r0, r2
 8006abe:	f000 faea 	bl	8007096 <TIM_ITRx_SetConfig>
      break;
 8006ac2:	e003      	b.n	8006acc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	73fb      	strb	r3, [r7, #15]
      break;
 8006ac8:	e000      	b.n	8006acc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006aca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3710      	adds	r7, #16
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}

08006ae6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ae6:	b480      	push	{r7}
 8006ae8:	b083      	sub	sp, #12
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006aee:	bf00      	nop
 8006af0:	370c      	adds	r7, #12
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr

08006afa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006afa:	b480      	push	{r7}
 8006afc:	b083      	sub	sp, #12
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b02:	bf00      	nop
 8006b04:	370c      	adds	r7, #12
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr

08006b0e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b0e:	b480      	push	{r7}
 8006b10:	b083      	sub	sp, #12
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b16:	bf00      	nop
 8006b18:	370c      	adds	r7, #12
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr

08006b22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b22:	b480      	push	{r7}
 8006b24:	b083      	sub	sp, #12
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b2a:	bf00      	nop
 8006b2c:	370c      	adds	r7, #12
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr
	...

08006b38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b085      	sub	sp, #20
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	4a40      	ldr	r2, [pc, #256]	; (8006c4c <TIM_Base_SetConfig+0x114>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d013      	beq.n	8006b78 <TIM_Base_SetConfig+0x40>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b56:	d00f      	beq.n	8006b78 <TIM_Base_SetConfig+0x40>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	4a3d      	ldr	r2, [pc, #244]	; (8006c50 <TIM_Base_SetConfig+0x118>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d00b      	beq.n	8006b78 <TIM_Base_SetConfig+0x40>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	4a3c      	ldr	r2, [pc, #240]	; (8006c54 <TIM_Base_SetConfig+0x11c>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d007      	beq.n	8006b78 <TIM_Base_SetConfig+0x40>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4a3b      	ldr	r2, [pc, #236]	; (8006c58 <TIM_Base_SetConfig+0x120>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d003      	beq.n	8006b78 <TIM_Base_SetConfig+0x40>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a3a      	ldr	r2, [pc, #232]	; (8006c5c <TIM_Base_SetConfig+0x124>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d108      	bne.n	8006b8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	68fa      	ldr	r2, [r7, #12]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4a2f      	ldr	r2, [pc, #188]	; (8006c4c <TIM_Base_SetConfig+0x114>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d02b      	beq.n	8006bea <TIM_Base_SetConfig+0xb2>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b98:	d027      	beq.n	8006bea <TIM_Base_SetConfig+0xb2>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a2c      	ldr	r2, [pc, #176]	; (8006c50 <TIM_Base_SetConfig+0x118>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d023      	beq.n	8006bea <TIM_Base_SetConfig+0xb2>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4a2b      	ldr	r2, [pc, #172]	; (8006c54 <TIM_Base_SetConfig+0x11c>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d01f      	beq.n	8006bea <TIM_Base_SetConfig+0xb2>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4a2a      	ldr	r2, [pc, #168]	; (8006c58 <TIM_Base_SetConfig+0x120>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d01b      	beq.n	8006bea <TIM_Base_SetConfig+0xb2>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4a29      	ldr	r2, [pc, #164]	; (8006c5c <TIM_Base_SetConfig+0x124>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d017      	beq.n	8006bea <TIM_Base_SetConfig+0xb2>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4a28      	ldr	r2, [pc, #160]	; (8006c60 <TIM_Base_SetConfig+0x128>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d013      	beq.n	8006bea <TIM_Base_SetConfig+0xb2>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4a27      	ldr	r2, [pc, #156]	; (8006c64 <TIM_Base_SetConfig+0x12c>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d00f      	beq.n	8006bea <TIM_Base_SetConfig+0xb2>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4a26      	ldr	r2, [pc, #152]	; (8006c68 <TIM_Base_SetConfig+0x130>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d00b      	beq.n	8006bea <TIM_Base_SetConfig+0xb2>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4a25      	ldr	r2, [pc, #148]	; (8006c6c <TIM_Base_SetConfig+0x134>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d007      	beq.n	8006bea <TIM_Base_SetConfig+0xb2>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4a24      	ldr	r2, [pc, #144]	; (8006c70 <TIM_Base_SetConfig+0x138>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d003      	beq.n	8006bea <TIM_Base_SetConfig+0xb2>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	4a23      	ldr	r2, [pc, #140]	; (8006c74 <TIM_Base_SetConfig+0x13c>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d108      	bne.n	8006bfc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	68fa      	ldr	r2, [r7, #12]
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	695b      	ldr	r3, [r3, #20]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	68fa      	ldr	r2, [r7, #12]
 8006c0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	689a      	ldr	r2, [r3, #8]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	4a0a      	ldr	r2, [pc, #40]	; (8006c4c <TIM_Base_SetConfig+0x114>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d003      	beq.n	8006c30 <TIM_Base_SetConfig+0xf8>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	4a0c      	ldr	r2, [pc, #48]	; (8006c5c <TIM_Base_SetConfig+0x124>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d103      	bne.n	8006c38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	691a      	ldr	r2, [r3, #16]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	615a      	str	r2, [r3, #20]
}
 8006c3e:	bf00      	nop
 8006c40:	3714      	adds	r7, #20
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr
 8006c4a:	bf00      	nop
 8006c4c:	40010000 	.word	0x40010000
 8006c50:	40000400 	.word	0x40000400
 8006c54:	40000800 	.word	0x40000800
 8006c58:	40000c00 	.word	0x40000c00
 8006c5c:	40010400 	.word	0x40010400
 8006c60:	40014000 	.word	0x40014000
 8006c64:	40014400 	.word	0x40014400
 8006c68:	40014800 	.word	0x40014800
 8006c6c:	40001800 	.word	0x40001800
 8006c70:	40001c00 	.word	0x40001c00
 8006c74:	40002000 	.word	0x40002000

08006c78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b087      	sub	sp, #28
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6a1b      	ldr	r3, [r3, #32]
 8006c86:	f023 0201 	bic.w	r2, r3, #1
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6a1b      	ldr	r3, [r3, #32]
 8006c92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	699b      	ldr	r3, [r3, #24]
 8006c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ca6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f023 0303 	bic.w	r3, r3, #3
 8006cae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	68fa      	ldr	r2, [r7, #12]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	f023 0302 	bic.w	r3, r3, #2
 8006cc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	697a      	ldr	r2, [r7, #20]
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	4a20      	ldr	r2, [pc, #128]	; (8006d50 <TIM_OC1_SetConfig+0xd8>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d003      	beq.n	8006cdc <TIM_OC1_SetConfig+0x64>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	4a1f      	ldr	r2, [pc, #124]	; (8006d54 <TIM_OC1_SetConfig+0xdc>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d10c      	bne.n	8006cf6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	f023 0308 	bic.w	r3, r3, #8
 8006ce2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	697a      	ldr	r2, [r7, #20]
 8006cea:	4313      	orrs	r3, r2
 8006cec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	f023 0304 	bic.w	r3, r3, #4
 8006cf4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	4a15      	ldr	r2, [pc, #84]	; (8006d50 <TIM_OC1_SetConfig+0xd8>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d003      	beq.n	8006d06 <TIM_OC1_SetConfig+0x8e>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	4a14      	ldr	r2, [pc, #80]	; (8006d54 <TIM_OC1_SetConfig+0xdc>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d111      	bne.n	8006d2a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	695b      	ldr	r3, [r3, #20]
 8006d1a:	693a      	ldr	r2, [r7, #16]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	699b      	ldr	r3, [r3, #24]
 8006d24:	693a      	ldr	r2, [r7, #16]
 8006d26:	4313      	orrs	r3, r2
 8006d28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	693a      	ldr	r2, [r7, #16]
 8006d2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	68fa      	ldr	r2, [r7, #12]
 8006d34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	685a      	ldr	r2, [r3, #4]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	697a      	ldr	r2, [r7, #20]
 8006d42:	621a      	str	r2, [r3, #32]
}
 8006d44:	bf00      	nop
 8006d46:	371c      	adds	r7, #28
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr
 8006d50:	40010000 	.word	0x40010000
 8006d54:	40010400 	.word	0x40010400

08006d58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b087      	sub	sp, #28
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6a1b      	ldr	r3, [r3, #32]
 8006d66:	f023 0210 	bic.w	r2, r3, #16
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6a1b      	ldr	r3, [r3, #32]
 8006d72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	699b      	ldr	r3, [r3, #24]
 8006d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	021b      	lsls	r3, r3, #8
 8006d96:	68fa      	ldr	r2, [r7, #12]
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	f023 0320 	bic.w	r3, r3, #32
 8006da2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	011b      	lsls	r3, r3, #4
 8006daa:	697a      	ldr	r2, [r7, #20]
 8006dac:	4313      	orrs	r3, r2
 8006dae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	4a22      	ldr	r2, [pc, #136]	; (8006e3c <TIM_OC2_SetConfig+0xe4>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d003      	beq.n	8006dc0 <TIM_OC2_SetConfig+0x68>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	4a21      	ldr	r2, [pc, #132]	; (8006e40 <TIM_OC2_SetConfig+0xe8>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d10d      	bne.n	8006ddc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006dc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	68db      	ldr	r3, [r3, #12]
 8006dcc:	011b      	lsls	r3, r3, #4
 8006dce:	697a      	ldr	r2, [r7, #20]
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dda:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4a17      	ldr	r2, [pc, #92]	; (8006e3c <TIM_OC2_SetConfig+0xe4>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d003      	beq.n	8006dec <TIM_OC2_SetConfig+0x94>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	4a16      	ldr	r2, [pc, #88]	; (8006e40 <TIM_OC2_SetConfig+0xe8>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d113      	bne.n	8006e14 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006df2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006dfa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	695b      	ldr	r3, [r3, #20]
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	693a      	ldr	r2, [r7, #16]
 8006e04:	4313      	orrs	r3, r2
 8006e06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	699b      	ldr	r3, [r3, #24]
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	693a      	ldr	r2, [r7, #16]
 8006e10:	4313      	orrs	r3, r2
 8006e12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	693a      	ldr	r2, [r7, #16]
 8006e18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	68fa      	ldr	r2, [r7, #12]
 8006e1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	685a      	ldr	r2, [r3, #4]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	697a      	ldr	r2, [r7, #20]
 8006e2c:	621a      	str	r2, [r3, #32]
}
 8006e2e:	bf00      	nop
 8006e30:	371c      	adds	r7, #28
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr
 8006e3a:	bf00      	nop
 8006e3c:	40010000 	.word	0x40010000
 8006e40:	40010400 	.word	0x40010400

08006e44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b087      	sub	sp, #28
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6a1b      	ldr	r3, [r3, #32]
 8006e52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6a1b      	ldr	r3, [r3, #32]
 8006e5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	69db      	ldr	r3, [r3, #28]
 8006e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f023 0303 	bic.w	r3, r3, #3
 8006e7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	68fa      	ldr	r2, [r7, #12]
 8006e82:	4313      	orrs	r3, r2
 8006e84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	021b      	lsls	r3, r3, #8
 8006e94:	697a      	ldr	r2, [r7, #20]
 8006e96:	4313      	orrs	r3, r2
 8006e98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	4a21      	ldr	r2, [pc, #132]	; (8006f24 <TIM_OC3_SetConfig+0xe0>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d003      	beq.n	8006eaa <TIM_OC3_SetConfig+0x66>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	4a20      	ldr	r2, [pc, #128]	; (8006f28 <TIM_OC3_SetConfig+0xe4>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d10d      	bne.n	8006ec6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006eb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	68db      	ldr	r3, [r3, #12]
 8006eb6:	021b      	lsls	r3, r3, #8
 8006eb8:	697a      	ldr	r2, [r7, #20]
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ec4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	4a16      	ldr	r2, [pc, #88]	; (8006f24 <TIM_OC3_SetConfig+0xe0>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d003      	beq.n	8006ed6 <TIM_OC3_SetConfig+0x92>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	4a15      	ldr	r2, [pc, #84]	; (8006f28 <TIM_OC3_SetConfig+0xe4>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d113      	bne.n	8006efe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006edc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ee4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	695b      	ldr	r3, [r3, #20]
 8006eea:	011b      	lsls	r3, r3, #4
 8006eec:	693a      	ldr	r2, [r7, #16]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	699b      	ldr	r3, [r3, #24]
 8006ef6:	011b      	lsls	r3, r3, #4
 8006ef8:	693a      	ldr	r2, [r7, #16]
 8006efa:	4313      	orrs	r3, r2
 8006efc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	693a      	ldr	r2, [r7, #16]
 8006f02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	68fa      	ldr	r2, [r7, #12]
 8006f08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	685a      	ldr	r2, [r3, #4]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	697a      	ldr	r2, [r7, #20]
 8006f16:	621a      	str	r2, [r3, #32]
}
 8006f18:	bf00      	nop
 8006f1a:	371c      	adds	r7, #28
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr
 8006f24:	40010000 	.word	0x40010000
 8006f28:	40010400 	.word	0x40010400

08006f2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b087      	sub	sp, #28
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a1b      	ldr	r3, [r3, #32]
 8006f3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6a1b      	ldr	r3, [r3, #32]
 8006f46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	69db      	ldr	r3, [r3, #28]
 8006f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	021b      	lsls	r3, r3, #8
 8006f6a:	68fa      	ldr	r2, [r7, #12]
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	031b      	lsls	r3, r3, #12
 8006f7e:	693a      	ldr	r2, [r7, #16]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	4a12      	ldr	r2, [pc, #72]	; (8006fd0 <TIM_OC4_SetConfig+0xa4>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d003      	beq.n	8006f94 <TIM_OC4_SetConfig+0x68>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	4a11      	ldr	r2, [pc, #68]	; (8006fd4 <TIM_OC4_SetConfig+0xa8>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d109      	bne.n	8006fa8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	695b      	ldr	r3, [r3, #20]
 8006fa0:	019b      	lsls	r3, r3, #6
 8006fa2:	697a      	ldr	r2, [r7, #20]
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	697a      	ldr	r2, [r7, #20]
 8006fac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	68fa      	ldr	r2, [r7, #12]
 8006fb2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	685a      	ldr	r2, [r3, #4]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	693a      	ldr	r2, [r7, #16]
 8006fc0:	621a      	str	r2, [r3, #32]
}
 8006fc2:	bf00      	nop
 8006fc4:	371c      	adds	r7, #28
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr
 8006fce:	bf00      	nop
 8006fd0:	40010000 	.word	0x40010000
 8006fd4:	40010400 	.word	0x40010400

08006fd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b087      	sub	sp, #28
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	60f8      	str	r0, [r7, #12]
 8006fe0:	60b9      	str	r1, [r7, #8]
 8006fe2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	6a1b      	ldr	r3, [r3, #32]
 8006fe8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	6a1b      	ldr	r3, [r3, #32]
 8006fee:	f023 0201 	bic.w	r2, r3, #1
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	699b      	ldr	r3, [r3, #24]
 8006ffa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007002:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	011b      	lsls	r3, r3, #4
 8007008:	693a      	ldr	r2, [r7, #16]
 800700a:	4313      	orrs	r3, r2
 800700c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	f023 030a 	bic.w	r3, r3, #10
 8007014:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007016:	697a      	ldr	r2, [r7, #20]
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	4313      	orrs	r3, r2
 800701c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	693a      	ldr	r2, [r7, #16]
 8007022:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	697a      	ldr	r2, [r7, #20]
 8007028:	621a      	str	r2, [r3, #32]
}
 800702a:	bf00      	nop
 800702c:	371c      	adds	r7, #28
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr

08007036 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007036:	b480      	push	{r7}
 8007038:	b087      	sub	sp, #28
 800703a:	af00      	add	r7, sp, #0
 800703c:	60f8      	str	r0, [r7, #12]
 800703e:	60b9      	str	r1, [r7, #8]
 8007040:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	6a1b      	ldr	r3, [r3, #32]
 8007046:	f023 0210 	bic.w	r2, r3, #16
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	699b      	ldr	r3, [r3, #24]
 8007052:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	6a1b      	ldr	r3, [r3, #32]
 8007058:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007060:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	031b      	lsls	r3, r3, #12
 8007066:	697a      	ldr	r2, [r7, #20]
 8007068:	4313      	orrs	r3, r2
 800706a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007072:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	011b      	lsls	r3, r3, #4
 8007078:	693a      	ldr	r2, [r7, #16]
 800707a:	4313      	orrs	r3, r2
 800707c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	697a      	ldr	r2, [r7, #20]
 8007082:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	693a      	ldr	r2, [r7, #16]
 8007088:	621a      	str	r2, [r3, #32]
}
 800708a:	bf00      	nop
 800708c:	371c      	adds	r7, #28
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr

08007096 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007096:	b480      	push	{r7}
 8007098:	b085      	sub	sp, #20
 800709a:	af00      	add	r7, sp, #0
 800709c:	6078      	str	r0, [r7, #4]
 800709e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80070ae:	683a      	ldr	r2, [r7, #0]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	4313      	orrs	r3, r2
 80070b4:	f043 0307 	orr.w	r3, r3, #7
 80070b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	68fa      	ldr	r2, [r7, #12]
 80070be:	609a      	str	r2, [r3, #8]
}
 80070c0:	bf00      	nop
 80070c2:	3714      	adds	r7, #20
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr

080070cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b087      	sub	sp, #28
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	60f8      	str	r0, [r7, #12]
 80070d4:	60b9      	str	r1, [r7, #8]
 80070d6:	607a      	str	r2, [r7, #4]
 80070d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80070e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	021a      	lsls	r2, r3, #8
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	431a      	orrs	r2, r3
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	4313      	orrs	r3, r2
 80070f4:	697a      	ldr	r2, [r7, #20]
 80070f6:	4313      	orrs	r3, r2
 80070f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	697a      	ldr	r2, [r7, #20]
 80070fe:	609a      	str	r2, [r3, #8]
}
 8007100:	bf00      	nop
 8007102:	371c      	adds	r7, #28
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr

0800710c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800710c:	b480      	push	{r7}
 800710e:	b087      	sub	sp, #28
 8007110:	af00      	add	r7, sp, #0
 8007112:	60f8      	str	r0, [r7, #12]
 8007114:	60b9      	str	r1, [r7, #8]
 8007116:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	f003 031f 	and.w	r3, r3, #31
 800711e:	2201      	movs	r2, #1
 8007120:	fa02 f303 	lsl.w	r3, r2, r3
 8007124:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	6a1a      	ldr	r2, [r3, #32]
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	43db      	mvns	r3, r3
 800712e:	401a      	ands	r2, r3
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	6a1a      	ldr	r2, [r3, #32]
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	f003 031f 	and.w	r3, r3, #31
 800713e:	6879      	ldr	r1, [r7, #4]
 8007140:	fa01 f303 	lsl.w	r3, r1, r3
 8007144:	431a      	orrs	r2, r3
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	621a      	str	r2, [r3, #32]
}
 800714a:	bf00      	nop
 800714c:	371c      	adds	r7, #28
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr
	...

08007158 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007158:	b480      	push	{r7}
 800715a:	b085      	sub	sp, #20
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007168:	2b01      	cmp	r3, #1
 800716a:	d101      	bne.n	8007170 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800716c:	2302      	movs	r3, #2
 800716e:	e05a      	b.n	8007226 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2201      	movs	r2, #1
 8007174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2202      	movs	r2, #2
 800717c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007196:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	68fa      	ldr	r2, [r7, #12]
 800719e:	4313      	orrs	r3, r2
 80071a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	68fa      	ldr	r2, [r7, #12]
 80071a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a21      	ldr	r2, [pc, #132]	; (8007234 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d022      	beq.n	80071fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071bc:	d01d      	beq.n	80071fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a1d      	ldr	r2, [pc, #116]	; (8007238 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d018      	beq.n	80071fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a1b      	ldr	r2, [pc, #108]	; (800723c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d013      	beq.n	80071fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a1a      	ldr	r2, [pc, #104]	; (8007240 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d00e      	beq.n	80071fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a18      	ldr	r2, [pc, #96]	; (8007244 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d009      	beq.n	80071fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a17      	ldr	r2, [pc, #92]	; (8007248 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d004      	beq.n	80071fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a15      	ldr	r2, [pc, #84]	; (800724c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d10c      	bne.n	8007214 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007200:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	68ba      	ldr	r2, [r7, #8]
 8007208:	4313      	orrs	r3, r2
 800720a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	68ba      	ldr	r2, [r7, #8]
 8007212:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2201      	movs	r2, #1
 8007218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007224:	2300      	movs	r3, #0
}
 8007226:	4618      	mov	r0, r3
 8007228:	3714      	adds	r7, #20
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop
 8007234:	40010000 	.word	0x40010000
 8007238:	40000400 	.word	0x40000400
 800723c:	40000800 	.word	0x40000800
 8007240:	40000c00 	.word	0x40000c00
 8007244:	40010400 	.word	0x40010400
 8007248:	40014000 	.word	0x40014000
 800724c:	40001800 	.word	0x40001800

08007250 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007258:	bf00      	nop
 800725a:	370c      	adds	r7, #12
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr

08007264 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007264:	b480      	push	{r7}
 8007266:	b083      	sub	sp, #12
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800726c:	bf00      	nop
 800726e:	370c      	adds	r7, #12
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr

08007278 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b082      	sub	sp, #8
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d101      	bne.n	800728a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007286:	2301      	movs	r3, #1
 8007288:	e03f      	b.n	800730a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007290:	b2db      	uxtb	r3, r3
 8007292:	2b00      	cmp	r3, #0
 8007294:	d106      	bne.n	80072a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2200      	movs	r2, #0
 800729a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f7fb f898 	bl	80023d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2224      	movs	r2, #36	; 0x24
 80072a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	68da      	ldr	r2, [r3, #12]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80072ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 fe7d 	bl	8007fbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	691a      	ldr	r2, [r3, #16]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80072d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	695a      	ldr	r2, [r3, #20]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80072e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	68da      	ldr	r2, [r3, #12]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80072f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2200      	movs	r2, #0
 80072f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2220      	movs	r2, #32
 80072fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2220      	movs	r2, #32
 8007304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007308:	2300      	movs	r3, #0
}
 800730a:	4618      	mov	r0, r3
 800730c:	3708      	adds	r7, #8
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}

08007312 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007312:	b580      	push	{r7, lr}
 8007314:	b08a      	sub	sp, #40	; 0x28
 8007316:	af02      	add	r7, sp, #8
 8007318:	60f8      	str	r0, [r7, #12]
 800731a:	60b9      	str	r1, [r7, #8]
 800731c:	603b      	str	r3, [r7, #0]
 800731e:	4613      	mov	r3, r2
 8007320:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007322:	2300      	movs	r3, #0
 8007324:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800732c:	b2db      	uxtb	r3, r3
 800732e:	2b20      	cmp	r3, #32
 8007330:	d17c      	bne.n	800742c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d002      	beq.n	800733e <HAL_UART_Transmit+0x2c>
 8007338:	88fb      	ldrh	r3, [r7, #6]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d101      	bne.n	8007342 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800733e:	2301      	movs	r3, #1
 8007340:	e075      	b.n	800742e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007348:	2b01      	cmp	r3, #1
 800734a:	d101      	bne.n	8007350 <HAL_UART_Transmit+0x3e>
 800734c:	2302      	movs	r3, #2
 800734e:	e06e      	b.n	800742e <HAL_UART_Transmit+0x11c>
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2201      	movs	r2, #1
 8007354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2200      	movs	r2, #0
 800735c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2221      	movs	r2, #33	; 0x21
 8007362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007366:	f7fb f923 	bl	80025b0 <HAL_GetTick>
 800736a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	88fa      	ldrh	r2, [r7, #6]
 8007370:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	88fa      	ldrh	r2, [r7, #6]
 8007376:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007380:	d108      	bne.n	8007394 <HAL_UART_Transmit+0x82>
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	691b      	ldr	r3, [r3, #16]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d104      	bne.n	8007394 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800738a:	2300      	movs	r3, #0
 800738c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	61bb      	str	r3, [r7, #24]
 8007392:	e003      	b.n	800739c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007398:	2300      	movs	r3, #0
 800739a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2200      	movs	r2, #0
 80073a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80073a4:	e02a      	b.n	80073fc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	9300      	str	r3, [sp, #0]
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	2200      	movs	r2, #0
 80073ae:	2180      	movs	r1, #128	; 0x80
 80073b0:	68f8      	ldr	r0, [r7, #12]
 80073b2:	f000 fbc1 	bl	8007b38 <UART_WaitOnFlagUntilTimeout>
 80073b6:	4603      	mov	r3, r0
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d001      	beq.n	80073c0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80073bc:	2303      	movs	r3, #3
 80073be:	e036      	b.n	800742e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80073c0:	69fb      	ldr	r3, [r7, #28]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d10b      	bne.n	80073de <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80073c6:	69bb      	ldr	r3, [r7, #24]
 80073c8:	881b      	ldrh	r3, [r3, #0]
 80073ca:	461a      	mov	r2, r3
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80073d6:	69bb      	ldr	r3, [r7, #24]
 80073d8:	3302      	adds	r3, #2
 80073da:	61bb      	str	r3, [r7, #24]
 80073dc:	e007      	b.n	80073ee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80073de:	69fb      	ldr	r3, [r7, #28]
 80073e0:	781a      	ldrb	r2, [r3, #0]
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80073e8:	69fb      	ldr	r3, [r7, #28]
 80073ea:	3301      	adds	r3, #1
 80073ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	3b01      	subs	r3, #1
 80073f6:	b29a      	uxth	r2, r3
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007400:	b29b      	uxth	r3, r3
 8007402:	2b00      	cmp	r3, #0
 8007404:	d1cf      	bne.n	80073a6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	9300      	str	r3, [sp, #0]
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	2200      	movs	r2, #0
 800740e:	2140      	movs	r1, #64	; 0x40
 8007410:	68f8      	ldr	r0, [r7, #12]
 8007412:	f000 fb91 	bl	8007b38 <UART_WaitOnFlagUntilTimeout>
 8007416:	4603      	mov	r3, r0
 8007418:	2b00      	cmp	r3, #0
 800741a:	d001      	beq.n	8007420 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800741c:	2303      	movs	r3, #3
 800741e:	e006      	b.n	800742e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2220      	movs	r2, #32
 8007424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007428:	2300      	movs	r3, #0
 800742a:	e000      	b.n	800742e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800742c:	2302      	movs	r3, #2
  }
}
 800742e:	4618      	mov	r0, r3
 8007430:	3720      	adds	r7, #32
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}

08007436 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007436:	b580      	push	{r7, lr}
 8007438:	b084      	sub	sp, #16
 800743a:	af00      	add	r7, sp, #0
 800743c:	60f8      	str	r0, [r7, #12]
 800743e:	60b9      	str	r1, [r7, #8]
 8007440:	4613      	mov	r3, r2
 8007442:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800744a:	b2db      	uxtb	r3, r3
 800744c:	2b20      	cmp	r3, #32
 800744e:	d11d      	bne.n	800748c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d002      	beq.n	800745c <HAL_UART_Receive_IT+0x26>
 8007456:	88fb      	ldrh	r3, [r7, #6]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d101      	bne.n	8007460 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800745c:	2301      	movs	r3, #1
 800745e:	e016      	b.n	800748e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007466:	2b01      	cmp	r3, #1
 8007468:	d101      	bne.n	800746e <HAL_UART_Receive_IT+0x38>
 800746a:	2302      	movs	r3, #2
 800746c:	e00f      	b.n	800748e <HAL_UART_Receive_IT+0x58>
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2201      	movs	r2, #1
 8007472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2200      	movs	r2, #0
 800747a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800747c:	88fb      	ldrh	r3, [r7, #6]
 800747e:	461a      	mov	r2, r3
 8007480:	68b9      	ldr	r1, [r7, #8]
 8007482:	68f8      	ldr	r0, [r7, #12]
 8007484:	f000 fbc6 	bl	8007c14 <UART_Start_Receive_IT>
 8007488:	4603      	mov	r3, r0
 800748a:	e000      	b.n	800748e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800748c:	2302      	movs	r3, #2
  }
}
 800748e:	4618      	mov	r0, r3
 8007490:	3710      	adds	r7, #16
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}

08007496 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8007496:	b580      	push	{r7, lr}
 8007498:	b09a      	sub	sp, #104	; 0x68
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	330c      	adds	r3, #12
 80074a4:	64bb      	str	r3, [r7, #72]	; 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074a8:	e853 3f00 	ldrex	r3, [r3]
 80074ac:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80074ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074b4:	667b      	str	r3, [r7, #100]	; 0x64
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	330c      	adds	r3, #12
 80074bc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80074be:	657a      	str	r2, [r7, #84]	; 0x54
 80074c0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80074c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80074c6:	e841 2300 	strex	r3, r2, [r1]
 80074ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80074cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d1e5      	bne.n	800749e <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	3314      	adds	r3, #20
 80074d8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074dc:	e853 3f00 	ldrex	r3, [r3]
 80074e0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80074e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e4:	f023 0301 	bic.w	r3, r3, #1
 80074e8:	663b      	str	r3, [r7, #96]	; 0x60
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	3314      	adds	r3, #20
 80074f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80074f2:	643a      	str	r2, [r7, #64]	; 0x40
 80074f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80074f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80074fa:	e841 2300 	strex	r3, r2, [r1]
 80074fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007502:	2b00      	cmp	r3, #0
 8007504:	d1e5      	bne.n	80074d2 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800750a:	2b01      	cmp	r3, #1
 800750c:	d119      	bne.n	8007542 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	330c      	adds	r3, #12
 8007514:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007516:	6a3b      	ldr	r3, [r7, #32]
 8007518:	e853 3f00 	ldrex	r3, [r3]
 800751c:	61fb      	str	r3, [r7, #28]
   return(result);
 800751e:	69fb      	ldr	r3, [r7, #28]
 8007520:	f023 0310 	bic.w	r3, r3, #16
 8007524:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	330c      	adds	r3, #12
 800752c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800752e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007530:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007532:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007534:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007536:	e841 2300 	strex	r3, r2, [r1]
 800753a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800753c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800753e:	2b00      	cmp	r3, #0
 8007540:	d1e5      	bne.n	800750e <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	695b      	ldr	r3, [r3, #20]
 8007548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800754c:	2b40      	cmp	r3, #64	; 0x40
 800754e:	d136      	bne.n	80075be <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	3314      	adds	r3, #20
 8007556:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	e853 3f00 	ldrex	r3, [r3]
 800755e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007566:	65bb      	str	r3, [r7, #88]	; 0x58
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	3314      	adds	r3, #20
 800756e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007570:	61ba      	str	r2, [r7, #24]
 8007572:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007574:	6979      	ldr	r1, [r7, #20]
 8007576:	69ba      	ldr	r2, [r7, #24]
 8007578:	e841 2300 	strex	r3, r2, [r1]
 800757c:	613b      	str	r3, [r7, #16]
   return(result);
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d1e5      	bne.n	8007550 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007588:	2b00      	cmp	r3, #0
 800758a:	d018      	beq.n	80075be <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007590:	2200      	movs	r2, #0
 8007592:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007598:	4618      	mov	r0, r3
 800759a:	f7fb f91b 	bl	80027d4 <HAL_DMA_Abort>
 800759e:	4603      	mov	r3, r0
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d00c      	beq.n	80075be <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a8:	4618      	mov	r0, r3
 80075aa:	f7fb f9b3 	bl	8002914 <HAL_DMA_GetError>
 80075ae:	4603      	mov	r3, r0
 80075b0:	2b20      	cmp	r3, #32
 80075b2:	d104      	bne.n	80075be <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2210      	movs	r2, #16
 80075b8:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 80075ba:	2303      	movs	r3, #3
 80075bc:	e00a      	b.n	80075d4 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2200      	movs	r2, #0
 80075c2:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2220      	movs	r2, #32
 80075c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80075d2:	2300      	movs	r3, #0
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3768      	adds	r7, #104	; 0x68
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b0ba      	sub	sp, #232	; 0xe8
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	68db      	ldr	r3, [r3, #12]
 80075f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	695b      	ldr	r3, [r3, #20]
 80075fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007602:	2300      	movs	r3, #0
 8007604:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007608:	2300      	movs	r3, #0
 800760a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800760e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007612:	f003 030f 	and.w	r3, r3, #15
 8007616:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800761a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800761e:	2b00      	cmp	r3, #0
 8007620:	d10f      	bne.n	8007642 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007626:	f003 0320 	and.w	r3, r3, #32
 800762a:	2b00      	cmp	r3, #0
 800762c:	d009      	beq.n	8007642 <HAL_UART_IRQHandler+0x66>
 800762e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007632:	f003 0320 	and.w	r3, r3, #32
 8007636:	2b00      	cmp	r3, #0
 8007638:	d003      	beq.n	8007642 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 fc03 	bl	8007e46 <UART_Receive_IT>
      return;
 8007640:	e256      	b.n	8007af0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007642:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007646:	2b00      	cmp	r3, #0
 8007648:	f000 80de 	beq.w	8007808 <HAL_UART_IRQHandler+0x22c>
 800764c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007650:	f003 0301 	and.w	r3, r3, #1
 8007654:	2b00      	cmp	r3, #0
 8007656:	d106      	bne.n	8007666 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007658:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800765c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007660:	2b00      	cmp	r3, #0
 8007662:	f000 80d1 	beq.w	8007808 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800766a:	f003 0301 	and.w	r3, r3, #1
 800766e:	2b00      	cmp	r3, #0
 8007670:	d00b      	beq.n	800768a <HAL_UART_IRQHandler+0xae>
 8007672:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800767a:	2b00      	cmp	r3, #0
 800767c:	d005      	beq.n	800768a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007682:	f043 0201 	orr.w	r2, r3, #1
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800768a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800768e:	f003 0304 	and.w	r3, r3, #4
 8007692:	2b00      	cmp	r3, #0
 8007694:	d00b      	beq.n	80076ae <HAL_UART_IRQHandler+0xd2>
 8007696:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800769a:	f003 0301 	and.w	r3, r3, #1
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d005      	beq.n	80076ae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a6:	f043 0202 	orr.w	r2, r3, #2
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80076ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076b2:	f003 0302 	and.w	r3, r3, #2
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d00b      	beq.n	80076d2 <HAL_UART_IRQHandler+0xf6>
 80076ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076be:	f003 0301 	and.w	r3, r3, #1
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d005      	beq.n	80076d2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ca:	f043 0204 	orr.w	r2, r3, #4
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80076d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076d6:	f003 0308 	and.w	r3, r3, #8
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d011      	beq.n	8007702 <HAL_UART_IRQHandler+0x126>
 80076de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076e2:	f003 0320 	and.w	r3, r3, #32
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d105      	bne.n	80076f6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80076ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076ee:	f003 0301 	and.w	r3, r3, #1
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d005      	beq.n	8007702 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076fa:	f043 0208 	orr.w	r2, r3, #8
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007706:	2b00      	cmp	r3, #0
 8007708:	f000 81ed 	beq.w	8007ae6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800770c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007710:	f003 0320 	and.w	r3, r3, #32
 8007714:	2b00      	cmp	r3, #0
 8007716:	d008      	beq.n	800772a <HAL_UART_IRQHandler+0x14e>
 8007718:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800771c:	f003 0320 	and.w	r3, r3, #32
 8007720:	2b00      	cmp	r3, #0
 8007722:	d002      	beq.n	800772a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 fb8e 	bl	8007e46 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	695b      	ldr	r3, [r3, #20]
 8007730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007734:	2b40      	cmp	r3, #64	; 0x40
 8007736:	bf0c      	ite	eq
 8007738:	2301      	moveq	r3, #1
 800773a:	2300      	movne	r3, #0
 800773c:	b2db      	uxtb	r3, r3
 800773e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007746:	f003 0308 	and.w	r3, r3, #8
 800774a:	2b00      	cmp	r3, #0
 800774c:	d103      	bne.n	8007756 <HAL_UART_IRQHandler+0x17a>
 800774e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007752:	2b00      	cmp	r3, #0
 8007754:	d04f      	beq.n	80077f6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 fa96 	bl	8007c88 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	695b      	ldr	r3, [r3, #20]
 8007762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007766:	2b40      	cmp	r3, #64	; 0x40
 8007768:	d141      	bne.n	80077ee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	3314      	adds	r3, #20
 8007770:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007774:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007778:	e853 3f00 	ldrex	r3, [r3]
 800777c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007780:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007784:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007788:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	3314      	adds	r3, #20
 8007792:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007796:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800779a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800779e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80077a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80077a6:	e841 2300 	strex	r3, r2, [r1]
 80077aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80077ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d1d9      	bne.n	800776a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d013      	beq.n	80077e6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077c2:	4a7d      	ldr	r2, [pc, #500]	; (80079b8 <HAL_UART_IRQHandler+0x3dc>)
 80077c4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ca:	4618      	mov	r0, r3
 80077cc:	f7fb f872 	bl	80028b4 <HAL_DMA_Abort_IT>
 80077d0:	4603      	mov	r3, r0
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d016      	beq.n	8007804 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80077e0:	4610      	mov	r0, r2
 80077e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077e4:	e00e      	b.n	8007804 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 f990 	bl	8007b0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077ec:	e00a      	b.n	8007804 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 f98c 	bl	8007b0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077f4:	e006      	b.n	8007804 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 f988 	bl	8007b0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007802:	e170      	b.n	8007ae6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007804:	bf00      	nop
    return;
 8007806:	e16e      	b.n	8007ae6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800780c:	2b01      	cmp	r3, #1
 800780e:	f040 814a 	bne.w	8007aa6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007816:	f003 0310 	and.w	r3, r3, #16
 800781a:	2b00      	cmp	r3, #0
 800781c:	f000 8143 	beq.w	8007aa6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007820:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007824:	f003 0310 	and.w	r3, r3, #16
 8007828:	2b00      	cmp	r3, #0
 800782a:	f000 813c 	beq.w	8007aa6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800782e:	2300      	movs	r3, #0
 8007830:	60bb      	str	r3, [r7, #8]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	60bb      	str	r3, [r7, #8]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	60bb      	str	r3, [r7, #8]
 8007842:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	695b      	ldr	r3, [r3, #20]
 800784a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800784e:	2b40      	cmp	r3, #64	; 0x40
 8007850:	f040 80b4 	bne.w	80079bc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007860:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007864:	2b00      	cmp	r3, #0
 8007866:	f000 8140 	beq.w	8007aea <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800786e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007872:	429a      	cmp	r2, r3
 8007874:	f080 8139 	bcs.w	8007aea <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800787e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007884:	69db      	ldr	r3, [r3, #28]
 8007886:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800788a:	f000 8088 	beq.w	800799e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	330c      	adds	r3, #12
 8007894:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007898:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800789c:	e853 3f00 	ldrex	r3, [r3]
 80078a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80078a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80078a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	330c      	adds	r3, #12
 80078b6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80078ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80078be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80078c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80078ca:	e841 2300 	strex	r3, r2, [r1]
 80078ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80078d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d1d9      	bne.n	800788e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	3314      	adds	r3, #20
 80078e0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078e4:	e853 3f00 	ldrex	r3, [r3]
 80078e8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80078ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80078ec:	f023 0301 	bic.w	r3, r3, #1
 80078f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	3314      	adds	r3, #20
 80078fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80078fe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007902:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007904:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007906:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800790a:	e841 2300 	strex	r3, r2, [r1]
 800790e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007910:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007912:	2b00      	cmp	r3, #0
 8007914:	d1e1      	bne.n	80078da <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	3314      	adds	r3, #20
 800791c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800791e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007920:	e853 3f00 	ldrex	r3, [r3]
 8007924:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007926:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007928:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800792c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	3314      	adds	r3, #20
 8007936:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800793a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800793c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800793e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007940:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007942:	e841 2300 	strex	r3, r2, [r1]
 8007946:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007948:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800794a:	2b00      	cmp	r3, #0
 800794c:	d1e3      	bne.n	8007916 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2220      	movs	r2, #32
 8007952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2200      	movs	r2, #0
 800795a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	330c      	adds	r3, #12
 8007962:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007964:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007966:	e853 3f00 	ldrex	r3, [r3]
 800796a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800796c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800796e:	f023 0310 	bic.w	r3, r3, #16
 8007972:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	330c      	adds	r3, #12
 800797c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007980:	65ba      	str	r2, [r7, #88]	; 0x58
 8007982:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007984:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007986:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007988:	e841 2300 	strex	r3, r2, [r1]
 800798c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800798e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007990:	2b00      	cmp	r3, #0
 8007992:	d1e3      	bne.n	800795c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007998:	4618      	mov	r0, r3
 800799a:	f7fa ff1b 	bl	80027d4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	1ad3      	subs	r3, r2, r3
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	4619      	mov	r1, r3
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 f8b6 	bl	8007b20 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80079b4:	e099      	b.n	8007aea <HAL_UART_IRQHandler+0x50e>
 80079b6:	bf00      	nop
 80079b8:	08007d4f 	.word	0x08007d4f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079c4:	b29b      	uxth	r3, r3
 80079c6:	1ad3      	subs	r3, r2, r3
 80079c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	f000 808b 	beq.w	8007aee <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80079d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80079dc:	2b00      	cmp	r3, #0
 80079de:	f000 8086 	beq.w	8007aee <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	330c      	adds	r3, #12
 80079e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ec:	e853 3f00 	ldrex	r3, [r3]
 80079f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80079f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80079f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	330c      	adds	r3, #12
 8007a02:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007a06:	647a      	str	r2, [r7, #68]	; 0x44
 8007a08:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a0a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a0e:	e841 2300 	strex	r3, r2, [r1]
 8007a12:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d1e3      	bne.n	80079e2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	3314      	adds	r3, #20
 8007a20:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a24:	e853 3f00 	ldrex	r3, [r3]
 8007a28:	623b      	str	r3, [r7, #32]
   return(result);
 8007a2a:	6a3b      	ldr	r3, [r7, #32]
 8007a2c:	f023 0301 	bic.w	r3, r3, #1
 8007a30:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	3314      	adds	r3, #20
 8007a3a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007a3e:	633a      	str	r2, [r7, #48]	; 0x30
 8007a40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a46:	e841 2300 	strex	r3, r2, [r1]
 8007a4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d1e3      	bne.n	8007a1a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2220      	movs	r2, #32
 8007a56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	330c      	adds	r3, #12
 8007a66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	e853 3f00 	ldrex	r3, [r3]
 8007a6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f023 0310 	bic.w	r3, r3, #16
 8007a76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	330c      	adds	r3, #12
 8007a80:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007a84:	61fa      	str	r2, [r7, #28]
 8007a86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a88:	69b9      	ldr	r1, [r7, #24]
 8007a8a:	69fa      	ldr	r2, [r7, #28]
 8007a8c:	e841 2300 	strex	r3, r2, [r1]
 8007a90:	617b      	str	r3, [r7, #20]
   return(result);
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d1e3      	bne.n	8007a60 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 f83e 	bl	8007b20 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007aa4:	e023      	b.n	8007aee <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d009      	beq.n	8007ac6 <HAL_UART_IRQHandler+0x4ea>
 8007ab2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d003      	beq.n	8007ac6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 f959 	bl	8007d76 <UART_Transmit_IT>
    return;
 8007ac4:	e014      	b.n	8007af0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d00e      	beq.n	8007af0 <HAL_UART_IRQHandler+0x514>
 8007ad2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d008      	beq.n	8007af0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 f999 	bl	8007e16 <UART_EndTransmit_IT>
    return;
 8007ae4:	e004      	b.n	8007af0 <HAL_UART_IRQHandler+0x514>
    return;
 8007ae6:	bf00      	nop
 8007ae8:	e002      	b.n	8007af0 <HAL_UART_IRQHandler+0x514>
      return;
 8007aea:	bf00      	nop
 8007aec:	e000      	b.n	8007af0 <HAL_UART_IRQHandler+0x514>
      return;
 8007aee:	bf00      	nop
  }
}
 8007af0:	37e8      	adds	r7, #232	; 0xe8
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
 8007af6:	bf00      	nop

08007af8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b083      	sub	sp, #12
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007b00:	bf00      	nop
 8007b02:	370c      	adds	r7, #12
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr

08007b0c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b083      	sub	sp, #12
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007b14:	bf00      	nop
 8007b16:	370c      	adds	r7, #12
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr

08007b20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b083      	sub	sp, #12
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	460b      	mov	r3, r1
 8007b2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b2c:	bf00      	nop
 8007b2e:	370c      	adds	r7, #12
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b090      	sub	sp, #64	; 0x40
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	60b9      	str	r1, [r7, #8]
 8007b42:	603b      	str	r3, [r7, #0]
 8007b44:	4613      	mov	r3, r2
 8007b46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b48:	e050      	b.n	8007bec <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b50:	d04c      	beq.n	8007bec <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007b52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d007      	beq.n	8007b68 <UART_WaitOnFlagUntilTimeout+0x30>
 8007b58:	f7fa fd2a 	bl	80025b0 <HAL_GetTick>
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	1ad3      	subs	r3, r2, r3
 8007b62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d241      	bcs.n	8007bec <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	330c      	adds	r3, #12
 8007b6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b72:	e853 3f00 	ldrex	r3, [r3]
 8007b76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	330c      	adds	r3, #12
 8007b86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007b88:	637a      	str	r2, [r7, #52]	; 0x34
 8007b8a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b90:	e841 2300 	strex	r3, r2, [r1]
 8007b94:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d1e5      	bne.n	8007b68 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	3314      	adds	r3, #20
 8007ba2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	e853 3f00 	ldrex	r3, [r3]
 8007baa:	613b      	str	r3, [r7, #16]
   return(result);
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	f023 0301 	bic.w	r3, r3, #1
 8007bb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	3314      	adds	r3, #20
 8007bba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bbc:	623a      	str	r2, [r7, #32]
 8007bbe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc0:	69f9      	ldr	r1, [r7, #28]
 8007bc2:	6a3a      	ldr	r2, [r7, #32]
 8007bc4:	e841 2300 	strex	r3, r2, [r1]
 8007bc8:	61bb      	str	r3, [r7, #24]
   return(result);
 8007bca:	69bb      	ldr	r3, [r7, #24]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d1e5      	bne.n	8007b9c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2220      	movs	r2, #32
 8007bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2220      	movs	r2, #32
 8007bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2200      	movs	r2, #0
 8007be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007be8:	2303      	movs	r3, #3
 8007bea:	e00f      	b.n	8007c0c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	4013      	ands	r3, r2
 8007bf6:	68ba      	ldr	r2, [r7, #8]
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	bf0c      	ite	eq
 8007bfc:	2301      	moveq	r3, #1
 8007bfe:	2300      	movne	r3, #0
 8007c00:	b2db      	uxtb	r3, r3
 8007c02:	461a      	mov	r2, r3
 8007c04:	79fb      	ldrb	r3, [r7, #7]
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d09f      	beq.n	8007b4a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007c0a:	2300      	movs	r3, #0
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3740      	adds	r7, #64	; 0x40
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b085      	sub	sp, #20
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	60b9      	str	r1, [r7, #8]
 8007c1e:	4613      	mov	r3, r2
 8007c20:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	68ba      	ldr	r2, [r7, #8]
 8007c26:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	88fa      	ldrh	r2, [r7, #6]
 8007c2c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	88fa      	ldrh	r2, [r7, #6]
 8007c32:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2200      	movs	r2, #0
 8007c38:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2222      	movs	r2, #34	; 0x22
 8007c3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2200      	movs	r2, #0
 8007c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	68da      	ldr	r2, [r3, #12]
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c58:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	695a      	ldr	r2, [r3, #20]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f042 0201 	orr.w	r2, r2, #1
 8007c68:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	68da      	ldr	r2, [r3, #12]
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f042 0220 	orr.w	r2, r2, #32
 8007c78:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007c7a:	2300      	movs	r3, #0
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3714      	adds	r7, #20
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr

08007c88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b095      	sub	sp, #84	; 0x54
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	330c      	adds	r3, #12
 8007c96:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c9a:	e853 3f00 	ldrex	r3, [r3]
 8007c9e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ca6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	330c      	adds	r3, #12
 8007cae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007cb0:	643a      	str	r2, [r7, #64]	; 0x40
 8007cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007cb6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007cb8:	e841 2300 	strex	r3, r2, [r1]
 8007cbc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d1e5      	bne.n	8007c90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	3314      	adds	r3, #20
 8007cca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ccc:	6a3b      	ldr	r3, [r7, #32]
 8007cce:	e853 3f00 	ldrex	r3, [r3]
 8007cd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8007cd4:	69fb      	ldr	r3, [r7, #28]
 8007cd6:	f023 0301 	bic.w	r3, r3, #1
 8007cda:	64bb      	str	r3, [r7, #72]	; 0x48
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	3314      	adds	r3, #20
 8007ce2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ce4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ce6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007cea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cec:	e841 2300 	strex	r3, r2, [r1]
 8007cf0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d1e5      	bne.n	8007cc4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d119      	bne.n	8007d34 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	330c      	adds	r3, #12
 8007d06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	e853 3f00 	ldrex	r3, [r3]
 8007d0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	f023 0310 	bic.w	r3, r3, #16
 8007d16:	647b      	str	r3, [r7, #68]	; 0x44
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	330c      	adds	r3, #12
 8007d1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d20:	61ba      	str	r2, [r7, #24]
 8007d22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d24:	6979      	ldr	r1, [r7, #20]
 8007d26:	69ba      	ldr	r2, [r7, #24]
 8007d28:	e841 2300 	strex	r3, r2, [r1]
 8007d2c:	613b      	str	r3, [r7, #16]
   return(result);
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d1e5      	bne.n	8007d00 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2220      	movs	r2, #32
 8007d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007d42:	bf00      	nop
 8007d44:	3754      	adds	r7, #84	; 0x54
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr

08007d4e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d4e:	b580      	push	{r7, lr}
 8007d50:	b084      	sub	sp, #16
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2200      	movs	r2, #0
 8007d66:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d68:	68f8      	ldr	r0, [r7, #12]
 8007d6a:	f7ff fecf 	bl	8007b0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d6e:	bf00      	nop
 8007d70:	3710      	adds	r7, #16
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}

08007d76 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007d76:	b480      	push	{r7}
 8007d78:	b085      	sub	sp, #20
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	2b21      	cmp	r3, #33	; 0x21
 8007d88:	d13e      	bne.n	8007e08 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d92:	d114      	bne.n	8007dbe <UART_Transmit_IT+0x48>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	691b      	ldr	r3, [r3, #16]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d110      	bne.n	8007dbe <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6a1b      	ldr	r3, [r3, #32]
 8007da0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	881b      	ldrh	r3, [r3, #0]
 8007da6:	461a      	mov	r2, r3
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007db0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6a1b      	ldr	r3, [r3, #32]
 8007db6:	1c9a      	adds	r2, r3, #2
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	621a      	str	r2, [r3, #32]
 8007dbc:	e008      	b.n	8007dd0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6a1b      	ldr	r3, [r3, #32]
 8007dc2:	1c59      	adds	r1, r3, #1
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	6211      	str	r1, [r2, #32]
 8007dc8:	781a      	ldrb	r2, [r3, #0]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	3b01      	subs	r3, #1
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	687a      	ldr	r2, [r7, #4]
 8007ddc:	4619      	mov	r1, r3
 8007dde:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d10f      	bne.n	8007e04 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	68da      	ldr	r2, [r3, #12]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007df2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	68da      	ldr	r2, [r3, #12]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e02:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007e04:	2300      	movs	r3, #0
 8007e06:	e000      	b.n	8007e0a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007e08:	2302      	movs	r3, #2
  }
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3714      	adds	r7, #20
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e14:	4770      	bx	lr

08007e16 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007e16:	b580      	push	{r7, lr}
 8007e18:	b082      	sub	sp, #8
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	68da      	ldr	r2, [r3, #12]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e2c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2220      	movs	r2, #32
 8007e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f7ff fe5e 	bl	8007af8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007e3c:	2300      	movs	r3, #0
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3708      	adds	r7, #8
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}

08007e46 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007e46:	b580      	push	{r7, lr}
 8007e48:	b08c      	sub	sp, #48	; 0x30
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	2b22      	cmp	r3, #34	; 0x22
 8007e58:	f040 80ab 	bne.w	8007fb2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e64:	d117      	bne.n	8007e96 <UART_Receive_IT+0x50>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	691b      	ldr	r3, [r3, #16]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d113      	bne.n	8007e96 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e76:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e84:	b29a      	uxth	r2, r3
 8007e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e88:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e8e:	1c9a      	adds	r2, r3, #2
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	629a      	str	r2, [r3, #40]	; 0x28
 8007e94:	e026      	b.n	8007ee4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ea8:	d007      	beq.n	8007eba <UART_Receive_IT+0x74>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	689b      	ldr	r3, [r3, #8]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d10a      	bne.n	8007ec8 <UART_Receive_IT+0x82>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	691b      	ldr	r3, [r3, #16]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d106      	bne.n	8007ec8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	b2da      	uxtb	r2, r3
 8007ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec4:	701a      	strb	r2, [r3, #0]
 8007ec6:	e008      	b.n	8007eda <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ed4:	b2da      	uxtb	r2, r3
 8007ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ede:	1c5a      	adds	r2, r3, #1
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	3b01      	subs	r3, #1
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d15a      	bne.n	8007fae <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	68da      	ldr	r2, [r3, #12]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f022 0220 	bic.w	r2, r2, #32
 8007f06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	68da      	ldr	r2, [r3, #12]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007f16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	695a      	ldr	r2, [r3, #20]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f022 0201 	bic.w	r2, r2, #1
 8007f26:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2220      	movs	r2, #32
 8007f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d135      	bne.n	8007fa4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	330c      	adds	r3, #12
 8007f44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	e853 3f00 	ldrex	r3, [r3]
 8007f4c:	613b      	str	r3, [r7, #16]
   return(result);
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	f023 0310 	bic.w	r3, r3, #16
 8007f54:	627b      	str	r3, [r7, #36]	; 0x24
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	330c      	adds	r3, #12
 8007f5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f5e:	623a      	str	r2, [r7, #32]
 8007f60:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f62:	69f9      	ldr	r1, [r7, #28]
 8007f64:	6a3a      	ldr	r2, [r7, #32]
 8007f66:	e841 2300 	strex	r3, r2, [r1]
 8007f6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f6c:	69bb      	ldr	r3, [r7, #24]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d1e5      	bne.n	8007f3e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f003 0310 	and.w	r3, r3, #16
 8007f7c:	2b10      	cmp	r3, #16
 8007f7e:	d10a      	bne.n	8007f96 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007f80:	2300      	movs	r3, #0
 8007f82:	60fb      	str	r3, [r7, #12]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	60fb      	str	r3, [r7, #12]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	60fb      	str	r3, [r7, #12]
 8007f94:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f7ff fdbf 	bl	8007b20 <HAL_UARTEx_RxEventCallback>
 8007fa2:	e002      	b.n	8007faa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f7f9 fa53 	bl	8001450 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007faa:	2300      	movs	r3, #0
 8007fac:	e002      	b.n	8007fb4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	e000      	b.n	8007fb4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007fb2:	2302      	movs	r3, #2
  }
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3730      	adds	r7, #48	; 0x30
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fc0:	b09f      	sub	sp, #124	; 0x7c
 8007fc2:	af00      	add	r7, sp, #0
 8007fc4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007fc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	691b      	ldr	r3, [r3, #16]
 8007fcc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007fd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fd2:	68d9      	ldr	r1, [r3, #12]
 8007fd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	ea40 0301 	orr.w	r3, r0, r1
 8007fdc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007fde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fe0:	689a      	ldr	r2, [r3, #8]
 8007fe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fe4:	691b      	ldr	r3, [r3, #16]
 8007fe6:	431a      	orrs	r2, r3
 8007fe8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fea:	695b      	ldr	r3, [r3, #20]
 8007fec:	431a      	orrs	r2, r3
 8007fee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ff0:	69db      	ldr	r3, [r3, #28]
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007ff6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	68db      	ldr	r3, [r3, #12]
 8007ffc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008000:	f021 010c 	bic.w	r1, r1, #12
 8008004:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008006:	681a      	ldr	r2, [r3, #0]
 8008008:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800800a:	430b      	orrs	r3, r1
 800800c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800800e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	695b      	ldr	r3, [r3, #20]
 8008014:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800801a:	6999      	ldr	r1, [r3, #24]
 800801c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800801e:	681a      	ldr	r2, [r3, #0]
 8008020:	ea40 0301 	orr.w	r3, r0, r1
 8008024:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008026:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	4bc5      	ldr	r3, [pc, #788]	; (8008340 <UART_SetConfig+0x384>)
 800802c:	429a      	cmp	r2, r3
 800802e:	d004      	beq.n	800803a <UART_SetConfig+0x7e>
 8008030:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008032:	681a      	ldr	r2, [r3, #0]
 8008034:	4bc3      	ldr	r3, [pc, #780]	; (8008344 <UART_SetConfig+0x388>)
 8008036:	429a      	cmp	r2, r3
 8008038:	d103      	bne.n	8008042 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800803a:	f7fe f89b 	bl	8006174 <HAL_RCC_GetPCLK2Freq>
 800803e:	6778      	str	r0, [r7, #116]	; 0x74
 8008040:	e002      	b.n	8008048 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008042:	f7fe f883 	bl	800614c <HAL_RCC_GetPCLK1Freq>
 8008046:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008048:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800804a:	69db      	ldr	r3, [r3, #28]
 800804c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008050:	f040 80b6 	bne.w	80081c0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008054:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008056:	461c      	mov	r4, r3
 8008058:	f04f 0500 	mov.w	r5, #0
 800805c:	4622      	mov	r2, r4
 800805e:	462b      	mov	r3, r5
 8008060:	1891      	adds	r1, r2, r2
 8008062:	6439      	str	r1, [r7, #64]	; 0x40
 8008064:	415b      	adcs	r3, r3
 8008066:	647b      	str	r3, [r7, #68]	; 0x44
 8008068:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800806c:	1912      	adds	r2, r2, r4
 800806e:	eb45 0303 	adc.w	r3, r5, r3
 8008072:	f04f 0000 	mov.w	r0, #0
 8008076:	f04f 0100 	mov.w	r1, #0
 800807a:	00d9      	lsls	r1, r3, #3
 800807c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008080:	00d0      	lsls	r0, r2, #3
 8008082:	4602      	mov	r2, r0
 8008084:	460b      	mov	r3, r1
 8008086:	1911      	adds	r1, r2, r4
 8008088:	6639      	str	r1, [r7, #96]	; 0x60
 800808a:	416b      	adcs	r3, r5
 800808c:	667b      	str	r3, [r7, #100]	; 0x64
 800808e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	461a      	mov	r2, r3
 8008094:	f04f 0300 	mov.w	r3, #0
 8008098:	1891      	adds	r1, r2, r2
 800809a:	63b9      	str	r1, [r7, #56]	; 0x38
 800809c:	415b      	adcs	r3, r3
 800809e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80080a4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80080a8:	f7f8 f8e2 	bl	8000270 <__aeabi_uldivmod>
 80080ac:	4602      	mov	r2, r0
 80080ae:	460b      	mov	r3, r1
 80080b0:	4ba5      	ldr	r3, [pc, #660]	; (8008348 <UART_SetConfig+0x38c>)
 80080b2:	fba3 2302 	umull	r2, r3, r3, r2
 80080b6:	095b      	lsrs	r3, r3, #5
 80080b8:	011e      	lsls	r6, r3, #4
 80080ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80080bc:	461c      	mov	r4, r3
 80080be:	f04f 0500 	mov.w	r5, #0
 80080c2:	4622      	mov	r2, r4
 80080c4:	462b      	mov	r3, r5
 80080c6:	1891      	adds	r1, r2, r2
 80080c8:	6339      	str	r1, [r7, #48]	; 0x30
 80080ca:	415b      	adcs	r3, r3
 80080cc:	637b      	str	r3, [r7, #52]	; 0x34
 80080ce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80080d2:	1912      	adds	r2, r2, r4
 80080d4:	eb45 0303 	adc.w	r3, r5, r3
 80080d8:	f04f 0000 	mov.w	r0, #0
 80080dc:	f04f 0100 	mov.w	r1, #0
 80080e0:	00d9      	lsls	r1, r3, #3
 80080e2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80080e6:	00d0      	lsls	r0, r2, #3
 80080e8:	4602      	mov	r2, r0
 80080ea:	460b      	mov	r3, r1
 80080ec:	1911      	adds	r1, r2, r4
 80080ee:	65b9      	str	r1, [r7, #88]	; 0x58
 80080f0:	416b      	adcs	r3, r5
 80080f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80080f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	461a      	mov	r2, r3
 80080fa:	f04f 0300 	mov.w	r3, #0
 80080fe:	1891      	adds	r1, r2, r2
 8008100:	62b9      	str	r1, [r7, #40]	; 0x28
 8008102:	415b      	adcs	r3, r3
 8008104:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008106:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800810a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800810e:	f7f8 f8af 	bl	8000270 <__aeabi_uldivmod>
 8008112:	4602      	mov	r2, r0
 8008114:	460b      	mov	r3, r1
 8008116:	4b8c      	ldr	r3, [pc, #560]	; (8008348 <UART_SetConfig+0x38c>)
 8008118:	fba3 1302 	umull	r1, r3, r3, r2
 800811c:	095b      	lsrs	r3, r3, #5
 800811e:	2164      	movs	r1, #100	; 0x64
 8008120:	fb01 f303 	mul.w	r3, r1, r3
 8008124:	1ad3      	subs	r3, r2, r3
 8008126:	00db      	lsls	r3, r3, #3
 8008128:	3332      	adds	r3, #50	; 0x32
 800812a:	4a87      	ldr	r2, [pc, #540]	; (8008348 <UART_SetConfig+0x38c>)
 800812c:	fba2 2303 	umull	r2, r3, r2, r3
 8008130:	095b      	lsrs	r3, r3, #5
 8008132:	005b      	lsls	r3, r3, #1
 8008134:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008138:	441e      	add	r6, r3
 800813a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800813c:	4618      	mov	r0, r3
 800813e:	f04f 0100 	mov.w	r1, #0
 8008142:	4602      	mov	r2, r0
 8008144:	460b      	mov	r3, r1
 8008146:	1894      	adds	r4, r2, r2
 8008148:	623c      	str	r4, [r7, #32]
 800814a:	415b      	adcs	r3, r3
 800814c:	627b      	str	r3, [r7, #36]	; 0x24
 800814e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008152:	1812      	adds	r2, r2, r0
 8008154:	eb41 0303 	adc.w	r3, r1, r3
 8008158:	f04f 0400 	mov.w	r4, #0
 800815c:	f04f 0500 	mov.w	r5, #0
 8008160:	00dd      	lsls	r5, r3, #3
 8008162:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008166:	00d4      	lsls	r4, r2, #3
 8008168:	4622      	mov	r2, r4
 800816a:	462b      	mov	r3, r5
 800816c:	1814      	adds	r4, r2, r0
 800816e:	653c      	str	r4, [r7, #80]	; 0x50
 8008170:	414b      	adcs	r3, r1
 8008172:	657b      	str	r3, [r7, #84]	; 0x54
 8008174:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	461a      	mov	r2, r3
 800817a:	f04f 0300 	mov.w	r3, #0
 800817e:	1891      	adds	r1, r2, r2
 8008180:	61b9      	str	r1, [r7, #24]
 8008182:	415b      	adcs	r3, r3
 8008184:	61fb      	str	r3, [r7, #28]
 8008186:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800818a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800818e:	f7f8 f86f 	bl	8000270 <__aeabi_uldivmod>
 8008192:	4602      	mov	r2, r0
 8008194:	460b      	mov	r3, r1
 8008196:	4b6c      	ldr	r3, [pc, #432]	; (8008348 <UART_SetConfig+0x38c>)
 8008198:	fba3 1302 	umull	r1, r3, r3, r2
 800819c:	095b      	lsrs	r3, r3, #5
 800819e:	2164      	movs	r1, #100	; 0x64
 80081a0:	fb01 f303 	mul.w	r3, r1, r3
 80081a4:	1ad3      	subs	r3, r2, r3
 80081a6:	00db      	lsls	r3, r3, #3
 80081a8:	3332      	adds	r3, #50	; 0x32
 80081aa:	4a67      	ldr	r2, [pc, #412]	; (8008348 <UART_SetConfig+0x38c>)
 80081ac:	fba2 2303 	umull	r2, r3, r2, r3
 80081b0:	095b      	lsrs	r3, r3, #5
 80081b2:	f003 0207 	and.w	r2, r3, #7
 80081b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4432      	add	r2, r6
 80081bc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80081be:	e0b9      	b.n	8008334 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80081c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081c2:	461c      	mov	r4, r3
 80081c4:	f04f 0500 	mov.w	r5, #0
 80081c8:	4622      	mov	r2, r4
 80081ca:	462b      	mov	r3, r5
 80081cc:	1891      	adds	r1, r2, r2
 80081ce:	6139      	str	r1, [r7, #16]
 80081d0:	415b      	adcs	r3, r3
 80081d2:	617b      	str	r3, [r7, #20]
 80081d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80081d8:	1912      	adds	r2, r2, r4
 80081da:	eb45 0303 	adc.w	r3, r5, r3
 80081de:	f04f 0000 	mov.w	r0, #0
 80081e2:	f04f 0100 	mov.w	r1, #0
 80081e6:	00d9      	lsls	r1, r3, #3
 80081e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80081ec:	00d0      	lsls	r0, r2, #3
 80081ee:	4602      	mov	r2, r0
 80081f0:	460b      	mov	r3, r1
 80081f2:	eb12 0804 	adds.w	r8, r2, r4
 80081f6:	eb43 0905 	adc.w	r9, r3, r5
 80081fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	4618      	mov	r0, r3
 8008200:	f04f 0100 	mov.w	r1, #0
 8008204:	f04f 0200 	mov.w	r2, #0
 8008208:	f04f 0300 	mov.w	r3, #0
 800820c:	008b      	lsls	r3, r1, #2
 800820e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008212:	0082      	lsls	r2, r0, #2
 8008214:	4640      	mov	r0, r8
 8008216:	4649      	mov	r1, r9
 8008218:	f7f8 f82a 	bl	8000270 <__aeabi_uldivmod>
 800821c:	4602      	mov	r2, r0
 800821e:	460b      	mov	r3, r1
 8008220:	4b49      	ldr	r3, [pc, #292]	; (8008348 <UART_SetConfig+0x38c>)
 8008222:	fba3 2302 	umull	r2, r3, r3, r2
 8008226:	095b      	lsrs	r3, r3, #5
 8008228:	011e      	lsls	r6, r3, #4
 800822a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800822c:	4618      	mov	r0, r3
 800822e:	f04f 0100 	mov.w	r1, #0
 8008232:	4602      	mov	r2, r0
 8008234:	460b      	mov	r3, r1
 8008236:	1894      	adds	r4, r2, r2
 8008238:	60bc      	str	r4, [r7, #8]
 800823a:	415b      	adcs	r3, r3
 800823c:	60fb      	str	r3, [r7, #12]
 800823e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008242:	1812      	adds	r2, r2, r0
 8008244:	eb41 0303 	adc.w	r3, r1, r3
 8008248:	f04f 0400 	mov.w	r4, #0
 800824c:	f04f 0500 	mov.w	r5, #0
 8008250:	00dd      	lsls	r5, r3, #3
 8008252:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008256:	00d4      	lsls	r4, r2, #3
 8008258:	4622      	mov	r2, r4
 800825a:	462b      	mov	r3, r5
 800825c:	1814      	adds	r4, r2, r0
 800825e:	64bc      	str	r4, [r7, #72]	; 0x48
 8008260:	414b      	adcs	r3, r1
 8008262:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008264:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	4618      	mov	r0, r3
 800826a:	f04f 0100 	mov.w	r1, #0
 800826e:	f04f 0200 	mov.w	r2, #0
 8008272:	f04f 0300 	mov.w	r3, #0
 8008276:	008b      	lsls	r3, r1, #2
 8008278:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800827c:	0082      	lsls	r2, r0, #2
 800827e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008282:	f7f7 fff5 	bl	8000270 <__aeabi_uldivmod>
 8008286:	4602      	mov	r2, r0
 8008288:	460b      	mov	r3, r1
 800828a:	4b2f      	ldr	r3, [pc, #188]	; (8008348 <UART_SetConfig+0x38c>)
 800828c:	fba3 1302 	umull	r1, r3, r3, r2
 8008290:	095b      	lsrs	r3, r3, #5
 8008292:	2164      	movs	r1, #100	; 0x64
 8008294:	fb01 f303 	mul.w	r3, r1, r3
 8008298:	1ad3      	subs	r3, r2, r3
 800829a:	011b      	lsls	r3, r3, #4
 800829c:	3332      	adds	r3, #50	; 0x32
 800829e:	4a2a      	ldr	r2, [pc, #168]	; (8008348 <UART_SetConfig+0x38c>)
 80082a0:	fba2 2303 	umull	r2, r3, r2, r3
 80082a4:	095b      	lsrs	r3, r3, #5
 80082a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80082aa:	441e      	add	r6, r3
 80082ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082ae:	4618      	mov	r0, r3
 80082b0:	f04f 0100 	mov.w	r1, #0
 80082b4:	4602      	mov	r2, r0
 80082b6:	460b      	mov	r3, r1
 80082b8:	1894      	adds	r4, r2, r2
 80082ba:	603c      	str	r4, [r7, #0]
 80082bc:	415b      	adcs	r3, r3
 80082be:	607b      	str	r3, [r7, #4]
 80082c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082c4:	1812      	adds	r2, r2, r0
 80082c6:	eb41 0303 	adc.w	r3, r1, r3
 80082ca:	f04f 0400 	mov.w	r4, #0
 80082ce:	f04f 0500 	mov.w	r5, #0
 80082d2:	00dd      	lsls	r5, r3, #3
 80082d4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80082d8:	00d4      	lsls	r4, r2, #3
 80082da:	4622      	mov	r2, r4
 80082dc:	462b      	mov	r3, r5
 80082de:	eb12 0a00 	adds.w	sl, r2, r0
 80082e2:	eb43 0b01 	adc.w	fp, r3, r1
 80082e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	4618      	mov	r0, r3
 80082ec:	f04f 0100 	mov.w	r1, #0
 80082f0:	f04f 0200 	mov.w	r2, #0
 80082f4:	f04f 0300 	mov.w	r3, #0
 80082f8:	008b      	lsls	r3, r1, #2
 80082fa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80082fe:	0082      	lsls	r2, r0, #2
 8008300:	4650      	mov	r0, sl
 8008302:	4659      	mov	r1, fp
 8008304:	f7f7 ffb4 	bl	8000270 <__aeabi_uldivmod>
 8008308:	4602      	mov	r2, r0
 800830a:	460b      	mov	r3, r1
 800830c:	4b0e      	ldr	r3, [pc, #56]	; (8008348 <UART_SetConfig+0x38c>)
 800830e:	fba3 1302 	umull	r1, r3, r3, r2
 8008312:	095b      	lsrs	r3, r3, #5
 8008314:	2164      	movs	r1, #100	; 0x64
 8008316:	fb01 f303 	mul.w	r3, r1, r3
 800831a:	1ad3      	subs	r3, r2, r3
 800831c:	011b      	lsls	r3, r3, #4
 800831e:	3332      	adds	r3, #50	; 0x32
 8008320:	4a09      	ldr	r2, [pc, #36]	; (8008348 <UART_SetConfig+0x38c>)
 8008322:	fba2 2303 	umull	r2, r3, r2, r3
 8008326:	095b      	lsrs	r3, r3, #5
 8008328:	f003 020f 	and.w	r2, r3, #15
 800832c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4432      	add	r2, r6
 8008332:	609a      	str	r2, [r3, #8]
}
 8008334:	bf00      	nop
 8008336:	377c      	adds	r7, #124	; 0x7c
 8008338:	46bd      	mov	sp, r7
 800833a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800833e:	bf00      	nop
 8008340:	40011000 	.word	0x40011000
 8008344:	40011400 	.word	0x40011400
 8008348:	51eb851f 	.word	0x51eb851f

0800834c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800834c:	b480      	push	{r7}
 800834e:	b085      	sub	sp, #20
 8008350:	af00      	add	r7, sp, #0
 8008352:	4603      	mov	r3, r0
 8008354:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008356:	2300      	movs	r3, #0
 8008358:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800835a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800835e:	2b84      	cmp	r3, #132	; 0x84
 8008360:	d005      	beq.n	800836e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008362:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	4413      	add	r3, r2
 800836a:	3303      	adds	r3, #3
 800836c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800836e:	68fb      	ldr	r3, [r7, #12]
}
 8008370:	4618      	mov	r0, r3
 8008372:	3714      	adds	r7, #20
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr

0800837c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008380:	f000 faf6 	bl	8008970 <vTaskStartScheduler>
  
  return osOK;
 8008384:	2300      	movs	r3, #0
}
 8008386:	4618      	mov	r0, r3
 8008388:	bd80      	pop	{r7, pc}

0800838a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800838a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800838c:	b089      	sub	sp, #36	; 0x24
 800838e:	af04      	add	r7, sp, #16
 8008390:	6078      	str	r0, [r7, #4]
 8008392:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	695b      	ldr	r3, [r3, #20]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d020      	beq.n	80083de <osThreadCreate+0x54>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	699b      	ldr	r3, [r3, #24]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d01c      	beq.n	80083de <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	685c      	ldr	r4, [r3, #4]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681d      	ldr	r5, [r3, #0]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	691e      	ldr	r6, [r3, #16]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80083b6:	4618      	mov	r0, r3
 80083b8:	f7ff ffc8 	bl	800834c <makeFreeRtosPriority>
 80083bc:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	695b      	ldr	r3, [r3, #20]
 80083c2:	687a      	ldr	r2, [r7, #4]
 80083c4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80083c6:	9202      	str	r2, [sp, #8]
 80083c8:	9301      	str	r3, [sp, #4]
 80083ca:	9100      	str	r1, [sp, #0]
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	4632      	mov	r2, r6
 80083d0:	4629      	mov	r1, r5
 80083d2:	4620      	mov	r0, r4
 80083d4:	f000 f8ed 	bl	80085b2 <xTaskCreateStatic>
 80083d8:	4603      	mov	r3, r0
 80083da:	60fb      	str	r3, [r7, #12]
 80083dc:	e01c      	b.n	8008418 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	685c      	ldr	r4, [r3, #4]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80083ea:	b29e      	uxth	r6, r3
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80083f2:	4618      	mov	r0, r3
 80083f4:	f7ff ffaa 	bl	800834c <makeFreeRtosPriority>
 80083f8:	4602      	mov	r2, r0
 80083fa:	f107 030c 	add.w	r3, r7, #12
 80083fe:	9301      	str	r3, [sp, #4]
 8008400:	9200      	str	r2, [sp, #0]
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	4632      	mov	r2, r6
 8008406:	4629      	mov	r1, r5
 8008408:	4620      	mov	r0, r4
 800840a:	f000 f92f 	bl	800866c <xTaskCreate>
 800840e:	4603      	mov	r3, r0
 8008410:	2b01      	cmp	r3, #1
 8008412:	d001      	beq.n	8008418 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008414:	2300      	movs	r3, #0
 8008416:	e000      	b.n	800841a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008418:	68fb      	ldr	r3, [r7, #12]
}
 800841a:	4618      	mov	r0, r3
 800841c:	3714      	adds	r7, #20
 800841e:	46bd      	mov	sp, r7
 8008420:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008422 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008422:	b580      	push	{r7, lr}
 8008424:	b084      	sub	sp, #16
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d001      	beq.n	8008438 <osDelay+0x16>
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	e000      	b.n	800843a <osDelay+0x18>
 8008438:	2301      	movs	r3, #1
 800843a:	4618      	mov	r0, r3
 800843c:	f000 fa64 	bl	8008908 <vTaskDelay>
  
  return osOK;
 8008440:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008442:	4618      	mov	r0, r3
 8008444:	3710      	adds	r7, #16
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}

0800844a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800844a:	b480      	push	{r7}
 800844c:	b083      	sub	sp, #12
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f103 0208 	add.w	r2, r3, #8
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f04f 32ff 	mov.w	r2, #4294967295
 8008462:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f103 0208 	add.w	r2, r3, #8
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f103 0208 	add.w	r2, r3, #8
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2200      	movs	r2, #0
 800847c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800847e:	bf00      	nop
 8008480:	370c      	adds	r7, #12
 8008482:	46bd      	mov	sp, r7
 8008484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008488:	4770      	bx	lr

0800848a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800848a:	b480      	push	{r7}
 800848c:	b083      	sub	sp, #12
 800848e:	af00      	add	r7, sp, #0
 8008490:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2200      	movs	r2, #0
 8008496:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008498:	bf00      	nop
 800849a:	370c      	adds	r7, #12
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr

080084a4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80084a4:	b480      	push	{r7}
 80084a6:	b085      	sub	sp, #20
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	68fa      	ldr	r2, [r7, #12]
 80084b8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	689a      	ldr	r2, [r3, #8]
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	689b      	ldr	r3, [r3, #8]
 80084c6:	683a      	ldr	r2, [r7, #0]
 80084c8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	683a      	ldr	r2, [r7, #0]
 80084ce:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	1c5a      	adds	r2, r3, #1
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	601a      	str	r2, [r3, #0]
}
 80084e0:	bf00      	nop
 80084e2:	3714      	adds	r7, #20
 80084e4:	46bd      	mov	sp, r7
 80084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ea:	4770      	bx	lr

080084ec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80084ec:	b480      	push	{r7}
 80084ee:	b085      	sub	sp, #20
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008502:	d103      	bne.n	800850c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	691b      	ldr	r3, [r3, #16]
 8008508:	60fb      	str	r3, [r7, #12]
 800850a:	e00c      	b.n	8008526 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	3308      	adds	r3, #8
 8008510:	60fb      	str	r3, [r7, #12]
 8008512:	e002      	b.n	800851a <vListInsert+0x2e>
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	60fb      	str	r3, [r7, #12]
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	68ba      	ldr	r2, [r7, #8]
 8008522:	429a      	cmp	r2, r3
 8008524:	d2f6      	bcs.n	8008514 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	685a      	ldr	r2, [r3, #4]
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	683a      	ldr	r2, [r7, #0]
 8008534:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	68fa      	ldr	r2, [r7, #12]
 800853a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	683a      	ldr	r2, [r7, #0]
 8008540:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	687a      	ldr	r2, [r7, #4]
 8008546:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	1c5a      	adds	r2, r3, #1
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	601a      	str	r2, [r3, #0]
}
 8008552:	bf00      	nop
 8008554:	3714      	adds	r7, #20
 8008556:	46bd      	mov	sp, r7
 8008558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855c:	4770      	bx	lr

0800855e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800855e:	b480      	push	{r7}
 8008560:	b085      	sub	sp, #20
 8008562:	af00      	add	r7, sp, #0
 8008564:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	691b      	ldr	r3, [r3, #16]
 800856a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	687a      	ldr	r2, [r7, #4]
 8008572:	6892      	ldr	r2, [r2, #8]
 8008574:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	689b      	ldr	r3, [r3, #8]
 800857a:	687a      	ldr	r2, [r7, #4]
 800857c:	6852      	ldr	r2, [r2, #4]
 800857e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	687a      	ldr	r2, [r7, #4]
 8008586:	429a      	cmp	r2, r3
 8008588:	d103      	bne.n	8008592 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	689a      	ldr	r2, [r3, #8]
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2200      	movs	r2, #0
 8008596:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	1e5a      	subs	r2, r3, #1
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3714      	adds	r7, #20
 80085aa:	46bd      	mov	sp, r7
 80085ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b0:	4770      	bx	lr

080085b2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80085b2:	b580      	push	{r7, lr}
 80085b4:	b08e      	sub	sp, #56	; 0x38
 80085b6:	af04      	add	r7, sp, #16
 80085b8:	60f8      	str	r0, [r7, #12]
 80085ba:	60b9      	str	r1, [r7, #8]
 80085bc:	607a      	str	r2, [r7, #4]
 80085be:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80085c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d10a      	bne.n	80085dc <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80085c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ca:	f383 8811 	msr	BASEPRI, r3
 80085ce:	f3bf 8f6f 	isb	sy
 80085d2:	f3bf 8f4f 	dsb	sy
 80085d6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80085d8:	bf00      	nop
 80085da:	e7fe      	b.n	80085da <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80085dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d10a      	bne.n	80085f8 <xTaskCreateStatic+0x46>
	__asm volatile
 80085e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e6:	f383 8811 	msr	BASEPRI, r3
 80085ea:	f3bf 8f6f 	isb	sy
 80085ee:	f3bf 8f4f 	dsb	sy
 80085f2:	61fb      	str	r3, [r7, #28]
}
 80085f4:	bf00      	nop
 80085f6:	e7fe      	b.n	80085f6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80085f8:	23b4      	movs	r3, #180	; 0xb4
 80085fa:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	2bb4      	cmp	r3, #180	; 0xb4
 8008600:	d00a      	beq.n	8008618 <xTaskCreateStatic+0x66>
	__asm volatile
 8008602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008606:	f383 8811 	msr	BASEPRI, r3
 800860a:	f3bf 8f6f 	isb	sy
 800860e:	f3bf 8f4f 	dsb	sy
 8008612:	61bb      	str	r3, [r7, #24]
}
 8008614:	bf00      	nop
 8008616:	e7fe      	b.n	8008616 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008618:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800861a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800861c:	2b00      	cmp	r3, #0
 800861e:	d01e      	beq.n	800865e <xTaskCreateStatic+0xac>
 8008620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008622:	2b00      	cmp	r3, #0
 8008624:	d01b      	beq.n	800865e <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008628:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800862a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800862e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008632:	2202      	movs	r2, #2
 8008634:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008638:	2300      	movs	r3, #0
 800863a:	9303      	str	r3, [sp, #12]
 800863c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863e:	9302      	str	r3, [sp, #8]
 8008640:	f107 0314 	add.w	r3, r7, #20
 8008644:	9301      	str	r3, [sp, #4]
 8008646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008648:	9300      	str	r3, [sp, #0]
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	68b9      	ldr	r1, [r7, #8]
 8008650:	68f8      	ldr	r0, [r7, #12]
 8008652:	f000 f851 	bl	80086f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008656:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008658:	f000 f8ec 	bl	8008834 <prvAddNewTaskToReadyList>
 800865c:	e001      	b.n	8008662 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800865e:	2300      	movs	r3, #0
 8008660:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008662:	697b      	ldr	r3, [r7, #20]
	}
 8008664:	4618      	mov	r0, r3
 8008666:	3728      	adds	r7, #40	; 0x28
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800866c:	b580      	push	{r7, lr}
 800866e:	b08c      	sub	sp, #48	; 0x30
 8008670:	af04      	add	r7, sp, #16
 8008672:	60f8      	str	r0, [r7, #12]
 8008674:	60b9      	str	r1, [r7, #8]
 8008676:	603b      	str	r3, [r7, #0]
 8008678:	4613      	mov	r3, r2
 800867a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800867c:	88fb      	ldrh	r3, [r7, #6]
 800867e:	009b      	lsls	r3, r3, #2
 8008680:	4618      	mov	r0, r3
 8008682:	f000 fef1 	bl	8009468 <pvPortMalloc>
 8008686:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d00e      	beq.n	80086ac <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800868e:	20b4      	movs	r0, #180	; 0xb4
 8008690:	f000 feea 	bl	8009468 <pvPortMalloc>
 8008694:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008696:	69fb      	ldr	r3, [r7, #28]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d003      	beq.n	80086a4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800869c:	69fb      	ldr	r3, [r7, #28]
 800869e:	697a      	ldr	r2, [r7, #20]
 80086a0:	631a      	str	r2, [r3, #48]	; 0x30
 80086a2:	e005      	b.n	80086b0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80086a4:	6978      	ldr	r0, [r7, #20]
 80086a6:	f000 ffab 	bl	8009600 <vPortFree>
 80086aa:	e001      	b.n	80086b0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80086ac:	2300      	movs	r3, #0
 80086ae:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80086b0:	69fb      	ldr	r3, [r7, #28]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d017      	beq.n	80086e6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80086b6:	69fb      	ldr	r3, [r7, #28]
 80086b8:	2200      	movs	r2, #0
 80086ba:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80086be:	88fa      	ldrh	r2, [r7, #6]
 80086c0:	2300      	movs	r3, #0
 80086c2:	9303      	str	r3, [sp, #12]
 80086c4:	69fb      	ldr	r3, [r7, #28]
 80086c6:	9302      	str	r3, [sp, #8]
 80086c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ca:	9301      	str	r3, [sp, #4]
 80086cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ce:	9300      	str	r3, [sp, #0]
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	68b9      	ldr	r1, [r7, #8]
 80086d4:	68f8      	ldr	r0, [r7, #12]
 80086d6:	f000 f80f 	bl	80086f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80086da:	69f8      	ldr	r0, [r7, #28]
 80086dc:	f000 f8aa 	bl	8008834 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80086e0:	2301      	movs	r3, #1
 80086e2:	61bb      	str	r3, [r7, #24]
 80086e4:	e002      	b.n	80086ec <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80086e6:	f04f 33ff 	mov.w	r3, #4294967295
 80086ea:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80086ec:	69bb      	ldr	r3, [r7, #24]
	}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3720      	adds	r7, #32
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
	...

080086f8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b088      	sub	sp, #32
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	60b9      	str	r1, [r7, #8]
 8008702:	607a      	str	r2, [r7, #4]
 8008704:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008708:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008710:	3b01      	subs	r3, #1
 8008712:	009b      	lsls	r3, r3, #2
 8008714:	4413      	add	r3, r2
 8008716:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008718:	69bb      	ldr	r3, [r7, #24]
 800871a:	f023 0307 	bic.w	r3, r3, #7
 800871e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008720:	69bb      	ldr	r3, [r7, #24]
 8008722:	f003 0307 	and.w	r3, r3, #7
 8008726:	2b00      	cmp	r3, #0
 8008728:	d00a      	beq.n	8008740 <prvInitialiseNewTask+0x48>
	__asm volatile
 800872a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800872e:	f383 8811 	msr	BASEPRI, r3
 8008732:	f3bf 8f6f 	isb	sy
 8008736:	f3bf 8f4f 	dsb	sy
 800873a:	617b      	str	r3, [r7, #20]
}
 800873c:	bf00      	nop
 800873e:	e7fe      	b.n	800873e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d01f      	beq.n	8008786 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008746:	2300      	movs	r3, #0
 8008748:	61fb      	str	r3, [r7, #28]
 800874a:	e012      	b.n	8008772 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800874c:	68ba      	ldr	r2, [r7, #8]
 800874e:	69fb      	ldr	r3, [r7, #28]
 8008750:	4413      	add	r3, r2
 8008752:	7819      	ldrb	r1, [r3, #0]
 8008754:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008756:	69fb      	ldr	r3, [r7, #28]
 8008758:	4413      	add	r3, r2
 800875a:	3334      	adds	r3, #52	; 0x34
 800875c:	460a      	mov	r2, r1
 800875e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008760:	68ba      	ldr	r2, [r7, #8]
 8008762:	69fb      	ldr	r3, [r7, #28]
 8008764:	4413      	add	r3, r2
 8008766:	781b      	ldrb	r3, [r3, #0]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d006      	beq.n	800877a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800876c:	69fb      	ldr	r3, [r7, #28]
 800876e:	3301      	adds	r3, #1
 8008770:	61fb      	str	r3, [r7, #28]
 8008772:	69fb      	ldr	r3, [r7, #28]
 8008774:	2b0f      	cmp	r3, #15
 8008776:	d9e9      	bls.n	800874c <prvInitialiseNewTask+0x54>
 8008778:	e000      	b.n	800877c <prvInitialiseNewTask+0x84>
			{
				break;
 800877a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800877c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800877e:	2200      	movs	r2, #0
 8008780:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008784:	e003      	b.n	800878e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008788:	2200      	movs	r2, #0
 800878a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800878e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008790:	2b06      	cmp	r3, #6
 8008792:	d901      	bls.n	8008798 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008794:	2306      	movs	r3, #6
 8008796:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800879a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800879c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800879e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087a2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80087a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a6:	2200      	movs	r2, #0
 80087a8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80087aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ac:	3304      	adds	r3, #4
 80087ae:	4618      	mov	r0, r3
 80087b0:	f7ff fe6b 	bl	800848a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80087b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b6:	3318      	adds	r3, #24
 80087b8:	4618      	mov	r0, r3
 80087ba:	f7ff fe66 	bl	800848a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80087be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087c2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c6:	f1c3 0207 	rsb	r2, r3, #7
 80087ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087cc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80087ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087d2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80087d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d6:	2200      	movs	r2, #0
 80087d8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80087dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087de:	2200      	movs	r2, #0
 80087e0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80087e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e6:	334c      	adds	r3, #76	; 0x4c
 80087e8:	2260      	movs	r2, #96	; 0x60
 80087ea:	2100      	movs	r1, #0
 80087ec:	4618      	mov	r0, r3
 80087ee:	f001 f879 	bl	80098e4 <memset>
 80087f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087f4:	4a0c      	ldr	r2, [pc, #48]	; (8008828 <prvInitialiseNewTask+0x130>)
 80087f6:	651a      	str	r2, [r3, #80]	; 0x50
 80087f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087fa:	4a0c      	ldr	r2, [pc, #48]	; (800882c <prvInitialiseNewTask+0x134>)
 80087fc:	655a      	str	r2, [r3, #84]	; 0x54
 80087fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008800:	4a0b      	ldr	r2, [pc, #44]	; (8008830 <prvInitialiseNewTask+0x138>)
 8008802:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008804:	683a      	ldr	r2, [r7, #0]
 8008806:	68f9      	ldr	r1, [r7, #12]
 8008808:	69b8      	ldr	r0, [r7, #24]
 800880a:	f000 fc1f 	bl	800904c <pxPortInitialiseStack>
 800880e:	4602      	mov	r2, r0
 8008810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008812:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008816:	2b00      	cmp	r3, #0
 8008818:	d002      	beq.n	8008820 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800881a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800881c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800881e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008820:	bf00      	nop
 8008822:	3720      	adds	r7, #32
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}
 8008828:	0800b848 	.word	0x0800b848
 800882c:	0800b868 	.word	0x0800b868
 8008830:	0800b828 	.word	0x0800b828

08008834 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b082      	sub	sp, #8
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800883c:	f000 fd32 	bl	80092a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008840:	4b2a      	ldr	r3, [pc, #168]	; (80088ec <prvAddNewTaskToReadyList+0xb8>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	3301      	adds	r3, #1
 8008846:	4a29      	ldr	r2, [pc, #164]	; (80088ec <prvAddNewTaskToReadyList+0xb8>)
 8008848:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800884a:	4b29      	ldr	r3, [pc, #164]	; (80088f0 <prvAddNewTaskToReadyList+0xbc>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d109      	bne.n	8008866 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008852:	4a27      	ldr	r2, [pc, #156]	; (80088f0 <prvAddNewTaskToReadyList+0xbc>)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008858:	4b24      	ldr	r3, [pc, #144]	; (80088ec <prvAddNewTaskToReadyList+0xb8>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	2b01      	cmp	r3, #1
 800885e:	d110      	bne.n	8008882 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008860:	f000 facc 	bl	8008dfc <prvInitialiseTaskLists>
 8008864:	e00d      	b.n	8008882 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008866:	4b23      	ldr	r3, [pc, #140]	; (80088f4 <prvAddNewTaskToReadyList+0xc0>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d109      	bne.n	8008882 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800886e:	4b20      	ldr	r3, [pc, #128]	; (80088f0 <prvAddNewTaskToReadyList+0xbc>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008878:	429a      	cmp	r2, r3
 800887a:	d802      	bhi.n	8008882 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800887c:	4a1c      	ldr	r2, [pc, #112]	; (80088f0 <prvAddNewTaskToReadyList+0xbc>)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008882:	4b1d      	ldr	r3, [pc, #116]	; (80088f8 <prvAddNewTaskToReadyList+0xc4>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	3301      	adds	r3, #1
 8008888:	4a1b      	ldr	r2, [pc, #108]	; (80088f8 <prvAddNewTaskToReadyList+0xc4>)
 800888a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008890:	2201      	movs	r2, #1
 8008892:	409a      	lsls	r2, r3
 8008894:	4b19      	ldr	r3, [pc, #100]	; (80088fc <prvAddNewTaskToReadyList+0xc8>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4313      	orrs	r3, r2
 800889a:	4a18      	ldr	r2, [pc, #96]	; (80088fc <prvAddNewTaskToReadyList+0xc8>)
 800889c:	6013      	str	r3, [r2, #0]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088a2:	4613      	mov	r3, r2
 80088a4:	009b      	lsls	r3, r3, #2
 80088a6:	4413      	add	r3, r2
 80088a8:	009b      	lsls	r3, r3, #2
 80088aa:	4a15      	ldr	r2, [pc, #84]	; (8008900 <prvAddNewTaskToReadyList+0xcc>)
 80088ac:	441a      	add	r2, r3
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	3304      	adds	r3, #4
 80088b2:	4619      	mov	r1, r3
 80088b4:	4610      	mov	r0, r2
 80088b6:	f7ff fdf5 	bl	80084a4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80088ba:	f000 fd23 	bl	8009304 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80088be:	4b0d      	ldr	r3, [pc, #52]	; (80088f4 <prvAddNewTaskToReadyList+0xc0>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d00e      	beq.n	80088e4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80088c6:	4b0a      	ldr	r3, [pc, #40]	; (80088f0 <prvAddNewTaskToReadyList+0xbc>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d207      	bcs.n	80088e4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80088d4:	4b0b      	ldr	r3, [pc, #44]	; (8008904 <prvAddNewTaskToReadyList+0xd0>)
 80088d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088da:	601a      	str	r2, [r3, #0]
 80088dc:	f3bf 8f4f 	dsb	sy
 80088e0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80088e4:	bf00      	nop
 80088e6:	3708      	adds	r7, #8
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}
 80088ec:	20000aa8 	.word	0x20000aa8
 80088f0:	200009a8 	.word	0x200009a8
 80088f4:	20000ab4 	.word	0x20000ab4
 80088f8:	20000ac4 	.word	0x20000ac4
 80088fc:	20000ab0 	.word	0x20000ab0
 8008900:	200009ac 	.word	0x200009ac
 8008904:	e000ed04 	.word	0xe000ed04

08008908 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008908:	b580      	push	{r7, lr}
 800890a:	b084      	sub	sp, #16
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008910:	2300      	movs	r3, #0
 8008912:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d017      	beq.n	800894a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800891a:	4b13      	ldr	r3, [pc, #76]	; (8008968 <vTaskDelay+0x60>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d00a      	beq.n	8008938 <vTaskDelay+0x30>
	__asm volatile
 8008922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008926:	f383 8811 	msr	BASEPRI, r3
 800892a:	f3bf 8f6f 	isb	sy
 800892e:	f3bf 8f4f 	dsb	sy
 8008932:	60bb      	str	r3, [r7, #8]
}
 8008934:	bf00      	nop
 8008936:	e7fe      	b.n	8008936 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008938:	f000 f884 	bl	8008a44 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800893c:	2100      	movs	r1, #0
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 fb1e 	bl	8008f80 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008944:	f000 f88c 	bl	8008a60 <xTaskResumeAll>
 8008948:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d107      	bne.n	8008960 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008950:	4b06      	ldr	r3, [pc, #24]	; (800896c <vTaskDelay+0x64>)
 8008952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008956:	601a      	str	r2, [r3, #0]
 8008958:	f3bf 8f4f 	dsb	sy
 800895c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008960:	bf00      	nop
 8008962:	3710      	adds	r7, #16
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}
 8008968:	20000ad0 	.word	0x20000ad0
 800896c:	e000ed04 	.word	0xe000ed04

08008970 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b08a      	sub	sp, #40	; 0x28
 8008974:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008976:	2300      	movs	r3, #0
 8008978:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800897a:	2300      	movs	r3, #0
 800897c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800897e:	463a      	mov	r2, r7
 8008980:	1d39      	adds	r1, r7, #4
 8008982:	f107 0308 	add.w	r3, r7, #8
 8008986:	4618      	mov	r0, r3
 8008988:	f7f7 ff62 	bl	8000850 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800898c:	6839      	ldr	r1, [r7, #0]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	68ba      	ldr	r2, [r7, #8]
 8008992:	9202      	str	r2, [sp, #8]
 8008994:	9301      	str	r3, [sp, #4]
 8008996:	2300      	movs	r3, #0
 8008998:	9300      	str	r3, [sp, #0]
 800899a:	2300      	movs	r3, #0
 800899c:	460a      	mov	r2, r1
 800899e:	4921      	ldr	r1, [pc, #132]	; (8008a24 <vTaskStartScheduler+0xb4>)
 80089a0:	4821      	ldr	r0, [pc, #132]	; (8008a28 <vTaskStartScheduler+0xb8>)
 80089a2:	f7ff fe06 	bl	80085b2 <xTaskCreateStatic>
 80089a6:	4603      	mov	r3, r0
 80089a8:	4a20      	ldr	r2, [pc, #128]	; (8008a2c <vTaskStartScheduler+0xbc>)
 80089aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80089ac:	4b1f      	ldr	r3, [pc, #124]	; (8008a2c <vTaskStartScheduler+0xbc>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d002      	beq.n	80089ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80089b4:	2301      	movs	r3, #1
 80089b6:	617b      	str	r3, [r7, #20]
 80089b8:	e001      	b.n	80089be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80089ba:	2300      	movs	r3, #0
 80089bc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d11b      	bne.n	80089fc <vTaskStartScheduler+0x8c>
	__asm volatile
 80089c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c8:	f383 8811 	msr	BASEPRI, r3
 80089cc:	f3bf 8f6f 	isb	sy
 80089d0:	f3bf 8f4f 	dsb	sy
 80089d4:	613b      	str	r3, [r7, #16]
}
 80089d6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80089d8:	4b15      	ldr	r3, [pc, #84]	; (8008a30 <vTaskStartScheduler+0xc0>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	334c      	adds	r3, #76	; 0x4c
 80089de:	4a15      	ldr	r2, [pc, #84]	; (8008a34 <vTaskStartScheduler+0xc4>)
 80089e0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80089e2:	4b15      	ldr	r3, [pc, #84]	; (8008a38 <vTaskStartScheduler+0xc8>)
 80089e4:	f04f 32ff 	mov.w	r2, #4294967295
 80089e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80089ea:	4b14      	ldr	r3, [pc, #80]	; (8008a3c <vTaskStartScheduler+0xcc>)
 80089ec:	2201      	movs	r2, #1
 80089ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80089f0:	4b13      	ldr	r3, [pc, #76]	; (8008a40 <vTaskStartScheduler+0xd0>)
 80089f2:	2200      	movs	r2, #0
 80089f4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80089f6:	f000 fbb3 	bl	8009160 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80089fa:	e00e      	b.n	8008a1a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a02:	d10a      	bne.n	8008a1a <vTaskStartScheduler+0xaa>
	__asm volatile
 8008a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a08:	f383 8811 	msr	BASEPRI, r3
 8008a0c:	f3bf 8f6f 	isb	sy
 8008a10:	f3bf 8f4f 	dsb	sy
 8008a14:	60fb      	str	r3, [r7, #12]
}
 8008a16:	bf00      	nop
 8008a18:	e7fe      	b.n	8008a18 <vTaskStartScheduler+0xa8>
}
 8008a1a:	bf00      	nop
 8008a1c:	3718      	adds	r7, #24
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}
 8008a22:	bf00      	nop
 8008a24:	0800a340 	.word	0x0800a340
 8008a28:	08008dcd 	.word	0x08008dcd
 8008a2c:	20000acc 	.word	0x20000acc
 8008a30:	200009a8 	.word	0x200009a8
 8008a34:	20000020 	.word	0x20000020
 8008a38:	20000ac8 	.word	0x20000ac8
 8008a3c:	20000ab4 	.word	0x20000ab4
 8008a40:	20000aac 	.word	0x20000aac

08008a44 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008a44:	b480      	push	{r7}
 8008a46:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008a48:	4b04      	ldr	r3, [pc, #16]	; (8008a5c <vTaskSuspendAll+0x18>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	3301      	adds	r3, #1
 8008a4e:	4a03      	ldr	r2, [pc, #12]	; (8008a5c <vTaskSuspendAll+0x18>)
 8008a50:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008a52:	bf00      	nop
 8008a54:	46bd      	mov	sp, r7
 8008a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5a:	4770      	bx	lr
 8008a5c:	20000ad0 	.word	0x20000ad0

08008a60 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008a66:	2300      	movs	r3, #0
 8008a68:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008a6e:	4b41      	ldr	r3, [pc, #260]	; (8008b74 <xTaskResumeAll+0x114>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d10a      	bne.n	8008a8c <xTaskResumeAll+0x2c>
	__asm volatile
 8008a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a7a:	f383 8811 	msr	BASEPRI, r3
 8008a7e:	f3bf 8f6f 	isb	sy
 8008a82:	f3bf 8f4f 	dsb	sy
 8008a86:	603b      	str	r3, [r7, #0]
}
 8008a88:	bf00      	nop
 8008a8a:	e7fe      	b.n	8008a8a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008a8c:	f000 fc0a 	bl	80092a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008a90:	4b38      	ldr	r3, [pc, #224]	; (8008b74 <xTaskResumeAll+0x114>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	3b01      	subs	r3, #1
 8008a96:	4a37      	ldr	r2, [pc, #220]	; (8008b74 <xTaskResumeAll+0x114>)
 8008a98:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a9a:	4b36      	ldr	r3, [pc, #216]	; (8008b74 <xTaskResumeAll+0x114>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d161      	bne.n	8008b66 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008aa2:	4b35      	ldr	r3, [pc, #212]	; (8008b78 <xTaskResumeAll+0x118>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d05d      	beq.n	8008b66 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008aaa:	e02e      	b.n	8008b0a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008aac:	4b33      	ldr	r3, [pc, #204]	; (8008b7c <xTaskResumeAll+0x11c>)
 8008aae:	68db      	ldr	r3, [r3, #12]
 8008ab0:	68db      	ldr	r3, [r3, #12]
 8008ab2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	3318      	adds	r3, #24
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f7ff fd50 	bl	800855e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	3304      	adds	r3, #4
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f7ff fd4b 	bl	800855e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008acc:	2201      	movs	r2, #1
 8008ace:	409a      	lsls	r2, r3
 8008ad0:	4b2b      	ldr	r3, [pc, #172]	; (8008b80 <xTaskResumeAll+0x120>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	4a2a      	ldr	r2, [pc, #168]	; (8008b80 <xTaskResumeAll+0x120>)
 8008ad8:	6013      	str	r3, [r2, #0]
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ade:	4613      	mov	r3, r2
 8008ae0:	009b      	lsls	r3, r3, #2
 8008ae2:	4413      	add	r3, r2
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	4a27      	ldr	r2, [pc, #156]	; (8008b84 <xTaskResumeAll+0x124>)
 8008ae8:	441a      	add	r2, r3
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	3304      	adds	r3, #4
 8008aee:	4619      	mov	r1, r3
 8008af0:	4610      	mov	r0, r2
 8008af2:	f7ff fcd7 	bl	80084a4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008afa:	4b23      	ldr	r3, [pc, #140]	; (8008b88 <xTaskResumeAll+0x128>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b00:	429a      	cmp	r2, r3
 8008b02:	d302      	bcc.n	8008b0a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008b04:	4b21      	ldr	r3, [pc, #132]	; (8008b8c <xTaskResumeAll+0x12c>)
 8008b06:	2201      	movs	r2, #1
 8008b08:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008b0a:	4b1c      	ldr	r3, [pc, #112]	; (8008b7c <xTaskResumeAll+0x11c>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d1cc      	bne.n	8008aac <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d001      	beq.n	8008b1c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008b18:	f000 fa12 	bl	8008f40 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008b1c:	4b1c      	ldr	r3, [pc, #112]	; (8008b90 <xTaskResumeAll+0x130>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d010      	beq.n	8008b4a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008b28:	f000 f836 	bl	8008b98 <xTaskIncrementTick>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d002      	beq.n	8008b38 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008b32:	4b16      	ldr	r3, [pc, #88]	; (8008b8c <xTaskResumeAll+0x12c>)
 8008b34:	2201      	movs	r2, #1
 8008b36:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	3b01      	subs	r3, #1
 8008b3c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d1f1      	bne.n	8008b28 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8008b44:	4b12      	ldr	r3, [pc, #72]	; (8008b90 <xTaskResumeAll+0x130>)
 8008b46:	2200      	movs	r2, #0
 8008b48:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008b4a:	4b10      	ldr	r3, [pc, #64]	; (8008b8c <xTaskResumeAll+0x12c>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d009      	beq.n	8008b66 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008b52:	2301      	movs	r3, #1
 8008b54:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008b56:	4b0f      	ldr	r3, [pc, #60]	; (8008b94 <xTaskResumeAll+0x134>)
 8008b58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b5c:	601a      	str	r2, [r3, #0]
 8008b5e:	f3bf 8f4f 	dsb	sy
 8008b62:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008b66:	f000 fbcd 	bl	8009304 <vPortExitCritical>

	return xAlreadyYielded;
 8008b6a:	68bb      	ldr	r3, [r7, #8]
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3710      	adds	r7, #16
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}
 8008b74:	20000ad0 	.word	0x20000ad0
 8008b78:	20000aa8 	.word	0x20000aa8
 8008b7c:	20000a68 	.word	0x20000a68
 8008b80:	20000ab0 	.word	0x20000ab0
 8008b84:	200009ac 	.word	0x200009ac
 8008b88:	200009a8 	.word	0x200009a8
 8008b8c:	20000abc 	.word	0x20000abc
 8008b90:	20000ab8 	.word	0x20000ab8
 8008b94:	e000ed04 	.word	0xe000ed04

08008b98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b086      	sub	sp, #24
 8008b9c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ba2:	4b4e      	ldr	r3, [pc, #312]	; (8008cdc <xTaskIncrementTick+0x144>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	f040 808e 	bne.w	8008cc8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008bac:	4b4c      	ldr	r3, [pc, #304]	; (8008ce0 <xTaskIncrementTick+0x148>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	3301      	adds	r3, #1
 8008bb2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008bb4:	4a4a      	ldr	r2, [pc, #296]	; (8008ce0 <xTaskIncrementTick+0x148>)
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d120      	bne.n	8008c02 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008bc0:	4b48      	ldr	r3, [pc, #288]	; (8008ce4 <xTaskIncrementTick+0x14c>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d00a      	beq.n	8008be0 <xTaskIncrementTick+0x48>
	__asm volatile
 8008bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bce:	f383 8811 	msr	BASEPRI, r3
 8008bd2:	f3bf 8f6f 	isb	sy
 8008bd6:	f3bf 8f4f 	dsb	sy
 8008bda:	603b      	str	r3, [r7, #0]
}
 8008bdc:	bf00      	nop
 8008bde:	e7fe      	b.n	8008bde <xTaskIncrementTick+0x46>
 8008be0:	4b40      	ldr	r3, [pc, #256]	; (8008ce4 <xTaskIncrementTick+0x14c>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	60fb      	str	r3, [r7, #12]
 8008be6:	4b40      	ldr	r3, [pc, #256]	; (8008ce8 <xTaskIncrementTick+0x150>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4a3e      	ldr	r2, [pc, #248]	; (8008ce4 <xTaskIncrementTick+0x14c>)
 8008bec:	6013      	str	r3, [r2, #0]
 8008bee:	4a3e      	ldr	r2, [pc, #248]	; (8008ce8 <xTaskIncrementTick+0x150>)
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	6013      	str	r3, [r2, #0]
 8008bf4:	4b3d      	ldr	r3, [pc, #244]	; (8008cec <xTaskIncrementTick+0x154>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	3301      	adds	r3, #1
 8008bfa:	4a3c      	ldr	r2, [pc, #240]	; (8008cec <xTaskIncrementTick+0x154>)
 8008bfc:	6013      	str	r3, [r2, #0]
 8008bfe:	f000 f99f 	bl	8008f40 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008c02:	4b3b      	ldr	r3, [pc, #236]	; (8008cf0 <xTaskIncrementTick+0x158>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	693a      	ldr	r2, [r7, #16]
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	d348      	bcc.n	8008c9e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c0c:	4b35      	ldr	r3, [pc, #212]	; (8008ce4 <xTaskIncrementTick+0x14c>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d104      	bne.n	8008c20 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c16:	4b36      	ldr	r3, [pc, #216]	; (8008cf0 <xTaskIncrementTick+0x158>)
 8008c18:	f04f 32ff 	mov.w	r2, #4294967295
 8008c1c:	601a      	str	r2, [r3, #0]
					break;
 8008c1e:	e03e      	b.n	8008c9e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c20:	4b30      	ldr	r3, [pc, #192]	; (8008ce4 <xTaskIncrementTick+0x14c>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	68db      	ldr	r3, [r3, #12]
 8008c26:	68db      	ldr	r3, [r3, #12]
 8008c28:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008c30:	693a      	ldr	r2, [r7, #16]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d203      	bcs.n	8008c40 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008c38:	4a2d      	ldr	r2, [pc, #180]	; (8008cf0 <xTaskIncrementTick+0x158>)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008c3e:	e02e      	b.n	8008c9e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	3304      	adds	r3, #4
 8008c44:	4618      	mov	r0, r3
 8008c46:	f7ff fc8a 	bl	800855e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d004      	beq.n	8008c5c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	3318      	adds	r3, #24
 8008c56:	4618      	mov	r0, r3
 8008c58:	f7ff fc81 	bl	800855e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c60:	2201      	movs	r2, #1
 8008c62:	409a      	lsls	r2, r3
 8008c64:	4b23      	ldr	r3, [pc, #140]	; (8008cf4 <xTaskIncrementTick+0x15c>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4313      	orrs	r3, r2
 8008c6a:	4a22      	ldr	r2, [pc, #136]	; (8008cf4 <xTaskIncrementTick+0x15c>)
 8008c6c:	6013      	str	r3, [r2, #0]
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c72:	4613      	mov	r3, r2
 8008c74:	009b      	lsls	r3, r3, #2
 8008c76:	4413      	add	r3, r2
 8008c78:	009b      	lsls	r3, r3, #2
 8008c7a:	4a1f      	ldr	r2, [pc, #124]	; (8008cf8 <xTaskIncrementTick+0x160>)
 8008c7c:	441a      	add	r2, r3
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	3304      	adds	r3, #4
 8008c82:	4619      	mov	r1, r3
 8008c84:	4610      	mov	r0, r2
 8008c86:	f7ff fc0d 	bl	80084a4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c8e:	4b1b      	ldr	r3, [pc, #108]	; (8008cfc <xTaskIncrementTick+0x164>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d3b9      	bcc.n	8008c0c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008c98:	2301      	movs	r3, #1
 8008c9a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c9c:	e7b6      	b.n	8008c0c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008c9e:	4b17      	ldr	r3, [pc, #92]	; (8008cfc <xTaskIncrementTick+0x164>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ca4:	4914      	ldr	r1, [pc, #80]	; (8008cf8 <xTaskIncrementTick+0x160>)
 8008ca6:	4613      	mov	r3, r2
 8008ca8:	009b      	lsls	r3, r3, #2
 8008caa:	4413      	add	r3, r2
 8008cac:	009b      	lsls	r3, r3, #2
 8008cae:	440b      	add	r3, r1
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	2b01      	cmp	r3, #1
 8008cb4:	d901      	bls.n	8008cba <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008cba:	4b11      	ldr	r3, [pc, #68]	; (8008d00 <xTaskIncrementTick+0x168>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d007      	beq.n	8008cd2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	617b      	str	r3, [r7, #20]
 8008cc6:	e004      	b.n	8008cd2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008cc8:	4b0e      	ldr	r3, [pc, #56]	; (8008d04 <xTaskIncrementTick+0x16c>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	3301      	adds	r3, #1
 8008cce:	4a0d      	ldr	r2, [pc, #52]	; (8008d04 <xTaskIncrementTick+0x16c>)
 8008cd0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008cd2:	697b      	ldr	r3, [r7, #20]
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3718      	adds	r7, #24
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}
 8008cdc:	20000ad0 	.word	0x20000ad0
 8008ce0:	20000aac 	.word	0x20000aac
 8008ce4:	20000a60 	.word	0x20000a60
 8008ce8:	20000a64 	.word	0x20000a64
 8008cec:	20000ac0 	.word	0x20000ac0
 8008cf0:	20000ac8 	.word	0x20000ac8
 8008cf4:	20000ab0 	.word	0x20000ab0
 8008cf8:	200009ac 	.word	0x200009ac
 8008cfc:	200009a8 	.word	0x200009a8
 8008d00:	20000abc 	.word	0x20000abc
 8008d04:	20000ab8 	.word	0x20000ab8

08008d08 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b087      	sub	sp, #28
 8008d0c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008d0e:	4b29      	ldr	r3, [pc, #164]	; (8008db4 <vTaskSwitchContext+0xac>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d003      	beq.n	8008d1e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008d16:	4b28      	ldr	r3, [pc, #160]	; (8008db8 <vTaskSwitchContext+0xb0>)
 8008d18:	2201      	movs	r2, #1
 8008d1a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008d1c:	e044      	b.n	8008da8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8008d1e:	4b26      	ldr	r3, [pc, #152]	; (8008db8 <vTaskSwitchContext+0xb0>)
 8008d20:	2200      	movs	r2, #0
 8008d22:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d24:	4b25      	ldr	r3, [pc, #148]	; (8008dbc <vTaskSwitchContext+0xb4>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	fab3 f383 	clz	r3, r3
 8008d30:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008d32:	7afb      	ldrb	r3, [r7, #11]
 8008d34:	f1c3 031f 	rsb	r3, r3, #31
 8008d38:	617b      	str	r3, [r7, #20]
 8008d3a:	4921      	ldr	r1, [pc, #132]	; (8008dc0 <vTaskSwitchContext+0xb8>)
 8008d3c:	697a      	ldr	r2, [r7, #20]
 8008d3e:	4613      	mov	r3, r2
 8008d40:	009b      	lsls	r3, r3, #2
 8008d42:	4413      	add	r3, r2
 8008d44:	009b      	lsls	r3, r3, #2
 8008d46:	440b      	add	r3, r1
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d10a      	bne.n	8008d64 <vTaskSwitchContext+0x5c>
	__asm volatile
 8008d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d52:	f383 8811 	msr	BASEPRI, r3
 8008d56:	f3bf 8f6f 	isb	sy
 8008d5a:	f3bf 8f4f 	dsb	sy
 8008d5e:	607b      	str	r3, [r7, #4]
}
 8008d60:	bf00      	nop
 8008d62:	e7fe      	b.n	8008d62 <vTaskSwitchContext+0x5a>
 8008d64:	697a      	ldr	r2, [r7, #20]
 8008d66:	4613      	mov	r3, r2
 8008d68:	009b      	lsls	r3, r3, #2
 8008d6a:	4413      	add	r3, r2
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	4a14      	ldr	r2, [pc, #80]	; (8008dc0 <vTaskSwitchContext+0xb8>)
 8008d70:	4413      	add	r3, r2
 8008d72:	613b      	str	r3, [r7, #16]
 8008d74:	693b      	ldr	r3, [r7, #16]
 8008d76:	685b      	ldr	r3, [r3, #4]
 8008d78:	685a      	ldr	r2, [r3, #4]
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	605a      	str	r2, [r3, #4]
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	685a      	ldr	r2, [r3, #4]
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	3308      	adds	r3, #8
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d104      	bne.n	8008d94 <vTaskSwitchContext+0x8c>
 8008d8a:	693b      	ldr	r3, [r7, #16]
 8008d8c:	685b      	ldr	r3, [r3, #4]
 8008d8e:	685a      	ldr	r2, [r3, #4]
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	605a      	str	r2, [r3, #4]
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	68db      	ldr	r3, [r3, #12]
 8008d9a:	4a0a      	ldr	r2, [pc, #40]	; (8008dc4 <vTaskSwitchContext+0xbc>)
 8008d9c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008d9e:	4b09      	ldr	r3, [pc, #36]	; (8008dc4 <vTaskSwitchContext+0xbc>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	334c      	adds	r3, #76	; 0x4c
 8008da4:	4a08      	ldr	r2, [pc, #32]	; (8008dc8 <vTaskSwitchContext+0xc0>)
 8008da6:	6013      	str	r3, [r2, #0]
}
 8008da8:	bf00      	nop
 8008daa:	371c      	adds	r7, #28
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr
 8008db4:	20000ad0 	.word	0x20000ad0
 8008db8:	20000abc 	.word	0x20000abc
 8008dbc:	20000ab0 	.word	0x20000ab0
 8008dc0:	200009ac 	.word	0x200009ac
 8008dc4:	200009a8 	.word	0x200009a8
 8008dc8:	20000020 	.word	0x20000020

08008dcc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b082      	sub	sp, #8
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008dd4:	f000 f852 	bl	8008e7c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008dd8:	4b06      	ldr	r3, [pc, #24]	; (8008df4 <prvIdleTask+0x28>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	2b01      	cmp	r3, #1
 8008dde:	d9f9      	bls.n	8008dd4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008de0:	4b05      	ldr	r3, [pc, #20]	; (8008df8 <prvIdleTask+0x2c>)
 8008de2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008de6:	601a      	str	r2, [r3, #0]
 8008de8:	f3bf 8f4f 	dsb	sy
 8008dec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008df0:	e7f0      	b.n	8008dd4 <prvIdleTask+0x8>
 8008df2:	bf00      	nop
 8008df4:	200009ac 	.word	0x200009ac
 8008df8:	e000ed04 	.word	0xe000ed04

08008dfc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b082      	sub	sp, #8
 8008e00:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e02:	2300      	movs	r3, #0
 8008e04:	607b      	str	r3, [r7, #4]
 8008e06:	e00c      	b.n	8008e22 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008e08:	687a      	ldr	r2, [r7, #4]
 8008e0a:	4613      	mov	r3, r2
 8008e0c:	009b      	lsls	r3, r3, #2
 8008e0e:	4413      	add	r3, r2
 8008e10:	009b      	lsls	r3, r3, #2
 8008e12:	4a12      	ldr	r2, [pc, #72]	; (8008e5c <prvInitialiseTaskLists+0x60>)
 8008e14:	4413      	add	r3, r2
 8008e16:	4618      	mov	r0, r3
 8008e18:	f7ff fb17 	bl	800844a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	3301      	adds	r3, #1
 8008e20:	607b      	str	r3, [r7, #4]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2b06      	cmp	r3, #6
 8008e26:	d9ef      	bls.n	8008e08 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008e28:	480d      	ldr	r0, [pc, #52]	; (8008e60 <prvInitialiseTaskLists+0x64>)
 8008e2a:	f7ff fb0e 	bl	800844a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008e2e:	480d      	ldr	r0, [pc, #52]	; (8008e64 <prvInitialiseTaskLists+0x68>)
 8008e30:	f7ff fb0b 	bl	800844a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008e34:	480c      	ldr	r0, [pc, #48]	; (8008e68 <prvInitialiseTaskLists+0x6c>)
 8008e36:	f7ff fb08 	bl	800844a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008e3a:	480c      	ldr	r0, [pc, #48]	; (8008e6c <prvInitialiseTaskLists+0x70>)
 8008e3c:	f7ff fb05 	bl	800844a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008e40:	480b      	ldr	r0, [pc, #44]	; (8008e70 <prvInitialiseTaskLists+0x74>)
 8008e42:	f7ff fb02 	bl	800844a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008e46:	4b0b      	ldr	r3, [pc, #44]	; (8008e74 <prvInitialiseTaskLists+0x78>)
 8008e48:	4a05      	ldr	r2, [pc, #20]	; (8008e60 <prvInitialiseTaskLists+0x64>)
 8008e4a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008e4c:	4b0a      	ldr	r3, [pc, #40]	; (8008e78 <prvInitialiseTaskLists+0x7c>)
 8008e4e:	4a05      	ldr	r2, [pc, #20]	; (8008e64 <prvInitialiseTaskLists+0x68>)
 8008e50:	601a      	str	r2, [r3, #0]
}
 8008e52:	bf00      	nop
 8008e54:	3708      	adds	r7, #8
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}
 8008e5a:	bf00      	nop
 8008e5c:	200009ac 	.word	0x200009ac
 8008e60:	20000a38 	.word	0x20000a38
 8008e64:	20000a4c 	.word	0x20000a4c
 8008e68:	20000a68 	.word	0x20000a68
 8008e6c:	20000a7c 	.word	0x20000a7c
 8008e70:	20000a94 	.word	0x20000a94
 8008e74:	20000a60 	.word	0x20000a60
 8008e78:	20000a64 	.word	0x20000a64

08008e7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b082      	sub	sp, #8
 8008e80:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e82:	e019      	b.n	8008eb8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008e84:	f000 fa0e 	bl	80092a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e88:	4b10      	ldr	r3, [pc, #64]	; (8008ecc <prvCheckTasksWaitingTermination+0x50>)
 8008e8a:	68db      	ldr	r3, [r3, #12]
 8008e8c:	68db      	ldr	r3, [r3, #12]
 8008e8e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	3304      	adds	r3, #4
 8008e94:	4618      	mov	r0, r3
 8008e96:	f7ff fb62 	bl	800855e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008e9a:	4b0d      	ldr	r3, [pc, #52]	; (8008ed0 <prvCheckTasksWaitingTermination+0x54>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	3b01      	subs	r3, #1
 8008ea0:	4a0b      	ldr	r2, [pc, #44]	; (8008ed0 <prvCheckTasksWaitingTermination+0x54>)
 8008ea2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008ea4:	4b0b      	ldr	r3, [pc, #44]	; (8008ed4 <prvCheckTasksWaitingTermination+0x58>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	3b01      	subs	r3, #1
 8008eaa:	4a0a      	ldr	r2, [pc, #40]	; (8008ed4 <prvCheckTasksWaitingTermination+0x58>)
 8008eac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008eae:	f000 fa29 	bl	8009304 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f000 f810 	bl	8008ed8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008eb8:	4b06      	ldr	r3, [pc, #24]	; (8008ed4 <prvCheckTasksWaitingTermination+0x58>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d1e1      	bne.n	8008e84 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008ec0:	bf00      	nop
 8008ec2:	bf00      	nop
 8008ec4:	3708      	adds	r7, #8
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}
 8008eca:	bf00      	nop
 8008ecc:	20000a7c 	.word	0x20000a7c
 8008ed0:	20000aa8 	.word	0x20000aa8
 8008ed4:	20000a90 	.word	0x20000a90

08008ed8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b084      	sub	sp, #16
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	334c      	adds	r3, #76	; 0x4c
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f000 fd6d 	bl	80099c4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d108      	bne.n	8008f06 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f000 fb81 	bl	8009600 <vPortFree>
				vPortFree( pxTCB );
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f000 fb7e 	bl	8009600 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008f04:	e018      	b.n	8008f38 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	d103      	bne.n	8008f18 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f000 fb75 	bl	8009600 <vPortFree>
	}
 8008f16:	e00f      	b.n	8008f38 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008f1e:	2b02      	cmp	r3, #2
 8008f20:	d00a      	beq.n	8008f38 <prvDeleteTCB+0x60>
	__asm volatile
 8008f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f26:	f383 8811 	msr	BASEPRI, r3
 8008f2a:	f3bf 8f6f 	isb	sy
 8008f2e:	f3bf 8f4f 	dsb	sy
 8008f32:	60fb      	str	r3, [r7, #12]
}
 8008f34:	bf00      	nop
 8008f36:	e7fe      	b.n	8008f36 <prvDeleteTCB+0x5e>
	}
 8008f38:	bf00      	nop
 8008f3a:	3710      	adds	r7, #16
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}

08008f40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008f40:	b480      	push	{r7}
 8008f42:	b083      	sub	sp, #12
 8008f44:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f46:	4b0c      	ldr	r3, [pc, #48]	; (8008f78 <prvResetNextTaskUnblockTime+0x38>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d104      	bne.n	8008f5a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008f50:	4b0a      	ldr	r3, [pc, #40]	; (8008f7c <prvResetNextTaskUnblockTime+0x3c>)
 8008f52:	f04f 32ff 	mov.w	r2, #4294967295
 8008f56:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008f58:	e008      	b.n	8008f6c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f5a:	4b07      	ldr	r3, [pc, #28]	; (8008f78 <prvResetNextTaskUnblockTime+0x38>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	68db      	ldr	r3, [r3, #12]
 8008f60:	68db      	ldr	r3, [r3, #12]
 8008f62:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	4a04      	ldr	r2, [pc, #16]	; (8008f7c <prvResetNextTaskUnblockTime+0x3c>)
 8008f6a:	6013      	str	r3, [r2, #0]
}
 8008f6c:	bf00      	nop
 8008f6e:	370c      	adds	r7, #12
 8008f70:	46bd      	mov	sp, r7
 8008f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f76:	4770      	bx	lr
 8008f78:	20000a60 	.word	0x20000a60
 8008f7c:	20000ac8 	.word	0x20000ac8

08008f80 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b084      	sub	sp, #16
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008f8a:	4b29      	ldr	r3, [pc, #164]	; (8009030 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f90:	4b28      	ldr	r3, [pc, #160]	; (8009034 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	3304      	adds	r3, #4
 8008f96:	4618      	mov	r0, r3
 8008f98:	f7ff fae1 	bl	800855e <uxListRemove>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d10b      	bne.n	8008fba <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008fa2:	4b24      	ldr	r3, [pc, #144]	; (8009034 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fa8:	2201      	movs	r2, #1
 8008faa:	fa02 f303 	lsl.w	r3, r2, r3
 8008fae:	43da      	mvns	r2, r3
 8008fb0:	4b21      	ldr	r3, [pc, #132]	; (8009038 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4013      	ands	r3, r2
 8008fb6:	4a20      	ldr	r2, [pc, #128]	; (8009038 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008fb8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fc0:	d10a      	bne.n	8008fd8 <prvAddCurrentTaskToDelayedList+0x58>
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d007      	beq.n	8008fd8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008fc8:	4b1a      	ldr	r3, [pc, #104]	; (8009034 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	3304      	adds	r3, #4
 8008fce:	4619      	mov	r1, r3
 8008fd0:	481a      	ldr	r0, [pc, #104]	; (800903c <prvAddCurrentTaskToDelayedList+0xbc>)
 8008fd2:	f7ff fa67 	bl	80084a4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008fd6:	e026      	b.n	8009026 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008fd8:	68fa      	ldr	r2, [r7, #12]
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	4413      	add	r3, r2
 8008fde:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008fe0:	4b14      	ldr	r3, [pc, #80]	; (8009034 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	68ba      	ldr	r2, [r7, #8]
 8008fe6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008fe8:	68ba      	ldr	r2, [r7, #8]
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d209      	bcs.n	8009004 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ff0:	4b13      	ldr	r3, [pc, #76]	; (8009040 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008ff2:	681a      	ldr	r2, [r3, #0]
 8008ff4:	4b0f      	ldr	r3, [pc, #60]	; (8009034 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	3304      	adds	r3, #4
 8008ffa:	4619      	mov	r1, r3
 8008ffc:	4610      	mov	r0, r2
 8008ffe:	f7ff fa75 	bl	80084ec <vListInsert>
}
 8009002:	e010      	b.n	8009026 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009004:	4b0f      	ldr	r3, [pc, #60]	; (8009044 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009006:	681a      	ldr	r2, [r3, #0]
 8009008:	4b0a      	ldr	r3, [pc, #40]	; (8009034 <prvAddCurrentTaskToDelayedList+0xb4>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	3304      	adds	r3, #4
 800900e:	4619      	mov	r1, r3
 8009010:	4610      	mov	r0, r2
 8009012:	f7ff fa6b 	bl	80084ec <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009016:	4b0c      	ldr	r3, [pc, #48]	; (8009048 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	68ba      	ldr	r2, [r7, #8]
 800901c:	429a      	cmp	r2, r3
 800901e:	d202      	bcs.n	8009026 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009020:	4a09      	ldr	r2, [pc, #36]	; (8009048 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	6013      	str	r3, [r2, #0]
}
 8009026:	bf00      	nop
 8009028:	3710      	adds	r7, #16
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}
 800902e:	bf00      	nop
 8009030:	20000aac 	.word	0x20000aac
 8009034:	200009a8 	.word	0x200009a8
 8009038:	20000ab0 	.word	0x20000ab0
 800903c:	20000a94 	.word	0x20000a94
 8009040:	20000a64 	.word	0x20000a64
 8009044:	20000a60 	.word	0x20000a60
 8009048:	20000ac8 	.word	0x20000ac8

0800904c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800904c:	b480      	push	{r7}
 800904e:	b085      	sub	sp, #20
 8009050:	af00      	add	r7, sp, #0
 8009052:	60f8      	str	r0, [r7, #12]
 8009054:	60b9      	str	r1, [r7, #8]
 8009056:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	3b04      	subs	r3, #4
 800905c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009064:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	3b04      	subs	r3, #4
 800906a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	f023 0201 	bic.w	r2, r3, #1
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	3b04      	subs	r3, #4
 800907a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800907c:	4a0c      	ldr	r2, [pc, #48]	; (80090b0 <pxPortInitialiseStack+0x64>)
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	3b14      	subs	r3, #20
 8009086:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009088:	687a      	ldr	r2, [r7, #4]
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	3b04      	subs	r3, #4
 8009092:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f06f 0202 	mvn.w	r2, #2
 800909a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	3b20      	subs	r3, #32
 80090a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80090a2:	68fb      	ldr	r3, [r7, #12]
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3714      	adds	r7, #20
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	4770      	bx	lr
 80090b0:	080090b5 	.word	0x080090b5

080090b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80090b4:	b480      	push	{r7}
 80090b6:	b085      	sub	sp, #20
 80090b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80090ba:	2300      	movs	r3, #0
 80090bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80090be:	4b12      	ldr	r3, [pc, #72]	; (8009108 <prvTaskExitError+0x54>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090c6:	d00a      	beq.n	80090de <prvTaskExitError+0x2a>
	__asm volatile
 80090c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090cc:	f383 8811 	msr	BASEPRI, r3
 80090d0:	f3bf 8f6f 	isb	sy
 80090d4:	f3bf 8f4f 	dsb	sy
 80090d8:	60fb      	str	r3, [r7, #12]
}
 80090da:	bf00      	nop
 80090dc:	e7fe      	b.n	80090dc <prvTaskExitError+0x28>
	__asm volatile
 80090de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e2:	f383 8811 	msr	BASEPRI, r3
 80090e6:	f3bf 8f6f 	isb	sy
 80090ea:	f3bf 8f4f 	dsb	sy
 80090ee:	60bb      	str	r3, [r7, #8]
}
 80090f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80090f2:	bf00      	nop
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d0fc      	beq.n	80090f4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80090fa:	bf00      	nop
 80090fc:	bf00      	nop
 80090fe:	3714      	adds	r7, #20
 8009100:	46bd      	mov	sp, r7
 8009102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009106:	4770      	bx	lr
 8009108:	2000001c 	.word	0x2000001c
 800910c:	00000000 	.word	0x00000000

08009110 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009110:	4b07      	ldr	r3, [pc, #28]	; (8009130 <pxCurrentTCBConst2>)
 8009112:	6819      	ldr	r1, [r3, #0]
 8009114:	6808      	ldr	r0, [r1, #0]
 8009116:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800911a:	f380 8809 	msr	PSP, r0
 800911e:	f3bf 8f6f 	isb	sy
 8009122:	f04f 0000 	mov.w	r0, #0
 8009126:	f380 8811 	msr	BASEPRI, r0
 800912a:	4770      	bx	lr
 800912c:	f3af 8000 	nop.w

08009130 <pxCurrentTCBConst2>:
 8009130:	200009a8 	.word	0x200009a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009134:	bf00      	nop
 8009136:	bf00      	nop

08009138 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009138:	4808      	ldr	r0, [pc, #32]	; (800915c <prvPortStartFirstTask+0x24>)
 800913a:	6800      	ldr	r0, [r0, #0]
 800913c:	6800      	ldr	r0, [r0, #0]
 800913e:	f380 8808 	msr	MSP, r0
 8009142:	f04f 0000 	mov.w	r0, #0
 8009146:	f380 8814 	msr	CONTROL, r0
 800914a:	b662      	cpsie	i
 800914c:	b661      	cpsie	f
 800914e:	f3bf 8f4f 	dsb	sy
 8009152:	f3bf 8f6f 	isb	sy
 8009156:	df00      	svc	0
 8009158:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800915a:	bf00      	nop
 800915c:	e000ed08 	.word	0xe000ed08

08009160 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b086      	sub	sp, #24
 8009164:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009166:	4b46      	ldr	r3, [pc, #280]	; (8009280 <xPortStartScheduler+0x120>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4a46      	ldr	r2, [pc, #280]	; (8009284 <xPortStartScheduler+0x124>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d10a      	bne.n	8009186 <xPortStartScheduler+0x26>
	__asm volatile
 8009170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009174:	f383 8811 	msr	BASEPRI, r3
 8009178:	f3bf 8f6f 	isb	sy
 800917c:	f3bf 8f4f 	dsb	sy
 8009180:	613b      	str	r3, [r7, #16]
}
 8009182:	bf00      	nop
 8009184:	e7fe      	b.n	8009184 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009186:	4b3e      	ldr	r3, [pc, #248]	; (8009280 <xPortStartScheduler+0x120>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	4a3f      	ldr	r2, [pc, #252]	; (8009288 <xPortStartScheduler+0x128>)
 800918c:	4293      	cmp	r3, r2
 800918e:	d10a      	bne.n	80091a6 <xPortStartScheduler+0x46>
	__asm volatile
 8009190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009194:	f383 8811 	msr	BASEPRI, r3
 8009198:	f3bf 8f6f 	isb	sy
 800919c:	f3bf 8f4f 	dsb	sy
 80091a0:	60fb      	str	r3, [r7, #12]
}
 80091a2:	bf00      	nop
 80091a4:	e7fe      	b.n	80091a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80091a6:	4b39      	ldr	r3, [pc, #228]	; (800928c <xPortStartScheduler+0x12c>)
 80091a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	781b      	ldrb	r3, [r3, #0]
 80091ae:	b2db      	uxtb	r3, r3
 80091b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	22ff      	movs	r2, #255	; 0xff
 80091b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	781b      	ldrb	r3, [r3, #0]
 80091bc:	b2db      	uxtb	r3, r3
 80091be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80091c0:	78fb      	ldrb	r3, [r7, #3]
 80091c2:	b2db      	uxtb	r3, r3
 80091c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80091c8:	b2da      	uxtb	r2, r3
 80091ca:	4b31      	ldr	r3, [pc, #196]	; (8009290 <xPortStartScheduler+0x130>)
 80091cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80091ce:	4b31      	ldr	r3, [pc, #196]	; (8009294 <xPortStartScheduler+0x134>)
 80091d0:	2207      	movs	r2, #7
 80091d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80091d4:	e009      	b.n	80091ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80091d6:	4b2f      	ldr	r3, [pc, #188]	; (8009294 <xPortStartScheduler+0x134>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	3b01      	subs	r3, #1
 80091dc:	4a2d      	ldr	r2, [pc, #180]	; (8009294 <xPortStartScheduler+0x134>)
 80091de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80091e0:	78fb      	ldrb	r3, [r7, #3]
 80091e2:	b2db      	uxtb	r3, r3
 80091e4:	005b      	lsls	r3, r3, #1
 80091e6:	b2db      	uxtb	r3, r3
 80091e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80091ea:	78fb      	ldrb	r3, [r7, #3]
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091f2:	2b80      	cmp	r3, #128	; 0x80
 80091f4:	d0ef      	beq.n	80091d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80091f6:	4b27      	ldr	r3, [pc, #156]	; (8009294 <xPortStartScheduler+0x134>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f1c3 0307 	rsb	r3, r3, #7
 80091fe:	2b04      	cmp	r3, #4
 8009200:	d00a      	beq.n	8009218 <xPortStartScheduler+0xb8>
	__asm volatile
 8009202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009206:	f383 8811 	msr	BASEPRI, r3
 800920a:	f3bf 8f6f 	isb	sy
 800920e:	f3bf 8f4f 	dsb	sy
 8009212:	60bb      	str	r3, [r7, #8]
}
 8009214:	bf00      	nop
 8009216:	e7fe      	b.n	8009216 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009218:	4b1e      	ldr	r3, [pc, #120]	; (8009294 <xPortStartScheduler+0x134>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	021b      	lsls	r3, r3, #8
 800921e:	4a1d      	ldr	r2, [pc, #116]	; (8009294 <xPortStartScheduler+0x134>)
 8009220:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009222:	4b1c      	ldr	r3, [pc, #112]	; (8009294 <xPortStartScheduler+0x134>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800922a:	4a1a      	ldr	r2, [pc, #104]	; (8009294 <xPortStartScheduler+0x134>)
 800922c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	b2da      	uxtb	r2, r3
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009236:	4b18      	ldr	r3, [pc, #96]	; (8009298 <xPortStartScheduler+0x138>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a17      	ldr	r2, [pc, #92]	; (8009298 <xPortStartScheduler+0x138>)
 800923c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009240:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009242:	4b15      	ldr	r3, [pc, #84]	; (8009298 <xPortStartScheduler+0x138>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4a14      	ldr	r2, [pc, #80]	; (8009298 <xPortStartScheduler+0x138>)
 8009248:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800924c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800924e:	f000 f8dd 	bl	800940c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009252:	4b12      	ldr	r3, [pc, #72]	; (800929c <xPortStartScheduler+0x13c>)
 8009254:	2200      	movs	r2, #0
 8009256:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009258:	f000 f8fc 	bl	8009454 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800925c:	4b10      	ldr	r3, [pc, #64]	; (80092a0 <xPortStartScheduler+0x140>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4a0f      	ldr	r2, [pc, #60]	; (80092a0 <xPortStartScheduler+0x140>)
 8009262:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009266:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009268:	f7ff ff66 	bl	8009138 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800926c:	f7ff fd4c 	bl	8008d08 <vTaskSwitchContext>
	prvTaskExitError();
 8009270:	f7ff ff20 	bl	80090b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009274:	2300      	movs	r3, #0
}
 8009276:	4618      	mov	r0, r3
 8009278:	3718      	adds	r7, #24
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}
 800927e:	bf00      	nop
 8009280:	e000ed00 	.word	0xe000ed00
 8009284:	410fc271 	.word	0x410fc271
 8009288:	410fc270 	.word	0x410fc270
 800928c:	e000e400 	.word	0xe000e400
 8009290:	20000ad4 	.word	0x20000ad4
 8009294:	20000ad8 	.word	0x20000ad8
 8009298:	e000ed20 	.word	0xe000ed20
 800929c:	2000001c 	.word	0x2000001c
 80092a0:	e000ef34 	.word	0xe000ef34

080092a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80092a4:	b480      	push	{r7}
 80092a6:	b083      	sub	sp, #12
 80092a8:	af00      	add	r7, sp, #0
	__asm volatile
 80092aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ae:	f383 8811 	msr	BASEPRI, r3
 80092b2:	f3bf 8f6f 	isb	sy
 80092b6:	f3bf 8f4f 	dsb	sy
 80092ba:	607b      	str	r3, [r7, #4]
}
 80092bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80092be:	4b0f      	ldr	r3, [pc, #60]	; (80092fc <vPortEnterCritical+0x58>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	3301      	adds	r3, #1
 80092c4:	4a0d      	ldr	r2, [pc, #52]	; (80092fc <vPortEnterCritical+0x58>)
 80092c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80092c8:	4b0c      	ldr	r3, [pc, #48]	; (80092fc <vPortEnterCritical+0x58>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	2b01      	cmp	r3, #1
 80092ce:	d10f      	bne.n	80092f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80092d0:	4b0b      	ldr	r3, [pc, #44]	; (8009300 <vPortEnterCritical+0x5c>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	b2db      	uxtb	r3, r3
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d00a      	beq.n	80092f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80092da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092de:	f383 8811 	msr	BASEPRI, r3
 80092e2:	f3bf 8f6f 	isb	sy
 80092e6:	f3bf 8f4f 	dsb	sy
 80092ea:	603b      	str	r3, [r7, #0]
}
 80092ec:	bf00      	nop
 80092ee:	e7fe      	b.n	80092ee <vPortEnterCritical+0x4a>
	}
}
 80092f0:	bf00      	nop
 80092f2:	370c      	adds	r7, #12
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr
 80092fc:	2000001c 	.word	0x2000001c
 8009300:	e000ed04 	.word	0xe000ed04

08009304 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009304:	b480      	push	{r7}
 8009306:	b083      	sub	sp, #12
 8009308:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800930a:	4b12      	ldr	r3, [pc, #72]	; (8009354 <vPortExitCritical+0x50>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d10a      	bne.n	8009328 <vPortExitCritical+0x24>
	__asm volatile
 8009312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009316:	f383 8811 	msr	BASEPRI, r3
 800931a:	f3bf 8f6f 	isb	sy
 800931e:	f3bf 8f4f 	dsb	sy
 8009322:	607b      	str	r3, [r7, #4]
}
 8009324:	bf00      	nop
 8009326:	e7fe      	b.n	8009326 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009328:	4b0a      	ldr	r3, [pc, #40]	; (8009354 <vPortExitCritical+0x50>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	3b01      	subs	r3, #1
 800932e:	4a09      	ldr	r2, [pc, #36]	; (8009354 <vPortExitCritical+0x50>)
 8009330:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009332:	4b08      	ldr	r3, [pc, #32]	; (8009354 <vPortExitCritical+0x50>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d105      	bne.n	8009346 <vPortExitCritical+0x42>
 800933a:	2300      	movs	r3, #0
 800933c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009344:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009346:	bf00      	nop
 8009348:	370c      	adds	r7, #12
 800934a:	46bd      	mov	sp, r7
 800934c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009350:	4770      	bx	lr
 8009352:	bf00      	nop
 8009354:	2000001c 	.word	0x2000001c
	...

08009360 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009360:	f3ef 8009 	mrs	r0, PSP
 8009364:	f3bf 8f6f 	isb	sy
 8009368:	4b15      	ldr	r3, [pc, #84]	; (80093c0 <pxCurrentTCBConst>)
 800936a:	681a      	ldr	r2, [r3, #0]
 800936c:	f01e 0f10 	tst.w	lr, #16
 8009370:	bf08      	it	eq
 8009372:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009376:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800937a:	6010      	str	r0, [r2, #0]
 800937c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009380:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009384:	f380 8811 	msr	BASEPRI, r0
 8009388:	f3bf 8f4f 	dsb	sy
 800938c:	f3bf 8f6f 	isb	sy
 8009390:	f7ff fcba 	bl	8008d08 <vTaskSwitchContext>
 8009394:	f04f 0000 	mov.w	r0, #0
 8009398:	f380 8811 	msr	BASEPRI, r0
 800939c:	bc09      	pop	{r0, r3}
 800939e:	6819      	ldr	r1, [r3, #0]
 80093a0:	6808      	ldr	r0, [r1, #0]
 80093a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093a6:	f01e 0f10 	tst.w	lr, #16
 80093aa:	bf08      	it	eq
 80093ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80093b0:	f380 8809 	msr	PSP, r0
 80093b4:	f3bf 8f6f 	isb	sy
 80093b8:	4770      	bx	lr
 80093ba:	bf00      	nop
 80093bc:	f3af 8000 	nop.w

080093c0 <pxCurrentTCBConst>:
 80093c0:	200009a8 	.word	0x200009a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80093c4:	bf00      	nop
 80093c6:	bf00      	nop

080093c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b082      	sub	sp, #8
 80093cc:	af00      	add	r7, sp, #0
	__asm volatile
 80093ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d2:	f383 8811 	msr	BASEPRI, r3
 80093d6:	f3bf 8f6f 	isb	sy
 80093da:	f3bf 8f4f 	dsb	sy
 80093de:	607b      	str	r3, [r7, #4]
}
 80093e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80093e2:	f7ff fbd9 	bl	8008b98 <xTaskIncrementTick>
 80093e6:	4603      	mov	r3, r0
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d003      	beq.n	80093f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80093ec:	4b06      	ldr	r3, [pc, #24]	; (8009408 <SysTick_Handler+0x40>)
 80093ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093f2:	601a      	str	r2, [r3, #0]
 80093f4:	2300      	movs	r3, #0
 80093f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	f383 8811 	msr	BASEPRI, r3
}
 80093fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009400:	bf00      	nop
 8009402:	3708      	adds	r7, #8
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}
 8009408:	e000ed04 	.word	0xe000ed04

0800940c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800940c:	b480      	push	{r7}
 800940e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009410:	4b0b      	ldr	r3, [pc, #44]	; (8009440 <vPortSetupTimerInterrupt+0x34>)
 8009412:	2200      	movs	r2, #0
 8009414:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009416:	4b0b      	ldr	r3, [pc, #44]	; (8009444 <vPortSetupTimerInterrupt+0x38>)
 8009418:	2200      	movs	r2, #0
 800941a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800941c:	4b0a      	ldr	r3, [pc, #40]	; (8009448 <vPortSetupTimerInterrupt+0x3c>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4a0a      	ldr	r2, [pc, #40]	; (800944c <vPortSetupTimerInterrupt+0x40>)
 8009422:	fba2 2303 	umull	r2, r3, r2, r3
 8009426:	099b      	lsrs	r3, r3, #6
 8009428:	4a09      	ldr	r2, [pc, #36]	; (8009450 <vPortSetupTimerInterrupt+0x44>)
 800942a:	3b01      	subs	r3, #1
 800942c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800942e:	4b04      	ldr	r3, [pc, #16]	; (8009440 <vPortSetupTimerInterrupt+0x34>)
 8009430:	2207      	movs	r2, #7
 8009432:	601a      	str	r2, [r3, #0]
}
 8009434:	bf00      	nop
 8009436:	46bd      	mov	sp, r7
 8009438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943c:	4770      	bx	lr
 800943e:	bf00      	nop
 8009440:	e000e010 	.word	0xe000e010
 8009444:	e000e018 	.word	0xe000e018
 8009448:	20000010 	.word	0x20000010
 800944c:	10624dd3 	.word	0x10624dd3
 8009450:	e000e014 	.word	0xe000e014

08009454 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009454:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009464 <vPortEnableVFP+0x10>
 8009458:	6801      	ldr	r1, [r0, #0]
 800945a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800945e:	6001      	str	r1, [r0, #0]
 8009460:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009462:	bf00      	nop
 8009464:	e000ed88 	.word	0xe000ed88

08009468 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b08a      	sub	sp, #40	; 0x28
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009470:	2300      	movs	r3, #0
 8009472:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009474:	f7ff fae6 	bl	8008a44 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009478:	4b5b      	ldr	r3, [pc, #364]	; (80095e8 <pvPortMalloc+0x180>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d101      	bne.n	8009484 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009480:	f000 f920 	bl	80096c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009484:	4b59      	ldr	r3, [pc, #356]	; (80095ec <pvPortMalloc+0x184>)
 8009486:	681a      	ldr	r2, [r3, #0]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	4013      	ands	r3, r2
 800948c:	2b00      	cmp	r3, #0
 800948e:	f040 8093 	bne.w	80095b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d01d      	beq.n	80094d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009498:	2208      	movs	r2, #8
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	4413      	add	r3, r2
 800949e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f003 0307 	and.w	r3, r3, #7
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d014      	beq.n	80094d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f023 0307 	bic.w	r3, r3, #7
 80094b0:	3308      	adds	r3, #8
 80094b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f003 0307 	and.w	r3, r3, #7
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d00a      	beq.n	80094d4 <pvPortMalloc+0x6c>
	__asm volatile
 80094be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c2:	f383 8811 	msr	BASEPRI, r3
 80094c6:	f3bf 8f6f 	isb	sy
 80094ca:	f3bf 8f4f 	dsb	sy
 80094ce:	617b      	str	r3, [r7, #20]
}
 80094d0:	bf00      	nop
 80094d2:	e7fe      	b.n	80094d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d06e      	beq.n	80095b8 <pvPortMalloc+0x150>
 80094da:	4b45      	ldr	r3, [pc, #276]	; (80095f0 <pvPortMalloc+0x188>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	687a      	ldr	r2, [r7, #4]
 80094e0:	429a      	cmp	r2, r3
 80094e2:	d869      	bhi.n	80095b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80094e4:	4b43      	ldr	r3, [pc, #268]	; (80095f4 <pvPortMalloc+0x18c>)
 80094e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80094e8:	4b42      	ldr	r3, [pc, #264]	; (80095f4 <pvPortMalloc+0x18c>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80094ee:	e004      	b.n	80094fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80094f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80094f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80094fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094fc:	685b      	ldr	r3, [r3, #4]
 80094fe:	687a      	ldr	r2, [r7, #4]
 8009500:	429a      	cmp	r2, r3
 8009502:	d903      	bls.n	800950c <pvPortMalloc+0xa4>
 8009504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d1f1      	bne.n	80094f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800950c:	4b36      	ldr	r3, [pc, #216]	; (80095e8 <pvPortMalloc+0x180>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009512:	429a      	cmp	r2, r3
 8009514:	d050      	beq.n	80095b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009516:	6a3b      	ldr	r3, [r7, #32]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	2208      	movs	r2, #8
 800951c:	4413      	add	r3, r2
 800951e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009522:	681a      	ldr	r2, [r3, #0]
 8009524:	6a3b      	ldr	r3, [r7, #32]
 8009526:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800952a:	685a      	ldr	r2, [r3, #4]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	1ad2      	subs	r2, r2, r3
 8009530:	2308      	movs	r3, #8
 8009532:	005b      	lsls	r3, r3, #1
 8009534:	429a      	cmp	r2, r3
 8009536:	d91f      	bls.n	8009578 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	4413      	add	r3, r2
 800953e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009540:	69bb      	ldr	r3, [r7, #24]
 8009542:	f003 0307 	and.w	r3, r3, #7
 8009546:	2b00      	cmp	r3, #0
 8009548:	d00a      	beq.n	8009560 <pvPortMalloc+0xf8>
	__asm volatile
 800954a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800954e:	f383 8811 	msr	BASEPRI, r3
 8009552:	f3bf 8f6f 	isb	sy
 8009556:	f3bf 8f4f 	dsb	sy
 800955a:	613b      	str	r3, [r7, #16]
}
 800955c:	bf00      	nop
 800955e:	e7fe      	b.n	800955e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009562:	685a      	ldr	r2, [r3, #4]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	1ad2      	subs	r2, r2, r3
 8009568:	69bb      	ldr	r3, [r7, #24]
 800956a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800956c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800956e:	687a      	ldr	r2, [r7, #4]
 8009570:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009572:	69b8      	ldr	r0, [r7, #24]
 8009574:	f000 f908 	bl	8009788 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009578:	4b1d      	ldr	r3, [pc, #116]	; (80095f0 <pvPortMalloc+0x188>)
 800957a:	681a      	ldr	r2, [r3, #0]
 800957c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800957e:	685b      	ldr	r3, [r3, #4]
 8009580:	1ad3      	subs	r3, r2, r3
 8009582:	4a1b      	ldr	r2, [pc, #108]	; (80095f0 <pvPortMalloc+0x188>)
 8009584:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009586:	4b1a      	ldr	r3, [pc, #104]	; (80095f0 <pvPortMalloc+0x188>)
 8009588:	681a      	ldr	r2, [r3, #0]
 800958a:	4b1b      	ldr	r3, [pc, #108]	; (80095f8 <pvPortMalloc+0x190>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	429a      	cmp	r2, r3
 8009590:	d203      	bcs.n	800959a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009592:	4b17      	ldr	r3, [pc, #92]	; (80095f0 <pvPortMalloc+0x188>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	4a18      	ldr	r2, [pc, #96]	; (80095f8 <pvPortMalloc+0x190>)
 8009598:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800959a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800959c:	685a      	ldr	r2, [r3, #4]
 800959e:	4b13      	ldr	r3, [pc, #76]	; (80095ec <pvPortMalloc+0x184>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	431a      	orrs	r2, r3
 80095a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80095a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095aa:	2200      	movs	r2, #0
 80095ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80095ae:	4b13      	ldr	r3, [pc, #76]	; (80095fc <pvPortMalloc+0x194>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	3301      	adds	r3, #1
 80095b4:	4a11      	ldr	r2, [pc, #68]	; (80095fc <pvPortMalloc+0x194>)
 80095b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80095b8:	f7ff fa52 	bl	8008a60 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80095bc:	69fb      	ldr	r3, [r7, #28]
 80095be:	f003 0307 	and.w	r3, r3, #7
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d00a      	beq.n	80095dc <pvPortMalloc+0x174>
	__asm volatile
 80095c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ca:	f383 8811 	msr	BASEPRI, r3
 80095ce:	f3bf 8f6f 	isb	sy
 80095d2:	f3bf 8f4f 	dsb	sy
 80095d6:	60fb      	str	r3, [r7, #12]
}
 80095d8:	bf00      	nop
 80095da:	e7fe      	b.n	80095da <pvPortMalloc+0x172>
	return pvReturn;
 80095dc:	69fb      	ldr	r3, [r7, #28]
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3728      	adds	r7, #40	; 0x28
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}
 80095e6:	bf00      	nop
 80095e8:	200046e4 	.word	0x200046e4
 80095ec:	200046f8 	.word	0x200046f8
 80095f0:	200046e8 	.word	0x200046e8
 80095f4:	200046dc 	.word	0x200046dc
 80095f8:	200046ec 	.word	0x200046ec
 80095fc:	200046f0 	.word	0x200046f0

08009600 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b086      	sub	sp, #24
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d04d      	beq.n	80096ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009612:	2308      	movs	r3, #8
 8009614:	425b      	negs	r3, r3
 8009616:	697a      	ldr	r2, [r7, #20]
 8009618:	4413      	add	r3, r2
 800961a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800961c:	697b      	ldr	r3, [r7, #20]
 800961e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009620:	693b      	ldr	r3, [r7, #16]
 8009622:	685a      	ldr	r2, [r3, #4]
 8009624:	4b24      	ldr	r3, [pc, #144]	; (80096b8 <vPortFree+0xb8>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	4013      	ands	r3, r2
 800962a:	2b00      	cmp	r3, #0
 800962c:	d10a      	bne.n	8009644 <vPortFree+0x44>
	__asm volatile
 800962e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009632:	f383 8811 	msr	BASEPRI, r3
 8009636:	f3bf 8f6f 	isb	sy
 800963a:	f3bf 8f4f 	dsb	sy
 800963e:	60fb      	str	r3, [r7, #12]
}
 8009640:	bf00      	nop
 8009642:	e7fe      	b.n	8009642 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d00a      	beq.n	8009662 <vPortFree+0x62>
	__asm volatile
 800964c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009650:	f383 8811 	msr	BASEPRI, r3
 8009654:	f3bf 8f6f 	isb	sy
 8009658:	f3bf 8f4f 	dsb	sy
 800965c:	60bb      	str	r3, [r7, #8]
}
 800965e:	bf00      	nop
 8009660:	e7fe      	b.n	8009660 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	685a      	ldr	r2, [r3, #4]
 8009666:	4b14      	ldr	r3, [pc, #80]	; (80096b8 <vPortFree+0xb8>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	4013      	ands	r3, r2
 800966c:	2b00      	cmp	r3, #0
 800966e:	d01e      	beq.n	80096ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009670:	693b      	ldr	r3, [r7, #16]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d11a      	bne.n	80096ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009678:	693b      	ldr	r3, [r7, #16]
 800967a:	685a      	ldr	r2, [r3, #4]
 800967c:	4b0e      	ldr	r3, [pc, #56]	; (80096b8 <vPortFree+0xb8>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	43db      	mvns	r3, r3
 8009682:	401a      	ands	r2, r3
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009688:	f7ff f9dc 	bl	8008a44 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	685a      	ldr	r2, [r3, #4]
 8009690:	4b0a      	ldr	r3, [pc, #40]	; (80096bc <vPortFree+0xbc>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4413      	add	r3, r2
 8009696:	4a09      	ldr	r2, [pc, #36]	; (80096bc <vPortFree+0xbc>)
 8009698:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800969a:	6938      	ldr	r0, [r7, #16]
 800969c:	f000 f874 	bl	8009788 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80096a0:	4b07      	ldr	r3, [pc, #28]	; (80096c0 <vPortFree+0xc0>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	3301      	adds	r3, #1
 80096a6:	4a06      	ldr	r2, [pc, #24]	; (80096c0 <vPortFree+0xc0>)
 80096a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80096aa:	f7ff f9d9 	bl	8008a60 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80096ae:	bf00      	nop
 80096b0:	3718      	adds	r7, #24
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}
 80096b6:	bf00      	nop
 80096b8:	200046f8 	.word	0x200046f8
 80096bc:	200046e8 	.word	0x200046e8
 80096c0:	200046f4 	.word	0x200046f4

080096c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80096c4:	b480      	push	{r7}
 80096c6:	b085      	sub	sp, #20
 80096c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80096ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80096ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80096d0:	4b27      	ldr	r3, [pc, #156]	; (8009770 <prvHeapInit+0xac>)
 80096d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	f003 0307 	and.w	r3, r3, #7
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d00c      	beq.n	80096f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	3307      	adds	r3, #7
 80096e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	f023 0307 	bic.w	r3, r3, #7
 80096ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80096ec:	68ba      	ldr	r2, [r7, #8]
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	1ad3      	subs	r3, r2, r3
 80096f2:	4a1f      	ldr	r2, [pc, #124]	; (8009770 <prvHeapInit+0xac>)
 80096f4:	4413      	add	r3, r2
 80096f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80096fc:	4a1d      	ldr	r2, [pc, #116]	; (8009774 <prvHeapInit+0xb0>)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009702:	4b1c      	ldr	r3, [pc, #112]	; (8009774 <prvHeapInit+0xb0>)
 8009704:	2200      	movs	r2, #0
 8009706:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	68ba      	ldr	r2, [r7, #8]
 800970c:	4413      	add	r3, r2
 800970e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009710:	2208      	movs	r2, #8
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	1a9b      	subs	r3, r3, r2
 8009716:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	f023 0307 	bic.w	r3, r3, #7
 800971e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	4a15      	ldr	r2, [pc, #84]	; (8009778 <prvHeapInit+0xb4>)
 8009724:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009726:	4b14      	ldr	r3, [pc, #80]	; (8009778 <prvHeapInit+0xb4>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	2200      	movs	r2, #0
 800972c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800972e:	4b12      	ldr	r3, [pc, #72]	; (8009778 <prvHeapInit+0xb4>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	2200      	movs	r2, #0
 8009734:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	68fa      	ldr	r2, [r7, #12]
 800973e:	1ad2      	subs	r2, r2, r3
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009744:	4b0c      	ldr	r3, [pc, #48]	; (8009778 <prvHeapInit+0xb4>)
 8009746:	681a      	ldr	r2, [r3, #0]
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	4a0a      	ldr	r2, [pc, #40]	; (800977c <prvHeapInit+0xb8>)
 8009752:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	685b      	ldr	r3, [r3, #4]
 8009758:	4a09      	ldr	r2, [pc, #36]	; (8009780 <prvHeapInit+0xbc>)
 800975a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800975c:	4b09      	ldr	r3, [pc, #36]	; (8009784 <prvHeapInit+0xc0>)
 800975e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009762:	601a      	str	r2, [r3, #0]
}
 8009764:	bf00      	nop
 8009766:	3714      	adds	r7, #20
 8009768:	46bd      	mov	sp, r7
 800976a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976e:	4770      	bx	lr
 8009770:	20000adc 	.word	0x20000adc
 8009774:	200046dc 	.word	0x200046dc
 8009778:	200046e4 	.word	0x200046e4
 800977c:	200046ec 	.word	0x200046ec
 8009780:	200046e8 	.word	0x200046e8
 8009784:	200046f8 	.word	0x200046f8

08009788 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009788:	b480      	push	{r7}
 800978a:	b085      	sub	sp, #20
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009790:	4b28      	ldr	r3, [pc, #160]	; (8009834 <prvInsertBlockIntoFreeList+0xac>)
 8009792:	60fb      	str	r3, [r7, #12]
 8009794:	e002      	b.n	800979c <prvInsertBlockIntoFreeList+0x14>
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	60fb      	str	r3, [r7, #12]
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	687a      	ldr	r2, [r7, #4]
 80097a2:	429a      	cmp	r2, r3
 80097a4:	d8f7      	bhi.n	8009796 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	685b      	ldr	r3, [r3, #4]
 80097ae:	68ba      	ldr	r2, [r7, #8]
 80097b0:	4413      	add	r3, r2
 80097b2:	687a      	ldr	r2, [r7, #4]
 80097b4:	429a      	cmp	r2, r3
 80097b6:	d108      	bne.n	80097ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	685a      	ldr	r2, [r3, #4]
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	685b      	ldr	r3, [r3, #4]
 80097c0:	441a      	add	r2, r3
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	685b      	ldr	r3, [r3, #4]
 80097d2:	68ba      	ldr	r2, [r7, #8]
 80097d4:	441a      	add	r2, r3
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	429a      	cmp	r2, r3
 80097dc:	d118      	bne.n	8009810 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681a      	ldr	r2, [r3, #0]
 80097e2:	4b15      	ldr	r3, [pc, #84]	; (8009838 <prvInsertBlockIntoFreeList+0xb0>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	429a      	cmp	r2, r3
 80097e8:	d00d      	beq.n	8009806 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	685a      	ldr	r2, [r3, #4]
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	685b      	ldr	r3, [r3, #4]
 80097f4:	441a      	add	r2, r3
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	681a      	ldr	r2, [r3, #0]
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	601a      	str	r2, [r3, #0]
 8009804:	e008      	b.n	8009818 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009806:	4b0c      	ldr	r3, [pc, #48]	; (8009838 <prvInsertBlockIntoFreeList+0xb0>)
 8009808:	681a      	ldr	r2, [r3, #0]
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	601a      	str	r2, [r3, #0]
 800980e:	e003      	b.n	8009818 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681a      	ldr	r2, [r3, #0]
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009818:	68fa      	ldr	r2, [r7, #12]
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	429a      	cmp	r2, r3
 800981e:	d002      	beq.n	8009826 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	687a      	ldr	r2, [r7, #4]
 8009824:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009826:	bf00      	nop
 8009828:	3714      	adds	r7, #20
 800982a:	46bd      	mov	sp, r7
 800982c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009830:	4770      	bx	lr
 8009832:	bf00      	nop
 8009834:	200046dc 	.word	0x200046dc
 8009838:	200046e4 	.word	0x200046e4

0800983c <__errno>:
 800983c:	4b01      	ldr	r3, [pc, #4]	; (8009844 <__errno+0x8>)
 800983e:	6818      	ldr	r0, [r3, #0]
 8009840:	4770      	bx	lr
 8009842:	bf00      	nop
 8009844:	20000020 	.word	0x20000020

08009848 <__libc_init_array>:
 8009848:	b570      	push	{r4, r5, r6, lr}
 800984a:	4d0d      	ldr	r5, [pc, #52]	; (8009880 <__libc_init_array+0x38>)
 800984c:	4c0d      	ldr	r4, [pc, #52]	; (8009884 <__libc_init_array+0x3c>)
 800984e:	1b64      	subs	r4, r4, r5
 8009850:	10a4      	asrs	r4, r4, #2
 8009852:	2600      	movs	r6, #0
 8009854:	42a6      	cmp	r6, r4
 8009856:	d109      	bne.n	800986c <__libc_init_array+0x24>
 8009858:	4d0b      	ldr	r5, [pc, #44]	; (8009888 <__libc_init_array+0x40>)
 800985a:	4c0c      	ldr	r4, [pc, #48]	; (800988c <__libc_init_array+0x44>)
 800985c:	f000 fcb8 	bl	800a1d0 <_init>
 8009860:	1b64      	subs	r4, r4, r5
 8009862:	10a4      	asrs	r4, r4, #2
 8009864:	2600      	movs	r6, #0
 8009866:	42a6      	cmp	r6, r4
 8009868:	d105      	bne.n	8009876 <__libc_init_array+0x2e>
 800986a:	bd70      	pop	{r4, r5, r6, pc}
 800986c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009870:	4798      	blx	r3
 8009872:	3601      	adds	r6, #1
 8009874:	e7ee      	b.n	8009854 <__libc_init_array+0xc>
 8009876:	f855 3b04 	ldr.w	r3, [r5], #4
 800987a:	4798      	blx	r3
 800987c:	3601      	adds	r6, #1
 800987e:	e7f2      	b.n	8009866 <__libc_init_array+0x1e>
 8009880:	0800b8c4 	.word	0x0800b8c4
 8009884:	0800b8c4 	.word	0x0800b8c4
 8009888:	0800b8c4 	.word	0x0800b8c4
 800988c:	0800b8c8 	.word	0x0800b8c8

08009890 <__retarget_lock_acquire_recursive>:
 8009890:	4770      	bx	lr

08009892 <__retarget_lock_release_recursive>:
 8009892:	4770      	bx	lr

08009894 <memcpy>:
 8009894:	440a      	add	r2, r1
 8009896:	4291      	cmp	r1, r2
 8009898:	f100 33ff 	add.w	r3, r0, #4294967295
 800989c:	d100      	bne.n	80098a0 <memcpy+0xc>
 800989e:	4770      	bx	lr
 80098a0:	b510      	push	{r4, lr}
 80098a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098aa:	4291      	cmp	r1, r2
 80098ac:	d1f9      	bne.n	80098a2 <memcpy+0xe>
 80098ae:	bd10      	pop	{r4, pc}

080098b0 <memmove>:
 80098b0:	4288      	cmp	r0, r1
 80098b2:	b510      	push	{r4, lr}
 80098b4:	eb01 0402 	add.w	r4, r1, r2
 80098b8:	d902      	bls.n	80098c0 <memmove+0x10>
 80098ba:	4284      	cmp	r4, r0
 80098bc:	4623      	mov	r3, r4
 80098be:	d807      	bhi.n	80098d0 <memmove+0x20>
 80098c0:	1e43      	subs	r3, r0, #1
 80098c2:	42a1      	cmp	r1, r4
 80098c4:	d008      	beq.n	80098d8 <memmove+0x28>
 80098c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80098ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80098ce:	e7f8      	b.n	80098c2 <memmove+0x12>
 80098d0:	4402      	add	r2, r0
 80098d2:	4601      	mov	r1, r0
 80098d4:	428a      	cmp	r2, r1
 80098d6:	d100      	bne.n	80098da <memmove+0x2a>
 80098d8:	bd10      	pop	{r4, pc}
 80098da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80098de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80098e2:	e7f7      	b.n	80098d4 <memmove+0x24>

080098e4 <memset>:
 80098e4:	4402      	add	r2, r0
 80098e6:	4603      	mov	r3, r0
 80098e8:	4293      	cmp	r3, r2
 80098ea:	d100      	bne.n	80098ee <memset+0xa>
 80098ec:	4770      	bx	lr
 80098ee:	f803 1b01 	strb.w	r1, [r3], #1
 80098f2:	e7f9      	b.n	80098e8 <memset+0x4>

080098f4 <_malloc_r>:
 80098f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098f6:	1ccd      	adds	r5, r1, #3
 80098f8:	f025 0503 	bic.w	r5, r5, #3
 80098fc:	3508      	adds	r5, #8
 80098fe:	2d0c      	cmp	r5, #12
 8009900:	bf38      	it	cc
 8009902:	250c      	movcc	r5, #12
 8009904:	2d00      	cmp	r5, #0
 8009906:	4606      	mov	r6, r0
 8009908:	db01      	blt.n	800990e <_malloc_r+0x1a>
 800990a:	42a9      	cmp	r1, r5
 800990c:	d903      	bls.n	8009916 <_malloc_r+0x22>
 800990e:	230c      	movs	r3, #12
 8009910:	6033      	str	r3, [r6, #0]
 8009912:	2000      	movs	r0, #0
 8009914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009916:	f000 f8e1 	bl	8009adc <__malloc_lock>
 800991a:	4921      	ldr	r1, [pc, #132]	; (80099a0 <_malloc_r+0xac>)
 800991c:	680a      	ldr	r2, [r1, #0]
 800991e:	4614      	mov	r4, r2
 8009920:	b99c      	cbnz	r4, 800994a <_malloc_r+0x56>
 8009922:	4f20      	ldr	r7, [pc, #128]	; (80099a4 <_malloc_r+0xb0>)
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	b923      	cbnz	r3, 8009932 <_malloc_r+0x3e>
 8009928:	4621      	mov	r1, r4
 800992a:	4630      	mov	r0, r6
 800992c:	f000 f8a6 	bl	8009a7c <_sbrk_r>
 8009930:	6038      	str	r0, [r7, #0]
 8009932:	4629      	mov	r1, r5
 8009934:	4630      	mov	r0, r6
 8009936:	f000 f8a1 	bl	8009a7c <_sbrk_r>
 800993a:	1c43      	adds	r3, r0, #1
 800993c:	d123      	bne.n	8009986 <_malloc_r+0x92>
 800993e:	230c      	movs	r3, #12
 8009940:	6033      	str	r3, [r6, #0]
 8009942:	4630      	mov	r0, r6
 8009944:	f000 f8d0 	bl	8009ae8 <__malloc_unlock>
 8009948:	e7e3      	b.n	8009912 <_malloc_r+0x1e>
 800994a:	6823      	ldr	r3, [r4, #0]
 800994c:	1b5b      	subs	r3, r3, r5
 800994e:	d417      	bmi.n	8009980 <_malloc_r+0x8c>
 8009950:	2b0b      	cmp	r3, #11
 8009952:	d903      	bls.n	800995c <_malloc_r+0x68>
 8009954:	6023      	str	r3, [r4, #0]
 8009956:	441c      	add	r4, r3
 8009958:	6025      	str	r5, [r4, #0]
 800995a:	e004      	b.n	8009966 <_malloc_r+0x72>
 800995c:	6863      	ldr	r3, [r4, #4]
 800995e:	42a2      	cmp	r2, r4
 8009960:	bf0c      	ite	eq
 8009962:	600b      	streq	r3, [r1, #0]
 8009964:	6053      	strne	r3, [r2, #4]
 8009966:	4630      	mov	r0, r6
 8009968:	f000 f8be 	bl	8009ae8 <__malloc_unlock>
 800996c:	f104 000b 	add.w	r0, r4, #11
 8009970:	1d23      	adds	r3, r4, #4
 8009972:	f020 0007 	bic.w	r0, r0, #7
 8009976:	1ac2      	subs	r2, r0, r3
 8009978:	d0cc      	beq.n	8009914 <_malloc_r+0x20>
 800997a:	1a1b      	subs	r3, r3, r0
 800997c:	50a3      	str	r3, [r4, r2]
 800997e:	e7c9      	b.n	8009914 <_malloc_r+0x20>
 8009980:	4622      	mov	r2, r4
 8009982:	6864      	ldr	r4, [r4, #4]
 8009984:	e7cc      	b.n	8009920 <_malloc_r+0x2c>
 8009986:	1cc4      	adds	r4, r0, #3
 8009988:	f024 0403 	bic.w	r4, r4, #3
 800998c:	42a0      	cmp	r0, r4
 800998e:	d0e3      	beq.n	8009958 <_malloc_r+0x64>
 8009990:	1a21      	subs	r1, r4, r0
 8009992:	4630      	mov	r0, r6
 8009994:	f000 f872 	bl	8009a7c <_sbrk_r>
 8009998:	3001      	adds	r0, #1
 800999a:	d1dd      	bne.n	8009958 <_malloc_r+0x64>
 800999c:	e7cf      	b.n	800993e <_malloc_r+0x4a>
 800999e:	bf00      	nop
 80099a0:	200046fc 	.word	0x200046fc
 80099a4:	20004700 	.word	0x20004700

080099a8 <cleanup_glue>:
 80099a8:	b538      	push	{r3, r4, r5, lr}
 80099aa:	460c      	mov	r4, r1
 80099ac:	6809      	ldr	r1, [r1, #0]
 80099ae:	4605      	mov	r5, r0
 80099b0:	b109      	cbz	r1, 80099b6 <cleanup_glue+0xe>
 80099b2:	f7ff fff9 	bl	80099a8 <cleanup_glue>
 80099b6:	4621      	mov	r1, r4
 80099b8:	4628      	mov	r0, r5
 80099ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099be:	f000 b899 	b.w	8009af4 <_free_r>
	...

080099c4 <_reclaim_reent>:
 80099c4:	4b2c      	ldr	r3, [pc, #176]	; (8009a78 <_reclaim_reent+0xb4>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	4283      	cmp	r3, r0
 80099ca:	b570      	push	{r4, r5, r6, lr}
 80099cc:	4604      	mov	r4, r0
 80099ce:	d051      	beq.n	8009a74 <_reclaim_reent+0xb0>
 80099d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80099d2:	b143      	cbz	r3, 80099e6 <_reclaim_reent+0x22>
 80099d4:	68db      	ldr	r3, [r3, #12]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d14a      	bne.n	8009a70 <_reclaim_reent+0xac>
 80099da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099dc:	6819      	ldr	r1, [r3, #0]
 80099de:	b111      	cbz	r1, 80099e6 <_reclaim_reent+0x22>
 80099e0:	4620      	mov	r0, r4
 80099e2:	f000 f887 	bl	8009af4 <_free_r>
 80099e6:	6961      	ldr	r1, [r4, #20]
 80099e8:	b111      	cbz	r1, 80099f0 <_reclaim_reent+0x2c>
 80099ea:	4620      	mov	r0, r4
 80099ec:	f000 f882 	bl	8009af4 <_free_r>
 80099f0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80099f2:	b111      	cbz	r1, 80099fa <_reclaim_reent+0x36>
 80099f4:	4620      	mov	r0, r4
 80099f6:	f000 f87d 	bl	8009af4 <_free_r>
 80099fa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80099fc:	b111      	cbz	r1, 8009a04 <_reclaim_reent+0x40>
 80099fe:	4620      	mov	r0, r4
 8009a00:	f000 f878 	bl	8009af4 <_free_r>
 8009a04:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009a06:	b111      	cbz	r1, 8009a0e <_reclaim_reent+0x4a>
 8009a08:	4620      	mov	r0, r4
 8009a0a:	f000 f873 	bl	8009af4 <_free_r>
 8009a0e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009a10:	b111      	cbz	r1, 8009a18 <_reclaim_reent+0x54>
 8009a12:	4620      	mov	r0, r4
 8009a14:	f000 f86e 	bl	8009af4 <_free_r>
 8009a18:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009a1a:	b111      	cbz	r1, 8009a22 <_reclaim_reent+0x5e>
 8009a1c:	4620      	mov	r0, r4
 8009a1e:	f000 f869 	bl	8009af4 <_free_r>
 8009a22:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009a24:	b111      	cbz	r1, 8009a2c <_reclaim_reent+0x68>
 8009a26:	4620      	mov	r0, r4
 8009a28:	f000 f864 	bl	8009af4 <_free_r>
 8009a2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a2e:	b111      	cbz	r1, 8009a36 <_reclaim_reent+0x72>
 8009a30:	4620      	mov	r0, r4
 8009a32:	f000 f85f 	bl	8009af4 <_free_r>
 8009a36:	69a3      	ldr	r3, [r4, #24]
 8009a38:	b1e3      	cbz	r3, 8009a74 <_reclaim_reent+0xb0>
 8009a3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009a3c:	4620      	mov	r0, r4
 8009a3e:	4798      	blx	r3
 8009a40:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009a42:	b1b9      	cbz	r1, 8009a74 <_reclaim_reent+0xb0>
 8009a44:	4620      	mov	r0, r4
 8009a46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009a4a:	f7ff bfad 	b.w	80099a8 <cleanup_glue>
 8009a4e:	5949      	ldr	r1, [r1, r5]
 8009a50:	b941      	cbnz	r1, 8009a64 <_reclaim_reent+0xa0>
 8009a52:	3504      	adds	r5, #4
 8009a54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a56:	2d80      	cmp	r5, #128	; 0x80
 8009a58:	68d9      	ldr	r1, [r3, #12]
 8009a5a:	d1f8      	bne.n	8009a4e <_reclaim_reent+0x8a>
 8009a5c:	4620      	mov	r0, r4
 8009a5e:	f000 f849 	bl	8009af4 <_free_r>
 8009a62:	e7ba      	b.n	80099da <_reclaim_reent+0x16>
 8009a64:	680e      	ldr	r6, [r1, #0]
 8009a66:	4620      	mov	r0, r4
 8009a68:	f000 f844 	bl	8009af4 <_free_r>
 8009a6c:	4631      	mov	r1, r6
 8009a6e:	e7ef      	b.n	8009a50 <_reclaim_reent+0x8c>
 8009a70:	2500      	movs	r5, #0
 8009a72:	e7ef      	b.n	8009a54 <_reclaim_reent+0x90>
 8009a74:	bd70      	pop	{r4, r5, r6, pc}
 8009a76:	bf00      	nop
 8009a78:	20000020 	.word	0x20000020

08009a7c <_sbrk_r>:
 8009a7c:	b538      	push	{r3, r4, r5, lr}
 8009a7e:	4d06      	ldr	r5, [pc, #24]	; (8009a98 <_sbrk_r+0x1c>)
 8009a80:	2300      	movs	r3, #0
 8009a82:	4604      	mov	r4, r0
 8009a84:	4608      	mov	r0, r1
 8009a86:	602b      	str	r3, [r5, #0]
 8009a88:	f7f8 fb30 	bl	80020ec <_sbrk>
 8009a8c:	1c43      	adds	r3, r0, #1
 8009a8e:	d102      	bne.n	8009a96 <_sbrk_r+0x1a>
 8009a90:	682b      	ldr	r3, [r5, #0]
 8009a92:	b103      	cbz	r3, 8009a96 <_sbrk_r+0x1a>
 8009a94:	6023      	str	r3, [r4, #0]
 8009a96:	bd38      	pop	{r3, r4, r5, pc}
 8009a98:	200048d4 	.word	0x200048d4

08009a9c <siprintf>:
 8009a9c:	b40e      	push	{r1, r2, r3}
 8009a9e:	b500      	push	{lr}
 8009aa0:	b09c      	sub	sp, #112	; 0x70
 8009aa2:	ab1d      	add	r3, sp, #116	; 0x74
 8009aa4:	9002      	str	r0, [sp, #8]
 8009aa6:	9006      	str	r0, [sp, #24]
 8009aa8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009aac:	4809      	ldr	r0, [pc, #36]	; (8009ad4 <siprintf+0x38>)
 8009aae:	9107      	str	r1, [sp, #28]
 8009ab0:	9104      	str	r1, [sp, #16]
 8009ab2:	4909      	ldr	r1, [pc, #36]	; (8009ad8 <siprintf+0x3c>)
 8009ab4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ab8:	9105      	str	r1, [sp, #20]
 8009aba:	6800      	ldr	r0, [r0, #0]
 8009abc:	9301      	str	r3, [sp, #4]
 8009abe:	a902      	add	r1, sp, #8
 8009ac0:	f000 f8c4 	bl	8009c4c <_svfiprintf_r>
 8009ac4:	9b02      	ldr	r3, [sp, #8]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	701a      	strb	r2, [r3, #0]
 8009aca:	b01c      	add	sp, #112	; 0x70
 8009acc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ad0:	b003      	add	sp, #12
 8009ad2:	4770      	bx	lr
 8009ad4:	20000020 	.word	0x20000020
 8009ad8:	ffff0208 	.word	0xffff0208

08009adc <__malloc_lock>:
 8009adc:	4801      	ldr	r0, [pc, #4]	; (8009ae4 <__malloc_lock+0x8>)
 8009ade:	f7ff bed7 	b.w	8009890 <__retarget_lock_acquire_recursive>
 8009ae2:	bf00      	nop
 8009ae4:	200048cc 	.word	0x200048cc

08009ae8 <__malloc_unlock>:
 8009ae8:	4801      	ldr	r0, [pc, #4]	; (8009af0 <__malloc_unlock+0x8>)
 8009aea:	f7ff bed2 	b.w	8009892 <__retarget_lock_release_recursive>
 8009aee:	bf00      	nop
 8009af0:	200048cc 	.word	0x200048cc

08009af4 <_free_r>:
 8009af4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009af6:	2900      	cmp	r1, #0
 8009af8:	d048      	beq.n	8009b8c <_free_r+0x98>
 8009afa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009afe:	9001      	str	r0, [sp, #4]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	f1a1 0404 	sub.w	r4, r1, #4
 8009b06:	bfb8      	it	lt
 8009b08:	18e4      	addlt	r4, r4, r3
 8009b0a:	f7ff ffe7 	bl	8009adc <__malloc_lock>
 8009b0e:	4a20      	ldr	r2, [pc, #128]	; (8009b90 <_free_r+0x9c>)
 8009b10:	9801      	ldr	r0, [sp, #4]
 8009b12:	6813      	ldr	r3, [r2, #0]
 8009b14:	4615      	mov	r5, r2
 8009b16:	b933      	cbnz	r3, 8009b26 <_free_r+0x32>
 8009b18:	6063      	str	r3, [r4, #4]
 8009b1a:	6014      	str	r4, [r2, #0]
 8009b1c:	b003      	add	sp, #12
 8009b1e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b22:	f7ff bfe1 	b.w	8009ae8 <__malloc_unlock>
 8009b26:	42a3      	cmp	r3, r4
 8009b28:	d90b      	bls.n	8009b42 <_free_r+0x4e>
 8009b2a:	6821      	ldr	r1, [r4, #0]
 8009b2c:	1862      	adds	r2, r4, r1
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	bf04      	itt	eq
 8009b32:	681a      	ldreq	r2, [r3, #0]
 8009b34:	685b      	ldreq	r3, [r3, #4]
 8009b36:	6063      	str	r3, [r4, #4]
 8009b38:	bf04      	itt	eq
 8009b3a:	1852      	addeq	r2, r2, r1
 8009b3c:	6022      	streq	r2, [r4, #0]
 8009b3e:	602c      	str	r4, [r5, #0]
 8009b40:	e7ec      	b.n	8009b1c <_free_r+0x28>
 8009b42:	461a      	mov	r2, r3
 8009b44:	685b      	ldr	r3, [r3, #4]
 8009b46:	b10b      	cbz	r3, 8009b4c <_free_r+0x58>
 8009b48:	42a3      	cmp	r3, r4
 8009b4a:	d9fa      	bls.n	8009b42 <_free_r+0x4e>
 8009b4c:	6811      	ldr	r1, [r2, #0]
 8009b4e:	1855      	adds	r5, r2, r1
 8009b50:	42a5      	cmp	r5, r4
 8009b52:	d10b      	bne.n	8009b6c <_free_r+0x78>
 8009b54:	6824      	ldr	r4, [r4, #0]
 8009b56:	4421      	add	r1, r4
 8009b58:	1854      	adds	r4, r2, r1
 8009b5a:	42a3      	cmp	r3, r4
 8009b5c:	6011      	str	r1, [r2, #0]
 8009b5e:	d1dd      	bne.n	8009b1c <_free_r+0x28>
 8009b60:	681c      	ldr	r4, [r3, #0]
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	6053      	str	r3, [r2, #4]
 8009b66:	4421      	add	r1, r4
 8009b68:	6011      	str	r1, [r2, #0]
 8009b6a:	e7d7      	b.n	8009b1c <_free_r+0x28>
 8009b6c:	d902      	bls.n	8009b74 <_free_r+0x80>
 8009b6e:	230c      	movs	r3, #12
 8009b70:	6003      	str	r3, [r0, #0]
 8009b72:	e7d3      	b.n	8009b1c <_free_r+0x28>
 8009b74:	6825      	ldr	r5, [r4, #0]
 8009b76:	1961      	adds	r1, r4, r5
 8009b78:	428b      	cmp	r3, r1
 8009b7a:	bf04      	itt	eq
 8009b7c:	6819      	ldreq	r1, [r3, #0]
 8009b7e:	685b      	ldreq	r3, [r3, #4]
 8009b80:	6063      	str	r3, [r4, #4]
 8009b82:	bf04      	itt	eq
 8009b84:	1949      	addeq	r1, r1, r5
 8009b86:	6021      	streq	r1, [r4, #0]
 8009b88:	6054      	str	r4, [r2, #4]
 8009b8a:	e7c7      	b.n	8009b1c <_free_r+0x28>
 8009b8c:	b003      	add	sp, #12
 8009b8e:	bd30      	pop	{r4, r5, pc}
 8009b90:	200046fc 	.word	0x200046fc

08009b94 <__ssputs_r>:
 8009b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b98:	688e      	ldr	r6, [r1, #8]
 8009b9a:	429e      	cmp	r6, r3
 8009b9c:	4682      	mov	sl, r0
 8009b9e:	460c      	mov	r4, r1
 8009ba0:	4690      	mov	r8, r2
 8009ba2:	461f      	mov	r7, r3
 8009ba4:	d838      	bhi.n	8009c18 <__ssputs_r+0x84>
 8009ba6:	898a      	ldrh	r2, [r1, #12]
 8009ba8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009bac:	d032      	beq.n	8009c14 <__ssputs_r+0x80>
 8009bae:	6825      	ldr	r5, [r4, #0]
 8009bb0:	6909      	ldr	r1, [r1, #16]
 8009bb2:	eba5 0901 	sub.w	r9, r5, r1
 8009bb6:	6965      	ldr	r5, [r4, #20]
 8009bb8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009bbc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009bc0:	3301      	adds	r3, #1
 8009bc2:	444b      	add	r3, r9
 8009bc4:	106d      	asrs	r5, r5, #1
 8009bc6:	429d      	cmp	r5, r3
 8009bc8:	bf38      	it	cc
 8009bca:	461d      	movcc	r5, r3
 8009bcc:	0553      	lsls	r3, r2, #21
 8009bce:	d531      	bpl.n	8009c34 <__ssputs_r+0xa0>
 8009bd0:	4629      	mov	r1, r5
 8009bd2:	f7ff fe8f 	bl	80098f4 <_malloc_r>
 8009bd6:	4606      	mov	r6, r0
 8009bd8:	b950      	cbnz	r0, 8009bf0 <__ssputs_r+0x5c>
 8009bda:	230c      	movs	r3, #12
 8009bdc:	f8ca 3000 	str.w	r3, [sl]
 8009be0:	89a3      	ldrh	r3, [r4, #12]
 8009be2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009be6:	81a3      	strh	r3, [r4, #12]
 8009be8:	f04f 30ff 	mov.w	r0, #4294967295
 8009bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bf0:	6921      	ldr	r1, [r4, #16]
 8009bf2:	464a      	mov	r2, r9
 8009bf4:	f7ff fe4e 	bl	8009894 <memcpy>
 8009bf8:	89a3      	ldrh	r3, [r4, #12]
 8009bfa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009bfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c02:	81a3      	strh	r3, [r4, #12]
 8009c04:	6126      	str	r6, [r4, #16]
 8009c06:	6165      	str	r5, [r4, #20]
 8009c08:	444e      	add	r6, r9
 8009c0a:	eba5 0509 	sub.w	r5, r5, r9
 8009c0e:	6026      	str	r6, [r4, #0]
 8009c10:	60a5      	str	r5, [r4, #8]
 8009c12:	463e      	mov	r6, r7
 8009c14:	42be      	cmp	r6, r7
 8009c16:	d900      	bls.n	8009c1a <__ssputs_r+0x86>
 8009c18:	463e      	mov	r6, r7
 8009c1a:	4632      	mov	r2, r6
 8009c1c:	6820      	ldr	r0, [r4, #0]
 8009c1e:	4641      	mov	r1, r8
 8009c20:	f7ff fe46 	bl	80098b0 <memmove>
 8009c24:	68a3      	ldr	r3, [r4, #8]
 8009c26:	6822      	ldr	r2, [r4, #0]
 8009c28:	1b9b      	subs	r3, r3, r6
 8009c2a:	4432      	add	r2, r6
 8009c2c:	60a3      	str	r3, [r4, #8]
 8009c2e:	6022      	str	r2, [r4, #0]
 8009c30:	2000      	movs	r0, #0
 8009c32:	e7db      	b.n	8009bec <__ssputs_r+0x58>
 8009c34:	462a      	mov	r2, r5
 8009c36:	f000 fa9d 	bl	800a174 <_realloc_r>
 8009c3a:	4606      	mov	r6, r0
 8009c3c:	2800      	cmp	r0, #0
 8009c3e:	d1e1      	bne.n	8009c04 <__ssputs_r+0x70>
 8009c40:	6921      	ldr	r1, [r4, #16]
 8009c42:	4650      	mov	r0, sl
 8009c44:	f7ff ff56 	bl	8009af4 <_free_r>
 8009c48:	e7c7      	b.n	8009bda <__ssputs_r+0x46>
	...

08009c4c <_svfiprintf_r>:
 8009c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c50:	4698      	mov	r8, r3
 8009c52:	898b      	ldrh	r3, [r1, #12]
 8009c54:	061b      	lsls	r3, r3, #24
 8009c56:	b09d      	sub	sp, #116	; 0x74
 8009c58:	4607      	mov	r7, r0
 8009c5a:	460d      	mov	r5, r1
 8009c5c:	4614      	mov	r4, r2
 8009c5e:	d50e      	bpl.n	8009c7e <_svfiprintf_r+0x32>
 8009c60:	690b      	ldr	r3, [r1, #16]
 8009c62:	b963      	cbnz	r3, 8009c7e <_svfiprintf_r+0x32>
 8009c64:	2140      	movs	r1, #64	; 0x40
 8009c66:	f7ff fe45 	bl	80098f4 <_malloc_r>
 8009c6a:	6028      	str	r0, [r5, #0]
 8009c6c:	6128      	str	r0, [r5, #16]
 8009c6e:	b920      	cbnz	r0, 8009c7a <_svfiprintf_r+0x2e>
 8009c70:	230c      	movs	r3, #12
 8009c72:	603b      	str	r3, [r7, #0]
 8009c74:	f04f 30ff 	mov.w	r0, #4294967295
 8009c78:	e0d1      	b.n	8009e1e <_svfiprintf_r+0x1d2>
 8009c7a:	2340      	movs	r3, #64	; 0x40
 8009c7c:	616b      	str	r3, [r5, #20]
 8009c7e:	2300      	movs	r3, #0
 8009c80:	9309      	str	r3, [sp, #36]	; 0x24
 8009c82:	2320      	movs	r3, #32
 8009c84:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c88:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c8c:	2330      	movs	r3, #48	; 0x30
 8009c8e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009e38 <_svfiprintf_r+0x1ec>
 8009c92:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c96:	f04f 0901 	mov.w	r9, #1
 8009c9a:	4623      	mov	r3, r4
 8009c9c:	469a      	mov	sl, r3
 8009c9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ca2:	b10a      	cbz	r2, 8009ca8 <_svfiprintf_r+0x5c>
 8009ca4:	2a25      	cmp	r2, #37	; 0x25
 8009ca6:	d1f9      	bne.n	8009c9c <_svfiprintf_r+0x50>
 8009ca8:	ebba 0b04 	subs.w	fp, sl, r4
 8009cac:	d00b      	beq.n	8009cc6 <_svfiprintf_r+0x7a>
 8009cae:	465b      	mov	r3, fp
 8009cb0:	4622      	mov	r2, r4
 8009cb2:	4629      	mov	r1, r5
 8009cb4:	4638      	mov	r0, r7
 8009cb6:	f7ff ff6d 	bl	8009b94 <__ssputs_r>
 8009cba:	3001      	adds	r0, #1
 8009cbc:	f000 80aa 	beq.w	8009e14 <_svfiprintf_r+0x1c8>
 8009cc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009cc2:	445a      	add	r2, fp
 8009cc4:	9209      	str	r2, [sp, #36]	; 0x24
 8009cc6:	f89a 3000 	ldrb.w	r3, [sl]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	f000 80a2 	beq.w	8009e14 <_svfiprintf_r+0x1c8>
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	f04f 32ff 	mov.w	r2, #4294967295
 8009cd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009cda:	f10a 0a01 	add.w	sl, sl, #1
 8009cde:	9304      	str	r3, [sp, #16]
 8009ce0:	9307      	str	r3, [sp, #28]
 8009ce2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ce6:	931a      	str	r3, [sp, #104]	; 0x68
 8009ce8:	4654      	mov	r4, sl
 8009cea:	2205      	movs	r2, #5
 8009cec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cf0:	4851      	ldr	r0, [pc, #324]	; (8009e38 <_svfiprintf_r+0x1ec>)
 8009cf2:	f7f6 fa6d 	bl	80001d0 <memchr>
 8009cf6:	9a04      	ldr	r2, [sp, #16]
 8009cf8:	b9d8      	cbnz	r0, 8009d32 <_svfiprintf_r+0xe6>
 8009cfa:	06d0      	lsls	r0, r2, #27
 8009cfc:	bf44      	itt	mi
 8009cfe:	2320      	movmi	r3, #32
 8009d00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d04:	0711      	lsls	r1, r2, #28
 8009d06:	bf44      	itt	mi
 8009d08:	232b      	movmi	r3, #43	; 0x2b
 8009d0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d0e:	f89a 3000 	ldrb.w	r3, [sl]
 8009d12:	2b2a      	cmp	r3, #42	; 0x2a
 8009d14:	d015      	beq.n	8009d42 <_svfiprintf_r+0xf6>
 8009d16:	9a07      	ldr	r2, [sp, #28]
 8009d18:	4654      	mov	r4, sl
 8009d1a:	2000      	movs	r0, #0
 8009d1c:	f04f 0c0a 	mov.w	ip, #10
 8009d20:	4621      	mov	r1, r4
 8009d22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d26:	3b30      	subs	r3, #48	; 0x30
 8009d28:	2b09      	cmp	r3, #9
 8009d2a:	d94e      	bls.n	8009dca <_svfiprintf_r+0x17e>
 8009d2c:	b1b0      	cbz	r0, 8009d5c <_svfiprintf_r+0x110>
 8009d2e:	9207      	str	r2, [sp, #28]
 8009d30:	e014      	b.n	8009d5c <_svfiprintf_r+0x110>
 8009d32:	eba0 0308 	sub.w	r3, r0, r8
 8009d36:	fa09 f303 	lsl.w	r3, r9, r3
 8009d3a:	4313      	orrs	r3, r2
 8009d3c:	9304      	str	r3, [sp, #16]
 8009d3e:	46a2      	mov	sl, r4
 8009d40:	e7d2      	b.n	8009ce8 <_svfiprintf_r+0x9c>
 8009d42:	9b03      	ldr	r3, [sp, #12]
 8009d44:	1d19      	adds	r1, r3, #4
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	9103      	str	r1, [sp, #12]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	bfbb      	ittet	lt
 8009d4e:	425b      	neglt	r3, r3
 8009d50:	f042 0202 	orrlt.w	r2, r2, #2
 8009d54:	9307      	strge	r3, [sp, #28]
 8009d56:	9307      	strlt	r3, [sp, #28]
 8009d58:	bfb8      	it	lt
 8009d5a:	9204      	strlt	r2, [sp, #16]
 8009d5c:	7823      	ldrb	r3, [r4, #0]
 8009d5e:	2b2e      	cmp	r3, #46	; 0x2e
 8009d60:	d10c      	bne.n	8009d7c <_svfiprintf_r+0x130>
 8009d62:	7863      	ldrb	r3, [r4, #1]
 8009d64:	2b2a      	cmp	r3, #42	; 0x2a
 8009d66:	d135      	bne.n	8009dd4 <_svfiprintf_r+0x188>
 8009d68:	9b03      	ldr	r3, [sp, #12]
 8009d6a:	1d1a      	adds	r2, r3, #4
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	9203      	str	r2, [sp, #12]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	bfb8      	it	lt
 8009d74:	f04f 33ff 	movlt.w	r3, #4294967295
 8009d78:	3402      	adds	r4, #2
 8009d7a:	9305      	str	r3, [sp, #20]
 8009d7c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009e48 <_svfiprintf_r+0x1fc>
 8009d80:	7821      	ldrb	r1, [r4, #0]
 8009d82:	2203      	movs	r2, #3
 8009d84:	4650      	mov	r0, sl
 8009d86:	f7f6 fa23 	bl	80001d0 <memchr>
 8009d8a:	b140      	cbz	r0, 8009d9e <_svfiprintf_r+0x152>
 8009d8c:	2340      	movs	r3, #64	; 0x40
 8009d8e:	eba0 000a 	sub.w	r0, r0, sl
 8009d92:	fa03 f000 	lsl.w	r0, r3, r0
 8009d96:	9b04      	ldr	r3, [sp, #16]
 8009d98:	4303      	orrs	r3, r0
 8009d9a:	3401      	adds	r4, #1
 8009d9c:	9304      	str	r3, [sp, #16]
 8009d9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009da2:	4826      	ldr	r0, [pc, #152]	; (8009e3c <_svfiprintf_r+0x1f0>)
 8009da4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009da8:	2206      	movs	r2, #6
 8009daa:	f7f6 fa11 	bl	80001d0 <memchr>
 8009dae:	2800      	cmp	r0, #0
 8009db0:	d038      	beq.n	8009e24 <_svfiprintf_r+0x1d8>
 8009db2:	4b23      	ldr	r3, [pc, #140]	; (8009e40 <_svfiprintf_r+0x1f4>)
 8009db4:	bb1b      	cbnz	r3, 8009dfe <_svfiprintf_r+0x1b2>
 8009db6:	9b03      	ldr	r3, [sp, #12]
 8009db8:	3307      	adds	r3, #7
 8009dba:	f023 0307 	bic.w	r3, r3, #7
 8009dbe:	3308      	adds	r3, #8
 8009dc0:	9303      	str	r3, [sp, #12]
 8009dc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dc4:	4433      	add	r3, r6
 8009dc6:	9309      	str	r3, [sp, #36]	; 0x24
 8009dc8:	e767      	b.n	8009c9a <_svfiprintf_r+0x4e>
 8009dca:	fb0c 3202 	mla	r2, ip, r2, r3
 8009dce:	460c      	mov	r4, r1
 8009dd0:	2001      	movs	r0, #1
 8009dd2:	e7a5      	b.n	8009d20 <_svfiprintf_r+0xd4>
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	3401      	adds	r4, #1
 8009dd8:	9305      	str	r3, [sp, #20]
 8009dda:	4619      	mov	r1, r3
 8009ddc:	f04f 0c0a 	mov.w	ip, #10
 8009de0:	4620      	mov	r0, r4
 8009de2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009de6:	3a30      	subs	r2, #48	; 0x30
 8009de8:	2a09      	cmp	r2, #9
 8009dea:	d903      	bls.n	8009df4 <_svfiprintf_r+0x1a8>
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d0c5      	beq.n	8009d7c <_svfiprintf_r+0x130>
 8009df0:	9105      	str	r1, [sp, #20]
 8009df2:	e7c3      	b.n	8009d7c <_svfiprintf_r+0x130>
 8009df4:	fb0c 2101 	mla	r1, ip, r1, r2
 8009df8:	4604      	mov	r4, r0
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	e7f0      	b.n	8009de0 <_svfiprintf_r+0x194>
 8009dfe:	ab03      	add	r3, sp, #12
 8009e00:	9300      	str	r3, [sp, #0]
 8009e02:	462a      	mov	r2, r5
 8009e04:	4b0f      	ldr	r3, [pc, #60]	; (8009e44 <_svfiprintf_r+0x1f8>)
 8009e06:	a904      	add	r1, sp, #16
 8009e08:	4638      	mov	r0, r7
 8009e0a:	f3af 8000 	nop.w
 8009e0e:	1c42      	adds	r2, r0, #1
 8009e10:	4606      	mov	r6, r0
 8009e12:	d1d6      	bne.n	8009dc2 <_svfiprintf_r+0x176>
 8009e14:	89ab      	ldrh	r3, [r5, #12]
 8009e16:	065b      	lsls	r3, r3, #25
 8009e18:	f53f af2c 	bmi.w	8009c74 <_svfiprintf_r+0x28>
 8009e1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e1e:	b01d      	add	sp, #116	; 0x74
 8009e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e24:	ab03      	add	r3, sp, #12
 8009e26:	9300      	str	r3, [sp, #0]
 8009e28:	462a      	mov	r2, r5
 8009e2a:	4b06      	ldr	r3, [pc, #24]	; (8009e44 <_svfiprintf_r+0x1f8>)
 8009e2c:	a904      	add	r1, sp, #16
 8009e2e:	4638      	mov	r0, r7
 8009e30:	f000 f87a 	bl	8009f28 <_printf_i>
 8009e34:	e7eb      	b.n	8009e0e <_svfiprintf_r+0x1c2>
 8009e36:	bf00      	nop
 8009e38:	0800b888 	.word	0x0800b888
 8009e3c:	0800b892 	.word	0x0800b892
 8009e40:	00000000 	.word	0x00000000
 8009e44:	08009b95 	.word	0x08009b95
 8009e48:	0800b88e 	.word	0x0800b88e

08009e4c <_printf_common>:
 8009e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e50:	4616      	mov	r6, r2
 8009e52:	4699      	mov	r9, r3
 8009e54:	688a      	ldr	r2, [r1, #8]
 8009e56:	690b      	ldr	r3, [r1, #16]
 8009e58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	bfb8      	it	lt
 8009e60:	4613      	movlt	r3, r2
 8009e62:	6033      	str	r3, [r6, #0]
 8009e64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009e68:	4607      	mov	r7, r0
 8009e6a:	460c      	mov	r4, r1
 8009e6c:	b10a      	cbz	r2, 8009e72 <_printf_common+0x26>
 8009e6e:	3301      	adds	r3, #1
 8009e70:	6033      	str	r3, [r6, #0]
 8009e72:	6823      	ldr	r3, [r4, #0]
 8009e74:	0699      	lsls	r1, r3, #26
 8009e76:	bf42      	ittt	mi
 8009e78:	6833      	ldrmi	r3, [r6, #0]
 8009e7a:	3302      	addmi	r3, #2
 8009e7c:	6033      	strmi	r3, [r6, #0]
 8009e7e:	6825      	ldr	r5, [r4, #0]
 8009e80:	f015 0506 	ands.w	r5, r5, #6
 8009e84:	d106      	bne.n	8009e94 <_printf_common+0x48>
 8009e86:	f104 0a19 	add.w	sl, r4, #25
 8009e8a:	68e3      	ldr	r3, [r4, #12]
 8009e8c:	6832      	ldr	r2, [r6, #0]
 8009e8e:	1a9b      	subs	r3, r3, r2
 8009e90:	42ab      	cmp	r3, r5
 8009e92:	dc26      	bgt.n	8009ee2 <_printf_common+0x96>
 8009e94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009e98:	1e13      	subs	r3, r2, #0
 8009e9a:	6822      	ldr	r2, [r4, #0]
 8009e9c:	bf18      	it	ne
 8009e9e:	2301      	movne	r3, #1
 8009ea0:	0692      	lsls	r2, r2, #26
 8009ea2:	d42b      	bmi.n	8009efc <_printf_common+0xb0>
 8009ea4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ea8:	4649      	mov	r1, r9
 8009eaa:	4638      	mov	r0, r7
 8009eac:	47c0      	blx	r8
 8009eae:	3001      	adds	r0, #1
 8009eb0:	d01e      	beq.n	8009ef0 <_printf_common+0xa4>
 8009eb2:	6823      	ldr	r3, [r4, #0]
 8009eb4:	68e5      	ldr	r5, [r4, #12]
 8009eb6:	6832      	ldr	r2, [r6, #0]
 8009eb8:	f003 0306 	and.w	r3, r3, #6
 8009ebc:	2b04      	cmp	r3, #4
 8009ebe:	bf08      	it	eq
 8009ec0:	1aad      	subeq	r5, r5, r2
 8009ec2:	68a3      	ldr	r3, [r4, #8]
 8009ec4:	6922      	ldr	r2, [r4, #16]
 8009ec6:	bf0c      	ite	eq
 8009ec8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ecc:	2500      	movne	r5, #0
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	bfc4      	itt	gt
 8009ed2:	1a9b      	subgt	r3, r3, r2
 8009ed4:	18ed      	addgt	r5, r5, r3
 8009ed6:	2600      	movs	r6, #0
 8009ed8:	341a      	adds	r4, #26
 8009eda:	42b5      	cmp	r5, r6
 8009edc:	d11a      	bne.n	8009f14 <_printf_common+0xc8>
 8009ede:	2000      	movs	r0, #0
 8009ee0:	e008      	b.n	8009ef4 <_printf_common+0xa8>
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	4652      	mov	r2, sl
 8009ee6:	4649      	mov	r1, r9
 8009ee8:	4638      	mov	r0, r7
 8009eea:	47c0      	blx	r8
 8009eec:	3001      	adds	r0, #1
 8009eee:	d103      	bne.n	8009ef8 <_printf_common+0xac>
 8009ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ef8:	3501      	adds	r5, #1
 8009efa:	e7c6      	b.n	8009e8a <_printf_common+0x3e>
 8009efc:	18e1      	adds	r1, r4, r3
 8009efe:	1c5a      	adds	r2, r3, #1
 8009f00:	2030      	movs	r0, #48	; 0x30
 8009f02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009f06:	4422      	add	r2, r4
 8009f08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009f0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009f10:	3302      	adds	r3, #2
 8009f12:	e7c7      	b.n	8009ea4 <_printf_common+0x58>
 8009f14:	2301      	movs	r3, #1
 8009f16:	4622      	mov	r2, r4
 8009f18:	4649      	mov	r1, r9
 8009f1a:	4638      	mov	r0, r7
 8009f1c:	47c0      	blx	r8
 8009f1e:	3001      	adds	r0, #1
 8009f20:	d0e6      	beq.n	8009ef0 <_printf_common+0xa4>
 8009f22:	3601      	adds	r6, #1
 8009f24:	e7d9      	b.n	8009eda <_printf_common+0x8e>
	...

08009f28 <_printf_i>:
 8009f28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f2c:	460c      	mov	r4, r1
 8009f2e:	4691      	mov	r9, r2
 8009f30:	7e27      	ldrb	r7, [r4, #24]
 8009f32:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009f34:	2f78      	cmp	r7, #120	; 0x78
 8009f36:	4680      	mov	r8, r0
 8009f38:	469a      	mov	sl, r3
 8009f3a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009f3e:	d807      	bhi.n	8009f50 <_printf_i+0x28>
 8009f40:	2f62      	cmp	r7, #98	; 0x62
 8009f42:	d80a      	bhi.n	8009f5a <_printf_i+0x32>
 8009f44:	2f00      	cmp	r7, #0
 8009f46:	f000 80d8 	beq.w	800a0fa <_printf_i+0x1d2>
 8009f4a:	2f58      	cmp	r7, #88	; 0x58
 8009f4c:	f000 80a3 	beq.w	800a096 <_printf_i+0x16e>
 8009f50:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009f54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009f58:	e03a      	b.n	8009fd0 <_printf_i+0xa8>
 8009f5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009f5e:	2b15      	cmp	r3, #21
 8009f60:	d8f6      	bhi.n	8009f50 <_printf_i+0x28>
 8009f62:	a001      	add	r0, pc, #4	; (adr r0, 8009f68 <_printf_i+0x40>)
 8009f64:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009f68:	08009fc1 	.word	0x08009fc1
 8009f6c:	08009fd5 	.word	0x08009fd5
 8009f70:	08009f51 	.word	0x08009f51
 8009f74:	08009f51 	.word	0x08009f51
 8009f78:	08009f51 	.word	0x08009f51
 8009f7c:	08009f51 	.word	0x08009f51
 8009f80:	08009fd5 	.word	0x08009fd5
 8009f84:	08009f51 	.word	0x08009f51
 8009f88:	08009f51 	.word	0x08009f51
 8009f8c:	08009f51 	.word	0x08009f51
 8009f90:	08009f51 	.word	0x08009f51
 8009f94:	0800a0e1 	.word	0x0800a0e1
 8009f98:	0800a005 	.word	0x0800a005
 8009f9c:	0800a0c3 	.word	0x0800a0c3
 8009fa0:	08009f51 	.word	0x08009f51
 8009fa4:	08009f51 	.word	0x08009f51
 8009fa8:	0800a103 	.word	0x0800a103
 8009fac:	08009f51 	.word	0x08009f51
 8009fb0:	0800a005 	.word	0x0800a005
 8009fb4:	08009f51 	.word	0x08009f51
 8009fb8:	08009f51 	.word	0x08009f51
 8009fbc:	0800a0cb 	.word	0x0800a0cb
 8009fc0:	680b      	ldr	r3, [r1, #0]
 8009fc2:	1d1a      	adds	r2, r3, #4
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	600a      	str	r2, [r1, #0]
 8009fc8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009fcc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	e0a3      	b.n	800a11c <_printf_i+0x1f4>
 8009fd4:	6825      	ldr	r5, [r4, #0]
 8009fd6:	6808      	ldr	r0, [r1, #0]
 8009fd8:	062e      	lsls	r6, r5, #24
 8009fda:	f100 0304 	add.w	r3, r0, #4
 8009fde:	d50a      	bpl.n	8009ff6 <_printf_i+0xce>
 8009fe0:	6805      	ldr	r5, [r0, #0]
 8009fe2:	600b      	str	r3, [r1, #0]
 8009fe4:	2d00      	cmp	r5, #0
 8009fe6:	da03      	bge.n	8009ff0 <_printf_i+0xc8>
 8009fe8:	232d      	movs	r3, #45	; 0x2d
 8009fea:	426d      	negs	r5, r5
 8009fec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ff0:	485e      	ldr	r0, [pc, #376]	; (800a16c <_printf_i+0x244>)
 8009ff2:	230a      	movs	r3, #10
 8009ff4:	e019      	b.n	800a02a <_printf_i+0x102>
 8009ff6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009ffa:	6805      	ldr	r5, [r0, #0]
 8009ffc:	600b      	str	r3, [r1, #0]
 8009ffe:	bf18      	it	ne
 800a000:	b22d      	sxthne	r5, r5
 800a002:	e7ef      	b.n	8009fe4 <_printf_i+0xbc>
 800a004:	680b      	ldr	r3, [r1, #0]
 800a006:	6825      	ldr	r5, [r4, #0]
 800a008:	1d18      	adds	r0, r3, #4
 800a00a:	6008      	str	r0, [r1, #0]
 800a00c:	0628      	lsls	r0, r5, #24
 800a00e:	d501      	bpl.n	800a014 <_printf_i+0xec>
 800a010:	681d      	ldr	r5, [r3, #0]
 800a012:	e002      	b.n	800a01a <_printf_i+0xf2>
 800a014:	0669      	lsls	r1, r5, #25
 800a016:	d5fb      	bpl.n	800a010 <_printf_i+0xe8>
 800a018:	881d      	ldrh	r5, [r3, #0]
 800a01a:	4854      	ldr	r0, [pc, #336]	; (800a16c <_printf_i+0x244>)
 800a01c:	2f6f      	cmp	r7, #111	; 0x6f
 800a01e:	bf0c      	ite	eq
 800a020:	2308      	moveq	r3, #8
 800a022:	230a      	movne	r3, #10
 800a024:	2100      	movs	r1, #0
 800a026:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a02a:	6866      	ldr	r6, [r4, #4]
 800a02c:	60a6      	str	r6, [r4, #8]
 800a02e:	2e00      	cmp	r6, #0
 800a030:	bfa2      	ittt	ge
 800a032:	6821      	ldrge	r1, [r4, #0]
 800a034:	f021 0104 	bicge.w	r1, r1, #4
 800a038:	6021      	strge	r1, [r4, #0]
 800a03a:	b90d      	cbnz	r5, 800a040 <_printf_i+0x118>
 800a03c:	2e00      	cmp	r6, #0
 800a03e:	d04d      	beq.n	800a0dc <_printf_i+0x1b4>
 800a040:	4616      	mov	r6, r2
 800a042:	fbb5 f1f3 	udiv	r1, r5, r3
 800a046:	fb03 5711 	mls	r7, r3, r1, r5
 800a04a:	5dc7      	ldrb	r7, [r0, r7]
 800a04c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a050:	462f      	mov	r7, r5
 800a052:	42bb      	cmp	r3, r7
 800a054:	460d      	mov	r5, r1
 800a056:	d9f4      	bls.n	800a042 <_printf_i+0x11a>
 800a058:	2b08      	cmp	r3, #8
 800a05a:	d10b      	bne.n	800a074 <_printf_i+0x14c>
 800a05c:	6823      	ldr	r3, [r4, #0]
 800a05e:	07df      	lsls	r7, r3, #31
 800a060:	d508      	bpl.n	800a074 <_printf_i+0x14c>
 800a062:	6923      	ldr	r3, [r4, #16]
 800a064:	6861      	ldr	r1, [r4, #4]
 800a066:	4299      	cmp	r1, r3
 800a068:	bfde      	ittt	le
 800a06a:	2330      	movle	r3, #48	; 0x30
 800a06c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a070:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a074:	1b92      	subs	r2, r2, r6
 800a076:	6122      	str	r2, [r4, #16]
 800a078:	f8cd a000 	str.w	sl, [sp]
 800a07c:	464b      	mov	r3, r9
 800a07e:	aa03      	add	r2, sp, #12
 800a080:	4621      	mov	r1, r4
 800a082:	4640      	mov	r0, r8
 800a084:	f7ff fee2 	bl	8009e4c <_printf_common>
 800a088:	3001      	adds	r0, #1
 800a08a:	d14c      	bne.n	800a126 <_printf_i+0x1fe>
 800a08c:	f04f 30ff 	mov.w	r0, #4294967295
 800a090:	b004      	add	sp, #16
 800a092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a096:	4835      	ldr	r0, [pc, #212]	; (800a16c <_printf_i+0x244>)
 800a098:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a09c:	6823      	ldr	r3, [r4, #0]
 800a09e:	680e      	ldr	r6, [r1, #0]
 800a0a0:	061f      	lsls	r7, r3, #24
 800a0a2:	f856 5b04 	ldr.w	r5, [r6], #4
 800a0a6:	600e      	str	r6, [r1, #0]
 800a0a8:	d514      	bpl.n	800a0d4 <_printf_i+0x1ac>
 800a0aa:	07d9      	lsls	r1, r3, #31
 800a0ac:	bf44      	itt	mi
 800a0ae:	f043 0320 	orrmi.w	r3, r3, #32
 800a0b2:	6023      	strmi	r3, [r4, #0]
 800a0b4:	b91d      	cbnz	r5, 800a0be <_printf_i+0x196>
 800a0b6:	6823      	ldr	r3, [r4, #0]
 800a0b8:	f023 0320 	bic.w	r3, r3, #32
 800a0bc:	6023      	str	r3, [r4, #0]
 800a0be:	2310      	movs	r3, #16
 800a0c0:	e7b0      	b.n	800a024 <_printf_i+0xfc>
 800a0c2:	6823      	ldr	r3, [r4, #0]
 800a0c4:	f043 0320 	orr.w	r3, r3, #32
 800a0c8:	6023      	str	r3, [r4, #0]
 800a0ca:	2378      	movs	r3, #120	; 0x78
 800a0cc:	4828      	ldr	r0, [pc, #160]	; (800a170 <_printf_i+0x248>)
 800a0ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a0d2:	e7e3      	b.n	800a09c <_printf_i+0x174>
 800a0d4:	065e      	lsls	r6, r3, #25
 800a0d6:	bf48      	it	mi
 800a0d8:	b2ad      	uxthmi	r5, r5
 800a0da:	e7e6      	b.n	800a0aa <_printf_i+0x182>
 800a0dc:	4616      	mov	r6, r2
 800a0de:	e7bb      	b.n	800a058 <_printf_i+0x130>
 800a0e0:	680b      	ldr	r3, [r1, #0]
 800a0e2:	6826      	ldr	r6, [r4, #0]
 800a0e4:	6960      	ldr	r0, [r4, #20]
 800a0e6:	1d1d      	adds	r5, r3, #4
 800a0e8:	600d      	str	r5, [r1, #0]
 800a0ea:	0635      	lsls	r5, r6, #24
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	d501      	bpl.n	800a0f4 <_printf_i+0x1cc>
 800a0f0:	6018      	str	r0, [r3, #0]
 800a0f2:	e002      	b.n	800a0fa <_printf_i+0x1d2>
 800a0f4:	0671      	lsls	r1, r6, #25
 800a0f6:	d5fb      	bpl.n	800a0f0 <_printf_i+0x1c8>
 800a0f8:	8018      	strh	r0, [r3, #0]
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	6123      	str	r3, [r4, #16]
 800a0fe:	4616      	mov	r6, r2
 800a100:	e7ba      	b.n	800a078 <_printf_i+0x150>
 800a102:	680b      	ldr	r3, [r1, #0]
 800a104:	1d1a      	adds	r2, r3, #4
 800a106:	600a      	str	r2, [r1, #0]
 800a108:	681e      	ldr	r6, [r3, #0]
 800a10a:	6862      	ldr	r2, [r4, #4]
 800a10c:	2100      	movs	r1, #0
 800a10e:	4630      	mov	r0, r6
 800a110:	f7f6 f85e 	bl	80001d0 <memchr>
 800a114:	b108      	cbz	r0, 800a11a <_printf_i+0x1f2>
 800a116:	1b80      	subs	r0, r0, r6
 800a118:	6060      	str	r0, [r4, #4]
 800a11a:	6863      	ldr	r3, [r4, #4]
 800a11c:	6123      	str	r3, [r4, #16]
 800a11e:	2300      	movs	r3, #0
 800a120:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a124:	e7a8      	b.n	800a078 <_printf_i+0x150>
 800a126:	6923      	ldr	r3, [r4, #16]
 800a128:	4632      	mov	r2, r6
 800a12a:	4649      	mov	r1, r9
 800a12c:	4640      	mov	r0, r8
 800a12e:	47d0      	blx	sl
 800a130:	3001      	adds	r0, #1
 800a132:	d0ab      	beq.n	800a08c <_printf_i+0x164>
 800a134:	6823      	ldr	r3, [r4, #0]
 800a136:	079b      	lsls	r3, r3, #30
 800a138:	d413      	bmi.n	800a162 <_printf_i+0x23a>
 800a13a:	68e0      	ldr	r0, [r4, #12]
 800a13c:	9b03      	ldr	r3, [sp, #12]
 800a13e:	4298      	cmp	r0, r3
 800a140:	bfb8      	it	lt
 800a142:	4618      	movlt	r0, r3
 800a144:	e7a4      	b.n	800a090 <_printf_i+0x168>
 800a146:	2301      	movs	r3, #1
 800a148:	4632      	mov	r2, r6
 800a14a:	4649      	mov	r1, r9
 800a14c:	4640      	mov	r0, r8
 800a14e:	47d0      	blx	sl
 800a150:	3001      	adds	r0, #1
 800a152:	d09b      	beq.n	800a08c <_printf_i+0x164>
 800a154:	3501      	adds	r5, #1
 800a156:	68e3      	ldr	r3, [r4, #12]
 800a158:	9903      	ldr	r1, [sp, #12]
 800a15a:	1a5b      	subs	r3, r3, r1
 800a15c:	42ab      	cmp	r3, r5
 800a15e:	dcf2      	bgt.n	800a146 <_printf_i+0x21e>
 800a160:	e7eb      	b.n	800a13a <_printf_i+0x212>
 800a162:	2500      	movs	r5, #0
 800a164:	f104 0619 	add.w	r6, r4, #25
 800a168:	e7f5      	b.n	800a156 <_printf_i+0x22e>
 800a16a:	bf00      	nop
 800a16c:	0800b899 	.word	0x0800b899
 800a170:	0800b8aa 	.word	0x0800b8aa

0800a174 <_realloc_r>:
 800a174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a176:	4607      	mov	r7, r0
 800a178:	4614      	mov	r4, r2
 800a17a:	460e      	mov	r6, r1
 800a17c:	b921      	cbnz	r1, 800a188 <_realloc_r+0x14>
 800a17e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a182:	4611      	mov	r1, r2
 800a184:	f7ff bbb6 	b.w	80098f4 <_malloc_r>
 800a188:	b922      	cbnz	r2, 800a194 <_realloc_r+0x20>
 800a18a:	f7ff fcb3 	bl	8009af4 <_free_r>
 800a18e:	4625      	mov	r5, r4
 800a190:	4628      	mov	r0, r5
 800a192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a194:	f000 f814 	bl	800a1c0 <_malloc_usable_size_r>
 800a198:	42a0      	cmp	r0, r4
 800a19a:	d20f      	bcs.n	800a1bc <_realloc_r+0x48>
 800a19c:	4621      	mov	r1, r4
 800a19e:	4638      	mov	r0, r7
 800a1a0:	f7ff fba8 	bl	80098f4 <_malloc_r>
 800a1a4:	4605      	mov	r5, r0
 800a1a6:	2800      	cmp	r0, #0
 800a1a8:	d0f2      	beq.n	800a190 <_realloc_r+0x1c>
 800a1aa:	4631      	mov	r1, r6
 800a1ac:	4622      	mov	r2, r4
 800a1ae:	f7ff fb71 	bl	8009894 <memcpy>
 800a1b2:	4631      	mov	r1, r6
 800a1b4:	4638      	mov	r0, r7
 800a1b6:	f7ff fc9d 	bl	8009af4 <_free_r>
 800a1ba:	e7e9      	b.n	800a190 <_realloc_r+0x1c>
 800a1bc:	4635      	mov	r5, r6
 800a1be:	e7e7      	b.n	800a190 <_realloc_r+0x1c>

0800a1c0 <_malloc_usable_size_r>:
 800a1c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1c4:	1f18      	subs	r0, r3, #4
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	bfbc      	itt	lt
 800a1ca:	580b      	ldrlt	r3, [r1, r0]
 800a1cc:	18c0      	addlt	r0, r0, r3
 800a1ce:	4770      	bx	lr

0800a1d0 <_init>:
 800a1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1d2:	bf00      	nop
 800a1d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1d6:	bc08      	pop	{r3}
 800a1d8:	469e      	mov	lr, r3
 800a1da:	4770      	bx	lr

0800a1dc <_fini>:
 800a1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1de:	bf00      	nop
 800a1e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1e2:	bc08      	pop	{r3}
 800a1e4:	469e      	mov	lr, r3
 800a1e6:	4770      	bx	lr
