
tester407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  0800798c  0800798c  0001798c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a94  08007a94  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007a94  08007a94  00017a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a9c  08007a9c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a9c  08007a9c  00017a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007aa0  08007aa0  00017aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007aa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          000043f8  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000446c  2000446c  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b45f  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034ea  00000000  00000000  0003b503  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001410  00000000  00000000  0003e9f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012f0  00000000  00000000  0003fe00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023412  00000000  00000000  000410f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018253  00000000  00000000  00064502  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d52fa  00000000  00000000  0007c755  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00151a4f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000056c4  00000000  00000000  00151aa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007974 	.word	0x08007974

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08007974 	.word	0x08007974

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	60b9      	str	r1, [r7, #8]
 80004d2:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	4a07      	ldr	r2, [pc, #28]	; (80004f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80004d8:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004da:	68bb      	ldr	r3, [r7, #8]
 80004dc:	4a06      	ldr	r2, [pc, #24]	; (80004f8 <vApplicationGetIdleTaskMemory+0x30>)
 80004de:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	2280      	movs	r2, #128	; 0x80
 80004e4:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 80004e6:	bf00      	nop
 80004e8:	3714      	adds	r7, #20
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	200002b8 	.word	0x200002b8
 80004f8:	2000036c 	.word	0x2000036c

080004fc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80004fc:	b5b0      	push	{r4, r5, r7, lr}
 80004fe:	b08e      	sub	sp, #56	; 0x38
 8000500:	af00      	add	r7, sp, #0
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of testTask */
  osThreadDef(testTask, TestTask, osPriorityNormal, 0, 256);
 8000502:	4b14      	ldr	r3, [pc, #80]	; (8000554 <MX_FREERTOS_Init+0x58>)
 8000504:	f107 041c 	add.w	r4, r7, #28
 8000508:	461d      	mov	r5, r3
 800050a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800050c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800050e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000512:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  testTaskHandle = osThreadCreate(osThread(testTask), NULL);
 8000516:	f107 031c 	add.w	r3, r7, #28
 800051a:	2100      	movs	r1, #0
 800051c:	4618      	mov	r0, r3
 800051e:	f005 fed8 	bl	80062d2 <osThreadCreate>
 8000522:	4603      	mov	r3, r0
 8000524:	4a0c      	ldr	r2, [pc, #48]	; (8000558 <MX_FREERTOS_Init+0x5c>)
 8000526:	6013      	str	r3, [r2, #0]

  /* definition and creation of lcdTask */
  osThreadDef(lcdTask, LCDTask, osPriorityNormal, 0, 256);
 8000528:	4b0c      	ldr	r3, [pc, #48]	; (800055c <MX_FREERTOS_Init+0x60>)
 800052a:	463c      	mov	r4, r7
 800052c:	461d      	mov	r5, r3
 800052e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000530:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000532:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000536:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  lcdTaskHandle = osThreadCreate(osThread(lcdTask), NULL);
 800053a:	463b      	mov	r3, r7
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f005 fec7 	bl	80062d2 <osThreadCreate>
 8000544:	4603      	mov	r3, r0
 8000546:	4a06      	ldr	r2, [pc, #24]	; (8000560 <MX_FREERTOS_Init+0x64>)
 8000548:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800054a:	bf00      	nop
 800054c:	3738      	adds	r7, #56	; 0x38
 800054e:	46bd      	mov	sp, r7
 8000550:	bdb0      	pop	{r4, r5, r7, pc}
 8000552:	bf00      	nop
 8000554:	080079a0 	.word	0x080079a0
 8000558:	200042e0 	.word	0x200042e0
 800055c:	080079bc 	.word	0x080079bc
 8000560:	200042d8 	.word	0x200042d8

08000564 <TestTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_TestTask */
void TestTask(void const * argument)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b09e      	sub	sp, #120	; 0x78
 8000568:	af02      	add	r7, sp, #8
 800056a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TestTask */

	//команды i2c
	uint16_t addr = 0x20;
 800056c:	2320      	movs	r3, #32
 800056e:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
	addr = addr<<1;
 8000572:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8000576:	005b      	lsls	r3, r3, #1
 8000578:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

	uint32_t timeOutUART = 50;
 800057c:	2332      	movs	r3, #50	; 0x32
 800057e:	667b      	str	r3, [r7, #100]	; 0x64
	uint32_t timeOutI2C = 3000;
 8000580:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000584:	663b      	str	r3, [r7, #96]	; 0x60

	uint8_t cmdStart_1[6] = { 0x55, 0xAA, 0x04, 0x07, 0x00, 0x0B };
 8000586:	4ac3      	ldr	r2, [pc, #780]	; (8000894 <TestTask+0x330>)
 8000588:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800058c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000590:	6018      	str	r0, [r3, #0]
 8000592:	3304      	adds	r3, #4
 8000594:	8019      	strh	r1, [r3, #0]
	uint8_t cmdRead_1[2] = { 0x00 };// 0x07 0x01
 8000596:	2300      	movs	r3, #0
 8000598:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54

	uint8_t cmdStart_2[6] = { 0x55, 0xAA, 0x04, 0x06, 0x00, 0x0A };
 800059c:	4abe      	ldr	r2, [pc, #760]	; (8000898 <TestTask+0x334>)
 800059e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80005a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005a6:	6018      	str	r0, [r3, #0]
 80005a8:	3304      	adds	r3, #4
 80005aa:	8019      	strh	r1, [r3, #0]
	uint8_t cmdRead_2[2] = { 0x00 };// 0x06 0x01
 80005ac:	2300      	movs	r3, #0
 80005ae:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

	uint8_t cmdStart_3[9] = { 0x55, 0xAA, 0x07, 0x10, 0x19, 0x00, 0x00, 0x00, 0x30 };
 80005b2:	4aba      	ldr	r2, [pc, #744]	; (800089c <TestTask+0x338>)
 80005b4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80005ba:	c303      	stmia	r3!, {r0, r1}
 80005bc:	701a      	strb	r2, [r3, #0]
	uint8_t cmdRead_3[2] = { 0x00 };// 0x10 0x01
 80005be:	2300      	movs	r3, #0
 80005c0:	873b      	strh	r3, [r7, #56]	; 0x38

	uint8_t cmdStart_4[7] = { 0x55, 0xAA, 0x05, 0x15, 0x01, 0x00, 0x1B };
 80005c2:	4ab7      	ldr	r2, [pc, #732]	; (80008a0 <TestTask+0x33c>)
 80005c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005cc:	6018      	str	r0, [r3, #0]
 80005ce:	3304      	adds	r3, #4
 80005d0:	8019      	strh	r1, [r3, #0]
 80005d2:	3302      	adds	r3, #2
 80005d4:	0c0a      	lsrs	r2, r1, #16
 80005d6:	701a      	strb	r2, [r3, #0]
	uint8_t cmdRead_4[2] = { 0x00 };// 0x15 0x01
 80005d8:	2300      	movs	r3, #0
 80005da:	85bb      	strh	r3, [r7, #44]	; 0x2c

	uint8_t cmdStop[7] = { 0x55, 0xAA, 0x05, 0x15, 0x00, 0x00, 0x1A };
 80005dc:	4ab1      	ldr	r2, [pc, #708]	; (80008a4 <TestTask+0x340>)
 80005de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005e6:	6018      	str	r0, [r3, #0]
 80005e8:	3304      	adds	r3, #4
 80005ea:	8019      	strh	r1, [r3, #0]
 80005ec:	3302      	adds	r3, #2
 80005ee:	0c0a      	lsrs	r2, r1, #16
 80005f0:	701a      	strb	r2, [r3, #0]
	uint8_t cmdRead_stop[2] = { 0x00 };// 0x15 0x01
 80005f2:	2300      	movs	r3, #0
 80005f4:	843b      	strh	r3, [r7, #32]

	uint8_t cmdRefresh[6] = { 0x55, 0xAA, 0x04, 0x16, 0x00, 0x1A };
 80005f6:	4aac      	ldr	r2, [pc, #688]	; (80008a8 <TestTask+0x344>)
 80005f8:	f107 0318 	add.w	r3, r7, #24
 80005fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000600:	6018      	str	r0, [r3, #0]
 8000602:	3304      	adds	r3, #4
 8000604:	8019      	strh	r1, [r3, #0]
	uint8_t cmdRead_Refresh[6] = { 0x00 };// 0x06 0x16 0x01 0x00 0x00 0x1D
 8000606:	2300      	movs	r3, #0
 8000608:	613b      	str	r3, [r7, #16]
 800060a:	2300      	movs	r3, #0
 800060c:	82bb      	strh	r3, [r7, #20]



	//команды uart
	uint8_t cmdASIC[7] = { 0x55, 0xAA, 0x52, 0x05, 0x00, 0x00, 0x0A };
 800060e:	4aa7      	ldr	r2, [pc, #668]	; (80008ac <TestTask+0x348>)
 8000610:	f107 0308 	add.w	r3, r7, #8
 8000614:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000618:	6018      	str	r0, [r3, #0]
 800061a:	3304      	adds	r3, #4
 800061c:	8019      	strh	r1, [r3, #0]
 800061e:	3302      	adds	r3, #2
 8000620:	0c0a      	lsrs	r2, r1, #16
 8000622:	701a      	strb	r2, [r3, #0]
	GPIO_PinState plug = 0;
 8000624:	2300      	movs	r3, #0
 8000626:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	HAL_GPIO_WritePin(RST_ASIC_GPIO_Port, RST_ASIC_Pin, GPIO_PIN_RESET);
 800062a:	2200      	movs	r2, #0
 800062c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000630:	489f      	ldr	r0, [pc, #636]	; (80008b0 <TestTask+0x34c>)
 8000632:	f001 f9f1 	bl	8001a18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A0_GPIO_Port, A0_Pin, GPIO_PIN_RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	2102      	movs	r1, #2
 800063a:	489e      	ldr	r0, [pc, #632]	; (80008b4 <TestTask+0x350>)
 800063c:	f001 f9ec 	bl	8001a18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, GPIO_PIN_RESET);
 8000640:	2200      	movs	r2, #0
 8000642:	2101      	movs	r1, #1
 8000644:	489b      	ldr	r0, [pc, #620]	; (80008b4 <TestTask+0x350>)
 8000646:	f001 f9e7 	bl	8001a18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, GPIO_PIN_RESET);
 800064a:	2200      	movs	r2, #0
 800064c:	2104      	movs	r1, #4
 800064e:	4899      	ldr	r0, [pc, #612]	; (80008b4 <TestTask+0x350>)
 8000650:	f001 f9e2 	bl	8001a18 <HAL_GPIO_WritePin>

	plug = HAL_GPIO_ReadPin(PLUG_GPIO_Port, PLUG_Pin);
 8000654:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000658:	4897      	ldr	r0, [pc, #604]	; (80008b8 <TestTask+0x354>)
 800065a:	f001 f9c5 	bl	80019e8 <HAL_GPIO_ReadPin>
 800065e:	4603      	mov	r3, r0
 8000660:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	/* Infinite loop */
	for (;;) {
		if (start) {
 8000664:	4b95      	ldr	r3, [pc, #596]	; (80008bc <TestTask+0x358>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d0fb      	beq.n	8000664 <TestTask+0x100>
			counter_bytes = 0;
 800066c:	4b94      	ldr	r3, [pc, #592]	; (80008c0 <TestTask+0x35c>)
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(RST_ASIC_GPIO_Port, RST_ASIC_Pin, GPIO_PIN_RESET);
 8000672:	2200      	movs	r2, #0
 8000674:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000678:	488d      	ldr	r0, [pc, #564]	; (80008b0 <TestTask+0x34c>)
 800067a:	f001 f9cd 	bl	8001a18 <HAL_GPIO_WritePin>
			osDelay(4);
 800067e:	2004      	movs	r0, #4
 8000680:	f005 fe73 	bl	800636a <osDelay>
			start = 0;
 8000684:	4b8d      	ldr	r3, [pc, #564]	; (80008bc <TestTask+0x358>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]

			status_i2c = HAL_I2C_Master_Transmit(&hi2c1, addr, cmdStart_1, 6, 20);
 800068a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800068e:	f8b7 106a 	ldrh.w	r1, [r7, #106]	; 0x6a
 8000692:	2314      	movs	r3, #20
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	2306      	movs	r3, #6
 8000698:	488a      	ldr	r0, [pc, #552]	; (80008c4 <TestTask+0x360>)
 800069a:	f001 fb1b 	bl	8001cd4 <HAL_I2C_Master_Transmit>
 800069e:	4603      	mov	r3, r0
 80006a0:	461a      	mov	r2, r3
 80006a2:	4b89      	ldr	r3, [pc, #548]	; (80008c8 <TestTask+0x364>)
 80006a4:	701a      	strb	r2, [r3, #0]
			osDelay(200);
 80006a6:	20c8      	movs	r0, #200	; 0xc8
 80006a8:	f005 fe5f 	bl	800636a <osDelay>
			status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_1[0], 1, 20);
 80006ac:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80006b0:	f8b7 106a 	ldrh.w	r1, [r7, #106]	; 0x6a
 80006b4:	2314      	movs	r3, #20
 80006b6:	9300      	str	r3, [sp, #0]
 80006b8:	2301      	movs	r3, #1
 80006ba:	4882      	ldr	r0, [pc, #520]	; (80008c4 <TestTask+0x360>)
 80006bc:	f001 fc08 	bl	8001ed0 <HAL_I2C_Master_Receive>
 80006c0:	4603      	mov	r3, r0
 80006c2:	461a      	mov	r2, r3
 80006c4:	4b80      	ldr	r3, [pc, #512]	; (80008c8 <TestTask+0x364>)
 80006c6:	701a      	strb	r2, [r3, #0]
			status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_1[1], 1, 20);
 80006c8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80006cc:	1c5a      	adds	r2, r3, #1
 80006ce:	f8b7 106a 	ldrh.w	r1, [r7, #106]	; 0x6a
 80006d2:	2314      	movs	r3, #20
 80006d4:	9300      	str	r3, [sp, #0]
 80006d6:	2301      	movs	r3, #1
 80006d8:	487a      	ldr	r0, [pc, #488]	; (80008c4 <TestTask+0x360>)
 80006da:	f001 fbf9 	bl	8001ed0 <HAL_I2C_Master_Receive>
 80006de:	4603      	mov	r3, r0
 80006e0:	461a      	mov	r2, r3
 80006e2:	4b79      	ldr	r3, [pc, #484]	; (80008c8 <TestTask+0x364>)
 80006e4:	701a      	strb	r2, [r3, #0]
			osDelay(300);
 80006e6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80006ea:	f005 fe3e 	bl	800636a <osDelay>

			status_i2c = HAL_I2C_Master_Transmit(&hi2c1, addr, cmdStart_2, 6, 20);
 80006ee:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80006f2:	f8b7 106a 	ldrh.w	r1, [r7, #106]	; 0x6a
 80006f6:	2314      	movs	r3, #20
 80006f8:	9300      	str	r3, [sp, #0]
 80006fa:	2306      	movs	r3, #6
 80006fc:	4871      	ldr	r0, [pc, #452]	; (80008c4 <TestTask+0x360>)
 80006fe:	f001 fae9 	bl	8001cd4 <HAL_I2C_Master_Transmit>
 8000702:	4603      	mov	r3, r0
 8000704:	461a      	mov	r2, r3
 8000706:	4b70      	ldr	r3, [pc, #448]	; (80008c8 <TestTask+0x364>)
 8000708:	701a      	strb	r2, [r3, #0]
			osDelay(200);
 800070a:	20c8      	movs	r0, #200	; 0xc8
 800070c:	f005 fe2d 	bl	800636a <osDelay>
			status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_2[0], 1, 20);
 8000710:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000714:	f8b7 106a 	ldrh.w	r1, [r7, #106]	; 0x6a
 8000718:	2314      	movs	r3, #20
 800071a:	9300      	str	r3, [sp, #0]
 800071c:	2301      	movs	r3, #1
 800071e:	4869      	ldr	r0, [pc, #420]	; (80008c4 <TestTask+0x360>)
 8000720:	f001 fbd6 	bl	8001ed0 <HAL_I2C_Master_Receive>
 8000724:	4603      	mov	r3, r0
 8000726:	461a      	mov	r2, r3
 8000728:	4b67      	ldr	r3, [pc, #412]	; (80008c8 <TestTask+0x364>)
 800072a:	701a      	strb	r2, [r3, #0]
			status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_2[1], 1, 20);
 800072c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000730:	1c5a      	adds	r2, r3, #1
 8000732:	f8b7 106a 	ldrh.w	r1, [r7, #106]	; 0x6a
 8000736:	2314      	movs	r3, #20
 8000738:	9300      	str	r3, [sp, #0]
 800073a:	2301      	movs	r3, #1
 800073c:	4861      	ldr	r0, [pc, #388]	; (80008c4 <TestTask+0x360>)
 800073e:	f001 fbc7 	bl	8001ed0 <HAL_I2C_Master_Receive>
 8000742:	4603      	mov	r3, r0
 8000744:	461a      	mov	r2, r3
 8000746:	4b60      	ldr	r3, [pc, #384]	; (80008c8 <TestTask+0x364>)
 8000748:	701a      	strb	r2, [r3, #0]
			osDelay(1000);
 800074a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800074e:	f005 fe0c 	bl	800636a <osDelay>

			status_i2c = HAL_I2C_Master_Transmit(&hi2c1, addr, cmdStart_3, 9, 20);
 8000752:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000756:	f8b7 106a 	ldrh.w	r1, [r7, #106]	; 0x6a
 800075a:	2314      	movs	r3, #20
 800075c:	9300      	str	r3, [sp, #0]
 800075e:	2309      	movs	r3, #9
 8000760:	4858      	ldr	r0, [pc, #352]	; (80008c4 <TestTask+0x360>)
 8000762:	f001 fab7 	bl	8001cd4 <HAL_I2C_Master_Transmit>
 8000766:	4603      	mov	r3, r0
 8000768:	461a      	mov	r2, r3
 800076a:	4b57      	ldr	r3, [pc, #348]	; (80008c8 <TestTask+0x364>)
 800076c:	701a      	strb	r2, [r3, #0]
			osDelay(100);
 800076e:	2064      	movs	r0, #100	; 0x64
 8000770:	f005 fdfb 	bl	800636a <osDelay>
			status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_3[0], 1, 20);
 8000774:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000778:	f8b7 106a 	ldrh.w	r1, [r7, #106]	; 0x6a
 800077c:	2314      	movs	r3, #20
 800077e:	9300      	str	r3, [sp, #0]
 8000780:	2301      	movs	r3, #1
 8000782:	4850      	ldr	r0, [pc, #320]	; (80008c4 <TestTask+0x360>)
 8000784:	f001 fba4 	bl	8001ed0 <HAL_I2C_Master_Receive>
 8000788:	4603      	mov	r3, r0
 800078a:	461a      	mov	r2, r3
 800078c:	4b4e      	ldr	r3, [pc, #312]	; (80008c8 <TestTask+0x364>)
 800078e:	701a      	strb	r2, [r3, #0]
			status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_3[1], 1, 20);
 8000790:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000794:	1c5a      	adds	r2, r3, #1
 8000796:	f8b7 106a 	ldrh.w	r1, [r7, #106]	; 0x6a
 800079a:	2314      	movs	r3, #20
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	2301      	movs	r3, #1
 80007a0:	4848      	ldr	r0, [pc, #288]	; (80008c4 <TestTask+0x360>)
 80007a2:	f001 fb95 	bl	8001ed0 <HAL_I2C_Master_Receive>
 80007a6:	4603      	mov	r3, r0
 80007a8:	461a      	mov	r2, r3
 80007aa:	4b47      	ldr	r3, [pc, #284]	; (80008c8 <TestTask+0x364>)
 80007ac:	701a      	strb	r2, [r3, #0]
			osDelay(1000);
 80007ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007b2:	f005 fdda 	bl	800636a <osDelay>

			status_i2c = HAL_I2C_Master_Transmit(&hi2c1, addr, cmdStart_4, 7, 20);
 80007b6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80007ba:	f8b7 106a 	ldrh.w	r1, [r7, #106]	; 0x6a
 80007be:	2314      	movs	r3, #20
 80007c0:	9300      	str	r3, [sp, #0]
 80007c2:	2307      	movs	r3, #7
 80007c4:	483f      	ldr	r0, [pc, #252]	; (80008c4 <TestTask+0x360>)
 80007c6:	f001 fa85 	bl	8001cd4 <HAL_I2C_Master_Transmit>
 80007ca:	4603      	mov	r3, r0
 80007cc:	461a      	mov	r2, r3
 80007ce:	4b3e      	ldr	r3, [pc, #248]	; (80008c8 <TestTask+0x364>)
 80007d0:	701a      	strb	r2, [r3, #0]
			osDelay(710);
 80007d2:	f240 20c6 	movw	r0, #710	; 0x2c6
 80007d6:	f005 fdc8 	bl	800636a <osDelay>
			status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_4[0], 1, 20);
 80007da:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80007de:	f8b7 106a 	ldrh.w	r1, [r7, #106]	; 0x6a
 80007e2:	2314      	movs	r3, #20
 80007e4:	9300      	str	r3, [sp, #0]
 80007e6:	2301      	movs	r3, #1
 80007e8:	4836      	ldr	r0, [pc, #216]	; (80008c4 <TestTask+0x360>)
 80007ea:	f001 fb71 	bl	8001ed0 <HAL_I2C_Master_Receive>
 80007ee:	4603      	mov	r3, r0
 80007f0:	461a      	mov	r2, r3
 80007f2:	4b35      	ldr	r3, [pc, #212]	; (80008c8 <TestTask+0x364>)
 80007f4:	701a      	strb	r2, [r3, #0]
			status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_4[1], 1, 20);
 80007f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007fa:	1c5a      	adds	r2, r3, #1
 80007fc:	f8b7 106a 	ldrh.w	r1, [r7, #106]	; 0x6a
 8000800:	2314      	movs	r3, #20
 8000802:	9300      	str	r3, [sp, #0]
 8000804:	2301      	movs	r3, #1
 8000806:	482f      	ldr	r0, [pc, #188]	; (80008c4 <TestTask+0x360>)
 8000808:	f001 fb62 	bl	8001ed0 <HAL_I2C_Master_Receive>
 800080c:	4603      	mov	r3, r0
 800080e:	461a      	mov	r2, r3
 8000810:	4b2d      	ldr	r3, [pc, #180]	; (80008c8 <TestTask+0x364>)
 8000812:	701a      	strb	r2, [r3, #0]

			//старт таймера для обновления пика
			status_i2cTIM = 1;
 8000814:	4b2d      	ldr	r3, [pc, #180]	; (80008cc <TestTask+0x368>)
 8000816:	2201      	movs	r2, #1
 8000818:	701a      	strb	r2, [r3, #0]

			osDelay(1000);
 800081a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800081e:	f005 fda4 	bl	800636a <osDelay>

			HAL_GPIO_WritePin(RST_ASIC_GPIO_Port, RST_ASIC_Pin, GPIO_PIN_SET);
 8000822:	2201      	movs	r2, #1
 8000824:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000828:	4821      	ldr	r0, [pc, #132]	; (80008b0 <TestTask+0x34c>)
 800082a:	f001 f8f5 	bl	8001a18 <HAL_GPIO_WritePin>
			osDelay(1200);
 800082e:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000832:	f005 fd9a 	bl	800636a <osDelay>


			//цикл опроса
			for (int var = 0; var < 100; ++var) {
 8000836:	2300      	movs	r3, #0
 8000838:	66fb      	str	r3, [r7, #108]	; 0x6c
 800083a:	e099      	b.n	8000970 <TestTask+0x40c>

				//сброс асиков
				HAL_GPIO_WritePin(RST_ASIC_GPIO_Port, RST_ASIC_Pin, GPIO_PIN_RESET);
 800083c:	2200      	movs	r2, #0
 800083e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000842:	481b      	ldr	r0, [pc, #108]	; (80008b0 <TestTask+0x34c>)
 8000844:	f001 f8e8 	bl	8001a18 <HAL_GPIO_WritePin>
				osDelay(500);
 8000848:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800084c:	f005 fd8d 	bl	800636a <osDelay>
				HAL_GPIO_WritePin(RST_ASIC_GPIO_Port, RST_ASIC_Pin, GPIO_PIN_SET);
 8000850:	2201      	movs	r2, #1
 8000852:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000856:	4816      	ldr	r0, [pc, #88]	; (80008b0 <TestTask+0x34c>)
 8000858:	f001 f8de 	bl	8001a18 <HAL_GPIO_WritePin>
				osDelay(500);
 800085c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000860:	f005 fd83 	bl	800636a <osDelay>

				status_uart = HAL_UART_Receive_IT(&huart6, readASIC, 1);
 8000864:	2201      	movs	r2, #1
 8000866:	491a      	ldr	r1, [pc, #104]	; (80008d0 <TestTask+0x36c>)
 8000868:	481a      	ldr	r0, [pc, #104]	; (80008d4 <TestTask+0x370>)
 800086a:	f004 fd88 	bl	800537e <HAL_UART_Receive_IT>
 800086e:	4603      	mov	r3, r0
 8000870:	461a      	mov	r2, r3
 8000872:	4b19      	ldr	r3, [pc, #100]	; (80008d8 <TestTask+0x374>)
 8000874:	701a      	strb	r2, [r3, #0]
				status_uart = HAL_UART_Transmit(&huart1, cmdASIC, 7, 20);
 8000876:	f107 0108 	add.w	r1, r7, #8
 800087a:	2314      	movs	r3, #20
 800087c:	2207      	movs	r2, #7
 800087e:	4817      	ldr	r0, [pc, #92]	; (80008dc <TestTask+0x378>)
 8000880:	f004 fceb 	bl	800525a <HAL_UART_Transmit>
 8000884:	4603      	mov	r3, r0
 8000886:	461a      	mov	r2, r3
 8000888:	4b13      	ldr	r3, [pc, #76]	; (80008d8 <TestTask+0x374>)
 800088a:	701a      	strb	r2, [r3, #0]

				//osDelay(150);
				//запускаем таймер
				status_uartTIM = 1;
 800088c:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <TestTask+0x37c>)
 800088e:	2201      	movs	r2, #1
 8000890:	701a      	strb	r2, [r3, #0]
				// ожидать таймаута по уарту
				while(uartTIM < timeOutUART){
 8000892:	e02a      	b.n	80008ea <TestTask+0x386>
 8000894:	080079d8 	.word	0x080079d8
 8000898:	080079e0 	.word	0x080079e0
 800089c:	080079e8 	.word	0x080079e8
 80008a0:	080079f4 	.word	0x080079f4
 80008a4:	080079fc 	.word	0x080079fc
 80008a8:	08007a04 	.word	0x08007a04
 80008ac:	08007a0c 	.word	0x08007a0c
 80008b0:	40020000 	.word	0x40020000
 80008b4:	40020c00 	.word	0x40020c00
 80008b8:	40020800 	.word	0x40020800
 80008bc:	200002b4 	.word	0x200002b4
 80008c0:	20000094 	.word	0x20000094
 80008c4:	20004338 	.word	0x20004338
 80008c8:	200042dc 	.word	0x200042dc
 80008cc:	20000578 	.word	0x20000578
 80008d0:	20000098 	.word	0x20000098
 80008d4:	20004418 	.word	0x20004418
 80008d8:	200042d4 	.word	0x200042d4
 80008dc:	200043d4 	.word	0x200043d4
 80008e0:	20000570 	.word	0x20000570
					osDelay(1);
 80008e4:	2001      	movs	r0, #1
 80008e6:	f005 fd40 	bl	800636a <osDelay>
				while(uartTIM < timeOutUART){
 80008ea:	4b3b      	ldr	r3, [pc, #236]	; (80009d8 <TestTask+0x474>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80008f0:	429a      	cmp	r2, r3
 80008f2:	d8f7      	bhi.n	80008e4 <TestTask+0x380>
				}
				// все данные пришли отключаем уарт
				HAL_UART_AbortReceive(&huart6);
 80008f4:	4839      	ldr	r0, [pc, #228]	; (80009dc <TestTask+0x478>)
 80008f6:	f004 fd72 	bl	80053de <HAL_UART_AbortReceive>

				//посчитать количесво асиков
				pre_count_ASIC = counter_bytes / 9;
 80008fa:	4b39      	ldr	r3, [pc, #228]	; (80009e0 <TestTask+0x47c>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	4a39      	ldr	r2, [pc, #228]	; (80009e4 <TestTask+0x480>)
 8000900:	fba2 2303 	umull	r2, r3, r2, r3
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	4a38      	ldr	r2, [pc, #224]	; (80009e8 <TestTask+0x484>)
 8000908:	6013      	str	r3, [r2, #0]
				counter_bytes = 0;
 800090a:	4b35      	ldr	r3, [pc, #212]	; (80009e0 <TestTask+0x47c>)
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
				memset(readASIC, 0, sizeof readASIC);
 8000910:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000914:	2100      	movs	r1, #0
 8000916:	4835      	ldr	r0, [pc, #212]	; (80009ec <TestTask+0x488>)
 8000918:	f006 ff5e 	bl	80077d8 <memset>

				//подать команду на пик что бы не отключил питание
				osDelay(200);
 800091c:	20c8      	movs	r0, #200	; 0xc8
 800091e:	f005 fd24 	bl	800636a <osDelay>

				// создать програмный таймер который будет обновлять пик и обновлять пик тут
				if (i2cTIM <= timeOutI2C) {
 8000922:	4b33      	ldr	r3, [pc, #204]	; (80009f0 <TestTask+0x48c>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000928:	429a      	cmp	r2, r3
 800092a:	d31e      	bcc.n	800096a <TestTask+0x406>
					//обновляем пик
					status_i2c = HAL_I2C_Master_Transmit(&hi2c1, addr, cmdRefresh, 6, 20);
 800092c:	f107 0218 	add.w	r2, r7, #24
 8000930:	f8b7 106a 	ldrh.w	r1, [r7, #106]	; 0x6a
 8000934:	2314      	movs	r3, #20
 8000936:	9300      	str	r3, [sp, #0]
 8000938:	2306      	movs	r3, #6
 800093a:	482e      	ldr	r0, [pc, #184]	; (80009f4 <TestTask+0x490>)
 800093c:	f001 f9ca 	bl	8001cd4 <HAL_I2C_Master_Transmit>
 8000940:	4603      	mov	r3, r0
 8000942:	461a      	mov	r2, r3
 8000944:	4b2c      	ldr	r3, [pc, #176]	; (80009f8 <TestTask+0x494>)
 8000946:	701a      	strb	r2, [r3, #0]
					osDelay(200);
 8000948:	20c8      	movs	r0, #200	; 0xc8
 800094a:	f005 fd0e 	bl	800636a <osDelay>
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, cmdRead_Refresh, 6, 20);
 800094e:	f107 0210 	add.w	r2, r7, #16
 8000952:	f8b7 106a 	ldrh.w	r1, [r7, #106]	; 0x6a
 8000956:	2314      	movs	r3, #20
 8000958:	9300      	str	r3, [sp, #0]
 800095a:	2306      	movs	r3, #6
 800095c:	4825      	ldr	r0, [pc, #148]	; (80009f4 <TestTask+0x490>)
 800095e:	f001 fab7 	bl	8001ed0 <HAL_I2C_Master_Receive>
 8000962:	4603      	mov	r3, r0
 8000964:	461a      	mov	r2, r3
 8000966:	4b24      	ldr	r3, [pc, #144]	; (80009f8 <TestTask+0x494>)
 8000968:	701a      	strb	r2, [r3, #0]
			for (int var = 0; var < 100; ++var) {
 800096a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800096c:	3301      	adds	r3, #1
 800096e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000972:	2b63      	cmp	r3, #99	; 0x63
 8000974:	f77f af62 	ble.w	800083c <TestTask+0x2d8>
				}
			}

			status_i2c = HAL_I2C_Master_Transmit(&hi2c1, addr, cmdStop, 7, 20);
 8000978:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800097c:	f8b7 106a 	ldrh.w	r1, [r7, #106]	; 0x6a
 8000980:	2314      	movs	r3, #20
 8000982:	9300      	str	r3, [sp, #0]
 8000984:	2307      	movs	r3, #7
 8000986:	481b      	ldr	r0, [pc, #108]	; (80009f4 <TestTask+0x490>)
 8000988:	f001 f9a4 	bl	8001cd4 <HAL_I2C_Master_Transmit>
 800098c:	4603      	mov	r3, r0
 800098e:	461a      	mov	r2, r3
 8000990:	4b19      	ldr	r3, [pc, #100]	; (80009f8 <TestTask+0x494>)
 8000992:	701a      	strb	r2, [r3, #0]
			osDelay(20);
 8000994:	2014      	movs	r0, #20
 8000996:	f005 fce8 	bl	800636a <osDelay>
			status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_stop[0], 1, 20);
 800099a:	f107 0220 	add.w	r2, r7, #32
 800099e:	f8b7 106a 	ldrh.w	r1, [r7, #106]	; 0x6a
 80009a2:	2314      	movs	r3, #20
 80009a4:	9300      	str	r3, [sp, #0]
 80009a6:	2301      	movs	r3, #1
 80009a8:	4812      	ldr	r0, [pc, #72]	; (80009f4 <TestTask+0x490>)
 80009aa:	f001 fa91 	bl	8001ed0 <HAL_I2C_Master_Receive>
 80009ae:	4603      	mov	r3, r0
 80009b0:	461a      	mov	r2, r3
 80009b2:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <TestTask+0x494>)
 80009b4:	701a      	strb	r2, [r3, #0]
			status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_stop[1], 1, 20);
 80009b6:	f107 0320 	add.w	r3, r7, #32
 80009ba:	1c5a      	adds	r2, r3, #1
 80009bc:	f8b7 106a 	ldrh.w	r1, [r7, #106]	; 0x6a
 80009c0:	2314      	movs	r3, #20
 80009c2:	9300      	str	r3, [sp, #0]
 80009c4:	2301      	movs	r3, #1
 80009c6:	480b      	ldr	r0, [pc, #44]	; (80009f4 <TestTask+0x490>)
 80009c8:	f001 fa82 	bl	8001ed0 <HAL_I2C_Master_Receive>
 80009cc:	4603      	mov	r3, r0
 80009ce:	461a      	mov	r2, r3
 80009d0:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <TestTask+0x494>)
 80009d2:	701a      	strb	r2, [r3, #0]
		if (start) {
 80009d4:	e646      	b.n	8000664 <TestTask+0x100>
 80009d6:	bf00      	nop
 80009d8:	2000056c 	.word	0x2000056c
 80009dc:	20004418 	.word	0x20004418
 80009e0:	20000094 	.word	0x20000094
 80009e4:	38e38e39 	.word	0x38e38e39
 80009e8:	20000090 	.word	0x20000090
 80009ec:	20000098 	.word	0x20000098
 80009f0:	20000574 	.word	0x20000574
 80009f4:	20004338 	.word	0x20004338
 80009f8:	200042dc 	.word	0x200042dc

080009fc <LCDTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_LCDTask */
void LCDTask(void const * argument)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
/* Infinite loop */
for (;;) {
	//if (condition) {
	//	status_i2c = HAL_I2C_Master_Transmit(&hi2c3, (addr <<1), &cmdStart_1[0], 1, 20);
	//}
	osDelay(1);
 8000a04:	2001      	movs	r0, #1
 8000a06:	f005 fcb0 	bl	800636a <osDelay>
 8000a0a:	e7fb      	b.n	8000a04 <LCDTask+0x8>

08000a0c <HAL_UART_RxCpltCallback>:
  /* USER CODE END LCDTask */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]

	status_uart = HAL_UART_Receive_IT(&huart6, &readASIC[counter_bytes], 1);
 8000a14:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <HAL_UART_RxCpltCallback+0x3c>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a0c      	ldr	r2, [pc, #48]	; (8000a4c <HAL_UART_RxCpltCallback+0x40>)
 8000a1a:	4413      	add	r3, r2
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	4619      	mov	r1, r3
 8000a20:	480b      	ldr	r0, [pc, #44]	; (8000a50 <HAL_UART_RxCpltCallback+0x44>)
 8000a22:	f004 fcac 	bl	800537e <HAL_UART_Receive_IT>
 8000a26:	4603      	mov	r3, r0
 8000a28:	461a      	mov	r2, r3
 8000a2a:	4b0a      	ldr	r3, [pc, #40]	; (8000a54 <HAL_UART_RxCpltCallback+0x48>)
 8000a2c:	701a      	strb	r2, [r3, #0]
	counter_bytes++;
 8000a2e:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <HAL_UART_RxCpltCallback+0x3c>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	3301      	adds	r3, #1
 8000a34:	4a04      	ldr	r2, [pc, #16]	; (8000a48 <HAL_UART_RxCpltCallback+0x3c>)
 8000a36:	6013      	str	r3, [r2, #0]
	uartTIM = 0; //сбрасываем таймер до тех пор пока не придут все данные
 8000a38:	4b07      	ldr	r3, [pc, #28]	; (8000a58 <HAL_UART_RxCpltCallback+0x4c>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20000094 	.word	0x20000094
 8000a4c:	20000098 	.word	0x20000098
 8000a50:	20004418 	.word	0x20004418
 8000a54:	200042d4 	.word	0x200042d4
 8000a58:	2000056c 	.word	0x2000056c

08000a5c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08a      	sub	sp, #40	; 0x28
 8000a60:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a62:	f107 0314 	add.w	r3, r7, #20
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	605a      	str	r2, [r3, #4]
 8000a6c:	609a      	str	r2, [r3, #8]
 8000a6e:	60da      	str	r2, [r3, #12]
 8000a70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	613b      	str	r3, [r7, #16]
 8000a76:	4b4b      	ldr	r3, [pc, #300]	; (8000ba4 <MX_GPIO_Init+0x148>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a4a      	ldr	r2, [pc, #296]	; (8000ba4 <MX_GPIO_Init+0x148>)
 8000a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b48      	ldr	r3, [pc, #288]	; (8000ba4 <MX_GPIO_Init+0x148>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a8a:	613b      	str	r3, [r7, #16]
 8000a8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	4b44      	ldr	r3, [pc, #272]	; (8000ba4 <MX_GPIO_Init+0x148>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a43      	ldr	r2, [pc, #268]	; (8000ba4 <MX_GPIO_Init+0x148>)
 8000a98:	f043 0304 	orr.w	r3, r3, #4
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b41      	ldr	r3, [pc, #260]	; (8000ba4 <MX_GPIO_Init+0x148>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0304 	and.w	r3, r3, #4
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60bb      	str	r3, [r7, #8]
 8000aae:	4b3d      	ldr	r3, [pc, #244]	; (8000ba4 <MX_GPIO_Init+0x148>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a3c      	ldr	r2, [pc, #240]	; (8000ba4 <MX_GPIO_Init+0x148>)
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b3a      	ldr	r3, [pc, #232]	; (8000ba4 <MX_GPIO_Init+0x148>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	60bb      	str	r3, [r7, #8]
 8000ac4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	4b36      	ldr	r3, [pc, #216]	; (8000ba4 <MX_GPIO_Init+0x148>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a35      	ldr	r2, [pc, #212]	; (8000ba4 <MX_GPIO_Init+0x148>)
 8000ad0:	f043 0308 	orr.w	r3, r3, #8
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b33      	ldr	r3, [pc, #204]	; (8000ba4 <MX_GPIO_Init+0x148>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0308 	and.w	r3, r3, #8
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	603b      	str	r3, [r7, #0]
 8000ae6:	4b2f      	ldr	r3, [pc, #188]	; (8000ba4 <MX_GPIO_Init+0x148>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a2e      	ldr	r2, [pc, #184]	; (8000ba4 <MX_GPIO_Init+0x148>)
 8000aec:	f043 0302 	orr.w	r3, r3, #2
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b2c      	ldr	r3, [pc, #176]	; (8000ba4 <MX_GPIO_Init+0x148>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0302 	and.w	r3, r3, #2
 8000afa:	603b      	str	r3, [r7, #0]
 8000afc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_ASIC_GPIO_Port, RST_ASIC_Pin, GPIO_PIN_SET);
 8000afe:	2201      	movs	r2, #1
 8000b00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b04:	4828      	ldr	r0, [pc, #160]	; (8000ba8 <MX_GPIO_Init+0x14c>)
 8000b06:	f000 ff87 	bl	8001a18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, A1_Pin|A0_Pin|A2_Pin, GPIO_PIN_SET);
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	2107      	movs	r1, #7
 8000b0e:	4827      	ldr	r0, [pc, #156]	; (8000bac <MX_GPIO_Init+0x150>)
 8000b10:	f000 ff82 	bl	8001a18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RST_ASIC_Pin;
 8000b14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b22:	2300      	movs	r3, #0
 8000b24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RST_ASIC_GPIO_Port, &GPIO_InitStruct);
 8000b26:	f107 0314 	add.w	r3, r7, #20
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	481e      	ldr	r0, [pc, #120]	; (8000ba8 <MX_GPIO_Init+0x14c>)
 8000b2e:	f000 fdbf 	bl	80016b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	4619      	mov	r1, r3
 8000b46:	4818      	ldr	r0, [pc, #96]	; (8000ba8 <MX_GPIO_Init+0x14c>)
 8000b48:	f000 fdb2 	bl	80016b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000b4c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000b50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b52:	2300      	movs	r3, #0
 8000b54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b56:	2301      	movs	r3, #1
 8000b58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b5a:	f107 0314 	add.w	r3, r7, #20
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4813      	ldr	r0, [pc, #76]	; (8000bb0 <MX_GPIO_Init+0x154>)
 8000b62:	f000 fda5 	bl	80016b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PLUG_Pin;
 8000b66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PLUG_GPIO_Port, &GPIO_InitStruct);
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	4619      	mov	r1, r3
 8000b7a:	480d      	ldr	r0, [pc, #52]	; (8000bb0 <MX_GPIO_Init+0x154>)
 8000b7c:	f000 fd98 	bl	80016b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = A1_Pin|A0_Pin|A2_Pin;
 8000b80:	2307      	movs	r3, #7
 8000b82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b84:	2301      	movs	r3, #1
 8000b86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	4619      	mov	r1, r3
 8000b96:	4805      	ldr	r0, [pc, #20]	; (8000bac <MX_GPIO_Init+0x150>)
 8000b98:	f000 fd8a 	bl	80016b0 <HAL_GPIO_Init>

}
 8000b9c:	bf00      	nop
 8000b9e:	3728      	adds	r7, #40	; 0x28
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40023800 	.word	0x40023800
 8000ba8:	40020000 	.word	0x40020000
 8000bac:	40020c00 	.word	0x40020c00
 8000bb0:	40020800 	.word	0x40020800

08000bb4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bb8:	4b13      	ldr	r3, [pc, #76]	; (8000c08 <MX_I2C1_Init+0x54>)
 8000bba:	4a14      	ldr	r2, [pc, #80]	; (8000c0c <MX_I2C1_Init+0x58>)
 8000bbc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 35000;
 8000bbe:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <MX_I2C1_Init+0x54>)
 8000bc0:	f648 02b8 	movw	r2, #35000	; 0x88b8
 8000bc4:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bc6:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <MX_I2C1_Init+0x54>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000bcc:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <MX_I2C1_Init+0x54>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bd2:	4b0d      	ldr	r3, [pc, #52]	; (8000c08 <MX_I2C1_Init+0x54>)
 8000bd4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bd8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bda:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <MX_I2C1_Init+0x54>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000be0:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <MX_I2C1_Init+0x54>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000be6:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <MX_I2C1_Init+0x54>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bec:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <MX_I2C1_Init+0x54>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bf2:	4805      	ldr	r0, [pc, #20]	; (8000c08 <MX_I2C1_Init+0x54>)
 8000bf4:	f000 ff2a 	bl	8001a4c <HAL_I2C_Init>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8000bfe:	f000 f995 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20004338 	.word	0x20004338
 8000c0c:	40005400 	.word	0x40005400

08000c10 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000c14:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <MX_I2C3_Init+0x50>)
 8000c16:	4a13      	ldr	r2, [pc, #76]	; (8000c64 <MX_I2C3_Init+0x54>)
 8000c18:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000c1a:	4b11      	ldr	r3, [pc, #68]	; (8000c60 <MX_I2C3_Init+0x50>)
 8000c1c:	4a12      	ldr	r2, [pc, #72]	; (8000c68 <MX_I2C3_Init+0x58>)
 8000c1e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c20:	4b0f      	ldr	r3, [pc, #60]	; (8000c60 <MX_I2C3_Init+0x50>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000c26:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <MX_I2C3_Init+0x50>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <MX_I2C3_Init+0x50>)
 8000c2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c32:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c34:	4b0a      	ldr	r3, [pc, #40]	; (8000c60 <MX_I2C3_Init+0x50>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000c3a:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <MX_I2C3_Init+0x50>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c40:	4b07      	ldr	r3, [pc, #28]	; (8000c60 <MX_I2C3_Init+0x50>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c46:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <MX_I2C3_Init+0x50>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000c4c:	4804      	ldr	r0, [pc, #16]	; (8000c60 <MX_I2C3_Init+0x50>)
 8000c4e:	f000 fefd 	bl	8001a4c <HAL_I2C_Init>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000c58:	f000 f968 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	200042e4 	.word	0x200042e4
 8000c64:	40005c00 	.word	0x40005c00
 8000c68:	000186a0 	.word	0x000186a0

08000c6c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08c      	sub	sp, #48	; 0x30
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c74:	f107 031c 	add.w	r3, r7, #28
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a4a      	ldr	r2, [pc, #296]	; (8000db4 <HAL_I2C_MspInit+0x148>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d12c      	bne.n	8000ce8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61bb      	str	r3, [r7, #24]
 8000c92:	4b49      	ldr	r3, [pc, #292]	; (8000db8 <HAL_I2C_MspInit+0x14c>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	4a48      	ldr	r2, [pc, #288]	; (8000db8 <HAL_I2C_MspInit+0x14c>)
 8000c98:	f043 0302 	orr.w	r3, r3, #2
 8000c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9e:	4b46      	ldr	r3, [pc, #280]	; (8000db8 <HAL_I2C_MspInit+0x14c>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	f003 0302 	and.w	r3, r3, #2
 8000ca6:	61bb      	str	r3, [r7, #24]
 8000ca8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000caa:	23c0      	movs	r3, #192	; 0xc0
 8000cac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cae:	2312      	movs	r3, #18
 8000cb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cba:	2304      	movs	r3, #4
 8000cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cbe:	f107 031c 	add.w	r3, r7, #28
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	483d      	ldr	r0, [pc, #244]	; (8000dbc <HAL_I2C_MspInit+0x150>)
 8000cc6:	f000 fcf3 	bl	80016b0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]
 8000cce:	4b3a      	ldr	r3, [pc, #232]	; (8000db8 <HAL_I2C_MspInit+0x14c>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd2:	4a39      	ldr	r2, [pc, #228]	; (8000db8 <HAL_I2C_MspInit+0x14c>)
 8000cd4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cda:	4b37      	ldr	r3, [pc, #220]	; (8000db8 <HAL_I2C_MspInit+0x14c>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ce2:	617b      	str	r3, [r7, #20]
 8000ce4:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000ce6:	e060      	b.n	8000daa <HAL_I2C_MspInit+0x13e>
  else if(i2cHandle->Instance==I2C3)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a34      	ldr	r2, [pc, #208]	; (8000dc0 <HAL_I2C_MspInit+0x154>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d15b      	bne.n	8000daa <HAL_I2C_MspInit+0x13e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	613b      	str	r3, [r7, #16]
 8000cf6:	4b30      	ldr	r3, [pc, #192]	; (8000db8 <HAL_I2C_MspInit+0x14c>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a2f      	ldr	r2, [pc, #188]	; (8000db8 <HAL_I2C_MspInit+0x14c>)
 8000cfc:	f043 0304 	orr.w	r3, r3, #4
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b2d      	ldr	r3, [pc, #180]	; (8000db8 <HAL_I2C_MspInit+0x14c>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0304 	and.w	r3, r3, #4
 8000d0a:	613b      	str	r3, [r7, #16]
 8000d0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	4b29      	ldr	r3, [pc, #164]	; (8000db8 <HAL_I2C_MspInit+0x14c>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	4a28      	ldr	r2, [pc, #160]	; (8000db8 <HAL_I2C_MspInit+0x14c>)
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1e:	4b26      	ldr	r3, [pc, #152]	; (8000db8 <HAL_I2C_MspInit+0x14c>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d30:	2312      	movs	r3, #18
 8000d32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000d3c:	2304      	movs	r3, #4
 8000d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d40:	f107 031c 	add.w	r3, r7, #28
 8000d44:	4619      	mov	r1, r3
 8000d46:	481f      	ldr	r0, [pc, #124]	; (8000dc4 <HAL_I2C_MspInit+0x158>)
 8000d48:	f000 fcb2 	bl	80016b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d52:	2312      	movs	r3, #18
 8000d54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000d5e:	2304      	movs	r3, #4
 8000d60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d62:	f107 031c 	add.w	r3, r7, #28
 8000d66:	4619      	mov	r1, r3
 8000d68:	4817      	ldr	r0, [pc, #92]	; (8000dc8 <HAL_I2C_MspInit+0x15c>)
 8000d6a:	f000 fca1 	bl	80016b0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60bb      	str	r3, [r7, #8]
 8000d72:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <HAL_I2C_MspInit+0x14c>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d76:	4a10      	ldr	r2, [pc, #64]	; (8000db8 <HAL_I2C_MspInit+0x14c>)
 8000d78:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d7e:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <HAL_I2C_MspInit+0x14c>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000d86:	60bb      	str	r3, [r7, #8]
 8000d88:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 5, 0);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2105      	movs	r1, #5
 8000d8e:	2048      	movs	r0, #72	; 0x48
 8000d90:	f000 fbb8 	bl	8001504 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8000d94:	2048      	movs	r0, #72	; 0x48
 8000d96:	f000 fbd1 	bl	800153c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 5, 0);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2105      	movs	r1, #5
 8000d9e:	2049      	movs	r0, #73	; 0x49
 8000da0:	f000 fbb0 	bl	8001504 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8000da4:	2049      	movs	r0, #73	; 0x49
 8000da6:	f000 fbc9 	bl	800153c <HAL_NVIC_EnableIRQ>
}
 8000daa:	bf00      	nop
 8000dac:	3730      	adds	r7, #48	; 0x30
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40005400 	.word	0x40005400
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	40020400 	.word	0x40020400
 8000dc0:	40005c00 	.word	0x40005c00
 8000dc4:	40020800 	.word	0x40020800
 8000dc8:	40020000 	.word	0x40020000

08000dcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dd0:	f000 fa9e 	bl	8001310 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dd4:	f000 f810 	bl	8000df8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dd8:	f7ff fe40 	bl	8000a5c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ddc:	f7ff feea 	bl	8000bb4 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000de0:	f7ff ff16 	bl	8000c10 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 8000de4:	f000 f988 	bl	80010f8 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000de8:	f000 f9b0 	bl	800114c <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000dec:	f7ff fb86 	bl	80004fc <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000df0:	f005 fa68 	bl	80062c4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <main+0x28>
	...

08000df8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b094      	sub	sp, #80	; 0x50
 8000dfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dfe:	f107 0320 	add.w	r3, r7, #32
 8000e02:	2230      	movs	r2, #48	; 0x30
 8000e04:	2100      	movs	r1, #0
 8000e06:	4618      	mov	r0, r3
 8000e08:	f006 fce6 	bl	80077d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e0c:	f107 030c 	add.w	r3, r7, #12
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	60bb      	str	r3, [r7, #8]
 8000e20:	4b28      	ldr	r3, [pc, #160]	; (8000ec4 <SystemClock_Config+0xcc>)
 8000e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e24:	4a27      	ldr	r2, [pc, #156]	; (8000ec4 <SystemClock_Config+0xcc>)
 8000e26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2c:	4b25      	ldr	r3, [pc, #148]	; (8000ec4 <SystemClock_Config+0xcc>)
 8000e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e34:	60bb      	str	r3, [r7, #8]
 8000e36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e38:	2300      	movs	r3, #0
 8000e3a:	607b      	str	r3, [r7, #4]
 8000e3c:	4b22      	ldr	r3, [pc, #136]	; (8000ec8 <SystemClock_Config+0xd0>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a21      	ldr	r2, [pc, #132]	; (8000ec8 <SystemClock_Config+0xd0>)
 8000e42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e46:	6013      	str	r3, [r2, #0]
 8000e48:	4b1f      	ldr	r3, [pc, #124]	; (8000ec8 <SystemClock_Config+0xd0>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e50:	607b      	str	r3, [r7, #4]
 8000e52:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e54:	2302      	movs	r3, #2
 8000e56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e5c:	2310      	movs	r3, #16
 8000e5e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e60:	2302      	movs	r3, #2
 8000e62:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e64:	2300      	movs	r3, #0
 8000e66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e68:	2308      	movs	r3, #8
 8000e6a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000e6c:	23a8      	movs	r3, #168	; 0xa8
 8000e6e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e70:	2302      	movs	r3, #2
 8000e72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e74:	2304      	movs	r3, #4
 8000e76:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e78:	f107 0320 	add.w	r3, r7, #32
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f003 fa4b 	bl	8004318 <HAL_RCC_OscConfig>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e88:	f000 f850 	bl	8000f2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e8c:	230f      	movs	r3, #15
 8000e8e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e90:	2302      	movs	r3, #2
 8000e92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e98:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e9c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ea2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ea4:	f107 030c 	add.w	r3, r7, #12
 8000ea8:	2105      	movs	r1, #5
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f003 fcac 	bl	8004808 <HAL_RCC_ClockConfig>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000eb6:	f000 f839 	bl	8000f2c <Error_Handler>
  }
}
 8000eba:	bf00      	nop
 8000ebc:	3750      	adds	r7, #80	; 0x50
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40007000 	.word	0x40007000

08000ecc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	  if (htim->Instance == TIM7) {
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a0f      	ldr	r2, [pc, #60]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d111      	bne.n	8000f02 <HAL_TIM_PeriodElapsedCallback+0x36>
	    if (status_uartTIM) {
 8000ede:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d004      	beq.n	8000ef0 <HAL_TIM_PeriodElapsedCallback+0x24>
	    	uartTIM++;
 8000ee6:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	3301      	adds	r3, #1
 8000eec:	4a0c      	ldr	r2, [pc, #48]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000eee:	6013      	str	r3, [r2, #0]
		}
	    if (status_i2cTIM) {
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d004      	beq.n	8000f02 <HAL_TIM_PeriodElapsedCallback+0x36>
	    	i2cTIM++;
 8000ef8:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	3301      	adds	r3, #1
 8000efe:	4a0a      	ldr	r2, [pc, #40]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000f00:	6013      	str	r3, [r2, #0]
		}
	  }

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a04      	ldr	r2, [pc, #16]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d101      	bne.n	8000f10 <HAL_TIM_PeriodElapsedCallback+0x44>
    HAL_IncTick();
 8000f0c:	f000 fa22 	bl	8001354 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f10:	bf00      	nop
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40001400 	.word	0x40001400
 8000f1c:	20000570 	.word	0x20000570
 8000f20:	2000056c 	.word	0x2000056c
 8000f24:	20000578 	.word	0x20000578
 8000f28:	20000574 	.word	0x20000574

08000f2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f30:	b672      	cpsid	i
}
 8000f32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f34:	e7fe      	b.n	8000f34 <Error_Handler+0x8>
	...

08000f38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	607b      	str	r3, [r7, #4]
 8000f42:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <HAL_MspInit+0x54>)
 8000f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f46:	4a11      	ldr	r2, [pc, #68]	; (8000f8c <HAL_MspInit+0x54>)
 8000f48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f4e:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <HAL_MspInit+0x54>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f56:	607b      	str	r3, [r7, #4]
 8000f58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	603b      	str	r3, [r7, #0]
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <HAL_MspInit+0x54>)
 8000f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f62:	4a0a      	ldr	r2, [pc, #40]	; (8000f8c <HAL_MspInit+0x54>)
 8000f64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f68:	6413      	str	r3, [r2, #64]	; 0x40
 8000f6a:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <HAL_MspInit+0x54>)
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f72:	603b      	str	r3, [r7, #0]
 8000f74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f76:	2200      	movs	r2, #0
 8000f78:	210f      	movs	r1, #15
 8000f7a:	f06f 0001 	mvn.w	r0, #1
 8000f7e:	f000 fac1 	bl	8001504 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40023800 	.word	0x40023800

08000f90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08c      	sub	sp, #48	; 0x30
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	6879      	ldr	r1, [r7, #4]
 8000fa4:	2037      	movs	r0, #55	; 0x37
 8000fa6:	f000 faad 	bl	8001504 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000faa:	2037      	movs	r0, #55	; 0x37
 8000fac:	f000 fac6 	bl	800153c <HAL_NVIC_EnableIRQ>

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	4b1f      	ldr	r3, [pc, #124]	; (8001034 <HAL_InitTick+0xa4>)
 8000fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb8:	4a1e      	ldr	r2, [pc, #120]	; (8001034 <HAL_InitTick+0xa4>)
 8000fba:	f043 0320 	orr.w	r3, r3, #32
 8000fbe:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc0:	4b1c      	ldr	r3, [pc, #112]	; (8001034 <HAL_InitTick+0xa4>)
 8000fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc4:	f003 0320 	and.w	r3, r3, #32
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fcc:	f107 0210 	add.w	r2, r7, #16
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	4611      	mov	r1, r2
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f003 fe12 	bl	8004c00 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000fdc:	f003 fde8 	bl	8004bb0 <HAL_RCC_GetPCLK1Freq>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fe8:	4a13      	ldr	r2, [pc, #76]	; (8001038 <HAL_InitTick+0xa8>)
 8000fea:	fba2 2303 	umull	r2, r3, r2, r3
 8000fee:	0c9b      	lsrs	r3, r3, #18
 8000ff0:	3b01      	subs	r3, #1
 8000ff2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000ff4:	4b11      	ldr	r3, [pc, #68]	; (800103c <HAL_InitTick+0xac>)
 8000ff6:	4a12      	ldr	r2, [pc, #72]	; (8001040 <HAL_InitTick+0xb0>)
 8000ff8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000ffa:	4b10      	ldr	r3, [pc, #64]	; (800103c <HAL_InitTick+0xac>)
 8000ffc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001000:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001002:	4a0e      	ldr	r2, [pc, #56]	; (800103c <HAL_InitTick+0xac>)
 8001004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001006:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001008:	4b0c      	ldr	r3, [pc, #48]	; (800103c <HAL_InitTick+0xac>)
 800100a:	2200      	movs	r2, #0
 800100c:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800100e:	4b0b      	ldr	r3, [pc, #44]	; (800103c <HAL_InitTick+0xac>)
 8001010:	2200      	movs	r2, #0
 8001012:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8001014:	4809      	ldr	r0, [pc, #36]	; (800103c <HAL_InitTick+0xac>)
 8001016:	f003 fe25 	bl	8004c64 <HAL_TIM_Base_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d104      	bne.n	800102a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8001020:	4806      	ldr	r0, [pc, #24]	; (800103c <HAL_InitTick+0xac>)
 8001022:	f003 fe79 	bl	8004d18 <HAL_TIM_Base_Start_IT>
 8001026:	4603      	mov	r3, r0
 8001028:	e000      	b.n	800102c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
}
 800102c:	4618      	mov	r0, r3
 800102e:	3730      	adds	r7, #48	; 0x30
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40023800 	.word	0x40023800
 8001038:	431bde83 	.word	0x431bde83
 800103c:	2000438c 	.word	0x2000438c
 8001040:	40001400 	.word	0x40001400

08001044 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001048:	e7fe      	b.n	8001048 <NMI_Handler+0x4>

0800104a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800104e:	e7fe      	b.n	800104e <HardFault_Handler+0x4>

08001050 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001054:	e7fe      	b.n	8001054 <MemManage_Handler+0x4>

08001056 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800105a:	e7fe      	b.n	800105a <BusFault_Handler+0x4>

0800105c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001060:	e7fe      	b.n	8001060 <UsageFault_Handler+0x4>

08001062 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001074:	4802      	ldr	r0, [pc, #8]	; (8001080 <USART1_IRQHandler+0x10>)
 8001076:	f004 fa55 	bl	8005524 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	200043d4 	.word	0x200043d4

08001084 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001088:	4802      	ldr	r0, [pc, #8]	; (8001094 <TIM7_IRQHandler+0x10>)
 800108a:	f003 feb5 	bl	8004df8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	2000438c 	.word	0x2000438c

08001098 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800109c:	4802      	ldr	r0, [pc, #8]	; (80010a8 <USART6_IRQHandler+0x10>)
 800109e:	f004 fa41 	bl	8005524 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20004418 	.word	0x20004418

080010ac <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 80010b0:	4802      	ldr	r0, [pc, #8]	; (80010bc <I2C3_EV_IRQHandler+0x10>)
 80010b2:	f001 f933 	bl	800231c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	200042e4 	.word	0x200042e4

080010c0 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 80010c4:	4802      	ldr	r0, [pc, #8]	; (80010d0 <I2C3_ER_IRQHandler+0x10>)
 80010c6:	f001 fa9a 	bl	80025fe <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	200042e4 	.word	0x200042e4

080010d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010d8:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <SystemInit+0x20>)
 80010da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010de:	4a05      	ldr	r2, [pc, #20]	; (80010f4 <SystemInit+0x20>)
 80010e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010e8:	bf00      	nop
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010fc:	4b11      	ldr	r3, [pc, #68]	; (8001144 <MX_USART1_UART_Init+0x4c>)
 80010fe:	4a12      	ldr	r2, [pc, #72]	; (8001148 <MX_USART1_UART_Init+0x50>)
 8001100:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001102:	4b10      	ldr	r3, [pc, #64]	; (8001144 <MX_USART1_UART_Init+0x4c>)
 8001104:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001108:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800110a:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <MX_USART1_UART_Init+0x4c>)
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001110:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <MX_USART1_UART_Init+0x4c>)
 8001112:	2200      	movs	r2, #0
 8001114:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001116:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <MX_USART1_UART_Init+0x4c>)
 8001118:	2200      	movs	r2, #0
 800111a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800111c:	4b09      	ldr	r3, [pc, #36]	; (8001144 <MX_USART1_UART_Init+0x4c>)
 800111e:	220c      	movs	r2, #12
 8001120:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001122:	4b08      	ldr	r3, [pc, #32]	; (8001144 <MX_USART1_UART_Init+0x4c>)
 8001124:	2200      	movs	r2, #0
 8001126:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001128:	4b06      	ldr	r3, [pc, #24]	; (8001144 <MX_USART1_UART_Init+0x4c>)
 800112a:	2200      	movs	r2, #0
 800112c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800112e:	4805      	ldr	r0, [pc, #20]	; (8001144 <MX_USART1_UART_Init+0x4c>)
 8001130:	f004 f846 	bl	80051c0 <HAL_UART_Init>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800113a:	f7ff fef7 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	200043d4 	.word	0x200043d4
 8001148:	40011000 	.word	0x40011000

0800114c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001150:	4b11      	ldr	r3, [pc, #68]	; (8001198 <MX_USART6_UART_Init+0x4c>)
 8001152:	4a12      	ldr	r2, [pc, #72]	; (800119c <MX_USART6_UART_Init+0x50>)
 8001154:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001156:	4b10      	ldr	r3, [pc, #64]	; (8001198 <MX_USART6_UART_Init+0x4c>)
 8001158:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800115c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800115e:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <MX_USART6_UART_Init+0x4c>)
 8001160:	2200      	movs	r2, #0
 8001162:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001164:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <MX_USART6_UART_Init+0x4c>)
 8001166:	2200      	movs	r2, #0
 8001168:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800116a:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <MX_USART6_UART_Init+0x4c>)
 800116c:	2200      	movs	r2, #0
 800116e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001170:	4b09      	ldr	r3, [pc, #36]	; (8001198 <MX_USART6_UART_Init+0x4c>)
 8001172:	220c      	movs	r2, #12
 8001174:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001176:	4b08      	ldr	r3, [pc, #32]	; (8001198 <MX_USART6_UART_Init+0x4c>)
 8001178:	2200      	movs	r2, #0
 800117a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <MX_USART6_UART_Init+0x4c>)
 800117e:	2200      	movs	r2, #0
 8001180:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001182:	4805      	ldr	r0, [pc, #20]	; (8001198 <MX_USART6_UART_Init+0x4c>)
 8001184:	f004 f81c 	bl	80051c0 <HAL_UART_Init>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800118e:	f7ff fecd 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20004418 	.word	0x20004418
 800119c:	40011400 	.word	0x40011400

080011a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08c      	sub	sp, #48	; 0x30
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a8:	f107 031c 	add.w	r3, r7, #28
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a3a      	ldr	r2, [pc, #232]	; (80012a8 <HAL_UART_MspInit+0x108>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d135      	bne.n	800122e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	61bb      	str	r3, [r7, #24]
 80011c6:	4b39      	ldr	r3, [pc, #228]	; (80012ac <HAL_UART_MspInit+0x10c>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	4a38      	ldr	r2, [pc, #224]	; (80012ac <HAL_UART_MspInit+0x10c>)
 80011cc:	f043 0310 	orr.w	r3, r3, #16
 80011d0:	6453      	str	r3, [r2, #68]	; 0x44
 80011d2:	4b36      	ldr	r3, [pc, #216]	; (80012ac <HAL_UART_MspInit+0x10c>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	f003 0310 	and.w	r3, r3, #16
 80011da:	61bb      	str	r3, [r7, #24]
 80011dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	617b      	str	r3, [r7, #20]
 80011e2:	4b32      	ldr	r3, [pc, #200]	; (80012ac <HAL_UART_MspInit+0x10c>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	4a31      	ldr	r2, [pc, #196]	; (80012ac <HAL_UART_MspInit+0x10c>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	6313      	str	r3, [r2, #48]	; 0x30
 80011ee:	4b2f      	ldr	r3, [pc, #188]	; (80012ac <HAL_UART_MspInit+0x10c>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	617b      	str	r3, [r7, #20]
 80011f8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80011fa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80011fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001200:	2302      	movs	r3, #2
 8001202:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001208:	2303      	movs	r3, #3
 800120a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800120c:	2307      	movs	r3, #7
 800120e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001210:	f107 031c 	add.w	r3, r7, #28
 8001214:	4619      	mov	r1, r3
 8001216:	4826      	ldr	r0, [pc, #152]	; (80012b0 <HAL_UART_MspInit+0x110>)
 8001218:	f000 fa4a 	bl	80016b0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800121c:	2200      	movs	r2, #0
 800121e:	2105      	movs	r1, #5
 8001220:	2025      	movs	r0, #37	; 0x25
 8001222:	f000 f96f 	bl	8001504 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001226:	2025      	movs	r0, #37	; 0x25
 8001228:	f000 f988 	bl	800153c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800122c:	e038      	b.n	80012a0 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART6)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a20      	ldr	r2, [pc, #128]	; (80012b4 <HAL_UART_MspInit+0x114>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d133      	bne.n	80012a0 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001238:	2300      	movs	r3, #0
 800123a:	613b      	str	r3, [r7, #16]
 800123c:	4b1b      	ldr	r3, [pc, #108]	; (80012ac <HAL_UART_MspInit+0x10c>)
 800123e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001240:	4a1a      	ldr	r2, [pc, #104]	; (80012ac <HAL_UART_MspInit+0x10c>)
 8001242:	f043 0320 	orr.w	r3, r3, #32
 8001246:	6453      	str	r3, [r2, #68]	; 0x44
 8001248:	4b18      	ldr	r3, [pc, #96]	; (80012ac <HAL_UART_MspInit+0x10c>)
 800124a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124c:	f003 0320 	and.w	r3, r3, #32
 8001250:	613b      	str	r3, [r7, #16]
 8001252:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001254:	2300      	movs	r3, #0
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	4b14      	ldr	r3, [pc, #80]	; (80012ac <HAL_UART_MspInit+0x10c>)
 800125a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125c:	4a13      	ldr	r2, [pc, #76]	; (80012ac <HAL_UART_MspInit+0x10c>)
 800125e:	f043 0304 	orr.w	r3, r3, #4
 8001262:	6313      	str	r3, [r2, #48]	; 0x30
 8001264:	4b11      	ldr	r3, [pc, #68]	; (80012ac <HAL_UART_MspInit+0x10c>)
 8001266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001268:	f003 0304 	and.w	r3, r3, #4
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001270:	23c0      	movs	r3, #192	; 0xc0
 8001272:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001274:	2302      	movs	r3, #2
 8001276:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127c:	2303      	movs	r3, #3
 800127e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001280:	2308      	movs	r3, #8
 8001282:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001284:	f107 031c 	add.w	r3, r7, #28
 8001288:	4619      	mov	r1, r3
 800128a:	480b      	ldr	r0, [pc, #44]	; (80012b8 <HAL_UART_MspInit+0x118>)
 800128c:	f000 fa10 	bl	80016b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8001290:	2200      	movs	r2, #0
 8001292:	2105      	movs	r1, #5
 8001294:	2047      	movs	r0, #71	; 0x47
 8001296:	f000 f935 	bl	8001504 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800129a:	2047      	movs	r0, #71	; 0x47
 800129c:	f000 f94e 	bl	800153c <HAL_NVIC_EnableIRQ>
}
 80012a0:	bf00      	nop
 80012a2:	3730      	adds	r7, #48	; 0x30
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40011000 	.word	0x40011000
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40020000 	.word	0x40020000
 80012b4:	40011400 	.word	0x40011400
 80012b8:	40020800 	.word	0x40020800

080012bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80012bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012c0:	480d      	ldr	r0, [pc, #52]	; (80012f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012c2:	490e      	ldr	r1, [pc, #56]	; (80012fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012c4:	4a0e      	ldr	r2, [pc, #56]	; (8001300 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012c8:	e002      	b.n	80012d0 <LoopCopyDataInit>

080012ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ce:	3304      	adds	r3, #4

080012d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012d4:	d3f9      	bcc.n	80012ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012d6:	4a0b      	ldr	r2, [pc, #44]	; (8001304 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012d8:	4c0b      	ldr	r4, [pc, #44]	; (8001308 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012dc:	e001      	b.n	80012e2 <LoopFillZerobss>

080012de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012e0:	3204      	adds	r2, #4

080012e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012e4:	d3fb      	bcc.n	80012de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80012e6:	f7ff fef5 	bl	80010d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ea:	f006 fa4f 	bl	800778c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ee:	f7ff fd6d 	bl	8000dcc <main>
  bx  lr    
 80012f2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80012f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012fc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001300:	08007aa4 	.word	0x08007aa4
  ldr r2, =_sbss
 8001304:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001308:	2000446c 	.word	0x2000446c

0800130c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800130c:	e7fe      	b.n	800130c <ADC_IRQHandler>
	...

08001310 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001314:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <HAL_Init+0x40>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a0d      	ldr	r2, [pc, #52]	; (8001350 <HAL_Init+0x40>)
 800131a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800131e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001320:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <HAL_Init+0x40>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a0a      	ldr	r2, [pc, #40]	; (8001350 <HAL_Init+0x40>)
 8001326:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800132a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800132c:	4b08      	ldr	r3, [pc, #32]	; (8001350 <HAL_Init+0x40>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a07      	ldr	r2, [pc, #28]	; (8001350 <HAL_Init+0x40>)
 8001332:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001336:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001338:	2003      	movs	r0, #3
 800133a:	f000 f8d8 	bl	80014ee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800133e:	200f      	movs	r0, #15
 8001340:	f7ff fe26 	bl	8000f90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001344:	f7ff fdf8 	bl	8000f38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40023c00 	.word	0x40023c00

08001354 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001358:	4b06      	ldr	r3, [pc, #24]	; (8001374 <HAL_IncTick+0x20>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	461a      	mov	r2, r3
 800135e:	4b06      	ldr	r3, [pc, #24]	; (8001378 <HAL_IncTick+0x24>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4413      	add	r3, r2
 8001364:	4a04      	ldr	r2, [pc, #16]	; (8001378 <HAL_IncTick+0x24>)
 8001366:	6013      	str	r3, [r2, #0]
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	20000008 	.word	0x20000008
 8001378:	2000445c 	.word	0x2000445c

0800137c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  return uwTick;
 8001380:	4b03      	ldr	r3, [pc, #12]	; (8001390 <HAL_GetTick+0x14>)
 8001382:	681b      	ldr	r3, [r3, #0]
}
 8001384:	4618      	mov	r0, r3
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	2000445c 	.word	0x2000445c

08001394 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013a4:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <__NVIC_SetPriorityGrouping+0x44>)
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013aa:	68ba      	ldr	r2, [r7, #8]
 80013ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013b0:	4013      	ands	r3, r2
 80013b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013c6:	4a04      	ldr	r2, [pc, #16]	; (80013d8 <__NVIC_SetPriorityGrouping+0x44>)
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	60d3      	str	r3, [r2, #12]
}
 80013cc:	bf00      	nop
 80013ce:	3714      	adds	r7, #20
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013e0:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <__NVIC_GetPriorityGrouping+0x18>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	0a1b      	lsrs	r3, r3, #8
 80013e6:	f003 0307 	and.w	r3, r3, #7
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	e000ed00 	.word	0xe000ed00

080013f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001406:	2b00      	cmp	r3, #0
 8001408:	db0b      	blt.n	8001422 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	f003 021f 	and.w	r2, r3, #31
 8001410:	4907      	ldr	r1, [pc, #28]	; (8001430 <__NVIC_EnableIRQ+0x38>)
 8001412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001416:	095b      	lsrs	r3, r3, #5
 8001418:	2001      	movs	r0, #1
 800141a:	fa00 f202 	lsl.w	r2, r0, r2
 800141e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	e000e100 	.word	0xe000e100

08001434 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	6039      	str	r1, [r7, #0]
 800143e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001444:	2b00      	cmp	r3, #0
 8001446:	db0a      	blt.n	800145e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	b2da      	uxtb	r2, r3
 800144c:	490c      	ldr	r1, [pc, #48]	; (8001480 <__NVIC_SetPriority+0x4c>)
 800144e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001452:	0112      	lsls	r2, r2, #4
 8001454:	b2d2      	uxtb	r2, r2
 8001456:	440b      	add	r3, r1
 8001458:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800145c:	e00a      	b.n	8001474 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	b2da      	uxtb	r2, r3
 8001462:	4908      	ldr	r1, [pc, #32]	; (8001484 <__NVIC_SetPriority+0x50>)
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	f003 030f 	and.w	r3, r3, #15
 800146a:	3b04      	subs	r3, #4
 800146c:	0112      	lsls	r2, r2, #4
 800146e:	b2d2      	uxtb	r2, r2
 8001470:	440b      	add	r3, r1
 8001472:	761a      	strb	r2, [r3, #24]
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	e000e100 	.word	0xe000e100
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001488:	b480      	push	{r7}
 800148a:	b089      	sub	sp, #36	; 0x24
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	f1c3 0307 	rsb	r3, r3, #7
 80014a2:	2b04      	cmp	r3, #4
 80014a4:	bf28      	it	cs
 80014a6:	2304      	movcs	r3, #4
 80014a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	3304      	adds	r3, #4
 80014ae:	2b06      	cmp	r3, #6
 80014b0:	d902      	bls.n	80014b8 <NVIC_EncodePriority+0x30>
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	3b03      	subs	r3, #3
 80014b6:	e000      	b.n	80014ba <NVIC_EncodePriority+0x32>
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014bc:	f04f 32ff 	mov.w	r2, #4294967295
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	43da      	mvns	r2, r3
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	401a      	ands	r2, r3
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014d0:	f04f 31ff 	mov.w	r1, #4294967295
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	fa01 f303 	lsl.w	r3, r1, r3
 80014da:	43d9      	mvns	r1, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e0:	4313      	orrs	r3, r2
         );
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3724      	adds	r7, #36	; 0x24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b082      	sub	sp, #8
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f7ff ff4c 	bl	8001394 <__NVIC_SetPriorityGrouping>
}
 80014fc:	bf00      	nop
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001504:	b580      	push	{r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
 8001510:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001512:	2300      	movs	r3, #0
 8001514:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001516:	f7ff ff61 	bl	80013dc <__NVIC_GetPriorityGrouping>
 800151a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	68b9      	ldr	r1, [r7, #8]
 8001520:	6978      	ldr	r0, [r7, #20]
 8001522:	f7ff ffb1 	bl	8001488 <NVIC_EncodePriority>
 8001526:	4602      	mov	r2, r0
 8001528:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800152c:	4611      	mov	r1, r2
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff ff80 	bl	8001434 <__NVIC_SetPriority>
}
 8001534:	bf00      	nop
 8001536:	3718      	adds	r7, #24
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff ff54 	bl	80013f8 <__NVIC_EnableIRQ>
}
 8001550:	bf00      	nop
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001564:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001566:	f7ff ff09 	bl	800137c <HAL_GetTick>
 800156a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001572:	b2db      	uxtb	r3, r3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d008      	beq.n	800158a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2280      	movs	r2, #128	; 0x80
 800157c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e052      	b.n	8001630 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f022 0216 	bic.w	r2, r2, #22
 8001598:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	695a      	ldr	r2, [r3, #20]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015a8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d103      	bne.n	80015ba <HAL_DMA_Abort+0x62>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d007      	beq.n	80015ca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f022 0208 	bic.w	r2, r2, #8
 80015c8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f022 0201 	bic.w	r2, r2, #1
 80015d8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015da:	e013      	b.n	8001604 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015dc:	f7ff fece 	bl	800137c <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b05      	cmp	r3, #5
 80015e8:	d90c      	bls.n	8001604 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2220      	movs	r2, #32
 80015ee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2203      	movs	r2, #3
 80015f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e015      	b.n	8001630 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1e4      	bne.n	80015dc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001616:	223f      	movs	r2, #63	; 0x3f
 8001618:	409a      	lsls	r2, r3
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2201      	movs	r2, #1
 8001622:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800162e:	2300      	movs	r3, #0
}
 8001630:	4618      	mov	r0, r3
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001646:	b2db      	uxtb	r3, r3
 8001648:	2b02      	cmp	r3, #2
 800164a:	d004      	beq.n	8001656 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2280      	movs	r2, #128	; 0x80
 8001650:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e00c      	b.n	8001670 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2205      	movs	r2, #5
 800165a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f022 0201 	bic.w	r2, r2, #1
 800166c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800166e:	2300      	movs	r3, #0
}
 8001670:	4618      	mov	r0, r3
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800168a:	b2db      	uxtb	r3, r3
}
 800168c:	4618      	mov	r0, r3
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b089      	sub	sp, #36	; 0x24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016ba:	2300      	movs	r3, #0
 80016bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016be:	2300      	movs	r3, #0
 80016c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016c2:	2300      	movs	r3, #0
 80016c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016c6:	2300      	movs	r3, #0
 80016c8:	61fb      	str	r3, [r7, #28]
 80016ca:	e16b      	b.n	80019a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016cc:	2201      	movs	r2, #1
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	697a      	ldr	r2, [r7, #20]
 80016dc:	4013      	ands	r3, r2
 80016de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	f040 815a 	bne.w	800199e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f003 0303 	and.w	r3, r3, #3
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d005      	beq.n	8001702 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d130      	bne.n	8001764 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	2203      	movs	r2, #3
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	43db      	mvns	r3, r3
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	4013      	ands	r3, r2
 8001718:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	68da      	ldr	r2, [r3, #12]
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	4313      	orrs	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001738:	2201      	movs	r2, #1
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	43db      	mvns	r3, r3
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	4013      	ands	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	091b      	lsrs	r3, r3, #4
 800174e:	f003 0201 	and.w	r2, r3, #1
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4313      	orrs	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f003 0303 	and.w	r3, r3, #3
 800176c:	2b03      	cmp	r3, #3
 800176e:	d017      	beq.n	80017a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	2203      	movs	r2, #3
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	43db      	mvns	r3, r3
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	4013      	ands	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	689a      	ldr	r2, [r3, #8]
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	4313      	orrs	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f003 0303 	and.w	r3, r3, #3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d123      	bne.n	80017f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	08da      	lsrs	r2, r3, #3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	3208      	adds	r2, #8
 80017b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	f003 0307 	and.w	r3, r3, #7
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	220f      	movs	r2, #15
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	43db      	mvns	r3, r3
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	4013      	ands	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	691a      	ldr	r2, [r3, #16]
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	08da      	lsrs	r2, r3, #3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	3208      	adds	r2, #8
 80017ee:	69b9      	ldr	r1, [r7, #24]
 80017f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	2203      	movs	r2, #3
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	43db      	mvns	r3, r3
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	4013      	ands	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f003 0203 	and.w	r2, r3, #3
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	4313      	orrs	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001830:	2b00      	cmp	r3, #0
 8001832:	f000 80b4 	beq.w	800199e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	60fb      	str	r3, [r7, #12]
 800183a:	4b60      	ldr	r3, [pc, #384]	; (80019bc <HAL_GPIO_Init+0x30c>)
 800183c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183e:	4a5f      	ldr	r2, [pc, #380]	; (80019bc <HAL_GPIO_Init+0x30c>)
 8001840:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001844:	6453      	str	r3, [r2, #68]	; 0x44
 8001846:	4b5d      	ldr	r3, [pc, #372]	; (80019bc <HAL_GPIO_Init+0x30c>)
 8001848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001852:	4a5b      	ldr	r2, [pc, #364]	; (80019c0 <HAL_GPIO_Init+0x310>)
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	089b      	lsrs	r3, r3, #2
 8001858:	3302      	adds	r3, #2
 800185a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800185e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	f003 0303 	and.w	r3, r3, #3
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	220f      	movs	r2, #15
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	43db      	mvns	r3, r3
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	4013      	ands	r3, r2
 8001874:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a52      	ldr	r2, [pc, #328]	; (80019c4 <HAL_GPIO_Init+0x314>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d02b      	beq.n	80018d6 <HAL_GPIO_Init+0x226>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a51      	ldr	r2, [pc, #324]	; (80019c8 <HAL_GPIO_Init+0x318>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d025      	beq.n	80018d2 <HAL_GPIO_Init+0x222>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a50      	ldr	r2, [pc, #320]	; (80019cc <HAL_GPIO_Init+0x31c>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d01f      	beq.n	80018ce <HAL_GPIO_Init+0x21e>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a4f      	ldr	r2, [pc, #316]	; (80019d0 <HAL_GPIO_Init+0x320>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d019      	beq.n	80018ca <HAL_GPIO_Init+0x21a>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a4e      	ldr	r2, [pc, #312]	; (80019d4 <HAL_GPIO_Init+0x324>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d013      	beq.n	80018c6 <HAL_GPIO_Init+0x216>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a4d      	ldr	r2, [pc, #308]	; (80019d8 <HAL_GPIO_Init+0x328>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d00d      	beq.n	80018c2 <HAL_GPIO_Init+0x212>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a4c      	ldr	r2, [pc, #304]	; (80019dc <HAL_GPIO_Init+0x32c>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d007      	beq.n	80018be <HAL_GPIO_Init+0x20e>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a4b      	ldr	r2, [pc, #300]	; (80019e0 <HAL_GPIO_Init+0x330>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d101      	bne.n	80018ba <HAL_GPIO_Init+0x20a>
 80018b6:	2307      	movs	r3, #7
 80018b8:	e00e      	b.n	80018d8 <HAL_GPIO_Init+0x228>
 80018ba:	2308      	movs	r3, #8
 80018bc:	e00c      	b.n	80018d8 <HAL_GPIO_Init+0x228>
 80018be:	2306      	movs	r3, #6
 80018c0:	e00a      	b.n	80018d8 <HAL_GPIO_Init+0x228>
 80018c2:	2305      	movs	r3, #5
 80018c4:	e008      	b.n	80018d8 <HAL_GPIO_Init+0x228>
 80018c6:	2304      	movs	r3, #4
 80018c8:	e006      	b.n	80018d8 <HAL_GPIO_Init+0x228>
 80018ca:	2303      	movs	r3, #3
 80018cc:	e004      	b.n	80018d8 <HAL_GPIO_Init+0x228>
 80018ce:	2302      	movs	r3, #2
 80018d0:	e002      	b.n	80018d8 <HAL_GPIO_Init+0x228>
 80018d2:	2301      	movs	r3, #1
 80018d4:	e000      	b.n	80018d8 <HAL_GPIO_Init+0x228>
 80018d6:	2300      	movs	r3, #0
 80018d8:	69fa      	ldr	r2, [r7, #28]
 80018da:	f002 0203 	and.w	r2, r2, #3
 80018de:	0092      	lsls	r2, r2, #2
 80018e0:	4093      	lsls	r3, r2
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018e8:	4935      	ldr	r1, [pc, #212]	; (80019c0 <HAL_GPIO_Init+0x310>)
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	089b      	lsrs	r3, r3, #2
 80018ee:	3302      	adds	r3, #2
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018f6:	4b3b      	ldr	r3, [pc, #236]	; (80019e4 <HAL_GPIO_Init+0x334>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	43db      	mvns	r3, r3
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	4013      	ands	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d003      	beq.n	800191a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	4313      	orrs	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800191a:	4a32      	ldr	r2, [pc, #200]	; (80019e4 <HAL_GPIO_Init+0x334>)
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001920:	4b30      	ldr	r3, [pc, #192]	; (80019e4 <HAL_GPIO_Init+0x334>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	43db      	mvns	r3, r3
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4013      	ands	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d003      	beq.n	8001944 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	4313      	orrs	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001944:	4a27      	ldr	r2, [pc, #156]	; (80019e4 <HAL_GPIO_Init+0x334>)
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800194a:	4b26      	ldr	r3, [pc, #152]	; (80019e4 <HAL_GPIO_Init+0x334>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	43db      	mvns	r3, r3
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	4013      	ands	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d003      	beq.n	800196e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	4313      	orrs	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800196e:	4a1d      	ldr	r2, [pc, #116]	; (80019e4 <HAL_GPIO_Init+0x334>)
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001974:	4b1b      	ldr	r3, [pc, #108]	; (80019e4 <HAL_GPIO_Init+0x334>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	43db      	mvns	r3, r3
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	4013      	ands	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d003      	beq.n	8001998 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	4313      	orrs	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001998:	4a12      	ldr	r2, [pc, #72]	; (80019e4 <HAL_GPIO_Init+0x334>)
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	3301      	adds	r3, #1
 80019a2:	61fb      	str	r3, [r7, #28]
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	2b0f      	cmp	r3, #15
 80019a8:	f67f ae90 	bls.w	80016cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019ac:	bf00      	nop
 80019ae:	bf00      	nop
 80019b0:	3724      	adds	r7, #36	; 0x24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	40023800 	.word	0x40023800
 80019c0:	40013800 	.word	0x40013800
 80019c4:	40020000 	.word	0x40020000
 80019c8:	40020400 	.word	0x40020400
 80019cc:	40020800 	.word	0x40020800
 80019d0:	40020c00 	.word	0x40020c00
 80019d4:	40021000 	.word	0x40021000
 80019d8:	40021400 	.word	0x40021400
 80019dc:	40021800 	.word	0x40021800
 80019e0:	40021c00 	.word	0x40021c00
 80019e4:	40013c00 	.word	0x40013c00

080019e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	460b      	mov	r3, r1
 80019f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	691a      	ldr	r2, [r3, #16]
 80019f8:	887b      	ldrh	r3, [r7, #2]
 80019fa:	4013      	ands	r3, r2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d002      	beq.n	8001a06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a00:	2301      	movs	r3, #1
 8001a02:	73fb      	strb	r3, [r7, #15]
 8001a04:	e001      	b.n	8001a0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a06:	2300      	movs	r3, #0
 8001a08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3714      	adds	r7, #20
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	460b      	mov	r3, r1
 8001a22:	807b      	strh	r3, [r7, #2]
 8001a24:	4613      	mov	r3, r2
 8001a26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a28:	787b      	ldrb	r3, [r7, #1]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d003      	beq.n	8001a36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a2e:	887a      	ldrh	r2, [r7, #2]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a34:	e003      	b.n	8001a3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a36:	887b      	ldrh	r3, [r7, #2]
 8001a38:	041a      	lsls	r2, r3, #16
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	619a      	str	r2, [r3, #24]
}
 8001a3e:	bf00      	nop
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
	...

08001a4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d101      	bne.n	8001a5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e12b      	b.n	8001cb6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d106      	bne.n	8001a78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f7ff f8fa 	bl	8000c6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2224      	movs	r2, #36	; 0x24
 8001a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f022 0201 	bic.w	r2, r2, #1
 8001a8e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a9e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001aae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ab0:	f003 f87e 	bl	8004bb0 <HAL_RCC_GetPCLK1Freq>
 8001ab4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	4a81      	ldr	r2, [pc, #516]	; (8001cc0 <HAL_I2C_Init+0x274>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d807      	bhi.n	8001ad0 <HAL_I2C_Init+0x84>
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	4a80      	ldr	r2, [pc, #512]	; (8001cc4 <HAL_I2C_Init+0x278>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	bf94      	ite	ls
 8001ac8:	2301      	movls	r3, #1
 8001aca:	2300      	movhi	r3, #0
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	e006      	b.n	8001ade <HAL_I2C_Init+0x92>
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	4a7d      	ldr	r2, [pc, #500]	; (8001cc8 <HAL_I2C_Init+0x27c>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	bf94      	ite	ls
 8001ad8:	2301      	movls	r3, #1
 8001ada:	2300      	movhi	r3, #0
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e0e7      	b.n	8001cb6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	4a78      	ldr	r2, [pc, #480]	; (8001ccc <HAL_I2C_Init+0x280>)
 8001aea:	fba2 2303 	umull	r2, r3, r2, r3
 8001aee:	0c9b      	lsrs	r3, r3, #18
 8001af0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	68ba      	ldr	r2, [r7, #8]
 8001b02:	430a      	orrs	r2, r1
 8001b04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	6a1b      	ldr	r3, [r3, #32]
 8001b0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	4a6a      	ldr	r2, [pc, #424]	; (8001cc0 <HAL_I2C_Init+0x274>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d802      	bhi.n	8001b20 <HAL_I2C_Init+0xd4>
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	e009      	b.n	8001b34 <HAL_I2C_Init+0xe8>
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b26:	fb02 f303 	mul.w	r3, r2, r3
 8001b2a:	4a69      	ldr	r2, [pc, #420]	; (8001cd0 <HAL_I2C_Init+0x284>)
 8001b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b30:	099b      	lsrs	r3, r3, #6
 8001b32:	3301      	adds	r3, #1
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	6812      	ldr	r2, [r2, #0]
 8001b38:	430b      	orrs	r3, r1
 8001b3a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	69db      	ldr	r3, [r3, #28]
 8001b42:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001b46:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	495c      	ldr	r1, [pc, #368]	; (8001cc0 <HAL_I2C_Init+0x274>)
 8001b50:	428b      	cmp	r3, r1
 8001b52:	d819      	bhi.n	8001b88 <HAL_I2C_Init+0x13c>
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	1e59      	subs	r1, r3, #1
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b62:	1c59      	adds	r1, r3, #1
 8001b64:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001b68:	400b      	ands	r3, r1
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d00a      	beq.n	8001b84 <HAL_I2C_Init+0x138>
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	1e59      	subs	r1, r3, #1
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b82:	e051      	b.n	8001c28 <HAL_I2C_Init+0x1dc>
 8001b84:	2304      	movs	r3, #4
 8001b86:	e04f      	b.n	8001c28 <HAL_I2C_Init+0x1dc>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d111      	bne.n	8001bb4 <HAL_I2C_Init+0x168>
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	1e58      	subs	r0, r3, #1
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6859      	ldr	r1, [r3, #4]
 8001b98:	460b      	mov	r3, r1
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	440b      	add	r3, r1
 8001b9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	bf0c      	ite	eq
 8001bac:	2301      	moveq	r3, #1
 8001bae:	2300      	movne	r3, #0
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	e012      	b.n	8001bda <HAL_I2C_Init+0x18e>
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	1e58      	subs	r0, r3, #1
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6859      	ldr	r1, [r3, #4]
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	440b      	add	r3, r1
 8001bc2:	0099      	lsls	r1, r3, #2
 8001bc4:	440b      	add	r3, r1
 8001bc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bca:	3301      	adds	r3, #1
 8001bcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	bf0c      	ite	eq
 8001bd4:	2301      	moveq	r3, #1
 8001bd6:	2300      	movne	r3, #0
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <HAL_I2C_Init+0x196>
 8001bde:	2301      	movs	r3, #1
 8001be0:	e022      	b.n	8001c28 <HAL_I2C_Init+0x1dc>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d10e      	bne.n	8001c08 <HAL_I2C_Init+0x1bc>
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	1e58      	subs	r0, r3, #1
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6859      	ldr	r1, [r3, #4]
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	440b      	add	r3, r1
 8001bf8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c06:	e00f      	b.n	8001c28 <HAL_I2C_Init+0x1dc>
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	1e58      	subs	r0, r3, #1
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6859      	ldr	r1, [r3, #4]
 8001c10:	460b      	mov	r3, r1
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	440b      	add	r3, r1
 8001c16:	0099      	lsls	r1, r3, #2
 8001c18:	440b      	add	r3, r1
 8001c1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c1e:	3301      	adds	r3, #1
 8001c20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c28:	6879      	ldr	r1, [r7, #4]
 8001c2a:	6809      	ldr	r1, [r1, #0]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	69da      	ldr	r2, [r3, #28]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a1b      	ldr	r3, [r3, #32]
 8001c42:	431a      	orrs	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	6911      	ldr	r1, [r2, #16]
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	68d2      	ldr	r2, [r2, #12]
 8001c62:	4311      	orrs	r1, r2
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	6812      	ldr	r2, [r2, #0]
 8001c68:	430b      	orrs	r3, r1
 8001c6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	695a      	ldr	r2, [r3, #20]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	430a      	orrs	r2, r1
 8001c86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f042 0201 	orr.w	r2, r2, #1
 8001c96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2220      	movs	r2, #32
 8001ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	000186a0 	.word	0x000186a0
 8001cc4:	001e847f 	.word	0x001e847f
 8001cc8:	003d08ff 	.word	0x003d08ff
 8001ccc:	431bde83 	.word	0x431bde83
 8001cd0:	10624dd3 	.word	0x10624dd3

08001cd4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b088      	sub	sp, #32
 8001cd8:	af02      	add	r7, sp, #8
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	607a      	str	r2, [r7, #4]
 8001cde:	461a      	mov	r2, r3
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	817b      	strh	r3, [r7, #10]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ce8:	f7ff fb48 	bl	800137c <HAL_GetTick>
 8001cec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b20      	cmp	r3, #32
 8001cf8:	f040 80e0 	bne.w	8001ebc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	9300      	str	r3, [sp, #0]
 8001d00:	2319      	movs	r3, #25
 8001d02:	2201      	movs	r2, #1
 8001d04:	4970      	ldr	r1, [pc, #448]	; (8001ec8 <HAL_I2C_Master_Transmit+0x1f4>)
 8001d06:	68f8      	ldr	r0, [r7, #12]
 8001d08:	f002 f8dc 	bl	8003ec4 <I2C_WaitOnFlagUntilTimeout>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001d12:	2302      	movs	r3, #2
 8001d14:	e0d3      	b.n	8001ebe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d101      	bne.n	8001d24 <HAL_I2C_Master_Transmit+0x50>
 8001d20:	2302      	movs	r3, #2
 8001d22:	e0cc      	b.n	8001ebe <HAL_I2C_Master_Transmit+0x1ea>
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d007      	beq.n	8001d4a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f042 0201 	orr.w	r2, r2, #1
 8001d48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d58:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2221      	movs	r2, #33	; 0x21
 8001d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2210      	movs	r2, #16
 8001d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	893a      	ldrh	r2, [r7, #8]
 8001d7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	4a50      	ldr	r2, [pc, #320]	; (8001ecc <HAL_I2C_Master_Transmit+0x1f8>)
 8001d8a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001d8c:	8979      	ldrh	r1, [r7, #10]
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	6a3a      	ldr	r2, [r7, #32]
 8001d92:	68f8      	ldr	r0, [r7, #12]
 8001d94:	f001 fe9e 	bl	8003ad4 <I2C_MasterRequestWrite>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e08d      	b.n	8001ebe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001da2:	2300      	movs	r3, #0
 8001da4:	613b      	str	r3, [r7, #16]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	695b      	ldr	r3, [r3, #20]
 8001dac:	613b      	str	r3, [r7, #16]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	699b      	ldr	r3, [r3, #24]
 8001db4:	613b      	str	r3, [r7, #16]
 8001db6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001db8:	e066      	b.n	8001e88 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dba:	697a      	ldr	r2, [r7, #20]
 8001dbc:	6a39      	ldr	r1, [r7, #32]
 8001dbe:	68f8      	ldr	r0, [r7, #12]
 8001dc0:	f002 f956 	bl	8004070 <I2C_WaitOnTXEFlagUntilTimeout>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d00d      	beq.n	8001de6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	2b04      	cmp	r3, #4
 8001dd0:	d107      	bne.n	8001de2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001de0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e06b      	b.n	8001ebe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dea:	781a      	ldrb	r2, [r3, #0]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df6:	1c5a      	adds	r2, r3, #1
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	3b01      	subs	r3, #1
 8001e04:	b29a      	uxth	r2, r3
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	b29a      	uxth	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	695b      	ldr	r3, [r3, #20]
 8001e1c:	f003 0304 	and.w	r3, r3, #4
 8001e20:	2b04      	cmp	r3, #4
 8001e22:	d11b      	bne.n	8001e5c <HAL_I2C_Master_Transmit+0x188>
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d017      	beq.n	8001e5c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e30:	781a      	ldrb	r2, [r3, #0]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3c:	1c5a      	adds	r2, r3, #1
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	b29a      	uxth	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e54:	3b01      	subs	r3, #1
 8001e56:	b29a      	uxth	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e5c:	697a      	ldr	r2, [r7, #20]
 8001e5e:	6a39      	ldr	r1, [r7, #32]
 8001e60:	68f8      	ldr	r0, [r7, #12]
 8001e62:	f002 f946 	bl	80040f2 <I2C_WaitOnBTFFlagUntilTimeout>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d00d      	beq.n	8001e88 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e70:	2b04      	cmp	r3, #4
 8001e72:	d107      	bne.n	8001e84 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e82:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e01a      	b.n	8001ebe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d194      	bne.n	8001dba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2220      	movs	r2, #32
 8001ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	e000      	b.n	8001ebe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001ebc:	2302      	movs	r3, #2
  }
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3718      	adds	r7, #24
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	00100002 	.word	0x00100002
 8001ecc:	ffff0000 	.word	0xffff0000

08001ed0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b08c      	sub	sp, #48	; 0x30
 8001ed4:	af02      	add	r7, sp, #8
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	607a      	str	r2, [r7, #4]
 8001eda:	461a      	mov	r2, r3
 8001edc:	460b      	mov	r3, r1
 8001ede:	817b      	strh	r3, [r7, #10]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ee4:	f7ff fa4a 	bl	800137c <HAL_GetTick>
 8001ee8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b20      	cmp	r3, #32
 8001ef4:	f040 820b 	bne.w	800230e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efa:	9300      	str	r3, [sp, #0]
 8001efc:	2319      	movs	r3, #25
 8001efe:	2201      	movs	r2, #1
 8001f00:	497c      	ldr	r1, [pc, #496]	; (80020f4 <HAL_I2C_Master_Receive+0x224>)
 8001f02:	68f8      	ldr	r0, [r7, #12]
 8001f04:	f001 ffde 	bl	8003ec4 <I2C_WaitOnFlagUntilTimeout>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001f0e:	2302      	movs	r3, #2
 8001f10:	e1fe      	b.n	8002310 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d101      	bne.n	8001f20 <HAL_I2C_Master_Receive+0x50>
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	e1f7      	b.n	8002310 <HAL_I2C_Master_Receive+0x440>
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d007      	beq.n	8001f46 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f042 0201 	orr.w	r2, r2, #1
 8001f44:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f54:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2222      	movs	r2, #34	; 0x22
 8001f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2210      	movs	r2, #16
 8001f62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	893a      	ldrh	r2, [r7, #8]
 8001f76:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	4a5c      	ldr	r2, [pc, #368]	; (80020f8 <HAL_I2C_Master_Receive+0x228>)
 8001f86:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001f88:	8979      	ldrh	r1, [r7, #10]
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f8e:	68f8      	ldr	r0, [r7, #12]
 8001f90:	f001 fe22 	bl	8003bd8 <I2C_MasterRequestRead>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e1b8      	b.n	8002310 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d113      	bne.n	8001fce <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	623b      	str	r3, [r7, #32]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	695b      	ldr	r3, [r3, #20]
 8001fb0:	623b      	str	r3, [r7, #32]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	623b      	str	r3, [r7, #32]
 8001fba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	e18c      	b.n	80022e8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d11b      	bne.n	800200e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fe4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	61fb      	str	r3, [r7, #28]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	695b      	ldr	r3, [r3, #20]
 8001ff0:	61fb      	str	r3, [r7, #28]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	61fb      	str	r3, [r7, #28]
 8001ffa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	e16c      	b.n	80022e8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002012:	2b02      	cmp	r3, #2
 8002014:	d11b      	bne.n	800204e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002024:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002034:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002036:	2300      	movs	r3, #0
 8002038:	61bb      	str	r3, [r7, #24]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	695b      	ldr	r3, [r3, #20]
 8002040:	61bb      	str	r3, [r7, #24]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	61bb      	str	r3, [r7, #24]
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	e14c      	b.n	80022e8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800205c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800205e:	2300      	movs	r3, #0
 8002060:	617b      	str	r3, [r7, #20]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	695b      	ldr	r3, [r3, #20]
 8002068:	617b      	str	r3, [r7, #20]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	617b      	str	r3, [r7, #20]
 8002072:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002074:	e138      	b.n	80022e8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800207a:	2b03      	cmp	r3, #3
 800207c:	f200 80f1 	bhi.w	8002262 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002084:	2b01      	cmp	r3, #1
 8002086:	d123      	bne.n	80020d0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800208a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800208c:	68f8      	ldr	r0, [r7, #12]
 800208e:	f002 f8a3 	bl	80041d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e139      	b.n	8002310 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	691a      	ldr	r2, [r3, #16]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a6:	b2d2      	uxtb	r2, r2
 80020a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ae:	1c5a      	adds	r2, r3, #1
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020b8:	3b01      	subs	r3, #1
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	3b01      	subs	r3, #1
 80020c8:	b29a      	uxth	r2, r3
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80020ce:	e10b      	b.n	80022e8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d14e      	bne.n	8002176 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020da:	9300      	str	r3, [sp, #0]
 80020dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020de:	2200      	movs	r2, #0
 80020e0:	4906      	ldr	r1, [pc, #24]	; (80020fc <HAL_I2C_Master_Receive+0x22c>)
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	f001 feee 	bl	8003ec4 <I2C_WaitOnFlagUntilTimeout>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d008      	beq.n	8002100 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e10e      	b.n	8002310 <HAL_I2C_Master_Receive+0x440>
 80020f2:	bf00      	nop
 80020f4:	00100002 	.word	0x00100002
 80020f8:	ffff0000 	.word	0xffff0000
 80020fc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800210e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	691a      	ldr	r2, [r3, #16]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211a:	b2d2      	uxtb	r2, r2
 800211c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002122:	1c5a      	adds	r2, r3, #1
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800212c:	3b01      	subs	r3, #1
 800212e:	b29a      	uxth	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002138:	b29b      	uxth	r3, r3
 800213a:	3b01      	subs	r3, #1
 800213c:	b29a      	uxth	r2, r3
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	691a      	ldr	r2, [r3, #16]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214c:	b2d2      	uxtb	r2, r2
 800214e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002154:	1c5a      	adds	r2, r3, #1
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800215e:	3b01      	subs	r3, #1
 8002160:	b29a      	uxth	r2, r3
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800216a:	b29b      	uxth	r3, r3
 800216c:	3b01      	subs	r3, #1
 800216e:	b29a      	uxth	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002174:	e0b8      	b.n	80022e8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002178:	9300      	str	r3, [sp, #0]
 800217a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800217c:	2200      	movs	r2, #0
 800217e:	4966      	ldr	r1, [pc, #408]	; (8002318 <HAL_I2C_Master_Receive+0x448>)
 8002180:	68f8      	ldr	r0, [r7, #12]
 8002182:	f001 fe9f 	bl	8003ec4 <I2C_WaitOnFlagUntilTimeout>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e0bf      	b.n	8002310 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800219e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	691a      	ldr	r2, [r3, #16]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021aa:	b2d2      	uxtb	r2, r2
 80021ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b2:	1c5a      	adds	r2, r3, #1
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021bc:	3b01      	subs	r3, #1
 80021be:	b29a      	uxth	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	3b01      	subs	r3, #1
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d4:	9300      	str	r3, [sp, #0]
 80021d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d8:	2200      	movs	r2, #0
 80021da:	494f      	ldr	r1, [pc, #316]	; (8002318 <HAL_I2C_Master_Receive+0x448>)
 80021dc:	68f8      	ldr	r0, [r7, #12]
 80021de:	f001 fe71 	bl	8003ec4 <I2C_WaitOnFlagUntilTimeout>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e091      	b.n	8002310 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	691a      	ldr	r2, [r3, #16]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002206:	b2d2      	uxtb	r2, r2
 8002208:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220e:	1c5a      	adds	r2, r3, #1
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002218:	3b01      	subs	r3, #1
 800221a:	b29a      	uxth	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002224:	b29b      	uxth	r3, r3
 8002226:	3b01      	subs	r3, #1
 8002228:	b29a      	uxth	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	691a      	ldr	r2, [r3, #16]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002238:	b2d2      	uxtb	r2, r2
 800223a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002240:	1c5a      	adds	r2, r3, #1
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800224a:	3b01      	subs	r3, #1
 800224c:	b29a      	uxth	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002256:	b29b      	uxth	r3, r3
 8002258:	3b01      	subs	r3, #1
 800225a:	b29a      	uxth	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002260:	e042      	b.n	80022e8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002264:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	f001 ffb6 	bl	80041d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e04c      	b.n	8002310 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	691a      	ldr	r2, [r3, #16]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002280:	b2d2      	uxtb	r2, r2
 8002282:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002288:	1c5a      	adds	r2, r3, #1
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002292:	3b01      	subs	r3, #1
 8002294:	b29a      	uxth	r2, r3
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800229e:	b29b      	uxth	r3, r3
 80022a0:	3b01      	subs	r3, #1
 80022a2:	b29a      	uxth	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	f003 0304 	and.w	r3, r3, #4
 80022b2:	2b04      	cmp	r3, #4
 80022b4:	d118      	bne.n	80022e8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	691a      	ldr	r2, [r3, #16]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c0:	b2d2      	uxtb	r2, r2
 80022c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c8:	1c5a      	adds	r2, r3, #1
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d2:	3b01      	subs	r3, #1
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022de:	b29b      	uxth	r3, r3
 80022e0:	3b01      	subs	r3, #1
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	f47f aec2 	bne.w	8002076 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2220      	movs	r2, #32
 80022f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800230a:	2300      	movs	r3, #0
 800230c:	e000      	b.n	8002310 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800230e:	2302      	movs	r3, #2
  }
}
 8002310:	4618      	mov	r0, r3
 8002312:	3728      	adds	r7, #40	; 0x28
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	00010004 	.word	0x00010004

0800231c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b088      	sub	sp, #32
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002324:	2300      	movs	r3, #0
 8002326:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002334:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800233c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002344:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002346:	7bfb      	ldrb	r3, [r7, #15]
 8002348:	2b10      	cmp	r3, #16
 800234a:	d003      	beq.n	8002354 <HAL_I2C_EV_IRQHandler+0x38>
 800234c:	7bfb      	ldrb	r3, [r7, #15]
 800234e:	2b40      	cmp	r3, #64	; 0x40
 8002350:	f040 80c1 	bne.w	80024d6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	2b00      	cmp	r3, #0
 800236c:	d10d      	bne.n	800238a <HAL_I2C_EV_IRQHandler+0x6e>
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002374:	d003      	beq.n	800237e <HAL_I2C_EV_IRQHandler+0x62>
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800237c:	d101      	bne.n	8002382 <HAL_I2C_EV_IRQHandler+0x66>
 800237e:	2301      	movs	r3, #1
 8002380:	e000      	b.n	8002384 <HAL_I2C_EV_IRQHandler+0x68>
 8002382:	2300      	movs	r3, #0
 8002384:	2b01      	cmp	r3, #1
 8002386:	f000 8132 	beq.w	80025ee <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	f003 0301 	and.w	r3, r3, #1
 8002390:	2b00      	cmp	r3, #0
 8002392:	d00c      	beq.n	80023ae <HAL_I2C_EV_IRQHandler+0x92>
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	0a5b      	lsrs	r3, r3, #9
 8002398:	f003 0301 	and.w	r3, r3, #1
 800239c:	2b00      	cmp	r3, #0
 800239e:	d006      	beq.n	80023ae <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f001 ff9e 	bl	80042e2 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 fd79 	bl	8002e9e <I2C_Master_SB>
 80023ac:	e092      	b.n	80024d4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	08db      	lsrs	r3, r3, #3
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d009      	beq.n	80023ce <HAL_I2C_EV_IRQHandler+0xb2>
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	0a5b      	lsrs	r3, r3, #9
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 fdef 	bl	8002faa <I2C_Master_ADD10>
 80023cc:	e082      	b.n	80024d4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	085b      	lsrs	r3, r3, #1
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d009      	beq.n	80023ee <HAL_I2C_EV_IRQHandler+0xd2>
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	0a5b      	lsrs	r3, r3, #9
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d003      	beq.n	80023ee <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 fe09 	bl	8002ffe <I2C_Master_ADDR>
 80023ec:	e072      	b.n	80024d4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	089b      	lsrs	r3, r3, #2
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d03b      	beq.n	8002472 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002404:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002408:	f000 80f3 	beq.w	80025f2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	09db      	lsrs	r3, r3, #7
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	2b00      	cmp	r3, #0
 8002416:	d00f      	beq.n	8002438 <HAL_I2C_EV_IRQHandler+0x11c>
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	0a9b      	lsrs	r3, r3, #10
 800241c:	f003 0301 	and.w	r3, r3, #1
 8002420:	2b00      	cmp	r3, #0
 8002422:	d009      	beq.n	8002438 <HAL_I2C_EV_IRQHandler+0x11c>
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	089b      	lsrs	r3, r3, #2
 8002428:	f003 0301 	and.w	r3, r3, #1
 800242c:	2b00      	cmp	r3, #0
 800242e:	d103      	bne.n	8002438 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f000 f9f3 	bl	800281c <I2C_MasterTransmit_TXE>
 8002436:	e04d      	b.n	80024d4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	089b      	lsrs	r3, r3, #2
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	2b00      	cmp	r3, #0
 8002442:	f000 80d6 	beq.w	80025f2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	0a5b      	lsrs	r3, r3, #9
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	2b00      	cmp	r3, #0
 8002450:	f000 80cf 	beq.w	80025f2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002454:	7bbb      	ldrb	r3, [r7, #14]
 8002456:	2b21      	cmp	r3, #33	; 0x21
 8002458:	d103      	bne.n	8002462 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 fa7a 	bl	8002954 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002460:	e0c7      	b.n	80025f2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002462:	7bfb      	ldrb	r3, [r7, #15]
 8002464:	2b40      	cmp	r3, #64	; 0x40
 8002466:	f040 80c4 	bne.w	80025f2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 fae8 	bl	8002a40 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002470:	e0bf      	b.n	80025f2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800247c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002480:	f000 80b7 	beq.w	80025f2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	099b      	lsrs	r3, r3, #6
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00f      	beq.n	80024b0 <HAL_I2C_EV_IRQHandler+0x194>
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	0a9b      	lsrs	r3, r3, #10
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	2b00      	cmp	r3, #0
 800249a:	d009      	beq.n	80024b0 <HAL_I2C_EV_IRQHandler+0x194>
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	089b      	lsrs	r3, r3, #2
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d103      	bne.n	80024b0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f000 fb5d 	bl	8002b68 <I2C_MasterReceive_RXNE>
 80024ae:	e011      	b.n	80024d4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	089b      	lsrs	r3, r3, #2
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f000 809a 	beq.w	80025f2 <HAL_I2C_EV_IRQHandler+0x2d6>
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	0a5b      	lsrs	r3, r3, #9
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f000 8093 	beq.w	80025f2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f000 fbfc 	bl	8002cca <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024d2:	e08e      	b.n	80025f2 <HAL_I2C_EV_IRQHandler+0x2d6>
 80024d4:	e08d      	b.n	80025f2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d004      	beq.n	80024e8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	695b      	ldr	r3, [r3, #20]
 80024e4:	61fb      	str	r3, [r7, #28]
 80024e6:	e007      	b.n	80024f8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	085b      	lsrs	r3, r3, #1
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	2b00      	cmp	r3, #0
 8002502:	d012      	beq.n	800252a <HAL_I2C_EV_IRQHandler+0x20e>
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	0a5b      	lsrs	r3, r3, #9
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	2b00      	cmp	r3, #0
 800250e:	d00c      	beq.n	800252a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002514:	2b00      	cmp	r3, #0
 8002516:	d003      	beq.n	8002520 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002520:	69b9      	ldr	r1, [r7, #24]
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 ffba 	bl	800349c <I2C_Slave_ADDR>
 8002528:	e066      	b.n	80025f8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	091b      	lsrs	r3, r3, #4
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	2b00      	cmp	r3, #0
 8002534:	d009      	beq.n	800254a <HAL_I2C_EV_IRQHandler+0x22e>
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	0a5b      	lsrs	r3, r3, #9
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 fff4 	bl	8003530 <I2C_Slave_STOPF>
 8002548:	e056      	b.n	80025f8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800254a:	7bbb      	ldrb	r3, [r7, #14]
 800254c:	2b21      	cmp	r3, #33	; 0x21
 800254e:	d002      	beq.n	8002556 <HAL_I2C_EV_IRQHandler+0x23a>
 8002550:	7bbb      	ldrb	r3, [r7, #14]
 8002552:	2b29      	cmp	r3, #41	; 0x29
 8002554:	d125      	bne.n	80025a2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	09db      	lsrs	r3, r3, #7
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00f      	beq.n	8002582 <HAL_I2C_EV_IRQHandler+0x266>
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	0a9b      	lsrs	r3, r3, #10
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b00      	cmp	r3, #0
 800256c:	d009      	beq.n	8002582 <HAL_I2C_EV_IRQHandler+0x266>
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	089b      	lsrs	r3, r3, #2
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b00      	cmp	r3, #0
 8002578:	d103      	bne.n	8002582 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 fed0 	bl	8003320 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002580:	e039      	b.n	80025f6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	089b      	lsrs	r3, r3, #2
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b00      	cmp	r3, #0
 800258c:	d033      	beq.n	80025f6 <HAL_I2C_EV_IRQHandler+0x2da>
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	0a5b      	lsrs	r3, r3, #9
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b00      	cmp	r3, #0
 8002598:	d02d      	beq.n	80025f6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 fefd 	bl	800339a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80025a0:	e029      	b.n	80025f6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	099b      	lsrs	r3, r3, #6
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00f      	beq.n	80025ce <HAL_I2C_EV_IRQHandler+0x2b2>
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	0a9b      	lsrs	r3, r3, #10
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d009      	beq.n	80025ce <HAL_I2C_EV_IRQHandler+0x2b2>
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	089b      	lsrs	r3, r3, #2
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d103      	bne.n	80025ce <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 ff08 	bl	80033dc <I2C_SlaveReceive_RXNE>
 80025cc:	e014      	b.n	80025f8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	089b      	lsrs	r3, r3, #2
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00e      	beq.n	80025f8 <HAL_I2C_EV_IRQHandler+0x2dc>
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	0a5b      	lsrs	r3, r3, #9
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d008      	beq.n	80025f8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 ff36 	bl	8003458 <I2C_SlaveReceive_BTF>
 80025ec:	e004      	b.n	80025f8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80025ee:	bf00      	nop
 80025f0:	e002      	b.n	80025f8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025f2:	bf00      	nop
 80025f4:	e000      	b.n	80025f8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80025f6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80025f8:	3720      	adds	r7, #32
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b08a      	sub	sp, #40	; 0x28
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	695b      	ldr	r3, [r3, #20]
 800260c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002616:	2300      	movs	r3, #0
 8002618:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002620:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002622:	6a3b      	ldr	r3, [r7, #32]
 8002624:	0a1b      	lsrs	r3, r3, #8
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00e      	beq.n	800264c <HAL_I2C_ER_IRQHandler+0x4e>
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	0a1b      	lsrs	r3, r3, #8
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b00      	cmp	r3, #0
 8002638:	d008      	beq.n	800264c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263c:	f043 0301 	orr.w	r3, r3, #1
 8002640:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800264a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800264c:	6a3b      	ldr	r3, [r7, #32]
 800264e:	0a5b      	lsrs	r3, r3, #9
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00e      	beq.n	8002676 <HAL_I2C_ER_IRQHandler+0x78>
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	0a1b      	lsrs	r3, r3, #8
 800265c:	f003 0301 	and.w	r3, r3, #1
 8002660:	2b00      	cmp	r3, #0
 8002662:	d008      	beq.n	8002676 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002666:	f043 0302 	orr.w	r3, r3, #2
 800266a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002674:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002676:	6a3b      	ldr	r3, [r7, #32]
 8002678:	0a9b      	lsrs	r3, r3, #10
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b00      	cmp	r3, #0
 8002680:	d03f      	beq.n	8002702 <HAL_I2C_ER_IRQHandler+0x104>
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	0a1b      	lsrs	r3, r3, #8
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	2b00      	cmp	r3, #0
 800268c:	d039      	beq.n	8002702 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800268e:	7efb      	ldrb	r3, [r7, #27]
 8002690:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002696:	b29b      	uxth	r3, r3
 8002698:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026a0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80026a8:	7ebb      	ldrb	r3, [r7, #26]
 80026aa:	2b20      	cmp	r3, #32
 80026ac:	d112      	bne.n	80026d4 <HAL_I2C_ER_IRQHandler+0xd6>
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d10f      	bne.n	80026d4 <HAL_I2C_ER_IRQHandler+0xd6>
 80026b4:	7cfb      	ldrb	r3, [r7, #19]
 80026b6:	2b21      	cmp	r3, #33	; 0x21
 80026b8:	d008      	beq.n	80026cc <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80026ba:	7cfb      	ldrb	r3, [r7, #19]
 80026bc:	2b29      	cmp	r3, #41	; 0x29
 80026be:	d005      	beq.n	80026cc <HAL_I2C_ER_IRQHandler+0xce>
 80026c0:	7cfb      	ldrb	r3, [r7, #19]
 80026c2:	2b28      	cmp	r3, #40	; 0x28
 80026c4:	d106      	bne.n	80026d4 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2b21      	cmp	r3, #33	; 0x21
 80026ca:	d103      	bne.n	80026d4 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f001 f85f 	bl	8003790 <I2C_Slave_AF>
 80026d2:	e016      	b.n	8002702 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80026dc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80026de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e0:	f043 0304 	orr.w	r3, r3, #4
 80026e4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80026e6:	7efb      	ldrb	r3, [r7, #27]
 80026e8:	2b10      	cmp	r3, #16
 80026ea:	d002      	beq.n	80026f2 <HAL_I2C_ER_IRQHandler+0xf4>
 80026ec:	7efb      	ldrb	r3, [r7, #27]
 80026ee:	2b40      	cmp	r3, #64	; 0x40
 80026f0:	d107      	bne.n	8002702 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002700:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002702:	6a3b      	ldr	r3, [r7, #32]
 8002704:	0adb      	lsrs	r3, r3, #11
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00e      	beq.n	800272c <HAL_I2C_ER_IRQHandler+0x12e>
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	0a1b      	lsrs	r3, r3, #8
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	2b00      	cmp	r3, #0
 8002718:	d008      	beq.n	800272c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800271a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271c:	f043 0308 	orr.w	r3, r3, #8
 8002720:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800272a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800272c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272e:	2b00      	cmp	r3, #0
 8002730:	d008      	beq.n	8002744 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002738:	431a      	orrs	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f001 f896 	bl	8003870 <I2C_ITError>
  }
}
 8002744:	bf00      	nop
 8002746:	3728      	adds	r7, #40	; 0x28
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800277c:	bf00      	nop
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	460b      	mov	r3, r1
 80027a6:	70fb      	strb	r3, [r7, #3]
 80027a8:	4613      	mov	r3, r2
 80027aa:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002810:	bf00      	nop
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800282a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002832:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002838:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800283e:	2b00      	cmp	r3, #0
 8002840:	d150      	bne.n	80028e4 <I2C_MasterTransmit_TXE+0xc8>
 8002842:	7bfb      	ldrb	r3, [r7, #15]
 8002844:	2b21      	cmp	r3, #33	; 0x21
 8002846:	d14d      	bne.n	80028e4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	2b08      	cmp	r3, #8
 800284c:	d01d      	beq.n	800288a <I2C_MasterTransmit_TXE+0x6e>
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	2b20      	cmp	r3, #32
 8002852:	d01a      	beq.n	800288a <I2C_MasterTransmit_TXE+0x6e>
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800285a:	d016      	beq.n	800288a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	685a      	ldr	r2, [r3, #4]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800286a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2211      	movs	r2, #17
 8002870:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2220      	movs	r2, #32
 800287e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f7ff ff62 	bl	800274c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002888:	e060      	b.n	800294c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002898:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028a8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2220      	movs	r2, #32
 80028b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	2b40      	cmp	r3, #64	; 0x40
 80028c2:	d107      	bne.n	80028d4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f7ff ff7d 	bl	80027cc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80028d2:	e03b      	b.n	800294c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f7ff ff35 	bl	800274c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80028e2:	e033      	b.n	800294c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80028e4:	7bfb      	ldrb	r3, [r7, #15]
 80028e6:	2b21      	cmp	r3, #33	; 0x21
 80028e8:	d005      	beq.n	80028f6 <I2C_MasterTransmit_TXE+0xda>
 80028ea:	7bbb      	ldrb	r3, [r7, #14]
 80028ec:	2b40      	cmp	r3, #64	; 0x40
 80028ee:	d12d      	bne.n	800294c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80028f0:	7bfb      	ldrb	r3, [r7, #15]
 80028f2:	2b22      	cmp	r3, #34	; 0x22
 80028f4:	d12a      	bne.n	800294c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d108      	bne.n	8002912 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	685a      	ldr	r2, [r3, #4]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800290e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002910:	e01c      	b.n	800294c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b40      	cmp	r3, #64	; 0x40
 800291c:	d103      	bne.n	8002926 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 f88e 	bl	8002a40 <I2C_MemoryTransmit_TXE_BTF>
}
 8002924:	e012      	b.n	800294c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292a:	781a      	ldrb	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002936:	1c5a      	adds	r2, r3, #1
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002940:	b29b      	uxth	r3, r3
 8002942:	3b01      	subs	r3, #1
 8002944:	b29a      	uxth	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800294a:	e7ff      	b.n	800294c <I2C_MasterTransmit_TXE+0x130>
 800294c:	bf00      	nop
 800294e:	3710      	adds	r7, #16
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002960:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b21      	cmp	r3, #33	; 0x21
 800296c:	d164      	bne.n	8002a38 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002972:	b29b      	uxth	r3, r3
 8002974:	2b00      	cmp	r3, #0
 8002976:	d012      	beq.n	800299e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297c:	781a      	ldrb	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002988:	1c5a      	adds	r2, r3, #1
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002992:	b29b      	uxth	r3, r3
 8002994:	3b01      	subs	r3, #1
 8002996:	b29a      	uxth	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800299c:	e04c      	b.n	8002a38 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2b08      	cmp	r3, #8
 80029a2:	d01d      	beq.n	80029e0 <I2C_MasterTransmit_BTF+0x8c>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2b20      	cmp	r3, #32
 80029a8:	d01a      	beq.n	80029e0 <I2C_MasterTransmit_BTF+0x8c>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80029b0:	d016      	beq.n	80029e0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	685a      	ldr	r2, [r3, #4]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80029c0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2211      	movs	r2, #17
 80029c6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2220      	movs	r2, #32
 80029d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f7ff feb7 	bl	800274c <HAL_I2C_MasterTxCpltCallback>
}
 80029de:	e02b      	b.n	8002a38 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	685a      	ldr	r2, [r3, #4]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80029ee:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029fe:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2220      	movs	r2, #32
 8002a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b40      	cmp	r3, #64	; 0x40
 8002a18:	d107      	bne.n	8002a2a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f7ff fed2 	bl	80027cc <HAL_I2C_MemTxCpltCallback>
}
 8002a28:	e006      	b.n	8002a38 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f7ff fe8a 	bl	800274c <HAL_I2C_MasterTxCpltCallback>
}
 8002a38:	bf00      	nop
 8002a3a:	3710      	adds	r7, #16
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a4e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d11d      	bne.n	8002a94 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d10b      	bne.n	8002a78 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a64:	b2da      	uxtb	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a70:	1c9a      	adds	r2, r3, #2
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002a76:	e073      	b.n	8002b60 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	121b      	asrs	r3, r3, #8
 8002a80:	b2da      	uxtb	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a8c:	1c5a      	adds	r2, r3, #1
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002a92:	e065      	b.n	8002b60 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d10b      	bne.n	8002ab4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aa0:	b2da      	uxtb	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aac:	1c5a      	adds	r2, r3, #1
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002ab2:	e055      	b.n	8002b60 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d151      	bne.n	8002b60 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002abc:	7bfb      	ldrb	r3, [r7, #15]
 8002abe:	2b22      	cmp	r3, #34	; 0x22
 8002ac0:	d10d      	bne.n	8002ade <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ad0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ad6:	1c5a      	adds	r2, r3, #1
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002adc:	e040      	b.n	8002b60 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d015      	beq.n	8002b14 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002ae8:	7bfb      	ldrb	r3, [r7, #15]
 8002aea:	2b21      	cmp	r3, #33	; 0x21
 8002aec:	d112      	bne.n	8002b14 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af2:	781a      	ldrb	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afe:	1c5a      	adds	r2, r3, #1
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002b12:	e025      	b.n	8002b60 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d120      	bne.n	8002b60 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002b1e:	7bfb      	ldrb	r3, [r7, #15]
 8002b20:	2b21      	cmp	r3, #33	; 0x21
 8002b22:	d11d      	bne.n	8002b60 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	685a      	ldr	r2, [r3, #4]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002b32:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b42:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2220      	movs	r2, #32
 8002b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f7ff fe36 	bl	80027cc <HAL_I2C_MemTxCpltCallback>
}
 8002b60:	bf00      	nop
 8002b62:	3710      	adds	r7, #16
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b22      	cmp	r3, #34	; 0x22
 8002b7a:	f040 80a2 	bne.w	8002cc2 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2b03      	cmp	r3, #3
 8002b8a:	d921      	bls.n	8002bd0 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	691a      	ldr	r2, [r3, #16]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b96:	b2d2      	uxtb	r2, r2
 8002b98:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9e:	1c5a      	adds	r2, r3, #1
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	3b01      	subs	r3, #1
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	2b03      	cmp	r3, #3
 8002bba:	f040 8082 	bne.w	8002cc2 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	685a      	ldr	r2, [r3, #4]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bcc:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8002bce:	e078      	b.n	8002cc2 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d074      	beq.n	8002cc2 <I2C_MasterReceive_RXNE+0x15a>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d002      	beq.n	8002be4 <I2C_MasterReceive_RXNE+0x7c>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d16e      	bne.n	8002cc2 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f001 fac5 	bl	8004174 <I2C_WaitOnSTOPRequestThroughIT>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d142      	bne.n	8002c76 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bfe:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	685a      	ldr	r2, [r3, #4]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c0e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	691a      	ldr	r2, [r3, #16]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1a:	b2d2      	uxtb	r2, r2
 8002c1c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c22:	1c5a      	adds	r2, r3, #1
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	b29a      	uxth	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2220      	movs	r2, #32
 8002c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b40      	cmp	r3, #64	; 0x40
 8002c48:	d10a      	bne.n	8002c60 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f7ff fdc1 	bl	80027e0 <HAL_I2C_MemRxCpltCallback>
}
 8002c5e:	e030      	b.n	8002cc2 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2212      	movs	r2, #18
 8002c6c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7ff fd76 	bl	8002760 <HAL_I2C_MasterRxCpltCallback>
}
 8002c74:	e025      	b.n	8002cc2 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	685a      	ldr	r2, [r3, #4]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c84:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	691a      	ldr	r2, [r3, #16]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c90:	b2d2      	uxtb	r2, r2
 8002c92:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c98:	1c5a      	adds	r2, r3, #1
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	3b01      	subs	r3, #1
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2220      	movs	r2, #32
 8002cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f7ff fd99 	bl	80027f4 <HAL_I2C_ErrorCallback>
}
 8002cc2:	bf00      	nop
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b084      	sub	sp, #16
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	2b04      	cmp	r3, #4
 8002ce0:	d11b      	bne.n	8002d1a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	685a      	ldr	r2, [r3, #4]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cf0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	691a      	ldr	r2, [r3, #16]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfc:	b2d2      	uxtb	r2, r2
 8002cfe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d04:	1c5a      	adds	r2, r3, #1
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	3b01      	subs	r3, #1
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002d18:	e0bd      	b.n	8002e96 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	2b03      	cmp	r3, #3
 8002d22:	d129      	bne.n	8002d78 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	685a      	ldr	r2, [r3, #4]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d32:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2b04      	cmp	r3, #4
 8002d38:	d00a      	beq.n	8002d50 <I2C_MasterReceive_BTF+0x86>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d007      	beq.n	8002d50 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d4e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	691a      	ldr	r2, [r3, #16]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5a:	b2d2      	uxtb	r2, r2
 8002d5c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d62:	1c5a      	adds	r2, r3, #1
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	b29a      	uxth	r2, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002d76:	e08e      	b.n	8002e96 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d176      	bne.n	8002e70 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d002      	beq.n	8002d8e <I2C_MasterReceive_BTF+0xc4>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2b10      	cmp	r3, #16
 8002d8c:	d108      	bne.n	8002da0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d9c:	601a      	str	r2, [r3, #0]
 8002d9e:	e019      	b.n	8002dd4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2b04      	cmp	r3, #4
 8002da4:	d002      	beq.n	8002dac <I2C_MasterReceive_BTF+0xe2>
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d108      	bne.n	8002dbe <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	e00a      	b.n	8002dd4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2b10      	cmp	r3, #16
 8002dc2:	d007      	beq.n	8002dd4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dd2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	691a      	ldr	r2, [r3, #16]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dde:	b2d2      	uxtb	r2, r2
 8002de0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de6:	1c5a      	adds	r2, r3, #1
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	3b01      	subs	r3, #1
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	691a      	ldr	r2, [r3, #16]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e04:	b2d2      	uxtb	r2, r2
 8002e06:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0c:	1c5a      	adds	r2, r3, #1
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	3b01      	subs	r3, #1
 8002e1a:	b29a      	uxth	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	685a      	ldr	r2, [r3, #4]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002e2e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2220      	movs	r2, #32
 8002e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	2b40      	cmp	r3, #64	; 0x40
 8002e42:	d10a      	bne.n	8002e5a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f7ff fcc4 	bl	80027e0 <HAL_I2C_MemRxCpltCallback>
}
 8002e58:	e01d      	b.n	8002e96 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2212      	movs	r2, #18
 8002e66:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f7ff fc79 	bl	8002760 <HAL_I2C_MasterRxCpltCallback>
}
 8002e6e:	e012      	b.n	8002e96 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	691a      	ldr	r2, [r3, #16]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7a:	b2d2      	uxtb	r2, r2
 8002e7c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e82:	1c5a      	adds	r2, r3, #1
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	b29a      	uxth	r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002e96:	bf00      	nop
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	b083      	sub	sp, #12
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b40      	cmp	r3, #64	; 0x40
 8002eb0:	d117      	bne.n	8002ee2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d109      	bne.n	8002ece <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002eca:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002ecc:	e067      	b.n	8002f9e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	f043 0301 	orr.w	r3, r3, #1
 8002ed8:	b2da      	uxtb	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	611a      	str	r2, [r3, #16]
}
 8002ee0:	e05d      	b.n	8002f9e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002eea:	d133      	bne.n	8002f54 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	2b21      	cmp	r3, #33	; 0x21
 8002ef6:	d109      	bne.n	8002f0c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	461a      	mov	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f08:	611a      	str	r2, [r3, #16]
 8002f0a:	e008      	b.n	8002f1e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	f043 0301 	orr.w	r3, r3, #1
 8002f16:	b2da      	uxtb	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d004      	beq.n	8002f30 <I2C_Master_SB+0x92>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d108      	bne.n	8002f42 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d032      	beq.n	8002f9e <I2C_Master_SB+0x100>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d02d      	beq.n	8002f9e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	685a      	ldr	r2, [r3, #4]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f50:	605a      	str	r2, [r3, #4]
}
 8002f52:	e024      	b.n	8002f9e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d10e      	bne.n	8002f7a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	11db      	asrs	r3, r3, #7
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	f003 0306 	and.w	r3, r3, #6
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	f063 030f 	orn	r3, r3, #15
 8002f70:	b2da      	uxtb	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	611a      	str	r2, [r3, #16]
}
 8002f78:	e011      	b.n	8002f9e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d10d      	bne.n	8002f9e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	11db      	asrs	r3, r3, #7
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	f003 0306 	and.w	r3, r3, #6
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	f063 030e 	orn	r3, r3, #14
 8002f96:	b2da      	uxtb	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	611a      	str	r2, [r3, #16]
}
 8002f9e:	bf00      	nop
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr

08002faa <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002faa:	b480      	push	{r7}
 8002fac:	b083      	sub	sp, #12
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb6:	b2da      	uxtb	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d004      	beq.n	8002fd0 <I2C_Master_ADD10+0x26>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d108      	bne.n	8002fe2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00c      	beq.n	8002ff2 <I2C_Master_ADD10+0x48>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d007      	beq.n	8002ff2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	685a      	ldr	r2, [r3, #4]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ff0:	605a      	str	r2, [r3, #4]
  }
}
 8002ff2:	bf00      	nop
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr

08002ffe <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002ffe:	b480      	push	{r7}
 8003000:	b091      	sub	sp, #68	; 0x44
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800300c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003014:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003022:	b2db      	uxtb	r3, r3
 8003024:	2b22      	cmp	r3, #34	; 0x22
 8003026:	f040 8169 	bne.w	80032fc <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10f      	bne.n	8003052 <I2C_Master_ADDR+0x54>
 8003032:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003036:	2b40      	cmp	r3, #64	; 0x40
 8003038:	d10b      	bne.n	8003052 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800303a:	2300      	movs	r3, #0
 800303c:	633b      	str	r3, [r7, #48]	; 0x30
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	695b      	ldr	r3, [r3, #20]
 8003044:	633b      	str	r3, [r7, #48]	; 0x30
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	699b      	ldr	r3, [r3, #24]
 800304c:	633b      	str	r3, [r7, #48]	; 0x30
 800304e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003050:	e160      	b.n	8003314 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003056:	2b00      	cmp	r3, #0
 8003058:	d11d      	bne.n	8003096 <I2C_Master_ADDR+0x98>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003062:	d118      	bne.n	8003096 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003064:	2300      	movs	r3, #0
 8003066:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003078:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003088:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800308e:	1c5a      	adds	r2, r3, #1
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	651a      	str	r2, [r3, #80]	; 0x50
 8003094:	e13e      	b.n	8003314 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800309a:	b29b      	uxth	r3, r3
 800309c:	2b00      	cmp	r3, #0
 800309e:	d113      	bne.n	80030c8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030a0:	2300      	movs	r3, #0
 80030a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80030b4:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030c4:	601a      	str	r2, [r3, #0]
 80030c6:	e115      	b.n	80032f4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	f040 808a 	bne.w	80031e8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80030d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80030da:	d137      	bne.n	800314c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030ea:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030fa:	d113      	bne.n	8003124 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800310a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800310c:	2300      	movs	r3, #0
 800310e:	627b      	str	r3, [r7, #36]	; 0x24
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	627b      	str	r3, [r7, #36]	; 0x24
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	627b      	str	r3, [r7, #36]	; 0x24
 8003120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003122:	e0e7      	b.n	80032f4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003124:	2300      	movs	r3, #0
 8003126:	623b      	str	r3, [r7, #32]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	623b      	str	r3, [r7, #32]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	623b      	str	r3, [r7, #32]
 8003138:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003148:	601a      	str	r2, [r3, #0]
 800314a:	e0d3      	b.n	80032f4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800314c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800314e:	2b08      	cmp	r3, #8
 8003150:	d02e      	beq.n	80031b0 <I2C_Master_ADDR+0x1b2>
 8003152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003154:	2b20      	cmp	r3, #32
 8003156:	d02b      	beq.n	80031b0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800315a:	2b12      	cmp	r3, #18
 800315c:	d102      	bne.n	8003164 <I2C_Master_ADDR+0x166>
 800315e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003160:	2b01      	cmp	r3, #1
 8003162:	d125      	bne.n	80031b0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003166:	2b04      	cmp	r3, #4
 8003168:	d00e      	beq.n	8003188 <I2C_Master_ADDR+0x18a>
 800316a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800316c:	2b02      	cmp	r3, #2
 800316e:	d00b      	beq.n	8003188 <I2C_Master_ADDR+0x18a>
 8003170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003172:	2b10      	cmp	r3, #16
 8003174:	d008      	beq.n	8003188 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003184:	601a      	str	r2, [r3, #0]
 8003186:	e007      	b.n	8003198 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003196:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003198:	2300      	movs	r3, #0
 800319a:	61fb      	str	r3, [r7, #28]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	61fb      	str	r3, [r7, #28]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	61fb      	str	r3, [r7, #28]
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	e0a1      	b.n	80032f4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031be:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031c0:	2300      	movs	r3, #0
 80031c2:	61bb      	str	r3, [r7, #24]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	61bb      	str	r3, [r7, #24]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	61bb      	str	r3, [r7, #24]
 80031d4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031e4:	601a      	str	r2, [r3, #0]
 80031e6:	e085      	b.n	80032f4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d14d      	bne.n	800328e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80031f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f4:	2b04      	cmp	r3, #4
 80031f6:	d016      	beq.n	8003226 <I2C_Master_ADDR+0x228>
 80031f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d013      	beq.n	8003226 <I2C_Master_ADDR+0x228>
 80031fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003200:	2b10      	cmp	r3, #16
 8003202:	d010      	beq.n	8003226 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003212:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	e007      	b.n	8003236 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003234:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003240:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003244:	d117      	bne.n	8003276 <I2C_Master_ADDR+0x278>
 8003246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003248:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800324c:	d00b      	beq.n	8003266 <I2C_Master_ADDR+0x268>
 800324e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003250:	2b01      	cmp	r3, #1
 8003252:	d008      	beq.n	8003266 <I2C_Master_ADDR+0x268>
 8003254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003256:	2b08      	cmp	r3, #8
 8003258:	d005      	beq.n	8003266 <I2C_Master_ADDR+0x268>
 800325a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800325c:	2b10      	cmp	r3, #16
 800325e:	d002      	beq.n	8003266 <I2C_Master_ADDR+0x268>
 8003260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003262:	2b20      	cmp	r3, #32
 8003264:	d107      	bne.n	8003276 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	685a      	ldr	r2, [r3, #4]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003274:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003276:	2300      	movs	r3, #0
 8003278:	617b      	str	r3, [r7, #20]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	617b      	str	r3, [r7, #20]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	617b      	str	r3, [r7, #20]
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	e032      	b.n	80032f4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800329c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032ac:	d117      	bne.n	80032de <I2C_Master_ADDR+0x2e0>
 80032ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80032b4:	d00b      	beq.n	80032ce <I2C_Master_ADDR+0x2d0>
 80032b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d008      	beq.n	80032ce <I2C_Master_ADDR+0x2d0>
 80032bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032be:	2b08      	cmp	r3, #8
 80032c0:	d005      	beq.n	80032ce <I2C_Master_ADDR+0x2d0>
 80032c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032c4:	2b10      	cmp	r3, #16
 80032c6:	d002      	beq.n	80032ce <I2C_Master_ADDR+0x2d0>
 80032c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ca:	2b20      	cmp	r3, #32
 80032cc:	d107      	bne.n	80032de <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	685a      	ldr	r2, [r3, #4]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80032dc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032de:	2300      	movs	r3, #0
 80032e0:	613b      	str	r3, [r7, #16]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	695b      	ldr	r3, [r3, #20]
 80032e8:	613b      	str	r3, [r7, #16]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	613b      	str	r3, [r7, #16]
 80032f2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80032fa:	e00b      	b.n	8003314 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032fc:	2300      	movs	r3, #0
 80032fe:	60fb      	str	r3, [r7, #12]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	60fb      	str	r3, [r7, #12]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	60fb      	str	r3, [r7, #12]
 8003310:	68fb      	ldr	r3, [r7, #12]
}
 8003312:	e7ff      	b.n	8003314 <I2C_Master_ADDR+0x316>
 8003314:	bf00      	nop
 8003316:	3744      	adds	r7, #68	; 0x44
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800332e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003334:	b29b      	uxth	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d02b      	beq.n	8003392 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333e:	781a      	ldrb	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334a:	1c5a      	adds	r2, r3, #1
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003354:	b29b      	uxth	r3, r3
 8003356:	3b01      	subs	r3, #1
 8003358:	b29a      	uxth	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003362:	b29b      	uxth	r3, r3
 8003364:	2b00      	cmp	r3, #0
 8003366:	d114      	bne.n	8003392 <I2C_SlaveTransmit_TXE+0x72>
 8003368:	7bfb      	ldrb	r3, [r7, #15]
 800336a:	2b29      	cmp	r3, #41	; 0x29
 800336c:	d111      	bne.n	8003392 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800337c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2221      	movs	r2, #33	; 0x21
 8003382:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2228      	movs	r2, #40	; 0x28
 8003388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f7ff f9f1 	bl	8002774 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003392:	bf00      	nop
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800339a:	b480      	push	{r7}
 800339c:	b083      	sub	sp, #12
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d011      	beq.n	80033d0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b0:	781a      	ldrb	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033bc:	1c5a      	adds	r2, r3, #1
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	3b01      	subs	r3, #1
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ea:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d02c      	beq.n	8003450 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	691a      	ldr	r2, [r3, #16]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003400:	b2d2      	uxtb	r2, r2
 8003402:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003408:	1c5a      	adds	r2, r3, #1
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003412:	b29b      	uxth	r3, r3
 8003414:	3b01      	subs	r3, #1
 8003416:	b29a      	uxth	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003420:	b29b      	uxth	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d114      	bne.n	8003450 <I2C_SlaveReceive_RXNE+0x74>
 8003426:	7bfb      	ldrb	r3, [r7, #15]
 8003428:	2b2a      	cmp	r3, #42	; 0x2a
 800342a:	d111      	bne.n	8003450 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800343a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2222      	movs	r2, #34	; 0x22
 8003440:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2228      	movs	r2, #40	; 0x28
 8003446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f7ff f99c 	bl	8002788 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003450:	bf00      	nop
 8003452:	3710      	adds	r7, #16
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003464:	b29b      	uxth	r3, r3
 8003466:	2b00      	cmp	r3, #0
 8003468:	d012      	beq.n	8003490 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	691a      	ldr	r2, [r3, #16]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003474:	b2d2      	uxtb	r2, r2
 8003476:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347c:	1c5a      	adds	r2, r3, #1
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003486:	b29b      	uxth	r3, r3
 8003488:	3b01      	subs	r3, #1
 800348a:	b29a      	uxth	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80034a6:	2300      	movs	r3, #0
 80034a8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80034b6:	2b28      	cmp	r3, #40	; 0x28
 80034b8:	d127      	bne.n	800350a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	685a      	ldr	r2, [r3, #4]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034c8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	089b      	lsrs	r3, r3, #2
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80034d6:	2301      	movs	r3, #1
 80034d8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	09db      	lsrs	r3, r3, #7
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d103      	bne.n	80034ee <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	81bb      	strh	r3, [r7, #12]
 80034ec:	e002      	b.n	80034f4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80034fc:	89ba      	ldrh	r2, [r7, #12]
 80034fe:	7bfb      	ldrb	r3, [r7, #15]
 8003500:	4619      	mov	r1, r3
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f7ff f94a 	bl	800279c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003508:	e00e      	b.n	8003528 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800350a:	2300      	movs	r3, #0
 800350c:	60bb      	str	r3, [r7, #8]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	60bb      	str	r3, [r7, #8]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	60bb      	str	r3, [r7, #8]
 800351e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003528:	bf00      	nop
 800352a:	3710      	adds	r7, #16
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800353e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	685a      	ldr	r2, [r3, #4]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800354e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003550:	2300      	movs	r3, #0
 8003552:	60bb      	str	r3, [r7, #8]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	695b      	ldr	r3, [r3, #20]
 800355a:	60bb      	str	r3, [r7, #8]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f042 0201 	orr.w	r2, r2, #1
 800356a:	601a      	str	r2, [r3, #0]
 800356c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800357c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003588:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800358c:	d172      	bne.n	8003674 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800358e:	7bfb      	ldrb	r3, [r7, #15]
 8003590:	2b22      	cmp	r3, #34	; 0x22
 8003592:	d002      	beq.n	800359a <I2C_Slave_STOPF+0x6a>
 8003594:	7bfb      	ldrb	r3, [r7, #15]
 8003596:	2b2a      	cmp	r3, #42	; 0x2a
 8003598:	d135      	bne.n	8003606 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d005      	beq.n	80035be <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	f043 0204 	orr.w	r2, r3, #4
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	685a      	ldr	r2, [r3, #4]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035cc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7fe f852 	bl	800167c <HAL_DMA_GetState>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d049      	beq.n	8003672 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e2:	4a69      	ldr	r2, [pc, #420]	; (8003788 <I2C_Slave_STOPF+0x258>)
 80035e4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7fe f824 	bl	8001638 <HAL_DMA_Abort_IT>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d03d      	beq.n	8003672 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003600:	4610      	mov	r0, r2
 8003602:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003604:	e035      	b.n	8003672 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	b29a      	uxth	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003618:	b29b      	uxth	r3, r3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d005      	beq.n	800362a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003622:	f043 0204 	orr.w	r2, r3, #4
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	685a      	ldr	r2, [r3, #4]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003638:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800363e:	4618      	mov	r0, r3
 8003640:	f7fe f81c 	bl	800167c <HAL_DMA_GetState>
 8003644:	4603      	mov	r3, r0
 8003646:	2b01      	cmp	r3, #1
 8003648:	d014      	beq.n	8003674 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800364e:	4a4e      	ldr	r2, [pc, #312]	; (8003788 <I2C_Slave_STOPF+0x258>)
 8003650:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003656:	4618      	mov	r0, r3
 8003658:	f7fd ffee 	bl	8001638 <HAL_DMA_Abort_IT>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d008      	beq.n	8003674 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003666:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800366c:	4610      	mov	r0, r2
 800366e:	4798      	blx	r3
 8003670:	e000      	b.n	8003674 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003672:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003678:	b29b      	uxth	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d03e      	beq.n	80036fc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	695b      	ldr	r3, [r3, #20]
 8003684:	f003 0304 	and.w	r3, r3, #4
 8003688:	2b04      	cmp	r3, #4
 800368a:	d112      	bne.n	80036b2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	691a      	ldr	r2, [r3, #16]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003696:	b2d2      	uxtb	r2, r2
 8003698:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369e:	1c5a      	adds	r2, r3, #1
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	3b01      	subs	r3, #1
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	695b      	ldr	r3, [r3, #20]
 80036b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036bc:	2b40      	cmp	r3, #64	; 0x40
 80036be:	d112      	bne.n	80036e6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	691a      	ldr	r2, [r3, #16]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ca:	b2d2      	uxtb	r2, r2
 80036cc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d2:	1c5a      	adds	r2, r3, #1
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036dc:	b29b      	uxth	r3, r3
 80036de:	3b01      	subs	r3, #1
 80036e0:	b29a      	uxth	r2, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d005      	beq.n	80036fc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f4:	f043 0204 	orr.w	r2, r3, #4
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003700:	2b00      	cmp	r3, #0
 8003702:	d003      	beq.n	800370c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 f8b3 	bl	8003870 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800370a:	e039      	b.n	8003780 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800370c:	7bfb      	ldrb	r3, [r7, #15]
 800370e:	2b2a      	cmp	r3, #42	; 0x2a
 8003710:	d109      	bne.n	8003726 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2228      	movs	r2, #40	; 0x28
 800371c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f7ff f831 	bl	8002788 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b28      	cmp	r3, #40	; 0x28
 8003730:	d111      	bne.n	8003756 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a15      	ldr	r2, [pc, #84]	; (800378c <I2C_Slave_STOPF+0x25c>)
 8003736:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2220      	movs	r2, #32
 8003742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7ff f832 	bl	80027b8 <HAL_I2C_ListenCpltCallback>
}
 8003754:	e014      	b.n	8003780 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375a:	2b22      	cmp	r3, #34	; 0x22
 800375c:	d002      	beq.n	8003764 <I2C_Slave_STOPF+0x234>
 800375e:	7bfb      	ldrb	r3, [r7, #15]
 8003760:	2b22      	cmp	r3, #34	; 0x22
 8003762:	d10d      	bne.n	8003780 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2220      	movs	r2, #32
 800376e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f7ff f804 	bl	8002788 <HAL_I2C_SlaveRxCpltCallback>
}
 8003780:	bf00      	nop
 8003782:	3710      	adds	r7, #16
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	08003d75 	.word	0x08003d75
 800378c:	ffff0000 	.word	0xffff0000

08003790 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800379e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	2b08      	cmp	r3, #8
 80037aa:	d002      	beq.n	80037b2 <I2C_Slave_AF+0x22>
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	2b20      	cmp	r3, #32
 80037b0:	d129      	bne.n	8003806 <I2C_Slave_AF+0x76>
 80037b2:	7bfb      	ldrb	r3, [r7, #15]
 80037b4:	2b28      	cmp	r3, #40	; 0x28
 80037b6:	d126      	bne.n	8003806 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a2c      	ldr	r2, [pc, #176]	; (800386c <I2C_Slave_AF+0xdc>)
 80037bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	685a      	ldr	r2, [r3, #4]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037cc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037d6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037e6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2220      	movs	r2, #32
 80037f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7fe ffda 	bl	80027b8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003804:	e02e      	b.n	8003864 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003806:	7bfb      	ldrb	r3, [r7, #15]
 8003808:	2b21      	cmp	r3, #33	; 0x21
 800380a:	d126      	bne.n	800385a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a17      	ldr	r2, [pc, #92]	; (800386c <I2C_Slave_AF+0xdc>)
 8003810:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2221      	movs	r2, #33	; 0x21
 8003816:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2220      	movs	r2, #32
 800381c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	685a      	ldr	r2, [r3, #4]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003836:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003840:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003850:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f7fe ff8e 	bl	8002774 <HAL_I2C_SlaveTxCpltCallback>
}
 8003858:	e004      	b.n	8003864 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003862:	615a      	str	r2, [r3, #20]
}
 8003864:	bf00      	nop
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	ffff0000 	.word	0xffff0000

08003870 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800387e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003886:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003888:	7bbb      	ldrb	r3, [r7, #14]
 800388a:	2b10      	cmp	r3, #16
 800388c:	d002      	beq.n	8003894 <I2C_ITError+0x24>
 800388e:	7bbb      	ldrb	r3, [r7, #14]
 8003890:	2b40      	cmp	r3, #64	; 0x40
 8003892:	d10a      	bne.n	80038aa <I2C_ITError+0x3a>
 8003894:	7bfb      	ldrb	r3, [r7, #15]
 8003896:	2b22      	cmp	r3, #34	; 0x22
 8003898:	d107      	bne.n	80038aa <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038a8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80038aa:	7bfb      	ldrb	r3, [r7, #15]
 80038ac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80038b0:	2b28      	cmp	r3, #40	; 0x28
 80038b2:	d107      	bne.n	80038c4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2228      	movs	r2, #40	; 0x28
 80038be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80038c2:	e015      	b.n	80038f0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038d2:	d00a      	beq.n	80038ea <I2C_ITError+0x7a>
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
 80038d6:	2b60      	cmp	r3, #96	; 0x60
 80038d8:	d007      	beq.n	80038ea <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2220      	movs	r2, #32
 80038de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038fe:	d162      	bne.n	80039c6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	685a      	ldr	r2, [r3, #4]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800390e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003914:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b01      	cmp	r3, #1
 800391c:	d020      	beq.n	8003960 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003922:	4a6a      	ldr	r2, [pc, #424]	; (8003acc <I2C_ITError+0x25c>)
 8003924:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800392a:	4618      	mov	r0, r3
 800392c:	f7fd fe84 	bl	8001638 <HAL_DMA_Abort_IT>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	f000 8089 	beq.w	8003a4a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 0201 	bic.w	r2, r2, #1
 8003946:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2220      	movs	r2, #32
 800394c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800395a:	4610      	mov	r0, r2
 800395c:	4798      	blx	r3
 800395e:	e074      	b.n	8003a4a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003964:	4a59      	ldr	r2, [pc, #356]	; (8003acc <I2C_ITError+0x25c>)
 8003966:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800396c:	4618      	mov	r0, r3
 800396e:	f7fd fe63 	bl	8001638 <HAL_DMA_Abort_IT>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d068      	beq.n	8003a4a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003982:	2b40      	cmp	r3, #64	; 0x40
 8003984:	d10b      	bne.n	800399e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	691a      	ldr	r2, [r3, #16]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003990:	b2d2      	uxtb	r2, r2
 8003992:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003998:	1c5a      	adds	r2, r3, #1
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f022 0201 	bic.w	r2, r2, #1
 80039ac:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2220      	movs	r2, #32
 80039b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80039c0:	4610      	mov	r0, r2
 80039c2:	4798      	blx	r3
 80039c4:	e041      	b.n	8003a4a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b60      	cmp	r3, #96	; 0x60
 80039d0:	d125      	bne.n	8003a1e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2220      	movs	r2, #32
 80039d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ea:	2b40      	cmp	r3, #64	; 0x40
 80039ec:	d10b      	bne.n	8003a06 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	691a      	ldr	r2, [r3, #16]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f8:	b2d2      	uxtb	r2, r2
 80039fa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a00:	1c5a      	adds	r2, r3, #1
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f022 0201 	bic.w	r2, r2, #1
 8003a14:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f7fe fef6 	bl	8002808 <HAL_I2C_AbortCpltCallback>
 8003a1c:	e015      	b.n	8003a4a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	695b      	ldr	r3, [r3, #20]
 8003a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a28:	2b40      	cmp	r3, #64	; 0x40
 8003a2a:	d10b      	bne.n	8003a44 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	691a      	ldr	r2, [r3, #16]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a36:	b2d2      	uxtb	r2, r2
 8003a38:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3e:	1c5a      	adds	r2, r3, #1
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f7fe fed5 	bl	80027f4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	f003 0301 	and.w	r3, r3, #1
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10e      	bne.n	8003a78 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d109      	bne.n	8003a78 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d104      	bne.n	8003a78 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d007      	beq.n	8003a88 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	685a      	ldr	r2, [r3, #4]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a86:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a8e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a94:	f003 0304 	and.w	r3, r3, #4
 8003a98:	2b04      	cmp	r3, #4
 8003a9a:	d113      	bne.n	8003ac4 <I2C_ITError+0x254>
 8003a9c:	7bfb      	ldrb	r3, [r7, #15]
 8003a9e:	2b28      	cmp	r3, #40	; 0x28
 8003aa0:	d110      	bne.n	8003ac4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a0a      	ldr	r2, [pc, #40]	; (8003ad0 <I2C_ITError+0x260>)
 8003aa6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2220      	movs	r2, #32
 8003ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f7fe fe7a 	bl	80027b8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003ac4:	bf00      	nop
 8003ac6:	3710      	adds	r7, #16
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	08003d75 	.word	0x08003d75
 8003ad0:	ffff0000 	.word	0xffff0000

08003ad4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b088      	sub	sp, #32
 8003ad8:	af02      	add	r7, sp, #8
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	607a      	str	r2, [r7, #4]
 8003ade:	603b      	str	r3, [r7, #0]
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	2b08      	cmp	r3, #8
 8003aee:	d006      	beq.n	8003afe <I2C_MasterRequestWrite+0x2a>
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d003      	beq.n	8003afe <I2C_MasterRequestWrite+0x2a>
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003afc:	d108      	bne.n	8003b10 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b0c:	601a      	str	r2, [r3, #0]
 8003b0e:	e00b      	b.n	8003b28 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b14:	2b12      	cmp	r3, #18
 8003b16:	d107      	bne.n	8003b28 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b26:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	9300      	str	r3, [sp, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b34:	68f8      	ldr	r0, [r7, #12]
 8003b36:	f000 f9c5 	bl	8003ec4 <I2C_WaitOnFlagUntilTimeout>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00d      	beq.n	8003b5c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b4e:	d103      	bne.n	8003b58 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b56:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e035      	b.n	8003bc8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b64:	d108      	bne.n	8003b78 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b66:	897b      	ldrh	r3, [r7, #10]
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b74:	611a      	str	r2, [r3, #16]
 8003b76:	e01b      	b.n	8003bb0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003b78:	897b      	ldrh	r3, [r7, #10]
 8003b7a:	11db      	asrs	r3, r3, #7
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	f003 0306 	and.w	r3, r3, #6
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	f063 030f 	orn	r3, r3, #15
 8003b88:	b2da      	uxtb	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	490e      	ldr	r1, [pc, #56]	; (8003bd0 <I2C_MasterRequestWrite+0xfc>)
 8003b96:	68f8      	ldr	r0, [r7, #12]
 8003b98:	f000 f9eb 	bl	8003f72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d001      	beq.n	8003ba6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e010      	b.n	8003bc8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003ba6:	897b      	ldrh	r3, [r7, #10]
 8003ba8:	b2da      	uxtb	r2, r3
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	4907      	ldr	r1, [pc, #28]	; (8003bd4 <I2C_MasterRequestWrite+0x100>)
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	f000 f9db 	bl	8003f72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e000      	b.n	8003bc8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3718      	adds	r7, #24
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	00010008 	.word	0x00010008
 8003bd4:	00010002 	.word	0x00010002

08003bd8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b088      	sub	sp, #32
 8003bdc:	af02      	add	r7, sp, #8
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	607a      	str	r2, [r7, #4]
 8003be2:	603b      	str	r3, [r7, #0]
 8003be4:	460b      	mov	r3, r1
 8003be6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bec:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003bfc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	2b08      	cmp	r3, #8
 8003c02:	d006      	beq.n	8003c12 <I2C_MasterRequestRead+0x3a>
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d003      	beq.n	8003c12 <I2C_MasterRequestRead+0x3a>
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c10:	d108      	bne.n	8003c24 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c20:	601a      	str	r2, [r3, #0]
 8003c22:	e00b      	b.n	8003c3c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c28:	2b11      	cmp	r3, #17
 8003c2a:	d107      	bne.n	8003c3c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c3a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	9300      	str	r3, [sp, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	f000 f93b 	bl	8003ec4 <I2C_WaitOnFlagUntilTimeout>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00d      	beq.n	8003c70 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c62:	d103      	bne.n	8003c6c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e079      	b.n	8003d64 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c78:	d108      	bne.n	8003c8c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003c7a:	897b      	ldrh	r3, [r7, #10]
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	f043 0301 	orr.w	r3, r3, #1
 8003c82:	b2da      	uxtb	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	611a      	str	r2, [r3, #16]
 8003c8a:	e05f      	b.n	8003d4c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003c8c:	897b      	ldrh	r3, [r7, #10]
 8003c8e:	11db      	asrs	r3, r3, #7
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	f003 0306 	and.w	r3, r3, #6
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	f063 030f 	orn	r3, r3, #15
 8003c9c:	b2da      	uxtb	r2, r3
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	4930      	ldr	r1, [pc, #192]	; (8003d6c <I2C_MasterRequestRead+0x194>)
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f000 f961 	bl	8003f72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e054      	b.n	8003d64 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003cba:	897b      	ldrh	r3, [r7, #10]
 8003cbc:	b2da      	uxtb	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	4929      	ldr	r1, [pc, #164]	; (8003d70 <I2C_MasterRequestRead+0x198>)
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	f000 f951 	bl	8003f72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d001      	beq.n	8003cda <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e044      	b.n	8003d64 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cda:	2300      	movs	r3, #0
 8003cdc:	613b      	str	r3, [r7, #16]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	695b      	ldr	r3, [r3, #20]
 8003ce4:	613b      	str	r3, [r7, #16]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	699b      	ldr	r3, [r3, #24]
 8003cec:	613b      	str	r3, [r7, #16]
 8003cee:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cfe:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	9300      	str	r3, [sp, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d0c:	68f8      	ldr	r0, [r7, #12]
 8003d0e:	f000 f8d9 	bl	8003ec4 <I2C_WaitOnFlagUntilTimeout>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00d      	beq.n	8003d34 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d26:	d103      	bne.n	8003d30 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d2e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e017      	b.n	8003d64 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003d34:	897b      	ldrh	r3, [r7, #10]
 8003d36:	11db      	asrs	r3, r3, #7
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	f003 0306 	and.w	r3, r3, #6
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	f063 030e 	orn	r3, r3, #14
 8003d44:	b2da      	uxtb	r2, r3
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	4907      	ldr	r1, [pc, #28]	; (8003d70 <I2C_MasterRequestRead+0x198>)
 8003d52:	68f8      	ldr	r0, [r7, #12]
 8003d54:	f000 f90d 	bl	8003f72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d001      	beq.n	8003d62 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e000      	b.n	8003d64 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3718      	adds	r7, #24
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	00010008 	.word	0x00010008
 8003d70:	00010002 	.word	0x00010002

08003d74 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d84:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d8c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003d8e:	4b4b      	ldr	r3, [pc, #300]	; (8003ebc <I2C_DMAAbort+0x148>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	08db      	lsrs	r3, r3, #3
 8003d94:	4a4a      	ldr	r2, [pc, #296]	; (8003ec0 <I2C_DMAAbort+0x14c>)
 8003d96:	fba2 2303 	umull	r2, r3, r2, r3
 8003d9a:	0a1a      	lsrs	r2, r3, #8
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	4413      	add	r3, r2
 8003da2:	00da      	lsls	r2, r3, #3
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d106      	bne.n	8003dbc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db2:	f043 0220 	orr.w	r2, r3, #32
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003dba:	e00a      	b.n	8003dd2 <I2C_DMAAbort+0x5e>
    }
    count--;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dd0:	d0ea      	beq.n	8003da8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d003      	beq.n	8003de2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dde:	2200      	movs	r2, #0
 8003de0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d003      	beq.n	8003df2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dee:	2200      	movs	r2, #0
 8003df0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e00:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	2200      	movs	r2, #0
 8003e06:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d003      	beq.n	8003e18 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e14:	2200      	movs	r2, #0
 8003e16:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d003      	beq.n	8003e28 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e24:	2200      	movs	r2, #0
 8003e26:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f022 0201 	bic.w	r2, r2, #1
 8003e36:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	2b60      	cmp	r3, #96	; 0x60
 8003e42:	d10e      	bne.n	8003e62 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	2220      	movs	r2, #32
 8003e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	2200      	movs	r2, #0
 8003e58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003e5a:	6978      	ldr	r0, [r7, #20]
 8003e5c:	f7fe fcd4 	bl	8002808 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003e60:	e027      	b.n	8003eb2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003e62:	7cfb      	ldrb	r3, [r7, #19]
 8003e64:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003e68:	2b28      	cmp	r3, #40	; 0x28
 8003e6a:	d117      	bne.n	8003e9c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f042 0201 	orr.w	r2, r2, #1
 8003e7a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e8a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	2228      	movs	r2, #40	; 0x28
 8003e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003e9a:	e007      	b.n	8003eac <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	2220      	movs	r2, #32
 8003ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003eac:	6978      	ldr	r0, [r7, #20]
 8003eae:	f7fe fca1 	bl	80027f4 <HAL_I2C_ErrorCallback>
}
 8003eb2:	bf00      	nop
 8003eb4:	3718      	adds	r7, #24
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	20000000 	.word	0x20000000
 8003ec0:	14f8b589 	.word	0x14f8b589

08003ec4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	603b      	str	r3, [r7, #0]
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ed4:	e025      	b.n	8003f22 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003edc:	d021      	beq.n	8003f22 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ede:	f7fd fa4d 	bl	800137c <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	683a      	ldr	r2, [r7, #0]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d302      	bcc.n	8003ef4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d116      	bne.n	8003f22 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2220      	movs	r2, #32
 8003efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0e:	f043 0220 	orr.w	r2, r3, #32
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e023      	b.n	8003f6a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	0c1b      	lsrs	r3, r3, #16
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d10d      	bne.n	8003f48 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	43da      	mvns	r2, r3
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	4013      	ands	r3, r2
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	bf0c      	ite	eq
 8003f3e:	2301      	moveq	r3, #1
 8003f40:	2300      	movne	r3, #0
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	461a      	mov	r2, r3
 8003f46:	e00c      	b.n	8003f62 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	43da      	mvns	r2, r3
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	4013      	ands	r3, r2
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	bf0c      	ite	eq
 8003f5a:	2301      	moveq	r3, #1
 8003f5c:	2300      	movne	r3, #0
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	461a      	mov	r2, r3
 8003f62:	79fb      	ldrb	r3, [r7, #7]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d0b6      	beq.n	8003ed6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b084      	sub	sp, #16
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	60f8      	str	r0, [r7, #12]
 8003f7a:	60b9      	str	r1, [r7, #8]
 8003f7c:	607a      	str	r2, [r7, #4]
 8003f7e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f80:	e051      	b.n	8004026 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f90:	d123      	bne.n	8003fda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fa0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003faa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2220      	movs	r2, #32
 8003fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc6:	f043 0204 	orr.w	r2, r3, #4
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e046      	b.n	8004068 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe0:	d021      	beq.n	8004026 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fe2:	f7fd f9cb 	bl	800137c <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d302      	bcc.n	8003ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d116      	bne.n	8004026 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2220      	movs	r2, #32
 8004002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004012:	f043 0220 	orr.w	r2, r3, #32
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e020      	b.n	8004068 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	0c1b      	lsrs	r3, r3, #16
 800402a:	b2db      	uxtb	r3, r3
 800402c:	2b01      	cmp	r3, #1
 800402e:	d10c      	bne.n	800404a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	43da      	mvns	r2, r3
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	4013      	ands	r3, r2
 800403c:	b29b      	uxth	r3, r3
 800403e:	2b00      	cmp	r3, #0
 8004040:	bf14      	ite	ne
 8004042:	2301      	movne	r3, #1
 8004044:	2300      	moveq	r3, #0
 8004046:	b2db      	uxtb	r3, r3
 8004048:	e00b      	b.n	8004062 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	43da      	mvns	r2, r3
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	4013      	ands	r3, r2
 8004056:	b29b      	uxth	r3, r3
 8004058:	2b00      	cmp	r3, #0
 800405a:	bf14      	ite	ne
 800405c:	2301      	movne	r3, #1
 800405e:	2300      	moveq	r3, #0
 8004060:	b2db      	uxtb	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	d18d      	bne.n	8003f82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3710      	adds	r7, #16
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800407c:	e02d      	b.n	80040da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	f000 f900 	bl	8004284 <I2C_IsAcknowledgeFailed>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d001      	beq.n	800408e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e02d      	b.n	80040ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004094:	d021      	beq.n	80040da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004096:	f7fd f971 	bl	800137c <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	68ba      	ldr	r2, [r7, #8]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d302      	bcc.n	80040ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d116      	bne.n	80040da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2220      	movs	r2, #32
 80040b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c6:	f043 0220 	orr.w	r2, r3, #32
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e007      	b.n	80040ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	695b      	ldr	r3, [r3, #20]
 80040e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040e4:	2b80      	cmp	r3, #128	; 0x80
 80040e6:	d1ca      	bne.n	800407e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3710      	adds	r7, #16
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b084      	sub	sp, #16
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	60f8      	str	r0, [r7, #12]
 80040fa:	60b9      	str	r1, [r7, #8]
 80040fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040fe:	e02d      	b.n	800415c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f000 f8bf 	bl	8004284 <I2C_IsAcknowledgeFailed>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d001      	beq.n	8004110 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e02d      	b.n	800416c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004116:	d021      	beq.n	800415c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004118:	f7fd f930 	bl	800137c <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	68ba      	ldr	r2, [r7, #8]
 8004124:	429a      	cmp	r2, r3
 8004126:	d302      	bcc.n	800412e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d116      	bne.n	800415c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2220      	movs	r2, #32
 8004138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004148:	f043 0220 	orr.w	r2, r3, #32
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e007      	b.n	800416c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	f003 0304 	and.w	r3, r3, #4
 8004166:	2b04      	cmp	r3, #4
 8004168:	d1ca      	bne.n	8004100 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800416a:	2300      	movs	r3, #0
}
 800416c:	4618      	mov	r0, r3
 800416e:	3710      	adds	r7, #16
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800417c:	2300      	movs	r3, #0
 800417e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004180:	4b13      	ldr	r3, [pc, #76]	; (80041d0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	08db      	lsrs	r3, r3, #3
 8004186:	4a13      	ldr	r2, [pc, #76]	; (80041d4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004188:	fba2 2303 	umull	r2, r3, r2, r3
 800418c:	0a1a      	lsrs	r2, r3, #8
 800418e:	4613      	mov	r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	4413      	add	r3, r2
 8004194:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	3b01      	subs	r3, #1
 800419a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d107      	bne.n	80041b2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a6:	f043 0220 	orr.w	r2, r3, #32
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e008      	b.n	80041c4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041c0:	d0e9      	beq.n	8004196 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3714      	adds	r7, #20
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr
 80041d0:	20000000 	.word	0x20000000
 80041d4:	14f8b589 	.word	0x14f8b589

080041d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80041e4:	e042      	b.n	800426c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	695b      	ldr	r3, [r3, #20]
 80041ec:	f003 0310 	and.w	r3, r3, #16
 80041f0:	2b10      	cmp	r3, #16
 80041f2:	d119      	bne.n	8004228 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f06f 0210 	mvn.w	r2, #16
 80041fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2200      	movs	r2, #0
 8004202:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2220      	movs	r2, #32
 8004208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e029      	b.n	800427c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004228:	f7fd f8a8 	bl	800137c <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	68ba      	ldr	r2, [r7, #8]
 8004234:	429a      	cmp	r2, r3
 8004236:	d302      	bcc.n	800423e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d116      	bne.n	800426c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2200      	movs	r2, #0
 8004242:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2220      	movs	r2, #32
 8004248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004258:	f043 0220 	orr.w	r2, r3, #32
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e007      	b.n	800427c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004276:	2b40      	cmp	r3, #64	; 0x40
 8004278:	d1b5      	bne.n	80041e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	3710      	adds	r7, #16
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004296:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800429a:	d11b      	bne.n	80042d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2220      	movs	r2, #32
 80042b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c0:	f043 0204 	orr.w	r2, r3, #4
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e000      	b.n	80042d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	370c      	adds	r7, #12
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr

080042e2 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80042e2:	b480      	push	{r7}
 80042e4:	b083      	sub	sp, #12
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ee:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80042f2:	d103      	bne.n	80042fc <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80042fa:	e007      	b.n	800430c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004300:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004304:	d102      	bne.n	800430c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2208      	movs	r2, #8
 800430a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b086      	sub	sp, #24
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d101      	bne.n	800432a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e264      	b.n	80047f4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	2b00      	cmp	r3, #0
 8004334:	d075      	beq.n	8004422 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004336:	4ba3      	ldr	r3, [pc, #652]	; (80045c4 <HAL_RCC_OscConfig+0x2ac>)
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f003 030c 	and.w	r3, r3, #12
 800433e:	2b04      	cmp	r3, #4
 8004340:	d00c      	beq.n	800435c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004342:	4ba0      	ldr	r3, [pc, #640]	; (80045c4 <HAL_RCC_OscConfig+0x2ac>)
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800434a:	2b08      	cmp	r3, #8
 800434c:	d112      	bne.n	8004374 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800434e:	4b9d      	ldr	r3, [pc, #628]	; (80045c4 <HAL_RCC_OscConfig+0x2ac>)
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004356:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800435a:	d10b      	bne.n	8004374 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800435c:	4b99      	ldr	r3, [pc, #612]	; (80045c4 <HAL_RCC_OscConfig+0x2ac>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d05b      	beq.n	8004420 <HAL_RCC_OscConfig+0x108>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d157      	bne.n	8004420 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e23f      	b.n	80047f4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800437c:	d106      	bne.n	800438c <HAL_RCC_OscConfig+0x74>
 800437e:	4b91      	ldr	r3, [pc, #580]	; (80045c4 <HAL_RCC_OscConfig+0x2ac>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a90      	ldr	r2, [pc, #576]	; (80045c4 <HAL_RCC_OscConfig+0x2ac>)
 8004384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004388:	6013      	str	r3, [r2, #0]
 800438a:	e01d      	b.n	80043c8 <HAL_RCC_OscConfig+0xb0>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004394:	d10c      	bne.n	80043b0 <HAL_RCC_OscConfig+0x98>
 8004396:	4b8b      	ldr	r3, [pc, #556]	; (80045c4 <HAL_RCC_OscConfig+0x2ac>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a8a      	ldr	r2, [pc, #552]	; (80045c4 <HAL_RCC_OscConfig+0x2ac>)
 800439c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043a0:	6013      	str	r3, [r2, #0]
 80043a2:	4b88      	ldr	r3, [pc, #544]	; (80045c4 <HAL_RCC_OscConfig+0x2ac>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a87      	ldr	r2, [pc, #540]	; (80045c4 <HAL_RCC_OscConfig+0x2ac>)
 80043a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043ac:	6013      	str	r3, [r2, #0]
 80043ae:	e00b      	b.n	80043c8 <HAL_RCC_OscConfig+0xb0>
 80043b0:	4b84      	ldr	r3, [pc, #528]	; (80045c4 <HAL_RCC_OscConfig+0x2ac>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a83      	ldr	r2, [pc, #524]	; (80045c4 <HAL_RCC_OscConfig+0x2ac>)
 80043b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043ba:	6013      	str	r3, [r2, #0]
 80043bc:	4b81      	ldr	r3, [pc, #516]	; (80045c4 <HAL_RCC_OscConfig+0x2ac>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a80      	ldr	r2, [pc, #512]	; (80045c4 <HAL_RCC_OscConfig+0x2ac>)
 80043c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d013      	beq.n	80043f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043d0:	f7fc ffd4 	bl	800137c <HAL_GetTick>
 80043d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043d6:	e008      	b.n	80043ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043d8:	f7fc ffd0 	bl	800137c <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b64      	cmp	r3, #100	; 0x64
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e204      	b.n	80047f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043ea:	4b76      	ldr	r3, [pc, #472]	; (80045c4 <HAL_RCC_OscConfig+0x2ac>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d0f0      	beq.n	80043d8 <HAL_RCC_OscConfig+0xc0>
 80043f6:	e014      	b.n	8004422 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f8:	f7fc ffc0 	bl	800137c <HAL_GetTick>
 80043fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043fe:	e008      	b.n	8004412 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004400:	f7fc ffbc 	bl	800137c <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b64      	cmp	r3, #100	; 0x64
 800440c:	d901      	bls.n	8004412 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e1f0      	b.n	80047f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004412:	4b6c      	ldr	r3, [pc, #432]	; (80045c4 <HAL_RCC_OscConfig+0x2ac>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1f0      	bne.n	8004400 <HAL_RCC_OscConfig+0xe8>
 800441e:	e000      	b.n	8004422 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004420:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d063      	beq.n	80044f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800442e:	4b65      	ldr	r3, [pc, #404]	; (80045c4 <HAL_RCC_OscConfig+0x2ac>)
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f003 030c 	and.w	r3, r3, #12
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00b      	beq.n	8004452 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800443a:	4b62      	ldr	r3, [pc, #392]	; (80045c4 <HAL_RCC_OscConfig+0x2ac>)
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004442:	2b08      	cmp	r3, #8
 8004444:	d11c      	bne.n	8004480 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004446:	4b5f      	ldr	r3, [pc, #380]	; (80045c4 <HAL_RCC_OscConfig+0x2ac>)
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d116      	bne.n	8004480 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004452:	4b5c      	ldr	r3, [pc, #368]	; (80045c4 <HAL_RCC_OscConfig+0x2ac>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d005      	beq.n	800446a <HAL_RCC_OscConfig+0x152>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	2b01      	cmp	r3, #1
 8004464:	d001      	beq.n	800446a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e1c4      	b.n	80047f4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800446a:	4b56      	ldr	r3, [pc, #344]	; (80045c4 <HAL_RCC_OscConfig+0x2ac>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	00db      	lsls	r3, r3, #3
 8004478:	4952      	ldr	r1, [pc, #328]	; (80045c4 <HAL_RCC_OscConfig+0x2ac>)
 800447a:	4313      	orrs	r3, r2
 800447c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800447e:	e03a      	b.n	80044f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d020      	beq.n	80044ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004488:	4b4f      	ldr	r3, [pc, #316]	; (80045c8 <HAL_RCC_OscConfig+0x2b0>)
 800448a:	2201      	movs	r2, #1
 800448c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800448e:	f7fc ff75 	bl	800137c <HAL_GetTick>
 8004492:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004494:	e008      	b.n	80044a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004496:	f7fc ff71 	bl	800137c <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d901      	bls.n	80044a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e1a5      	b.n	80047f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044a8:	4b46      	ldr	r3, [pc, #280]	; (80045c4 <HAL_RCC_OscConfig+0x2ac>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0302 	and.w	r3, r3, #2
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d0f0      	beq.n	8004496 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044b4:	4b43      	ldr	r3, [pc, #268]	; (80045c4 <HAL_RCC_OscConfig+0x2ac>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	00db      	lsls	r3, r3, #3
 80044c2:	4940      	ldr	r1, [pc, #256]	; (80045c4 <HAL_RCC_OscConfig+0x2ac>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	600b      	str	r3, [r1, #0]
 80044c8:	e015      	b.n	80044f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044ca:	4b3f      	ldr	r3, [pc, #252]	; (80045c8 <HAL_RCC_OscConfig+0x2b0>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d0:	f7fc ff54 	bl	800137c <HAL_GetTick>
 80044d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044d6:	e008      	b.n	80044ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044d8:	f7fc ff50 	bl	800137c <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e184      	b.n	80047f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044ea:	4b36      	ldr	r3, [pc, #216]	; (80045c4 <HAL_RCC_OscConfig+0x2ac>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1f0      	bne.n	80044d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0308 	and.w	r3, r3, #8
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d030      	beq.n	8004564 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d016      	beq.n	8004538 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800450a:	4b30      	ldr	r3, [pc, #192]	; (80045cc <HAL_RCC_OscConfig+0x2b4>)
 800450c:	2201      	movs	r2, #1
 800450e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004510:	f7fc ff34 	bl	800137c <HAL_GetTick>
 8004514:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004516:	e008      	b.n	800452a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004518:	f7fc ff30 	bl	800137c <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	2b02      	cmp	r3, #2
 8004524:	d901      	bls.n	800452a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e164      	b.n	80047f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800452a:	4b26      	ldr	r3, [pc, #152]	; (80045c4 <HAL_RCC_OscConfig+0x2ac>)
 800452c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b00      	cmp	r3, #0
 8004534:	d0f0      	beq.n	8004518 <HAL_RCC_OscConfig+0x200>
 8004536:	e015      	b.n	8004564 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004538:	4b24      	ldr	r3, [pc, #144]	; (80045cc <HAL_RCC_OscConfig+0x2b4>)
 800453a:	2200      	movs	r2, #0
 800453c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800453e:	f7fc ff1d 	bl	800137c <HAL_GetTick>
 8004542:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004544:	e008      	b.n	8004558 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004546:	f7fc ff19 	bl	800137c <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	2b02      	cmp	r3, #2
 8004552:	d901      	bls.n	8004558 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e14d      	b.n	80047f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004558:	4b1a      	ldr	r3, [pc, #104]	; (80045c4 <HAL_RCC_OscConfig+0x2ac>)
 800455a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800455c:	f003 0302 	and.w	r3, r3, #2
 8004560:	2b00      	cmp	r3, #0
 8004562:	d1f0      	bne.n	8004546 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0304 	and.w	r3, r3, #4
 800456c:	2b00      	cmp	r3, #0
 800456e:	f000 80a0 	beq.w	80046b2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004572:	2300      	movs	r3, #0
 8004574:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004576:	4b13      	ldr	r3, [pc, #76]	; (80045c4 <HAL_RCC_OscConfig+0x2ac>)
 8004578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d10f      	bne.n	80045a2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004582:	2300      	movs	r3, #0
 8004584:	60bb      	str	r3, [r7, #8]
 8004586:	4b0f      	ldr	r3, [pc, #60]	; (80045c4 <HAL_RCC_OscConfig+0x2ac>)
 8004588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458a:	4a0e      	ldr	r2, [pc, #56]	; (80045c4 <HAL_RCC_OscConfig+0x2ac>)
 800458c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004590:	6413      	str	r3, [r2, #64]	; 0x40
 8004592:	4b0c      	ldr	r3, [pc, #48]	; (80045c4 <HAL_RCC_OscConfig+0x2ac>)
 8004594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800459a:	60bb      	str	r3, [r7, #8]
 800459c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800459e:	2301      	movs	r3, #1
 80045a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045a2:	4b0b      	ldr	r3, [pc, #44]	; (80045d0 <HAL_RCC_OscConfig+0x2b8>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d121      	bne.n	80045f2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045ae:	4b08      	ldr	r3, [pc, #32]	; (80045d0 <HAL_RCC_OscConfig+0x2b8>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a07      	ldr	r2, [pc, #28]	; (80045d0 <HAL_RCC_OscConfig+0x2b8>)
 80045b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045ba:	f7fc fedf 	bl	800137c <HAL_GetTick>
 80045be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045c0:	e011      	b.n	80045e6 <HAL_RCC_OscConfig+0x2ce>
 80045c2:	bf00      	nop
 80045c4:	40023800 	.word	0x40023800
 80045c8:	42470000 	.word	0x42470000
 80045cc:	42470e80 	.word	0x42470e80
 80045d0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045d4:	f7fc fed2 	bl	800137c <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d901      	bls.n	80045e6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e106      	b.n	80047f4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045e6:	4b85      	ldr	r3, [pc, #532]	; (80047fc <HAL_RCC_OscConfig+0x4e4>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d0f0      	beq.n	80045d4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d106      	bne.n	8004608 <HAL_RCC_OscConfig+0x2f0>
 80045fa:	4b81      	ldr	r3, [pc, #516]	; (8004800 <HAL_RCC_OscConfig+0x4e8>)
 80045fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045fe:	4a80      	ldr	r2, [pc, #512]	; (8004800 <HAL_RCC_OscConfig+0x4e8>)
 8004600:	f043 0301 	orr.w	r3, r3, #1
 8004604:	6713      	str	r3, [r2, #112]	; 0x70
 8004606:	e01c      	b.n	8004642 <HAL_RCC_OscConfig+0x32a>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	2b05      	cmp	r3, #5
 800460e:	d10c      	bne.n	800462a <HAL_RCC_OscConfig+0x312>
 8004610:	4b7b      	ldr	r3, [pc, #492]	; (8004800 <HAL_RCC_OscConfig+0x4e8>)
 8004612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004614:	4a7a      	ldr	r2, [pc, #488]	; (8004800 <HAL_RCC_OscConfig+0x4e8>)
 8004616:	f043 0304 	orr.w	r3, r3, #4
 800461a:	6713      	str	r3, [r2, #112]	; 0x70
 800461c:	4b78      	ldr	r3, [pc, #480]	; (8004800 <HAL_RCC_OscConfig+0x4e8>)
 800461e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004620:	4a77      	ldr	r2, [pc, #476]	; (8004800 <HAL_RCC_OscConfig+0x4e8>)
 8004622:	f043 0301 	orr.w	r3, r3, #1
 8004626:	6713      	str	r3, [r2, #112]	; 0x70
 8004628:	e00b      	b.n	8004642 <HAL_RCC_OscConfig+0x32a>
 800462a:	4b75      	ldr	r3, [pc, #468]	; (8004800 <HAL_RCC_OscConfig+0x4e8>)
 800462c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800462e:	4a74      	ldr	r2, [pc, #464]	; (8004800 <HAL_RCC_OscConfig+0x4e8>)
 8004630:	f023 0301 	bic.w	r3, r3, #1
 8004634:	6713      	str	r3, [r2, #112]	; 0x70
 8004636:	4b72      	ldr	r3, [pc, #456]	; (8004800 <HAL_RCC_OscConfig+0x4e8>)
 8004638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800463a:	4a71      	ldr	r2, [pc, #452]	; (8004800 <HAL_RCC_OscConfig+0x4e8>)
 800463c:	f023 0304 	bic.w	r3, r3, #4
 8004640:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d015      	beq.n	8004676 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800464a:	f7fc fe97 	bl	800137c <HAL_GetTick>
 800464e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004650:	e00a      	b.n	8004668 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004652:	f7fc fe93 	bl	800137c <HAL_GetTick>
 8004656:	4602      	mov	r2, r0
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004660:	4293      	cmp	r3, r2
 8004662:	d901      	bls.n	8004668 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e0c5      	b.n	80047f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004668:	4b65      	ldr	r3, [pc, #404]	; (8004800 <HAL_RCC_OscConfig+0x4e8>)
 800466a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800466c:	f003 0302 	and.w	r3, r3, #2
 8004670:	2b00      	cmp	r3, #0
 8004672:	d0ee      	beq.n	8004652 <HAL_RCC_OscConfig+0x33a>
 8004674:	e014      	b.n	80046a0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004676:	f7fc fe81 	bl	800137c <HAL_GetTick>
 800467a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800467c:	e00a      	b.n	8004694 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800467e:	f7fc fe7d 	bl	800137c <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	f241 3288 	movw	r2, #5000	; 0x1388
 800468c:	4293      	cmp	r3, r2
 800468e:	d901      	bls.n	8004694 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e0af      	b.n	80047f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004694:	4b5a      	ldr	r3, [pc, #360]	; (8004800 <HAL_RCC_OscConfig+0x4e8>)
 8004696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004698:	f003 0302 	and.w	r3, r3, #2
 800469c:	2b00      	cmp	r3, #0
 800469e:	d1ee      	bne.n	800467e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046a0:	7dfb      	ldrb	r3, [r7, #23]
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d105      	bne.n	80046b2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046a6:	4b56      	ldr	r3, [pc, #344]	; (8004800 <HAL_RCC_OscConfig+0x4e8>)
 80046a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046aa:	4a55      	ldr	r2, [pc, #340]	; (8004800 <HAL_RCC_OscConfig+0x4e8>)
 80046ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	f000 809b 	beq.w	80047f2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046bc:	4b50      	ldr	r3, [pc, #320]	; (8004800 <HAL_RCC_OscConfig+0x4e8>)
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f003 030c 	and.w	r3, r3, #12
 80046c4:	2b08      	cmp	r3, #8
 80046c6:	d05c      	beq.n	8004782 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d141      	bne.n	8004754 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046d0:	4b4c      	ldr	r3, [pc, #304]	; (8004804 <HAL_RCC_OscConfig+0x4ec>)
 80046d2:	2200      	movs	r2, #0
 80046d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046d6:	f7fc fe51 	bl	800137c <HAL_GetTick>
 80046da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046dc:	e008      	b.n	80046f0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046de:	f7fc fe4d 	bl	800137c <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d901      	bls.n	80046f0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e081      	b.n	80047f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046f0:	4b43      	ldr	r3, [pc, #268]	; (8004800 <HAL_RCC_OscConfig+0x4e8>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d1f0      	bne.n	80046de <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	69da      	ldr	r2, [r3, #28]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a1b      	ldr	r3, [r3, #32]
 8004704:	431a      	orrs	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470a:	019b      	lsls	r3, r3, #6
 800470c:	431a      	orrs	r2, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004712:	085b      	lsrs	r3, r3, #1
 8004714:	3b01      	subs	r3, #1
 8004716:	041b      	lsls	r3, r3, #16
 8004718:	431a      	orrs	r2, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800471e:	061b      	lsls	r3, r3, #24
 8004720:	4937      	ldr	r1, [pc, #220]	; (8004800 <HAL_RCC_OscConfig+0x4e8>)
 8004722:	4313      	orrs	r3, r2
 8004724:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004726:	4b37      	ldr	r3, [pc, #220]	; (8004804 <HAL_RCC_OscConfig+0x4ec>)
 8004728:	2201      	movs	r2, #1
 800472a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800472c:	f7fc fe26 	bl	800137c <HAL_GetTick>
 8004730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004732:	e008      	b.n	8004746 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004734:	f7fc fe22 	bl	800137c <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	2b02      	cmp	r3, #2
 8004740:	d901      	bls.n	8004746 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e056      	b.n	80047f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004746:	4b2e      	ldr	r3, [pc, #184]	; (8004800 <HAL_RCC_OscConfig+0x4e8>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d0f0      	beq.n	8004734 <HAL_RCC_OscConfig+0x41c>
 8004752:	e04e      	b.n	80047f2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004754:	4b2b      	ldr	r3, [pc, #172]	; (8004804 <HAL_RCC_OscConfig+0x4ec>)
 8004756:	2200      	movs	r2, #0
 8004758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800475a:	f7fc fe0f 	bl	800137c <HAL_GetTick>
 800475e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004760:	e008      	b.n	8004774 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004762:	f7fc fe0b 	bl	800137c <HAL_GetTick>
 8004766:	4602      	mov	r2, r0
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	2b02      	cmp	r3, #2
 800476e:	d901      	bls.n	8004774 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	e03f      	b.n	80047f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004774:	4b22      	ldr	r3, [pc, #136]	; (8004800 <HAL_RCC_OscConfig+0x4e8>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d1f0      	bne.n	8004762 <HAL_RCC_OscConfig+0x44a>
 8004780:	e037      	b.n	80047f2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	2b01      	cmp	r3, #1
 8004788:	d101      	bne.n	800478e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e032      	b.n	80047f4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800478e:	4b1c      	ldr	r3, [pc, #112]	; (8004800 <HAL_RCC_OscConfig+0x4e8>)
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	699b      	ldr	r3, [r3, #24]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d028      	beq.n	80047ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d121      	bne.n	80047ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d11a      	bne.n	80047ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80047be:	4013      	ands	r3, r2
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80047c4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d111      	bne.n	80047ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d4:	085b      	lsrs	r3, r3, #1
 80047d6:	3b01      	subs	r3, #1
 80047d8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047da:	429a      	cmp	r2, r3
 80047dc:	d107      	bne.n	80047ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d001      	beq.n	80047f2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e000      	b.n	80047f4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3718      	adds	r7, #24
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	40007000 	.word	0x40007000
 8004800:	40023800 	.word	0x40023800
 8004804:	42470060 	.word	0x42470060

08004808 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d101      	bne.n	800481c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e0cc      	b.n	80049b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800481c:	4b68      	ldr	r3, [pc, #416]	; (80049c0 <HAL_RCC_ClockConfig+0x1b8>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0307 	and.w	r3, r3, #7
 8004824:	683a      	ldr	r2, [r7, #0]
 8004826:	429a      	cmp	r2, r3
 8004828:	d90c      	bls.n	8004844 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800482a:	4b65      	ldr	r3, [pc, #404]	; (80049c0 <HAL_RCC_ClockConfig+0x1b8>)
 800482c:	683a      	ldr	r2, [r7, #0]
 800482e:	b2d2      	uxtb	r2, r2
 8004830:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004832:	4b63      	ldr	r3, [pc, #396]	; (80049c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0307 	and.w	r3, r3, #7
 800483a:	683a      	ldr	r2, [r7, #0]
 800483c:	429a      	cmp	r2, r3
 800483e:	d001      	beq.n	8004844 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e0b8      	b.n	80049b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0302 	and.w	r3, r3, #2
 800484c:	2b00      	cmp	r3, #0
 800484e:	d020      	beq.n	8004892 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0304 	and.w	r3, r3, #4
 8004858:	2b00      	cmp	r3, #0
 800485a:	d005      	beq.n	8004868 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800485c:	4b59      	ldr	r3, [pc, #356]	; (80049c4 <HAL_RCC_ClockConfig+0x1bc>)
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	4a58      	ldr	r2, [pc, #352]	; (80049c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004862:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004866:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0308 	and.w	r3, r3, #8
 8004870:	2b00      	cmp	r3, #0
 8004872:	d005      	beq.n	8004880 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004874:	4b53      	ldr	r3, [pc, #332]	; (80049c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	4a52      	ldr	r2, [pc, #328]	; (80049c4 <HAL_RCC_ClockConfig+0x1bc>)
 800487a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800487e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004880:	4b50      	ldr	r3, [pc, #320]	; (80049c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	494d      	ldr	r1, [pc, #308]	; (80049c4 <HAL_RCC_ClockConfig+0x1bc>)
 800488e:	4313      	orrs	r3, r2
 8004890:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0301 	and.w	r3, r3, #1
 800489a:	2b00      	cmp	r3, #0
 800489c:	d044      	beq.n	8004928 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d107      	bne.n	80048b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048a6:	4b47      	ldr	r3, [pc, #284]	; (80049c4 <HAL_RCC_ClockConfig+0x1bc>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d119      	bne.n	80048e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e07f      	b.n	80049b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d003      	beq.n	80048c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048c2:	2b03      	cmp	r3, #3
 80048c4:	d107      	bne.n	80048d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048c6:	4b3f      	ldr	r3, [pc, #252]	; (80049c4 <HAL_RCC_ClockConfig+0x1bc>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d109      	bne.n	80048e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e06f      	b.n	80049b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048d6:	4b3b      	ldr	r3, [pc, #236]	; (80049c4 <HAL_RCC_ClockConfig+0x1bc>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0302 	and.w	r3, r3, #2
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d101      	bne.n	80048e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e067      	b.n	80049b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048e6:	4b37      	ldr	r3, [pc, #220]	; (80049c4 <HAL_RCC_ClockConfig+0x1bc>)
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f023 0203 	bic.w	r2, r3, #3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	4934      	ldr	r1, [pc, #208]	; (80049c4 <HAL_RCC_ClockConfig+0x1bc>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048f8:	f7fc fd40 	bl	800137c <HAL_GetTick>
 80048fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048fe:	e00a      	b.n	8004916 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004900:	f7fc fd3c 	bl	800137c <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	f241 3288 	movw	r2, #5000	; 0x1388
 800490e:	4293      	cmp	r3, r2
 8004910:	d901      	bls.n	8004916 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e04f      	b.n	80049b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004916:	4b2b      	ldr	r3, [pc, #172]	; (80049c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f003 020c 	and.w	r2, r3, #12
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	429a      	cmp	r2, r3
 8004926:	d1eb      	bne.n	8004900 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004928:	4b25      	ldr	r3, [pc, #148]	; (80049c0 <HAL_RCC_ClockConfig+0x1b8>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0307 	and.w	r3, r3, #7
 8004930:	683a      	ldr	r2, [r7, #0]
 8004932:	429a      	cmp	r2, r3
 8004934:	d20c      	bcs.n	8004950 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004936:	4b22      	ldr	r3, [pc, #136]	; (80049c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004938:	683a      	ldr	r2, [r7, #0]
 800493a:	b2d2      	uxtb	r2, r2
 800493c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800493e:	4b20      	ldr	r3, [pc, #128]	; (80049c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0307 	and.w	r3, r3, #7
 8004946:	683a      	ldr	r2, [r7, #0]
 8004948:	429a      	cmp	r2, r3
 800494a:	d001      	beq.n	8004950 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e032      	b.n	80049b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0304 	and.w	r3, r3, #4
 8004958:	2b00      	cmp	r3, #0
 800495a:	d008      	beq.n	800496e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800495c:	4b19      	ldr	r3, [pc, #100]	; (80049c4 <HAL_RCC_ClockConfig+0x1bc>)
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	4916      	ldr	r1, [pc, #88]	; (80049c4 <HAL_RCC_ClockConfig+0x1bc>)
 800496a:	4313      	orrs	r3, r2
 800496c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0308 	and.w	r3, r3, #8
 8004976:	2b00      	cmp	r3, #0
 8004978:	d009      	beq.n	800498e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800497a:	4b12      	ldr	r3, [pc, #72]	; (80049c4 <HAL_RCC_ClockConfig+0x1bc>)
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	00db      	lsls	r3, r3, #3
 8004988:	490e      	ldr	r1, [pc, #56]	; (80049c4 <HAL_RCC_ClockConfig+0x1bc>)
 800498a:	4313      	orrs	r3, r2
 800498c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800498e:	f000 f821 	bl	80049d4 <HAL_RCC_GetSysClockFreq>
 8004992:	4602      	mov	r2, r0
 8004994:	4b0b      	ldr	r3, [pc, #44]	; (80049c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	091b      	lsrs	r3, r3, #4
 800499a:	f003 030f 	and.w	r3, r3, #15
 800499e:	490a      	ldr	r1, [pc, #40]	; (80049c8 <HAL_RCC_ClockConfig+0x1c0>)
 80049a0:	5ccb      	ldrb	r3, [r1, r3]
 80049a2:	fa22 f303 	lsr.w	r3, r2, r3
 80049a6:	4a09      	ldr	r2, [pc, #36]	; (80049cc <HAL_RCC_ClockConfig+0x1c4>)
 80049a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80049aa:	4b09      	ldr	r3, [pc, #36]	; (80049d0 <HAL_RCC_ClockConfig+0x1c8>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4618      	mov	r0, r3
 80049b0:	f7fc faee 	bl	8000f90 <HAL_InitTick>

  return HAL_OK;
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3710      	adds	r7, #16
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	40023c00 	.word	0x40023c00
 80049c4:	40023800 	.word	0x40023800
 80049c8:	08007a1c 	.word	0x08007a1c
 80049cc:	20000000 	.word	0x20000000
 80049d0:	20000004 	.word	0x20000004

080049d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049d4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80049d8:	b084      	sub	sp, #16
 80049da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80049dc:	2300      	movs	r3, #0
 80049de:	607b      	str	r3, [r7, #4]
 80049e0:	2300      	movs	r3, #0
 80049e2:	60fb      	str	r3, [r7, #12]
 80049e4:	2300      	movs	r3, #0
 80049e6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80049e8:	2300      	movs	r3, #0
 80049ea:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049ec:	4b67      	ldr	r3, [pc, #412]	; (8004b8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f003 030c 	and.w	r3, r3, #12
 80049f4:	2b08      	cmp	r3, #8
 80049f6:	d00d      	beq.n	8004a14 <HAL_RCC_GetSysClockFreq+0x40>
 80049f8:	2b08      	cmp	r3, #8
 80049fa:	f200 80bd 	bhi.w	8004b78 <HAL_RCC_GetSysClockFreq+0x1a4>
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d002      	beq.n	8004a08 <HAL_RCC_GetSysClockFreq+0x34>
 8004a02:	2b04      	cmp	r3, #4
 8004a04:	d003      	beq.n	8004a0e <HAL_RCC_GetSysClockFreq+0x3a>
 8004a06:	e0b7      	b.n	8004b78 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a08:	4b61      	ldr	r3, [pc, #388]	; (8004b90 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004a0a:	60bb      	str	r3, [r7, #8]
       break;
 8004a0c:	e0b7      	b.n	8004b7e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a0e:	4b61      	ldr	r3, [pc, #388]	; (8004b94 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004a10:	60bb      	str	r3, [r7, #8]
      break;
 8004a12:	e0b4      	b.n	8004b7e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a14:	4b5d      	ldr	r3, [pc, #372]	; (8004b8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a1c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a1e:	4b5b      	ldr	r3, [pc, #364]	; (8004b8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d04d      	beq.n	8004ac6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a2a:	4b58      	ldr	r3, [pc, #352]	; (8004b8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	099b      	lsrs	r3, r3, #6
 8004a30:	461a      	mov	r2, r3
 8004a32:	f04f 0300 	mov.w	r3, #0
 8004a36:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004a3a:	f04f 0100 	mov.w	r1, #0
 8004a3e:	ea02 0800 	and.w	r8, r2, r0
 8004a42:	ea03 0901 	and.w	r9, r3, r1
 8004a46:	4640      	mov	r0, r8
 8004a48:	4649      	mov	r1, r9
 8004a4a:	f04f 0200 	mov.w	r2, #0
 8004a4e:	f04f 0300 	mov.w	r3, #0
 8004a52:	014b      	lsls	r3, r1, #5
 8004a54:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004a58:	0142      	lsls	r2, r0, #5
 8004a5a:	4610      	mov	r0, r2
 8004a5c:	4619      	mov	r1, r3
 8004a5e:	ebb0 0008 	subs.w	r0, r0, r8
 8004a62:	eb61 0109 	sbc.w	r1, r1, r9
 8004a66:	f04f 0200 	mov.w	r2, #0
 8004a6a:	f04f 0300 	mov.w	r3, #0
 8004a6e:	018b      	lsls	r3, r1, #6
 8004a70:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004a74:	0182      	lsls	r2, r0, #6
 8004a76:	1a12      	subs	r2, r2, r0
 8004a78:	eb63 0301 	sbc.w	r3, r3, r1
 8004a7c:	f04f 0000 	mov.w	r0, #0
 8004a80:	f04f 0100 	mov.w	r1, #0
 8004a84:	00d9      	lsls	r1, r3, #3
 8004a86:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a8a:	00d0      	lsls	r0, r2, #3
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	460b      	mov	r3, r1
 8004a90:	eb12 0208 	adds.w	r2, r2, r8
 8004a94:	eb43 0309 	adc.w	r3, r3, r9
 8004a98:	f04f 0000 	mov.w	r0, #0
 8004a9c:	f04f 0100 	mov.w	r1, #0
 8004aa0:	0259      	lsls	r1, r3, #9
 8004aa2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004aa6:	0250      	lsls	r0, r2, #9
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	460b      	mov	r3, r1
 8004aac:	4610      	mov	r0, r2
 8004aae:	4619      	mov	r1, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	f04f 0300 	mov.w	r3, #0
 8004ab8:	f7fb fb8a 	bl	80001d0 <__aeabi_uldivmod>
 8004abc:	4602      	mov	r2, r0
 8004abe:	460b      	mov	r3, r1
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	60fb      	str	r3, [r7, #12]
 8004ac4:	e04a      	b.n	8004b5c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ac6:	4b31      	ldr	r3, [pc, #196]	; (8004b8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	099b      	lsrs	r3, r3, #6
 8004acc:	461a      	mov	r2, r3
 8004ace:	f04f 0300 	mov.w	r3, #0
 8004ad2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004ad6:	f04f 0100 	mov.w	r1, #0
 8004ada:	ea02 0400 	and.w	r4, r2, r0
 8004ade:	ea03 0501 	and.w	r5, r3, r1
 8004ae2:	4620      	mov	r0, r4
 8004ae4:	4629      	mov	r1, r5
 8004ae6:	f04f 0200 	mov.w	r2, #0
 8004aea:	f04f 0300 	mov.w	r3, #0
 8004aee:	014b      	lsls	r3, r1, #5
 8004af0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004af4:	0142      	lsls	r2, r0, #5
 8004af6:	4610      	mov	r0, r2
 8004af8:	4619      	mov	r1, r3
 8004afa:	1b00      	subs	r0, r0, r4
 8004afc:	eb61 0105 	sbc.w	r1, r1, r5
 8004b00:	f04f 0200 	mov.w	r2, #0
 8004b04:	f04f 0300 	mov.w	r3, #0
 8004b08:	018b      	lsls	r3, r1, #6
 8004b0a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004b0e:	0182      	lsls	r2, r0, #6
 8004b10:	1a12      	subs	r2, r2, r0
 8004b12:	eb63 0301 	sbc.w	r3, r3, r1
 8004b16:	f04f 0000 	mov.w	r0, #0
 8004b1a:	f04f 0100 	mov.w	r1, #0
 8004b1e:	00d9      	lsls	r1, r3, #3
 8004b20:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b24:	00d0      	lsls	r0, r2, #3
 8004b26:	4602      	mov	r2, r0
 8004b28:	460b      	mov	r3, r1
 8004b2a:	1912      	adds	r2, r2, r4
 8004b2c:	eb45 0303 	adc.w	r3, r5, r3
 8004b30:	f04f 0000 	mov.w	r0, #0
 8004b34:	f04f 0100 	mov.w	r1, #0
 8004b38:	0299      	lsls	r1, r3, #10
 8004b3a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004b3e:	0290      	lsls	r0, r2, #10
 8004b40:	4602      	mov	r2, r0
 8004b42:	460b      	mov	r3, r1
 8004b44:	4610      	mov	r0, r2
 8004b46:	4619      	mov	r1, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	f04f 0300 	mov.w	r3, #0
 8004b50:	f7fb fb3e 	bl	80001d0 <__aeabi_uldivmod>
 8004b54:	4602      	mov	r2, r0
 8004b56:	460b      	mov	r3, r1
 8004b58:	4613      	mov	r3, r2
 8004b5a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b5c:	4b0b      	ldr	r3, [pc, #44]	; (8004b8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	0c1b      	lsrs	r3, r3, #16
 8004b62:	f003 0303 	and.w	r3, r3, #3
 8004b66:	3301      	adds	r3, #1
 8004b68:	005b      	lsls	r3, r3, #1
 8004b6a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b74:	60bb      	str	r3, [r7, #8]
      break;
 8004b76:	e002      	b.n	8004b7e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b78:	4b05      	ldr	r3, [pc, #20]	; (8004b90 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004b7a:	60bb      	str	r3, [r7, #8]
      break;
 8004b7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b7e:	68bb      	ldr	r3, [r7, #8]
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3710      	adds	r7, #16
 8004b84:	46bd      	mov	sp, r7
 8004b86:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004b8a:	bf00      	nop
 8004b8c:	40023800 	.word	0x40023800
 8004b90:	00f42400 	.word	0x00f42400
 8004b94:	007a1200 	.word	0x007a1200

08004b98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b9c:	4b03      	ldr	r3, [pc, #12]	; (8004bac <HAL_RCC_GetHCLKFreq+0x14>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	20000000 	.word	0x20000000

08004bb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004bb4:	f7ff fff0 	bl	8004b98 <HAL_RCC_GetHCLKFreq>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	4b05      	ldr	r3, [pc, #20]	; (8004bd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	0a9b      	lsrs	r3, r3, #10
 8004bc0:	f003 0307 	and.w	r3, r3, #7
 8004bc4:	4903      	ldr	r1, [pc, #12]	; (8004bd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bc6:	5ccb      	ldrb	r3, [r1, r3]
 8004bc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	40023800 	.word	0x40023800
 8004bd4:	08007a2c 	.word	0x08007a2c

08004bd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004bdc:	f7ff ffdc 	bl	8004b98 <HAL_RCC_GetHCLKFreq>
 8004be0:	4602      	mov	r2, r0
 8004be2:	4b05      	ldr	r3, [pc, #20]	; (8004bf8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	0b5b      	lsrs	r3, r3, #13
 8004be8:	f003 0307 	and.w	r3, r3, #7
 8004bec:	4903      	ldr	r1, [pc, #12]	; (8004bfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bee:	5ccb      	ldrb	r3, [r1, r3]
 8004bf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	40023800 	.word	0x40023800
 8004bfc:	08007a2c 	.word	0x08007a2c

08004c00 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	220f      	movs	r2, #15
 8004c0e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004c10:	4b12      	ldr	r3, [pc, #72]	; (8004c5c <HAL_RCC_GetClockConfig+0x5c>)
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f003 0203 	and.w	r2, r3, #3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004c1c:	4b0f      	ldr	r3, [pc, #60]	; (8004c5c <HAL_RCC_GetClockConfig+0x5c>)
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004c28:	4b0c      	ldr	r3, [pc, #48]	; (8004c5c <HAL_RCC_GetClockConfig+0x5c>)
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004c34:	4b09      	ldr	r3, [pc, #36]	; (8004c5c <HAL_RCC_GetClockConfig+0x5c>)
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	08db      	lsrs	r3, r3, #3
 8004c3a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004c42:	4b07      	ldr	r3, [pc, #28]	; (8004c60 <HAL_RCC_GetClockConfig+0x60>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0207 	and.w	r2, r3, #7
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	601a      	str	r2, [r3, #0]
}
 8004c4e:	bf00      	nop
 8004c50:	370c      	adds	r7, #12
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	40023800 	.word	0x40023800
 8004c60:	40023c00 	.word	0x40023c00

08004c64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d101      	bne.n	8004c76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e041      	b.n	8004cfa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d106      	bne.n	8004c90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 f839 	bl	8004d02 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2202      	movs	r2, #2
 8004c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	3304      	adds	r3, #4
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	4610      	mov	r0, r2
 8004ca4:	f000 f9d8 	bl	8005058 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3708      	adds	r7, #8
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004d02:	b480      	push	{r7}
 8004d04:	b083      	sub	sp, #12
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004d0a:	bf00      	nop
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
	...

08004d18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b085      	sub	sp, #20
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d001      	beq.n	8004d30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e04e      	b.n	8004dce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2202      	movs	r2, #2
 8004d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	68da      	ldr	r2, [r3, #12]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f042 0201 	orr.w	r2, r2, #1
 8004d46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a23      	ldr	r2, [pc, #140]	; (8004ddc <HAL_TIM_Base_Start_IT+0xc4>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d022      	beq.n	8004d98 <HAL_TIM_Base_Start_IT+0x80>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d5a:	d01d      	beq.n	8004d98 <HAL_TIM_Base_Start_IT+0x80>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a1f      	ldr	r2, [pc, #124]	; (8004de0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d018      	beq.n	8004d98 <HAL_TIM_Base_Start_IT+0x80>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a1e      	ldr	r2, [pc, #120]	; (8004de4 <HAL_TIM_Base_Start_IT+0xcc>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d013      	beq.n	8004d98 <HAL_TIM_Base_Start_IT+0x80>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a1c      	ldr	r2, [pc, #112]	; (8004de8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d00e      	beq.n	8004d98 <HAL_TIM_Base_Start_IT+0x80>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a1b      	ldr	r2, [pc, #108]	; (8004dec <HAL_TIM_Base_Start_IT+0xd4>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d009      	beq.n	8004d98 <HAL_TIM_Base_Start_IT+0x80>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a19      	ldr	r2, [pc, #100]	; (8004df0 <HAL_TIM_Base_Start_IT+0xd8>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d004      	beq.n	8004d98 <HAL_TIM_Base_Start_IT+0x80>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a18      	ldr	r2, [pc, #96]	; (8004df4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d111      	bne.n	8004dbc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f003 0307 	and.w	r3, r3, #7
 8004da2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2b06      	cmp	r3, #6
 8004da8:	d010      	beq.n	8004dcc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f042 0201 	orr.w	r2, r2, #1
 8004db8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dba:	e007      	b.n	8004dcc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f042 0201 	orr.w	r2, r2, #1
 8004dca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3714      	adds	r7, #20
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	40010000 	.word	0x40010000
 8004de0:	40000400 	.word	0x40000400
 8004de4:	40000800 	.word	0x40000800
 8004de8:	40000c00 	.word	0x40000c00
 8004dec:	40010400 	.word	0x40010400
 8004df0:	40014000 	.word	0x40014000
 8004df4:	40001800 	.word	0x40001800

08004df8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	f003 0302 	and.w	r3, r3, #2
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	d122      	bne.n	8004e54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	f003 0302 	and.w	r3, r3, #2
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d11b      	bne.n	8004e54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f06f 0202 	mvn.w	r2, #2
 8004e24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	699b      	ldr	r3, [r3, #24]
 8004e32:	f003 0303 	and.w	r3, r3, #3
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d003      	beq.n	8004e42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 f8ee 	bl	800501c <HAL_TIM_IC_CaptureCallback>
 8004e40:	e005      	b.n	8004e4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 f8e0 	bl	8005008 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f000 f8f1 	bl	8005030 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	f003 0304 	and.w	r3, r3, #4
 8004e5e:	2b04      	cmp	r3, #4
 8004e60:	d122      	bne.n	8004ea8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	f003 0304 	and.w	r3, r3, #4
 8004e6c:	2b04      	cmp	r3, #4
 8004e6e:	d11b      	bne.n	8004ea8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f06f 0204 	mvn.w	r2, #4
 8004e78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2202      	movs	r2, #2
 8004e7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d003      	beq.n	8004e96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 f8c4 	bl	800501c <HAL_TIM_IC_CaptureCallback>
 8004e94:	e005      	b.n	8004ea2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 f8b6 	bl	8005008 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f000 f8c7 	bl	8005030 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	f003 0308 	and.w	r3, r3, #8
 8004eb2:	2b08      	cmp	r3, #8
 8004eb4:	d122      	bne.n	8004efc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	f003 0308 	and.w	r3, r3, #8
 8004ec0:	2b08      	cmp	r3, #8
 8004ec2:	d11b      	bne.n	8004efc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f06f 0208 	mvn.w	r2, #8
 8004ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2204      	movs	r2, #4
 8004ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	69db      	ldr	r3, [r3, #28]
 8004eda:	f003 0303 	and.w	r3, r3, #3
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d003      	beq.n	8004eea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 f89a 	bl	800501c <HAL_TIM_IC_CaptureCallback>
 8004ee8:	e005      	b.n	8004ef6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 f88c 	bl	8005008 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 f89d 	bl	8005030 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	f003 0310 	and.w	r3, r3, #16
 8004f06:	2b10      	cmp	r3, #16
 8004f08:	d122      	bne.n	8004f50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	f003 0310 	and.w	r3, r3, #16
 8004f14:	2b10      	cmp	r3, #16
 8004f16:	d11b      	bne.n	8004f50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f06f 0210 	mvn.w	r2, #16
 8004f20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2208      	movs	r2, #8
 8004f26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	69db      	ldr	r3, [r3, #28]
 8004f2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d003      	beq.n	8004f3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 f870 	bl	800501c <HAL_TIM_IC_CaptureCallback>
 8004f3c:	e005      	b.n	8004f4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f000 f862 	bl	8005008 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f000 f873 	bl	8005030 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	f003 0301 	and.w	r3, r3, #1
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d10e      	bne.n	8004f7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	f003 0301 	and.w	r3, r3, #1
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d107      	bne.n	8004f7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f06f 0201 	mvn.w	r2, #1
 8004f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f7fb ffa8 	bl	8000ecc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f86:	2b80      	cmp	r3, #128	; 0x80
 8004f88:	d10e      	bne.n	8004fa8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f94:	2b80      	cmp	r3, #128	; 0x80
 8004f96:	d107      	bne.n	8004fa8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 f902 	bl	80051ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb2:	2b40      	cmp	r3, #64	; 0x40
 8004fb4:	d10e      	bne.n	8004fd4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc0:	2b40      	cmp	r3, #64	; 0x40
 8004fc2:	d107      	bne.n	8004fd4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004fcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 f838 	bl	8005044 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	f003 0320 	and.w	r3, r3, #32
 8004fde:	2b20      	cmp	r3, #32
 8004fe0:	d10e      	bne.n	8005000 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	f003 0320 	and.w	r3, r3, #32
 8004fec:	2b20      	cmp	r3, #32
 8004fee:	d107      	bne.n	8005000 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f06f 0220 	mvn.w	r2, #32
 8004ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 f8cc 	bl	8005198 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005000:	bf00      	nop
 8005002:	3708      	adds	r7, #8
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005010:	bf00      	nop
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005024:	bf00      	nop
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005038:	bf00      	nop
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800504c:	bf00      	nop
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a40      	ldr	r2, [pc, #256]	; (800516c <TIM_Base_SetConfig+0x114>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d013      	beq.n	8005098 <TIM_Base_SetConfig+0x40>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005076:	d00f      	beq.n	8005098 <TIM_Base_SetConfig+0x40>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a3d      	ldr	r2, [pc, #244]	; (8005170 <TIM_Base_SetConfig+0x118>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d00b      	beq.n	8005098 <TIM_Base_SetConfig+0x40>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a3c      	ldr	r2, [pc, #240]	; (8005174 <TIM_Base_SetConfig+0x11c>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d007      	beq.n	8005098 <TIM_Base_SetConfig+0x40>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a3b      	ldr	r2, [pc, #236]	; (8005178 <TIM_Base_SetConfig+0x120>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d003      	beq.n	8005098 <TIM_Base_SetConfig+0x40>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a3a      	ldr	r2, [pc, #232]	; (800517c <TIM_Base_SetConfig+0x124>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d108      	bne.n	80050aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800509e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a2f      	ldr	r2, [pc, #188]	; (800516c <TIM_Base_SetConfig+0x114>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d02b      	beq.n	800510a <TIM_Base_SetConfig+0xb2>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050b8:	d027      	beq.n	800510a <TIM_Base_SetConfig+0xb2>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a2c      	ldr	r2, [pc, #176]	; (8005170 <TIM_Base_SetConfig+0x118>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d023      	beq.n	800510a <TIM_Base_SetConfig+0xb2>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a2b      	ldr	r2, [pc, #172]	; (8005174 <TIM_Base_SetConfig+0x11c>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d01f      	beq.n	800510a <TIM_Base_SetConfig+0xb2>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a2a      	ldr	r2, [pc, #168]	; (8005178 <TIM_Base_SetConfig+0x120>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d01b      	beq.n	800510a <TIM_Base_SetConfig+0xb2>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a29      	ldr	r2, [pc, #164]	; (800517c <TIM_Base_SetConfig+0x124>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d017      	beq.n	800510a <TIM_Base_SetConfig+0xb2>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a28      	ldr	r2, [pc, #160]	; (8005180 <TIM_Base_SetConfig+0x128>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d013      	beq.n	800510a <TIM_Base_SetConfig+0xb2>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a27      	ldr	r2, [pc, #156]	; (8005184 <TIM_Base_SetConfig+0x12c>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d00f      	beq.n	800510a <TIM_Base_SetConfig+0xb2>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a26      	ldr	r2, [pc, #152]	; (8005188 <TIM_Base_SetConfig+0x130>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d00b      	beq.n	800510a <TIM_Base_SetConfig+0xb2>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a25      	ldr	r2, [pc, #148]	; (800518c <TIM_Base_SetConfig+0x134>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d007      	beq.n	800510a <TIM_Base_SetConfig+0xb2>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a24      	ldr	r2, [pc, #144]	; (8005190 <TIM_Base_SetConfig+0x138>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d003      	beq.n	800510a <TIM_Base_SetConfig+0xb2>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a23      	ldr	r2, [pc, #140]	; (8005194 <TIM_Base_SetConfig+0x13c>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d108      	bne.n	800511c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005110:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	4313      	orrs	r3, r2
 800511a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	4313      	orrs	r3, r2
 8005128:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	689a      	ldr	r2, [r3, #8]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a0a      	ldr	r2, [pc, #40]	; (800516c <TIM_Base_SetConfig+0x114>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d003      	beq.n	8005150 <TIM_Base_SetConfig+0xf8>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a0c      	ldr	r2, [pc, #48]	; (800517c <TIM_Base_SetConfig+0x124>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d103      	bne.n	8005158 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	691a      	ldr	r2, [r3, #16]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	615a      	str	r2, [r3, #20]
}
 800515e:	bf00      	nop
 8005160:	3714      	adds	r7, #20
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr
 800516a:	bf00      	nop
 800516c:	40010000 	.word	0x40010000
 8005170:	40000400 	.word	0x40000400
 8005174:	40000800 	.word	0x40000800
 8005178:	40000c00 	.word	0x40000c00
 800517c:	40010400 	.word	0x40010400
 8005180:	40014000 	.word	0x40014000
 8005184:	40014400 	.word	0x40014400
 8005188:	40014800 	.word	0x40014800
 800518c:	40001800 	.word	0x40001800
 8005190:	40001c00 	.word	0x40001c00
 8005194:	40002000 	.word	0x40002000

08005198 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051a0:	bf00      	nop
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051b4:	bf00      	nop
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d101      	bne.n	80051d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e03f      	b.n	8005252 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d106      	bne.n	80051ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f7fb ffda 	bl	80011a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2224      	movs	r2, #36	; 0x24
 80051f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68da      	ldr	r2, [r3, #12]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005202:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 fe7d 	bl	8005f04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	691a      	ldr	r2, [r3, #16]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005218:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	695a      	ldr	r2, [r3, #20]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005228:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68da      	ldr	r2, [r3, #12]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005238:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2220      	movs	r2, #32
 8005244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2220      	movs	r2, #32
 800524c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	3708      	adds	r7, #8
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}

0800525a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800525a:	b580      	push	{r7, lr}
 800525c:	b08a      	sub	sp, #40	; 0x28
 800525e:	af02      	add	r7, sp, #8
 8005260:	60f8      	str	r0, [r7, #12]
 8005262:	60b9      	str	r1, [r7, #8]
 8005264:	603b      	str	r3, [r7, #0]
 8005266:	4613      	mov	r3, r2
 8005268:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800526a:	2300      	movs	r3, #0
 800526c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005274:	b2db      	uxtb	r3, r3
 8005276:	2b20      	cmp	r3, #32
 8005278:	d17c      	bne.n	8005374 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d002      	beq.n	8005286 <HAL_UART_Transmit+0x2c>
 8005280:	88fb      	ldrh	r3, [r7, #6]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d101      	bne.n	800528a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e075      	b.n	8005376 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005290:	2b01      	cmp	r3, #1
 8005292:	d101      	bne.n	8005298 <HAL_UART_Transmit+0x3e>
 8005294:	2302      	movs	r3, #2
 8005296:	e06e      	b.n	8005376 <HAL_UART_Transmit+0x11c>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2200      	movs	r2, #0
 80052a4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2221      	movs	r2, #33	; 0x21
 80052aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052ae:	f7fc f865 	bl	800137c <HAL_GetTick>
 80052b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	88fa      	ldrh	r2, [r7, #6]
 80052b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	88fa      	ldrh	r2, [r7, #6]
 80052be:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052c8:	d108      	bne.n	80052dc <HAL_UART_Transmit+0x82>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d104      	bne.n	80052dc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80052d2:	2300      	movs	r3, #0
 80052d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	61bb      	str	r3, [r7, #24]
 80052da:	e003      	b.n	80052e4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052e0:	2300      	movs	r3, #0
 80052e2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80052ec:	e02a      	b.n	8005344 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	9300      	str	r3, [sp, #0]
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	2200      	movs	r2, #0
 80052f6:	2180      	movs	r1, #128	; 0x80
 80052f8:	68f8      	ldr	r0, [r7, #12]
 80052fa:	f000 fbc1 	bl	8005a80 <UART_WaitOnFlagUntilTimeout>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d001      	beq.n	8005308 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	e036      	b.n	8005376 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d10b      	bne.n	8005326 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	881b      	ldrh	r3, [r3, #0]
 8005312:	461a      	mov	r2, r3
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800531c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	3302      	adds	r3, #2
 8005322:	61bb      	str	r3, [r7, #24]
 8005324:	e007      	b.n	8005336 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	781a      	ldrb	r2, [r3, #0]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	3301      	adds	r3, #1
 8005334:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800533a:	b29b      	uxth	r3, r3
 800533c:	3b01      	subs	r3, #1
 800533e:	b29a      	uxth	r2, r3
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005348:	b29b      	uxth	r3, r3
 800534a:	2b00      	cmp	r3, #0
 800534c:	d1cf      	bne.n	80052ee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	9300      	str	r3, [sp, #0]
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	2200      	movs	r2, #0
 8005356:	2140      	movs	r1, #64	; 0x40
 8005358:	68f8      	ldr	r0, [r7, #12]
 800535a:	f000 fb91 	bl	8005a80 <UART_WaitOnFlagUntilTimeout>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d001      	beq.n	8005368 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	e006      	b.n	8005376 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2220      	movs	r2, #32
 800536c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005370:	2300      	movs	r3, #0
 8005372:	e000      	b.n	8005376 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005374:	2302      	movs	r3, #2
  }
}
 8005376:	4618      	mov	r0, r3
 8005378:	3720      	adds	r7, #32
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}

0800537e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800537e:	b580      	push	{r7, lr}
 8005380:	b084      	sub	sp, #16
 8005382:	af00      	add	r7, sp, #0
 8005384:	60f8      	str	r0, [r7, #12]
 8005386:	60b9      	str	r1, [r7, #8]
 8005388:	4613      	mov	r3, r2
 800538a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005392:	b2db      	uxtb	r3, r3
 8005394:	2b20      	cmp	r3, #32
 8005396:	d11d      	bne.n	80053d4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d002      	beq.n	80053a4 <HAL_UART_Receive_IT+0x26>
 800539e:	88fb      	ldrh	r3, [r7, #6]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d101      	bne.n	80053a8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e016      	b.n	80053d6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d101      	bne.n	80053b6 <HAL_UART_Receive_IT+0x38>
 80053b2:	2302      	movs	r3, #2
 80053b4:	e00f      	b.n	80053d6 <HAL_UART_Receive_IT+0x58>
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2200      	movs	r2, #0
 80053c2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80053c4:	88fb      	ldrh	r3, [r7, #6]
 80053c6:	461a      	mov	r2, r3
 80053c8:	68b9      	ldr	r1, [r7, #8]
 80053ca:	68f8      	ldr	r0, [r7, #12]
 80053cc:	f000 fbc6 	bl	8005b5c <UART_Start_Receive_IT>
 80053d0:	4603      	mov	r3, r0
 80053d2:	e000      	b.n	80053d6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80053d4:	2302      	movs	r3, #2
  }
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3710      	adds	r7, #16
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}

080053de <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80053de:	b580      	push	{r7, lr}
 80053e0:	b09a      	sub	sp, #104	; 0x68
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	330c      	adds	r3, #12
 80053ec:	64bb      	str	r3, [r7, #72]	; 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053f0:	e853 3f00 	ldrex	r3, [r3]
 80053f4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80053f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053fc:	667b      	str	r3, [r7, #100]	; 0x64
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	330c      	adds	r3, #12
 8005404:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005406:	657a      	str	r2, [r7, #84]	; 0x54
 8005408:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800540a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800540c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800540e:	e841 2300 	strex	r3, r2, [r1]
 8005412:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005414:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005416:	2b00      	cmp	r3, #0
 8005418:	d1e5      	bne.n	80053e6 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	3314      	adds	r3, #20
 8005420:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005424:	e853 3f00 	ldrex	r3, [r3]
 8005428:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800542a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542c:	f023 0301 	bic.w	r3, r3, #1
 8005430:	663b      	str	r3, [r7, #96]	; 0x60
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	3314      	adds	r3, #20
 8005438:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800543a:	643a      	str	r2, [r7, #64]	; 0x40
 800543c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800543e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005440:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005442:	e841 2300 	strex	r3, r2, [r1]
 8005446:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800544a:	2b00      	cmp	r3, #0
 800544c:	d1e5      	bne.n	800541a <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005452:	2b01      	cmp	r3, #1
 8005454:	d119      	bne.n	800548a <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	330c      	adds	r3, #12
 800545c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800545e:	6a3b      	ldr	r3, [r7, #32]
 8005460:	e853 3f00 	ldrex	r3, [r3]
 8005464:	61fb      	str	r3, [r7, #28]
   return(result);
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	f023 0310 	bic.w	r3, r3, #16
 800546c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	330c      	adds	r3, #12
 8005474:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005476:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005478:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800547c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800547e:	e841 2300 	strex	r3, r2, [r1]
 8005482:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1e5      	bne.n	8005456 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	695b      	ldr	r3, [r3, #20]
 8005490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005494:	2b40      	cmp	r3, #64	; 0x40
 8005496:	d136      	bne.n	8005506 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	3314      	adds	r3, #20
 800549e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	e853 3f00 	ldrex	r3, [r3]
 80054a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	3314      	adds	r3, #20
 80054b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80054b8:	61ba      	str	r2, [r7, #24]
 80054ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054bc:	6979      	ldr	r1, [r7, #20]
 80054be:	69ba      	ldr	r2, [r7, #24]
 80054c0:	e841 2300 	strex	r3, r2, [r1]
 80054c4:	613b      	str	r3, [r7, #16]
   return(result);
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d1e5      	bne.n	8005498 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d018      	beq.n	8005506 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d8:	2200      	movs	r2, #0
 80054da:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e0:	4618      	mov	r0, r3
 80054e2:	f7fc f839 	bl	8001558 <HAL_DMA_Abort>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d00c      	beq.n	8005506 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f0:	4618      	mov	r0, r3
 80054f2:	f7fc f8d1 	bl	8001698 <HAL_DMA_GetError>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b20      	cmp	r3, #32
 80054fa:	d104      	bne.n	8005506 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2210      	movs	r2, #16
 8005500:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8005502:	2303      	movs	r3, #3
 8005504:	e00a      	b.n	800551c <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2220      	movs	r2, #32
 8005510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800551a:	2300      	movs	r3, #0
}
 800551c:	4618      	mov	r0, r3
 800551e:	3768      	adds	r7, #104	; 0x68
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b0ba      	sub	sp, #232	; 0xe8
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	695b      	ldr	r3, [r3, #20]
 8005546:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800554a:	2300      	movs	r3, #0
 800554c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005550:	2300      	movs	r3, #0
 8005552:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800555a:	f003 030f 	and.w	r3, r3, #15
 800555e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005562:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005566:	2b00      	cmp	r3, #0
 8005568:	d10f      	bne.n	800558a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800556a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800556e:	f003 0320 	and.w	r3, r3, #32
 8005572:	2b00      	cmp	r3, #0
 8005574:	d009      	beq.n	800558a <HAL_UART_IRQHandler+0x66>
 8005576:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800557a:	f003 0320 	and.w	r3, r3, #32
 800557e:	2b00      	cmp	r3, #0
 8005580:	d003      	beq.n	800558a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 fc03 	bl	8005d8e <UART_Receive_IT>
      return;
 8005588:	e256      	b.n	8005a38 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800558a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800558e:	2b00      	cmp	r3, #0
 8005590:	f000 80de 	beq.w	8005750 <HAL_UART_IRQHandler+0x22c>
 8005594:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005598:	f003 0301 	and.w	r3, r3, #1
 800559c:	2b00      	cmp	r3, #0
 800559e:	d106      	bne.n	80055ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80055a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055a4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	f000 80d1 	beq.w	8005750 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80055ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055b2:	f003 0301 	and.w	r3, r3, #1
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00b      	beq.n	80055d2 <HAL_UART_IRQHandler+0xae>
 80055ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d005      	beq.n	80055d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ca:	f043 0201 	orr.w	r2, r3, #1
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055d6:	f003 0304 	and.w	r3, r3, #4
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d00b      	beq.n	80055f6 <HAL_UART_IRQHandler+0xd2>
 80055de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055e2:	f003 0301 	and.w	r3, r3, #1
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d005      	beq.n	80055f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ee:	f043 0202 	orr.w	r2, r3, #2
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055fa:	f003 0302 	and.w	r3, r3, #2
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d00b      	beq.n	800561a <HAL_UART_IRQHandler+0xf6>
 8005602:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005606:	f003 0301 	and.w	r3, r3, #1
 800560a:	2b00      	cmp	r3, #0
 800560c:	d005      	beq.n	800561a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005612:	f043 0204 	orr.w	r2, r3, #4
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800561a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800561e:	f003 0308 	and.w	r3, r3, #8
 8005622:	2b00      	cmp	r3, #0
 8005624:	d011      	beq.n	800564a <HAL_UART_IRQHandler+0x126>
 8005626:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800562a:	f003 0320 	and.w	r3, r3, #32
 800562e:	2b00      	cmp	r3, #0
 8005630:	d105      	bne.n	800563e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005632:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005636:	f003 0301 	and.w	r3, r3, #1
 800563a:	2b00      	cmp	r3, #0
 800563c:	d005      	beq.n	800564a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005642:	f043 0208 	orr.w	r2, r3, #8
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564e:	2b00      	cmp	r3, #0
 8005650:	f000 81ed 	beq.w	8005a2e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005658:	f003 0320 	and.w	r3, r3, #32
 800565c:	2b00      	cmp	r3, #0
 800565e:	d008      	beq.n	8005672 <HAL_UART_IRQHandler+0x14e>
 8005660:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005664:	f003 0320 	and.w	r3, r3, #32
 8005668:	2b00      	cmp	r3, #0
 800566a:	d002      	beq.n	8005672 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f000 fb8e 	bl	8005d8e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	695b      	ldr	r3, [r3, #20]
 8005678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800567c:	2b40      	cmp	r3, #64	; 0x40
 800567e:	bf0c      	ite	eq
 8005680:	2301      	moveq	r3, #1
 8005682:	2300      	movne	r3, #0
 8005684:	b2db      	uxtb	r3, r3
 8005686:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568e:	f003 0308 	and.w	r3, r3, #8
 8005692:	2b00      	cmp	r3, #0
 8005694:	d103      	bne.n	800569e <HAL_UART_IRQHandler+0x17a>
 8005696:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800569a:	2b00      	cmp	r3, #0
 800569c:	d04f      	beq.n	800573e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 fa96 	bl	8005bd0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	695b      	ldr	r3, [r3, #20]
 80056aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ae:	2b40      	cmp	r3, #64	; 0x40
 80056b0:	d141      	bne.n	8005736 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	3314      	adds	r3, #20
 80056b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80056c0:	e853 3f00 	ldrex	r3, [r3]
 80056c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80056c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80056cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	3314      	adds	r3, #20
 80056da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80056de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80056e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80056ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80056ee:	e841 2300 	strex	r3, r2, [r1]
 80056f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80056f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d1d9      	bne.n	80056b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005702:	2b00      	cmp	r3, #0
 8005704:	d013      	beq.n	800572e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570a:	4a7d      	ldr	r2, [pc, #500]	; (8005900 <HAL_UART_IRQHandler+0x3dc>)
 800570c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005712:	4618      	mov	r0, r3
 8005714:	f7fb ff90 	bl	8001638 <HAL_DMA_Abort_IT>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d016      	beq.n	800574c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005728:	4610      	mov	r0, r2
 800572a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800572c:	e00e      	b.n	800574c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 f990 	bl	8005a54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005734:	e00a      	b.n	800574c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 f98c 	bl	8005a54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800573c:	e006      	b.n	800574c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 f988 	bl	8005a54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800574a:	e170      	b.n	8005a2e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800574c:	bf00      	nop
    return;
 800574e:	e16e      	b.n	8005a2e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005754:	2b01      	cmp	r3, #1
 8005756:	f040 814a 	bne.w	80059ee <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800575a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800575e:	f003 0310 	and.w	r3, r3, #16
 8005762:	2b00      	cmp	r3, #0
 8005764:	f000 8143 	beq.w	80059ee <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800576c:	f003 0310 	and.w	r3, r3, #16
 8005770:	2b00      	cmp	r3, #0
 8005772:	f000 813c 	beq.w	80059ee <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005776:	2300      	movs	r3, #0
 8005778:	60bb      	str	r3, [r7, #8]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	60bb      	str	r3, [r7, #8]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	60bb      	str	r3, [r7, #8]
 800578a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	695b      	ldr	r3, [r3, #20]
 8005792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005796:	2b40      	cmp	r3, #64	; 0x40
 8005798:	f040 80b4 	bne.w	8005904 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80057a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f000 8140 	beq.w	8005a32 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80057b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057ba:	429a      	cmp	r2, r3
 80057bc:	f080 8139 	bcs.w	8005a32 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057c6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057cc:	69db      	ldr	r3, [r3, #28]
 80057ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057d2:	f000 8088 	beq.w	80058e6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	330c      	adds	r3, #12
 80057dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80057e4:	e853 3f00 	ldrex	r3, [r3]
 80057e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80057ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80057f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	330c      	adds	r3, #12
 80057fe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005802:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005806:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800580e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005812:	e841 2300 	strex	r3, r2, [r1]
 8005816:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800581a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800581e:	2b00      	cmp	r3, #0
 8005820:	d1d9      	bne.n	80057d6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	3314      	adds	r3, #20
 8005828:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800582c:	e853 3f00 	ldrex	r3, [r3]
 8005830:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005832:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005834:	f023 0301 	bic.w	r3, r3, #1
 8005838:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	3314      	adds	r3, #20
 8005842:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005846:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800584a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800584e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005852:	e841 2300 	strex	r3, r2, [r1]
 8005856:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005858:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800585a:	2b00      	cmp	r3, #0
 800585c:	d1e1      	bne.n	8005822 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	3314      	adds	r3, #20
 8005864:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005866:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005868:	e853 3f00 	ldrex	r3, [r3]
 800586c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800586e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005870:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005874:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	3314      	adds	r3, #20
 800587e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005882:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005884:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005886:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005888:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800588a:	e841 2300 	strex	r3, r2, [r1]
 800588e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005890:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005892:	2b00      	cmp	r3, #0
 8005894:	d1e3      	bne.n	800585e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2220      	movs	r2, #32
 800589a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	330c      	adds	r3, #12
 80058aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058ae:	e853 3f00 	ldrex	r3, [r3]
 80058b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80058b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058b6:	f023 0310 	bic.w	r3, r3, #16
 80058ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	330c      	adds	r3, #12
 80058c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80058c8:	65ba      	str	r2, [r7, #88]	; 0x58
 80058ca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80058ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80058d0:	e841 2300 	strex	r3, r2, [r1]
 80058d4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80058d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1e3      	bne.n	80058a4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e0:	4618      	mov	r0, r3
 80058e2:	f7fb fe39 	bl	8001558 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	4619      	mov	r1, r3
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 f8b6 	bl	8005a68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80058fc:	e099      	b.n	8005a32 <HAL_UART_IRQHandler+0x50e>
 80058fe:	bf00      	nop
 8005900:	08005c97 	.word	0x08005c97
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800590c:	b29b      	uxth	r3, r3
 800590e:	1ad3      	subs	r3, r2, r3
 8005910:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005918:	b29b      	uxth	r3, r3
 800591a:	2b00      	cmp	r3, #0
 800591c:	f000 808b 	beq.w	8005a36 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005920:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005924:	2b00      	cmp	r3, #0
 8005926:	f000 8086 	beq.w	8005a36 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	330c      	adds	r3, #12
 8005930:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005934:	e853 3f00 	ldrex	r3, [r3]
 8005938:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800593a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800593c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005940:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	330c      	adds	r3, #12
 800594a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800594e:	647a      	str	r2, [r7, #68]	; 0x44
 8005950:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005952:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005954:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005956:	e841 2300 	strex	r3, r2, [r1]
 800595a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800595c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800595e:	2b00      	cmp	r3, #0
 8005960:	d1e3      	bne.n	800592a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	3314      	adds	r3, #20
 8005968:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800596a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596c:	e853 3f00 	ldrex	r3, [r3]
 8005970:	623b      	str	r3, [r7, #32]
   return(result);
 8005972:	6a3b      	ldr	r3, [r7, #32]
 8005974:	f023 0301 	bic.w	r3, r3, #1
 8005978:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	3314      	adds	r3, #20
 8005982:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005986:	633a      	str	r2, [r7, #48]	; 0x30
 8005988:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800598a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800598c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800598e:	e841 2300 	strex	r3, r2, [r1]
 8005992:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1e3      	bne.n	8005962 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2220      	movs	r2, #32
 800599e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	330c      	adds	r3, #12
 80059ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	e853 3f00 	ldrex	r3, [r3]
 80059b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f023 0310 	bic.w	r3, r3, #16
 80059be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	330c      	adds	r3, #12
 80059c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80059cc:	61fa      	str	r2, [r7, #28]
 80059ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d0:	69b9      	ldr	r1, [r7, #24]
 80059d2:	69fa      	ldr	r2, [r7, #28]
 80059d4:	e841 2300 	strex	r3, r2, [r1]
 80059d8:	617b      	str	r3, [r7, #20]
   return(result);
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d1e3      	bne.n	80059a8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80059e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80059e4:	4619      	mov	r1, r3
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 f83e 	bl	8005a68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80059ec:	e023      	b.n	8005a36 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80059ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d009      	beq.n	8005a0e <HAL_UART_IRQHandler+0x4ea>
 80059fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d003      	beq.n	8005a0e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 f959 	bl	8005cbe <UART_Transmit_IT>
    return;
 8005a0c:	e014      	b.n	8005a38 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00e      	beq.n	8005a38 <HAL_UART_IRQHandler+0x514>
 8005a1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d008      	beq.n	8005a38 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 f999 	bl	8005d5e <UART_EndTransmit_IT>
    return;
 8005a2c:	e004      	b.n	8005a38 <HAL_UART_IRQHandler+0x514>
    return;
 8005a2e:	bf00      	nop
 8005a30:	e002      	b.n	8005a38 <HAL_UART_IRQHandler+0x514>
      return;
 8005a32:	bf00      	nop
 8005a34:	e000      	b.n	8005a38 <HAL_UART_IRQHandler+0x514>
      return;
 8005a36:	bf00      	nop
  }
}
 8005a38:	37e8      	adds	r7, #232	; 0xe8
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop

08005a40 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005a48:	bf00      	nop
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005a5c:	bf00      	nop
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	460b      	mov	r3, r1
 8005a72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a74:	bf00      	nop
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b090      	sub	sp, #64	; 0x40
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	60b9      	str	r1, [r7, #8]
 8005a8a:	603b      	str	r3, [r7, #0]
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a90:	e050      	b.n	8005b34 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a98:	d04c      	beq.n	8005b34 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005a9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d007      	beq.n	8005ab0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005aa0:	f7fb fc6c 	bl	800137c <HAL_GetTick>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d241      	bcs.n	8005b34 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	330c      	adds	r3, #12
 8005ab6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aba:	e853 3f00 	ldrex	r3, [r3]
 8005abe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	330c      	adds	r3, #12
 8005ace:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ad0:	637a      	str	r2, [r7, #52]	; 0x34
 8005ad2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ad6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ad8:	e841 2300 	strex	r3, r2, [r1]
 8005adc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d1e5      	bne.n	8005ab0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	3314      	adds	r3, #20
 8005aea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	e853 3f00 	ldrex	r3, [r3]
 8005af2:	613b      	str	r3, [r7, #16]
   return(result);
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	f023 0301 	bic.w	r3, r3, #1
 8005afa:	63bb      	str	r3, [r7, #56]	; 0x38
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	3314      	adds	r3, #20
 8005b02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b04:	623a      	str	r2, [r7, #32]
 8005b06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b08:	69f9      	ldr	r1, [r7, #28]
 8005b0a:	6a3a      	ldr	r2, [r7, #32]
 8005b0c:	e841 2300 	strex	r3, r2, [r1]
 8005b10:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d1e5      	bne.n	8005ae4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2220      	movs	r2, #32
 8005b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2220      	movs	r2, #32
 8005b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e00f      	b.n	8005b54 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	68ba      	ldr	r2, [r7, #8]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	bf0c      	ite	eq
 8005b44:	2301      	moveq	r3, #1
 8005b46:	2300      	movne	r3, #0
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	79fb      	ldrb	r3, [r7, #7]
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d09f      	beq.n	8005a92 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b52:	2300      	movs	r3, #0
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3740      	adds	r7, #64	; 0x40
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b085      	sub	sp, #20
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	4613      	mov	r3, r2
 8005b68:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	68ba      	ldr	r2, [r7, #8]
 8005b6e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	88fa      	ldrh	r2, [r7, #6]
 8005b74:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	88fa      	ldrh	r2, [r7, #6]
 8005b7a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2222      	movs	r2, #34	; 0x22
 8005b86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68da      	ldr	r2, [r3, #12]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ba0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	695a      	ldr	r2, [r3, #20]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f042 0201 	orr.w	r2, r2, #1
 8005bb0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	68da      	ldr	r2, [r3, #12]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f042 0220 	orr.w	r2, r2, #32
 8005bc0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005bc2:	2300      	movs	r3, #0
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3714      	adds	r7, #20
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b095      	sub	sp, #84	; 0x54
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	330c      	adds	r3, #12
 8005bde:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005be2:	e853 3f00 	ldrex	r3, [r3]
 8005be6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005bee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	330c      	adds	r3, #12
 8005bf6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005bf8:	643a      	str	r2, [r7, #64]	; 0x40
 8005bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bfc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005bfe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c00:	e841 2300 	strex	r3, r2, [r1]
 8005c04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d1e5      	bne.n	8005bd8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	3314      	adds	r3, #20
 8005c12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c14:	6a3b      	ldr	r3, [r7, #32]
 8005c16:	e853 3f00 	ldrex	r3, [r3]
 8005c1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	f023 0301 	bic.w	r3, r3, #1
 8005c22:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	3314      	adds	r3, #20
 8005c2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c34:	e841 2300 	strex	r3, r2, [r1]
 8005c38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d1e5      	bne.n	8005c0c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d119      	bne.n	8005c7c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	330c      	adds	r3, #12
 8005c4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	e853 3f00 	ldrex	r3, [r3]
 8005c56:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	f023 0310 	bic.w	r3, r3, #16
 8005c5e:	647b      	str	r3, [r7, #68]	; 0x44
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	330c      	adds	r3, #12
 8005c66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c68:	61ba      	str	r2, [r7, #24]
 8005c6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c6c:	6979      	ldr	r1, [r7, #20]
 8005c6e:	69ba      	ldr	r2, [r7, #24]
 8005c70:	e841 2300 	strex	r3, r2, [r1]
 8005c74:	613b      	str	r3, [r7, #16]
   return(result);
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d1e5      	bne.n	8005c48 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2220      	movs	r2, #32
 8005c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005c8a:	bf00      	nop
 8005c8c:	3754      	adds	r7, #84	; 0x54
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr

08005c96 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c96:	b580      	push	{r7, lr}
 8005c98:	b084      	sub	sp, #16
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2200      	movs	r2, #0
 8005cae:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005cb0:	68f8      	ldr	r0, [r7, #12]
 8005cb2:	f7ff fecf 	bl	8005a54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cb6:	bf00      	nop
 8005cb8:	3710      	adds	r7, #16
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}

08005cbe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005cbe:	b480      	push	{r7}
 8005cc0:	b085      	sub	sp, #20
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	2b21      	cmp	r3, #33	; 0x21
 8005cd0:	d13e      	bne.n	8005d50 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cda:	d114      	bne.n	8005d06 <UART_Transmit_IT+0x48>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	691b      	ldr	r3, [r3, #16]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d110      	bne.n	8005d06 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6a1b      	ldr	r3, [r3, #32]
 8005ce8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	881b      	ldrh	r3, [r3, #0]
 8005cee:	461a      	mov	r2, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cf8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a1b      	ldr	r3, [r3, #32]
 8005cfe:	1c9a      	adds	r2, r3, #2
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	621a      	str	r2, [r3, #32]
 8005d04:	e008      	b.n	8005d18 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a1b      	ldr	r3, [r3, #32]
 8005d0a:	1c59      	adds	r1, r3, #1
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	6211      	str	r1, [r2, #32]
 8005d10:	781a      	ldrb	r2, [r3, #0]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	3b01      	subs	r3, #1
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	4619      	mov	r1, r3
 8005d26:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d10f      	bne.n	8005d4c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68da      	ldr	r2, [r3, #12]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d3a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	68da      	ldr	r2, [r3, #12]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d4a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	e000      	b.n	8005d52 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005d50:	2302      	movs	r3, #2
  }
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3714      	adds	r7, #20
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr

08005d5e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d5e:	b580      	push	{r7, lr}
 8005d60:	b082      	sub	sp, #8
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68da      	ldr	r2, [r3, #12]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d74:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2220      	movs	r2, #32
 8005d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f7ff fe5e 	bl	8005a40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3708      	adds	r7, #8
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005d8e:	b580      	push	{r7, lr}
 8005d90:	b08c      	sub	sp, #48	; 0x30
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	2b22      	cmp	r3, #34	; 0x22
 8005da0:	f040 80ab 	bne.w	8005efa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dac:	d117      	bne.n	8005dde <UART_Receive_IT+0x50>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d113      	bne.n	8005dde <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005db6:	2300      	movs	r3, #0
 8005db8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dbe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dcc:	b29a      	uxth	r2, r3
 8005dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd6:	1c9a      	adds	r2, r3, #2
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	629a      	str	r2, [r3, #40]	; 0x28
 8005ddc:	e026      	b.n	8005e2c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005de4:	2300      	movs	r3, #0
 8005de6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005df0:	d007      	beq.n	8005e02 <UART_Receive_IT+0x74>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d10a      	bne.n	8005e10 <UART_Receive_IT+0x82>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d106      	bne.n	8005e10 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	b2da      	uxtb	r2, r3
 8005e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e0c:	701a      	strb	r2, [r3, #0]
 8005e0e:	e008      	b.n	8005e22 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e1c:	b2da      	uxtb	r2, r3
 8005e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e20:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e26:	1c5a      	adds	r2, r3, #1
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	3b01      	subs	r3, #1
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	4619      	mov	r1, r3
 8005e3a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d15a      	bne.n	8005ef6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	68da      	ldr	r2, [r3, #12]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f022 0220 	bic.w	r2, r2, #32
 8005e4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	68da      	ldr	r2, [r3, #12]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	695a      	ldr	r2, [r3, #20]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f022 0201 	bic.w	r2, r2, #1
 8005e6e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2220      	movs	r2, #32
 8005e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d135      	bne.n	8005eec <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	330c      	adds	r3, #12
 8005e8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	e853 3f00 	ldrex	r3, [r3]
 8005e94:	613b      	str	r3, [r7, #16]
   return(result);
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	f023 0310 	bic.w	r3, r3, #16
 8005e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	330c      	adds	r3, #12
 8005ea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ea6:	623a      	str	r2, [r7, #32]
 8005ea8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eaa:	69f9      	ldr	r1, [r7, #28]
 8005eac:	6a3a      	ldr	r2, [r7, #32]
 8005eae:	e841 2300 	strex	r3, r2, [r1]
 8005eb2:	61bb      	str	r3, [r7, #24]
   return(result);
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d1e5      	bne.n	8005e86 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 0310 	and.w	r3, r3, #16
 8005ec4:	2b10      	cmp	r3, #16
 8005ec6:	d10a      	bne.n	8005ede <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ec8:	2300      	movs	r3, #0
 8005eca:	60fb      	str	r3, [r7, #12]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	60fb      	str	r3, [r7, #12]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	60fb      	str	r3, [r7, #12]
 8005edc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f7ff fdbf 	bl	8005a68 <HAL_UARTEx_RxEventCallback>
 8005eea:	e002      	b.n	8005ef2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f7fa fd8d 	bl	8000a0c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	e002      	b.n	8005efc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	e000      	b.n	8005efc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005efa:	2302      	movs	r3, #2
  }
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3730      	adds	r7, #48	; 0x30
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f08:	b09f      	sub	sp, #124	; 0x7c
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	691b      	ldr	r3, [r3, #16]
 8005f14:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005f18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f1a:	68d9      	ldr	r1, [r3, #12]
 8005f1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	ea40 0301 	orr.w	r3, r0, r1
 8005f24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005f26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f28:	689a      	ldr	r2, [r3, #8]
 8005f2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	431a      	orrs	r2, r3
 8005f30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f32:	695b      	ldr	r3, [r3, #20]
 8005f34:	431a      	orrs	r2, r3
 8005f36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f38:	69db      	ldr	r3, [r3, #28]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005f3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005f48:	f021 010c 	bic.w	r1, r1, #12
 8005f4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f52:	430b      	orrs	r3, r1
 8005f54:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	695b      	ldr	r3, [r3, #20]
 8005f5c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005f60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f62:	6999      	ldr	r1, [r3, #24]
 8005f64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	ea40 0301 	orr.w	r3, r0, r1
 8005f6c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	4bc5      	ldr	r3, [pc, #788]	; (8006288 <UART_SetConfig+0x384>)
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d004      	beq.n	8005f82 <UART_SetConfig+0x7e>
 8005f78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	4bc3      	ldr	r3, [pc, #780]	; (800628c <UART_SetConfig+0x388>)
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d103      	bne.n	8005f8a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f82:	f7fe fe29 	bl	8004bd8 <HAL_RCC_GetPCLK2Freq>
 8005f86:	6778      	str	r0, [r7, #116]	; 0x74
 8005f88:	e002      	b.n	8005f90 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f8a:	f7fe fe11 	bl	8004bb0 <HAL_RCC_GetPCLK1Freq>
 8005f8e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f92:	69db      	ldr	r3, [r3, #28]
 8005f94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f98:	f040 80b6 	bne.w	8006108 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f9e:	461c      	mov	r4, r3
 8005fa0:	f04f 0500 	mov.w	r5, #0
 8005fa4:	4622      	mov	r2, r4
 8005fa6:	462b      	mov	r3, r5
 8005fa8:	1891      	adds	r1, r2, r2
 8005faa:	6439      	str	r1, [r7, #64]	; 0x40
 8005fac:	415b      	adcs	r3, r3
 8005fae:	647b      	str	r3, [r7, #68]	; 0x44
 8005fb0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005fb4:	1912      	adds	r2, r2, r4
 8005fb6:	eb45 0303 	adc.w	r3, r5, r3
 8005fba:	f04f 0000 	mov.w	r0, #0
 8005fbe:	f04f 0100 	mov.w	r1, #0
 8005fc2:	00d9      	lsls	r1, r3, #3
 8005fc4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005fc8:	00d0      	lsls	r0, r2, #3
 8005fca:	4602      	mov	r2, r0
 8005fcc:	460b      	mov	r3, r1
 8005fce:	1911      	adds	r1, r2, r4
 8005fd0:	6639      	str	r1, [r7, #96]	; 0x60
 8005fd2:	416b      	adcs	r3, r5
 8005fd4:	667b      	str	r3, [r7, #100]	; 0x64
 8005fd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	461a      	mov	r2, r3
 8005fdc:	f04f 0300 	mov.w	r3, #0
 8005fe0:	1891      	adds	r1, r2, r2
 8005fe2:	63b9      	str	r1, [r7, #56]	; 0x38
 8005fe4:	415b      	adcs	r3, r3
 8005fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fe8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005fec:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005ff0:	f7fa f8ee 	bl	80001d0 <__aeabi_uldivmod>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	460b      	mov	r3, r1
 8005ff8:	4ba5      	ldr	r3, [pc, #660]	; (8006290 <UART_SetConfig+0x38c>)
 8005ffa:	fba3 2302 	umull	r2, r3, r3, r2
 8005ffe:	095b      	lsrs	r3, r3, #5
 8006000:	011e      	lsls	r6, r3, #4
 8006002:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006004:	461c      	mov	r4, r3
 8006006:	f04f 0500 	mov.w	r5, #0
 800600a:	4622      	mov	r2, r4
 800600c:	462b      	mov	r3, r5
 800600e:	1891      	adds	r1, r2, r2
 8006010:	6339      	str	r1, [r7, #48]	; 0x30
 8006012:	415b      	adcs	r3, r3
 8006014:	637b      	str	r3, [r7, #52]	; 0x34
 8006016:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800601a:	1912      	adds	r2, r2, r4
 800601c:	eb45 0303 	adc.w	r3, r5, r3
 8006020:	f04f 0000 	mov.w	r0, #0
 8006024:	f04f 0100 	mov.w	r1, #0
 8006028:	00d9      	lsls	r1, r3, #3
 800602a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800602e:	00d0      	lsls	r0, r2, #3
 8006030:	4602      	mov	r2, r0
 8006032:	460b      	mov	r3, r1
 8006034:	1911      	adds	r1, r2, r4
 8006036:	65b9      	str	r1, [r7, #88]	; 0x58
 8006038:	416b      	adcs	r3, r5
 800603a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800603c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	461a      	mov	r2, r3
 8006042:	f04f 0300 	mov.w	r3, #0
 8006046:	1891      	adds	r1, r2, r2
 8006048:	62b9      	str	r1, [r7, #40]	; 0x28
 800604a:	415b      	adcs	r3, r3
 800604c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800604e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006052:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006056:	f7fa f8bb 	bl	80001d0 <__aeabi_uldivmod>
 800605a:	4602      	mov	r2, r0
 800605c:	460b      	mov	r3, r1
 800605e:	4b8c      	ldr	r3, [pc, #560]	; (8006290 <UART_SetConfig+0x38c>)
 8006060:	fba3 1302 	umull	r1, r3, r3, r2
 8006064:	095b      	lsrs	r3, r3, #5
 8006066:	2164      	movs	r1, #100	; 0x64
 8006068:	fb01 f303 	mul.w	r3, r1, r3
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	00db      	lsls	r3, r3, #3
 8006070:	3332      	adds	r3, #50	; 0x32
 8006072:	4a87      	ldr	r2, [pc, #540]	; (8006290 <UART_SetConfig+0x38c>)
 8006074:	fba2 2303 	umull	r2, r3, r2, r3
 8006078:	095b      	lsrs	r3, r3, #5
 800607a:	005b      	lsls	r3, r3, #1
 800607c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006080:	441e      	add	r6, r3
 8006082:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006084:	4618      	mov	r0, r3
 8006086:	f04f 0100 	mov.w	r1, #0
 800608a:	4602      	mov	r2, r0
 800608c:	460b      	mov	r3, r1
 800608e:	1894      	adds	r4, r2, r2
 8006090:	623c      	str	r4, [r7, #32]
 8006092:	415b      	adcs	r3, r3
 8006094:	627b      	str	r3, [r7, #36]	; 0x24
 8006096:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800609a:	1812      	adds	r2, r2, r0
 800609c:	eb41 0303 	adc.w	r3, r1, r3
 80060a0:	f04f 0400 	mov.w	r4, #0
 80060a4:	f04f 0500 	mov.w	r5, #0
 80060a8:	00dd      	lsls	r5, r3, #3
 80060aa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80060ae:	00d4      	lsls	r4, r2, #3
 80060b0:	4622      	mov	r2, r4
 80060b2:	462b      	mov	r3, r5
 80060b4:	1814      	adds	r4, r2, r0
 80060b6:	653c      	str	r4, [r7, #80]	; 0x50
 80060b8:	414b      	adcs	r3, r1
 80060ba:	657b      	str	r3, [r7, #84]	; 0x54
 80060bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	461a      	mov	r2, r3
 80060c2:	f04f 0300 	mov.w	r3, #0
 80060c6:	1891      	adds	r1, r2, r2
 80060c8:	61b9      	str	r1, [r7, #24]
 80060ca:	415b      	adcs	r3, r3
 80060cc:	61fb      	str	r3, [r7, #28]
 80060ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060d2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80060d6:	f7fa f87b 	bl	80001d0 <__aeabi_uldivmod>
 80060da:	4602      	mov	r2, r0
 80060dc:	460b      	mov	r3, r1
 80060de:	4b6c      	ldr	r3, [pc, #432]	; (8006290 <UART_SetConfig+0x38c>)
 80060e0:	fba3 1302 	umull	r1, r3, r3, r2
 80060e4:	095b      	lsrs	r3, r3, #5
 80060e6:	2164      	movs	r1, #100	; 0x64
 80060e8:	fb01 f303 	mul.w	r3, r1, r3
 80060ec:	1ad3      	subs	r3, r2, r3
 80060ee:	00db      	lsls	r3, r3, #3
 80060f0:	3332      	adds	r3, #50	; 0x32
 80060f2:	4a67      	ldr	r2, [pc, #412]	; (8006290 <UART_SetConfig+0x38c>)
 80060f4:	fba2 2303 	umull	r2, r3, r2, r3
 80060f8:	095b      	lsrs	r3, r3, #5
 80060fa:	f003 0207 	and.w	r2, r3, #7
 80060fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4432      	add	r2, r6
 8006104:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006106:	e0b9      	b.n	800627c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006108:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800610a:	461c      	mov	r4, r3
 800610c:	f04f 0500 	mov.w	r5, #0
 8006110:	4622      	mov	r2, r4
 8006112:	462b      	mov	r3, r5
 8006114:	1891      	adds	r1, r2, r2
 8006116:	6139      	str	r1, [r7, #16]
 8006118:	415b      	adcs	r3, r3
 800611a:	617b      	str	r3, [r7, #20]
 800611c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006120:	1912      	adds	r2, r2, r4
 8006122:	eb45 0303 	adc.w	r3, r5, r3
 8006126:	f04f 0000 	mov.w	r0, #0
 800612a:	f04f 0100 	mov.w	r1, #0
 800612e:	00d9      	lsls	r1, r3, #3
 8006130:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006134:	00d0      	lsls	r0, r2, #3
 8006136:	4602      	mov	r2, r0
 8006138:	460b      	mov	r3, r1
 800613a:	eb12 0804 	adds.w	r8, r2, r4
 800613e:	eb43 0905 	adc.w	r9, r3, r5
 8006142:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	4618      	mov	r0, r3
 8006148:	f04f 0100 	mov.w	r1, #0
 800614c:	f04f 0200 	mov.w	r2, #0
 8006150:	f04f 0300 	mov.w	r3, #0
 8006154:	008b      	lsls	r3, r1, #2
 8006156:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800615a:	0082      	lsls	r2, r0, #2
 800615c:	4640      	mov	r0, r8
 800615e:	4649      	mov	r1, r9
 8006160:	f7fa f836 	bl	80001d0 <__aeabi_uldivmod>
 8006164:	4602      	mov	r2, r0
 8006166:	460b      	mov	r3, r1
 8006168:	4b49      	ldr	r3, [pc, #292]	; (8006290 <UART_SetConfig+0x38c>)
 800616a:	fba3 2302 	umull	r2, r3, r3, r2
 800616e:	095b      	lsrs	r3, r3, #5
 8006170:	011e      	lsls	r6, r3, #4
 8006172:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006174:	4618      	mov	r0, r3
 8006176:	f04f 0100 	mov.w	r1, #0
 800617a:	4602      	mov	r2, r0
 800617c:	460b      	mov	r3, r1
 800617e:	1894      	adds	r4, r2, r2
 8006180:	60bc      	str	r4, [r7, #8]
 8006182:	415b      	adcs	r3, r3
 8006184:	60fb      	str	r3, [r7, #12]
 8006186:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800618a:	1812      	adds	r2, r2, r0
 800618c:	eb41 0303 	adc.w	r3, r1, r3
 8006190:	f04f 0400 	mov.w	r4, #0
 8006194:	f04f 0500 	mov.w	r5, #0
 8006198:	00dd      	lsls	r5, r3, #3
 800619a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800619e:	00d4      	lsls	r4, r2, #3
 80061a0:	4622      	mov	r2, r4
 80061a2:	462b      	mov	r3, r5
 80061a4:	1814      	adds	r4, r2, r0
 80061a6:	64bc      	str	r4, [r7, #72]	; 0x48
 80061a8:	414b      	adcs	r3, r1
 80061aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	4618      	mov	r0, r3
 80061b2:	f04f 0100 	mov.w	r1, #0
 80061b6:	f04f 0200 	mov.w	r2, #0
 80061ba:	f04f 0300 	mov.w	r3, #0
 80061be:	008b      	lsls	r3, r1, #2
 80061c0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80061c4:	0082      	lsls	r2, r0, #2
 80061c6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80061ca:	f7fa f801 	bl	80001d0 <__aeabi_uldivmod>
 80061ce:	4602      	mov	r2, r0
 80061d0:	460b      	mov	r3, r1
 80061d2:	4b2f      	ldr	r3, [pc, #188]	; (8006290 <UART_SetConfig+0x38c>)
 80061d4:	fba3 1302 	umull	r1, r3, r3, r2
 80061d8:	095b      	lsrs	r3, r3, #5
 80061da:	2164      	movs	r1, #100	; 0x64
 80061dc:	fb01 f303 	mul.w	r3, r1, r3
 80061e0:	1ad3      	subs	r3, r2, r3
 80061e2:	011b      	lsls	r3, r3, #4
 80061e4:	3332      	adds	r3, #50	; 0x32
 80061e6:	4a2a      	ldr	r2, [pc, #168]	; (8006290 <UART_SetConfig+0x38c>)
 80061e8:	fba2 2303 	umull	r2, r3, r2, r3
 80061ec:	095b      	lsrs	r3, r3, #5
 80061ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061f2:	441e      	add	r6, r3
 80061f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061f6:	4618      	mov	r0, r3
 80061f8:	f04f 0100 	mov.w	r1, #0
 80061fc:	4602      	mov	r2, r0
 80061fe:	460b      	mov	r3, r1
 8006200:	1894      	adds	r4, r2, r2
 8006202:	603c      	str	r4, [r7, #0]
 8006204:	415b      	adcs	r3, r3
 8006206:	607b      	str	r3, [r7, #4]
 8006208:	e9d7 2300 	ldrd	r2, r3, [r7]
 800620c:	1812      	adds	r2, r2, r0
 800620e:	eb41 0303 	adc.w	r3, r1, r3
 8006212:	f04f 0400 	mov.w	r4, #0
 8006216:	f04f 0500 	mov.w	r5, #0
 800621a:	00dd      	lsls	r5, r3, #3
 800621c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006220:	00d4      	lsls	r4, r2, #3
 8006222:	4622      	mov	r2, r4
 8006224:	462b      	mov	r3, r5
 8006226:	eb12 0a00 	adds.w	sl, r2, r0
 800622a:	eb43 0b01 	adc.w	fp, r3, r1
 800622e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	4618      	mov	r0, r3
 8006234:	f04f 0100 	mov.w	r1, #0
 8006238:	f04f 0200 	mov.w	r2, #0
 800623c:	f04f 0300 	mov.w	r3, #0
 8006240:	008b      	lsls	r3, r1, #2
 8006242:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006246:	0082      	lsls	r2, r0, #2
 8006248:	4650      	mov	r0, sl
 800624a:	4659      	mov	r1, fp
 800624c:	f7f9 ffc0 	bl	80001d0 <__aeabi_uldivmod>
 8006250:	4602      	mov	r2, r0
 8006252:	460b      	mov	r3, r1
 8006254:	4b0e      	ldr	r3, [pc, #56]	; (8006290 <UART_SetConfig+0x38c>)
 8006256:	fba3 1302 	umull	r1, r3, r3, r2
 800625a:	095b      	lsrs	r3, r3, #5
 800625c:	2164      	movs	r1, #100	; 0x64
 800625e:	fb01 f303 	mul.w	r3, r1, r3
 8006262:	1ad3      	subs	r3, r2, r3
 8006264:	011b      	lsls	r3, r3, #4
 8006266:	3332      	adds	r3, #50	; 0x32
 8006268:	4a09      	ldr	r2, [pc, #36]	; (8006290 <UART_SetConfig+0x38c>)
 800626a:	fba2 2303 	umull	r2, r3, r2, r3
 800626e:	095b      	lsrs	r3, r3, #5
 8006270:	f003 020f 	and.w	r2, r3, #15
 8006274:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4432      	add	r2, r6
 800627a:	609a      	str	r2, [r3, #8]
}
 800627c:	bf00      	nop
 800627e:	377c      	adds	r7, #124	; 0x7c
 8006280:	46bd      	mov	sp, r7
 8006282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006286:	bf00      	nop
 8006288:	40011000 	.word	0x40011000
 800628c:	40011400 	.word	0x40011400
 8006290:	51eb851f 	.word	0x51eb851f

08006294 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006294:	b480      	push	{r7}
 8006296:	b085      	sub	sp, #20
 8006298:	af00      	add	r7, sp, #0
 800629a:	4603      	mov	r3, r0
 800629c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800629e:	2300      	movs	r3, #0
 80062a0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80062a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80062a6:	2b84      	cmp	r3, #132	; 0x84
 80062a8:	d005      	beq.n	80062b6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80062aa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	4413      	add	r3, r2
 80062b2:	3303      	adds	r3, #3
 80062b4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80062b6:	68fb      	ldr	r3, [r7, #12]
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3714      	adds	r7, #20
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80062c8:	f000 faf6 	bl	80068b8 <vTaskStartScheduler>
  
  return osOK;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	bd80      	pop	{r7, pc}

080062d2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80062d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062d4:	b089      	sub	sp, #36	; 0x24
 80062d6:	af04      	add	r7, sp, #16
 80062d8:	6078      	str	r0, [r7, #4]
 80062da:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	695b      	ldr	r3, [r3, #20]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d020      	beq.n	8006326 <osThreadCreate+0x54>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	699b      	ldr	r3, [r3, #24]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d01c      	beq.n	8006326 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	685c      	ldr	r4, [r3, #4]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681d      	ldr	r5, [r3, #0]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	691e      	ldr	r6, [r3, #16]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80062fe:	4618      	mov	r0, r3
 8006300:	f7ff ffc8 	bl	8006294 <makeFreeRtosPriority>
 8006304:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	695b      	ldr	r3, [r3, #20]
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800630e:	9202      	str	r2, [sp, #8]
 8006310:	9301      	str	r3, [sp, #4]
 8006312:	9100      	str	r1, [sp, #0]
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	4632      	mov	r2, r6
 8006318:	4629      	mov	r1, r5
 800631a:	4620      	mov	r0, r4
 800631c:	f000 f8ed 	bl	80064fa <xTaskCreateStatic>
 8006320:	4603      	mov	r3, r0
 8006322:	60fb      	str	r3, [r7, #12]
 8006324:	e01c      	b.n	8006360 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	685c      	ldr	r4, [r3, #4]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006332:	b29e      	uxth	r6, r3
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800633a:	4618      	mov	r0, r3
 800633c:	f7ff ffaa 	bl	8006294 <makeFreeRtosPriority>
 8006340:	4602      	mov	r2, r0
 8006342:	f107 030c 	add.w	r3, r7, #12
 8006346:	9301      	str	r3, [sp, #4]
 8006348:	9200      	str	r2, [sp, #0]
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	4632      	mov	r2, r6
 800634e:	4629      	mov	r1, r5
 8006350:	4620      	mov	r0, r4
 8006352:	f000 f92f 	bl	80065b4 <xTaskCreate>
 8006356:	4603      	mov	r3, r0
 8006358:	2b01      	cmp	r3, #1
 800635a:	d001      	beq.n	8006360 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800635c:	2300      	movs	r3, #0
 800635e:	e000      	b.n	8006362 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006360:	68fb      	ldr	r3, [r7, #12]
}
 8006362:	4618      	mov	r0, r3
 8006364:	3714      	adds	r7, #20
 8006366:	46bd      	mov	sp, r7
 8006368:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800636a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800636a:	b580      	push	{r7, lr}
 800636c:	b084      	sub	sp, #16
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d001      	beq.n	8006380 <osDelay+0x16>
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	e000      	b.n	8006382 <osDelay+0x18>
 8006380:	2301      	movs	r3, #1
 8006382:	4618      	mov	r0, r3
 8006384:	f000 fa64 	bl	8006850 <vTaskDelay>
  
  return osOK;
 8006388:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800638a:	4618      	mov	r0, r3
 800638c:	3710      	adds	r7, #16
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}

08006392 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006392:	b480      	push	{r7}
 8006394:	b083      	sub	sp, #12
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f103 0208 	add.w	r2, r3, #8
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f04f 32ff 	mov.w	r2, #4294967295
 80063aa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f103 0208 	add.w	r2, r3, #8
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f103 0208 	add.w	r2, r3, #8
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80063c6:	bf00      	nop
 80063c8:	370c      	adds	r7, #12
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr

080063d2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80063d2:	b480      	push	{r7}
 80063d4:	b083      	sub	sp, #12
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80063e0:	bf00      	nop
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80063ec:	b480      	push	{r7}
 80063ee:	b085      	sub	sp, #20
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	68fa      	ldr	r2, [r7, #12]
 8006400:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	689a      	ldr	r2, [r3, #8]
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	683a      	ldr	r2, [r7, #0]
 8006410:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	683a      	ldr	r2, [r7, #0]
 8006416:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	1c5a      	adds	r2, r3, #1
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	601a      	str	r2, [r3, #0]
}
 8006428:	bf00      	nop
 800642a:	3714      	adds	r7, #20
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006434:	b480      	push	{r7}
 8006436:	b085      	sub	sp, #20
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800644a:	d103      	bne.n	8006454 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	60fb      	str	r3, [r7, #12]
 8006452:	e00c      	b.n	800646e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	3308      	adds	r3, #8
 8006458:	60fb      	str	r3, [r7, #12]
 800645a:	e002      	b.n	8006462 <vListInsert+0x2e>
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	60fb      	str	r3, [r7, #12]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	68ba      	ldr	r2, [r7, #8]
 800646a:	429a      	cmp	r2, r3
 800646c:	d2f6      	bcs.n	800645c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	685a      	ldr	r2, [r3, #4]
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	683a      	ldr	r2, [r7, #0]
 800647c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	683a      	ldr	r2, [r7, #0]
 8006488:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	687a      	ldr	r2, [r7, #4]
 800648e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	1c5a      	adds	r2, r3, #1
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	601a      	str	r2, [r3, #0]
}
 800649a:	bf00      	nop
 800649c:	3714      	adds	r7, #20
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr

080064a6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80064a6:	b480      	push	{r7}
 80064a8:	b085      	sub	sp, #20
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	6892      	ldr	r2, [r2, #8]
 80064bc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	6852      	ldr	r2, [r2, #4]
 80064c6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d103      	bne.n	80064da <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	689a      	ldr	r2, [r3, #8]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	1e5a      	subs	r2, r3, #1
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3714      	adds	r7, #20
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr

080064fa <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80064fa:	b580      	push	{r7, lr}
 80064fc:	b08e      	sub	sp, #56	; 0x38
 80064fe:	af04      	add	r7, sp, #16
 8006500:	60f8      	str	r0, [r7, #12]
 8006502:	60b9      	str	r1, [r7, #8]
 8006504:	607a      	str	r2, [r7, #4]
 8006506:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800650a:	2b00      	cmp	r3, #0
 800650c:	d10a      	bne.n	8006524 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800650e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006512:	f383 8811 	msr	BASEPRI, r3
 8006516:	f3bf 8f6f 	isb	sy
 800651a:	f3bf 8f4f 	dsb	sy
 800651e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006520:	bf00      	nop
 8006522:	e7fe      	b.n	8006522 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006526:	2b00      	cmp	r3, #0
 8006528:	d10a      	bne.n	8006540 <xTaskCreateStatic+0x46>
	__asm volatile
 800652a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800652e:	f383 8811 	msr	BASEPRI, r3
 8006532:	f3bf 8f6f 	isb	sy
 8006536:	f3bf 8f4f 	dsb	sy
 800653a:	61fb      	str	r3, [r7, #28]
}
 800653c:	bf00      	nop
 800653e:	e7fe      	b.n	800653e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006540:	23b4      	movs	r3, #180	; 0xb4
 8006542:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	2bb4      	cmp	r3, #180	; 0xb4
 8006548:	d00a      	beq.n	8006560 <xTaskCreateStatic+0x66>
	__asm volatile
 800654a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800654e:	f383 8811 	msr	BASEPRI, r3
 8006552:	f3bf 8f6f 	isb	sy
 8006556:	f3bf 8f4f 	dsb	sy
 800655a:	61bb      	str	r3, [r7, #24]
}
 800655c:	bf00      	nop
 800655e:	e7fe      	b.n	800655e <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006560:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006564:	2b00      	cmp	r3, #0
 8006566:	d01e      	beq.n	80065a6 <xTaskCreateStatic+0xac>
 8006568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800656a:	2b00      	cmp	r3, #0
 800656c:	d01b      	beq.n	80065a6 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800656e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006570:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006574:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006576:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657a:	2202      	movs	r2, #2
 800657c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006580:	2300      	movs	r3, #0
 8006582:	9303      	str	r3, [sp, #12]
 8006584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006586:	9302      	str	r3, [sp, #8]
 8006588:	f107 0314 	add.w	r3, r7, #20
 800658c:	9301      	str	r3, [sp, #4]
 800658e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006590:	9300      	str	r3, [sp, #0]
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	68b9      	ldr	r1, [r7, #8]
 8006598:	68f8      	ldr	r0, [r7, #12]
 800659a:	f000 f851 	bl	8006640 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800659e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80065a0:	f000 f8ec 	bl	800677c <prvAddNewTaskToReadyList>
 80065a4:	e001      	b.n	80065aa <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80065a6:	2300      	movs	r3, #0
 80065a8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80065aa:	697b      	ldr	r3, [r7, #20]
	}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3728      	adds	r7, #40	; 0x28
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b08c      	sub	sp, #48	; 0x30
 80065b8:	af04      	add	r7, sp, #16
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	60b9      	str	r1, [r7, #8]
 80065be:	603b      	str	r3, [r7, #0]
 80065c0:	4613      	mov	r3, r2
 80065c2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80065c4:	88fb      	ldrh	r3, [r7, #6]
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	4618      	mov	r0, r3
 80065ca:	f000 fef5 	bl	80073b8 <pvPortMalloc>
 80065ce:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d00e      	beq.n	80065f4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80065d6:	20b4      	movs	r0, #180	; 0xb4
 80065d8:	f000 feee 	bl	80073b8 <pvPortMalloc>
 80065dc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d003      	beq.n	80065ec <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	697a      	ldr	r2, [r7, #20]
 80065e8:	631a      	str	r2, [r3, #48]	; 0x30
 80065ea:	e005      	b.n	80065f8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80065ec:	6978      	ldr	r0, [r7, #20]
 80065ee:	f000 ffaf 	bl	8007550 <vPortFree>
 80065f2:	e001      	b.n	80065f8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80065f4:	2300      	movs	r3, #0
 80065f6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d017      	beq.n	800662e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80065fe:	69fb      	ldr	r3, [r7, #28]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006606:	88fa      	ldrh	r2, [r7, #6]
 8006608:	2300      	movs	r3, #0
 800660a:	9303      	str	r3, [sp, #12]
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	9302      	str	r3, [sp, #8]
 8006610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006612:	9301      	str	r3, [sp, #4]
 8006614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006616:	9300      	str	r3, [sp, #0]
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	68b9      	ldr	r1, [r7, #8]
 800661c:	68f8      	ldr	r0, [r7, #12]
 800661e:	f000 f80f 	bl	8006640 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006622:	69f8      	ldr	r0, [r7, #28]
 8006624:	f000 f8aa 	bl	800677c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006628:	2301      	movs	r3, #1
 800662a:	61bb      	str	r3, [r7, #24]
 800662c:	e002      	b.n	8006634 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800662e:	f04f 33ff 	mov.w	r3, #4294967295
 8006632:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006634:	69bb      	ldr	r3, [r7, #24]
	}
 8006636:	4618      	mov	r0, r3
 8006638:	3720      	adds	r7, #32
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
	...

08006640 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b088      	sub	sp, #32
 8006644:	af00      	add	r7, sp, #0
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	60b9      	str	r1, [r7, #8]
 800664a:	607a      	str	r2, [r7, #4]
 800664c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800664e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006650:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006658:	3b01      	subs	r3, #1
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	4413      	add	r3, r2
 800665e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	f023 0307 	bic.w	r3, r3, #7
 8006666:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	f003 0307 	and.w	r3, r3, #7
 800666e:	2b00      	cmp	r3, #0
 8006670:	d00a      	beq.n	8006688 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006676:	f383 8811 	msr	BASEPRI, r3
 800667a:	f3bf 8f6f 	isb	sy
 800667e:	f3bf 8f4f 	dsb	sy
 8006682:	617b      	str	r3, [r7, #20]
}
 8006684:	bf00      	nop
 8006686:	e7fe      	b.n	8006686 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d01f      	beq.n	80066ce <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800668e:	2300      	movs	r3, #0
 8006690:	61fb      	str	r3, [r7, #28]
 8006692:	e012      	b.n	80066ba <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006694:	68ba      	ldr	r2, [r7, #8]
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	4413      	add	r3, r2
 800669a:	7819      	ldrb	r1, [r3, #0]
 800669c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	4413      	add	r3, r2
 80066a2:	3334      	adds	r3, #52	; 0x34
 80066a4:	460a      	mov	r2, r1
 80066a6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80066a8:	68ba      	ldr	r2, [r7, #8]
 80066aa:	69fb      	ldr	r3, [r7, #28]
 80066ac:	4413      	add	r3, r2
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d006      	beq.n	80066c2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	3301      	adds	r3, #1
 80066b8:	61fb      	str	r3, [r7, #28]
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	2b0f      	cmp	r3, #15
 80066be:	d9e9      	bls.n	8006694 <prvInitialiseNewTask+0x54>
 80066c0:	e000      	b.n	80066c4 <prvInitialiseNewTask+0x84>
			{
				break;
 80066c2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80066c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c6:	2200      	movs	r2, #0
 80066c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80066cc:	e003      	b.n	80066d6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80066ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d0:	2200      	movs	r2, #0
 80066d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80066d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d8:	2b06      	cmp	r3, #6
 80066da:	d901      	bls.n	80066e0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80066dc:	2306      	movs	r3, #6
 80066de:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80066e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066e4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80066e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066ea:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80066ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ee:	2200      	movs	r2, #0
 80066f0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80066f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f4:	3304      	adds	r3, #4
 80066f6:	4618      	mov	r0, r3
 80066f8:	f7ff fe6b 	bl	80063d2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80066fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066fe:	3318      	adds	r3, #24
 8006700:	4618      	mov	r0, r3
 8006702:	f7ff fe66 	bl	80063d2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006708:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800670a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800670c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670e:	f1c3 0207 	rsb	r2, r3, #7
 8006712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006714:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006718:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800671a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800671c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800671e:	2200      	movs	r2, #0
 8006720:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006726:	2200      	movs	r2, #0
 8006728:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800672c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800672e:	334c      	adds	r3, #76	; 0x4c
 8006730:	2260      	movs	r2, #96	; 0x60
 8006732:	2100      	movs	r1, #0
 8006734:	4618      	mov	r0, r3
 8006736:	f001 f84f 	bl	80077d8 <memset>
 800673a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800673c:	4a0c      	ldr	r2, [pc, #48]	; (8006770 <prvInitialiseNewTask+0x130>)
 800673e:	651a      	str	r2, [r3, #80]	; 0x50
 8006740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006742:	4a0c      	ldr	r2, [pc, #48]	; (8006774 <prvInitialiseNewTask+0x134>)
 8006744:	655a      	str	r2, [r3, #84]	; 0x54
 8006746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006748:	4a0b      	ldr	r2, [pc, #44]	; (8006778 <prvInitialiseNewTask+0x138>)
 800674a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800674c:	683a      	ldr	r2, [r7, #0]
 800674e:	68f9      	ldr	r1, [r7, #12]
 8006750:	69b8      	ldr	r0, [r7, #24]
 8006752:	f000 fc1f 	bl	8006f94 <pxPortInitialiseStack>
 8006756:	4602      	mov	r2, r0
 8006758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800675a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800675c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800675e:	2b00      	cmp	r3, #0
 8006760:	d002      	beq.n	8006768 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006764:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006766:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006768:	bf00      	nop
 800676a:	3720      	adds	r7, #32
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}
 8006770:	08007a54 	.word	0x08007a54
 8006774:	08007a74 	.word	0x08007a74
 8006778:	08007a34 	.word	0x08007a34

0800677c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006784:	f000 fd36 	bl	80071f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006788:	4b2a      	ldr	r3, [pc, #168]	; (8006834 <prvAddNewTaskToReadyList+0xb8>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	3301      	adds	r3, #1
 800678e:	4a29      	ldr	r2, [pc, #164]	; (8006834 <prvAddNewTaskToReadyList+0xb8>)
 8006790:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006792:	4b29      	ldr	r3, [pc, #164]	; (8006838 <prvAddNewTaskToReadyList+0xbc>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d109      	bne.n	80067ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800679a:	4a27      	ldr	r2, [pc, #156]	; (8006838 <prvAddNewTaskToReadyList+0xbc>)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80067a0:	4b24      	ldr	r3, [pc, #144]	; (8006834 <prvAddNewTaskToReadyList+0xb8>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d110      	bne.n	80067ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80067a8:	f000 facc 	bl	8006d44 <prvInitialiseTaskLists>
 80067ac:	e00d      	b.n	80067ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80067ae:	4b23      	ldr	r3, [pc, #140]	; (800683c <prvAddNewTaskToReadyList+0xc0>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d109      	bne.n	80067ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80067b6:	4b20      	ldr	r3, [pc, #128]	; (8006838 <prvAddNewTaskToReadyList+0xbc>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d802      	bhi.n	80067ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80067c4:	4a1c      	ldr	r2, [pc, #112]	; (8006838 <prvAddNewTaskToReadyList+0xbc>)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80067ca:	4b1d      	ldr	r3, [pc, #116]	; (8006840 <prvAddNewTaskToReadyList+0xc4>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	3301      	adds	r3, #1
 80067d0:	4a1b      	ldr	r2, [pc, #108]	; (8006840 <prvAddNewTaskToReadyList+0xc4>)
 80067d2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d8:	2201      	movs	r2, #1
 80067da:	409a      	lsls	r2, r3
 80067dc:	4b19      	ldr	r3, [pc, #100]	; (8006844 <prvAddNewTaskToReadyList+0xc8>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	4a18      	ldr	r2, [pc, #96]	; (8006844 <prvAddNewTaskToReadyList+0xc8>)
 80067e4:	6013      	str	r3, [r2, #0]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067ea:	4613      	mov	r3, r2
 80067ec:	009b      	lsls	r3, r3, #2
 80067ee:	4413      	add	r3, r2
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	4a15      	ldr	r2, [pc, #84]	; (8006848 <prvAddNewTaskToReadyList+0xcc>)
 80067f4:	441a      	add	r2, r3
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	3304      	adds	r3, #4
 80067fa:	4619      	mov	r1, r3
 80067fc:	4610      	mov	r0, r2
 80067fe:	f7ff fdf5 	bl	80063ec <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006802:	f000 fd27 	bl	8007254 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006806:	4b0d      	ldr	r3, [pc, #52]	; (800683c <prvAddNewTaskToReadyList+0xc0>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00e      	beq.n	800682c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800680e:	4b0a      	ldr	r3, [pc, #40]	; (8006838 <prvAddNewTaskToReadyList+0xbc>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006818:	429a      	cmp	r2, r3
 800681a:	d207      	bcs.n	800682c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800681c:	4b0b      	ldr	r3, [pc, #44]	; (800684c <prvAddNewTaskToReadyList+0xd0>)
 800681e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006822:	601a      	str	r2, [r3, #0]
 8006824:	f3bf 8f4f 	dsb	sy
 8006828:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800682c:	bf00      	nop
 800682e:	3708      	adds	r7, #8
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}
 8006834:	2000067c 	.word	0x2000067c
 8006838:	2000057c 	.word	0x2000057c
 800683c:	20000688 	.word	0x20000688
 8006840:	20000698 	.word	0x20000698
 8006844:	20000684 	.word	0x20000684
 8006848:	20000580 	.word	0x20000580
 800684c:	e000ed04 	.word	0xe000ed04

08006850 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006858:	2300      	movs	r3, #0
 800685a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d017      	beq.n	8006892 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006862:	4b13      	ldr	r3, [pc, #76]	; (80068b0 <vTaskDelay+0x60>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d00a      	beq.n	8006880 <vTaskDelay+0x30>
	__asm volatile
 800686a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800686e:	f383 8811 	msr	BASEPRI, r3
 8006872:	f3bf 8f6f 	isb	sy
 8006876:	f3bf 8f4f 	dsb	sy
 800687a:	60bb      	str	r3, [r7, #8]
}
 800687c:	bf00      	nop
 800687e:	e7fe      	b.n	800687e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006880:	f000 f884 	bl	800698c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006884:	2100      	movs	r1, #0
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 fb1e 	bl	8006ec8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800688c:	f000 f88c 	bl	80069a8 <xTaskResumeAll>
 8006890:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d107      	bne.n	80068a8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006898:	4b06      	ldr	r3, [pc, #24]	; (80068b4 <vTaskDelay+0x64>)
 800689a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800689e:	601a      	str	r2, [r3, #0]
 80068a0:	f3bf 8f4f 	dsb	sy
 80068a4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80068a8:	bf00      	nop
 80068aa:	3710      	adds	r7, #16
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	200006a4 	.word	0x200006a4
 80068b4:	e000ed04 	.word	0xe000ed04

080068b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b08a      	sub	sp, #40	; 0x28
 80068bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80068be:	2300      	movs	r3, #0
 80068c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80068c2:	2300      	movs	r3, #0
 80068c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80068c6:	463a      	mov	r2, r7
 80068c8:	1d39      	adds	r1, r7, #4
 80068ca:	f107 0308 	add.w	r3, r7, #8
 80068ce:	4618      	mov	r0, r3
 80068d0:	f7f9 fdfa 	bl	80004c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80068d4:	6839      	ldr	r1, [r7, #0]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	68ba      	ldr	r2, [r7, #8]
 80068da:	9202      	str	r2, [sp, #8]
 80068dc:	9301      	str	r3, [sp, #4]
 80068de:	2300      	movs	r3, #0
 80068e0:	9300      	str	r3, [sp, #0]
 80068e2:	2300      	movs	r3, #0
 80068e4:	460a      	mov	r2, r1
 80068e6:	4921      	ldr	r1, [pc, #132]	; (800696c <vTaskStartScheduler+0xb4>)
 80068e8:	4821      	ldr	r0, [pc, #132]	; (8006970 <vTaskStartScheduler+0xb8>)
 80068ea:	f7ff fe06 	bl	80064fa <xTaskCreateStatic>
 80068ee:	4603      	mov	r3, r0
 80068f0:	4a20      	ldr	r2, [pc, #128]	; (8006974 <vTaskStartScheduler+0xbc>)
 80068f2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80068f4:	4b1f      	ldr	r3, [pc, #124]	; (8006974 <vTaskStartScheduler+0xbc>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d002      	beq.n	8006902 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80068fc:	2301      	movs	r3, #1
 80068fe:	617b      	str	r3, [r7, #20]
 8006900:	e001      	b.n	8006906 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006902:	2300      	movs	r3, #0
 8006904:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	2b01      	cmp	r3, #1
 800690a:	d11b      	bne.n	8006944 <vTaskStartScheduler+0x8c>
	__asm volatile
 800690c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006910:	f383 8811 	msr	BASEPRI, r3
 8006914:	f3bf 8f6f 	isb	sy
 8006918:	f3bf 8f4f 	dsb	sy
 800691c:	613b      	str	r3, [r7, #16]
}
 800691e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006920:	4b15      	ldr	r3, [pc, #84]	; (8006978 <vTaskStartScheduler+0xc0>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	334c      	adds	r3, #76	; 0x4c
 8006926:	4a15      	ldr	r2, [pc, #84]	; (800697c <vTaskStartScheduler+0xc4>)
 8006928:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800692a:	4b15      	ldr	r3, [pc, #84]	; (8006980 <vTaskStartScheduler+0xc8>)
 800692c:	f04f 32ff 	mov.w	r2, #4294967295
 8006930:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006932:	4b14      	ldr	r3, [pc, #80]	; (8006984 <vTaskStartScheduler+0xcc>)
 8006934:	2201      	movs	r2, #1
 8006936:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006938:	4b13      	ldr	r3, [pc, #76]	; (8006988 <vTaskStartScheduler+0xd0>)
 800693a:	2200      	movs	r2, #0
 800693c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800693e:	f000 fbb7 	bl	80070b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006942:	e00e      	b.n	8006962 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800694a:	d10a      	bne.n	8006962 <vTaskStartScheduler+0xaa>
	__asm volatile
 800694c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006950:	f383 8811 	msr	BASEPRI, r3
 8006954:	f3bf 8f6f 	isb	sy
 8006958:	f3bf 8f4f 	dsb	sy
 800695c:	60fb      	str	r3, [r7, #12]
}
 800695e:	bf00      	nop
 8006960:	e7fe      	b.n	8006960 <vTaskStartScheduler+0xa8>
}
 8006962:	bf00      	nop
 8006964:	3718      	adds	r7, #24
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
 800696a:	bf00      	nop
 800696c:	08007a14 	.word	0x08007a14
 8006970:	08006d15 	.word	0x08006d15
 8006974:	200006a0 	.word	0x200006a0
 8006978:	2000057c 	.word	0x2000057c
 800697c:	20000010 	.word	0x20000010
 8006980:	2000069c 	.word	0x2000069c
 8006984:	20000688 	.word	0x20000688
 8006988:	20000680 	.word	0x20000680

0800698c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800698c:	b480      	push	{r7}
 800698e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006990:	4b04      	ldr	r3, [pc, #16]	; (80069a4 <vTaskSuspendAll+0x18>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	3301      	adds	r3, #1
 8006996:	4a03      	ldr	r2, [pc, #12]	; (80069a4 <vTaskSuspendAll+0x18>)
 8006998:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800699a:	bf00      	nop
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr
 80069a4:	200006a4 	.word	0x200006a4

080069a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80069ae:	2300      	movs	r3, #0
 80069b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80069b2:	2300      	movs	r3, #0
 80069b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80069b6:	4b41      	ldr	r3, [pc, #260]	; (8006abc <xTaskResumeAll+0x114>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d10a      	bne.n	80069d4 <xTaskResumeAll+0x2c>
	__asm volatile
 80069be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c2:	f383 8811 	msr	BASEPRI, r3
 80069c6:	f3bf 8f6f 	isb	sy
 80069ca:	f3bf 8f4f 	dsb	sy
 80069ce:	603b      	str	r3, [r7, #0]
}
 80069d0:	bf00      	nop
 80069d2:	e7fe      	b.n	80069d2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80069d4:	f000 fc0e 	bl	80071f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80069d8:	4b38      	ldr	r3, [pc, #224]	; (8006abc <xTaskResumeAll+0x114>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	3b01      	subs	r3, #1
 80069de:	4a37      	ldr	r2, [pc, #220]	; (8006abc <xTaskResumeAll+0x114>)
 80069e0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069e2:	4b36      	ldr	r3, [pc, #216]	; (8006abc <xTaskResumeAll+0x114>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d161      	bne.n	8006aae <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80069ea:	4b35      	ldr	r3, [pc, #212]	; (8006ac0 <xTaskResumeAll+0x118>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d05d      	beq.n	8006aae <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80069f2:	e02e      	b.n	8006a52 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069f4:	4b33      	ldr	r3, [pc, #204]	; (8006ac4 <xTaskResumeAll+0x11c>)
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	68db      	ldr	r3, [r3, #12]
 80069fa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	3318      	adds	r3, #24
 8006a00:	4618      	mov	r0, r3
 8006a02:	f7ff fd50 	bl	80064a6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	3304      	adds	r3, #4
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f7ff fd4b 	bl	80064a6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a14:	2201      	movs	r2, #1
 8006a16:	409a      	lsls	r2, r3
 8006a18:	4b2b      	ldr	r3, [pc, #172]	; (8006ac8 <xTaskResumeAll+0x120>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	4a2a      	ldr	r2, [pc, #168]	; (8006ac8 <xTaskResumeAll+0x120>)
 8006a20:	6013      	str	r3, [r2, #0]
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a26:	4613      	mov	r3, r2
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	4413      	add	r3, r2
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	4a27      	ldr	r2, [pc, #156]	; (8006acc <xTaskResumeAll+0x124>)
 8006a30:	441a      	add	r2, r3
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	3304      	adds	r3, #4
 8006a36:	4619      	mov	r1, r3
 8006a38:	4610      	mov	r0, r2
 8006a3a:	f7ff fcd7 	bl	80063ec <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a42:	4b23      	ldr	r3, [pc, #140]	; (8006ad0 <xTaskResumeAll+0x128>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d302      	bcc.n	8006a52 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006a4c:	4b21      	ldr	r3, [pc, #132]	; (8006ad4 <xTaskResumeAll+0x12c>)
 8006a4e:	2201      	movs	r2, #1
 8006a50:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a52:	4b1c      	ldr	r3, [pc, #112]	; (8006ac4 <xTaskResumeAll+0x11c>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d1cc      	bne.n	80069f4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d001      	beq.n	8006a64 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006a60:	f000 fa12 	bl	8006e88 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006a64:	4b1c      	ldr	r3, [pc, #112]	; (8006ad8 <xTaskResumeAll+0x130>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d010      	beq.n	8006a92 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006a70:	f000 f836 	bl	8006ae0 <xTaskIncrementTick>
 8006a74:	4603      	mov	r3, r0
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d002      	beq.n	8006a80 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006a7a:	4b16      	ldr	r3, [pc, #88]	; (8006ad4 <xTaskResumeAll+0x12c>)
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	3b01      	subs	r3, #1
 8006a84:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d1f1      	bne.n	8006a70 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006a8c:	4b12      	ldr	r3, [pc, #72]	; (8006ad8 <xTaskResumeAll+0x130>)
 8006a8e:	2200      	movs	r2, #0
 8006a90:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006a92:	4b10      	ldr	r3, [pc, #64]	; (8006ad4 <xTaskResumeAll+0x12c>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d009      	beq.n	8006aae <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006a9e:	4b0f      	ldr	r3, [pc, #60]	; (8006adc <xTaskResumeAll+0x134>)
 8006aa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006aa4:	601a      	str	r2, [r3, #0]
 8006aa6:	f3bf 8f4f 	dsb	sy
 8006aaa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006aae:	f000 fbd1 	bl	8007254 <vPortExitCritical>

	return xAlreadyYielded;
 8006ab2:	68bb      	ldr	r3, [r7, #8]
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3710      	adds	r7, #16
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}
 8006abc:	200006a4 	.word	0x200006a4
 8006ac0:	2000067c 	.word	0x2000067c
 8006ac4:	2000063c 	.word	0x2000063c
 8006ac8:	20000684 	.word	0x20000684
 8006acc:	20000580 	.word	0x20000580
 8006ad0:	2000057c 	.word	0x2000057c
 8006ad4:	20000690 	.word	0x20000690
 8006ad8:	2000068c 	.word	0x2000068c
 8006adc:	e000ed04 	.word	0xe000ed04

08006ae0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b086      	sub	sp, #24
 8006ae4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006aea:	4b4e      	ldr	r3, [pc, #312]	; (8006c24 <xTaskIncrementTick+0x144>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	f040 808e 	bne.w	8006c10 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006af4:	4b4c      	ldr	r3, [pc, #304]	; (8006c28 <xTaskIncrementTick+0x148>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	3301      	adds	r3, #1
 8006afa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006afc:	4a4a      	ldr	r2, [pc, #296]	; (8006c28 <xTaskIncrementTick+0x148>)
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d120      	bne.n	8006b4a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006b08:	4b48      	ldr	r3, [pc, #288]	; (8006c2c <xTaskIncrementTick+0x14c>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d00a      	beq.n	8006b28 <xTaskIncrementTick+0x48>
	__asm volatile
 8006b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b16:	f383 8811 	msr	BASEPRI, r3
 8006b1a:	f3bf 8f6f 	isb	sy
 8006b1e:	f3bf 8f4f 	dsb	sy
 8006b22:	603b      	str	r3, [r7, #0]
}
 8006b24:	bf00      	nop
 8006b26:	e7fe      	b.n	8006b26 <xTaskIncrementTick+0x46>
 8006b28:	4b40      	ldr	r3, [pc, #256]	; (8006c2c <xTaskIncrementTick+0x14c>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	60fb      	str	r3, [r7, #12]
 8006b2e:	4b40      	ldr	r3, [pc, #256]	; (8006c30 <xTaskIncrementTick+0x150>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a3e      	ldr	r2, [pc, #248]	; (8006c2c <xTaskIncrementTick+0x14c>)
 8006b34:	6013      	str	r3, [r2, #0]
 8006b36:	4a3e      	ldr	r2, [pc, #248]	; (8006c30 <xTaskIncrementTick+0x150>)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6013      	str	r3, [r2, #0]
 8006b3c:	4b3d      	ldr	r3, [pc, #244]	; (8006c34 <xTaskIncrementTick+0x154>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	3301      	adds	r3, #1
 8006b42:	4a3c      	ldr	r2, [pc, #240]	; (8006c34 <xTaskIncrementTick+0x154>)
 8006b44:	6013      	str	r3, [r2, #0]
 8006b46:	f000 f99f 	bl	8006e88 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006b4a:	4b3b      	ldr	r3, [pc, #236]	; (8006c38 <xTaskIncrementTick+0x158>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	693a      	ldr	r2, [r7, #16]
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d348      	bcc.n	8006be6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b54:	4b35      	ldr	r3, [pc, #212]	; (8006c2c <xTaskIncrementTick+0x14c>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d104      	bne.n	8006b68 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b5e:	4b36      	ldr	r3, [pc, #216]	; (8006c38 <xTaskIncrementTick+0x158>)
 8006b60:	f04f 32ff 	mov.w	r2, #4294967295
 8006b64:	601a      	str	r2, [r3, #0]
					break;
 8006b66:	e03e      	b.n	8006be6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b68:	4b30      	ldr	r3, [pc, #192]	; (8006c2c <xTaskIncrementTick+0x14c>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	68db      	ldr	r3, [r3, #12]
 8006b70:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006b78:	693a      	ldr	r2, [r7, #16]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d203      	bcs.n	8006b88 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006b80:	4a2d      	ldr	r2, [pc, #180]	; (8006c38 <xTaskIncrementTick+0x158>)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006b86:	e02e      	b.n	8006be6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	3304      	adds	r3, #4
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f7ff fc8a 	bl	80064a6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d004      	beq.n	8006ba4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	3318      	adds	r3, #24
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f7ff fc81 	bl	80064a6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba8:	2201      	movs	r2, #1
 8006baa:	409a      	lsls	r2, r3
 8006bac:	4b23      	ldr	r3, [pc, #140]	; (8006c3c <xTaskIncrementTick+0x15c>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	4a22      	ldr	r2, [pc, #136]	; (8006c3c <xTaskIncrementTick+0x15c>)
 8006bb4:	6013      	str	r3, [r2, #0]
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bba:	4613      	mov	r3, r2
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	4413      	add	r3, r2
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	4a1f      	ldr	r2, [pc, #124]	; (8006c40 <xTaskIncrementTick+0x160>)
 8006bc4:	441a      	add	r2, r3
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	3304      	adds	r3, #4
 8006bca:	4619      	mov	r1, r3
 8006bcc:	4610      	mov	r0, r2
 8006bce:	f7ff fc0d 	bl	80063ec <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bd6:	4b1b      	ldr	r3, [pc, #108]	; (8006c44 <xTaskIncrementTick+0x164>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d3b9      	bcc.n	8006b54 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006be0:	2301      	movs	r3, #1
 8006be2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006be4:	e7b6      	b.n	8006b54 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006be6:	4b17      	ldr	r3, [pc, #92]	; (8006c44 <xTaskIncrementTick+0x164>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bec:	4914      	ldr	r1, [pc, #80]	; (8006c40 <xTaskIncrementTick+0x160>)
 8006bee:	4613      	mov	r3, r2
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	4413      	add	r3, r2
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	440b      	add	r3, r1
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d901      	bls.n	8006c02 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006c02:	4b11      	ldr	r3, [pc, #68]	; (8006c48 <xTaskIncrementTick+0x168>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d007      	beq.n	8006c1a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	617b      	str	r3, [r7, #20]
 8006c0e:	e004      	b.n	8006c1a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006c10:	4b0e      	ldr	r3, [pc, #56]	; (8006c4c <xTaskIncrementTick+0x16c>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	3301      	adds	r3, #1
 8006c16:	4a0d      	ldr	r2, [pc, #52]	; (8006c4c <xTaskIncrementTick+0x16c>)
 8006c18:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006c1a:	697b      	ldr	r3, [r7, #20]
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3718      	adds	r7, #24
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	200006a4 	.word	0x200006a4
 8006c28:	20000680 	.word	0x20000680
 8006c2c:	20000634 	.word	0x20000634
 8006c30:	20000638 	.word	0x20000638
 8006c34:	20000694 	.word	0x20000694
 8006c38:	2000069c 	.word	0x2000069c
 8006c3c:	20000684 	.word	0x20000684
 8006c40:	20000580 	.word	0x20000580
 8006c44:	2000057c 	.word	0x2000057c
 8006c48:	20000690 	.word	0x20000690
 8006c4c:	2000068c 	.word	0x2000068c

08006c50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006c50:	b480      	push	{r7}
 8006c52:	b087      	sub	sp, #28
 8006c54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006c56:	4b29      	ldr	r3, [pc, #164]	; (8006cfc <vTaskSwitchContext+0xac>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d003      	beq.n	8006c66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006c5e:	4b28      	ldr	r3, [pc, #160]	; (8006d00 <vTaskSwitchContext+0xb0>)
 8006c60:	2201      	movs	r2, #1
 8006c62:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006c64:	e044      	b.n	8006cf0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8006c66:	4b26      	ldr	r3, [pc, #152]	; (8006d00 <vTaskSwitchContext+0xb0>)
 8006c68:	2200      	movs	r2, #0
 8006c6a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c6c:	4b25      	ldr	r3, [pc, #148]	; (8006d04 <vTaskSwitchContext+0xb4>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	fab3 f383 	clz	r3, r3
 8006c78:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006c7a:	7afb      	ldrb	r3, [r7, #11]
 8006c7c:	f1c3 031f 	rsb	r3, r3, #31
 8006c80:	617b      	str	r3, [r7, #20]
 8006c82:	4921      	ldr	r1, [pc, #132]	; (8006d08 <vTaskSwitchContext+0xb8>)
 8006c84:	697a      	ldr	r2, [r7, #20]
 8006c86:	4613      	mov	r3, r2
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	4413      	add	r3, r2
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	440b      	add	r3, r1
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d10a      	bne.n	8006cac <vTaskSwitchContext+0x5c>
	__asm volatile
 8006c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c9a:	f383 8811 	msr	BASEPRI, r3
 8006c9e:	f3bf 8f6f 	isb	sy
 8006ca2:	f3bf 8f4f 	dsb	sy
 8006ca6:	607b      	str	r3, [r7, #4]
}
 8006ca8:	bf00      	nop
 8006caa:	e7fe      	b.n	8006caa <vTaskSwitchContext+0x5a>
 8006cac:	697a      	ldr	r2, [r7, #20]
 8006cae:	4613      	mov	r3, r2
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	4413      	add	r3, r2
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	4a14      	ldr	r2, [pc, #80]	; (8006d08 <vTaskSwitchContext+0xb8>)
 8006cb8:	4413      	add	r3, r2
 8006cba:	613b      	str	r3, [r7, #16]
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	685a      	ldr	r2, [r3, #4]
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	605a      	str	r2, [r3, #4]
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	685a      	ldr	r2, [r3, #4]
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	3308      	adds	r3, #8
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d104      	bne.n	8006cdc <vTaskSwitchContext+0x8c>
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	685a      	ldr	r2, [r3, #4]
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	605a      	str	r2, [r3, #4]
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	68db      	ldr	r3, [r3, #12]
 8006ce2:	4a0a      	ldr	r2, [pc, #40]	; (8006d0c <vTaskSwitchContext+0xbc>)
 8006ce4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006ce6:	4b09      	ldr	r3, [pc, #36]	; (8006d0c <vTaskSwitchContext+0xbc>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	334c      	adds	r3, #76	; 0x4c
 8006cec:	4a08      	ldr	r2, [pc, #32]	; (8006d10 <vTaskSwitchContext+0xc0>)
 8006cee:	6013      	str	r3, [r2, #0]
}
 8006cf0:	bf00      	nop
 8006cf2:	371c      	adds	r7, #28
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr
 8006cfc:	200006a4 	.word	0x200006a4
 8006d00:	20000690 	.word	0x20000690
 8006d04:	20000684 	.word	0x20000684
 8006d08:	20000580 	.word	0x20000580
 8006d0c:	2000057c 	.word	0x2000057c
 8006d10:	20000010 	.word	0x20000010

08006d14 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b082      	sub	sp, #8
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006d1c:	f000 f852 	bl	8006dc4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006d20:	4b06      	ldr	r3, [pc, #24]	; (8006d3c <prvIdleTask+0x28>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d9f9      	bls.n	8006d1c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006d28:	4b05      	ldr	r3, [pc, #20]	; (8006d40 <prvIdleTask+0x2c>)
 8006d2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d2e:	601a      	str	r2, [r3, #0]
 8006d30:	f3bf 8f4f 	dsb	sy
 8006d34:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006d38:	e7f0      	b.n	8006d1c <prvIdleTask+0x8>
 8006d3a:	bf00      	nop
 8006d3c:	20000580 	.word	0x20000580
 8006d40:	e000ed04 	.word	0xe000ed04

08006d44 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b082      	sub	sp, #8
 8006d48:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	607b      	str	r3, [r7, #4]
 8006d4e:	e00c      	b.n	8006d6a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	4613      	mov	r3, r2
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	4413      	add	r3, r2
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	4a12      	ldr	r2, [pc, #72]	; (8006da4 <prvInitialiseTaskLists+0x60>)
 8006d5c:	4413      	add	r3, r2
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f7ff fb17 	bl	8006392 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	3301      	adds	r3, #1
 8006d68:	607b      	str	r3, [r7, #4]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2b06      	cmp	r3, #6
 8006d6e:	d9ef      	bls.n	8006d50 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006d70:	480d      	ldr	r0, [pc, #52]	; (8006da8 <prvInitialiseTaskLists+0x64>)
 8006d72:	f7ff fb0e 	bl	8006392 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006d76:	480d      	ldr	r0, [pc, #52]	; (8006dac <prvInitialiseTaskLists+0x68>)
 8006d78:	f7ff fb0b 	bl	8006392 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006d7c:	480c      	ldr	r0, [pc, #48]	; (8006db0 <prvInitialiseTaskLists+0x6c>)
 8006d7e:	f7ff fb08 	bl	8006392 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006d82:	480c      	ldr	r0, [pc, #48]	; (8006db4 <prvInitialiseTaskLists+0x70>)
 8006d84:	f7ff fb05 	bl	8006392 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006d88:	480b      	ldr	r0, [pc, #44]	; (8006db8 <prvInitialiseTaskLists+0x74>)
 8006d8a:	f7ff fb02 	bl	8006392 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006d8e:	4b0b      	ldr	r3, [pc, #44]	; (8006dbc <prvInitialiseTaskLists+0x78>)
 8006d90:	4a05      	ldr	r2, [pc, #20]	; (8006da8 <prvInitialiseTaskLists+0x64>)
 8006d92:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006d94:	4b0a      	ldr	r3, [pc, #40]	; (8006dc0 <prvInitialiseTaskLists+0x7c>)
 8006d96:	4a05      	ldr	r2, [pc, #20]	; (8006dac <prvInitialiseTaskLists+0x68>)
 8006d98:	601a      	str	r2, [r3, #0]
}
 8006d9a:	bf00      	nop
 8006d9c:	3708      	adds	r7, #8
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
 8006da2:	bf00      	nop
 8006da4:	20000580 	.word	0x20000580
 8006da8:	2000060c 	.word	0x2000060c
 8006dac:	20000620 	.word	0x20000620
 8006db0:	2000063c 	.word	0x2000063c
 8006db4:	20000650 	.word	0x20000650
 8006db8:	20000668 	.word	0x20000668
 8006dbc:	20000634 	.word	0x20000634
 8006dc0:	20000638 	.word	0x20000638

08006dc4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b082      	sub	sp, #8
 8006dc8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006dca:	e019      	b.n	8006e00 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006dcc:	f000 fa12 	bl	80071f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dd0:	4b10      	ldr	r3, [pc, #64]	; (8006e14 <prvCheckTasksWaitingTermination+0x50>)
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	68db      	ldr	r3, [r3, #12]
 8006dd6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	3304      	adds	r3, #4
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f7ff fb62 	bl	80064a6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006de2:	4b0d      	ldr	r3, [pc, #52]	; (8006e18 <prvCheckTasksWaitingTermination+0x54>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	3b01      	subs	r3, #1
 8006de8:	4a0b      	ldr	r2, [pc, #44]	; (8006e18 <prvCheckTasksWaitingTermination+0x54>)
 8006dea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006dec:	4b0b      	ldr	r3, [pc, #44]	; (8006e1c <prvCheckTasksWaitingTermination+0x58>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	3b01      	subs	r3, #1
 8006df2:	4a0a      	ldr	r2, [pc, #40]	; (8006e1c <prvCheckTasksWaitingTermination+0x58>)
 8006df4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006df6:	f000 fa2d 	bl	8007254 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 f810 	bl	8006e20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e00:	4b06      	ldr	r3, [pc, #24]	; (8006e1c <prvCheckTasksWaitingTermination+0x58>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d1e1      	bne.n	8006dcc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006e08:	bf00      	nop
 8006e0a:	bf00      	nop
 8006e0c:	3708      	adds	r7, #8
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop
 8006e14:	20000650 	.word	0x20000650
 8006e18:	2000067c 	.word	0x2000067c
 8006e1c:	20000664 	.word	0x20000664

08006e20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	334c      	adds	r3, #76	; 0x4c
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f000 fce9 	bl	8007804 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d108      	bne.n	8006e4e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e40:	4618      	mov	r0, r3
 8006e42:	f000 fb85 	bl	8007550 <vPortFree>
				vPortFree( pxTCB );
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 fb82 	bl	8007550 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006e4c:	e018      	b.n	8006e80 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d103      	bne.n	8006e60 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 fb79 	bl	8007550 <vPortFree>
	}
 8006e5e:	e00f      	b.n	8006e80 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006e66:	2b02      	cmp	r3, #2
 8006e68:	d00a      	beq.n	8006e80 <prvDeleteTCB+0x60>
	__asm volatile
 8006e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e6e:	f383 8811 	msr	BASEPRI, r3
 8006e72:	f3bf 8f6f 	isb	sy
 8006e76:	f3bf 8f4f 	dsb	sy
 8006e7a:	60fb      	str	r3, [r7, #12]
}
 8006e7c:	bf00      	nop
 8006e7e:	e7fe      	b.n	8006e7e <prvDeleteTCB+0x5e>
	}
 8006e80:	bf00      	nop
 8006e82:	3710      	adds	r7, #16
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e8e:	4b0c      	ldr	r3, [pc, #48]	; (8006ec0 <prvResetNextTaskUnblockTime+0x38>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d104      	bne.n	8006ea2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006e98:	4b0a      	ldr	r3, [pc, #40]	; (8006ec4 <prvResetNextTaskUnblockTime+0x3c>)
 8006e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e9e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006ea0:	e008      	b.n	8006eb4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ea2:	4b07      	ldr	r3, [pc, #28]	; (8006ec0 <prvResetNextTaskUnblockTime+0x38>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	68db      	ldr	r3, [r3, #12]
 8006eaa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	4a04      	ldr	r2, [pc, #16]	; (8006ec4 <prvResetNextTaskUnblockTime+0x3c>)
 8006eb2:	6013      	str	r3, [r2, #0]
}
 8006eb4:	bf00      	nop
 8006eb6:	370c      	adds	r7, #12
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr
 8006ec0:	20000634 	.word	0x20000634
 8006ec4:	2000069c 	.word	0x2000069c

08006ec8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006ed2:	4b29      	ldr	r3, [pc, #164]	; (8006f78 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ed8:	4b28      	ldr	r3, [pc, #160]	; (8006f7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	3304      	adds	r3, #4
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f7ff fae1 	bl	80064a6 <uxListRemove>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d10b      	bne.n	8006f02 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006eea:	4b24      	ldr	r3, [pc, #144]	; (8006f7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ef6:	43da      	mvns	r2, r3
 8006ef8:	4b21      	ldr	r3, [pc, #132]	; (8006f80 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4013      	ands	r3, r2
 8006efe:	4a20      	ldr	r2, [pc, #128]	; (8006f80 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006f00:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f08:	d10a      	bne.n	8006f20 <prvAddCurrentTaskToDelayedList+0x58>
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d007      	beq.n	8006f20 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f10:	4b1a      	ldr	r3, [pc, #104]	; (8006f7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	3304      	adds	r3, #4
 8006f16:	4619      	mov	r1, r3
 8006f18:	481a      	ldr	r0, [pc, #104]	; (8006f84 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006f1a:	f7ff fa67 	bl	80063ec <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006f1e:	e026      	b.n	8006f6e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006f20:	68fa      	ldr	r2, [r7, #12]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	4413      	add	r3, r2
 8006f26:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006f28:	4b14      	ldr	r3, [pc, #80]	; (8006f7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	68ba      	ldr	r2, [r7, #8]
 8006f2e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006f30:	68ba      	ldr	r2, [r7, #8]
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d209      	bcs.n	8006f4c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f38:	4b13      	ldr	r3, [pc, #76]	; (8006f88 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	4b0f      	ldr	r3, [pc, #60]	; (8006f7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	3304      	adds	r3, #4
 8006f42:	4619      	mov	r1, r3
 8006f44:	4610      	mov	r0, r2
 8006f46:	f7ff fa75 	bl	8006434 <vListInsert>
}
 8006f4a:	e010      	b.n	8006f6e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f4c:	4b0f      	ldr	r3, [pc, #60]	; (8006f8c <prvAddCurrentTaskToDelayedList+0xc4>)
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	4b0a      	ldr	r3, [pc, #40]	; (8006f7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	3304      	adds	r3, #4
 8006f56:	4619      	mov	r1, r3
 8006f58:	4610      	mov	r0, r2
 8006f5a:	f7ff fa6b 	bl	8006434 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006f5e:	4b0c      	ldr	r3, [pc, #48]	; (8006f90 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	68ba      	ldr	r2, [r7, #8]
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d202      	bcs.n	8006f6e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006f68:	4a09      	ldr	r2, [pc, #36]	; (8006f90 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	6013      	str	r3, [r2, #0]
}
 8006f6e:	bf00      	nop
 8006f70:	3710      	adds	r7, #16
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop
 8006f78:	20000680 	.word	0x20000680
 8006f7c:	2000057c 	.word	0x2000057c
 8006f80:	20000684 	.word	0x20000684
 8006f84:	20000668 	.word	0x20000668
 8006f88:	20000638 	.word	0x20000638
 8006f8c:	20000634 	.word	0x20000634
 8006f90:	2000069c 	.word	0x2000069c

08006f94 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006f94:	b480      	push	{r7}
 8006f96:	b085      	sub	sp, #20
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	60f8      	str	r0, [r7, #12]
 8006f9c:	60b9      	str	r1, [r7, #8]
 8006f9e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	3b04      	subs	r3, #4
 8006fa4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006fac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	3b04      	subs	r3, #4
 8006fb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	f023 0201 	bic.w	r2, r3, #1
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	3b04      	subs	r3, #4
 8006fc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006fc4:	4a0c      	ldr	r2, [pc, #48]	; (8006ff8 <pxPortInitialiseStack+0x64>)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	3b14      	subs	r3, #20
 8006fce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	3b04      	subs	r3, #4
 8006fda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f06f 0202 	mvn.w	r2, #2
 8006fe2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	3b20      	subs	r3, #32
 8006fe8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006fea:	68fb      	ldr	r3, [r7, #12]
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3714      	adds	r7, #20
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr
 8006ff8:	08006ffd 	.word	0x08006ffd

08006ffc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b085      	sub	sp, #20
 8007000:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007002:	2300      	movs	r3, #0
 8007004:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007006:	4b12      	ldr	r3, [pc, #72]	; (8007050 <prvTaskExitError+0x54>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800700e:	d00a      	beq.n	8007026 <prvTaskExitError+0x2a>
	__asm volatile
 8007010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007014:	f383 8811 	msr	BASEPRI, r3
 8007018:	f3bf 8f6f 	isb	sy
 800701c:	f3bf 8f4f 	dsb	sy
 8007020:	60fb      	str	r3, [r7, #12]
}
 8007022:	bf00      	nop
 8007024:	e7fe      	b.n	8007024 <prvTaskExitError+0x28>
	__asm volatile
 8007026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800702a:	f383 8811 	msr	BASEPRI, r3
 800702e:	f3bf 8f6f 	isb	sy
 8007032:	f3bf 8f4f 	dsb	sy
 8007036:	60bb      	str	r3, [r7, #8]
}
 8007038:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800703a:	bf00      	nop
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d0fc      	beq.n	800703c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007042:	bf00      	nop
 8007044:	bf00      	nop
 8007046:	3714      	adds	r7, #20
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr
 8007050:	2000000c 	.word	0x2000000c
	...

08007060 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007060:	4b07      	ldr	r3, [pc, #28]	; (8007080 <pxCurrentTCBConst2>)
 8007062:	6819      	ldr	r1, [r3, #0]
 8007064:	6808      	ldr	r0, [r1, #0]
 8007066:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800706a:	f380 8809 	msr	PSP, r0
 800706e:	f3bf 8f6f 	isb	sy
 8007072:	f04f 0000 	mov.w	r0, #0
 8007076:	f380 8811 	msr	BASEPRI, r0
 800707a:	4770      	bx	lr
 800707c:	f3af 8000 	nop.w

08007080 <pxCurrentTCBConst2>:
 8007080:	2000057c 	.word	0x2000057c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007084:	bf00      	nop
 8007086:	bf00      	nop

08007088 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007088:	4808      	ldr	r0, [pc, #32]	; (80070ac <prvPortStartFirstTask+0x24>)
 800708a:	6800      	ldr	r0, [r0, #0]
 800708c:	6800      	ldr	r0, [r0, #0]
 800708e:	f380 8808 	msr	MSP, r0
 8007092:	f04f 0000 	mov.w	r0, #0
 8007096:	f380 8814 	msr	CONTROL, r0
 800709a:	b662      	cpsie	i
 800709c:	b661      	cpsie	f
 800709e:	f3bf 8f4f 	dsb	sy
 80070a2:	f3bf 8f6f 	isb	sy
 80070a6:	df00      	svc	0
 80070a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80070aa:	bf00      	nop
 80070ac:	e000ed08 	.word	0xe000ed08

080070b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b086      	sub	sp, #24
 80070b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80070b6:	4b46      	ldr	r3, [pc, #280]	; (80071d0 <xPortStartScheduler+0x120>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a46      	ldr	r2, [pc, #280]	; (80071d4 <xPortStartScheduler+0x124>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d10a      	bne.n	80070d6 <xPortStartScheduler+0x26>
	__asm volatile
 80070c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c4:	f383 8811 	msr	BASEPRI, r3
 80070c8:	f3bf 8f6f 	isb	sy
 80070cc:	f3bf 8f4f 	dsb	sy
 80070d0:	613b      	str	r3, [r7, #16]
}
 80070d2:	bf00      	nop
 80070d4:	e7fe      	b.n	80070d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80070d6:	4b3e      	ldr	r3, [pc, #248]	; (80071d0 <xPortStartScheduler+0x120>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a3f      	ldr	r2, [pc, #252]	; (80071d8 <xPortStartScheduler+0x128>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d10a      	bne.n	80070f6 <xPortStartScheduler+0x46>
	__asm volatile
 80070e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e4:	f383 8811 	msr	BASEPRI, r3
 80070e8:	f3bf 8f6f 	isb	sy
 80070ec:	f3bf 8f4f 	dsb	sy
 80070f0:	60fb      	str	r3, [r7, #12]
}
 80070f2:	bf00      	nop
 80070f4:	e7fe      	b.n	80070f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80070f6:	4b39      	ldr	r3, [pc, #228]	; (80071dc <xPortStartScheduler+0x12c>)
 80070f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	22ff      	movs	r2, #255	; 0xff
 8007106:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	b2db      	uxtb	r3, r3
 800710e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007110:	78fb      	ldrb	r3, [r7, #3]
 8007112:	b2db      	uxtb	r3, r3
 8007114:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007118:	b2da      	uxtb	r2, r3
 800711a:	4b31      	ldr	r3, [pc, #196]	; (80071e0 <xPortStartScheduler+0x130>)
 800711c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800711e:	4b31      	ldr	r3, [pc, #196]	; (80071e4 <xPortStartScheduler+0x134>)
 8007120:	2207      	movs	r2, #7
 8007122:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007124:	e009      	b.n	800713a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007126:	4b2f      	ldr	r3, [pc, #188]	; (80071e4 <xPortStartScheduler+0x134>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	3b01      	subs	r3, #1
 800712c:	4a2d      	ldr	r2, [pc, #180]	; (80071e4 <xPortStartScheduler+0x134>)
 800712e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007130:	78fb      	ldrb	r3, [r7, #3]
 8007132:	b2db      	uxtb	r3, r3
 8007134:	005b      	lsls	r3, r3, #1
 8007136:	b2db      	uxtb	r3, r3
 8007138:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800713a:	78fb      	ldrb	r3, [r7, #3]
 800713c:	b2db      	uxtb	r3, r3
 800713e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007142:	2b80      	cmp	r3, #128	; 0x80
 8007144:	d0ef      	beq.n	8007126 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007146:	4b27      	ldr	r3, [pc, #156]	; (80071e4 <xPortStartScheduler+0x134>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f1c3 0307 	rsb	r3, r3, #7
 800714e:	2b04      	cmp	r3, #4
 8007150:	d00a      	beq.n	8007168 <xPortStartScheduler+0xb8>
	__asm volatile
 8007152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007156:	f383 8811 	msr	BASEPRI, r3
 800715a:	f3bf 8f6f 	isb	sy
 800715e:	f3bf 8f4f 	dsb	sy
 8007162:	60bb      	str	r3, [r7, #8]
}
 8007164:	bf00      	nop
 8007166:	e7fe      	b.n	8007166 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007168:	4b1e      	ldr	r3, [pc, #120]	; (80071e4 <xPortStartScheduler+0x134>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	021b      	lsls	r3, r3, #8
 800716e:	4a1d      	ldr	r2, [pc, #116]	; (80071e4 <xPortStartScheduler+0x134>)
 8007170:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007172:	4b1c      	ldr	r3, [pc, #112]	; (80071e4 <xPortStartScheduler+0x134>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800717a:	4a1a      	ldr	r2, [pc, #104]	; (80071e4 <xPortStartScheduler+0x134>)
 800717c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	b2da      	uxtb	r2, r3
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007186:	4b18      	ldr	r3, [pc, #96]	; (80071e8 <xPortStartScheduler+0x138>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a17      	ldr	r2, [pc, #92]	; (80071e8 <xPortStartScheduler+0x138>)
 800718c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007190:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007192:	4b15      	ldr	r3, [pc, #84]	; (80071e8 <xPortStartScheduler+0x138>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a14      	ldr	r2, [pc, #80]	; (80071e8 <xPortStartScheduler+0x138>)
 8007198:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800719c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800719e:	f000 f8dd 	bl	800735c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80071a2:	4b12      	ldr	r3, [pc, #72]	; (80071ec <xPortStartScheduler+0x13c>)
 80071a4:	2200      	movs	r2, #0
 80071a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80071a8:	f000 f8fc 	bl	80073a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80071ac:	4b10      	ldr	r3, [pc, #64]	; (80071f0 <xPortStartScheduler+0x140>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a0f      	ldr	r2, [pc, #60]	; (80071f0 <xPortStartScheduler+0x140>)
 80071b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80071b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80071b8:	f7ff ff66 	bl	8007088 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80071bc:	f7ff fd48 	bl	8006c50 <vTaskSwitchContext>
	prvTaskExitError();
 80071c0:	f7ff ff1c 	bl	8006ffc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80071c4:	2300      	movs	r3, #0
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3718      	adds	r7, #24
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop
 80071d0:	e000ed00 	.word	0xe000ed00
 80071d4:	410fc271 	.word	0x410fc271
 80071d8:	410fc270 	.word	0x410fc270
 80071dc:	e000e400 	.word	0xe000e400
 80071e0:	200006a8 	.word	0x200006a8
 80071e4:	200006ac 	.word	0x200006ac
 80071e8:	e000ed20 	.word	0xe000ed20
 80071ec:	2000000c 	.word	0x2000000c
 80071f0:	e000ef34 	.word	0xe000ef34

080071f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
	__asm volatile
 80071fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071fe:	f383 8811 	msr	BASEPRI, r3
 8007202:	f3bf 8f6f 	isb	sy
 8007206:	f3bf 8f4f 	dsb	sy
 800720a:	607b      	str	r3, [r7, #4]
}
 800720c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800720e:	4b0f      	ldr	r3, [pc, #60]	; (800724c <vPortEnterCritical+0x58>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	3301      	adds	r3, #1
 8007214:	4a0d      	ldr	r2, [pc, #52]	; (800724c <vPortEnterCritical+0x58>)
 8007216:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007218:	4b0c      	ldr	r3, [pc, #48]	; (800724c <vPortEnterCritical+0x58>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	2b01      	cmp	r3, #1
 800721e:	d10f      	bne.n	8007240 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007220:	4b0b      	ldr	r3, [pc, #44]	; (8007250 <vPortEnterCritical+0x5c>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	b2db      	uxtb	r3, r3
 8007226:	2b00      	cmp	r3, #0
 8007228:	d00a      	beq.n	8007240 <vPortEnterCritical+0x4c>
	__asm volatile
 800722a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800722e:	f383 8811 	msr	BASEPRI, r3
 8007232:	f3bf 8f6f 	isb	sy
 8007236:	f3bf 8f4f 	dsb	sy
 800723a:	603b      	str	r3, [r7, #0]
}
 800723c:	bf00      	nop
 800723e:	e7fe      	b.n	800723e <vPortEnterCritical+0x4a>
	}
}
 8007240:	bf00      	nop
 8007242:	370c      	adds	r7, #12
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr
 800724c:	2000000c 	.word	0x2000000c
 8007250:	e000ed04 	.word	0xe000ed04

08007254 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007254:	b480      	push	{r7}
 8007256:	b083      	sub	sp, #12
 8007258:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800725a:	4b12      	ldr	r3, [pc, #72]	; (80072a4 <vPortExitCritical+0x50>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d10a      	bne.n	8007278 <vPortExitCritical+0x24>
	__asm volatile
 8007262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007266:	f383 8811 	msr	BASEPRI, r3
 800726a:	f3bf 8f6f 	isb	sy
 800726e:	f3bf 8f4f 	dsb	sy
 8007272:	607b      	str	r3, [r7, #4]
}
 8007274:	bf00      	nop
 8007276:	e7fe      	b.n	8007276 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007278:	4b0a      	ldr	r3, [pc, #40]	; (80072a4 <vPortExitCritical+0x50>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	3b01      	subs	r3, #1
 800727e:	4a09      	ldr	r2, [pc, #36]	; (80072a4 <vPortExitCritical+0x50>)
 8007280:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007282:	4b08      	ldr	r3, [pc, #32]	; (80072a4 <vPortExitCritical+0x50>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d105      	bne.n	8007296 <vPortExitCritical+0x42>
 800728a:	2300      	movs	r3, #0
 800728c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007294:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007296:	bf00      	nop
 8007298:	370c      	adds	r7, #12
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr
 80072a2:	bf00      	nop
 80072a4:	2000000c 	.word	0x2000000c
	...

080072b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80072b0:	f3ef 8009 	mrs	r0, PSP
 80072b4:	f3bf 8f6f 	isb	sy
 80072b8:	4b15      	ldr	r3, [pc, #84]	; (8007310 <pxCurrentTCBConst>)
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	f01e 0f10 	tst.w	lr, #16
 80072c0:	bf08      	it	eq
 80072c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80072c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072ca:	6010      	str	r0, [r2, #0]
 80072cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80072d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80072d4:	f380 8811 	msr	BASEPRI, r0
 80072d8:	f3bf 8f4f 	dsb	sy
 80072dc:	f3bf 8f6f 	isb	sy
 80072e0:	f7ff fcb6 	bl	8006c50 <vTaskSwitchContext>
 80072e4:	f04f 0000 	mov.w	r0, #0
 80072e8:	f380 8811 	msr	BASEPRI, r0
 80072ec:	bc09      	pop	{r0, r3}
 80072ee:	6819      	ldr	r1, [r3, #0]
 80072f0:	6808      	ldr	r0, [r1, #0]
 80072f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072f6:	f01e 0f10 	tst.w	lr, #16
 80072fa:	bf08      	it	eq
 80072fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007300:	f380 8809 	msr	PSP, r0
 8007304:	f3bf 8f6f 	isb	sy
 8007308:	4770      	bx	lr
 800730a:	bf00      	nop
 800730c:	f3af 8000 	nop.w

08007310 <pxCurrentTCBConst>:
 8007310:	2000057c 	.word	0x2000057c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007314:	bf00      	nop
 8007316:	bf00      	nop

08007318 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
	__asm volatile
 800731e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007322:	f383 8811 	msr	BASEPRI, r3
 8007326:	f3bf 8f6f 	isb	sy
 800732a:	f3bf 8f4f 	dsb	sy
 800732e:	607b      	str	r3, [r7, #4]
}
 8007330:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007332:	f7ff fbd5 	bl	8006ae0 <xTaskIncrementTick>
 8007336:	4603      	mov	r3, r0
 8007338:	2b00      	cmp	r3, #0
 800733a:	d003      	beq.n	8007344 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800733c:	4b06      	ldr	r3, [pc, #24]	; (8007358 <SysTick_Handler+0x40>)
 800733e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007342:	601a      	str	r2, [r3, #0]
 8007344:	2300      	movs	r3, #0
 8007346:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	f383 8811 	msr	BASEPRI, r3
}
 800734e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007350:	bf00      	nop
 8007352:	3708      	adds	r7, #8
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}
 8007358:	e000ed04 	.word	0xe000ed04

0800735c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800735c:	b480      	push	{r7}
 800735e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007360:	4b0b      	ldr	r3, [pc, #44]	; (8007390 <vPortSetupTimerInterrupt+0x34>)
 8007362:	2200      	movs	r2, #0
 8007364:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007366:	4b0b      	ldr	r3, [pc, #44]	; (8007394 <vPortSetupTimerInterrupt+0x38>)
 8007368:	2200      	movs	r2, #0
 800736a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800736c:	4b0a      	ldr	r3, [pc, #40]	; (8007398 <vPortSetupTimerInterrupt+0x3c>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a0a      	ldr	r2, [pc, #40]	; (800739c <vPortSetupTimerInterrupt+0x40>)
 8007372:	fba2 2303 	umull	r2, r3, r2, r3
 8007376:	099b      	lsrs	r3, r3, #6
 8007378:	4a09      	ldr	r2, [pc, #36]	; (80073a0 <vPortSetupTimerInterrupt+0x44>)
 800737a:	3b01      	subs	r3, #1
 800737c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800737e:	4b04      	ldr	r3, [pc, #16]	; (8007390 <vPortSetupTimerInterrupt+0x34>)
 8007380:	2207      	movs	r2, #7
 8007382:	601a      	str	r2, [r3, #0]
}
 8007384:	bf00      	nop
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr
 800738e:	bf00      	nop
 8007390:	e000e010 	.word	0xe000e010
 8007394:	e000e018 	.word	0xe000e018
 8007398:	20000000 	.word	0x20000000
 800739c:	10624dd3 	.word	0x10624dd3
 80073a0:	e000e014 	.word	0xe000e014

080073a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80073a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80073b4 <vPortEnableVFP+0x10>
 80073a8:	6801      	ldr	r1, [r0, #0]
 80073aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80073ae:	6001      	str	r1, [r0, #0]
 80073b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80073b2:	bf00      	nop
 80073b4:	e000ed88 	.word	0xe000ed88

080073b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b08a      	sub	sp, #40	; 0x28
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80073c0:	2300      	movs	r3, #0
 80073c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80073c4:	f7ff fae2 	bl	800698c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80073c8:	4b5b      	ldr	r3, [pc, #364]	; (8007538 <pvPortMalloc+0x180>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d101      	bne.n	80073d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80073d0:	f000 f920 	bl	8007614 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80073d4:	4b59      	ldr	r3, [pc, #356]	; (800753c <pvPortMalloc+0x184>)
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	4013      	ands	r3, r2
 80073dc:	2b00      	cmp	r3, #0
 80073de:	f040 8093 	bne.w	8007508 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d01d      	beq.n	8007424 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80073e8:	2208      	movs	r2, #8
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	4413      	add	r3, r2
 80073ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f003 0307 	and.w	r3, r3, #7
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d014      	beq.n	8007424 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f023 0307 	bic.w	r3, r3, #7
 8007400:	3308      	adds	r3, #8
 8007402:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f003 0307 	and.w	r3, r3, #7
 800740a:	2b00      	cmp	r3, #0
 800740c:	d00a      	beq.n	8007424 <pvPortMalloc+0x6c>
	__asm volatile
 800740e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007412:	f383 8811 	msr	BASEPRI, r3
 8007416:	f3bf 8f6f 	isb	sy
 800741a:	f3bf 8f4f 	dsb	sy
 800741e:	617b      	str	r3, [r7, #20]
}
 8007420:	bf00      	nop
 8007422:	e7fe      	b.n	8007422 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d06e      	beq.n	8007508 <pvPortMalloc+0x150>
 800742a:	4b45      	ldr	r3, [pc, #276]	; (8007540 <pvPortMalloc+0x188>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	429a      	cmp	r2, r3
 8007432:	d869      	bhi.n	8007508 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007434:	4b43      	ldr	r3, [pc, #268]	; (8007544 <pvPortMalloc+0x18c>)
 8007436:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007438:	4b42      	ldr	r3, [pc, #264]	; (8007544 <pvPortMalloc+0x18c>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800743e:	e004      	b.n	800744a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007442:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800744a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	429a      	cmp	r2, r3
 8007452:	d903      	bls.n	800745c <pvPortMalloc+0xa4>
 8007454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d1f1      	bne.n	8007440 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800745c:	4b36      	ldr	r3, [pc, #216]	; (8007538 <pvPortMalloc+0x180>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007462:	429a      	cmp	r2, r3
 8007464:	d050      	beq.n	8007508 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007466:	6a3b      	ldr	r3, [r7, #32]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	2208      	movs	r2, #8
 800746c:	4413      	add	r3, r2
 800746e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	6a3b      	ldr	r3, [r7, #32]
 8007476:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747a:	685a      	ldr	r2, [r3, #4]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	1ad2      	subs	r2, r2, r3
 8007480:	2308      	movs	r3, #8
 8007482:	005b      	lsls	r3, r3, #1
 8007484:	429a      	cmp	r2, r3
 8007486:	d91f      	bls.n	80074c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	4413      	add	r3, r2
 800748e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007490:	69bb      	ldr	r3, [r7, #24]
 8007492:	f003 0307 	and.w	r3, r3, #7
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00a      	beq.n	80074b0 <pvPortMalloc+0xf8>
	__asm volatile
 800749a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800749e:	f383 8811 	msr	BASEPRI, r3
 80074a2:	f3bf 8f6f 	isb	sy
 80074a6:	f3bf 8f4f 	dsb	sy
 80074aa:	613b      	str	r3, [r7, #16]
}
 80074ac:	bf00      	nop
 80074ae:	e7fe      	b.n	80074ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80074b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b2:	685a      	ldr	r2, [r3, #4]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	1ad2      	subs	r2, r2, r3
 80074b8:	69bb      	ldr	r3, [r7, #24]
 80074ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80074bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80074c2:	69b8      	ldr	r0, [r7, #24]
 80074c4:	f000 f908 	bl	80076d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80074c8:	4b1d      	ldr	r3, [pc, #116]	; (8007540 <pvPortMalloc+0x188>)
 80074ca:	681a      	ldr	r2, [r3, #0]
 80074cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	1ad3      	subs	r3, r2, r3
 80074d2:	4a1b      	ldr	r2, [pc, #108]	; (8007540 <pvPortMalloc+0x188>)
 80074d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80074d6:	4b1a      	ldr	r3, [pc, #104]	; (8007540 <pvPortMalloc+0x188>)
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	4b1b      	ldr	r3, [pc, #108]	; (8007548 <pvPortMalloc+0x190>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	429a      	cmp	r2, r3
 80074e0:	d203      	bcs.n	80074ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80074e2:	4b17      	ldr	r3, [pc, #92]	; (8007540 <pvPortMalloc+0x188>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a18      	ldr	r2, [pc, #96]	; (8007548 <pvPortMalloc+0x190>)
 80074e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80074ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ec:	685a      	ldr	r2, [r3, #4]
 80074ee:	4b13      	ldr	r3, [pc, #76]	; (800753c <pvPortMalloc+0x184>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	431a      	orrs	r2, r3
 80074f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80074f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fa:	2200      	movs	r2, #0
 80074fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80074fe:	4b13      	ldr	r3, [pc, #76]	; (800754c <pvPortMalloc+0x194>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	3301      	adds	r3, #1
 8007504:	4a11      	ldr	r2, [pc, #68]	; (800754c <pvPortMalloc+0x194>)
 8007506:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007508:	f7ff fa4e 	bl	80069a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800750c:	69fb      	ldr	r3, [r7, #28]
 800750e:	f003 0307 	and.w	r3, r3, #7
 8007512:	2b00      	cmp	r3, #0
 8007514:	d00a      	beq.n	800752c <pvPortMalloc+0x174>
	__asm volatile
 8007516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800751a:	f383 8811 	msr	BASEPRI, r3
 800751e:	f3bf 8f6f 	isb	sy
 8007522:	f3bf 8f4f 	dsb	sy
 8007526:	60fb      	str	r3, [r7, #12]
}
 8007528:	bf00      	nop
 800752a:	e7fe      	b.n	800752a <pvPortMalloc+0x172>
	return pvReturn;
 800752c:	69fb      	ldr	r3, [r7, #28]
}
 800752e:	4618      	mov	r0, r3
 8007530:	3728      	adds	r7, #40	; 0x28
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}
 8007536:	bf00      	nop
 8007538:	200042b8 	.word	0x200042b8
 800753c:	200042cc 	.word	0x200042cc
 8007540:	200042bc 	.word	0x200042bc
 8007544:	200042b0 	.word	0x200042b0
 8007548:	200042c0 	.word	0x200042c0
 800754c:	200042c4 	.word	0x200042c4

08007550 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b086      	sub	sp, #24
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d04d      	beq.n	80075fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007562:	2308      	movs	r3, #8
 8007564:	425b      	negs	r3, r3
 8007566:	697a      	ldr	r2, [r7, #20]
 8007568:	4413      	add	r3, r2
 800756a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	685a      	ldr	r2, [r3, #4]
 8007574:	4b24      	ldr	r3, [pc, #144]	; (8007608 <vPortFree+0xb8>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4013      	ands	r3, r2
 800757a:	2b00      	cmp	r3, #0
 800757c:	d10a      	bne.n	8007594 <vPortFree+0x44>
	__asm volatile
 800757e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007582:	f383 8811 	msr	BASEPRI, r3
 8007586:	f3bf 8f6f 	isb	sy
 800758a:	f3bf 8f4f 	dsb	sy
 800758e:	60fb      	str	r3, [r7, #12]
}
 8007590:	bf00      	nop
 8007592:	e7fe      	b.n	8007592 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d00a      	beq.n	80075b2 <vPortFree+0x62>
	__asm volatile
 800759c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a0:	f383 8811 	msr	BASEPRI, r3
 80075a4:	f3bf 8f6f 	isb	sy
 80075a8:	f3bf 8f4f 	dsb	sy
 80075ac:	60bb      	str	r3, [r7, #8]
}
 80075ae:	bf00      	nop
 80075b0:	e7fe      	b.n	80075b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	685a      	ldr	r2, [r3, #4]
 80075b6:	4b14      	ldr	r3, [pc, #80]	; (8007608 <vPortFree+0xb8>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4013      	ands	r3, r2
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d01e      	beq.n	80075fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d11a      	bne.n	80075fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	685a      	ldr	r2, [r3, #4]
 80075cc:	4b0e      	ldr	r3, [pc, #56]	; (8007608 <vPortFree+0xb8>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	43db      	mvns	r3, r3
 80075d2:	401a      	ands	r2, r3
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80075d8:	f7ff f9d8 	bl	800698c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	685a      	ldr	r2, [r3, #4]
 80075e0:	4b0a      	ldr	r3, [pc, #40]	; (800760c <vPortFree+0xbc>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4413      	add	r3, r2
 80075e6:	4a09      	ldr	r2, [pc, #36]	; (800760c <vPortFree+0xbc>)
 80075e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80075ea:	6938      	ldr	r0, [r7, #16]
 80075ec:	f000 f874 	bl	80076d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80075f0:	4b07      	ldr	r3, [pc, #28]	; (8007610 <vPortFree+0xc0>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	3301      	adds	r3, #1
 80075f6:	4a06      	ldr	r2, [pc, #24]	; (8007610 <vPortFree+0xc0>)
 80075f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80075fa:	f7ff f9d5 	bl	80069a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80075fe:	bf00      	nop
 8007600:	3718      	adds	r7, #24
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
 8007606:	bf00      	nop
 8007608:	200042cc 	.word	0x200042cc
 800760c:	200042bc 	.word	0x200042bc
 8007610:	200042c8 	.word	0x200042c8

08007614 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007614:	b480      	push	{r7}
 8007616:	b085      	sub	sp, #20
 8007618:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800761a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800761e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007620:	4b27      	ldr	r3, [pc, #156]	; (80076c0 <prvHeapInit+0xac>)
 8007622:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f003 0307 	and.w	r3, r3, #7
 800762a:	2b00      	cmp	r3, #0
 800762c:	d00c      	beq.n	8007648 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	3307      	adds	r3, #7
 8007632:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f023 0307 	bic.w	r3, r3, #7
 800763a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800763c:	68ba      	ldr	r2, [r7, #8]
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	1ad3      	subs	r3, r2, r3
 8007642:	4a1f      	ldr	r2, [pc, #124]	; (80076c0 <prvHeapInit+0xac>)
 8007644:	4413      	add	r3, r2
 8007646:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800764c:	4a1d      	ldr	r2, [pc, #116]	; (80076c4 <prvHeapInit+0xb0>)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007652:	4b1c      	ldr	r3, [pc, #112]	; (80076c4 <prvHeapInit+0xb0>)
 8007654:	2200      	movs	r2, #0
 8007656:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	68ba      	ldr	r2, [r7, #8]
 800765c:	4413      	add	r3, r2
 800765e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007660:	2208      	movs	r2, #8
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	1a9b      	subs	r3, r3, r2
 8007666:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f023 0307 	bic.w	r3, r3, #7
 800766e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	4a15      	ldr	r2, [pc, #84]	; (80076c8 <prvHeapInit+0xb4>)
 8007674:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007676:	4b14      	ldr	r3, [pc, #80]	; (80076c8 <prvHeapInit+0xb4>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	2200      	movs	r2, #0
 800767c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800767e:	4b12      	ldr	r3, [pc, #72]	; (80076c8 <prvHeapInit+0xb4>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	2200      	movs	r2, #0
 8007684:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	68fa      	ldr	r2, [r7, #12]
 800768e:	1ad2      	subs	r2, r2, r3
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007694:	4b0c      	ldr	r3, [pc, #48]	; (80076c8 <prvHeapInit+0xb4>)
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	4a0a      	ldr	r2, [pc, #40]	; (80076cc <prvHeapInit+0xb8>)
 80076a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	4a09      	ldr	r2, [pc, #36]	; (80076d0 <prvHeapInit+0xbc>)
 80076aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80076ac:	4b09      	ldr	r3, [pc, #36]	; (80076d4 <prvHeapInit+0xc0>)
 80076ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80076b2:	601a      	str	r2, [r3, #0]
}
 80076b4:	bf00      	nop
 80076b6:	3714      	adds	r7, #20
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr
 80076c0:	200006b0 	.word	0x200006b0
 80076c4:	200042b0 	.word	0x200042b0
 80076c8:	200042b8 	.word	0x200042b8
 80076cc:	200042c0 	.word	0x200042c0
 80076d0:	200042bc 	.word	0x200042bc
 80076d4:	200042cc 	.word	0x200042cc

080076d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80076d8:	b480      	push	{r7}
 80076da:	b085      	sub	sp, #20
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80076e0:	4b28      	ldr	r3, [pc, #160]	; (8007784 <prvInsertBlockIntoFreeList+0xac>)
 80076e2:	60fb      	str	r3, [r7, #12]
 80076e4:	e002      	b.n	80076ec <prvInsertBlockIntoFreeList+0x14>
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	60fb      	str	r3, [r7, #12]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	687a      	ldr	r2, [r7, #4]
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d8f7      	bhi.n	80076e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	68ba      	ldr	r2, [r7, #8]
 8007700:	4413      	add	r3, r2
 8007702:	687a      	ldr	r2, [r7, #4]
 8007704:	429a      	cmp	r2, r3
 8007706:	d108      	bne.n	800771a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	685a      	ldr	r2, [r3, #4]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	441a      	add	r2, r3
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	68ba      	ldr	r2, [r7, #8]
 8007724:	441a      	add	r2, r3
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	429a      	cmp	r2, r3
 800772c:	d118      	bne.n	8007760 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	4b15      	ldr	r3, [pc, #84]	; (8007788 <prvInsertBlockIntoFreeList+0xb0>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	429a      	cmp	r2, r3
 8007738:	d00d      	beq.n	8007756 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	685a      	ldr	r2, [r3, #4]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	441a      	add	r2, r3
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	601a      	str	r2, [r3, #0]
 8007754:	e008      	b.n	8007768 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007756:	4b0c      	ldr	r3, [pc, #48]	; (8007788 <prvInsertBlockIntoFreeList+0xb0>)
 8007758:	681a      	ldr	r2, [r3, #0]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	601a      	str	r2, [r3, #0]
 800775e:	e003      	b.n	8007768 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007768:	68fa      	ldr	r2, [r7, #12]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	429a      	cmp	r2, r3
 800776e:	d002      	beq.n	8007776 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007776:	bf00      	nop
 8007778:	3714      	adds	r7, #20
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr
 8007782:	bf00      	nop
 8007784:	200042b0 	.word	0x200042b0
 8007788:	200042b8 	.word	0x200042b8

0800778c <__libc_init_array>:
 800778c:	b570      	push	{r4, r5, r6, lr}
 800778e:	4d0d      	ldr	r5, [pc, #52]	; (80077c4 <__libc_init_array+0x38>)
 8007790:	4c0d      	ldr	r4, [pc, #52]	; (80077c8 <__libc_init_array+0x3c>)
 8007792:	1b64      	subs	r4, r4, r5
 8007794:	10a4      	asrs	r4, r4, #2
 8007796:	2600      	movs	r6, #0
 8007798:	42a6      	cmp	r6, r4
 800779a:	d109      	bne.n	80077b0 <__libc_init_array+0x24>
 800779c:	4d0b      	ldr	r5, [pc, #44]	; (80077cc <__libc_init_array+0x40>)
 800779e:	4c0c      	ldr	r4, [pc, #48]	; (80077d0 <__libc_init_array+0x44>)
 80077a0:	f000 f8e8 	bl	8007974 <_init>
 80077a4:	1b64      	subs	r4, r4, r5
 80077a6:	10a4      	asrs	r4, r4, #2
 80077a8:	2600      	movs	r6, #0
 80077aa:	42a6      	cmp	r6, r4
 80077ac:	d105      	bne.n	80077ba <__libc_init_array+0x2e>
 80077ae:	bd70      	pop	{r4, r5, r6, pc}
 80077b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80077b4:	4798      	blx	r3
 80077b6:	3601      	adds	r6, #1
 80077b8:	e7ee      	b.n	8007798 <__libc_init_array+0xc>
 80077ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80077be:	4798      	blx	r3
 80077c0:	3601      	adds	r6, #1
 80077c2:	e7f2      	b.n	80077aa <__libc_init_array+0x1e>
 80077c4:	08007a9c 	.word	0x08007a9c
 80077c8:	08007a9c 	.word	0x08007a9c
 80077cc:	08007a9c 	.word	0x08007a9c
 80077d0:	08007aa0 	.word	0x08007aa0

080077d4 <__retarget_lock_acquire_recursive>:
 80077d4:	4770      	bx	lr

080077d6 <__retarget_lock_release_recursive>:
 80077d6:	4770      	bx	lr

080077d8 <memset>:
 80077d8:	4402      	add	r2, r0
 80077da:	4603      	mov	r3, r0
 80077dc:	4293      	cmp	r3, r2
 80077de:	d100      	bne.n	80077e2 <memset+0xa>
 80077e0:	4770      	bx	lr
 80077e2:	f803 1b01 	strb.w	r1, [r3], #1
 80077e6:	e7f9      	b.n	80077dc <memset+0x4>

080077e8 <cleanup_glue>:
 80077e8:	b538      	push	{r3, r4, r5, lr}
 80077ea:	460c      	mov	r4, r1
 80077ec:	6809      	ldr	r1, [r1, #0]
 80077ee:	4605      	mov	r5, r0
 80077f0:	b109      	cbz	r1, 80077f6 <cleanup_glue+0xe>
 80077f2:	f7ff fff9 	bl	80077e8 <cleanup_glue>
 80077f6:	4621      	mov	r1, r4
 80077f8:	4628      	mov	r0, r5
 80077fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077fe:	f000 b869 	b.w	80078d4 <_free_r>
	...

08007804 <_reclaim_reent>:
 8007804:	4b2c      	ldr	r3, [pc, #176]	; (80078b8 <_reclaim_reent+0xb4>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4283      	cmp	r3, r0
 800780a:	b570      	push	{r4, r5, r6, lr}
 800780c:	4604      	mov	r4, r0
 800780e:	d051      	beq.n	80078b4 <_reclaim_reent+0xb0>
 8007810:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007812:	b143      	cbz	r3, 8007826 <_reclaim_reent+0x22>
 8007814:	68db      	ldr	r3, [r3, #12]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d14a      	bne.n	80078b0 <_reclaim_reent+0xac>
 800781a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800781c:	6819      	ldr	r1, [r3, #0]
 800781e:	b111      	cbz	r1, 8007826 <_reclaim_reent+0x22>
 8007820:	4620      	mov	r0, r4
 8007822:	f000 f857 	bl	80078d4 <_free_r>
 8007826:	6961      	ldr	r1, [r4, #20]
 8007828:	b111      	cbz	r1, 8007830 <_reclaim_reent+0x2c>
 800782a:	4620      	mov	r0, r4
 800782c:	f000 f852 	bl	80078d4 <_free_r>
 8007830:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007832:	b111      	cbz	r1, 800783a <_reclaim_reent+0x36>
 8007834:	4620      	mov	r0, r4
 8007836:	f000 f84d 	bl	80078d4 <_free_r>
 800783a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800783c:	b111      	cbz	r1, 8007844 <_reclaim_reent+0x40>
 800783e:	4620      	mov	r0, r4
 8007840:	f000 f848 	bl	80078d4 <_free_r>
 8007844:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007846:	b111      	cbz	r1, 800784e <_reclaim_reent+0x4a>
 8007848:	4620      	mov	r0, r4
 800784a:	f000 f843 	bl	80078d4 <_free_r>
 800784e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007850:	b111      	cbz	r1, 8007858 <_reclaim_reent+0x54>
 8007852:	4620      	mov	r0, r4
 8007854:	f000 f83e 	bl	80078d4 <_free_r>
 8007858:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800785a:	b111      	cbz	r1, 8007862 <_reclaim_reent+0x5e>
 800785c:	4620      	mov	r0, r4
 800785e:	f000 f839 	bl	80078d4 <_free_r>
 8007862:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007864:	b111      	cbz	r1, 800786c <_reclaim_reent+0x68>
 8007866:	4620      	mov	r0, r4
 8007868:	f000 f834 	bl	80078d4 <_free_r>
 800786c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800786e:	b111      	cbz	r1, 8007876 <_reclaim_reent+0x72>
 8007870:	4620      	mov	r0, r4
 8007872:	f000 f82f 	bl	80078d4 <_free_r>
 8007876:	69a3      	ldr	r3, [r4, #24]
 8007878:	b1e3      	cbz	r3, 80078b4 <_reclaim_reent+0xb0>
 800787a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800787c:	4620      	mov	r0, r4
 800787e:	4798      	blx	r3
 8007880:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007882:	b1b9      	cbz	r1, 80078b4 <_reclaim_reent+0xb0>
 8007884:	4620      	mov	r0, r4
 8007886:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800788a:	f7ff bfad 	b.w	80077e8 <cleanup_glue>
 800788e:	5949      	ldr	r1, [r1, r5]
 8007890:	b941      	cbnz	r1, 80078a4 <_reclaim_reent+0xa0>
 8007892:	3504      	adds	r5, #4
 8007894:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007896:	2d80      	cmp	r5, #128	; 0x80
 8007898:	68d9      	ldr	r1, [r3, #12]
 800789a:	d1f8      	bne.n	800788e <_reclaim_reent+0x8a>
 800789c:	4620      	mov	r0, r4
 800789e:	f000 f819 	bl	80078d4 <_free_r>
 80078a2:	e7ba      	b.n	800781a <_reclaim_reent+0x16>
 80078a4:	680e      	ldr	r6, [r1, #0]
 80078a6:	4620      	mov	r0, r4
 80078a8:	f000 f814 	bl	80078d4 <_free_r>
 80078ac:	4631      	mov	r1, r6
 80078ae:	e7ef      	b.n	8007890 <_reclaim_reent+0x8c>
 80078b0:	2500      	movs	r5, #0
 80078b2:	e7ef      	b.n	8007894 <_reclaim_reent+0x90>
 80078b4:	bd70      	pop	{r4, r5, r6, pc}
 80078b6:	bf00      	nop
 80078b8:	20000010 	.word	0x20000010

080078bc <__malloc_lock>:
 80078bc:	4801      	ldr	r0, [pc, #4]	; (80078c4 <__malloc_lock+0x8>)
 80078be:	f7ff bf89 	b.w	80077d4 <__retarget_lock_acquire_recursive>
 80078c2:	bf00      	nop
 80078c4:	20004464 	.word	0x20004464

080078c8 <__malloc_unlock>:
 80078c8:	4801      	ldr	r0, [pc, #4]	; (80078d0 <__malloc_unlock+0x8>)
 80078ca:	f7ff bf84 	b.w	80077d6 <__retarget_lock_release_recursive>
 80078ce:	bf00      	nop
 80078d0:	20004464 	.word	0x20004464

080078d4 <_free_r>:
 80078d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80078d6:	2900      	cmp	r1, #0
 80078d8:	d048      	beq.n	800796c <_free_r+0x98>
 80078da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078de:	9001      	str	r0, [sp, #4]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	f1a1 0404 	sub.w	r4, r1, #4
 80078e6:	bfb8      	it	lt
 80078e8:	18e4      	addlt	r4, r4, r3
 80078ea:	f7ff ffe7 	bl	80078bc <__malloc_lock>
 80078ee:	4a20      	ldr	r2, [pc, #128]	; (8007970 <_free_r+0x9c>)
 80078f0:	9801      	ldr	r0, [sp, #4]
 80078f2:	6813      	ldr	r3, [r2, #0]
 80078f4:	4615      	mov	r5, r2
 80078f6:	b933      	cbnz	r3, 8007906 <_free_r+0x32>
 80078f8:	6063      	str	r3, [r4, #4]
 80078fa:	6014      	str	r4, [r2, #0]
 80078fc:	b003      	add	sp, #12
 80078fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007902:	f7ff bfe1 	b.w	80078c8 <__malloc_unlock>
 8007906:	42a3      	cmp	r3, r4
 8007908:	d90b      	bls.n	8007922 <_free_r+0x4e>
 800790a:	6821      	ldr	r1, [r4, #0]
 800790c:	1862      	adds	r2, r4, r1
 800790e:	4293      	cmp	r3, r2
 8007910:	bf04      	itt	eq
 8007912:	681a      	ldreq	r2, [r3, #0]
 8007914:	685b      	ldreq	r3, [r3, #4]
 8007916:	6063      	str	r3, [r4, #4]
 8007918:	bf04      	itt	eq
 800791a:	1852      	addeq	r2, r2, r1
 800791c:	6022      	streq	r2, [r4, #0]
 800791e:	602c      	str	r4, [r5, #0]
 8007920:	e7ec      	b.n	80078fc <_free_r+0x28>
 8007922:	461a      	mov	r2, r3
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	b10b      	cbz	r3, 800792c <_free_r+0x58>
 8007928:	42a3      	cmp	r3, r4
 800792a:	d9fa      	bls.n	8007922 <_free_r+0x4e>
 800792c:	6811      	ldr	r1, [r2, #0]
 800792e:	1855      	adds	r5, r2, r1
 8007930:	42a5      	cmp	r5, r4
 8007932:	d10b      	bne.n	800794c <_free_r+0x78>
 8007934:	6824      	ldr	r4, [r4, #0]
 8007936:	4421      	add	r1, r4
 8007938:	1854      	adds	r4, r2, r1
 800793a:	42a3      	cmp	r3, r4
 800793c:	6011      	str	r1, [r2, #0]
 800793e:	d1dd      	bne.n	80078fc <_free_r+0x28>
 8007940:	681c      	ldr	r4, [r3, #0]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	6053      	str	r3, [r2, #4]
 8007946:	4421      	add	r1, r4
 8007948:	6011      	str	r1, [r2, #0]
 800794a:	e7d7      	b.n	80078fc <_free_r+0x28>
 800794c:	d902      	bls.n	8007954 <_free_r+0x80>
 800794e:	230c      	movs	r3, #12
 8007950:	6003      	str	r3, [r0, #0]
 8007952:	e7d3      	b.n	80078fc <_free_r+0x28>
 8007954:	6825      	ldr	r5, [r4, #0]
 8007956:	1961      	adds	r1, r4, r5
 8007958:	428b      	cmp	r3, r1
 800795a:	bf04      	itt	eq
 800795c:	6819      	ldreq	r1, [r3, #0]
 800795e:	685b      	ldreq	r3, [r3, #4]
 8007960:	6063      	str	r3, [r4, #4]
 8007962:	bf04      	itt	eq
 8007964:	1949      	addeq	r1, r1, r5
 8007966:	6021      	streq	r1, [r4, #0]
 8007968:	6054      	str	r4, [r2, #4]
 800796a:	e7c7      	b.n	80078fc <_free_r+0x28>
 800796c:	b003      	add	sp, #12
 800796e:	bd30      	pop	{r4, r5, pc}
 8007970:	200042d0 	.word	0x200042d0

08007974 <_init>:
 8007974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007976:	bf00      	nop
 8007978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800797a:	bc08      	pop	{r3}
 800797c:	469e      	mov	lr, r3
 800797e:	4770      	bx	lr

08007980 <_fini>:
 8007980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007982:	bf00      	nop
 8007984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007986:	bc08      	pop	{r3}
 8007988:	469e      	mov	lr, r3
 800798a:	4770      	bx	lr
