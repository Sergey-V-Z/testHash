
tester407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007cf8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08007e88  08007e88  00017e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f88  08007f88  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007f88  08007f88  00017f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f90  08007f90  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f90  08007f90  00017f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f94  08007f94  00017f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007f98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          000043a4  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004418  20004418  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d08d  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000381b  00000000  00000000  0003d131  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001518  00000000  00000000  00040950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013e8  00000000  00000000  00041e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023307  00000000  00000000  00043250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019579  00000000  00000000  00066557  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d58d0  00000000  00000000  0007fad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001553a0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005b58  00000000  00000000  001553f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007e70 	.word	0x08007e70

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08007e70 	.word	0x08007e70

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	60b9      	str	r1, [r7, #8]
 80004d2:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	4a07      	ldr	r2, [pc, #28]	; (80004f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80004d8:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004da:	68bb      	ldr	r3, [r7, #8]
 80004dc:	4a06      	ldr	r2, [pc, #24]	; (80004f8 <vApplicationGetIdleTaskMemory+0x30>)
 80004de:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	2280      	movs	r2, #128	; 0x80
 80004e4:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 80004e6:	bf00      	nop
 80004e8:	3714      	adds	r7, #20
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	200002b4 	.word	0x200002b4
 80004f8:	20000368 	.word	0x20000368

080004fc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80004fc:	b5b0      	push	{r4, r5, r7, lr}
 80004fe:	b090      	sub	sp, #64	; 0x40
 8000500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of allASIC */
  osMutexDef(allASIC);
 8000502:	2300      	movs	r3, #0
 8000504:	63bb      	str	r3, [r7, #56]	; 0x38
 8000506:	2300      	movs	r3, #0
 8000508:	63fb      	str	r3, [r7, #60]	; 0x3c
  allASICHandle = osMutexCreate(osMutex(allASIC));
 800050a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800050e:	4618      	mov	r0, r3
 8000510:	f005 fc91 	bl	8005e36 <osMutexCreate>
 8000514:	4603      	mov	r3, r0
 8000516:	4a15      	ldr	r2, [pc, #84]	; (800056c <MX_FREERTOS_Init+0x70>)
 8000518:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of testTask */
  osThreadDef(testTask, TestTask, osPriorityNormal, 0, 256);
 800051a:	4b15      	ldr	r3, [pc, #84]	; (8000570 <MX_FREERTOS_Init+0x74>)
 800051c:	f107 041c 	add.w	r4, r7, #28
 8000520:	461d      	mov	r5, r3
 8000522:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000524:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000526:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800052a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  testTaskHandle = osThreadCreate(osThread(testTask), NULL);
 800052e:	f107 031c 	add.w	r3, r7, #28
 8000532:	2100      	movs	r1, #0
 8000534:	4618      	mov	r0, r3
 8000536:	f005 fc1e 	bl	8005d76 <osThreadCreate>
 800053a:	4603      	mov	r3, r0
 800053c:	4a0d      	ldr	r2, [pc, #52]	; (8000574 <MX_FREERTOS_Init+0x78>)
 800053e:	6013      	str	r3, [r2, #0]

  /* definition and creation of lcdTask */
  osThreadDef(lcdTask, LCDTask, osPriorityNormal, 0, 256);
 8000540:	4b0d      	ldr	r3, [pc, #52]	; (8000578 <MX_FREERTOS_Init+0x7c>)
 8000542:	463c      	mov	r4, r7
 8000544:	461d      	mov	r5, r3
 8000546:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000548:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800054a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800054e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  lcdTaskHandle = osThreadCreate(osThread(lcdTask), NULL);
 8000552:	463b      	mov	r3, r7
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f005 fc0d 	bl	8005d76 <osThreadCreate>
 800055c:	4603      	mov	r3, r0
 800055e:	4a07      	ldr	r2, [pc, #28]	; (800057c <MX_FREERTOS_Init+0x80>)
 8000560:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000562:	bf00      	nop
 8000564:	3740      	adds	r7, #64	; 0x40
 8000566:	46bd      	mov	sp, r7
 8000568:	bdb0      	pop	{r4, r5, r7, pc}
 800056a:	bf00      	nop
 800056c:	200042c8 	.word	0x200042c8
 8000570:	08007e9c 	.word	0x08007e9c
 8000574:	200042d0 	.word	0x200042d0
 8000578:	08007eb8 	.word	0x08007eb8
 800057c:	200042c4 	.word	0x200042c4

08000580 <TestTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_TestTask */
void TestTask(void const * argument)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b098      	sub	sp, #96	; 0x60
 8000584:	af02      	add	r7, sp, #8
 8000586:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TestTask */

	//команды i2c
	uint16_t addr = 0x40;
 8000588:	2340      	movs	r3, #64	; 0x40
 800058a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

	uint8_t cmdStart_1[6] = { 0x55, 0xAA, 0x04, 0x07, 0x00, 0x0B };
 800058e:	4a78      	ldr	r2, [pc, #480]	; (8000770 <TestTask+0x1f0>)
 8000590:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000594:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000598:	6018      	str	r0, [r3, #0]
 800059a:	3304      	adds	r3, #4
 800059c:	8019      	strh	r1, [r3, #0]
	uint8_t cmdRead_1[2] = { 0x00 };
 800059e:	2300      	movs	r3, #0
 80005a0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	uint8_t cmdStart_2[6] = { 0x55, 0xAA, 0x04, 0x06, 0x00, 0x0A };
 80005a4:	4a73      	ldr	r2, [pc, #460]	; (8000774 <TestTask+0x1f4>)
 80005a6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80005aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005ae:	6018      	str	r0, [r3, #0]
 80005b0:	3304      	adds	r3, #4
 80005b2:	8019      	strh	r1, [r3, #0]
	uint8_t cmdRead_2[2] = { 0x00 };
 80005b4:	2300      	movs	r3, #0
 80005b6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

	uint8_t cmdStart_3[9] = { 0x55, 0xAA, 0x07, 0x10, 0x19, 0x00, 0x00, 0x00, 0x30 };
 80005ba:	4a6f      	ldr	r2, [pc, #444]	; (8000778 <TestTask+0x1f8>)
 80005bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80005c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80005c2:	c303      	stmia	r3!, {r0, r1}
 80005c4:	701a      	strb	r2, [r3, #0]
	uint8_t cmdRead_3[2] = { 0x00 };
 80005c6:	2300      	movs	r3, #0
 80005c8:	863b      	strh	r3, [r7, #48]	; 0x30

	uint8_t cmdStart_4[7] = { 0x55, 0xAA, 0x05, 0x15, 0x01, 0x00, 0x1B };
 80005ca:	4a6c      	ldr	r2, [pc, #432]	; (800077c <TestTask+0x1fc>)
 80005cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005d4:	6018      	str	r0, [r3, #0]
 80005d6:	3304      	adds	r3, #4
 80005d8:	8019      	strh	r1, [r3, #0]
 80005da:	3302      	adds	r3, #2
 80005dc:	0c0a      	lsrs	r2, r1, #16
 80005de:	701a      	strb	r2, [r3, #0]
	uint8_t cmdRead_4[2] = { 0x00 };
 80005e0:	2300      	movs	r3, #0
 80005e2:	84bb      	strh	r3, [r7, #36]	; 0x24

	uint8_t cmdStop[7] = { 0x55, 0xAA, 0x05, 0x15, 0x00, 0x00, 0x1A };
 80005e4:	4a66      	ldr	r2, [pc, #408]	; (8000780 <TestTask+0x200>)
 80005e6:	f107 031c 	add.w	r3, r7, #28
 80005ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005ee:	6018      	str	r0, [r3, #0]
 80005f0:	3304      	adds	r3, #4
 80005f2:	8019      	strh	r1, [r3, #0]
 80005f4:	3302      	adds	r3, #2
 80005f6:	0c0a      	lsrs	r2, r1, #16
 80005f8:	701a      	strb	r2, [r3, #0]
	uint8_t cmdRead_stop[2] = { 0x00};
 80005fa:	2300      	movs	r3, #0
 80005fc:	833b      	strh	r3, [r7, #24]

	uint8_t read_data[2] = { 0x00 };
 80005fe:	2300      	movs	r3, #0
 8000600:	82bb      	strh	r3, [r7, #20]

	//команды uart
	uint8_t cmdASIC[7] = { 0x55, 0xAA, 0x52, 0x05, 0x00, 0x00, 0x0A };
 8000602:	4a60      	ldr	r2, [pc, #384]	; (8000784 <TestTask+0x204>)
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	e892 0003 	ldmia.w	r2, {r0, r1}
 800060c:	6018      	str	r0, [r3, #0]
 800060e:	3304      	adds	r3, #4
 8000610:	8019      	strh	r1, [r3, #0]
 8000612:	3302      	adds	r3, #2
 8000614:	0c0a      	lsrs	r2, r1, #16
 8000616:	701a      	strb	r2, [r3, #0]


	/* Infinite loop */
	for (;;) {
		if (start) {
 8000618:	4b5b      	ldr	r3, [pc, #364]	; (8000788 <TestTask+0x208>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d0fb      	beq.n	8000618 <TestTask+0x98>
			start = 0;
 8000620:	4b59      	ldr	r3, [pc, #356]	; (8000788 <TestTask+0x208>)
 8000622:	2200      	movs	r2, #0
 8000624:	701a      	strb	r2, [r3, #0]

			status_i2c = HAL_I2C_Master_Transmit(&hi2c1, addr, cmdStart_1, 6, 20);
 8000626:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800062a:	f8b7 1056 	ldrh.w	r1, [r7, #86]	; 0x56
 800062e:	2314      	movs	r3, #20
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	2306      	movs	r3, #6
 8000634:	4855      	ldr	r0, [pc, #340]	; (800078c <TestTask+0x20c>)
 8000636:	f001 f941 	bl	80018bc <HAL_I2C_Master_Transmit>
 800063a:	4603      	mov	r3, r0
 800063c:	461a      	mov	r2, r3
 800063e:	4b54      	ldr	r3, [pc, #336]	; (8000790 <TestTask+0x210>)
 8000640:	701a      	strb	r2, [r3, #0]
			osDelay(410);
 8000642:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8000646:	f005 fbe2 	bl	8005e0e <osDelay>
			status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, cmdRead_1, 2, 20);
 800064a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800064e:	f8b7 1056 	ldrh.w	r1, [r7, #86]	; 0x56
 8000652:	2314      	movs	r3, #20
 8000654:	9300      	str	r3, [sp, #0]
 8000656:	2302      	movs	r3, #2
 8000658:	484c      	ldr	r0, [pc, #304]	; (800078c <TestTask+0x20c>)
 800065a:	f001 fa2d 	bl	8001ab8 <HAL_I2C_Master_Receive>
 800065e:	4603      	mov	r3, r0
 8000660:	461a      	mov	r2, r3
 8000662:	4b4b      	ldr	r3, [pc, #300]	; (8000790 <TestTask+0x210>)
 8000664:	701a      	strb	r2, [r3, #0]
			osDelay(610);
 8000666:	f240 2062 	movw	r0, #610	; 0x262
 800066a:	f005 fbd0 	bl	8005e0e <osDelay>

			status_i2c = HAL_I2C_Master_Transmit(&hi2c1, addr, cmdStart_2, 6, 20);
 800066e:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000672:	f8b7 1056 	ldrh.w	r1, [r7, #86]	; 0x56
 8000676:	2314      	movs	r3, #20
 8000678:	9300      	str	r3, [sp, #0]
 800067a:	2306      	movs	r3, #6
 800067c:	4843      	ldr	r0, [pc, #268]	; (800078c <TestTask+0x20c>)
 800067e:	f001 f91d 	bl	80018bc <HAL_I2C_Master_Transmit>
 8000682:	4603      	mov	r3, r0
 8000684:	461a      	mov	r2, r3
 8000686:	4b42      	ldr	r3, [pc, #264]	; (8000790 <TestTask+0x210>)
 8000688:	701a      	strb	r2, [r3, #0]
			osDelay(410);
 800068a:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 800068e:	f005 fbbe 	bl	8005e0e <osDelay>
			status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, cmdRead_2, 2, 20);
 8000692:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000696:	f8b7 1056 	ldrh.w	r1, [r7, #86]	; 0x56
 800069a:	2314      	movs	r3, #20
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	2302      	movs	r3, #2
 80006a0:	483a      	ldr	r0, [pc, #232]	; (800078c <TestTask+0x20c>)
 80006a2:	f001 fa09 	bl	8001ab8 <HAL_I2C_Master_Receive>
 80006a6:	4603      	mov	r3, r0
 80006a8:	461a      	mov	r2, r3
 80006aa:	4b39      	ldr	r3, [pc, #228]	; (8000790 <TestTask+0x210>)
 80006ac:	701a      	strb	r2, [r3, #0]
			osDelay(2210);
 80006ae:	f640 00a2 	movw	r0, #2210	; 0x8a2
 80006b2:	f005 fbac 	bl	8005e0e <osDelay>

			status_i2c = HAL_I2C_Master_Transmit(&hi2c1, addr, cmdStart_3, 9, 20);
 80006b6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80006ba:	f8b7 1056 	ldrh.w	r1, [r7, #86]	; 0x56
 80006be:	2314      	movs	r3, #20
 80006c0:	9300      	str	r3, [sp, #0]
 80006c2:	2309      	movs	r3, #9
 80006c4:	4831      	ldr	r0, [pc, #196]	; (800078c <TestTask+0x20c>)
 80006c6:	f001 f8f9 	bl	80018bc <HAL_I2C_Master_Transmit>
 80006ca:	4603      	mov	r3, r0
 80006cc:	461a      	mov	r2, r3
 80006ce:	4b30      	ldr	r3, [pc, #192]	; (8000790 <TestTask+0x210>)
 80006d0:	701a      	strb	r2, [r3, #0]
			osDelay(110);
 80006d2:	206e      	movs	r0, #110	; 0x6e
 80006d4:	f005 fb9b 	bl	8005e0e <osDelay>
			status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, cmdRead_3, 2, 20);
 80006d8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80006dc:	f8b7 1056 	ldrh.w	r1, [r7, #86]	; 0x56
 80006e0:	2314      	movs	r3, #20
 80006e2:	9300      	str	r3, [sp, #0]
 80006e4:	2302      	movs	r3, #2
 80006e6:	4829      	ldr	r0, [pc, #164]	; (800078c <TestTask+0x20c>)
 80006e8:	f001 f9e6 	bl	8001ab8 <HAL_I2C_Master_Receive>
 80006ec:	4603      	mov	r3, r0
 80006ee:	461a      	mov	r2, r3
 80006f0:	4b27      	ldr	r3, [pc, #156]	; (8000790 <TestTask+0x210>)
 80006f2:	701a      	strb	r2, [r3, #0]
			osDelay(2210);
 80006f4:	f640 00a2 	movw	r0, #2210	; 0x8a2
 80006f8:	f005 fb89 	bl	8005e0e <osDelay>

			status_i2c = HAL_I2C_Master_Transmit(&hi2c1, addr, cmdStart_4, 7, 20);
 80006fc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000700:	f8b7 1056 	ldrh.w	r1, [r7, #86]	; 0x56
 8000704:	2314      	movs	r3, #20
 8000706:	9300      	str	r3, [sp, #0]
 8000708:	2307      	movs	r3, #7
 800070a:	4820      	ldr	r0, [pc, #128]	; (800078c <TestTask+0x20c>)
 800070c:	f001 f8d6 	bl	80018bc <HAL_I2C_Master_Transmit>
 8000710:	4603      	mov	r3, r0
 8000712:	461a      	mov	r2, r3
 8000714:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <TestTask+0x210>)
 8000716:	701a      	strb	r2, [r3, #0]
			osDelay(710);
 8000718:	f240 20c6 	movw	r0, #710	; 0x2c6
 800071c:	f005 fb77 	bl	8005e0e <osDelay>
			status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, cmdRead_4, 2, 20);
 8000720:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000724:	f8b7 1056 	ldrh.w	r1, [r7, #86]	; 0x56
 8000728:	2314      	movs	r3, #20
 800072a:	9300      	str	r3, [sp, #0]
 800072c:	2302      	movs	r3, #2
 800072e:	4817      	ldr	r0, [pc, #92]	; (800078c <TestTask+0x20c>)
 8000730:	f001 f9c2 	bl	8001ab8 <HAL_I2C_Master_Receive>
 8000734:	4603      	mov	r3, r0
 8000736:	461a      	mov	r2, r3
 8000738:	4b15      	ldr	r3, [pc, #84]	; (8000790 <TestTask+0x210>)
 800073a:	701a      	strb	r2, [r3, #0]

			osDelay(2100);
 800073c:	f640 0034 	movw	r0, #2100	; 0x834
 8000740:	f005 fb65 	bl	8005e0e <osDelay>

			status_uart = HAL_UART_Receive_IT(&huart1, readASIC, 9);
 8000744:	2209      	movs	r2, #9
 8000746:	4913      	ldr	r1, [pc, #76]	; (8000794 <TestTask+0x214>)
 8000748:	4813      	ldr	r0, [pc, #76]	; (8000798 <TestTask+0x218>)
 800074a:	f004 fc0c 	bl	8004f66 <HAL_UART_Receive_IT>
 800074e:	4603      	mov	r3, r0
 8000750:	461a      	mov	r2, r3
 8000752:	4b12      	ldr	r3, [pc, #72]	; (800079c <TestTask+0x21c>)
 8000754:	701a      	strb	r2, [r3, #0]
			status_uart = HAL_UART_Transmit(&huart1, cmdASIC, 7, 20);
 8000756:	f107 010c 	add.w	r1, r7, #12
 800075a:	2314      	movs	r3, #20
 800075c:	2207      	movs	r2, #7
 800075e:	480e      	ldr	r0, [pc, #56]	; (8000798 <TestTask+0x218>)
 8000760:	f004 fb6f 	bl	8004e42 <HAL_UART_Transmit>
 8000764:	4603      	mov	r3, r0
 8000766:	461a      	mov	r2, r3
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <TestTask+0x21c>)
 800076a:	701a      	strb	r2, [r3, #0]
		if (start) {
 800076c:	e754      	b.n	8000618 <TestTask+0x98>
 800076e:	bf00      	nop
 8000770:	08007ed4 	.word	0x08007ed4
 8000774:	08007edc 	.word	0x08007edc
 8000778:	08007ee4 	.word	0x08007ee4
 800077c:	08007ef0 	.word	0x08007ef0
 8000780:	08007ef8 	.word	0x08007ef8
 8000784:	08007f00 	.word	0x08007f00
 8000788:	200002b0 	.word	0x200002b0
 800078c:	20004328 	.word	0x20004328
 8000790:	200042cc 	.word	0x200042cc
 8000794:	20000094 	.word	0x20000094
 8000798:	200043c4 	.word	0x200043c4
 800079c:	200042c0 	.word	0x200042c0

080007a0 <LCDTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_LCDTask */
void LCDTask(void const * argument)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LCDTask */
/* Infinite loop */
for (;;) {
	osDelay(1);
 80007a8:	2001      	movs	r0, #1
 80007aa:	f005 fb30 	bl	8005e0e <osDelay>
 80007ae:	e7fb      	b.n	80007a8 <LCDTask+0x8>

080007b0 <HAL_UART_RxCpltCallback>:
  /* USER CODE END LCDTask */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]

	status_uart = HAL_UART_Receive_IT(&huart1, readASIC+(9*counter_ASIC), 9);
 80007b8:	4b0d      	ldr	r3, [pc, #52]	; (80007f0 <HAL_UART_RxCpltCallback+0x40>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	461a      	mov	r2, r3
 80007be:	4613      	mov	r3, r2
 80007c0:	00db      	lsls	r3, r3, #3
 80007c2:	4413      	add	r3, r2
 80007c4:	461a      	mov	r2, r3
 80007c6:	4b0b      	ldr	r3, [pc, #44]	; (80007f4 <HAL_UART_RxCpltCallback+0x44>)
 80007c8:	4413      	add	r3, r2
 80007ca:	2209      	movs	r2, #9
 80007cc:	4619      	mov	r1, r3
 80007ce:	480a      	ldr	r0, [pc, #40]	; (80007f8 <HAL_UART_RxCpltCallback+0x48>)
 80007d0:	f004 fbc9 	bl	8004f66 <HAL_UART_Receive_IT>
 80007d4:	4603      	mov	r3, r0
 80007d6:	461a      	mov	r2, r3
 80007d8:	4b08      	ldr	r3, [pc, #32]	; (80007fc <HAL_UART_RxCpltCallback+0x4c>)
 80007da:	701a      	strb	r2, [r3, #0]
	counter_ASIC++;
 80007dc:	4b04      	ldr	r3, [pc, #16]	; (80007f0 <HAL_UART_RxCpltCallback+0x40>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	3301      	adds	r3, #1
 80007e2:	b2da      	uxtb	r2, r3
 80007e4:	4b02      	ldr	r3, [pc, #8]	; (80007f0 <HAL_UART_RxCpltCallback+0x40>)
 80007e6:	701a      	strb	r2, [r3, #0]
}
 80007e8:	bf00      	nop
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20000090 	.word	0x20000090
 80007f4:	20000094 	.word	0x20000094
 80007f8:	200043c4 	.word	0x200043c4
 80007fc:	200042c0 	.word	0x200042c0

08000800 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08a      	sub	sp, #40	; 0x28
 8000804:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000806:	f107 0314 	add.w	r3, r7, #20
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
 8000814:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	613b      	str	r3, [r7, #16]
 800081a:	4b27      	ldr	r3, [pc, #156]	; (80008b8 <MX_GPIO_Init+0xb8>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a26      	ldr	r2, [pc, #152]	; (80008b8 <MX_GPIO_Init+0xb8>)
 8000820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b24      	ldr	r3, [pc, #144]	; (80008b8 <MX_GPIO_Init+0xb8>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800082e:	613b      	str	r3, [r7, #16]
 8000830:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	4b20      	ldr	r3, [pc, #128]	; (80008b8 <MX_GPIO_Init+0xb8>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a1f      	ldr	r2, [pc, #124]	; (80008b8 <MX_GPIO_Init+0xb8>)
 800083c:	f043 0304 	orr.w	r3, r3, #4
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b1d      	ldr	r3, [pc, #116]	; (80008b8 <MX_GPIO_Init+0xb8>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0304 	and.w	r3, r3, #4
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	4b19      	ldr	r3, [pc, #100]	; (80008b8 <MX_GPIO_Init+0xb8>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a18      	ldr	r2, [pc, #96]	; (80008b8 <MX_GPIO_Init+0xb8>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b16      	ldr	r3, [pc, #88]	; (80008b8 <MX_GPIO_Init+0xb8>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <MX_GPIO_Init+0xb8>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a11      	ldr	r2, [pc, #68]	; (80008b8 <MX_GPIO_Init+0xb8>)
 8000874:	f043 0302 	orr.w	r3, r3, #2
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <MX_GPIO_Init+0xb8>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0302 	and.w	r3, r3, #2
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_ASIC_GPIO_Port, RST_ASIC_Pin, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800088c:	480b      	ldr	r0, [pc, #44]	; (80008bc <MX_GPIO_Init+0xbc>)
 800088e:	f000 feb7 	bl	8001600 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RST_ASIC_Pin;
 8000892:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000898:	2301      	movs	r3, #1
 800089a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a0:	2300      	movs	r3, #0
 80008a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RST_ASIC_GPIO_Port, &GPIO_InitStruct);
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	4619      	mov	r1, r3
 80008aa:	4804      	ldr	r0, [pc, #16]	; (80008bc <MX_GPIO_Init+0xbc>)
 80008ac:	f000 fd0c 	bl	80012c8 <HAL_GPIO_Init>

}
 80008b0:	bf00      	nop
 80008b2:	3728      	adds	r7, #40	; 0x28
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40023800 	.word	0x40023800
 80008bc:	40020000 	.word	0x40020000

080008c0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008c4:	4b13      	ldr	r3, [pc, #76]	; (8000914 <MX_I2C1_Init+0x54>)
 80008c6:	4a14      	ldr	r2, [pc, #80]	; (8000918 <MX_I2C1_Init+0x58>)
 80008c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 35000;
 80008ca:	4b12      	ldr	r3, [pc, #72]	; (8000914 <MX_I2C1_Init+0x54>)
 80008cc:	f648 02b8 	movw	r2, #35000	; 0x88b8
 80008d0:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008d2:	4b10      	ldr	r3, [pc, #64]	; (8000914 <MX_I2C1_Init+0x54>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008d8:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <MX_I2C1_Init+0x54>)
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008de:	4b0d      	ldr	r3, [pc, #52]	; (8000914 <MX_I2C1_Init+0x54>)
 80008e0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008e6:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <MX_I2C1_Init+0x54>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008ec:	4b09      	ldr	r3, [pc, #36]	; (8000914 <MX_I2C1_Init+0x54>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008f2:	4b08      	ldr	r3, [pc, #32]	; (8000914 <MX_I2C1_Init+0x54>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008f8:	4b06      	ldr	r3, [pc, #24]	; (8000914 <MX_I2C1_Init+0x54>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008fe:	4805      	ldr	r0, [pc, #20]	; (8000914 <MX_I2C1_Init+0x54>)
 8000900:	f000 fe98 	bl	8001634 <HAL_I2C_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 800090a:	f000 f985 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20004328 	.word	0x20004328
 8000918:	40005400 	.word	0x40005400

0800091c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000920:	4b12      	ldr	r3, [pc, #72]	; (800096c <MX_I2C3_Init+0x50>)
 8000922:	4a13      	ldr	r2, [pc, #76]	; (8000970 <MX_I2C3_Init+0x54>)
 8000924:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000926:	4b11      	ldr	r3, [pc, #68]	; (800096c <MX_I2C3_Init+0x50>)
 8000928:	4a12      	ldr	r2, [pc, #72]	; (8000974 <MX_I2C3_Init+0x58>)
 800092a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800092c:	4b0f      	ldr	r3, [pc, #60]	; (800096c <MX_I2C3_Init+0x50>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <MX_I2C3_Init+0x50>)
 8000934:	2200      	movs	r2, #0
 8000936:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000938:	4b0c      	ldr	r3, [pc, #48]	; (800096c <MX_I2C3_Init+0x50>)
 800093a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800093e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000940:	4b0a      	ldr	r3, [pc, #40]	; (800096c <MX_I2C3_Init+0x50>)
 8000942:	2200      	movs	r2, #0
 8000944:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000946:	4b09      	ldr	r3, [pc, #36]	; (800096c <MX_I2C3_Init+0x50>)
 8000948:	2200      	movs	r2, #0
 800094a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800094c:	4b07      	ldr	r3, [pc, #28]	; (800096c <MX_I2C3_Init+0x50>)
 800094e:	2200      	movs	r2, #0
 8000950:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000952:	4b06      	ldr	r3, [pc, #24]	; (800096c <MX_I2C3_Init+0x50>)
 8000954:	2200      	movs	r2, #0
 8000956:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000958:	4804      	ldr	r0, [pc, #16]	; (800096c <MX_I2C3_Init+0x50>)
 800095a:	f000 fe6b 	bl	8001634 <HAL_I2C_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000964:	f000 f958 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000968:	bf00      	nop
 800096a:	bd80      	pop	{r7, pc}
 800096c:	200042d4 	.word	0x200042d4
 8000970:	40005c00 	.word	0x40005c00
 8000974:	000186a0 	.word	0x000186a0

08000978 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08c      	sub	sp, #48	; 0x30
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000980:	f107 031c 	add.w	r3, r7, #28
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a52      	ldr	r2, [pc, #328]	; (8000ae0 <HAL_I2C_MspInit+0x168>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d13c      	bne.n	8000a14 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	61bb      	str	r3, [r7, #24]
 800099e:	4b51      	ldr	r3, [pc, #324]	; (8000ae4 <HAL_I2C_MspInit+0x16c>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a50      	ldr	r2, [pc, #320]	; (8000ae4 <HAL_I2C_MspInit+0x16c>)
 80009a4:	f043 0302 	orr.w	r3, r3, #2
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
 80009aa:	4b4e      	ldr	r3, [pc, #312]	; (8000ae4 <HAL_I2C_MspInit+0x16c>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	f003 0302 	and.w	r3, r3, #2
 80009b2:	61bb      	str	r3, [r7, #24]
 80009b4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009b6:	23c0      	movs	r3, #192	; 0xc0
 80009b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009ba:	2312      	movs	r3, #18
 80009bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009be:	2301      	movs	r3, #1
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c2:	2303      	movs	r3, #3
 80009c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009c6:	2304      	movs	r3, #4
 80009c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	4619      	mov	r1, r3
 80009d0:	4845      	ldr	r0, [pc, #276]	; (8000ae8 <HAL_I2C_MspInit+0x170>)
 80009d2:	f000 fc79 	bl	80012c8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	617b      	str	r3, [r7, #20]
 80009da:	4b42      	ldr	r3, [pc, #264]	; (8000ae4 <HAL_I2C_MspInit+0x16c>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009de:	4a41      	ldr	r2, [pc, #260]	; (8000ae4 <HAL_I2C_MspInit+0x16c>)
 80009e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009e4:	6413      	str	r3, [r2, #64]	; 0x40
 80009e6:	4b3f      	ldr	r3, [pc, #252]	; (8000ae4 <HAL_I2C_MspInit+0x16c>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009ee:	617b      	str	r3, [r7, #20]
 80009f0:	697b      	ldr	r3, [r7, #20]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80009f2:	2200      	movs	r2, #0
 80009f4:	2105      	movs	r1, #5
 80009f6:	201f      	movs	r0, #31
 80009f8:	f000 fb9c 	bl	8001134 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80009fc:	201f      	movs	r0, #31
 80009fe:	f000 fbb5 	bl	800116c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2105      	movs	r1, #5
 8000a06:	2020      	movs	r0, #32
 8000a08:	f000 fb94 	bl	8001134 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000a0c:	2020      	movs	r0, #32
 8000a0e:	f000 fbad 	bl	800116c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000a12:	e060      	b.n	8000ad6 <HAL_I2C_MspInit+0x15e>
  else if(i2cHandle->Instance==I2C3)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a34      	ldr	r2, [pc, #208]	; (8000aec <HAL_I2C_MspInit+0x174>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d15b      	bne.n	8000ad6 <HAL_I2C_MspInit+0x15e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	613b      	str	r3, [r7, #16]
 8000a22:	4b30      	ldr	r3, [pc, #192]	; (8000ae4 <HAL_I2C_MspInit+0x16c>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a2f      	ldr	r2, [pc, #188]	; (8000ae4 <HAL_I2C_MspInit+0x16c>)
 8000a28:	f043 0304 	orr.w	r3, r3, #4
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b2d      	ldr	r3, [pc, #180]	; (8000ae4 <HAL_I2C_MspInit+0x16c>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0304 	and.w	r3, r3, #4
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	4b29      	ldr	r3, [pc, #164]	; (8000ae4 <HAL_I2C_MspInit+0x16c>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a28      	ldr	r2, [pc, #160]	; (8000ae4 <HAL_I2C_MspInit+0x16c>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b26      	ldr	r3, [pc, #152]	; (8000ae4 <HAL_I2C_MspInit+0x16c>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a5c:	2312      	movs	r3, #18
 8000a5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a64:	2303      	movs	r3, #3
 8000a66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000a68:	2304      	movs	r3, #4
 8000a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a6c:	f107 031c 	add.w	r3, r7, #28
 8000a70:	4619      	mov	r1, r3
 8000a72:	481f      	ldr	r0, [pc, #124]	; (8000af0 <HAL_I2C_MspInit+0x178>)
 8000a74:	f000 fc28 	bl	80012c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a7e:	2312      	movs	r3, #18
 8000a80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a86:	2303      	movs	r3, #3
 8000a88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000a8a:	2304      	movs	r3, #4
 8000a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8e:	f107 031c 	add.w	r3, r7, #28
 8000a92:	4619      	mov	r1, r3
 8000a94:	4817      	ldr	r0, [pc, #92]	; (8000af4 <HAL_I2C_MspInit+0x17c>)
 8000a96:	f000 fc17 	bl	80012c8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60bb      	str	r3, [r7, #8]
 8000a9e:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <HAL_I2C_MspInit+0x16c>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa2:	4a10      	ldr	r2, [pc, #64]	; (8000ae4 <HAL_I2C_MspInit+0x16c>)
 8000aa4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <HAL_I2C_MspInit+0x16c>)
 8000aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000ab2:	60bb      	str	r3, [r7, #8]
 8000ab4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 5, 0);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2105      	movs	r1, #5
 8000aba:	2048      	movs	r0, #72	; 0x48
 8000abc:	f000 fb3a 	bl	8001134 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8000ac0:	2048      	movs	r0, #72	; 0x48
 8000ac2:	f000 fb53 	bl	800116c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 5, 0);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2105      	movs	r1, #5
 8000aca:	2049      	movs	r0, #73	; 0x49
 8000acc:	f000 fb32 	bl	8001134 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8000ad0:	2049      	movs	r0, #73	; 0x49
 8000ad2:	f000 fb4b 	bl	800116c <HAL_NVIC_EnableIRQ>
}
 8000ad6:	bf00      	nop
 8000ad8:	3730      	adds	r7, #48	; 0x30
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40005400 	.word	0x40005400
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40020400 	.word	0x40020400
 8000aec:	40005c00 	.word	0x40005c00
 8000af0:	40020800 	.word	0x40020800
 8000af4:	40020000 	.word	0x40020000

08000af8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000afc:	f000 fa20 	bl	8000f40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b00:	f000 f80e 	bl	8000b20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b04:	f7ff fe7c 	bl	8000800 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000b08:	f7ff feda 	bl	80008c0 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000b0c:	f7ff ff06 	bl	800091c <MX_I2C3_Init>
  MX_USART1_UART_Init();
 8000b10:	f000 f972 	bl	8000df8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000b14:	f7ff fcf2 	bl	80004fc <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000b18:	f005 f926 	bl	8005d68 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <main+0x24>
	...

08000b20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b094      	sub	sp, #80	; 0x50
 8000b24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b26:	f107 0320 	add.w	r3, r7, #32
 8000b2a:	2230      	movs	r2, #48	; 0x30
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f007 f8d0 	bl	8007cd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b34:	f107 030c 	add.w	r3, r7, #12
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b44:	2300      	movs	r3, #0
 8000b46:	60bb      	str	r3, [r7, #8]
 8000b48:	4b28      	ldr	r3, [pc, #160]	; (8000bec <SystemClock_Config+0xcc>)
 8000b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4c:	4a27      	ldr	r2, [pc, #156]	; (8000bec <SystemClock_Config+0xcc>)
 8000b4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b52:	6413      	str	r3, [r2, #64]	; 0x40
 8000b54:	4b25      	ldr	r3, [pc, #148]	; (8000bec <SystemClock_Config+0xcc>)
 8000b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b5c:	60bb      	str	r3, [r7, #8]
 8000b5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b60:	2300      	movs	r3, #0
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	4b22      	ldr	r3, [pc, #136]	; (8000bf0 <SystemClock_Config+0xd0>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a21      	ldr	r2, [pc, #132]	; (8000bf0 <SystemClock_Config+0xd0>)
 8000b6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b6e:	6013      	str	r3, [r2, #0]
 8000b70:	4b1f      	ldr	r3, [pc, #124]	; (8000bf0 <SystemClock_Config+0xd0>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b78:	607b      	str	r3, [r7, #4]
 8000b7a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b80:	2301      	movs	r3, #1
 8000b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b84:	2310      	movs	r3, #16
 8000b86:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b90:	2308      	movs	r3, #8
 8000b92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000b94:	23a8      	movs	r3, #168	; 0xa8
 8000b96:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b9c:	2304      	movs	r3, #4
 8000b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba0:	f107 0320 	add.w	r3, r7, #32
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f003 f9ab 	bl	8003f00 <HAL_RCC_OscConfig>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000bb0:	f000 f832 	bl	8000c18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb4:	230f      	movs	r3, #15
 8000bb6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bc0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bc4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000bcc:	f107 030c 	add.w	r3, r7, #12
 8000bd0:	2105      	movs	r1, #5
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f003 fc0c 	bl	80043f0 <HAL_RCC_ClockConfig>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000bde:	f000 f81b 	bl	8000c18 <Error_Handler>
  }
}
 8000be2:	bf00      	nop
 8000be4:	3750      	adds	r7, #80	; 0x50
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	40007000 	.word	0x40007000

08000bf4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a04      	ldr	r2, [pc, #16]	; (8000c14 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d101      	bne.n	8000c0a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c06:	f000 f9bd 	bl	8000f84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40001400 	.word	0x40001400

08000c18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c1c:	b672      	cpsid	i
}
 8000c1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <Error_Handler+0x8>
	...

08000c24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	607b      	str	r3, [r7, #4]
 8000c2e:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <HAL_MspInit+0x54>)
 8000c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c32:	4a11      	ldr	r2, [pc, #68]	; (8000c78 <HAL_MspInit+0x54>)
 8000c34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c38:	6453      	str	r3, [r2, #68]	; 0x44
 8000c3a:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <HAL_MspInit+0x54>)
 8000c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	603b      	str	r3, [r7, #0]
 8000c4a:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <HAL_MspInit+0x54>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4e:	4a0a      	ldr	r2, [pc, #40]	; (8000c78 <HAL_MspInit+0x54>)
 8000c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c54:	6413      	str	r3, [r2, #64]	; 0x40
 8000c56:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <HAL_MspInit+0x54>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5e:	603b      	str	r3, [r7, #0]
 8000c60:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c62:	2200      	movs	r2, #0
 8000c64:	210f      	movs	r1, #15
 8000c66:	f06f 0001 	mvn.w	r0, #1
 8000c6a:	f000 fa63 	bl	8001134 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40023800 	.word	0x40023800

08000c7c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08c      	sub	sp, #48	; 0x30
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	6879      	ldr	r1, [r7, #4]
 8000c90:	2037      	movs	r0, #55	; 0x37
 8000c92:	f000 fa4f 	bl	8001134 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000c96:	2037      	movs	r0, #55	; 0x37
 8000c98:	f000 fa68 	bl	800116c <HAL_NVIC_EnableIRQ>

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	4b1f      	ldr	r3, [pc, #124]	; (8000d20 <HAL_InitTick+0xa4>)
 8000ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca4:	4a1e      	ldr	r2, [pc, #120]	; (8000d20 <HAL_InitTick+0xa4>)
 8000ca6:	f043 0320 	orr.w	r3, r3, #32
 8000caa:	6413      	str	r3, [r2, #64]	; 0x40
 8000cac:	4b1c      	ldr	r3, [pc, #112]	; (8000d20 <HAL_InitTick+0xa4>)
 8000cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb0:	f003 0320 	and.w	r3, r3, #32
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cb8:	f107 0210 	add.w	r2, r7, #16
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	4611      	mov	r1, r2
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f003 fd90 	bl	80047e8 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000cc8:	f003 fd66 	bl	8004798 <HAL_RCC_GetPCLK1Freq>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	005b      	lsls	r3, r3, #1
 8000cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cd4:	4a13      	ldr	r2, [pc, #76]	; (8000d24 <HAL_InitTick+0xa8>)
 8000cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8000cda:	0c9b      	lsrs	r3, r3, #18
 8000cdc:	3b01      	subs	r3, #1
 8000cde:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000ce0:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <HAL_InitTick+0xac>)
 8000ce2:	4a12      	ldr	r2, [pc, #72]	; (8000d2c <HAL_InitTick+0xb0>)
 8000ce4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000ce6:	4b10      	ldr	r3, [pc, #64]	; (8000d28 <HAL_InitTick+0xac>)
 8000ce8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cec:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000cee:	4a0e      	ldr	r2, [pc, #56]	; (8000d28 <HAL_InitTick+0xac>)
 8000cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cf2:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <HAL_InitTick+0xac>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cfa:	4b0b      	ldr	r3, [pc, #44]	; (8000d28 <HAL_InitTick+0xac>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000d00:	4809      	ldr	r0, [pc, #36]	; (8000d28 <HAL_InitTick+0xac>)
 8000d02:	f003 fda3 	bl	800484c <HAL_TIM_Base_Init>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d104      	bne.n	8000d16 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000d0c:	4806      	ldr	r0, [pc, #24]	; (8000d28 <HAL_InitTick+0xac>)
 8000d0e:	f003 fdf7 	bl	8004900 <HAL_TIM_Base_Start_IT>
 8000d12:	4603      	mov	r3, r0
 8000d14:	e000      	b.n	8000d18 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3730      	adds	r7, #48	; 0x30
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40023800 	.word	0x40023800
 8000d24:	431bde83 	.word	0x431bde83
 8000d28:	2000437c 	.word	0x2000437c
 8000d2c:	40001400 	.word	0x40001400

08000d30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <NMI_Handler+0x4>

08000d36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d3a:	e7fe      	b.n	8000d3a <HardFault_Handler+0x4>

08000d3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <MemManage_Handler+0x4>

08000d42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d46:	e7fe      	b.n	8000d46 <BusFault_Handler+0x4>

08000d48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <UsageFault_Handler+0x4>

08000d4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000d60:	4802      	ldr	r0, [pc, #8]	; (8000d6c <I2C1_EV_IRQHandler+0x10>)
 8000d62:	f001 f8cf 	bl	8001f04 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20004328 	.word	0x20004328

08000d70 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000d74:	4802      	ldr	r0, [pc, #8]	; (8000d80 <I2C1_ER_IRQHandler+0x10>)
 8000d76:	f001 fa36 	bl	80021e6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20004328 	.word	0x20004328

08000d84 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d88:	4802      	ldr	r0, [pc, #8]	; (8000d94 <USART1_IRQHandler+0x10>)
 8000d8a:	f004 f91d 	bl	8004fc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	200043c4 	.word	0x200043c4

08000d98 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000d9c:	4802      	ldr	r0, [pc, #8]	; (8000da8 <TIM7_IRQHandler+0x10>)
 8000d9e:	f003 fe1f 	bl	80049e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	2000437c 	.word	0x2000437c

08000dac <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8000db0:	4802      	ldr	r0, [pc, #8]	; (8000dbc <I2C3_EV_IRQHandler+0x10>)
 8000db2:	f001 f8a7 	bl	8001f04 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	200042d4 	.word	0x200042d4

08000dc0 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8000dc4:	4802      	ldr	r0, [pc, #8]	; (8000dd0 <I2C3_ER_IRQHandler+0x10>)
 8000dc6:	f001 fa0e 	bl	80021e6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	200042d4 	.word	0x200042d4

08000dd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dd8:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <SystemInit+0x20>)
 8000dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dde:	4a05      	ldr	r2, [pc, #20]	; (8000df4 <SystemInit+0x20>)
 8000de0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000de4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000dfc:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <MX_USART1_UART_Init+0x4c>)
 8000dfe:	4a12      	ldr	r2, [pc, #72]	; (8000e48 <MX_USART1_UART_Init+0x50>)
 8000e00:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e02:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <MX_USART1_UART_Init+0x4c>)
 8000e04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e08:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e0a:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <MX_USART1_UART_Init+0x4c>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e10:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <MX_USART1_UART_Init+0x4c>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e16:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <MX_USART1_UART_Init+0x4c>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e1c:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <MX_USART1_UART_Init+0x4c>)
 8000e1e:	220c      	movs	r2, #12
 8000e20:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e22:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <MX_USART1_UART_Init+0x4c>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e28:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <MX_USART1_UART_Init+0x4c>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e2e:	4805      	ldr	r0, [pc, #20]	; (8000e44 <MX_USART1_UART_Init+0x4c>)
 8000e30:	f003 ffba 	bl	8004da8 <HAL_UART_Init>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e3a:	f7ff feed 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	200043c4 	.word	0x200043c4
 8000e48:	40011000 	.word	0x40011000

08000e4c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08a      	sub	sp, #40	; 0x28
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e54:	f107 0314 	add.w	r3, r7, #20
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a1d      	ldr	r2, [pc, #116]	; (8000ee0 <HAL_UART_MspInit+0x94>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d134      	bne.n	8000ed8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	613b      	str	r3, [r7, #16]
 8000e72:	4b1c      	ldr	r3, [pc, #112]	; (8000ee4 <HAL_UART_MspInit+0x98>)
 8000e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e76:	4a1b      	ldr	r2, [pc, #108]	; (8000ee4 <HAL_UART_MspInit+0x98>)
 8000e78:	f043 0310 	orr.w	r3, r3, #16
 8000e7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e7e:	4b19      	ldr	r3, [pc, #100]	; (8000ee4 <HAL_UART_MspInit+0x98>)
 8000e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e82:	f003 0310 	and.w	r3, r3, #16
 8000e86:	613b      	str	r3, [r7, #16]
 8000e88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <HAL_UART_MspInit+0x98>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	4a14      	ldr	r2, [pc, #80]	; (8000ee4 <HAL_UART_MspInit+0x98>)
 8000e94:	f043 0301 	orr.w	r3, r3, #1
 8000e98:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9a:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <HAL_UART_MspInit+0x98>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ea6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000eaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eac:	2302      	movs	r3, #2
 8000eae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000eb8:	2307      	movs	r3, #7
 8000eba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4809      	ldr	r0, [pc, #36]	; (8000ee8 <HAL_UART_MspInit+0x9c>)
 8000ec4:	f000 fa00 	bl	80012c8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2105      	movs	r1, #5
 8000ecc:	2025      	movs	r0, #37	; 0x25
 8000ece:	f000 f931 	bl	8001134 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ed2:	2025      	movs	r0, #37	; 0x25
 8000ed4:	f000 f94a 	bl	800116c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000ed8:	bf00      	nop
 8000eda:	3728      	adds	r7, #40	; 0x28
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40011000 	.word	0x40011000
 8000ee4:	40023800 	.word	0x40023800
 8000ee8:	40020000 	.word	0x40020000

08000eec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000eec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ef0:	480d      	ldr	r0, [pc, #52]	; (8000f28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ef2:	490e      	ldr	r1, [pc, #56]	; (8000f2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ef4:	4a0e      	ldr	r2, [pc, #56]	; (8000f30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ef6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ef8:	e002      	b.n	8000f00 <LoopCopyDataInit>

08000efa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000efa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000efc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000efe:	3304      	adds	r3, #4

08000f00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f04:	d3f9      	bcc.n	8000efa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f06:	4a0b      	ldr	r2, [pc, #44]	; (8000f34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f08:	4c0b      	ldr	r4, [pc, #44]	; (8000f38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f0c:	e001      	b.n	8000f12 <LoopFillZerobss>

08000f0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f10:	3204      	adds	r2, #4

08000f12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f14:	d3fb      	bcc.n	8000f0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f16:	f7ff ff5d 	bl	8000dd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f1a:	f006 fea7 	bl	8007c6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f1e:	f7ff fdeb 	bl	8000af8 <main>
  bx  lr    
 8000f22:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f2c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000f30:	08007f98 	.word	0x08007f98
  ldr r2, =_sbss
 8000f34:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000f38:	20004418 	.word	0x20004418

08000f3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f3c:	e7fe      	b.n	8000f3c <ADC_IRQHandler>
	...

08000f40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f44:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <HAL_Init+0x40>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a0d      	ldr	r2, [pc, #52]	; (8000f80 <HAL_Init+0x40>)
 8000f4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f50:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <HAL_Init+0x40>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a0a      	ldr	r2, [pc, #40]	; (8000f80 <HAL_Init+0x40>)
 8000f56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f5c:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <HAL_Init+0x40>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a07      	ldr	r2, [pc, #28]	; (8000f80 <HAL_Init+0x40>)
 8000f62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f68:	2003      	movs	r0, #3
 8000f6a:	f000 f8d8 	bl	800111e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f6e:	200f      	movs	r0, #15
 8000f70:	f7ff fe84 	bl	8000c7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f74:	f7ff fe56 	bl	8000c24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40023c00 	.word	0x40023c00

08000f84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f88:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <HAL_IncTick+0x20>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <HAL_IncTick+0x24>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4413      	add	r3, r2
 8000f94:	4a04      	ldr	r2, [pc, #16]	; (8000fa8 <HAL_IncTick+0x24>)
 8000f96:	6013      	str	r3, [r2, #0]
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	20000008 	.word	0x20000008
 8000fa8:	20004408 	.word	0x20004408

08000fac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb0:	4b03      	ldr	r3, [pc, #12]	; (8000fc0 <HAL_GetTick+0x14>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	20004408 	.word	0x20004408

08000fc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f003 0307 	and.w	r3, r3, #7
 8000fd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fda:	68ba      	ldr	r2, [r7, #8]
 8000fdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ff6:	4a04      	ldr	r2, [pc, #16]	; (8001008 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	60d3      	str	r3, [r2, #12]
}
 8000ffc:	bf00      	nop
 8000ffe:	3714      	adds	r7, #20
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001010:	4b04      	ldr	r3, [pc, #16]	; (8001024 <__NVIC_GetPriorityGrouping+0x18>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	0a1b      	lsrs	r3, r3, #8
 8001016:	f003 0307 	and.w	r3, r3, #7
}
 800101a:	4618      	mov	r0, r3
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001036:	2b00      	cmp	r3, #0
 8001038:	db0b      	blt.n	8001052 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	f003 021f 	and.w	r2, r3, #31
 8001040:	4907      	ldr	r1, [pc, #28]	; (8001060 <__NVIC_EnableIRQ+0x38>)
 8001042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001046:	095b      	lsrs	r3, r3, #5
 8001048:	2001      	movs	r0, #1
 800104a:	fa00 f202 	lsl.w	r2, r0, r2
 800104e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	e000e100 	.word	0xe000e100

08001064 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	6039      	str	r1, [r7, #0]
 800106e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001074:	2b00      	cmp	r3, #0
 8001076:	db0a      	blt.n	800108e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	b2da      	uxtb	r2, r3
 800107c:	490c      	ldr	r1, [pc, #48]	; (80010b0 <__NVIC_SetPriority+0x4c>)
 800107e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001082:	0112      	lsls	r2, r2, #4
 8001084:	b2d2      	uxtb	r2, r2
 8001086:	440b      	add	r3, r1
 8001088:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800108c:	e00a      	b.n	80010a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	b2da      	uxtb	r2, r3
 8001092:	4908      	ldr	r1, [pc, #32]	; (80010b4 <__NVIC_SetPriority+0x50>)
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	f003 030f 	and.w	r3, r3, #15
 800109a:	3b04      	subs	r3, #4
 800109c:	0112      	lsls	r2, r2, #4
 800109e:	b2d2      	uxtb	r2, r2
 80010a0:	440b      	add	r3, r1
 80010a2:	761a      	strb	r2, [r3, #24]
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	e000e100 	.word	0xe000e100
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b089      	sub	sp, #36	; 0x24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	f1c3 0307 	rsb	r3, r3, #7
 80010d2:	2b04      	cmp	r3, #4
 80010d4:	bf28      	it	cs
 80010d6:	2304      	movcs	r3, #4
 80010d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	3304      	adds	r3, #4
 80010de:	2b06      	cmp	r3, #6
 80010e0:	d902      	bls.n	80010e8 <NVIC_EncodePriority+0x30>
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	3b03      	subs	r3, #3
 80010e6:	e000      	b.n	80010ea <NVIC_EncodePriority+0x32>
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ec:	f04f 32ff 	mov.w	r2, #4294967295
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43da      	mvns	r2, r3
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	401a      	ands	r2, r3
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001100:	f04f 31ff 	mov.w	r1, #4294967295
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	fa01 f303 	lsl.w	r3, r1, r3
 800110a:	43d9      	mvns	r1, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001110:	4313      	orrs	r3, r2
         );
}
 8001112:	4618      	mov	r0, r3
 8001114:	3724      	adds	r7, #36	; 0x24
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b082      	sub	sp, #8
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f7ff ff4c 	bl	8000fc4 <__NVIC_SetPriorityGrouping>
}
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
 8001140:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001142:	2300      	movs	r3, #0
 8001144:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001146:	f7ff ff61 	bl	800100c <__NVIC_GetPriorityGrouping>
 800114a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800114c:	687a      	ldr	r2, [r7, #4]
 800114e:	68b9      	ldr	r1, [r7, #8]
 8001150:	6978      	ldr	r0, [r7, #20]
 8001152:	f7ff ffb1 	bl	80010b8 <NVIC_EncodePriority>
 8001156:	4602      	mov	r2, r0
 8001158:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800115c:	4611      	mov	r1, r2
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff ff80 	bl	8001064 <__NVIC_SetPriority>
}
 8001164:	bf00      	nop
 8001166:	3718      	adds	r7, #24
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff ff54 	bl	8001028 <__NVIC_EnableIRQ>
}
 8001180:	bf00      	nop
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001194:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001196:	f7ff ff09 	bl	8000fac <HAL_GetTick>
 800119a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d008      	beq.n	80011ba <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2280      	movs	r2, #128	; 0x80
 80011ac:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e052      	b.n	8001260 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f022 0216 	bic.w	r2, r2, #22
 80011c8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	695a      	ldr	r2, [r3, #20]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011d8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d103      	bne.n	80011ea <HAL_DMA_Abort+0x62>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d007      	beq.n	80011fa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f022 0208 	bic.w	r2, r2, #8
 80011f8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f022 0201 	bic.w	r2, r2, #1
 8001208:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800120a:	e013      	b.n	8001234 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800120c:	f7ff fece 	bl	8000fac <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	2b05      	cmp	r3, #5
 8001218:	d90c      	bls.n	8001234 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2220      	movs	r2, #32
 800121e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2203      	movs	r2, #3
 8001224:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2200      	movs	r2, #0
 800122c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001230:	2303      	movs	r3, #3
 8001232:	e015      	b.n	8001260 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	2b00      	cmp	r3, #0
 8001240:	d1e4      	bne.n	800120c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001246:	223f      	movs	r2, #63	; 0x3f
 8001248:	409a      	lsls	r2, r3
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2201      	movs	r2, #1
 8001252:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800125e:	2300      	movs	r3, #0
}
 8001260:	4618      	mov	r0, r3
 8001262:	3710      	adds	r7, #16
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001276:	b2db      	uxtb	r3, r3
 8001278:	2b02      	cmp	r3, #2
 800127a:	d004      	beq.n	8001286 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2280      	movs	r2, #128	; 0x80
 8001280:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e00c      	b.n	80012a0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2205      	movs	r2, #5
 800128a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f022 0201 	bic.w	r2, r2, #1
 800129c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800129e:	2300      	movs	r3, #0
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012ba:	b2db      	uxtb	r3, r3
}
 80012bc:	4618      	mov	r0, r3
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b089      	sub	sp, #36	; 0x24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012d2:	2300      	movs	r3, #0
 80012d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012d6:	2300      	movs	r3, #0
 80012d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012da:	2300      	movs	r3, #0
 80012dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012de:	2300      	movs	r3, #0
 80012e0:	61fb      	str	r3, [r7, #28]
 80012e2:	e16b      	b.n	80015bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012e4:	2201      	movs	r2, #1
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	697a      	ldr	r2, [r7, #20]
 80012f4:	4013      	ands	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	f040 815a 	bne.w	80015b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f003 0303 	and.w	r3, r3, #3
 800130a:	2b01      	cmp	r3, #1
 800130c:	d005      	beq.n	800131a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001316:	2b02      	cmp	r3, #2
 8001318:	d130      	bne.n	800137c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	2203      	movs	r2, #3
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43db      	mvns	r3, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4013      	ands	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	68da      	ldr	r2, [r3, #12]
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4313      	orrs	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001350:	2201      	movs	r2, #1
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	43db      	mvns	r3, r3
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4013      	ands	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	091b      	lsrs	r3, r3, #4
 8001366:	f003 0201 	and.w	r2, r3, #1
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4313      	orrs	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f003 0303 	and.w	r3, r3, #3
 8001384:	2b03      	cmp	r3, #3
 8001386:	d017      	beq.n	80013b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	2203      	movs	r2, #3
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	43db      	mvns	r3, r3
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4013      	ands	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	689a      	ldr	r2, [r3, #8]
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f003 0303 	and.w	r3, r3, #3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d123      	bne.n	800140c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	08da      	lsrs	r2, r3, #3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	3208      	adds	r2, #8
 80013cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	f003 0307 	and.w	r3, r3, #7
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	220f      	movs	r2, #15
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	43db      	mvns	r3, r3
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	4013      	ands	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	691a      	ldr	r2, [r3, #16]
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	f003 0307 	and.w	r3, r3, #7
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	08da      	lsrs	r2, r3, #3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	3208      	adds	r2, #8
 8001406:	69b9      	ldr	r1, [r7, #24]
 8001408:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	2203      	movs	r2, #3
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	43db      	mvns	r3, r3
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	4013      	ands	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f003 0203 	and.w	r2, r3, #3
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	4313      	orrs	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001448:	2b00      	cmp	r3, #0
 800144a:	f000 80b4 	beq.w	80015b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	4b60      	ldr	r3, [pc, #384]	; (80015d4 <HAL_GPIO_Init+0x30c>)
 8001454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001456:	4a5f      	ldr	r2, [pc, #380]	; (80015d4 <HAL_GPIO_Init+0x30c>)
 8001458:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800145c:	6453      	str	r3, [r2, #68]	; 0x44
 800145e:	4b5d      	ldr	r3, [pc, #372]	; (80015d4 <HAL_GPIO_Init+0x30c>)
 8001460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001462:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800146a:	4a5b      	ldr	r2, [pc, #364]	; (80015d8 <HAL_GPIO_Init+0x310>)
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	089b      	lsrs	r3, r3, #2
 8001470:	3302      	adds	r3, #2
 8001472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001476:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	f003 0303 	and.w	r3, r3, #3
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	220f      	movs	r2, #15
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	43db      	mvns	r3, r3
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	4013      	ands	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a52      	ldr	r2, [pc, #328]	; (80015dc <HAL_GPIO_Init+0x314>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d02b      	beq.n	80014ee <HAL_GPIO_Init+0x226>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a51      	ldr	r2, [pc, #324]	; (80015e0 <HAL_GPIO_Init+0x318>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d025      	beq.n	80014ea <HAL_GPIO_Init+0x222>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a50      	ldr	r2, [pc, #320]	; (80015e4 <HAL_GPIO_Init+0x31c>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d01f      	beq.n	80014e6 <HAL_GPIO_Init+0x21e>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a4f      	ldr	r2, [pc, #316]	; (80015e8 <HAL_GPIO_Init+0x320>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d019      	beq.n	80014e2 <HAL_GPIO_Init+0x21a>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a4e      	ldr	r2, [pc, #312]	; (80015ec <HAL_GPIO_Init+0x324>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d013      	beq.n	80014de <HAL_GPIO_Init+0x216>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a4d      	ldr	r2, [pc, #308]	; (80015f0 <HAL_GPIO_Init+0x328>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d00d      	beq.n	80014da <HAL_GPIO_Init+0x212>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a4c      	ldr	r2, [pc, #304]	; (80015f4 <HAL_GPIO_Init+0x32c>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d007      	beq.n	80014d6 <HAL_GPIO_Init+0x20e>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a4b      	ldr	r2, [pc, #300]	; (80015f8 <HAL_GPIO_Init+0x330>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d101      	bne.n	80014d2 <HAL_GPIO_Init+0x20a>
 80014ce:	2307      	movs	r3, #7
 80014d0:	e00e      	b.n	80014f0 <HAL_GPIO_Init+0x228>
 80014d2:	2308      	movs	r3, #8
 80014d4:	e00c      	b.n	80014f0 <HAL_GPIO_Init+0x228>
 80014d6:	2306      	movs	r3, #6
 80014d8:	e00a      	b.n	80014f0 <HAL_GPIO_Init+0x228>
 80014da:	2305      	movs	r3, #5
 80014dc:	e008      	b.n	80014f0 <HAL_GPIO_Init+0x228>
 80014de:	2304      	movs	r3, #4
 80014e0:	e006      	b.n	80014f0 <HAL_GPIO_Init+0x228>
 80014e2:	2303      	movs	r3, #3
 80014e4:	e004      	b.n	80014f0 <HAL_GPIO_Init+0x228>
 80014e6:	2302      	movs	r3, #2
 80014e8:	e002      	b.n	80014f0 <HAL_GPIO_Init+0x228>
 80014ea:	2301      	movs	r3, #1
 80014ec:	e000      	b.n	80014f0 <HAL_GPIO_Init+0x228>
 80014ee:	2300      	movs	r3, #0
 80014f0:	69fa      	ldr	r2, [r7, #28]
 80014f2:	f002 0203 	and.w	r2, r2, #3
 80014f6:	0092      	lsls	r2, r2, #2
 80014f8:	4093      	lsls	r3, r2
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001500:	4935      	ldr	r1, [pc, #212]	; (80015d8 <HAL_GPIO_Init+0x310>)
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	089b      	lsrs	r3, r3, #2
 8001506:	3302      	adds	r3, #2
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800150e:	4b3b      	ldr	r3, [pc, #236]	; (80015fc <HAL_GPIO_Init+0x334>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	43db      	mvns	r3, r3
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	4013      	ands	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d003      	beq.n	8001532 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	4313      	orrs	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001532:	4a32      	ldr	r2, [pc, #200]	; (80015fc <HAL_GPIO_Init+0x334>)
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001538:	4b30      	ldr	r3, [pc, #192]	; (80015fc <HAL_GPIO_Init+0x334>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	43db      	mvns	r3, r3
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	4013      	ands	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d003      	beq.n	800155c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	4313      	orrs	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800155c:	4a27      	ldr	r2, [pc, #156]	; (80015fc <HAL_GPIO_Init+0x334>)
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001562:	4b26      	ldr	r3, [pc, #152]	; (80015fc <HAL_GPIO_Init+0x334>)
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	43db      	mvns	r3, r3
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	4013      	ands	r3, r2
 8001570:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d003      	beq.n	8001586 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	4313      	orrs	r3, r2
 8001584:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001586:	4a1d      	ldr	r2, [pc, #116]	; (80015fc <HAL_GPIO_Init+0x334>)
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800158c:	4b1b      	ldr	r3, [pc, #108]	; (80015fc <HAL_GPIO_Init+0x334>)
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	43db      	mvns	r3, r3
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	4013      	ands	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d003      	beq.n	80015b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015b0:	4a12      	ldr	r2, [pc, #72]	; (80015fc <HAL_GPIO_Init+0x334>)
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	3301      	adds	r3, #1
 80015ba:	61fb      	str	r3, [r7, #28]
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	2b0f      	cmp	r3, #15
 80015c0:	f67f ae90 	bls.w	80012e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015c4:	bf00      	nop
 80015c6:	bf00      	nop
 80015c8:	3724      	adds	r7, #36	; 0x24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	40023800 	.word	0x40023800
 80015d8:	40013800 	.word	0x40013800
 80015dc:	40020000 	.word	0x40020000
 80015e0:	40020400 	.word	0x40020400
 80015e4:	40020800 	.word	0x40020800
 80015e8:	40020c00 	.word	0x40020c00
 80015ec:	40021000 	.word	0x40021000
 80015f0:	40021400 	.word	0x40021400
 80015f4:	40021800 	.word	0x40021800
 80015f8:	40021c00 	.word	0x40021c00
 80015fc:	40013c00 	.word	0x40013c00

08001600 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	460b      	mov	r3, r1
 800160a:	807b      	strh	r3, [r7, #2]
 800160c:	4613      	mov	r3, r2
 800160e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001610:	787b      	ldrb	r3, [r7, #1]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d003      	beq.n	800161e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001616:	887a      	ldrh	r2, [r7, #2]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800161c:	e003      	b.n	8001626 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800161e:	887b      	ldrh	r3, [r7, #2]
 8001620:	041a      	lsls	r2, r3, #16
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	619a      	str	r2, [r3, #24]
}
 8001626:	bf00      	nop
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
	...

08001634 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d101      	bne.n	8001646 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e12b      	b.n	800189e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800164c:	b2db      	uxtb	r3, r3
 800164e:	2b00      	cmp	r3, #0
 8001650:	d106      	bne.n	8001660 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f7ff f98c 	bl	8000978 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2224      	movs	r2, #36	; 0x24
 8001664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f022 0201 	bic.w	r2, r2, #1
 8001676:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001686:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001696:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001698:	f003 f87e 	bl	8004798 <HAL_RCC_GetPCLK1Freq>
 800169c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	4a81      	ldr	r2, [pc, #516]	; (80018a8 <HAL_I2C_Init+0x274>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d807      	bhi.n	80016b8 <HAL_I2C_Init+0x84>
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	4a80      	ldr	r2, [pc, #512]	; (80018ac <HAL_I2C_Init+0x278>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	bf94      	ite	ls
 80016b0:	2301      	movls	r3, #1
 80016b2:	2300      	movhi	r3, #0
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	e006      	b.n	80016c6 <HAL_I2C_Init+0x92>
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	4a7d      	ldr	r2, [pc, #500]	; (80018b0 <HAL_I2C_Init+0x27c>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	bf94      	ite	ls
 80016c0:	2301      	movls	r3, #1
 80016c2:	2300      	movhi	r3, #0
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e0e7      	b.n	800189e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	4a78      	ldr	r2, [pc, #480]	; (80018b4 <HAL_I2C_Init+0x280>)
 80016d2:	fba2 2303 	umull	r2, r3, r2, r3
 80016d6:	0c9b      	lsrs	r3, r3, #18
 80016d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	68ba      	ldr	r2, [r7, #8]
 80016ea:	430a      	orrs	r2, r1
 80016ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	6a1b      	ldr	r3, [r3, #32]
 80016f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	4a6a      	ldr	r2, [pc, #424]	; (80018a8 <HAL_I2C_Init+0x274>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d802      	bhi.n	8001708 <HAL_I2C_Init+0xd4>
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	3301      	adds	r3, #1
 8001706:	e009      	b.n	800171c <HAL_I2C_Init+0xe8>
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800170e:	fb02 f303 	mul.w	r3, r2, r3
 8001712:	4a69      	ldr	r2, [pc, #420]	; (80018b8 <HAL_I2C_Init+0x284>)
 8001714:	fba2 2303 	umull	r2, r3, r2, r3
 8001718:	099b      	lsrs	r3, r3, #6
 800171a:	3301      	adds	r3, #1
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	6812      	ldr	r2, [r2, #0]
 8001720:	430b      	orrs	r3, r1
 8001722:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	69db      	ldr	r3, [r3, #28]
 800172a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800172e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	495c      	ldr	r1, [pc, #368]	; (80018a8 <HAL_I2C_Init+0x274>)
 8001738:	428b      	cmp	r3, r1
 800173a:	d819      	bhi.n	8001770 <HAL_I2C_Init+0x13c>
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	1e59      	subs	r1, r3, #1
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	fbb1 f3f3 	udiv	r3, r1, r3
 800174a:	1c59      	adds	r1, r3, #1
 800174c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001750:	400b      	ands	r3, r1
 8001752:	2b00      	cmp	r3, #0
 8001754:	d00a      	beq.n	800176c <HAL_I2C_Init+0x138>
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	1e59      	subs	r1, r3, #1
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	fbb1 f3f3 	udiv	r3, r1, r3
 8001764:	3301      	adds	r3, #1
 8001766:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800176a:	e051      	b.n	8001810 <HAL_I2C_Init+0x1dc>
 800176c:	2304      	movs	r3, #4
 800176e:	e04f      	b.n	8001810 <HAL_I2C_Init+0x1dc>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d111      	bne.n	800179c <HAL_I2C_Init+0x168>
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	1e58      	subs	r0, r3, #1
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6859      	ldr	r1, [r3, #4]
 8001780:	460b      	mov	r3, r1
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	440b      	add	r3, r1
 8001786:	fbb0 f3f3 	udiv	r3, r0, r3
 800178a:	3301      	adds	r3, #1
 800178c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001790:	2b00      	cmp	r3, #0
 8001792:	bf0c      	ite	eq
 8001794:	2301      	moveq	r3, #1
 8001796:	2300      	movne	r3, #0
 8001798:	b2db      	uxtb	r3, r3
 800179a:	e012      	b.n	80017c2 <HAL_I2C_Init+0x18e>
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	1e58      	subs	r0, r3, #1
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6859      	ldr	r1, [r3, #4]
 80017a4:	460b      	mov	r3, r1
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	440b      	add	r3, r1
 80017aa:	0099      	lsls	r1, r3, #2
 80017ac:	440b      	add	r3, r1
 80017ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80017b2:	3301      	adds	r3, #1
 80017b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	bf0c      	ite	eq
 80017bc:	2301      	moveq	r3, #1
 80017be:	2300      	movne	r3, #0
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <HAL_I2C_Init+0x196>
 80017c6:	2301      	movs	r3, #1
 80017c8:	e022      	b.n	8001810 <HAL_I2C_Init+0x1dc>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d10e      	bne.n	80017f0 <HAL_I2C_Init+0x1bc>
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	1e58      	subs	r0, r3, #1
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6859      	ldr	r1, [r3, #4]
 80017da:	460b      	mov	r3, r1
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	440b      	add	r3, r1
 80017e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80017e4:	3301      	adds	r3, #1
 80017e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017ee:	e00f      	b.n	8001810 <HAL_I2C_Init+0x1dc>
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	1e58      	subs	r0, r3, #1
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6859      	ldr	r1, [r3, #4]
 80017f8:	460b      	mov	r3, r1
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	440b      	add	r3, r1
 80017fe:	0099      	lsls	r1, r3, #2
 8001800:	440b      	add	r3, r1
 8001802:	fbb0 f3f3 	udiv	r3, r0, r3
 8001806:	3301      	adds	r3, #1
 8001808:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800180c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001810:	6879      	ldr	r1, [r7, #4]
 8001812:	6809      	ldr	r1, [r1, #0]
 8001814:	4313      	orrs	r3, r2
 8001816:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	69da      	ldr	r2, [r3, #28]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a1b      	ldr	r3, [r3, #32]
 800182a:	431a      	orrs	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	430a      	orrs	r2, r1
 8001832:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800183e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	6911      	ldr	r1, [r2, #16]
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	68d2      	ldr	r2, [r2, #12]
 800184a:	4311      	orrs	r1, r2
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	6812      	ldr	r2, [r2, #0]
 8001850:	430b      	orrs	r3, r1
 8001852:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	695a      	ldr	r2, [r3, #20]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	699b      	ldr	r3, [r3, #24]
 8001866:	431a      	orrs	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	430a      	orrs	r2, r1
 800186e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f042 0201 	orr.w	r2, r2, #1
 800187e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2220      	movs	r2, #32
 800188a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2200      	movs	r2, #0
 8001898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	000186a0 	.word	0x000186a0
 80018ac:	001e847f 	.word	0x001e847f
 80018b0:	003d08ff 	.word	0x003d08ff
 80018b4:	431bde83 	.word	0x431bde83
 80018b8:	10624dd3 	.word	0x10624dd3

080018bc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b088      	sub	sp, #32
 80018c0:	af02      	add	r7, sp, #8
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	607a      	str	r2, [r7, #4]
 80018c6:	461a      	mov	r2, r3
 80018c8:	460b      	mov	r3, r1
 80018ca:	817b      	strh	r3, [r7, #10]
 80018cc:	4613      	mov	r3, r2
 80018ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80018d0:	f7ff fb6c 	bl	8000fac <HAL_GetTick>
 80018d4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	2b20      	cmp	r3, #32
 80018e0:	f040 80e0 	bne.w	8001aa4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	2319      	movs	r3, #25
 80018ea:	2201      	movs	r2, #1
 80018ec:	4970      	ldr	r1, [pc, #448]	; (8001ab0 <HAL_I2C_Master_Transmit+0x1f4>)
 80018ee:	68f8      	ldr	r0, [r7, #12]
 80018f0:	f002 f8dc 	bl	8003aac <I2C_WaitOnFlagUntilTimeout>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80018fa:	2302      	movs	r3, #2
 80018fc:	e0d3      	b.n	8001aa6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001904:	2b01      	cmp	r3, #1
 8001906:	d101      	bne.n	800190c <HAL_I2C_Master_Transmit+0x50>
 8001908:	2302      	movs	r3, #2
 800190a:	e0cc      	b.n	8001aa6 <HAL_I2C_Master_Transmit+0x1ea>
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2201      	movs	r2, #1
 8001910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	2b01      	cmp	r3, #1
 8001920:	d007      	beq.n	8001932 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f042 0201 	orr.w	r2, r2, #1
 8001930:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001940:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2221      	movs	r2, #33	; 0x21
 8001946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2210      	movs	r2, #16
 800194e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2200      	movs	r2, #0
 8001956:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	893a      	ldrh	r2, [r7, #8]
 8001962:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001968:	b29a      	uxth	r2, r3
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	4a50      	ldr	r2, [pc, #320]	; (8001ab4 <HAL_I2C_Master_Transmit+0x1f8>)
 8001972:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001974:	8979      	ldrh	r1, [r7, #10]
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	6a3a      	ldr	r2, [r7, #32]
 800197a:	68f8      	ldr	r0, [r7, #12]
 800197c:	f001 fe9e 	bl	80036bc <I2C_MasterRequestWrite>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e08d      	b.n	8001aa6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800198a:	2300      	movs	r3, #0
 800198c:	613b      	str	r3, [r7, #16]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	695b      	ldr	r3, [r3, #20]
 8001994:	613b      	str	r3, [r7, #16]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	613b      	str	r3, [r7, #16]
 800199e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80019a0:	e066      	b.n	8001a70 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019a2:	697a      	ldr	r2, [r7, #20]
 80019a4:	6a39      	ldr	r1, [r7, #32]
 80019a6:	68f8      	ldr	r0, [r7, #12]
 80019a8:	f002 f956 	bl	8003c58 <I2C_WaitOnTXEFlagUntilTimeout>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d00d      	beq.n	80019ce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b6:	2b04      	cmp	r3, #4
 80019b8:	d107      	bne.n	80019ca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e06b      	b.n	8001aa6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d2:	781a      	ldrb	r2, [r3, #0]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019de:	1c5a      	adds	r2, r3, #1
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	3b01      	subs	r3, #1
 80019ec:	b29a      	uxth	r2, r3
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019f6:	3b01      	subs	r3, #1
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	695b      	ldr	r3, [r3, #20]
 8001a04:	f003 0304 	and.w	r3, r3, #4
 8001a08:	2b04      	cmp	r3, #4
 8001a0a:	d11b      	bne.n	8001a44 <HAL_I2C_Master_Transmit+0x188>
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d017      	beq.n	8001a44 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a18:	781a      	ldrb	r2, [r3, #0]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a24:	1c5a      	adds	r2, r3, #1
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	3b01      	subs	r3, #1
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a3c:	3b01      	subs	r3, #1
 8001a3e:	b29a      	uxth	r2, r3
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a44:	697a      	ldr	r2, [r7, #20]
 8001a46:	6a39      	ldr	r1, [r7, #32]
 8001a48:	68f8      	ldr	r0, [r7, #12]
 8001a4a:	f002 f946 	bl	8003cda <I2C_WaitOnBTFFlagUntilTimeout>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d00d      	beq.n	8001a70 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a58:	2b04      	cmp	r3, #4
 8001a5a:	d107      	bne.n	8001a6c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a6a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e01a      	b.n	8001aa6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d194      	bne.n	80019a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2220      	movs	r2, #32
 8001a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	e000      	b.n	8001aa6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001aa4:	2302      	movs	r3, #2
  }
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3718      	adds	r7, #24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	00100002 	.word	0x00100002
 8001ab4:	ffff0000 	.word	0xffff0000

08001ab8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08c      	sub	sp, #48	; 0x30
 8001abc:	af02      	add	r7, sp, #8
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	607a      	str	r2, [r7, #4]
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	817b      	strh	r3, [r7, #10]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001acc:	f7ff fa6e 	bl	8000fac <HAL_GetTick>
 8001ad0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b20      	cmp	r3, #32
 8001adc:	f040 820b 	bne.w	8001ef6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	2319      	movs	r3, #25
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	497c      	ldr	r1, [pc, #496]	; (8001cdc <HAL_I2C_Master_Receive+0x224>)
 8001aea:	68f8      	ldr	r0, [r7, #12]
 8001aec:	f001 ffde 	bl	8003aac <I2C_WaitOnFlagUntilTimeout>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001af6:	2302      	movs	r3, #2
 8001af8:	e1fe      	b.n	8001ef8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d101      	bne.n	8001b08 <HAL_I2C_Master_Receive+0x50>
 8001b04:	2302      	movs	r3, #2
 8001b06:	e1f7      	b.n	8001ef8 <HAL_I2C_Master_Receive+0x440>
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d007      	beq.n	8001b2e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f042 0201 	orr.w	r2, r2, #1
 8001b2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b3c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2222      	movs	r2, #34	; 0x22
 8001b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2210      	movs	r2, #16
 8001b4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2200      	movs	r2, #0
 8001b52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	893a      	ldrh	r2, [r7, #8]
 8001b5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b64:	b29a      	uxth	r2, r3
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	4a5c      	ldr	r2, [pc, #368]	; (8001ce0 <HAL_I2C_Master_Receive+0x228>)
 8001b6e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001b70:	8979      	ldrh	r1, [r7, #10]
 8001b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b76:	68f8      	ldr	r0, [r7, #12]
 8001b78:	f001 fe22 	bl	80037c0 <I2C_MasterRequestRead>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e1b8      	b.n	8001ef8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d113      	bne.n	8001bb6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b8e:	2300      	movs	r3, #0
 8001b90:	623b      	str	r3, [r7, #32]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	695b      	ldr	r3, [r3, #20]
 8001b98:	623b      	str	r3, [r7, #32]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	623b      	str	r3, [r7, #32]
 8001ba2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	e18c      	b.n	8001ed0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d11b      	bne.n	8001bf6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bcc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61fb      	str	r3, [r7, #28]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	695b      	ldr	r3, [r3, #20]
 8001bd8:	61fb      	str	r3, [r7, #28]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	61fb      	str	r3, [r7, #28]
 8001be2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	e16c      	b.n	8001ed0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d11b      	bne.n	8001c36 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c0c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61bb      	str	r3, [r7, #24]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	695b      	ldr	r3, [r3, #20]
 8001c28:	61bb      	str	r3, [r7, #24]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	61bb      	str	r3, [r7, #24]
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	e14c      	b.n	8001ed0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001c44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c46:	2300      	movs	r3, #0
 8001c48:	617b      	str	r3, [r7, #20]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	695b      	ldr	r3, [r3, #20]
 8001c50:	617b      	str	r3, [r7, #20]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	617b      	str	r3, [r7, #20]
 8001c5a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001c5c:	e138      	b.n	8001ed0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c62:	2b03      	cmp	r3, #3
 8001c64:	f200 80f1 	bhi.w	8001e4a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d123      	bne.n	8001cb8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c74:	68f8      	ldr	r0, [r7, #12]
 8001c76:	f002 f8a3 	bl	8003dc0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e139      	b.n	8001ef8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	691a      	ldr	r2, [r3, #16]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8e:	b2d2      	uxtb	r2, r2
 8001c90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c96:	1c5a      	adds	r2, r3, #1
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ca0:	3b01      	subs	r3, #1
 8001ca2:	b29a      	uxth	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001cb6:	e10b      	b.n	8001ed0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d14e      	bne.n	8001d5e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc2:	9300      	str	r3, [sp, #0]
 8001cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	4906      	ldr	r1, [pc, #24]	; (8001ce4 <HAL_I2C_Master_Receive+0x22c>)
 8001cca:	68f8      	ldr	r0, [r7, #12]
 8001ccc:	f001 feee 	bl	8003aac <I2C_WaitOnFlagUntilTimeout>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d008      	beq.n	8001ce8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e10e      	b.n	8001ef8 <HAL_I2C_Master_Receive+0x440>
 8001cda:	bf00      	nop
 8001cdc:	00100002 	.word	0x00100002
 8001ce0:	ffff0000 	.word	0xffff0000
 8001ce4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cf6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	691a      	ldr	r2, [r3, #16]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d02:	b2d2      	uxtb	r2, r2
 8001d04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0a:	1c5a      	adds	r2, r3, #1
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d14:	3b01      	subs	r3, #1
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	3b01      	subs	r3, #1
 8001d24:	b29a      	uxth	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	691a      	ldr	r2, [r3, #16]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d34:	b2d2      	uxtb	r2, r2
 8001d36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3c:	1c5a      	adds	r2, r3, #1
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d46:	3b01      	subs	r3, #1
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	3b01      	subs	r3, #1
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d5c:	e0b8      	b.n	8001ed0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	9300      	str	r3, [sp, #0]
 8001d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d64:	2200      	movs	r2, #0
 8001d66:	4966      	ldr	r1, [pc, #408]	; (8001f00 <HAL_I2C_Master_Receive+0x448>)
 8001d68:	68f8      	ldr	r0, [r7, #12]
 8001d6a:	f001 fe9f 	bl	8003aac <I2C_WaitOnFlagUntilTimeout>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e0bf      	b.n	8001ef8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	691a      	ldr	r2, [r3, #16]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d92:	b2d2      	uxtb	r2, r2
 8001d94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9a:	1c5a      	adds	r2, r3, #1
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001da4:	3b01      	subs	r3, #1
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	3b01      	subs	r3, #1
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbc:	9300      	str	r3, [sp, #0]
 8001dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	494f      	ldr	r1, [pc, #316]	; (8001f00 <HAL_I2C_Master_Receive+0x448>)
 8001dc4:	68f8      	ldr	r0, [r7, #12]
 8001dc6:	f001 fe71 	bl	8003aac <I2C_WaitOnFlagUntilTimeout>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e091      	b.n	8001ef8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001de2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	691a      	ldr	r2, [r3, #16]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dee:	b2d2      	uxtb	r2, r2
 8001df0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df6:	1c5a      	adds	r2, r3, #1
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e00:	3b01      	subs	r3, #1
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	b29a      	uxth	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	691a      	ldr	r2, [r3, #16]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e20:	b2d2      	uxtb	r2, r2
 8001e22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e28:	1c5a      	adds	r2, r3, #1
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e32:	3b01      	subs	r3, #1
 8001e34:	b29a      	uxth	r2, r3
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	3b01      	subs	r3, #1
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e48:	e042      	b.n	8001ed0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e4e:	68f8      	ldr	r0, [r7, #12]
 8001e50:	f001 ffb6 	bl	8003dc0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e04c      	b.n	8001ef8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	691a      	ldr	r2, [r3, #16]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e68:	b2d2      	uxtb	r2, r2
 8001e6a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e70:	1c5a      	adds	r2, r3, #1
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	3b01      	subs	r3, #1
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	695b      	ldr	r3, [r3, #20]
 8001e96:	f003 0304 	and.w	r3, r3, #4
 8001e9a:	2b04      	cmp	r3, #4
 8001e9c:	d118      	bne.n	8001ed0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	691a      	ldr	r2, [r3, #16]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea8:	b2d2      	uxtb	r2, r2
 8001eaa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb0:	1c5a      	adds	r2, r3, #1
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	f47f aec2 	bne.w	8001c5e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2220      	movs	r2, #32
 8001ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	e000      	b.n	8001ef8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001ef6:	2302      	movs	r3, #2
  }
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3728      	adds	r7, #40	; 0x28
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	00010004 	.word	0x00010004

08001f04 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b088      	sub	sp, #32
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f24:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f2c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001f2e:	7bfb      	ldrb	r3, [r7, #15]
 8001f30:	2b10      	cmp	r3, #16
 8001f32:	d003      	beq.n	8001f3c <HAL_I2C_EV_IRQHandler+0x38>
 8001f34:	7bfb      	ldrb	r3, [r7, #15]
 8001f36:	2b40      	cmp	r3, #64	; 0x40
 8001f38:	f040 80c1 	bne.w	80020be <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d10d      	bne.n	8001f72 <HAL_I2C_EV_IRQHandler+0x6e>
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001f5c:	d003      	beq.n	8001f66 <HAL_I2C_EV_IRQHandler+0x62>
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001f64:	d101      	bne.n	8001f6a <HAL_I2C_EV_IRQHandler+0x66>
 8001f66:	2301      	movs	r3, #1
 8001f68:	e000      	b.n	8001f6c <HAL_I2C_EV_IRQHandler+0x68>
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	f000 8132 	beq.w	80021d6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d00c      	beq.n	8001f96 <HAL_I2C_EV_IRQHandler+0x92>
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	0a5b      	lsrs	r3, r3, #9
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d006      	beq.n	8001f96 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f001 ff9e 	bl	8003eca <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 fd79 	bl	8002a86 <I2C_Master_SB>
 8001f94:	e092      	b.n	80020bc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	08db      	lsrs	r3, r3, #3
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d009      	beq.n	8001fb6 <HAL_I2C_EV_IRQHandler+0xb2>
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	0a5b      	lsrs	r3, r3, #9
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 fdef 	bl	8002b92 <I2C_Master_ADD10>
 8001fb4:	e082      	b.n	80020bc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	085b      	lsrs	r3, r3, #1
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d009      	beq.n	8001fd6 <HAL_I2C_EV_IRQHandler+0xd2>
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	0a5b      	lsrs	r3, r3, #9
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 fe09 	bl	8002be6 <I2C_Master_ADDR>
 8001fd4:	e072      	b.n	80020bc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	089b      	lsrs	r3, r3, #2
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d03b      	beq.n	800205a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ff0:	f000 80f3 	beq.w	80021da <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	09db      	lsrs	r3, r3, #7
 8001ff8:	f003 0301 	and.w	r3, r3, #1
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d00f      	beq.n	8002020 <HAL_I2C_EV_IRQHandler+0x11c>
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	0a9b      	lsrs	r3, r3, #10
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	2b00      	cmp	r3, #0
 800200a:	d009      	beq.n	8002020 <HAL_I2C_EV_IRQHandler+0x11c>
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	089b      	lsrs	r3, r3, #2
 8002010:	f003 0301 	and.w	r3, r3, #1
 8002014:	2b00      	cmp	r3, #0
 8002016:	d103      	bne.n	8002020 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f000 f9f3 	bl	8002404 <I2C_MasterTransmit_TXE>
 800201e:	e04d      	b.n	80020bc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	089b      	lsrs	r3, r3, #2
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	2b00      	cmp	r3, #0
 800202a:	f000 80d6 	beq.w	80021da <HAL_I2C_EV_IRQHandler+0x2d6>
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	0a5b      	lsrs	r3, r3, #9
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b00      	cmp	r3, #0
 8002038:	f000 80cf 	beq.w	80021da <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800203c:	7bbb      	ldrb	r3, [r7, #14]
 800203e:	2b21      	cmp	r3, #33	; 0x21
 8002040:	d103      	bne.n	800204a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 fa7a 	bl	800253c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002048:	e0c7      	b.n	80021da <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800204a:	7bfb      	ldrb	r3, [r7, #15]
 800204c:	2b40      	cmp	r3, #64	; 0x40
 800204e:	f040 80c4 	bne.w	80021da <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 fae8 	bl	8002628 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002058:	e0bf      	b.n	80021da <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002064:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002068:	f000 80b7 	beq.w	80021da <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	099b      	lsrs	r3, r3, #6
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	2b00      	cmp	r3, #0
 8002076:	d00f      	beq.n	8002098 <HAL_I2C_EV_IRQHandler+0x194>
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	0a9b      	lsrs	r3, r3, #10
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	2b00      	cmp	r3, #0
 8002082:	d009      	beq.n	8002098 <HAL_I2C_EV_IRQHandler+0x194>
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	089b      	lsrs	r3, r3, #2
 8002088:	f003 0301 	and.w	r3, r3, #1
 800208c:	2b00      	cmp	r3, #0
 800208e:	d103      	bne.n	8002098 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f000 fb5d 	bl	8002750 <I2C_MasterReceive_RXNE>
 8002096:	e011      	b.n	80020bc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	089b      	lsrs	r3, r3, #2
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f000 809a 	beq.w	80021da <HAL_I2C_EV_IRQHandler+0x2d6>
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	0a5b      	lsrs	r3, r3, #9
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f000 8093 	beq.w	80021da <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f000 fbfc 	bl	80028b2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020ba:	e08e      	b.n	80021da <HAL_I2C_EV_IRQHandler+0x2d6>
 80020bc:	e08d      	b.n	80021da <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d004      	beq.n	80020d0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	695b      	ldr	r3, [r3, #20]
 80020cc:	61fb      	str	r3, [r7, #28]
 80020ce:	e007      	b.n	80020e0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	695b      	ldr	r3, [r3, #20]
 80020de:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	085b      	lsrs	r3, r3, #1
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d012      	beq.n	8002112 <HAL_I2C_EV_IRQHandler+0x20e>
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	0a5b      	lsrs	r3, r3, #9
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d00c      	beq.n	8002112 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d003      	beq.n	8002108 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002108:	69b9      	ldr	r1, [r7, #24]
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 ffba 	bl	8003084 <I2C_Slave_ADDR>
 8002110:	e066      	b.n	80021e0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	091b      	lsrs	r3, r3, #4
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b00      	cmp	r3, #0
 800211c:	d009      	beq.n	8002132 <HAL_I2C_EV_IRQHandler+0x22e>
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	0a5b      	lsrs	r3, r3, #9
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	2b00      	cmp	r3, #0
 8002128:	d003      	beq.n	8002132 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 fff4 	bl	8003118 <I2C_Slave_STOPF>
 8002130:	e056      	b.n	80021e0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002132:	7bbb      	ldrb	r3, [r7, #14]
 8002134:	2b21      	cmp	r3, #33	; 0x21
 8002136:	d002      	beq.n	800213e <HAL_I2C_EV_IRQHandler+0x23a>
 8002138:	7bbb      	ldrb	r3, [r7, #14]
 800213a:	2b29      	cmp	r3, #41	; 0x29
 800213c:	d125      	bne.n	800218a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	09db      	lsrs	r3, r3, #7
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00f      	beq.n	800216a <HAL_I2C_EV_IRQHandler+0x266>
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	0a9b      	lsrs	r3, r3, #10
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b00      	cmp	r3, #0
 8002154:	d009      	beq.n	800216a <HAL_I2C_EV_IRQHandler+0x266>
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	089b      	lsrs	r3, r3, #2
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	2b00      	cmp	r3, #0
 8002160:	d103      	bne.n	800216a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 fed0 	bl	8002f08 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002168:	e039      	b.n	80021de <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	089b      	lsrs	r3, r3, #2
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	d033      	beq.n	80021de <HAL_I2C_EV_IRQHandler+0x2da>
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	0a5b      	lsrs	r3, r3, #9
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b00      	cmp	r3, #0
 8002180:	d02d      	beq.n	80021de <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 fefd 	bl	8002f82 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002188:	e029      	b.n	80021de <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	099b      	lsrs	r3, r3, #6
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b00      	cmp	r3, #0
 8002194:	d00f      	beq.n	80021b6 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	0a9b      	lsrs	r3, r3, #10
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d009      	beq.n	80021b6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	089b      	lsrs	r3, r3, #2
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d103      	bne.n	80021b6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 ff08 	bl	8002fc4 <I2C_SlaveReceive_RXNE>
 80021b4:	e014      	b.n	80021e0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	089b      	lsrs	r3, r3, #2
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00e      	beq.n	80021e0 <HAL_I2C_EV_IRQHandler+0x2dc>
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	0a5b      	lsrs	r3, r3, #9
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d008      	beq.n	80021e0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 ff36 	bl	8003040 <I2C_SlaveReceive_BTF>
 80021d4:	e004      	b.n	80021e0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80021d6:	bf00      	nop
 80021d8:	e002      	b.n	80021e0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021da:	bf00      	nop
 80021dc:	e000      	b.n	80021e0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80021de:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80021e0:	3720      	adds	r7, #32
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b08a      	sub	sp, #40	; 0x28
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80021fe:	2300      	movs	r3, #0
 8002200:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002208:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800220a:	6a3b      	ldr	r3, [r7, #32]
 800220c:	0a1b      	lsrs	r3, r3, #8
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00e      	beq.n	8002234 <HAL_I2C_ER_IRQHandler+0x4e>
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	0a1b      	lsrs	r3, r3, #8
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	2b00      	cmp	r3, #0
 8002220:	d008      	beq.n	8002234 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002224:	f043 0301 	orr.w	r3, r3, #1
 8002228:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002232:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002234:	6a3b      	ldr	r3, [r7, #32]
 8002236:	0a5b      	lsrs	r3, r3, #9
 8002238:	f003 0301 	and.w	r3, r3, #1
 800223c:	2b00      	cmp	r3, #0
 800223e:	d00e      	beq.n	800225e <HAL_I2C_ER_IRQHandler+0x78>
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	0a1b      	lsrs	r3, r3, #8
 8002244:	f003 0301 	and.w	r3, r3, #1
 8002248:	2b00      	cmp	r3, #0
 800224a:	d008      	beq.n	800225e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224e:	f043 0302 	orr.w	r3, r3, #2
 8002252:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800225c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800225e:	6a3b      	ldr	r3, [r7, #32]
 8002260:	0a9b      	lsrs	r3, r3, #10
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b00      	cmp	r3, #0
 8002268:	d03f      	beq.n	80022ea <HAL_I2C_ER_IRQHandler+0x104>
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	0a1b      	lsrs	r3, r3, #8
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	2b00      	cmp	r3, #0
 8002274:	d039      	beq.n	80022ea <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8002276:	7efb      	ldrb	r3, [r7, #27]
 8002278:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800227e:	b29b      	uxth	r3, r3
 8002280:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002288:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002290:	7ebb      	ldrb	r3, [r7, #26]
 8002292:	2b20      	cmp	r3, #32
 8002294:	d112      	bne.n	80022bc <HAL_I2C_ER_IRQHandler+0xd6>
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d10f      	bne.n	80022bc <HAL_I2C_ER_IRQHandler+0xd6>
 800229c:	7cfb      	ldrb	r3, [r7, #19]
 800229e:	2b21      	cmp	r3, #33	; 0x21
 80022a0:	d008      	beq.n	80022b4 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80022a2:	7cfb      	ldrb	r3, [r7, #19]
 80022a4:	2b29      	cmp	r3, #41	; 0x29
 80022a6:	d005      	beq.n	80022b4 <HAL_I2C_ER_IRQHandler+0xce>
 80022a8:	7cfb      	ldrb	r3, [r7, #19]
 80022aa:	2b28      	cmp	r3, #40	; 0x28
 80022ac:	d106      	bne.n	80022bc <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2b21      	cmp	r3, #33	; 0x21
 80022b2:	d103      	bne.n	80022bc <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f001 f85f 	bl	8003378 <I2C_Slave_AF>
 80022ba:	e016      	b.n	80022ea <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80022c4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80022c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c8:	f043 0304 	orr.w	r3, r3, #4
 80022cc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80022ce:	7efb      	ldrb	r3, [r7, #27]
 80022d0:	2b10      	cmp	r3, #16
 80022d2:	d002      	beq.n	80022da <HAL_I2C_ER_IRQHandler+0xf4>
 80022d4:	7efb      	ldrb	r3, [r7, #27]
 80022d6:	2b40      	cmp	r3, #64	; 0x40
 80022d8:	d107      	bne.n	80022ea <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022e8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80022ea:	6a3b      	ldr	r3, [r7, #32]
 80022ec:	0adb      	lsrs	r3, r3, #11
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00e      	beq.n	8002314 <HAL_I2C_ER_IRQHandler+0x12e>
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	0a1b      	lsrs	r3, r3, #8
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d008      	beq.n	8002314 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002304:	f043 0308 	orr.w	r3, r3, #8
 8002308:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002312:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002316:	2b00      	cmp	r3, #0
 8002318:	d008      	beq.n	800232c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002320:	431a      	orrs	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f001 f896 	bl	8003458 <I2C_ITError>
  }
}
 800232c:	bf00      	nop
 800232e:	3728      	adds	r7, #40	; 0x28
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	460b      	mov	r3, r1
 800238e:	70fb      	strb	r3, [r7, #3]
 8002390:	4613      	mov	r3, r2
 8002392:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002412:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800241a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002420:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002426:	2b00      	cmp	r3, #0
 8002428:	d150      	bne.n	80024cc <I2C_MasterTransmit_TXE+0xc8>
 800242a:	7bfb      	ldrb	r3, [r7, #15]
 800242c:	2b21      	cmp	r3, #33	; 0x21
 800242e:	d14d      	bne.n	80024cc <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	2b08      	cmp	r3, #8
 8002434:	d01d      	beq.n	8002472 <I2C_MasterTransmit_TXE+0x6e>
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	2b20      	cmp	r3, #32
 800243a:	d01a      	beq.n	8002472 <I2C_MasterTransmit_TXE+0x6e>
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002442:	d016      	beq.n	8002472 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	685a      	ldr	r2, [r3, #4]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002452:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2211      	movs	r2, #17
 8002458:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2220      	movs	r2, #32
 8002466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f7ff ff62 	bl	8002334 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002470:	e060      	b.n	8002534 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	685a      	ldr	r2, [r3, #4]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002480:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002490:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2220      	movs	r2, #32
 800249c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b40      	cmp	r3, #64	; 0x40
 80024aa:	d107      	bne.n	80024bc <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f7ff ff7d 	bl	80023b4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80024ba:	e03b      	b.n	8002534 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f7ff ff35 	bl	8002334 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80024ca:	e033      	b.n	8002534 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80024cc:	7bfb      	ldrb	r3, [r7, #15]
 80024ce:	2b21      	cmp	r3, #33	; 0x21
 80024d0:	d005      	beq.n	80024de <I2C_MasterTransmit_TXE+0xda>
 80024d2:	7bbb      	ldrb	r3, [r7, #14]
 80024d4:	2b40      	cmp	r3, #64	; 0x40
 80024d6:	d12d      	bne.n	8002534 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80024d8:	7bfb      	ldrb	r3, [r7, #15]
 80024da:	2b22      	cmp	r3, #34	; 0x22
 80024dc:	d12a      	bne.n	8002534 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d108      	bne.n	80024fa <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	685a      	ldr	r2, [r3, #4]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024f6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80024f8:	e01c      	b.n	8002534 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b40      	cmp	r3, #64	; 0x40
 8002504:	d103      	bne.n	800250e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 f88e 	bl	8002628 <I2C_MemoryTransmit_TXE_BTF>
}
 800250c:	e012      	b.n	8002534 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002512:	781a      	ldrb	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251e:	1c5a      	adds	r2, r3, #1
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002528:	b29b      	uxth	r3, r3
 800252a:	3b01      	subs	r3, #1
 800252c:	b29a      	uxth	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002532:	e7ff      	b.n	8002534 <I2C_MasterTransmit_TXE+0x130>
 8002534:	bf00      	nop
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002548:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b21      	cmp	r3, #33	; 0x21
 8002554:	d164      	bne.n	8002620 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800255a:	b29b      	uxth	r3, r3
 800255c:	2b00      	cmp	r3, #0
 800255e:	d012      	beq.n	8002586 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002564:	781a      	ldrb	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002570:	1c5a      	adds	r2, r3, #1
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800257a:	b29b      	uxth	r3, r3
 800257c:	3b01      	subs	r3, #1
 800257e:	b29a      	uxth	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002584:	e04c      	b.n	8002620 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2b08      	cmp	r3, #8
 800258a:	d01d      	beq.n	80025c8 <I2C_MasterTransmit_BTF+0x8c>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2b20      	cmp	r3, #32
 8002590:	d01a      	beq.n	80025c8 <I2C_MasterTransmit_BTF+0x8c>
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002598:	d016      	beq.n	80025c8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	685a      	ldr	r2, [r3, #4]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80025a8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2211      	movs	r2, #17
 80025ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2220      	movs	r2, #32
 80025bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f7ff feb7 	bl	8002334 <HAL_I2C_MasterTxCpltCallback>
}
 80025c6:	e02b      	b.n	8002620 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	685a      	ldr	r2, [r3, #4]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80025d6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025e6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2220      	movs	r2, #32
 80025f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b40      	cmp	r3, #64	; 0x40
 8002600:	d107      	bne.n	8002612 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f7ff fed2 	bl	80023b4 <HAL_I2C_MemTxCpltCallback>
}
 8002610:	e006      	b.n	8002620 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f7ff fe8a 	bl	8002334 <HAL_I2C_MasterTxCpltCallback>
}
 8002620:	bf00      	nop
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002636:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800263c:	2b00      	cmp	r3, #0
 800263e:	d11d      	bne.n	800267c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002644:	2b01      	cmp	r3, #1
 8002646:	d10b      	bne.n	8002660 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800264c:	b2da      	uxtb	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002658:	1c9a      	adds	r2, r3, #2
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800265e:	e073      	b.n	8002748 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002664:	b29b      	uxth	r3, r3
 8002666:	121b      	asrs	r3, r3, #8
 8002668:	b2da      	uxtb	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002674:	1c5a      	adds	r2, r3, #1
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	651a      	str	r2, [r3, #80]	; 0x50
}
 800267a:	e065      	b.n	8002748 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002680:	2b01      	cmp	r3, #1
 8002682:	d10b      	bne.n	800269c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002688:	b2da      	uxtb	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002694:	1c5a      	adds	r2, r3, #1
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	651a      	str	r2, [r3, #80]	; 0x50
}
 800269a:	e055      	b.n	8002748 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d151      	bne.n	8002748 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80026a4:	7bfb      	ldrb	r3, [r7, #15]
 80026a6:	2b22      	cmp	r3, #34	; 0x22
 80026a8:	d10d      	bne.n	80026c6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026b8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026be:	1c5a      	adds	r2, r3, #1
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80026c4:	e040      	b.n	8002748 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d015      	beq.n	80026fc <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80026d0:	7bfb      	ldrb	r3, [r7, #15]
 80026d2:	2b21      	cmp	r3, #33	; 0x21
 80026d4:	d112      	bne.n	80026fc <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026da:	781a      	ldrb	r2, [r3, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e6:	1c5a      	adds	r2, r3, #1
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	3b01      	subs	r3, #1
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80026fa:	e025      	b.n	8002748 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002700:	b29b      	uxth	r3, r3
 8002702:	2b00      	cmp	r3, #0
 8002704:	d120      	bne.n	8002748 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002706:	7bfb      	ldrb	r3, [r7, #15]
 8002708:	2b21      	cmp	r3, #33	; 0x21
 800270a:	d11d      	bne.n	8002748 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	685a      	ldr	r2, [r3, #4]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800271a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800272a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2220      	movs	r2, #32
 8002736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f7ff fe36 	bl	80023b4 <HAL_I2C_MemTxCpltCallback>
}
 8002748:	bf00      	nop
 800274a:	3710      	adds	r7, #16
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800275e:	b2db      	uxtb	r3, r3
 8002760:	2b22      	cmp	r3, #34	; 0x22
 8002762:	f040 80a2 	bne.w	80028aa <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800276a:	b29b      	uxth	r3, r3
 800276c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2b03      	cmp	r3, #3
 8002772:	d921      	bls.n	80027b8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	691a      	ldr	r2, [r3, #16]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277e:	b2d2      	uxtb	r2, r2
 8002780:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002786:	1c5a      	adds	r2, r3, #1
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002790:	b29b      	uxth	r3, r3
 8002792:	3b01      	subs	r3, #1
 8002794:	b29a      	uxth	r2, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800279e:	b29b      	uxth	r3, r3
 80027a0:	2b03      	cmp	r3, #3
 80027a2:	f040 8082 	bne.w	80028aa <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	685a      	ldr	r2, [r3, #4]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027b4:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80027b6:	e078      	b.n	80028aa <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d074      	beq.n	80028aa <I2C_MasterReceive_RXNE+0x15a>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d002      	beq.n	80027cc <I2C_MasterReceive_RXNE+0x7c>
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d16e      	bne.n	80028aa <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f001 fac5 	bl	8003d5c <I2C_WaitOnSTOPRequestThroughIT>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d142      	bne.n	800285e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027e6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	685a      	ldr	r2, [r3, #4]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80027f6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	691a      	ldr	r2, [r3, #16]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002802:	b2d2      	uxtb	r2, r2
 8002804:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280a:	1c5a      	adds	r2, r3, #1
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002814:	b29b      	uxth	r3, r3
 8002816:	3b01      	subs	r3, #1
 8002818:	b29a      	uxth	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2220      	movs	r2, #32
 8002822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b40      	cmp	r3, #64	; 0x40
 8002830:	d10a      	bne.n	8002848 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f7ff fdc1 	bl	80023c8 <HAL_I2C_MemRxCpltCallback>
}
 8002846:	e030      	b.n	80028aa <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2212      	movs	r2, #18
 8002854:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f7ff fd76 	bl	8002348 <HAL_I2C_MasterRxCpltCallback>
}
 800285c:	e025      	b.n	80028aa <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	685a      	ldr	r2, [r3, #4]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800286c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	691a      	ldr	r2, [r3, #16]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002878:	b2d2      	uxtb	r2, r2
 800287a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002880:	1c5a      	adds	r2, r3, #1
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800288a:	b29b      	uxth	r3, r3
 800288c:	3b01      	subs	r3, #1
 800288e:	b29a      	uxth	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2220      	movs	r2, #32
 8002898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f7ff fd99 	bl	80023dc <HAL_I2C_ErrorCallback>
}
 80028aa:	bf00      	nop
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b084      	sub	sp, #16
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028be:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	2b04      	cmp	r3, #4
 80028c8:	d11b      	bne.n	8002902 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	685a      	ldr	r2, [r3, #4]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028d8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	691a      	ldr	r2, [r3, #16]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e4:	b2d2      	uxtb	r2, r2
 80028e6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ec:	1c5a      	adds	r2, r3, #1
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	3b01      	subs	r3, #1
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002900:	e0bd      	b.n	8002a7e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002906:	b29b      	uxth	r3, r3
 8002908:	2b03      	cmp	r3, #3
 800290a:	d129      	bne.n	8002960 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	685a      	ldr	r2, [r3, #4]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800291a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2b04      	cmp	r3, #4
 8002920:	d00a      	beq.n	8002938 <I2C_MasterReceive_BTF+0x86>
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2b02      	cmp	r3, #2
 8002926:	d007      	beq.n	8002938 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002936:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	691a      	ldr	r2, [r3, #16]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002942:	b2d2      	uxtb	r2, r2
 8002944:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294a:	1c5a      	adds	r2, r3, #1
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002954:	b29b      	uxth	r3, r3
 8002956:	3b01      	subs	r3, #1
 8002958:	b29a      	uxth	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800295e:	e08e      	b.n	8002a7e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002964:	b29b      	uxth	r3, r3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d176      	bne.n	8002a58 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2b01      	cmp	r3, #1
 800296e:	d002      	beq.n	8002976 <I2C_MasterReceive_BTF+0xc4>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2b10      	cmp	r3, #16
 8002974:	d108      	bne.n	8002988 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	e019      	b.n	80029bc <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2b04      	cmp	r3, #4
 800298c:	d002      	beq.n	8002994 <I2C_MasterReceive_BTF+0xe2>
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2b02      	cmp	r3, #2
 8002992:	d108      	bne.n	80029a6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029a2:	601a      	str	r2, [r3, #0]
 80029a4:	e00a      	b.n	80029bc <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2b10      	cmp	r3, #16
 80029aa:	d007      	beq.n	80029bc <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029ba:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	691a      	ldr	r2, [r3, #16]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c6:	b2d2      	uxtb	r2, r2
 80029c8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ce:	1c5a      	adds	r2, r3, #1
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d8:	b29b      	uxth	r3, r3
 80029da:	3b01      	subs	r3, #1
 80029dc:	b29a      	uxth	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	691a      	ldr	r2, [r3, #16]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ec:	b2d2      	uxtb	r2, r2
 80029ee:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f4:	1c5a      	adds	r2, r3, #1
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	3b01      	subs	r3, #1
 8002a02:	b29a      	uxth	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	685a      	ldr	r2, [r3, #4]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002a16:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2220      	movs	r2, #32
 8002a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	2b40      	cmp	r3, #64	; 0x40
 8002a2a:	d10a      	bne.n	8002a42 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f7ff fcc4 	bl	80023c8 <HAL_I2C_MemRxCpltCallback>
}
 8002a40:	e01d      	b.n	8002a7e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2212      	movs	r2, #18
 8002a4e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f7ff fc79 	bl	8002348 <HAL_I2C_MasterRxCpltCallback>
}
 8002a56:	e012      	b.n	8002a7e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	691a      	ldr	r2, [r3, #16]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a62:	b2d2      	uxtb	r2, r2
 8002a64:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6a:	1c5a      	adds	r2, r3, #1
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	3b01      	subs	r3, #1
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002a7e:	bf00      	nop
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b083      	sub	sp, #12
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b40      	cmp	r3, #64	; 0x40
 8002a98:	d117      	bne.n	8002aca <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d109      	bne.n	8002ab6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ab2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002ab4:	e067      	b.n	8002b86 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	f043 0301 	orr.w	r3, r3, #1
 8002ac0:	b2da      	uxtb	r2, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	611a      	str	r2, [r3, #16]
}
 8002ac8:	e05d      	b.n	8002b86 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ad2:	d133      	bne.n	8002b3c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	2b21      	cmp	r3, #33	; 0x21
 8002ade:	d109      	bne.n	8002af4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002af0:	611a      	str	r2, [r3, #16]
 8002af2:	e008      	b.n	8002b06 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	f043 0301 	orr.w	r3, r3, #1
 8002afe:	b2da      	uxtb	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d004      	beq.n	8002b18 <I2C_Master_SB+0x92>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d108      	bne.n	8002b2a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d032      	beq.n	8002b86 <I2C_Master_SB+0x100>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d02d      	beq.n	8002b86 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	685a      	ldr	r2, [r3, #4]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b38:	605a      	str	r2, [r3, #4]
}
 8002b3a:	e024      	b.n	8002b86 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d10e      	bne.n	8002b62 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	11db      	asrs	r3, r3, #7
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	f003 0306 	and.w	r3, r3, #6
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	f063 030f 	orn	r3, r3, #15
 8002b58:	b2da      	uxtb	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	611a      	str	r2, [r3, #16]
}
 8002b60:	e011      	b.n	8002b86 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d10d      	bne.n	8002b86 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	11db      	asrs	r3, r3, #7
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	f003 0306 	and.w	r3, r3, #6
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	f063 030e 	orn	r3, r3, #14
 8002b7e:	b2da      	uxtb	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	611a      	str	r2, [r3, #16]
}
 8002b86:	bf00      	nop
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr

08002b92 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002b92:	b480      	push	{r7}
 8002b94:	b083      	sub	sp, #12
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9e:	b2da      	uxtb	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d004      	beq.n	8002bb8 <I2C_Master_ADD10+0x26>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d108      	bne.n	8002bca <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00c      	beq.n	8002bda <I2C_Master_ADD10+0x48>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d007      	beq.n	8002bda <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bd8:	605a      	str	r2, [r3, #4]
  }
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b091      	sub	sp, #68	; 0x44
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bf4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfc:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c02:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	2b22      	cmp	r3, #34	; 0x22
 8002c0e:	f040 8169 	bne.w	8002ee4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d10f      	bne.n	8002c3a <I2C_Master_ADDR+0x54>
 8002c1a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002c1e:	2b40      	cmp	r3, #64	; 0x40
 8002c20:	d10b      	bne.n	8002c3a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c22:	2300      	movs	r3, #0
 8002c24:	633b      	str	r3, [r7, #48]	; 0x30
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	695b      	ldr	r3, [r3, #20]
 8002c2c:	633b      	str	r3, [r7, #48]	; 0x30
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	699b      	ldr	r3, [r3, #24]
 8002c34:	633b      	str	r3, [r7, #48]	; 0x30
 8002c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c38:	e160      	b.n	8002efc <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d11d      	bne.n	8002c7e <I2C_Master_ADDR+0x98>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002c4a:	d118      	bne.n	8002c7e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c70:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c76:	1c5a      	adds	r2, r3, #1
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	651a      	str	r2, [r3, #80]	; 0x50
 8002c7c:	e13e      	b.n	8002efc <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d113      	bne.n	8002cb0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c88:	2300      	movs	r3, #0
 8002c8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cac:	601a      	str	r2, [r3, #0]
 8002cae:	e115      	b.n	8002edc <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	f040 808a 	bne.w	8002dd0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cbe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002cc2:	d137      	bne.n	8002d34 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cd2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ce2:	d113      	bne.n	8002d0c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cf2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	627b      	str	r3, [r7, #36]	; 0x24
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	627b      	str	r3, [r7, #36]	; 0x24
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	627b      	str	r3, [r7, #36]	; 0x24
 8002d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0a:	e0e7      	b.n	8002edc <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	623b      	str	r3, [r7, #32]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	623b      	str	r3, [r7, #32]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	623b      	str	r3, [r7, #32]
 8002d20:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	e0d3      	b.n	8002edc <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d36:	2b08      	cmp	r3, #8
 8002d38:	d02e      	beq.n	8002d98 <I2C_Master_ADDR+0x1b2>
 8002d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d3c:	2b20      	cmp	r3, #32
 8002d3e:	d02b      	beq.n	8002d98 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d42:	2b12      	cmp	r3, #18
 8002d44:	d102      	bne.n	8002d4c <I2C_Master_ADDR+0x166>
 8002d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d125      	bne.n	8002d98 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d4e:	2b04      	cmp	r3, #4
 8002d50:	d00e      	beq.n	8002d70 <I2C_Master_ADDR+0x18a>
 8002d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d00b      	beq.n	8002d70 <I2C_Master_ADDR+0x18a>
 8002d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d5a:	2b10      	cmp	r3, #16
 8002d5c:	d008      	beq.n	8002d70 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d6c:	601a      	str	r2, [r3, #0]
 8002d6e:	e007      	b.n	8002d80 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d7e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d80:	2300      	movs	r3, #0
 8002d82:	61fb      	str	r3, [r7, #28]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	61fb      	str	r3, [r7, #28]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	61fb      	str	r3, [r7, #28]
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	e0a1      	b.n	8002edc <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002da6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002da8:	2300      	movs	r3, #0
 8002daa:	61bb      	str	r3, [r7, #24]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	61bb      	str	r3, [r7, #24]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	61bb      	str	r3, [r7, #24]
 8002dbc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dcc:	601a      	str	r2, [r3, #0]
 8002dce:	e085      	b.n	8002edc <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d14d      	bne.n	8002e76 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ddc:	2b04      	cmp	r3, #4
 8002dde:	d016      	beq.n	8002e0e <I2C_Master_ADDR+0x228>
 8002de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d013      	beq.n	8002e0e <I2C_Master_ADDR+0x228>
 8002de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de8:	2b10      	cmp	r3, #16
 8002dea:	d010      	beq.n	8002e0e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dfa:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e0a:	601a      	str	r2, [r3, #0]
 8002e0c:	e007      	b.n	8002e1e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e1c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e2c:	d117      	bne.n	8002e5e <I2C_Master_ADDR+0x278>
 8002e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e30:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e34:	d00b      	beq.n	8002e4e <I2C_Master_ADDR+0x268>
 8002e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d008      	beq.n	8002e4e <I2C_Master_ADDR+0x268>
 8002e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e3e:	2b08      	cmp	r3, #8
 8002e40:	d005      	beq.n	8002e4e <I2C_Master_ADDR+0x268>
 8002e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e44:	2b10      	cmp	r3, #16
 8002e46:	d002      	beq.n	8002e4e <I2C_Master_ADDR+0x268>
 8002e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e4a:	2b20      	cmp	r3, #32
 8002e4c:	d107      	bne.n	8002e5e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	685a      	ldr	r2, [r3, #4]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002e5c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e5e:	2300      	movs	r3, #0
 8002e60:	617b      	str	r3, [r7, #20]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	617b      	str	r3, [r7, #20]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	617b      	str	r3, [r7, #20]
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	e032      	b.n	8002edc <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e84:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e94:	d117      	bne.n	8002ec6 <I2C_Master_ADDR+0x2e0>
 8002e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e98:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e9c:	d00b      	beq.n	8002eb6 <I2C_Master_ADDR+0x2d0>
 8002e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d008      	beq.n	8002eb6 <I2C_Master_ADDR+0x2d0>
 8002ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ea6:	2b08      	cmp	r3, #8
 8002ea8:	d005      	beq.n	8002eb6 <I2C_Master_ADDR+0x2d0>
 8002eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eac:	2b10      	cmp	r3, #16
 8002eae:	d002      	beq.n	8002eb6 <I2C_Master_ADDR+0x2d0>
 8002eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb2:	2b20      	cmp	r3, #32
 8002eb4:	d107      	bne.n	8002ec6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	685a      	ldr	r2, [r3, #4]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ec4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	613b      	str	r3, [r7, #16]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	695b      	ldr	r3, [r3, #20]
 8002ed0:	613b      	str	r3, [r7, #16]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	613b      	str	r3, [r7, #16]
 8002eda:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002ee2:	e00b      	b.n	8002efc <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	60fb      	str	r3, [r7, #12]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	60fb      	str	r3, [r7, #12]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	60fb      	str	r3, [r7, #12]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
}
 8002efa:	e7ff      	b.n	8002efc <I2C_Master_ADDR+0x316>
 8002efc:	bf00      	nop
 8002efe:	3744      	adds	r7, #68	; 0x44
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f16:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d02b      	beq.n	8002f7a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f26:	781a      	ldrb	r2, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f32:	1c5a      	adds	r2, r3, #1
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	b29a      	uxth	r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d114      	bne.n	8002f7a <I2C_SlaveTransmit_TXE+0x72>
 8002f50:	7bfb      	ldrb	r3, [r7, #15]
 8002f52:	2b29      	cmp	r3, #41	; 0x29
 8002f54:	d111      	bne.n	8002f7a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	685a      	ldr	r2, [r3, #4]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f64:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2221      	movs	r2, #33	; 0x21
 8002f6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2228      	movs	r2, #40	; 0x28
 8002f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f7ff f9f1 	bl	800235c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002f7a:	bf00      	nop
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002f82:	b480      	push	{r7}
 8002f84:	b083      	sub	sp, #12
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d011      	beq.n	8002fb8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f98:	781a      	ldrb	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa4:	1c5a      	adds	r2, r3, #1
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fd2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d02c      	beq.n	8003038 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	691a      	ldr	r2, [r3, #16]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe8:	b2d2      	uxtb	r2, r2
 8002fea:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff0:	1c5a      	adds	r2, r3, #1
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003008:	b29b      	uxth	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d114      	bne.n	8003038 <I2C_SlaveReceive_RXNE+0x74>
 800300e:	7bfb      	ldrb	r3, [r7, #15]
 8003010:	2b2a      	cmp	r3, #42	; 0x2a
 8003012:	d111      	bne.n	8003038 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	685a      	ldr	r2, [r3, #4]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003022:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2222      	movs	r2, #34	; 0x22
 8003028:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2228      	movs	r2, #40	; 0x28
 800302e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f7ff f99c 	bl	8002370 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003038:	bf00      	nop
 800303a:	3710      	adds	r7, #16
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800304c:	b29b      	uxth	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d012      	beq.n	8003078 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	691a      	ldr	r2, [r3, #16]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305c:	b2d2      	uxtb	r2, r2
 800305e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003064:	1c5a      	adds	r2, r3, #1
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800306e:	b29b      	uxth	r3, r3
 8003070:	3b01      	subs	r3, #1
 8003072:	b29a      	uxth	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003078:	bf00      	nop
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800308e:	2300      	movs	r3, #0
 8003090:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003098:	b2db      	uxtb	r3, r3
 800309a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800309e:	2b28      	cmp	r3, #40	; 0x28
 80030a0:	d127      	bne.n	80030f2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	685a      	ldr	r2, [r3, #4]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030b0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	089b      	lsrs	r3, r3, #2
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d101      	bne.n	80030c2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80030be:	2301      	movs	r3, #1
 80030c0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	09db      	lsrs	r3, r3, #7
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d103      	bne.n	80030d6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	81bb      	strh	r3, [r7, #12]
 80030d4:	e002      	b.n	80030dc <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80030e4:	89ba      	ldrh	r2, [r7, #12]
 80030e6:	7bfb      	ldrb	r3, [r7, #15]
 80030e8:	4619      	mov	r1, r3
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f7ff f94a 	bl	8002384 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80030f0:	e00e      	b.n	8003110 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030f2:	2300      	movs	r3, #0
 80030f4:	60bb      	str	r3, [r7, #8]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	695b      	ldr	r3, [r3, #20]
 80030fc:	60bb      	str	r3, [r7, #8]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	60bb      	str	r3, [r7, #8]
 8003106:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003110:	bf00      	nop
 8003112:	3710      	adds	r7, #16
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003126:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	685a      	ldr	r2, [r3, #4]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003136:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003138:	2300      	movs	r3, #0
 800313a:	60bb      	str	r3, [r7, #8]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	60bb      	str	r3, [r7, #8]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f042 0201 	orr.w	r2, r2, #1
 8003152:	601a      	str	r2, [r3, #0]
 8003154:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003164:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003170:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003174:	d172      	bne.n	800325c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003176:	7bfb      	ldrb	r3, [r7, #15]
 8003178:	2b22      	cmp	r3, #34	; 0x22
 800317a:	d002      	beq.n	8003182 <I2C_Slave_STOPF+0x6a>
 800317c:	7bfb      	ldrb	r3, [r7, #15]
 800317e:	2b2a      	cmp	r3, #42	; 0x2a
 8003180:	d135      	bne.n	80031ee <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	b29a      	uxth	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003194:	b29b      	uxth	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d005      	beq.n	80031a6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319e:	f043 0204 	orr.w	r2, r3, #4
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	685a      	ldr	r2, [r3, #4]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031b4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7fe f876 	bl	80012ac <HAL_DMA_GetState>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d049      	beq.n	800325a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ca:	4a69      	ldr	r2, [pc, #420]	; (8003370 <I2C_Slave_STOPF+0x258>)
 80031cc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7fe f848 	bl	8001268 <HAL_DMA_Abort_IT>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d03d      	beq.n	800325a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80031e8:	4610      	mov	r0, r2
 80031ea:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80031ec:	e035      	b.n	800325a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	b29a      	uxth	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003200:	b29b      	uxth	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d005      	beq.n	8003212 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320a:	f043 0204 	orr.w	r2, r3, #4
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	685a      	ldr	r2, [r3, #4]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003220:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003226:	4618      	mov	r0, r3
 8003228:	f7fe f840 	bl	80012ac <HAL_DMA_GetState>
 800322c:	4603      	mov	r3, r0
 800322e:	2b01      	cmp	r3, #1
 8003230:	d014      	beq.n	800325c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003236:	4a4e      	ldr	r2, [pc, #312]	; (8003370 <I2C_Slave_STOPF+0x258>)
 8003238:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800323e:	4618      	mov	r0, r3
 8003240:	f7fe f812 	bl	8001268 <HAL_DMA_Abort_IT>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d008      	beq.n	800325c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800324e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003254:	4610      	mov	r0, r2
 8003256:	4798      	blx	r3
 8003258:	e000      	b.n	800325c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800325a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003260:	b29b      	uxth	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d03e      	beq.n	80032e4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	695b      	ldr	r3, [r3, #20]
 800326c:	f003 0304 	and.w	r3, r3, #4
 8003270:	2b04      	cmp	r3, #4
 8003272:	d112      	bne.n	800329a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	691a      	ldr	r2, [r3, #16]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327e:	b2d2      	uxtb	r2, r2
 8003280:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003286:	1c5a      	adds	r2, r3, #1
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003290:	b29b      	uxth	r3, r3
 8003292:	3b01      	subs	r3, #1
 8003294:	b29a      	uxth	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	695b      	ldr	r3, [r3, #20]
 80032a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a4:	2b40      	cmp	r3, #64	; 0x40
 80032a6:	d112      	bne.n	80032ce <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	691a      	ldr	r2, [r3, #16]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b2:	b2d2      	uxtb	r2, r2
 80032b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	1c5a      	adds	r2, r3, #1
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	3b01      	subs	r3, #1
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d005      	beq.n	80032e4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032dc:	f043 0204 	orr.w	r2, r3, #4
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d003      	beq.n	80032f4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f000 f8b3 	bl	8003458 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80032f2:	e039      	b.n	8003368 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80032f4:	7bfb      	ldrb	r3, [r7, #15]
 80032f6:	2b2a      	cmp	r3, #42	; 0x2a
 80032f8:	d109      	bne.n	800330e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2228      	movs	r2, #40	; 0x28
 8003304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f7ff f831 	bl	8002370 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b28      	cmp	r3, #40	; 0x28
 8003318:	d111      	bne.n	800333e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a15      	ldr	r2, [pc, #84]	; (8003374 <I2C_Slave_STOPF+0x25c>)
 800331e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2220      	movs	r2, #32
 800332a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f7ff f832 	bl	80023a0 <HAL_I2C_ListenCpltCallback>
}
 800333c:	e014      	b.n	8003368 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003342:	2b22      	cmp	r3, #34	; 0x22
 8003344:	d002      	beq.n	800334c <I2C_Slave_STOPF+0x234>
 8003346:	7bfb      	ldrb	r3, [r7, #15]
 8003348:	2b22      	cmp	r3, #34	; 0x22
 800334a:	d10d      	bne.n	8003368 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2220      	movs	r2, #32
 8003356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f7ff f804 	bl	8002370 <HAL_I2C_SlaveRxCpltCallback>
}
 8003368:	bf00      	nop
 800336a:	3710      	adds	r7, #16
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	0800395d 	.word	0x0800395d
 8003374:	ffff0000 	.word	0xffff0000

08003378 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003386:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	2b08      	cmp	r3, #8
 8003392:	d002      	beq.n	800339a <I2C_Slave_AF+0x22>
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	2b20      	cmp	r3, #32
 8003398:	d129      	bne.n	80033ee <I2C_Slave_AF+0x76>
 800339a:	7bfb      	ldrb	r3, [r7, #15]
 800339c:	2b28      	cmp	r3, #40	; 0x28
 800339e:	d126      	bne.n	80033ee <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a2c      	ldr	r2, [pc, #176]	; (8003454 <I2C_Slave_AF+0xdc>)
 80033a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	685a      	ldr	r2, [r3, #4]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80033b4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033be:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033ce:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2220      	movs	r2, #32
 80033da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f7fe ffda 	bl	80023a0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80033ec:	e02e      	b.n	800344c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80033ee:	7bfb      	ldrb	r3, [r7, #15]
 80033f0:	2b21      	cmp	r3, #33	; 0x21
 80033f2:	d126      	bne.n	8003442 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a17      	ldr	r2, [pc, #92]	; (8003454 <I2C_Slave_AF+0xdc>)
 80033f8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2221      	movs	r2, #33	; 0x21
 80033fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2220      	movs	r2, #32
 8003404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	685a      	ldr	r2, [r3, #4]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800341e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003428:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003438:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f7fe ff8e 	bl	800235c <HAL_I2C_SlaveTxCpltCallback>
}
 8003440:	e004      	b.n	800344c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800344a:	615a      	str	r2, [r3, #20]
}
 800344c:	bf00      	nop
 800344e:	3710      	adds	r7, #16
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	ffff0000 	.word	0xffff0000

08003458 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003466:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800346e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003470:	7bbb      	ldrb	r3, [r7, #14]
 8003472:	2b10      	cmp	r3, #16
 8003474:	d002      	beq.n	800347c <I2C_ITError+0x24>
 8003476:	7bbb      	ldrb	r3, [r7, #14]
 8003478:	2b40      	cmp	r3, #64	; 0x40
 800347a:	d10a      	bne.n	8003492 <I2C_ITError+0x3a>
 800347c:	7bfb      	ldrb	r3, [r7, #15]
 800347e:	2b22      	cmp	r3, #34	; 0x22
 8003480:	d107      	bne.n	8003492 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003490:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003492:	7bfb      	ldrb	r3, [r7, #15]
 8003494:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003498:	2b28      	cmp	r3, #40	; 0x28
 800349a:	d107      	bne.n	80034ac <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2228      	movs	r2, #40	; 0x28
 80034a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80034aa:	e015      	b.n	80034d8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034ba:	d00a      	beq.n	80034d2 <I2C_ITError+0x7a>
 80034bc:	7bfb      	ldrb	r3, [r7, #15]
 80034be:	2b60      	cmp	r3, #96	; 0x60
 80034c0:	d007      	beq.n	80034d2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2220      	movs	r2, #32
 80034c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034e6:	d162      	bne.n	80035ae <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	685a      	ldr	r2, [r3, #4]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034f6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b01      	cmp	r3, #1
 8003504:	d020      	beq.n	8003548 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800350a:	4a6a      	ldr	r2, [pc, #424]	; (80036b4 <I2C_ITError+0x25c>)
 800350c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003512:	4618      	mov	r0, r3
 8003514:	f7fd fea8 	bl	8001268 <HAL_DMA_Abort_IT>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	f000 8089 	beq.w	8003632 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f022 0201 	bic.w	r2, r2, #1
 800352e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2220      	movs	r2, #32
 8003534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800353c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003542:	4610      	mov	r0, r2
 8003544:	4798      	blx	r3
 8003546:	e074      	b.n	8003632 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354c:	4a59      	ldr	r2, [pc, #356]	; (80036b4 <I2C_ITError+0x25c>)
 800354e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003554:	4618      	mov	r0, r3
 8003556:	f7fd fe87 	bl	8001268 <HAL_DMA_Abort_IT>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d068      	beq.n	8003632 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800356a:	2b40      	cmp	r3, #64	; 0x40
 800356c:	d10b      	bne.n	8003586 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	691a      	ldr	r2, [r3, #16]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003578:	b2d2      	uxtb	r2, r2
 800357a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003580:	1c5a      	adds	r2, r3, #1
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f022 0201 	bic.w	r2, r2, #1
 8003594:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2220      	movs	r2, #32
 800359a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035a8:	4610      	mov	r0, r2
 80035aa:	4798      	blx	r3
 80035ac:	e041      	b.n	8003632 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b60      	cmp	r3, #96	; 0x60
 80035b8:	d125      	bne.n	8003606 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2220      	movs	r2, #32
 80035be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d2:	2b40      	cmp	r3, #64	; 0x40
 80035d4:	d10b      	bne.n	80035ee <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	691a      	ldr	r2, [r3, #16]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e0:	b2d2      	uxtb	r2, r2
 80035e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e8:	1c5a      	adds	r2, r3, #1
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f022 0201 	bic.w	r2, r2, #1
 80035fc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f7fe fef6 	bl	80023f0 <HAL_I2C_AbortCpltCallback>
 8003604:	e015      	b.n	8003632 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	695b      	ldr	r3, [r3, #20]
 800360c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003610:	2b40      	cmp	r3, #64	; 0x40
 8003612:	d10b      	bne.n	800362c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	691a      	ldr	r2, [r3, #16]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361e:	b2d2      	uxtb	r2, r2
 8003620:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003626:	1c5a      	adds	r2, r3, #1
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f7fe fed5 	bl	80023dc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003636:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10e      	bne.n	8003660 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003648:	2b00      	cmp	r3, #0
 800364a:	d109      	bne.n	8003660 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003652:	2b00      	cmp	r3, #0
 8003654:	d104      	bne.n	8003660 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800365c:	2b00      	cmp	r3, #0
 800365e:	d007      	beq.n	8003670 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	685a      	ldr	r2, [r3, #4]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800366e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003676:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367c:	f003 0304 	and.w	r3, r3, #4
 8003680:	2b04      	cmp	r3, #4
 8003682:	d113      	bne.n	80036ac <I2C_ITError+0x254>
 8003684:	7bfb      	ldrb	r3, [r7, #15]
 8003686:	2b28      	cmp	r3, #40	; 0x28
 8003688:	d110      	bne.n	80036ac <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a0a      	ldr	r2, [pc, #40]	; (80036b8 <I2C_ITError+0x260>)
 800368e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2220      	movs	r2, #32
 800369a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7fe fe7a 	bl	80023a0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80036ac:	bf00      	nop
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	0800395d 	.word	0x0800395d
 80036b8:	ffff0000 	.word	0xffff0000

080036bc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b088      	sub	sp, #32
 80036c0:	af02      	add	r7, sp, #8
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	607a      	str	r2, [r7, #4]
 80036c6:	603b      	str	r3, [r7, #0]
 80036c8:	460b      	mov	r3, r1
 80036ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	2b08      	cmp	r3, #8
 80036d6:	d006      	beq.n	80036e6 <I2C_MasterRequestWrite+0x2a>
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d003      	beq.n	80036e6 <I2C_MasterRequestWrite+0x2a>
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036e4:	d108      	bne.n	80036f8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036f4:	601a      	str	r2, [r3, #0]
 80036f6:	e00b      	b.n	8003710 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fc:	2b12      	cmp	r3, #18
 80036fe:	d107      	bne.n	8003710 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800370e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	9300      	str	r3, [sp, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800371c:	68f8      	ldr	r0, [r7, #12]
 800371e:	f000 f9c5 	bl	8003aac <I2C_WaitOnFlagUntilTimeout>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00d      	beq.n	8003744 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003732:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003736:	d103      	bne.n	8003740 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800373e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e035      	b.n	80037b0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800374c:	d108      	bne.n	8003760 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800374e:	897b      	ldrh	r3, [r7, #10]
 8003750:	b2db      	uxtb	r3, r3
 8003752:	461a      	mov	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800375c:	611a      	str	r2, [r3, #16]
 800375e:	e01b      	b.n	8003798 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003760:	897b      	ldrh	r3, [r7, #10]
 8003762:	11db      	asrs	r3, r3, #7
 8003764:	b2db      	uxtb	r3, r3
 8003766:	f003 0306 	and.w	r3, r3, #6
 800376a:	b2db      	uxtb	r3, r3
 800376c:	f063 030f 	orn	r3, r3, #15
 8003770:	b2da      	uxtb	r2, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	490e      	ldr	r1, [pc, #56]	; (80037b8 <I2C_MasterRequestWrite+0xfc>)
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f000 f9eb 	bl	8003b5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e010      	b.n	80037b0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800378e:	897b      	ldrh	r3, [r7, #10]
 8003790:	b2da      	uxtb	r2, r3
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	4907      	ldr	r1, [pc, #28]	; (80037bc <I2C_MasterRequestWrite+0x100>)
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f000 f9db 	bl	8003b5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e000      	b.n	80037b0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3718      	adds	r7, #24
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	00010008 	.word	0x00010008
 80037bc:	00010002 	.word	0x00010002

080037c0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b088      	sub	sp, #32
 80037c4:	af02      	add	r7, sp, #8
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	607a      	str	r2, [r7, #4]
 80037ca:	603b      	str	r3, [r7, #0]
 80037cc:	460b      	mov	r3, r1
 80037ce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037e4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	2b08      	cmp	r3, #8
 80037ea:	d006      	beq.n	80037fa <I2C_MasterRequestRead+0x3a>
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d003      	beq.n	80037fa <I2C_MasterRequestRead+0x3a>
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037f8:	d108      	bne.n	800380c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003808:	601a      	str	r2, [r3, #0]
 800380a:	e00b      	b.n	8003824 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003810:	2b11      	cmp	r3, #17
 8003812:	d107      	bne.n	8003824 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003822:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	9300      	str	r3, [sp, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003830:	68f8      	ldr	r0, [r7, #12]
 8003832:	f000 f93b 	bl	8003aac <I2C_WaitOnFlagUntilTimeout>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d00d      	beq.n	8003858 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003846:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800384a:	d103      	bne.n	8003854 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003852:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e079      	b.n	800394c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003860:	d108      	bne.n	8003874 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003862:	897b      	ldrh	r3, [r7, #10]
 8003864:	b2db      	uxtb	r3, r3
 8003866:	f043 0301 	orr.w	r3, r3, #1
 800386a:	b2da      	uxtb	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	611a      	str	r2, [r3, #16]
 8003872:	e05f      	b.n	8003934 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003874:	897b      	ldrh	r3, [r7, #10]
 8003876:	11db      	asrs	r3, r3, #7
 8003878:	b2db      	uxtb	r3, r3
 800387a:	f003 0306 	and.w	r3, r3, #6
 800387e:	b2db      	uxtb	r3, r3
 8003880:	f063 030f 	orn	r3, r3, #15
 8003884:	b2da      	uxtb	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	4930      	ldr	r1, [pc, #192]	; (8003954 <I2C_MasterRequestRead+0x194>)
 8003892:	68f8      	ldr	r0, [r7, #12]
 8003894:	f000 f961 	bl	8003b5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e054      	b.n	800394c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80038a2:	897b      	ldrh	r3, [r7, #10]
 80038a4:	b2da      	uxtb	r2, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	4929      	ldr	r1, [pc, #164]	; (8003958 <I2C_MasterRequestRead+0x198>)
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f000 f951 	bl	8003b5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e044      	b.n	800394c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038c2:	2300      	movs	r3, #0
 80038c4:	613b      	str	r3, [r7, #16]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	695b      	ldr	r3, [r3, #20]
 80038cc:	613b      	str	r3, [r7, #16]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	613b      	str	r3, [r7, #16]
 80038d6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038e6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	9300      	str	r3, [sp, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038f4:	68f8      	ldr	r0, [r7, #12]
 80038f6:	f000 f8d9 	bl	8003aac <I2C_WaitOnFlagUntilTimeout>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00d      	beq.n	800391c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800390a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800390e:	d103      	bne.n	8003918 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003916:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e017      	b.n	800394c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800391c:	897b      	ldrh	r3, [r7, #10]
 800391e:	11db      	asrs	r3, r3, #7
 8003920:	b2db      	uxtb	r3, r3
 8003922:	f003 0306 	and.w	r3, r3, #6
 8003926:	b2db      	uxtb	r3, r3
 8003928:	f063 030e 	orn	r3, r3, #14
 800392c:	b2da      	uxtb	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	4907      	ldr	r1, [pc, #28]	; (8003958 <I2C_MasterRequestRead+0x198>)
 800393a:	68f8      	ldr	r0, [r7, #12]
 800393c:	f000 f90d 	bl	8003b5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e000      	b.n	800394c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800394a:	2300      	movs	r3, #0
}
 800394c:	4618      	mov	r0, r3
 800394e:	3718      	adds	r7, #24
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	00010008 	.word	0x00010008
 8003958:	00010002 	.word	0x00010002

0800395c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b086      	sub	sp, #24
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003964:	2300      	movs	r3, #0
 8003966:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800396c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003974:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003976:	4b4b      	ldr	r3, [pc, #300]	; (8003aa4 <I2C_DMAAbort+0x148>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	08db      	lsrs	r3, r3, #3
 800397c:	4a4a      	ldr	r2, [pc, #296]	; (8003aa8 <I2C_DMAAbort+0x14c>)
 800397e:	fba2 2303 	umull	r2, r3, r2, r3
 8003982:	0a1a      	lsrs	r2, r3, #8
 8003984:	4613      	mov	r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	4413      	add	r3, r2
 800398a:	00da      	lsls	r2, r3, #3
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d106      	bne.n	80039a4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399a:	f043 0220 	orr.w	r2, r3, #32
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80039a2:	e00a      	b.n	80039ba <I2C_DMAAbort+0x5e>
    }
    count--;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	3b01      	subs	r3, #1
 80039a8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039b8:	d0ea      	beq.n	8003990 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d003      	beq.n	80039ca <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c6:	2200      	movs	r2, #0
 80039c8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d6:	2200      	movs	r2, #0
 80039d8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039e8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	2200      	movs	r2, #0
 80039ee:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d003      	beq.n	8003a00 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039fc:	2200      	movs	r2, #0
 80039fe:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d003      	beq.n	8003a10 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f022 0201 	bic.w	r2, r2, #1
 8003a1e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	2b60      	cmp	r3, #96	; 0x60
 8003a2a:	d10e      	bne.n	8003a4a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	2220      	movs	r2, #32
 8003a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003a42:	6978      	ldr	r0, [r7, #20]
 8003a44:	f7fe fcd4 	bl	80023f0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003a48:	e027      	b.n	8003a9a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003a4a:	7cfb      	ldrb	r3, [r7, #19]
 8003a4c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003a50:	2b28      	cmp	r3, #40	; 0x28
 8003a52:	d117      	bne.n	8003a84 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f042 0201 	orr.w	r2, r2, #1
 8003a62:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a72:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	2200      	movs	r2, #0
 8003a78:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	2228      	movs	r2, #40	; 0x28
 8003a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003a82:	e007      	b.n	8003a94 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	2220      	movs	r2, #32
 8003a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003a94:	6978      	ldr	r0, [r7, #20]
 8003a96:	f7fe fca1 	bl	80023dc <HAL_I2C_ErrorCallback>
}
 8003a9a:	bf00      	nop
 8003a9c:	3718      	adds	r7, #24
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	20000000 	.word	0x20000000
 8003aa8:	14f8b589 	.word	0x14f8b589

08003aac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	603b      	str	r3, [r7, #0]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003abc:	e025      	b.n	8003b0a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac4:	d021      	beq.n	8003b0a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ac6:	f7fd fa71 	bl	8000fac <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	683a      	ldr	r2, [r7, #0]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d302      	bcc.n	8003adc <I2C_WaitOnFlagUntilTimeout+0x30>
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d116      	bne.n	8003b0a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2220      	movs	r2, #32
 8003ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af6:	f043 0220 	orr.w	r2, r3, #32
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e023      	b.n	8003b52 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	0c1b      	lsrs	r3, r3, #16
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d10d      	bne.n	8003b30 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	43da      	mvns	r2, r3
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	4013      	ands	r3, r2
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	bf0c      	ite	eq
 8003b26:	2301      	moveq	r3, #1
 8003b28:	2300      	movne	r3, #0
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	e00c      	b.n	8003b4a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	43da      	mvns	r2, r3
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	bf0c      	ite	eq
 8003b42:	2301      	moveq	r3, #1
 8003b44:	2300      	movne	r3, #0
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	461a      	mov	r2, r3
 8003b4a:	79fb      	ldrb	r3, [r7, #7]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d0b6      	beq.n	8003abe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b084      	sub	sp, #16
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	60f8      	str	r0, [r7, #12]
 8003b62:	60b9      	str	r1, [r7, #8]
 8003b64:	607a      	str	r2, [r7, #4]
 8003b66:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b68:	e051      	b.n	8003c0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	695b      	ldr	r3, [r3, #20]
 8003b70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b78:	d123      	bne.n	8003bc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b88:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b92:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2200      	movs	r2, #0
 8003b98:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2220      	movs	r2, #32
 8003b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bae:	f043 0204 	orr.w	r2, r3, #4
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e046      	b.n	8003c50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc8:	d021      	beq.n	8003c0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bca:	f7fd f9ef 	bl	8000fac <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d302      	bcc.n	8003be0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d116      	bne.n	8003c0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2220      	movs	r2, #32
 8003bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfa:	f043 0220 	orr.w	r2, r3, #32
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e020      	b.n	8003c50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	0c1b      	lsrs	r3, r3, #16
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d10c      	bne.n	8003c32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	43da      	mvns	r2, r3
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	4013      	ands	r3, r2
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	bf14      	ite	ne
 8003c2a:	2301      	movne	r3, #1
 8003c2c:	2300      	moveq	r3, #0
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	e00b      	b.n	8003c4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	43da      	mvns	r2, r3
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	bf14      	ite	ne
 8003c44:	2301      	movne	r3, #1
 8003c46:	2300      	moveq	r3, #0
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d18d      	bne.n	8003b6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3710      	adds	r7, #16
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c64:	e02d      	b.n	8003cc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f000 f900 	bl	8003e6c <I2C_IsAcknowledgeFailed>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d001      	beq.n	8003c76 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e02d      	b.n	8003cd2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c7c:	d021      	beq.n	8003cc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c7e:	f7fd f995 	bl	8000fac <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	68ba      	ldr	r2, [r7, #8]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d302      	bcc.n	8003c94 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d116      	bne.n	8003cc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2200      	movs	r2, #0
 8003c98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2220      	movs	r2, #32
 8003c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cae:	f043 0220 	orr.w	r2, r3, #32
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e007      	b.n	8003cd2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	695b      	ldr	r3, [r3, #20]
 8003cc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ccc:	2b80      	cmp	r3, #128	; 0x80
 8003cce:	d1ca      	bne.n	8003c66 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b084      	sub	sp, #16
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	60f8      	str	r0, [r7, #12]
 8003ce2:	60b9      	str	r1, [r7, #8]
 8003ce4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ce6:	e02d      	b.n	8003d44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ce8:	68f8      	ldr	r0, [r7, #12]
 8003cea:	f000 f8bf 	bl	8003e6c <I2C_IsAcknowledgeFailed>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d001      	beq.n	8003cf8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e02d      	b.n	8003d54 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cfe:	d021      	beq.n	8003d44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d00:	f7fd f954 	bl	8000fac <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	68ba      	ldr	r2, [r7, #8]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d302      	bcc.n	8003d16 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d116      	bne.n	8003d44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2220      	movs	r2, #32
 8003d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d30:	f043 0220 	orr.w	r2, r3, #32
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e007      	b.n	8003d54 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	f003 0304 	and.w	r3, r3, #4
 8003d4e:	2b04      	cmp	r3, #4
 8003d50:	d1ca      	bne.n	8003ce8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b085      	sub	sp, #20
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d64:	2300      	movs	r3, #0
 8003d66:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003d68:	4b13      	ldr	r3, [pc, #76]	; (8003db8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	08db      	lsrs	r3, r3, #3
 8003d6e:	4a13      	ldr	r2, [pc, #76]	; (8003dbc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003d70:	fba2 2303 	umull	r2, r3, r2, r3
 8003d74:	0a1a      	lsrs	r2, r3, #8
 8003d76:	4613      	mov	r3, r2
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	4413      	add	r3, r2
 8003d7c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	3b01      	subs	r3, #1
 8003d82:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d107      	bne.n	8003d9a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8e:	f043 0220 	orr.w	r2, r3, #32
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e008      	b.n	8003dac <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003da4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003da8:	d0e9      	beq.n	8003d7e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3714      	adds	r7, #20
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr
 8003db8:	20000000 	.word	0x20000000
 8003dbc:	14f8b589 	.word	0x14f8b589

08003dc0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003dcc:	e042      	b.n	8003e54 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	f003 0310 	and.w	r3, r3, #16
 8003dd8:	2b10      	cmp	r3, #16
 8003dda:	d119      	bne.n	8003e10 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f06f 0210 	mvn.w	r2, #16
 8003de4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2220      	movs	r2, #32
 8003df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e029      	b.n	8003e64 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e10:	f7fd f8cc 	bl	8000fac <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d302      	bcc.n	8003e26 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d116      	bne.n	8003e54 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2220      	movs	r2, #32
 8003e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e40:	f043 0220 	orr.w	r2, r3, #32
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e007      	b.n	8003e64 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e5e:	2b40      	cmp	r3, #64	; 0x40
 8003e60:	d1b5      	bne.n	8003dce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003e62:	2300      	movs	r3, #0
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3710      	adds	r7, #16
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e82:	d11b      	bne.n	8003ebc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e8c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2220      	movs	r2, #32
 8003e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea8:	f043 0204 	orr.w	r2, r3, #4
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e000      	b.n	8003ebe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	370c      	adds	r7, #12
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr

08003eca <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003eca:	b480      	push	{r7}
 8003ecc:	b083      	sub	sp, #12
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed6:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003eda:	d103      	bne.n	8003ee4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003ee2:	e007      	b.n	8003ef4 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003eec:	d102      	bne.n	8003ef4 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2208      	movs	r2, #8
 8003ef2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003ef4:	bf00      	nop
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b086      	sub	sp, #24
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d101      	bne.n	8003f12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e264      	b.n	80043dc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0301 	and.w	r3, r3, #1
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d075      	beq.n	800400a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f1e:	4ba3      	ldr	r3, [pc, #652]	; (80041ac <HAL_RCC_OscConfig+0x2ac>)
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f003 030c 	and.w	r3, r3, #12
 8003f26:	2b04      	cmp	r3, #4
 8003f28:	d00c      	beq.n	8003f44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f2a:	4ba0      	ldr	r3, [pc, #640]	; (80041ac <HAL_RCC_OscConfig+0x2ac>)
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f32:	2b08      	cmp	r3, #8
 8003f34:	d112      	bne.n	8003f5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f36:	4b9d      	ldr	r3, [pc, #628]	; (80041ac <HAL_RCC_OscConfig+0x2ac>)
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f42:	d10b      	bne.n	8003f5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f44:	4b99      	ldr	r3, [pc, #612]	; (80041ac <HAL_RCC_OscConfig+0x2ac>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d05b      	beq.n	8004008 <HAL_RCC_OscConfig+0x108>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d157      	bne.n	8004008 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e23f      	b.n	80043dc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f64:	d106      	bne.n	8003f74 <HAL_RCC_OscConfig+0x74>
 8003f66:	4b91      	ldr	r3, [pc, #580]	; (80041ac <HAL_RCC_OscConfig+0x2ac>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a90      	ldr	r2, [pc, #576]	; (80041ac <HAL_RCC_OscConfig+0x2ac>)
 8003f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f70:	6013      	str	r3, [r2, #0]
 8003f72:	e01d      	b.n	8003fb0 <HAL_RCC_OscConfig+0xb0>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f7c:	d10c      	bne.n	8003f98 <HAL_RCC_OscConfig+0x98>
 8003f7e:	4b8b      	ldr	r3, [pc, #556]	; (80041ac <HAL_RCC_OscConfig+0x2ac>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a8a      	ldr	r2, [pc, #552]	; (80041ac <HAL_RCC_OscConfig+0x2ac>)
 8003f84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f88:	6013      	str	r3, [r2, #0]
 8003f8a:	4b88      	ldr	r3, [pc, #544]	; (80041ac <HAL_RCC_OscConfig+0x2ac>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a87      	ldr	r2, [pc, #540]	; (80041ac <HAL_RCC_OscConfig+0x2ac>)
 8003f90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f94:	6013      	str	r3, [r2, #0]
 8003f96:	e00b      	b.n	8003fb0 <HAL_RCC_OscConfig+0xb0>
 8003f98:	4b84      	ldr	r3, [pc, #528]	; (80041ac <HAL_RCC_OscConfig+0x2ac>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a83      	ldr	r2, [pc, #524]	; (80041ac <HAL_RCC_OscConfig+0x2ac>)
 8003f9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fa2:	6013      	str	r3, [r2, #0]
 8003fa4:	4b81      	ldr	r3, [pc, #516]	; (80041ac <HAL_RCC_OscConfig+0x2ac>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a80      	ldr	r2, [pc, #512]	; (80041ac <HAL_RCC_OscConfig+0x2ac>)
 8003faa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d013      	beq.n	8003fe0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb8:	f7fc fff8 	bl	8000fac <HAL_GetTick>
 8003fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fbe:	e008      	b.n	8003fd2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fc0:	f7fc fff4 	bl	8000fac <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b64      	cmp	r3, #100	; 0x64
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e204      	b.n	80043dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fd2:	4b76      	ldr	r3, [pc, #472]	; (80041ac <HAL_RCC_OscConfig+0x2ac>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d0f0      	beq.n	8003fc0 <HAL_RCC_OscConfig+0xc0>
 8003fde:	e014      	b.n	800400a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe0:	f7fc ffe4 	bl	8000fac <HAL_GetTick>
 8003fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fe6:	e008      	b.n	8003ffa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fe8:	f7fc ffe0 	bl	8000fac <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	2b64      	cmp	r3, #100	; 0x64
 8003ff4:	d901      	bls.n	8003ffa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e1f0      	b.n	80043dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ffa:	4b6c      	ldr	r3, [pc, #432]	; (80041ac <HAL_RCC_OscConfig+0x2ac>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1f0      	bne.n	8003fe8 <HAL_RCC_OscConfig+0xe8>
 8004006:	e000      	b.n	800400a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004008:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d063      	beq.n	80040de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004016:	4b65      	ldr	r3, [pc, #404]	; (80041ac <HAL_RCC_OscConfig+0x2ac>)
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f003 030c 	and.w	r3, r3, #12
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00b      	beq.n	800403a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004022:	4b62      	ldr	r3, [pc, #392]	; (80041ac <HAL_RCC_OscConfig+0x2ac>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800402a:	2b08      	cmp	r3, #8
 800402c:	d11c      	bne.n	8004068 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800402e:	4b5f      	ldr	r3, [pc, #380]	; (80041ac <HAL_RCC_OscConfig+0x2ac>)
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d116      	bne.n	8004068 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800403a:	4b5c      	ldr	r3, [pc, #368]	; (80041ac <HAL_RCC_OscConfig+0x2ac>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0302 	and.w	r3, r3, #2
 8004042:	2b00      	cmp	r3, #0
 8004044:	d005      	beq.n	8004052 <HAL_RCC_OscConfig+0x152>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	2b01      	cmp	r3, #1
 800404c:	d001      	beq.n	8004052 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e1c4      	b.n	80043dc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004052:	4b56      	ldr	r3, [pc, #344]	; (80041ac <HAL_RCC_OscConfig+0x2ac>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	00db      	lsls	r3, r3, #3
 8004060:	4952      	ldr	r1, [pc, #328]	; (80041ac <HAL_RCC_OscConfig+0x2ac>)
 8004062:	4313      	orrs	r3, r2
 8004064:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004066:	e03a      	b.n	80040de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d020      	beq.n	80040b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004070:	4b4f      	ldr	r3, [pc, #316]	; (80041b0 <HAL_RCC_OscConfig+0x2b0>)
 8004072:	2201      	movs	r2, #1
 8004074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004076:	f7fc ff99 	bl	8000fac <HAL_GetTick>
 800407a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800407c:	e008      	b.n	8004090 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800407e:	f7fc ff95 	bl	8000fac <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	2b02      	cmp	r3, #2
 800408a:	d901      	bls.n	8004090 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e1a5      	b.n	80043dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004090:	4b46      	ldr	r3, [pc, #280]	; (80041ac <HAL_RCC_OscConfig+0x2ac>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0302 	and.w	r3, r3, #2
 8004098:	2b00      	cmp	r3, #0
 800409a:	d0f0      	beq.n	800407e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800409c:	4b43      	ldr	r3, [pc, #268]	; (80041ac <HAL_RCC_OscConfig+0x2ac>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	00db      	lsls	r3, r3, #3
 80040aa:	4940      	ldr	r1, [pc, #256]	; (80041ac <HAL_RCC_OscConfig+0x2ac>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	600b      	str	r3, [r1, #0]
 80040b0:	e015      	b.n	80040de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040b2:	4b3f      	ldr	r3, [pc, #252]	; (80041b0 <HAL_RCC_OscConfig+0x2b0>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b8:	f7fc ff78 	bl	8000fac <HAL_GetTick>
 80040bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040be:	e008      	b.n	80040d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040c0:	f7fc ff74 	bl	8000fac <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e184      	b.n	80043dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040d2:	4b36      	ldr	r3, [pc, #216]	; (80041ac <HAL_RCC_OscConfig+0x2ac>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0302 	and.w	r3, r3, #2
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1f0      	bne.n	80040c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0308 	and.w	r3, r3, #8
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d030      	beq.n	800414c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	695b      	ldr	r3, [r3, #20]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d016      	beq.n	8004120 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040f2:	4b30      	ldr	r3, [pc, #192]	; (80041b4 <HAL_RCC_OscConfig+0x2b4>)
 80040f4:	2201      	movs	r2, #1
 80040f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040f8:	f7fc ff58 	bl	8000fac <HAL_GetTick>
 80040fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040fe:	e008      	b.n	8004112 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004100:	f7fc ff54 	bl	8000fac <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	2b02      	cmp	r3, #2
 800410c:	d901      	bls.n	8004112 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e164      	b.n	80043dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004112:	4b26      	ldr	r3, [pc, #152]	; (80041ac <HAL_RCC_OscConfig+0x2ac>)
 8004114:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004116:	f003 0302 	and.w	r3, r3, #2
 800411a:	2b00      	cmp	r3, #0
 800411c:	d0f0      	beq.n	8004100 <HAL_RCC_OscConfig+0x200>
 800411e:	e015      	b.n	800414c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004120:	4b24      	ldr	r3, [pc, #144]	; (80041b4 <HAL_RCC_OscConfig+0x2b4>)
 8004122:	2200      	movs	r2, #0
 8004124:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004126:	f7fc ff41 	bl	8000fac <HAL_GetTick>
 800412a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800412c:	e008      	b.n	8004140 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800412e:	f7fc ff3d 	bl	8000fac <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	2b02      	cmp	r3, #2
 800413a:	d901      	bls.n	8004140 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e14d      	b.n	80043dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004140:	4b1a      	ldr	r3, [pc, #104]	; (80041ac <HAL_RCC_OscConfig+0x2ac>)
 8004142:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004144:	f003 0302 	and.w	r3, r3, #2
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1f0      	bne.n	800412e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0304 	and.w	r3, r3, #4
 8004154:	2b00      	cmp	r3, #0
 8004156:	f000 80a0 	beq.w	800429a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800415a:	2300      	movs	r3, #0
 800415c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800415e:	4b13      	ldr	r3, [pc, #76]	; (80041ac <HAL_RCC_OscConfig+0x2ac>)
 8004160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d10f      	bne.n	800418a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800416a:	2300      	movs	r3, #0
 800416c:	60bb      	str	r3, [r7, #8]
 800416e:	4b0f      	ldr	r3, [pc, #60]	; (80041ac <HAL_RCC_OscConfig+0x2ac>)
 8004170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004172:	4a0e      	ldr	r2, [pc, #56]	; (80041ac <HAL_RCC_OscConfig+0x2ac>)
 8004174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004178:	6413      	str	r3, [r2, #64]	; 0x40
 800417a:	4b0c      	ldr	r3, [pc, #48]	; (80041ac <HAL_RCC_OscConfig+0x2ac>)
 800417c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004182:	60bb      	str	r3, [r7, #8]
 8004184:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004186:	2301      	movs	r3, #1
 8004188:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800418a:	4b0b      	ldr	r3, [pc, #44]	; (80041b8 <HAL_RCC_OscConfig+0x2b8>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004192:	2b00      	cmp	r3, #0
 8004194:	d121      	bne.n	80041da <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004196:	4b08      	ldr	r3, [pc, #32]	; (80041b8 <HAL_RCC_OscConfig+0x2b8>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a07      	ldr	r2, [pc, #28]	; (80041b8 <HAL_RCC_OscConfig+0x2b8>)
 800419c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041a2:	f7fc ff03 	bl	8000fac <HAL_GetTick>
 80041a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041a8:	e011      	b.n	80041ce <HAL_RCC_OscConfig+0x2ce>
 80041aa:	bf00      	nop
 80041ac:	40023800 	.word	0x40023800
 80041b0:	42470000 	.word	0x42470000
 80041b4:	42470e80 	.word	0x42470e80
 80041b8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041bc:	f7fc fef6 	bl	8000fac <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e106      	b.n	80043dc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ce:	4b85      	ldr	r3, [pc, #532]	; (80043e4 <HAL_RCC_OscConfig+0x4e4>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d0f0      	beq.n	80041bc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d106      	bne.n	80041f0 <HAL_RCC_OscConfig+0x2f0>
 80041e2:	4b81      	ldr	r3, [pc, #516]	; (80043e8 <HAL_RCC_OscConfig+0x4e8>)
 80041e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e6:	4a80      	ldr	r2, [pc, #512]	; (80043e8 <HAL_RCC_OscConfig+0x4e8>)
 80041e8:	f043 0301 	orr.w	r3, r3, #1
 80041ec:	6713      	str	r3, [r2, #112]	; 0x70
 80041ee:	e01c      	b.n	800422a <HAL_RCC_OscConfig+0x32a>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	2b05      	cmp	r3, #5
 80041f6:	d10c      	bne.n	8004212 <HAL_RCC_OscConfig+0x312>
 80041f8:	4b7b      	ldr	r3, [pc, #492]	; (80043e8 <HAL_RCC_OscConfig+0x4e8>)
 80041fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fc:	4a7a      	ldr	r2, [pc, #488]	; (80043e8 <HAL_RCC_OscConfig+0x4e8>)
 80041fe:	f043 0304 	orr.w	r3, r3, #4
 8004202:	6713      	str	r3, [r2, #112]	; 0x70
 8004204:	4b78      	ldr	r3, [pc, #480]	; (80043e8 <HAL_RCC_OscConfig+0x4e8>)
 8004206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004208:	4a77      	ldr	r2, [pc, #476]	; (80043e8 <HAL_RCC_OscConfig+0x4e8>)
 800420a:	f043 0301 	orr.w	r3, r3, #1
 800420e:	6713      	str	r3, [r2, #112]	; 0x70
 8004210:	e00b      	b.n	800422a <HAL_RCC_OscConfig+0x32a>
 8004212:	4b75      	ldr	r3, [pc, #468]	; (80043e8 <HAL_RCC_OscConfig+0x4e8>)
 8004214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004216:	4a74      	ldr	r2, [pc, #464]	; (80043e8 <HAL_RCC_OscConfig+0x4e8>)
 8004218:	f023 0301 	bic.w	r3, r3, #1
 800421c:	6713      	str	r3, [r2, #112]	; 0x70
 800421e:	4b72      	ldr	r3, [pc, #456]	; (80043e8 <HAL_RCC_OscConfig+0x4e8>)
 8004220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004222:	4a71      	ldr	r2, [pc, #452]	; (80043e8 <HAL_RCC_OscConfig+0x4e8>)
 8004224:	f023 0304 	bic.w	r3, r3, #4
 8004228:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d015      	beq.n	800425e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004232:	f7fc febb 	bl	8000fac <HAL_GetTick>
 8004236:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004238:	e00a      	b.n	8004250 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800423a:	f7fc feb7 	bl	8000fac <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	f241 3288 	movw	r2, #5000	; 0x1388
 8004248:	4293      	cmp	r3, r2
 800424a:	d901      	bls.n	8004250 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e0c5      	b.n	80043dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004250:	4b65      	ldr	r3, [pc, #404]	; (80043e8 <HAL_RCC_OscConfig+0x4e8>)
 8004252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004254:	f003 0302 	and.w	r3, r3, #2
 8004258:	2b00      	cmp	r3, #0
 800425a:	d0ee      	beq.n	800423a <HAL_RCC_OscConfig+0x33a>
 800425c:	e014      	b.n	8004288 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800425e:	f7fc fea5 	bl	8000fac <HAL_GetTick>
 8004262:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004264:	e00a      	b.n	800427c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004266:	f7fc fea1 	bl	8000fac <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	f241 3288 	movw	r2, #5000	; 0x1388
 8004274:	4293      	cmp	r3, r2
 8004276:	d901      	bls.n	800427c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e0af      	b.n	80043dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800427c:	4b5a      	ldr	r3, [pc, #360]	; (80043e8 <HAL_RCC_OscConfig+0x4e8>)
 800427e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004280:	f003 0302 	and.w	r3, r3, #2
 8004284:	2b00      	cmp	r3, #0
 8004286:	d1ee      	bne.n	8004266 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004288:	7dfb      	ldrb	r3, [r7, #23]
 800428a:	2b01      	cmp	r3, #1
 800428c:	d105      	bne.n	800429a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800428e:	4b56      	ldr	r3, [pc, #344]	; (80043e8 <HAL_RCC_OscConfig+0x4e8>)
 8004290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004292:	4a55      	ldr	r2, [pc, #340]	; (80043e8 <HAL_RCC_OscConfig+0x4e8>)
 8004294:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004298:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	699b      	ldr	r3, [r3, #24]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	f000 809b 	beq.w	80043da <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042a4:	4b50      	ldr	r3, [pc, #320]	; (80043e8 <HAL_RCC_OscConfig+0x4e8>)
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	f003 030c 	and.w	r3, r3, #12
 80042ac:	2b08      	cmp	r3, #8
 80042ae:	d05c      	beq.n	800436a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	699b      	ldr	r3, [r3, #24]
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d141      	bne.n	800433c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042b8:	4b4c      	ldr	r3, [pc, #304]	; (80043ec <HAL_RCC_OscConfig+0x4ec>)
 80042ba:	2200      	movs	r2, #0
 80042bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042be:	f7fc fe75 	bl	8000fac <HAL_GetTick>
 80042c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042c4:	e008      	b.n	80042d8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042c6:	f7fc fe71 	bl	8000fac <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d901      	bls.n	80042d8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e081      	b.n	80043dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042d8:	4b43      	ldr	r3, [pc, #268]	; (80043e8 <HAL_RCC_OscConfig+0x4e8>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d1f0      	bne.n	80042c6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	69da      	ldr	r2, [r3, #28]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a1b      	ldr	r3, [r3, #32]
 80042ec:	431a      	orrs	r2, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f2:	019b      	lsls	r3, r3, #6
 80042f4:	431a      	orrs	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042fa:	085b      	lsrs	r3, r3, #1
 80042fc:	3b01      	subs	r3, #1
 80042fe:	041b      	lsls	r3, r3, #16
 8004300:	431a      	orrs	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004306:	061b      	lsls	r3, r3, #24
 8004308:	4937      	ldr	r1, [pc, #220]	; (80043e8 <HAL_RCC_OscConfig+0x4e8>)
 800430a:	4313      	orrs	r3, r2
 800430c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800430e:	4b37      	ldr	r3, [pc, #220]	; (80043ec <HAL_RCC_OscConfig+0x4ec>)
 8004310:	2201      	movs	r2, #1
 8004312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004314:	f7fc fe4a 	bl	8000fac <HAL_GetTick>
 8004318:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800431a:	e008      	b.n	800432e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800431c:	f7fc fe46 	bl	8000fac <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b02      	cmp	r3, #2
 8004328:	d901      	bls.n	800432e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e056      	b.n	80043dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800432e:	4b2e      	ldr	r3, [pc, #184]	; (80043e8 <HAL_RCC_OscConfig+0x4e8>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d0f0      	beq.n	800431c <HAL_RCC_OscConfig+0x41c>
 800433a:	e04e      	b.n	80043da <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800433c:	4b2b      	ldr	r3, [pc, #172]	; (80043ec <HAL_RCC_OscConfig+0x4ec>)
 800433e:	2200      	movs	r2, #0
 8004340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004342:	f7fc fe33 	bl	8000fac <HAL_GetTick>
 8004346:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004348:	e008      	b.n	800435c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800434a:	f7fc fe2f 	bl	8000fac <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	2b02      	cmp	r3, #2
 8004356:	d901      	bls.n	800435c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e03f      	b.n	80043dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800435c:	4b22      	ldr	r3, [pc, #136]	; (80043e8 <HAL_RCC_OscConfig+0x4e8>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d1f0      	bne.n	800434a <HAL_RCC_OscConfig+0x44a>
 8004368:	e037      	b.n	80043da <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d101      	bne.n	8004376 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e032      	b.n	80043dc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004376:	4b1c      	ldr	r3, [pc, #112]	; (80043e8 <HAL_RCC_OscConfig+0x4e8>)
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d028      	beq.n	80043d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800438e:	429a      	cmp	r2, r3
 8004390:	d121      	bne.n	80043d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800439c:	429a      	cmp	r2, r3
 800439e:	d11a      	bne.n	80043d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043a0:	68fa      	ldr	r2, [r7, #12]
 80043a2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043a6:	4013      	ands	r3, r2
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043ac:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d111      	bne.n	80043d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043bc:	085b      	lsrs	r3, r3, #1
 80043be:	3b01      	subs	r3, #1
 80043c0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d107      	bne.n	80043d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d001      	beq.n	80043da <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e000      	b.n	80043dc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80043da:	2300      	movs	r3, #0
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3718      	adds	r7, #24
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	40007000 	.word	0x40007000
 80043e8:	40023800 	.word	0x40023800
 80043ec:	42470060 	.word	0x42470060

080043f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d101      	bne.n	8004404 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e0cc      	b.n	800459e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004404:	4b68      	ldr	r3, [pc, #416]	; (80045a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 0307 	and.w	r3, r3, #7
 800440c:	683a      	ldr	r2, [r7, #0]
 800440e:	429a      	cmp	r2, r3
 8004410:	d90c      	bls.n	800442c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004412:	4b65      	ldr	r3, [pc, #404]	; (80045a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004414:	683a      	ldr	r2, [r7, #0]
 8004416:	b2d2      	uxtb	r2, r2
 8004418:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800441a:	4b63      	ldr	r3, [pc, #396]	; (80045a8 <HAL_RCC_ClockConfig+0x1b8>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0307 	and.w	r3, r3, #7
 8004422:	683a      	ldr	r2, [r7, #0]
 8004424:	429a      	cmp	r2, r3
 8004426:	d001      	beq.n	800442c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e0b8      	b.n	800459e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0302 	and.w	r3, r3, #2
 8004434:	2b00      	cmp	r3, #0
 8004436:	d020      	beq.n	800447a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0304 	and.w	r3, r3, #4
 8004440:	2b00      	cmp	r3, #0
 8004442:	d005      	beq.n	8004450 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004444:	4b59      	ldr	r3, [pc, #356]	; (80045ac <HAL_RCC_ClockConfig+0x1bc>)
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	4a58      	ldr	r2, [pc, #352]	; (80045ac <HAL_RCC_ClockConfig+0x1bc>)
 800444a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800444e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0308 	and.w	r3, r3, #8
 8004458:	2b00      	cmp	r3, #0
 800445a:	d005      	beq.n	8004468 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800445c:	4b53      	ldr	r3, [pc, #332]	; (80045ac <HAL_RCC_ClockConfig+0x1bc>)
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	4a52      	ldr	r2, [pc, #328]	; (80045ac <HAL_RCC_ClockConfig+0x1bc>)
 8004462:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004466:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004468:	4b50      	ldr	r3, [pc, #320]	; (80045ac <HAL_RCC_ClockConfig+0x1bc>)
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	494d      	ldr	r1, [pc, #308]	; (80045ac <HAL_RCC_ClockConfig+0x1bc>)
 8004476:	4313      	orrs	r3, r2
 8004478:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0301 	and.w	r3, r3, #1
 8004482:	2b00      	cmp	r3, #0
 8004484:	d044      	beq.n	8004510 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	2b01      	cmp	r3, #1
 800448c:	d107      	bne.n	800449e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800448e:	4b47      	ldr	r3, [pc, #284]	; (80045ac <HAL_RCC_ClockConfig+0x1bc>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d119      	bne.n	80044ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e07f      	b.n	800459e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d003      	beq.n	80044ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044aa:	2b03      	cmp	r3, #3
 80044ac:	d107      	bne.n	80044be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044ae:	4b3f      	ldr	r3, [pc, #252]	; (80045ac <HAL_RCC_ClockConfig+0x1bc>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d109      	bne.n	80044ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e06f      	b.n	800459e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044be:	4b3b      	ldr	r3, [pc, #236]	; (80045ac <HAL_RCC_ClockConfig+0x1bc>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d101      	bne.n	80044ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e067      	b.n	800459e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044ce:	4b37      	ldr	r3, [pc, #220]	; (80045ac <HAL_RCC_ClockConfig+0x1bc>)
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f023 0203 	bic.w	r2, r3, #3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	4934      	ldr	r1, [pc, #208]	; (80045ac <HAL_RCC_ClockConfig+0x1bc>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044e0:	f7fc fd64 	bl	8000fac <HAL_GetTick>
 80044e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044e6:	e00a      	b.n	80044fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044e8:	f7fc fd60 	bl	8000fac <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e04f      	b.n	800459e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044fe:	4b2b      	ldr	r3, [pc, #172]	; (80045ac <HAL_RCC_ClockConfig+0x1bc>)
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f003 020c 	and.w	r2, r3, #12
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	429a      	cmp	r2, r3
 800450e:	d1eb      	bne.n	80044e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004510:	4b25      	ldr	r3, [pc, #148]	; (80045a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0307 	and.w	r3, r3, #7
 8004518:	683a      	ldr	r2, [r7, #0]
 800451a:	429a      	cmp	r2, r3
 800451c:	d20c      	bcs.n	8004538 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800451e:	4b22      	ldr	r3, [pc, #136]	; (80045a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004520:	683a      	ldr	r2, [r7, #0]
 8004522:	b2d2      	uxtb	r2, r2
 8004524:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004526:	4b20      	ldr	r3, [pc, #128]	; (80045a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0307 	and.w	r3, r3, #7
 800452e:	683a      	ldr	r2, [r7, #0]
 8004530:	429a      	cmp	r2, r3
 8004532:	d001      	beq.n	8004538 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e032      	b.n	800459e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0304 	and.w	r3, r3, #4
 8004540:	2b00      	cmp	r3, #0
 8004542:	d008      	beq.n	8004556 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004544:	4b19      	ldr	r3, [pc, #100]	; (80045ac <HAL_RCC_ClockConfig+0x1bc>)
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	4916      	ldr	r1, [pc, #88]	; (80045ac <HAL_RCC_ClockConfig+0x1bc>)
 8004552:	4313      	orrs	r3, r2
 8004554:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0308 	and.w	r3, r3, #8
 800455e:	2b00      	cmp	r3, #0
 8004560:	d009      	beq.n	8004576 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004562:	4b12      	ldr	r3, [pc, #72]	; (80045ac <HAL_RCC_ClockConfig+0x1bc>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	00db      	lsls	r3, r3, #3
 8004570:	490e      	ldr	r1, [pc, #56]	; (80045ac <HAL_RCC_ClockConfig+0x1bc>)
 8004572:	4313      	orrs	r3, r2
 8004574:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004576:	f000 f821 	bl	80045bc <HAL_RCC_GetSysClockFreq>
 800457a:	4602      	mov	r2, r0
 800457c:	4b0b      	ldr	r3, [pc, #44]	; (80045ac <HAL_RCC_ClockConfig+0x1bc>)
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	091b      	lsrs	r3, r3, #4
 8004582:	f003 030f 	and.w	r3, r3, #15
 8004586:	490a      	ldr	r1, [pc, #40]	; (80045b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004588:	5ccb      	ldrb	r3, [r1, r3]
 800458a:	fa22 f303 	lsr.w	r3, r2, r3
 800458e:	4a09      	ldr	r2, [pc, #36]	; (80045b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004590:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004592:	4b09      	ldr	r3, [pc, #36]	; (80045b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4618      	mov	r0, r3
 8004598:	f7fc fb70 	bl	8000c7c <HAL_InitTick>

  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3710      	adds	r7, #16
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	40023c00 	.word	0x40023c00
 80045ac:	40023800 	.word	0x40023800
 80045b0:	08007f10 	.word	0x08007f10
 80045b4:	20000000 	.word	0x20000000
 80045b8:	20000004 	.word	0x20000004

080045bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045bc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80045c0:	b084      	sub	sp, #16
 80045c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80045c4:	2300      	movs	r3, #0
 80045c6:	607b      	str	r3, [r7, #4]
 80045c8:	2300      	movs	r3, #0
 80045ca:	60fb      	str	r3, [r7, #12]
 80045cc:	2300      	movs	r3, #0
 80045ce:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80045d0:	2300      	movs	r3, #0
 80045d2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045d4:	4b67      	ldr	r3, [pc, #412]	; (8004774 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f003 030c 	and.w	r3, r3, #12
 80045dc:	2b08      	cmp	r3, #8
 80045de:	d00d      	beq.n	80045fc <HAL_RCC_GetSysClockFreq+0x40>
 80045e0:	2b08      	cmp	r3, #8
 80045e2:	f200 80bd 	bhi.w	8004760 <HAL_RCC_GetSysClockFreq+0x1a4>
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d002      	beq.n	80045f0 <HAL_RCC_GetSysClockFreq+0x34>
 80045ea:	2b04      	cmp	r3, #4
 80045ec:	d003      	beq.n	80045f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80045ee:	e0b7      	b.n	8004760 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045f0:	4b61      	ldr	r3, [pc, #388]	; (8004778 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80045f2:	60bb      	str	r3, [r7, #8]
       break;
 80045f4:	e0b7      	b.n	8004766 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045f6:	4b61      	ldr	r3, [pc, #388]	; (800477c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80045f8:	60bb      	str	r3, [r7, #8]
      break;
 80045fa:	e0b4      	b.n	8004766 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045fc:	4b5d      	ldr	r3, [pc, #372]	; (8004774 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004604:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004606:	4b5b      	ldr	r3, [pc, #364]	; (8004774 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d04d      	beq.n	80046ae <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004612:	4b58      	ldr	r3, [pc, #352]	; (8004774 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	099b      	lsrs	r3, r3, #6
 8004618:	461a      	mov	r2, r3
 800461a:	f04f 0300 	mov.w	r3, #0
 800461e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004622:	f04f 0100 	mov.w	r1, #0
 8004626:	ea02 0800 	and.w	r8, r2, r0
 800462a:	ea03 0901 	and.w	r9, r3, r1
 800462e:	4640      	mov	r0, r8
 8004630:	4649      	mov	r1, r9
 8004632:	f04f 0200 	mov.w	r2, #0
 8004636:	f04f 0300 	mov.w	r3, #0
 800463a:	014b      	lsls	r3, r1, #5
 800463c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004640:	0142      	lsls	r2, r0, #5
 8004642:	4610      	mov	r0, r2
 8004644:	4619      	mov	r1, r3
 8004646:	ebb0 0008 	subs.w	r0, r0, r8
 800464a:	eb61 0109 	sbc.w	r1, r1, r9
 800464e:	f04f 0200 	mov.w	r2, #0
 8004652:	f04f 0300 	mov.w	r3, #0
 8004656:	018b      	lsls	r3, r1, #6
 8004658:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800465c:	0182      	lsls	r2, r0, #6
 800465e:	1a12      	subs	r2, r2, r0
 8004660:	eb63 0301 	sbc.w	r3, r3, r1
 8004664:	f04f 0000 	mov.w	r0, #0
 8004668:	f04f 0100 	mov.w	r1, #0
 800466c:	00d9      	lsls	r1, r3, #3
 800466e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004672:	00d0      	lsls	r0, r2, #3
 8004674:	4602      	mov	r2, r0
 8004676:	460b      	mov	r3, r1
 8004678:	eb12 0208 	adds.w	r2, r2, r8
 800467c:	eb43 0309 	adc.w	r3, r3, r9
 8004680:	f04f 0000 	mov.w	r0, #0
 8004684:	f04f 0100 	mov.w	r1, #0
 8004688:	0259      	lsls	r1, r3, #9
 800468a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800468e:	0250      	lsls	r0, r2, #9
 8004690:	4602      	mov	r2, r0
 8004692:	460b      	mov	r3, r1
 8004694:	4610      	mov	r0, r2
 8004696:	4619      	mov	r1, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	461a      	mov	r2, r3
 800469c:	f04f 0300 	mov.w	r3, #0
 80046a0:	f7fb fd96 	bl	80001d0 <__aeabi_uldivmod>
 80046a4:	4602      	mov	r2, r0
 80046a6:	460b      	mov	r3, r1
 80046a8:	4613      	mov	r3, r2
 80046aa:	60fb      	str	r3, [r7, #12]
 80046ac:	e04a      	b.n	8004744 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046ae:	4b31      	ldr	r3, [pc, #196]	; (8004774 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	099b      	lsrs	r3, r3, #6
 80046b4:	461a      	mov	r2, r3
 80046b6:	f04f 0300 	mov.w	r3, #0
 80046ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80046be:	f04f 0100 	mov.w	r1, #0
 80046c2:	ea02 0400 	and.w	r4, r2, r0
 80046c6:	ea03 0501 	and.w	r5, r3, r1
 80046ca:	4620      	mov	r0, r4
 80046cc:	4629      	mov	r1, r5
 80046ce:	f04f 0200 	mov.w	r2, #0
 80046d2:	f04f 0300 	mov.w	r3, #0
 80046d6:	014b      	lsls	r3, r1, #5
 80046d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80046dc:	0142      	lsls	r2, r0, #5
 80046de:	4610      	mov	r0, r2
 80046e0:	4619      	mov	r1, r3
 80046e2:	1b00      	subs	r0, r0, r4
 80046e4:	eb61 0105 	sbc.w	r1, r1, r5
 80046e8:	f04f 0200 	mov.w	r2, #0
 80046ec:	f04f 0300 	mov.w	r3, #0
 80046f0:	018b      	lsls	r3, r1, #6
 80046f2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80046f6:	0182      	lsls	r2, r0, #6
 80046f8:	1a12      	subs	r2, r2, r0
 80046fa:	eb63 0301 	sbc.w	r3, r3, r1
 80046fe:	f04f 0000 	mov.w	r0, #0
 8004702:	f04f 0100 	mov.w	r1, #0
 8004706:	00d9      	lsls	r1, r3, #3
 8004708:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800470c:	00d0      	lsls	r0, r2, #3
 800470e:	4602      	mov	r2, r0
 8004710:	460b      	mov	r3, r1
 8004712:	1912      	adds	r2, r2, r4
 8004714:	eb45 0303 	adc.w	r3, r5, r3
 8004718:	f04f 0000 	mov.w	r0, #0
 800471c:	f04f 0100 	mov.w	r1, #0
 8004720:	0299      	lsls	r1, r3, #10
 8004722:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004726:	0290      	lsls	r0, r2, #10
 8004728:	4602      	mov	r2, r0
 800472a:	460b      	mov	r3, r1
 800472c:	4610      	mov	r0, r2
 800472e:	4619      	mov	r1, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	461a      	mov	r2, r3
 8004734:	f04f 0300 	mov.w	r3, #0
 8004738:	f7fb fd4a 	bl	80001d0 <__aeabi_uldivmod>
 800473c:	4602      	mov	r2, r0
 800473e:	460b      	mov	r3, r1
 8004740:	4613      	mov	r3, r2
 8004742:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004744:	4b0b      	ldr	r3, [pc, #44]	; (8004774 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	0c1b      	lsrs	r3, r3, #16
 800474a:	f003 0303 	and.w	r3, r3, #3
 800474e:	3301      	adds	r3, #1
 8004750:	005b      	lsls	r3, r3, #1
 8004752:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	fbb2 f3f3 	udiv	r3, r2, r3
 800475c:	60bb      	str	r3, [r7, #8]
      break;
 800475e:	e002      	b.n	8004766 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004760:	4b05      	ldr	r3, [pc, #20]	; (8004778 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004762:	60bb      	str	r3, [r7, #8]
      break;
 8004764:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004766:	68bb      	ldr	r3, [r7, #8]
}
 8004768:	4618      	mov	r0, r3
 800476a:	3710      	adds	r7, #16
 800476c:	46bd      	mov	sp, r7
 800476e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004772:	bf00      	nop
 8004774:	40023800 	.word	0x40023800
 8004778:	00f42400 	.word	0x00f42400
 800477c:	007a1200 	.word	0x007a1200

08004780 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004780:	b480      	push	{r7}
 8004782:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004784:	4b03      	ldr	r3, [pc, #12]	; (8004794 <HAL_RCC_GetHCLKFreq+0x14>)
 8004786:	681b      	ldr	r3, [r3, #0]
}
 8004788:	4618      	mov	r0, r3
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	20000000 	.word	0x20000000

08004798 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800479c:	f7ff fff0 	bl	8004780 <HAL_RCC_GetHCLKFreq>
 80047a0:	4602      	mov	r2, r0
 80047a2:	4b05      	ldr	r3, [pc, #20]	; (80047b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	0a9b      	lsrs	r3, r3, #10
 80047a8:	f003 0307 	and.w	r3, r3, #7
 80047ac:	4903      	ldr	r1, [pc, #12]	; (80047bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80047ae:	5ccb      	ldrb	r3, [r1, r3]
 80047b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	40023800 	.word	0x40023800
 80047bc:	08007f20 	.word	0x08007f20

080047c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80047c4:	f7ff ffdc 	bl	8004780 <HAL_RCC_GetHCLKFreq>
 80047c8:	4602      	mov	r2, r0
 80047ca:	4b05      	ldr	r3, [pc, #20]	; (80047e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	0b5b      	lsrs	r3, r3, #13
 80047d0:	f003 0307 	and.w	r3, r3, #7
 80047d4:	4903      	ldr	r1, [pc, #12]	; (80047e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047d6:	5ccb      	ldrb	r3, [r1, r3]
 80047d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047dc:	4618      	mov	r0, r3
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	40023800 	.word	0x40023800
 80047e4:	08007f20 	.word	0x08007f20

080047e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	220f      	movs	r2, #15
 80047f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80047f8:	4b12      	ldr	r3, [pc, #72]	; (8004844 <HAL_RCC_GetClockConfig+0x5c>)
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f003 0203 	and.w	r2, r3, #3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004804:	4b0f      	ldr	r3, [pc, #60]	; (8004844 <HAL_RCC_GetClockConfig+0x5c>)
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004810:	4b0c      	ldr	r3, [pc, #48]	; (8004844 <HAL_RCC_GetClockConfig+0x5c>)
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800481c:	4b09      	ldr	r3, [pc, #36]	; (8004844 <HAL_RCC_GetClockConfig+0x5c>)
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	08db      	lsrs	r3, r3, #3
 8004822:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800482a:	4b07      	ldr	r3, [pc, #28]	; (8004848 <HAL_RCC_GetClockConfig+0x60>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0207 	and.w	r2, r3, #7
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	601a      	str	r2, [r3, #0]
}
 8004836:	bf00      	nop
 8004838:	370c      	adds	r7, #12
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	40023800 	.word	0x40023800
 8004848:	40023c00 	.word	0x40023c00

0800484c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d101      	bne.n	800485e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e041      	b.n	80048e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d106      	bne.n	8004878 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 f839 	bl	80048ea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2202      	movs	r2, #2
 800487c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	3304      	adds	r3, #4
 8004888:	4619      	mov	r1, r3
 800488a:	4610      	mov	r0, r2
 800488c:	f000 f9d8 	bl	8004c40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048e0:	2300      	movs	r3, #0
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3708      	adds	r7, #8
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}

080048ea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80048ea:	b480      	push	{r7}
 80048ec:	b083      	sub	sp, #12
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80048f2:	bf00      	nop
 80048f4:	370c      	adds	r7, #12
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr
	...

08004900 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800490e:	b2db      	uxtb	r3, r3
 8004910:	2b01      	cmp	r3, #1
 8004912:	d001      	beq.n	8004918 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e04e      	b.n	80049b6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2202      	movs	r2, #2
 800491c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68da      	ldr	r2, [r3, #12]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f042 0201 	orr.w	r2, r2, #1
 800492e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a23      	ldr	r2, [pc, #140]	; (80049c4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d022      	beq.n	8004980 <HAL_TIM_Base_Start_IT+0x80>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004942:	d01d      	beq.n	8004980 <HAL_TIM_Base_Start_IT+0x80>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a1f      	ldr	r2, [pc, #124]	; (80049c8 <HAL_TIM_Base_Start_IT+0xc8>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d018      	beq.n	8004980 <HAL_TIM_Base_Start_IT+0x80>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a1e      	ldr	r2, [pc, #120]	; (80049cc <HAL_TIM_Base_Start_IT+0xcc>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d013      	beq.n	8004980 <HAL_TIM_Base_Start_IT+0x80>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a1c      	ldr	r2, [pc, #112]	; (80049d0 <HAL_TIM_Base_Start_IT+0xd0>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d00e      	beq.n	8004980 <HAL_TIM_Base_Start_IT+0x80>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a1b      	ldr	r2, [pc, #108]	; (80049d4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d009      	beq.n	8004980 <HAL_TIM_Base_Start_IT+0x80>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a19      	ldr	r2, [pc, #100]	; (80049d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d004      	beq.n	8004980 <HAL_TIM_Base_Start_IT+0x80>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a18      	ldr	r2, [pc, #96]	; (80049dc <HAL_TIM_Base_Start_IT+0xdc>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d111      	bne.n	80049a4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f003 0307 	and.w	r3, r3, #7
 800498a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2b06      	cmp	r3, #6
 8004990:	d010      	beq.n	80049b4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f042 0201 	orr.w	r2, r2, #1
 80049a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049a2:	e007      	b.n	80049b4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f042 0201 	orr.w	r2, r2, #1
 80049b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3714      	adds	r7, #20
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	40010000 	.word	0x40010000
 80049c8:	40000400 	.word	0x40000400
 80049cc:	40000800 	.word	0x40000800
 80049d0:	40000c00 	.word	0x40000c00
 80049d4:	40010400 	.word	0x40010400
 80049d8:	40014000 	.word	0x40014000
 80049dc:	40001800 	.word	0x40001800

080049e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	f003 0302 	and.w	r3, r3, #2
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d122      	bne.n	8004a3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	f003 0302 	and.w	r3, r3, #2
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d11b      	bne.n	8004a3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f06f 0202 	mvn.w	r2, #2
 8004a0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2201      	movs	r2, #1
 8004a12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	699b      	ldr	r3, [r3, #24]
 8004a1a:	f003 0303 	and.w	r3, r3, #3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d003      	beq.n	8004a2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 f8ee 	bl	8004c04 <HAL_TIM_IC_CaptureCallback>
 8004a28:	e005      	b.n	8004a36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 f8e0 	bl	8004bf0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f000 f8f1 	bl	8004c18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	f003 0304 	and.w	r3, r3, #4
 8004a46:	2b04      	cmp	r3, #4
 8004a48:	d122      	bne.n	8004a90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	f003 0304 	and.w	r3, r3, #4
 8004a54:	2b04      	cmp	r3, #4
 8004a56:	d11b      	bne.n	8004a90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f06f 0204 	mvn.w	r2, #4
 8004a60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2202      	movs	r2, #2
 8004a66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d003      	beq.n	8004a7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 f8c4 	bl	8004c04 <HAL_TIM_IC_CaptureCallback>
 8004a7c:	e005      	b.n	8004a8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 f8b6 	bl	8004bf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f000 f8c7 	bl	8004c18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	f003 0308 	and.w	r3, r3, #8
 8004a9a:	2b08      	cmp	r3, #8
 8004a9c:	d122      	bne.n	8004ae4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	f003 0308 	and.w	r3, r3, #8
 8004aa8:	2b08      	cmp	r3, #8
 8004aaa:	d11b      	bne.n	8004ae4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f06f 0208 	mvn.w	r2, #8
 8004ab4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2204      	movs	r2, #4
 8004aba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	69db      	ldr	r3, [r3, #28]
 8004ac2:	f003 0303 	and.w	r3, r3, #3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d003      	beq.n	8004ad2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 f89a 	bl	8004c04 <HAL_TIM_IC_CaptureCallback>
 8004ad0:	e005      	b.n	8004ade <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 f88c 	bl	8004bf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f000 f89d 	bl	8004c18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	f003 0310 	and.w	r3, r3, #16
 8004aee:	2b10      	cmp	r3, #16
 8004af0:	d122      	bne.n	8004b38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	f003 0310 	and.w	r3, r3, #16
 8004afc:	2b10      	cmp	r3, #16
 8004afe:	d11b      	bne.n	8004b38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f06f 0210 	mvn.w	r2, #16
 8004b08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2208      	movs	r2, #8
 8004b0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	69db      	ldr	r3, [r3, #28]
 8004b16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d003      	beq.n	8004b26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 f870 	bl	8004c04 <HAL_TIM_IC_CaptureCallback>
 8004b24:	e005      	b.n	8004b32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 f862 	bl	8004bf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f000 f873 	bl	8004c18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	f003 0301 	and.w	r3, r3, #1
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d10e      	bne.n	8004b64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	f003 0301 	and.w	r3, r3, #1
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d107      	bne.n	8004b64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f06f 0201 	mvn.w	r2, #1
 8004b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f7fc f848 	bl	8000bf4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b6e:	2b80      	cmp	r3, #128	; 0x80
 8004b70:	d10e      	bne.n	8004b90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b7c:	2b80      	cmp	r3, #128	; 0x80
 8004b7e:	d107      	bne.n	8004b90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 f902 	bl	8004d94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b9a:	2b40      	cmp	r3, #64	; 0x40
 8004b9c:	d10e      	bne.n	8004bbc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ba8:	2b40      	cmp	r3, #64	; 0x40
 8004baa:	d107      	bne.n	8004bbc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 f838 	bl	8004c2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	f003 0320 	and.w	r3, r3, #32
 8004bc6:	2b20      	cmp	r3, #32
 8004bc8:	d10e      	bne.n	8004be8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	f003 0320 	and.w	r3, r3, #32
 8004bd4:	2b20      	cmp	r3, #32
 8004bd6:	d107      	bne.n	8004be8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f06f 0220 	mvn.w	r2, #32
 8004be0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 f8cc 	bl	8004d80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004be8:	bf00      	nop
 8004bea:	3708      	adds	r7, #8
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004bf8:	bf00      	nop
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c0c:	bf00      	nop
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c20:	bf00      	nop
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c34:	bf00      	nop
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b085      	sub	sp, #20
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a40      	ldr	r2, [pc, #256]	; (8004d54 <TIM_Base_SetConfig+0x114>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d013      	beq.n	8004c80 <TIM_Base_SetConfig+0x40>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c5e:	d00f      	beq.n	8004c80 <TIM_Base_SetConfig+0x40>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4a3d      	ldr	r2, [pc, #244]	; (8004d58 <TIM_Base_SetConfig+0x118>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d00b      	beq.n	8004c80 <TIM_Base_SetConfig+0x40>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a3c      	ldr	r2, [pc, #240]	; (8004d5c <TIM_Base_SetConfig+0x11c>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d007      	beq.n	8004c80 <TIM_Base_SetConfig+0x40>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a3b      	ldr	r2, [pc, #236]	; (8004d60 <TIM_Base_SetConfig+0x120>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d003      	beq.n	8004c80 <TIM_Base_SetConfig+0x40>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a3a      	ldr	r2, [pc, #232]	; (8004d64 <TIM_Base_SetConfig+0x124>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d108      	bne.n	8004c92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	68fa      	ldr	r2, [r7, #12]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a2f      	ldr	r2, [pc, #188]	; (8004d54 <TIM_Base_SetConfig+0x114>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d02b      	beq.n	8004cf2 <TIM_Base_SetConfig+0xb2>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ca0:	d027      	beq.n	8004cf2 <TIM_Base_SetConfig+0xb2>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a2c      	ldr	r2, [pc, #176]	; (8004d58 <TIM_Base_SetConfig+0x118>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d023      	beq.n	8004cf2 <TIM_Base_SetConfig+0xb2>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a2b      	ldr	r2, [pc, #172]	; (8004d5c <TIM_Base_SetConfig+0x11c>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d01f      	beq.n	8004cf2 <TIM_Base_SetConfig+0xb2>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a2a      	ldr	r2, [pc, #168]	; (8004d60 <TIM_Base_SetConfig+0x120>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d01b      	beq.n	8004cf2 <TIM_Base_SetConfig+0xb2>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a29      	ldr	r2, [pc, #164]	; (8004d64 <TIM_Base_SetConfig+0x124>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d017      	beq.n	8004cf2 <TIM_Base_SetConfig+0xb2>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a28      	ldr	r2, [pc, #160]	; (8004d68 <TIM_Base_SetConfig+0x128>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d013      	beq.n	8004cf2 <TIM_Base_SetConfig+0xb2>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a27      	ldr	r2, [pc, #156]	; (8004d6c <TIM_Base_SetConfig+0x12c>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d00f      	beq.n	8004cf2 <TIM_Base_SetConfig+0xb2>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a26      	ldr	r2, [pc, #152]	; (8004d70 <TIM_Base_SetConfig+0x130>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d00b      	beq.n	8004cf2 <TIM_Base_SetConfig+0xb2>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a25      	ldr	r2, [pc, #148]	; (8004d74 <TIM_Base_SetConfig+0x134>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d007      	beq.n	8004cf2 <TIM_Base_SetConfig+0xb2>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a24      	ldr	r2, [pc, #144]	; (8004d78 <TIM_Base_SetConfig+0x138>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d003      	beq.n	8004cf2 <TIM_Base_SetConfig+0xb2>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a23      	ldr	r2, [pc, #140]	; (8004d7c <TIM_Base_SetConfig+0x13c>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d108      	bne.n	8004d04 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	689a      	ldr	r2, [r3, #8]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a0a      	ldr	r2, [pc, #40]	; (8004d54 <TIM_Base_SetConfig+0x114>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d003      	beq.n	8004d38 <TIM_Base_SetConfig+0xf8>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a0c      	ldr	r2, [pc, #48]	; (8004d64 <TIM_Base_SetConfig+0x124>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d103      	bne.n	8004d40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	691a      	ldr	r2, [r3, #16]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	615a      	str	r2, [r3, #20]
}
 8004d46:	bf00      	nop
 8004d48:	3714      	adds	r7, #20
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	40010000 	.word	0x40010000
 8004d58:	40000400 	.word	0x40000400
 8004d5c:	40000800 	.word	0x40000800
 8004d60:	40000c00 	.word	0x40000c00
 8004d64:	40010400 	.word	0x40010400
 8004d68:	40014000 	.word	0x40014000
 8004d6c:	40014400 	.word	0x40014400
 8004d70:	40014800 	.word	0x40014800
 8004d74:	40001800 	.word	0x40001800
 8004d78:	40001c00 	.word	0x40001c00
 8004d7c:	40002000 	.word	0x40002000

08004d80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d88:	bf00      	nop
 8004d8a:	370c      	adds	r7, #12
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d9c:	bf00      	nop
 8004d9e:	370c      	adds	r7, #12
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d101      	bne.n	8004dba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e03f      	b.n	8004e3a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d106      	bne.n	8004dd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f7fc f83c 	bl	8000e4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2224      	movs	r2, #36	; 0x24
 8004dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68da      	ldr	r2, [r3, #12]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004dea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 fddb 	bl	80059a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	691a      	ldr	r2, [r3, #16]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	695a      	ldr	r2, [r3, #20]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68da      	ldr	r2, [r3, #12]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2220      	movs	r2, #32
 8004e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2220      	movs	r2, #32
 8004e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3708      	adds	r7, #8
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}

08004e42 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e42:	b580      	push	{r7, lr}
 8004e44:	b08a      	sub	sp, #40	; 0x28
 8004e46:	af02      	add	r7, sp, #8
 8004e48:	60f8      	str	r0, [r7, #12]
 8004e4a:	60b9      	str	r1, [r7, #8]
 8004e4c:	603b      	str	r3, [r7, #0]
 8004e4e:	4613      	mov	r3, r2
 8004e50:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004e52:	2300      	movs	r3, #0
 8004e54:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	2b20      	cmp	r3, #32
 8004e60:	d17c      	bne.n	8004f5c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d002      	beq.n	8004e6e <HAL_UART_Transmit+0x2c>
 8004e68:	88fb      	ldrh	r3, [r7, #6]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d101      	bne.n	8004e72 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e075      	b.n	8004f5e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d101      	bne.n	8004e80 <HAL_UART_Transmit+0x3e>
 8004e7c:	2302      	movs	r3, #2
 8004e7e:	e06e      	b.n	8004f5e <HAL_UART_Transmit+0x11c>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2221      	movs	r2, #33	; 0x21
 8004e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e96:	f7fc f889 	bl	8000fac <HAL_GetTick>
 8004e9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	88fa      	ldrh	r2, [r7, #6]
 8004ea0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	88fa      	ldrh	r2, [r7, #6]
 8004ea6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eb0:	d108      	bne.n	8004ec4 <HAL_UART_Transmit+0x82>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d104      	bne.n	8004ec4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	61bb      	str	r3, [r7, #24]
 8004ec2:	e003      	b.n	8004ecc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004ed4:	e02a      	b.n	8004f2c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	9300      	str	r3, [sp, #0]
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	2200      	movs	r2, #0
 8004ede:	2180      	movs	r1, #128	; 0x80
 8004ee0:	68f8      	ldr	r0, [r7, #12]
 8004ee2:	f000 fb1f 	bl	8005524 <UART_WaitOnFlagUntilTimeout>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d001      	beq.n	8004ef0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e036      	b.n	8004f5e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d10b      	bne.n	8004f0e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	881b      	ldrh	r3, [r3, #0]
 8004efa:	461a      	mov	r2, r3
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f04:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	3302      	adds	r3, #2
 8004f0a:	61bb      	str	r3, [r7, #24]
 8004f0c:	e007      	b.n	8004f1e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	781a      	ldrb	r2, [r3, #0]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	3b01      	subs	r3, #1
 8004f26:	b29a      	uxth	r2, r3
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1cf      	bne.n	8004ed6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	9300      	str	r3, [sp, #0]
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	2140      	movs	r1, #64	; 0x40
 8004f40:	68f8      	ldr	r0, [r7, #12]
 8004f42:	f000 faef 	bl	8005524 <UART_WaitOnFlagUntilTimeout>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d001      	beq.n	8004f50 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	e006      	b.n	8004f5e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2220      	movs	r2, #32
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	e000      	b.n	8004f5e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004f5c:	2302      	movs	r3, #2
  }
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3720      	adds	r7, #32
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}

08004f66 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f66:	b580      	push	{r7, lr}
 8004f68:	b084      	sub	sp, #16
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	60f8      	str	r0, [r7, #12]
 8004f6e:	60b9      	str	r1, [r7, #8]
 8004f70:	4613      	mov	r3, r2
 8004f72:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	2b20      	cmp	r3, #32
 8004f7e:	d11d      	bne.n	8004fbc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d002      	beq.n	8004f8c <HAL_UART_Receive_IT+0x26>
 8004f86:	88fb      	ldrh	r3, [r7, #6]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d101      	bne.n	8004f90 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e016      	b.n	8004fbe <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d101      	bne.n	8004f9e <HAL_UART_Receive_IT+0x38>
 8004f9a:	2302      	movs	r3, #2
 8004f9c:	e00f      	b.n	8004fbe <HAL_UART_Receive_IT+0x58>
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004fac:	88fb      	ldrh	r3, [r7, #6]
 8004fae:	461a      	mov	r2, r3
 8004fb0:	68b9      	ldr	r1, [r7, #8]
 8004fb2:	68f8      	ldr	r0, [r7, #12]
 8004fb4:	f000 fb24 	bl	8005600 <UART_Start_Receive_IT>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	e000      	b.n	8004fbe <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004fbc:	2302      	movs	r3, #2
  }
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3710      	adds	r7, #16
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
	...

08004fc8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b0ba      	sub	sp, #232	; 0xe8
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ffe:	f003 030f 	and.w	r3, r3, #15
 8005002:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005006:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800500a:	2b00      	cmp	r3, #0
 800500c:	d10f      	bne.n	800502e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800500e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005012:	f003 0320 	and.w	r3, r3, #32
 8005016:	2b00      	cmp	r3, #0
 8005018:	d009      	beq.n	800502e <HAL_UART_IRQHandler+0x66>
 800501a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800501e:	f003 0320 	and.w	r3, r3, #32
 8005022:	2b00      	cmp	r3, #0
 8005024:	d003      	beq.n	800502e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 fc03 	bl	8005832 <UART_Receive_IT>
      return;
 800502c:	e256      	b.n	80054dc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800502e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005032:	2b00      	cmp	r3, #0
 8005034:	f000 80de 	beq.w	80051f4 <HAL_UART_IRQHandler+0x22c>
 8005038:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800503c:	f003 0301 	and.w	r3, r3, #1
 8005040:	2b00      	cmp	r3, #0
 8005042:	d106      	bne.n	8005052 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005048:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800504c:	2b00      	cmp	r3, #0
 800504e:	f000 80d1 	beq.w	80051f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005056:	f003 0301 	and.w	r3, r3, #1
 800505a:	2b00      	cmp	r3, #0
 800505c:	d00b      	beq.n	8005076 <HAL_UART_IRQHandler+0xae>
 800505e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005066:	2b00      	cmp	r3, #0
 8005068:	d005      	beq.n	8005076 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506e:	f043 0201 	orr.w	r2, r3, #1
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800507a:	f003 0304 	and.w	r3, r3, #4
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00b      	beq.n	800509a <HAL_UART_IRQHandler+0xd2>
 8005082:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005086:	f003 0301 	and.w	r3, r3, #1
 800508a:	2b00      	cmp	r3, #0
 800508c:	d005      	beq.n	800509a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005092:	f043 0202 	orr.w	r2, r3, #2
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800509a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800509e:	f003 0302 	and.w	r3, r3, #2
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00b      	beq.n	80050be <HAL_UART_IRQHandler+0xf6>
 80050a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d005      	beq.n	80050be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b6:	f043 0204 	orr.w	r2, r3, #4
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80050be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050c2:	f003 0308 	and.w	r3, r3, #8
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d011      	beq.n	80050ee <HAL_UART_IRQHandler+0x126>
 80050ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050ce:	f003 0320 	and.w	r3, r3, #32
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d105      	bne.n	80050e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80050d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050da:	f003 0301 	and.w	r3, r3, #1
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d005      	beq.n	80050ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e6:	f043 0208 	orr.w	r2, r3, #8
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	f000 81ed 	beq.w	80054d2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050fc:	f003 0320 	and.w	r3, r3, #32
 8005100:	2b00      	cmp	r3, #0
 8005102:	d008      	beq.n	8005116 <HAL_UART_IRQHandler+0x14e>
 8005104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005108:	f003 0320 	and.w	r3, r3, #32
 800510c:	2b00      	cmp	r3, #0
 800510e:	d002      	beq.n	8005116 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 fb8e 	bl	8005832 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	695b      	ldr	r3, [r3, #20]
 800511c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005120:	2b40      	cmp	r3, #64	; 0x40
 8005122:	bf0c      	ite	eq
 8005124:	2301      	moveq	r3, #1
 8005126:	2300      	movne	r3, #0
 8005128:	b2db      	uxtb	r3, r3
 800512a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005132:	f003 0308 	and.w	r3, r3, #8
 8005136:	2b00      	cmp	r3, #0
 8005138:	d103      	bne.n	8005142 <HAL_UART_IRQHandler+0x17a>
 800513a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800513e:	2b00      	cmp	r3, #0
 8005140:	d04f      	beq.n	80051e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 fa96 	bl	8005674 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005152:	2b40      	cmp	r3, #64	; 0x40
 8005154:	d141      	bne.n	80051da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	3314      	adds	r3, #20
 800515c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005160:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005164:	e853 3f00 	ldrex	r3, [r3]
 8005168:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800516c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005170:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005174:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	3314      	adds	r3, #20
 800517e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005182:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005186:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800518a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800518e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005192:	e841 2300 	strex	r3, r2, [r1]
 8005196:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800519a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1d9      	bne.n	8005156 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d013      	beq.n	80051d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ae:	4a7d      	ldr	r2, [pc, #500]	; (80053a4 <HAL_UART_IRQHandler+0x3dc>)
 80051b0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b6:	4618      	mov	r0, r3
 80051b8:	f7fc f856 	bl	8001268 <HAL_DMA_Abort_IT>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d016      	beq.n	80051f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80051cc:	4610      	mov	r0, r2
 80051ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051d0:	e00e      	b.n	80051f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 f990 	bl	80054f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051d8:	e00a      	b.n	80051f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 f98c 	bl	80054f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051e0:	e006      	b.n	80051f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 f988 	bl	80054f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80051ee:	e170      	b.n	80054d2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051f0:	bf00      	nop
    return;
 80051f2:	e16e      	b.n	80054d2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	f040 814a 	bne.w	8005492 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80051fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005202:	f003 0310 	and.w	r3, r3, #16
 8005206:	2b00      	cmp	r3, #0
 8005208:	f000 8143 	beq.w	8005492 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800520c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005210:	f003 0310 	and.w	r3, r3, #16
 8005214:	2b00      	cmp	r3, #0
 8005216:	f000 813c 	beq.w	8005492 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800521a:	2300      	movs	r3, #0
 800521c:	60bb      	str	r3, [r7, #8]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	60bb      	str	r3, [r7, #8]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	60bb      	str	r3, [r7, #8]
 800522e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800523a:	2b40      	cmp	r3, #64	; 0x40
 800523c:	f040 80b4 	bne.w	80053a8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800524c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005250:	2b00      	cmp	r3, #0
 8005252:	f000 8140 	beq.w	80054d6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800525a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800525e:	429a      	cmp	r2, r3
 8005260:	f080 8139 	bcs.w	80054d6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800526a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005270:	69db      	ldr	r3, [r3, #28]
 8005272:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005276:	f000 8088 	beq.w	800538a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	330c      	adds	r3, #12
 8005280:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005284:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005288:	e853 3f00 	ldrex	r3, [r3]
 800528c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005290:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005294:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005298:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	330c      	adds	r3, #12
 80052a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80052a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80052aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80052b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80052b6:	e841 2300 	strex	r3, r2, [r1]
 80052ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80052be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d1d9      	bne.n	800527a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	3314      	adds	r3, #20
 80052cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052d0:	e853 3f00 	ldrex	r3, [r3]
 80052d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80052d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80052d8:	f023 0301 	bic.w	r3, r3, #1
 80052dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	3314      	adds	r3, #20
 80052e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80052ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80052ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80052f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80052f6:	e841 2300 	strex	r3, r2, [r1]
 80052fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80052fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d1e1      	bne.n	80052c6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	3314      	adds	r3, #20
 8005308:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800530a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800530c:	e853 3f00 	ldrex	r3, [r3]
 8005310:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005312:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005314:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005318:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	3314      	adds	r3, #20
 8005322:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005326:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005328:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800532c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800532e:	e841 2300 	strex	r3, r2, [r1]
 8005332:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005334:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005336:	2b00      	cmp	r3, #0
 8005338:	d1e3      	bne.n	8005302 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2220      	movs	r2, #32
 800533e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	330c      	adds	r3, #12
 800534e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005350:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005352:	e853 3f00 	ldrex	r3, [r3]
 8005356:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005358:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800535a:	f023 0310 	bic.w	r3, r3, #16
 800535e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	330c      	adds	r3, #12
 8005368:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800536c:	65ba      	str	r2, [r7, #88]	; 0x58
 800536e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005370:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005372:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005374:	e841 2300 	strex	r3, r2, [r1]
 8005378:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800537a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800537c:	2b00      	cmp	r3, #0
 800537e:	d1e3      	bne.n	8005348 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005384:	4618      	mov	r0, r3
 8005386:	f7fb feff 	bl	8001188 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005392:	b29b      	uxth	r3, r3
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	b29b      	uxth	r3, r3
 8005398:	4619      	mov	r1, r3
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 f8b6 	bl	800550c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80053a0:	e099      	b.n	80054d6 <HAL_UART_IRQHandler+0x50e>
 80053a2:	bf00      	nop
 80053a4:	0800573b 	.word	0x0800573b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053bc:	b29b      	uxth	r3, r3
 80053be:	2b00      	cmp	r3, #0
 80053c0:	f000 808b 	beq.w	80054da <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80053c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	f000 8086 	beq.w	80054da <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	330c      	adds	r3, #12
 80053d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d8:	e853 3f00 	ldrex	r3, [r3]
 80053dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80053de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	330c      	adds	r3, #12
 80053ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80053f2:	647a      	str	r2, [r7, #68]	; 0x44
 80053f4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80053f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053fa:	e841 2300 	strex	r3, r2, [r1]
 80053fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005402:	2b00      	cmp	r3, #0
 8005404:	d1e3      	bne.n	80053ce <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	3314      	adds	r3, #20
 800540c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005410:	e853 3f00 	ldrex	r3, [r3]
 8005414:	623b      	str	r3, [r7, #32]
   return(result);
 8005416:	6a3b      	ldr	r3, [r7, #32]
 8005418:	f023 0301 	bic.w	r3, r3, #1
 800541c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	3314      	adds	r3, #20
 8005426:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800542a:	633a      	str	r2, [r7, #48]	; 0x30
 800542c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800542e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005430:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005432:	e841 2300 	strex	r3, r2, [r1]
 8005436:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800543a:	2b00      	cmp	r3, #0
 800543c:	d1e3      	bne.n	8005406 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2220      	movs	r2, #32
 8005442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	330c      	adds	r3, #12
 8005452:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	e853 3f00 	ldrex	r3, [r3]
 800545a:	60fb      	str	r3, [r7, #12]
   return(result);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f023 0310 	bic.w	r3, r3, #16
 8005462:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	330c      	adds	r3, #12
 800546c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005470:	61fa      	str	r2, [r7, #28]
 8005472:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005474:	69b9      	ldr	r1, [r7, #24]
 8005476:	69fa      	ldr	r2, [r7, #28]
 8005478:	e841 2300 	strex	r3, r2, [r1]
 800547c:	617b      	str	r3, [r7, #20]
   return(result);
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d1e3      	bne.n	800544c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005484:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005488:	4619      	mov	r1, r3
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 f83e 	bl	800550c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005490:	e023      	b.n	80054da <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800549a:	2b00      	cmp	r3, #0
 800549c:	d009      	beq.n	80054b2 <HAL_UART_IRQHandler+0x4ea>
 800549e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d003      	beq.n	80054b2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 f959 	bl	8005762 <UART_Transmit_IT>
    return;
 80054b0:	e014      	b.n	80054dc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80054b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00e      	beq.n	80054dc <HAL_UART_IRQHandler+0x514>
 80054be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d008      	beq.n	80054dc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 f999 	bl	8005802 <UART_EndTransmit_IT>
    return;
 80054d0:	e004      	b.n	80054dc <HAL_UART_IRQHandler+0x514>
    return;
 80054d2:	bf00      	nop
 80054d4:	e002      	b.n	80054dc <HAL_UART_IRQHandler+0x514>
      return;
 80054d6:	bf00      	nop
 80054d8:	e000      	b.n	80054dc <HAL_UART_IRQHandler+0x514>
      return;
 80054da:	bf00      	nop
  }
}
 80054dc:	37e8      	adds	r7, #232	; 0xe8
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop

080054e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80054ec:	bf00      	nop
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	460b      	mov	r3, r1
 8005516:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005518:	bf00      	nop
 800551a:	370c      	adds	r7, #12
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b090      	sub	sp, #64	; 0x40
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	603b      	str	r3, [r7, #0]
 8005530:	4613      	mov	r3, r2
 8005532:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005534:	e050      	b.n	80055d8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005536:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800553c:	d04c      	beq.n	80055d8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800553e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005540:	2b00      	cmp	r3, #0
 8005542:	d007      	beq.n	8005554 <UART_WaitOnFlagUntilTimeout+0x30>
 8005544:	f7fb fd32 	bl	8000fac <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005550:	429a      	cmp	r2, r3
 8005552:	d241      	bcs.n	80055d8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	330c      	adds	r3, #12
 800555a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800555c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555e:	e853 3f00 	ldrex	r3, [r3]
 8005562:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005566:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800556a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	330c      	adds	r3, #12
 8005572:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005574:	637a      	str	r2, [r7, #52]	; 0x34
 8005576:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005578:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800557a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800557c:	e841 2300 	strex	r3, r2, [r1]
 8005580:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005584:	2b00      	cmp	r3, #0
 8005586:	d1e5      	bne.n	8005554 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	3314      	adds	r3, #20
 800558e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	e853 3f00 	ldrex	r3, [r3]
 8005596:	613b      	str	r3, [r7, #16]
   return(result);
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	f023 0301 	bic.w	r3, r3, #1
 800559e:	63bb      	str	r3, [r7, #56]	; 0x38
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	3314      	adds	r3, #20
 80055a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055a8:	623a      	str	r2, [r7, #32]
 80055aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ac:	69f9      	ldr	r1, [r7, #28]
 80055ae:	6a3a      	ldr	r2, [r7, #32]
 80055b0:	e841 2300 	strex	r3, r2, [r1]
 80055b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1e5      	bne.n	8005588 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2220      	movs	r2, #32
 80055c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2220      	movs	r2, #32
 80055c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80055d4:	2303      	movs	r3, #3
 80055d6:	e00f      	b.n	80055f8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	4013      	ands	r3, r2
 80055e2:	68ba      	ldr	r2, [r7, #8]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	bf0c      	ite	eq
 80055e8:	2301      	moveq	r3, #1
 80055ea:	2300      	movne	r3, #0
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	461a      	mov	r2, r3
 80055f0:	79fb      	ldrb	r3, [r7, #7]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d09f      	beq.n	8005536 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055f6:	2300      	movs	r3, #0
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3740      	adds	r7, #64	; 0x40
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005600:	b480      	push	{r7}
 8005602:	b085      	sub	sp, #20
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	4613      	mov	r3, r2
 800560c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	68ba      	ldr	r2, [r7, #8]
 8005612:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	88fa      	ldrh	r2, [r7, #6]
 8005618:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	88fa      	ldrh	r2, [r7, #6]
 800561e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2200      	movs	r2, #0
 8005624:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2222      	movs	r2, #34	; 0x22
 800562a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2200      	movs	r2, #0
 8005632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68da      	ldr	r2, [r3, #12]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005644:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	695a      	ldr	r2, [r3, #20]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f042 0201 	orr.w	r2, r2, #1
 8005654:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68da      	ldr	r2, [r3, #12]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f042 0220 	orr.w	r2, r2, #32
 8005664:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005666:	2300      	movs	r3, #0
}
 8005668:	4618      	mov	r0, r3
 800566a:	3714      	adds	r7, #20
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005674:	b480      	push	{r7}
 8005676:	b095      	sub	sp, #84	; 0x54
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	330c      	adds	r3, #12
 8005682:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005686:	e853 3f00 	ldrex	r3, [r3]
 800568a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800568c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800568e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005692:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	330c      	adds	r3, #12
 800569a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800569c:	643a      	str	r2, [r7, #64]	; 0x40
 800569e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80056a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80056a4:	e841 2300 	strex	r3, r2, [r1]
 80056a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80056aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d1e5      	bne.n	800567c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	3314      	adds	r3, #20
 80056b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b8:	6a3b      	ldr	r3, [r7, #32]
 80056ba:	e853 3f00 	ldrex	r3, [r3]
 80056be:	61fb      	str	r3, [r7, #28]
   return(result);
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	f023 0301 	bic.w	r3, r3, #1
 80056c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	3314      	adds	r3, #20
 80056ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056d8:	e841 2300 	strex	r3, r2, [r1]
 80056dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1e5      	bne.n	80056b0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d119      	bne.n	8005720 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	330c      	adds	r3, #12
 80056f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	e853 3f00 	ldrex	r3, [r3]
 80056fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	f023 0310 	bic.w	r3, r3, #16
 8005702:	647b      	str	r3, [r7, #68]	; 0x44
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	330c      	adds	r3, #12
 800570a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800570c:	61ba      	str	r2, [r7, #24]
 800570e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005710:	6979      	ldr	r1, [r7, #20]
 8005712:	69ba      	ldr	r2, [r7, #24]
 8005714:	e841 2300 	strex	r3, r2, [r1]
 8005718:	613b      	str	r3, [r7, #16]
   return(result);
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d1e5      	bne.n	80056ec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2220      	movs	r2, #32
 8005724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800572e:	bf00      	nop
 8005730:	3754      	adds	r7, #84	; 0x54
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr

0800573a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800573a:	b580      	push	{r7, lr}
 800573c:	b084      	sub	sp, #16
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005746:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2200      	movs	r2, #0
 800574c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005754:	68f8      	ldr	r0, [r7, #12]
 8005756:	f7ff fecf 	bl	80054f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800575a:	bf00      	nop
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005762:	b480      	push	{r7}
 8005764:	b085      	sub	sp, #20
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005770:	b2db      	uxtb	r3, r3
 8005772:	2b21      	cmp	r3, #33	; 0x21
 8005774:	d13e      	bne.n	80057f4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800577e:	d114      	bne.n	80057aa <UART_Transmit_IT+0x48>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	691b      	ldr	r3, [r3, #16]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d110      	bne.n	80057aa <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a1b      	ldr	r3, [r3, #32]
 800578c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	881b      	ldrh	r3, [r3, #0]
 8005792:	461a      	mov	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800579c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a1b      	ldr	r3, [r3, #32]
 80057a2:	1c9a      	adds	r2, r3, #2
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	621a      	str	r2, [r3, #32]
 80057a8:	e008      	b.n	80057bc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a1b      	ldr	r3, [r3, #32]
 80057ae:	1c59      	adds	r1, r3, #1
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	6211      	str	r1, [r2, #32]
 80057b4:	781a      	ldrb	r2, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	3b01      	subs	r3, #1
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	4619      	mov	r1, r3
 80057ca:	84d1      	strh	r1, [r2, #38]	; 0x26
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d10f      	bne.n	80057f0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	68da      	ldr	r2, [r3, #12]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057de:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68da      	ldr	r2, [r3, #12]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057ee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80057f0:	2300      	movs	r3, #0
 80057f2:	e000      	b.n	80057f6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80057f4:	2302      	movs	r3, #2
  }
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3714      	adds	r7, #20
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr

08005802 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005802:	b580      	push	{r7, lr}
 8005804:	b082      	sub	sp, #8
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68da      	ldr	r2, [r3, #12]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005818:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2220      	movs	r2, #32
 800581e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f7ff fe5e 	bl	80054e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	3708      	adds	r7, #8
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005832:	b580      	push	{r7, lr}
 8005834:	b08c      	sub	sp, #48	; 0x30
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005840:	b2db      	uxtb	r3, r3
 8005842:	2b22      	cmp	r3, #34	; 0x22
 8005844:	f040 80ab 	bne.w	800599e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005850:	d117      	bne.n	8005882 <UART_Receive_IT+0x50>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d113      	bne.n	8005882 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800585a:	2300      	movs	r3, #0
 800585c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005862:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	b29b      	uxth	r3, r3
 800586c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005870:	b29a      	uxth	r2, r3
 8005872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005874:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800587a:	1c9a      	adds	r2, r3, #2
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	629a      	str	r2, [r3, #40]	; 0x28
 8005880:	e026      	b.n	80058d0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005886:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005888:	2300      	movs	r3, #0
 800588a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005894:	d007      	beq.n	80058a6 <UART_Receive_IT+0x74>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d10a      	bne.n	80058b4 <UART_Receive_IT+0x82>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d106      	bne.n	80058b4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	b2da      	uxtb	r2, r3
 80058ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b0:	701a      	strb	r2, [r3, #0]
 80058b2:	e008      	b.n	80058c6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058c0:	b2da      	uxtb	r2, r3
 80058c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ca:	1c5a      	adds	r2, r3, #1
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	3b01      	subs	r3, #1
 80058d8:	b29b      	uxth	r3, r3
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	4619      	mov	r1, r3
 80058de:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d15a      	bne.n	800599a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68da      	ldr	r2, [r3, #12]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f022 0220 	bic.w	r2, r2, #32
 80058f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68da      	ldr	r2, [r3, #12]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005902:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	695a      	ldr	r2, [r3, #20]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f022 0201 	bic.w	r2, r2, #1
 8005912:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2220      	movs	r2, #32
 8005918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005920:	2b01      	cmp	r3, #1
 8005922:	d135      	bne.n	8005990 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	330c      	adds	r3, #12
 8005930:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	e853 3f00 	ldrex	r3, [r3]
 8005938:	613b      	str	r3, [r7, #16]
   return(result);
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	f023 0310 	bic.w	r3, r3, #16
 8005940:	627b      	str	r3, [r7, #36]	; 0x24
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	330c      	adds	r3, #12
 8005948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800594a:	623a      	str	r2, [r7, #32]
 800594c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594e:	69f9      	ldr	r1, [r7, #28]
 8005950:	6a3a      	ldr	r2, [r7, #32]
 8005952:	e841 2300 	strex	r3, r2, [r1]
 8005956:	61bb      	str	r3, [r7, #24]
   return(result);
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d1e5      	bne.n	800592a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 0310 	and.w	r3, r3, #16
 8005968:	2b10      	cmp	r3, #16
 800596a:	d10a      	bne.n	8005982 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800596c:	2300      	movs	r3, #0
 800596e:	60fb      	str	r3, [r7, #12]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	60fb      	str	r3, [r7, #12]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	60fb      	str	r3, [r7, #12]
 8005980:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005986:	4619      	mov	r1, r3
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f7ff fdbf 	bl	800550c <HAL_UARTEx_RxEventCallback>
 800598e:	e002      	b.n	8005996 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f7fa ff0d 	bl	80007b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005996:	2300      	movs	r3, #0
 8005998:	e002      	b.n	80059a0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800599a:	2300      	movs	r3, #0
 800599c:	e000      	b.n	80059a0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800599e:	2302      	movs	r3, #2
  }
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3730      	adds	r7, #48	; 0x30
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059ac:	b09f      	sub	sp, #124	; 0x7c
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80059bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059be:	68d9      	ldr	r1, [r3, #12]
 80059c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	ea40 0301 	orr.w	r3, r0, r1
 80059c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80059ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059cc:	689a      	ldr	r2, [r3, #8]
 80059ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	431a      	orrs	r2, r3
 80059d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059d6:	695b      	ldr	r3, [r3, #20]
 80059d8:	431a      	orrs	r2, r3
 80059da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059dc:	69db      	ldr	r3, [r3, #28]
 80059de:	4313      	orrs	r3, r2
 80059e0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80059e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80059ec:	f021 010c 	bic.w	r1, r1, #12
 80059f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059f6:	430b      	orrs	r3, r1
 80059f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80059fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	695b      	ldr	r3, [r3, #20]
 8005a00:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005a04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a06:	6999      	ldr	r1, [r3, #24]
 8005a08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	ea40 0301 	orr.w	r3, r0, r1
 8005a10:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	4bc5      	ldr	r3, [pc, #788]	; (8005d2c <UART_SetConfig+0x384>)
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d004      	beq.n	8005a26 <UART_SetConfig+0x7e>
 8005a1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	4bc3      	ldr	r3, [pc, #780]	; (8005d30 <UART_SetConfig+0x388>)
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d103      	bne.n	8005a2e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a26:	f7fe fecb 	bl	80047c0 <HAL_RCC_GetPCLK2Freq>
 8005a2a:	6778      	str	r0, [r7, #116]	; 0x74
 8005a2c:	e002      	b.n	8005a34 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a2e:	f7fe feb3 	bl	8004798 <HAL_RCC_GetPCLK1Freq>
 8005a32:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a36:	69db      	ldr	r3, [r3, #28]
 8005a38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a3c:	f040 80b6 	bne.w	8005bac <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a42:	461c      	mov	r4, r3
 8005a44:	f04f 0500 	mov.w	r5, #0
 8005a48:	4622      	mov	r2, r4
 8005a4a:	462b      	mov	r3, r5
 8005a4c:	1891      	adds	r1, r2, r2
 8005a4e:	6439      	str	r1, [r7, #64]	; 0x40
 8005a50:	415b      	adcs	r3, r3
 8005a52:	647b      	str	r3, [r7, #68]	; 0x44
 8005a54:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005a58:	1912      	adds	r2, r2, r4
 8005a5a:	eb45 0303 	adc.w	r3, r5, r3
 8005a5e:	f04f 0000 	mov.w	r0, #0
 8005a62:	f04f 0100 	mov.w	r1, #0
 8005a66:	00d9      	lsls	r1, r3, #3
 8005a68:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005a6c:	00d0      	lsls	r0, r2, #3
 8005a6e:	4602      	mov	r2, r0
 8005a70:	460b      	mov	r3, r1
 8005a72:	1911      	adds	r1, r2, r4
 8005a74:	6639      	str	r1, [r7, #96]	; 0x60
 8005a76:	416b      	adcs	r3, r5
 8005a78:	667b      	str	r3, [r7, #100]	; 0x64
 8005a7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	461a      	mov	r2, r3
 8005a80:	f04f 0300 	mov.w	r3, #0
 8005a84:	1891      	adds	r1, r2, r2
 8005a86:	63b9      	str	r1, [r7, #56]	; 0x38
 8005a88:	415b      	adcs	r3, r3
 8005a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005a90:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005a94:	f7fa fb9c 	bl	80001d0 <__aeabi_uldivmod>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	460b      	mov	r3, r1
 8005a9c:	4ba5      	ldr	r3, [pc, #660]	; (8005d34 <UART_SetConfig+0x38c>)
 8005a9e:	fba3 2302 	umull	r2, r3, r3, r2
 8005aa2:	095b      	lsrs	r3, r3, #5
 8005aa4:	011e      	lsls	r6, r3, #4
 8005aa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005aa8:	461c      	mov	r4, r3
 8005aaa:	f04f 0500 	mov.w	r5, #0
 8005aae:	4622      	mov	r2, r4
 8005ab0:	462b      	mov	r3, r5
 8005ab2:	1891      	adds	r1, r2, r2
 8005ab4:	6339      	str	r1, [r7, #48]	; 0x30
 8005ab6:	415b      	adcs	r3, r3
 8005ab8:	637b      	str	r3, [r7, #52]	; 0x34
 8005aba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005abe:	1912      	adds	r2, r2, r4
 8005ac0:	eb45 0303 	adc.w	r3, r5, r3
 8005ac4:	f04f 0000 	mov.w	r0, #0
 8005ac8:	f04f 0100 	mov.w	r1, #0
 8005acc:	00d9      	lsls	r1, r3, #3
 8005ace:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ad2:	00d0      	lsls	r0, r2, #3
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	460b      	mov	r3, r1
 8005ad8:	1911      	adds	r1, r2, r4
 8005ada:	65b9      	str	r1, [r7, #88]	; 0x58
 8005adc:	416b      	adcs	r3, r5
 8005ade:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ae0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	f04f 0300 	mov.w	r3, #0
 8005aea:	1891      	adds	r1, r2, r2
 8005aec:	62b9      	str	r1, [r7, #40]	; 0x28
 8005aee:	415b      	adcs	r3, r3
 8005af0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005af2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005af6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005afa:	f7fa fb69 	bl	80001d0 <__aeabi_uldivmod>
 8005afe:	4602      	mov	r2, r0
 8005b00:	460b      	mov	r3, r1
 8005b02:	4b8c      	ldr	r3, [pc, #560]	; (8005d34 <UART_SetConfig+0x38c>)
 8005b04:	fba3 1302 	umull	r1, r3, r3, r2
 8005b08:	095b      	lsrs	r3, r3, #5
 8005b0a:	2164      	movs	r1, #100	; 0x64
 8005b0c:	fb01 f303 	mul.w	r3, r1, r3
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	00db      	lsls	r3, r3, #3
 8005b14:	3332      	adds	r3, #50	; 0x32
 8005b16:	4a87      	ldr	r2, [pc, #540]	; (8005d34 <UART_SetConfig+0x38c>)
 8005b18:	fba2 2303 	umull	r2, r3, r2, r3
 8005b1c:	095b      	lsrs	r3, r3, #5
 8005b1e:	005b      	lsls	r3, r3, #1
 8005b20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005b24:	441e      	add	r6, r3
 8005b26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f04f 0100 	mov.w	r1, #0
 8005b2e:	4602      	mov	r2, r0
 8005b30:	460b      	mov	r3, r1
 8005b32:	1894      	adds	r4, r2, r2
 8005b34:	623c      	str	r4, [r7, #32]
 8005b36:	415b      	adcs	r3, r3
 8005b38:	627b      	str	r3, [r7, #36]	; 0x24
 8005b3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b3e:	1812      	adds	r2, r2, r0
 8005b40:	eb41 0303 	adc.w	r3, r1, r3
 8005b44:	f04f 0400 	mov.w	r4, #0
 8005b48:	f04f 0500 	mov.w	r5, #0
 8005b4c:	00dd      	lsls	r5, r3, #3
 8005b4e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005b52:	00d4      	lsls	r4, r2, #3
 8005b54:	4622      	mov	r2, r4
 8005b56:	462b      	mov	r3, r5
 8005b58:	1814      	adds	r4, r2, r0
 8005b5a:	653c      	str	r4, [r7, #80]	; 0x50
 8005b5c:	414b      	adcs	r3, r1
 8005b5e:	657b      	str	r3, [r7, #84]	; 0x54
 8005b60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	461a      	mov	r2, r3
 8005b66:	f04f 0300 	mov.w	r3, #0
 8005b6a:	1891      	adds	r1, r2, r2
 8005b6c:	61b9      	str	r1, [r7, #24]
 8005b6e:	415b      	adcs	r3, r3
 8005b70:	61fb      	str	r3, [r7, #28]
 8005b72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b76:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005b7a:	f7fa fb29 	bl	80001d0 <__aeabi_uldivmod>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	460b      	mov	r3, r1
 8005b82:	4b6c      	ldr	r3, [pc, #432]	; (8005d34 <UART_SetConfig+0x38c>)
 8005b84:	fba3 1302 	umull	r1, r3, r3, r2
 8005b88:	095b      	lsrs	r3, r3, #5
 8005b8a:	2164      	movs	r1, #100	; 0x64
 8005b8c:	fb01 f303 	mul.w	r3, r1, r3
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	00db      	lsls	r3, r3, #3
 8005b94:	3332      	adds	r3, #50	; 0x32
 8005b96:	4a67      	ldr	r2, [pc, #412]	; (8005d34 <UART_SetConfig+0x38c>)
 8005b98:	fba2 2303 	umull	r2, r3, r2, r3
 8005b9c:	095b      	lsrs	r3, r3, #5
 8005b9e:	f003 0207 	and.w	r2, r3, #7
 8005ba2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4432      	add	r2, r6
 8005ba8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005baa:	e0b9      	b.n	8005d20 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005bac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bae:	461c      	mov	r4, r3
 8005bb0:	f04f 0500 	mov.w	r5, #0
 8005bb4:	4622      	mov	r2, r4
 8005bb6:	462b      	mov	r3, r5
 8005bb8:	1891      	adds	r1, r2, r2
 8005bba:	6139      	str	r1, [r7, #16]
 8005bbc:	415b      	adcs	r3, r3
 8005bbe:	617b      	str	r3, [r7, #20]
 8005bc0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005bc4:	1912      	adds	r2, r2, r4
 8005bc6:	eb45 0303 	adc.w	r3, r5, r3
 8005bca:	f04f 0000 	mov.w	r0, #0
 8005bce:	f04f 0100 	mov.w	r1, #0
 8005bd2:	00d9      	lsls	r1, r3, #3
 8005bd4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005bd8:	00d0      	lsls	r0, r2, #3
 8005bda:	4602      	mov	r2, r0
 8005bdc:	460b      	mov	r3, r1
 8005bde:	eb12 0804 	adds.w	r8, r2, r4
 8005be2:	eb43 0905 	adc.w	r9, r3, r5
 8005be6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	4618      	mov	r0, r3
 8005bec:	f04f 0100 	mov.w	r1, #0
 8005bf0:	f04f 0200 	mov.w	r2, #0
 8005bf4:	f04f 0300 	mov.w	r3, #0
 8005bf8:	008b      	lsls	r3, r1, #2
 8005bfa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005bfe:	0082      	lsls	r2, r0, #2
 8005c00:	4640      	mov	r0, r8
 8005c02:	4649      	mov	r1, r9
 8005c04:	f7fa fae4 	bl	80001d0 <__aeabi_uldivmod>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	460b      	mov	r3, r1
 8005c0c:	4b49      	ldr	r3, [pc, #292]	; (8005d34 <UART_SetConfig+0x38c>)
 8005c0e:	fba3 2302 	umull	r2, r3, r3, r2
 8005c12:	095b      	lsrs	r3, r3, #5
 8005c14:	011e      	lsls	r6, r3, #4
 8005c16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f04f 0100 	mov.w	r1, #0
 8005c1e:	4602      	mov	r2, r0
 8005c20:	460b      	mov	r3, r1
 8005c22:	1894      	adds	r4, r2, r2
 8005c24:	60bc      	str	r4, [r7, #8]
 8005c26:	415b      	adcs	r3, r3
 8005c28:	60fb      	str	r3, [r7, #12]
 8005c2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c2e:	1812      	adds	r2, r2, r0
 8005c30:	eb41 0303 	adc.w	r3, r1, r3
 8005c34:	f04f 0400 	mov.w	r4, #0
 8005c38:	f04f 0500 	mov.w	r5, #0
 8005c3c:	00dd      	lsls	r5, r3, #3
 8005c3e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005c42:	00d4      	lsls	r4, r2, #3
 8005c44:	4622      	mov	r2, r4
 8005c46:	462b      	mov	r3, r5
 8005c48:	1814      	adds	r4, r2, r0
 8005c4a:	64bc      	str	r4, [r7, #72]	; 0x48
 8005c4c:	414b      	adcs	r3, r1
 8005c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	4618      	mov	r0, r3
 8005c56:	f04f 0100 	mov.w	r1, #0
 8005c5a:	f04f 0200 	mov.w	r2, #0
 8005c5e:	f04f 0300 	mov.w	r3, #0
 8005c62:	008b      	lsls	r3, r1, #2
 8005c64:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005c68:	0082      	lsls	r2, r0, #2
 8005c6a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005c6e:	f7fa faaf 	bl	80001d0 <__aeabi_uldivmod>
 8005c72:	4602      	mov	r2, r0
 8005c74:	460b      	mov	r3, r1
 8005c76:	4b2f      	ldr	r3, [pc, #188]	; (8005d34 <UART_SetConfig+0x38c>)
 8005c78:	fba3 1302 	umull	r1, r3, r3, r2
 8005c7c:	095b      	lsrs	r3, r3, #5
 8005c7e:	2164      	movs	r1, #100	; 0x64
 8005c80:	fb01 f303 	mul.w	r3, r1, r3
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	011b      	lsls	r3, r3, #4
 8005c88:	3332      	adds	r3, #50	; 0x32
 8005c8a:	4a2a      	ldr	r2, [pc, #168]	; (8005d34 <UART_SetConfig+0x38c>)
 8005c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c90:	095b      	lsrs	r3, r3, #5
 8005c92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c96:	441e      	add	r6, r3
 8005c98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f04f 0100 	mov.w	r1, #0
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	460b      	mov	r3, r1
 8005ca4:	1894      	adds	r4, r2, r2
 8005ca6:	603c      	str	r4, [r7, #0]
 8005ca8:	415b      	adcs	r3, r3
 8005caa:	607b      	str	r3, [r7, #4]
 8005cac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cb0:	1812      	adds	r2, r2, r0
 8005cb2:	eb41 0303 	adc.w	r3, r1, r3
 8005cb6:	f04f 0400 	mov.w	r4, #0
 8005cba:	f04f 0500 	mov.w	r5, #0
 8005cbe:	00dd      	lsls	r5, r3, #3
 8005cc0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005cc4:	00d4      	lsls	r4, r2, #3
 8005cc6:	4622      	mov	r2, r4
 8005cc8:	462b      	mov	r3, r5
 8005cca:	eb12 0a00 	adds.w	sl, r2, r0
 8005cce:	eb43 0b01 	adc.w	fp, r3, r1
 8005cd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f04f 0100 	mov.w	r1, #0
 8005cdc:	f04f 0200 	mov.w	r2, #0
 8005ce0:	f04f 0300 	mov.w	r3, #0
 8005ce4:	008b      	lsls	r3, r1, #2
 8005ce6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005cea:	0082      	lsls	r2, r0, #2
 8005cec:	4650      	mov	r0, sl
 8005cee:	4659      	mov	r1, fp
 8005cf0:	f7fa fa6e 	bl	80001d0 <__aeabi_uldivmod>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	460b      	mov	r3, r1
 8005cf8:	4b0e      	ldr	r3, [pc, #56]	; (8005d34 <UART_SetConfig+0x38c>)
 8005cfa:	fba3 1302 	umull	r1, r3, r3, r2
 8005cfe:	095b      	lsrs	r3, r3, #5
 8005d00:	2164      	movs	r1, #100	; 0x64
 8005d02:	fb01 f303 	mul.w	r3, r1, r3
 8005d06:	1ad3      	subs	r3, r2, r3
 8005d08:	011b      	lsls	r3, r3, #4
 8005d0a:	3332      	adds	r3, #50	; 0x32
 8005d0c:	4a09      	ldr	r2, [pc, #36]	; (8005d34 <UART_SetConfig+0x38c>)
 8005d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d12:	095b      	lsrs	r3, r3, #5
 8005d14:	f003 020f 	and.w	r2, r3, #15
 8005d18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4432      	add	r2, r6
 8005d1e:	609a      	str	r2, [r3, #8]
}
 8005d20:	bf00      	nop
 8005d22:	377c      	adds	r7, #124	; 0x7c
 8005d24:	46bd      	mov	sp, r7
 8005d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d2a:	bf00      	nop
 8005d2c:	40011000 	.word	0x40011000
 8005d30:	40011400 	.word	0x40011400
 8005d34:	51eb851f 	.word	0x51eb851f

08005d38 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b085      	sub	sp, #20
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	4603      	mov	r3, r0
 8005d40:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005d42:	2300      	movs	r3, #0
 8005d44:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005d46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d4a:	2b84      	cmp	r3, #132	; 0x84
 8005d4c:	d005      	beq.n	8005d5a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005d4e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	4413      	add	r3, r2
 8005d56:	3303      	adds	r3, #3
 8005d58:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3714      	adds	r7, #20
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005d6c:	f000 fe66 	bl	8006a3c <vTaskStartScheduler>
  
  return osOK;
 8005d70:	2300      	movs	r3, #0
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	bd80      	pop	{r7, pc}

08005d76 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005d76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d78:	b089      	sub	sp, #36	; 0x24
 8005d7a:	af04      	add	r7, sp, #16
 8005d7c:	6078      	str	r0, [r7, #4]
 8005d7e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	695b      	ldr	r3, [r3, #20]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d020      	beq.n	8005dca <osThreadCreate+0x54>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	699b      	ldr	r3, [r3, #24]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d01c      	beq.n	8005dca <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685c      	ldr	r4, [r3, #4]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681d      	ldr	r5, [r3, #0]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	691e      	ldr	r6, [r3, #16]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005da2:	4618      	mov	r0, r3
 8005da4:	f7ff ffc8 	bl	8005d38 <makeFreeRtosPriority>
 8005da8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	695b      	ldr	r3, [r3, #20]
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005db2:	9202      	str	r2, [sp, #8]
 8005db4:	9301      	str	r3, [sp, #4]
 8005db6:	9100      	str	r1, [sp, #0]
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	4632      	mov	r2, r6
 8005dbc:	4629      	mov	r1, r5
 8005dbe:	4620      	mov	r0, r4
 8005dc0:	f000 fc5e 	bl	8006680 <xTaskCreateStatic>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	60fb      	str	r3, [r7, #12]
 8005dc8:	e01c      	b.n	8005e04 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	685c      	ldr	r4, [r3, #4]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005dd6:	b29e      	uxth	r6, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005dde:	4618      	mov	r0, r3
 8005de0:	f7ff ffaa 	bl	8005d38 <makeFreeRtosPriority>
 8005de4:	4602      	mov	r2, r0
 8005de6:	f107 030c 	add.w	r3, r7, #12
 8005dea:	9301      	str	r3, [sp, #4]
 8005dec:	9200      	str	r2, [sp, #0]
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	4632      	mov	r2, r6
 8005df2:	4629      	mov	r1, r5
 8005df4:	4620      	mov	r0, r4
 8005df6:	f000 fca0 	bl	800673a <xTaskCreate>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d001      	beq.n	8005e04 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005e00:	2300      	movs	r3, #0
 8005e02:	e000      	b.n	8005e06 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005e04:	68fb      	ldr	r3, [r7, #12]
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3714      	adds	r7, #20
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005e0e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005e0e:	b580      	push	{r7, lr}
 8005e10:	b084      	sub	sp, #16
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d001      	beq.n	8005e24 <osDelay+0x16>
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	e000      	b.n	8005e26 <osDelay+0x18>
 8005e24:	2301      	movs	r3, #1
 8005e26:	4618      	mov	r0, r3
 8005e28:	f000 fdd4 	bl	80069d4 <vTaskDelay>
  
  return osOK;
 8005e2c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3710      	adds	r7, #16
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}

08005e36 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005e36:	b580      	push	{r7, lr}
 8005e38:	b082      	sub	sp, #8
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d007      	beq.n	8005e56 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	2001      	movs	r0, #1
 8005e4e:	f000 fa2a 	bl	80062a6 <xQueueCreateMutexStatic>
 8005e52:	4603      	mov	r3, r0
 8005e54:	e003      	b.n	8005e5e <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005e56:	2001      	movs	r0, #1
 8005e58:	f000 fa0d 	bl	8006276 <xQueueCreateMutex>
 8005e5c:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3708      	adds	r7, #8
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}

08005e66 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005e66:	b480      	push	{r7}
 8005e68:	b083      	sub	sp, #12
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f103 0208 	add.w	r2, r3, #8
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e7e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f103 0208 	add.w	r2, r3, #8
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f103 0208 	add.w	r2, r3, #8
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005e9a:	bf00      	nop
 8005e9c:	370c      	adds	r7, #12
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr

08005ea6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005ea6:	b480      	push	{r7}
 8005ea8:	b083      	sub	sp, #12
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005eb4:	bf00      	nop
 8005eb6:	370c      	adds	r7, #12
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b085      	sub	sp, #20
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	689a      	ldr	r2, [r3, #8]
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	683a      	ldr	r2, [r7, #0]
 8005ee4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	683a      	ldr	r2, [r7, #0]
 8005eea:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	1c5a      	adds	r2, r3, #1
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	601a      	str	r2, [r3, #0]
}
 8005efc:	bf00      	nop
 8005efe:	3714      	adds	r7, #20
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b085      	sub	sp, #20
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f1e:	d103      	bne.n	8005f28 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	691b      	ldr	r3, [r3, #16]
 8005f24:	60fb      	str	r3, [r7, #12]
 8005f26:	e00c      	b.n	8005f42 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	3308      	adds	r3, #8
 8005f2c:	60fb      	str	r3, [r7, #12]
 8005f2e:	e002      	b.n	8005f36 <vListInsert+0x2e>
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	60fb      	str	r3, [r7, #12]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68ba      	ldr	r2, [r7, #8]
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d2f6      	bcs.n	8005f30 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	685a      	ldr	r2, [r3, #4]
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	683a      	ldr	r2, [r7, #0]
 8005f50:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	683a      	ldr	r2, [r7, #0]
 8005f5c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	1c5a      	adds	r2, r3, #1
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	601a      	str	r2, [r3, #0]
}
 8005f6e:	bf00      	nop
 8005f70:	3714      	adds	r7, #20
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr

08005f7a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005f7a:	b480      	push	{r7}
 8005f7c:	b085      	sub	sp, #20
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	6892      	ldr	r2, [r2, #8]
 8005f90:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	6852      	ldr	r2, [r2, #4]
 8005f9a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d103      	bne.n	8005fae <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	689a      	ldr	r2, [r3, #8]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	1e5a      	subs	r2, r3, #1
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3714      	adds	r7, #20
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr
	...

08005fd0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d10a      	bne.n	8005ffa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe8:	f383 8811 	msr	BASEPRI, r3
 8005fec:	f3bf 8f6f 	isb	sy
 8005ff0:	f3bf 8f4f 	dsb	sy
 8005ff4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005ff6:	bf00      	nop
 8005ff8:	e7fe      	b.n	8005ff8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005ffa:	f001 fb6b 	bl	80076d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006006:	68f9      	ldr	r1, [r7, #12]
 8006008:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800600a:	fb01 f303 	mul.w	r3, r1, r3
 800600e:	441a      	add	r2, r3
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2200      	movs	r2, #0
 8006018:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800602a:	3b01      	subs	r3, #1
 800602c:	68f9      	ldr	r1, [r7, #12]
 800602e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006030:	fb01 f303 	mul.w	r3, r1, r3
 8006034:	441a      	add	r2, r3
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	22ff      	movs	r2, #255	; 0xff
 800603e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	22ff      	movs	r2, #255	; 0xff
 8006046:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d114      	bne.n	800607a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	691b      	ldr	r3, [r3, #16]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d01a      	beq.n	800608e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	3310      	adds	r3, #16
 800605c:	4618      	mov	r0, r3
 800605e:	f000 ff3f 	bl	8006ee0 <xTaskRemoveFromEventList>
 8006062:	4603      	mov	r3, r0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d012      	beq.n	800608e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006068:	4b0c      	ldr	r3, [pc, #48]	; (800609c <xQueueGenericReset+0xcc>)
 800606a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800606e:	601a      	str	r2, [r3, #0]
 8006070:	f3bf 8f4f 	dsb	sy
 8006074:	f3bf 8f6f 	isb	sy
 8006078:	e009      	b.n	800608e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	3310      	adds	r3, #16
 800607e:	4618      	mov	r0, r3
 8006080:	f7ff fef1 	bl	8005e66 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	3324      	adds	r3, #36	; 0x24
 8006088:	4618      	mov	r0, r3
 800608a:	f7ff feec 	bl	8005e66 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800608e:	f001 fb51 	bl	8007734 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006092:	2301      	movs	r3, #1
}
 8006094:	4618      	mov	r0, r3
 8006096:	3710      	adds	r7, #16
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}
 800609c:	e000ed04 	.word	0xe000ed04

080060a0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b08e      	sub	sp, #56	; 0x38
 80060a4:	af02      	add	r7, sp, #8
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	607a      	str	r2, [r7, #4]
 80060ac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d10a      	bne.n	80060ca <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80060b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b8:	f383 8811 	msr	BASEPRI, r3
 80060bc:	f3bf 8f6f 	isb	sy
 80060c0:	f3bf 8f4f 	dsb	sy
 80060c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80060c6:	bf00      	nop
 80060c8:	e7fe      	b.n	80060c8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d10a      	bne.n	80060e6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80060d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d4:	f383 8811 	msr	BASEPRI, r3
 80060d8:	f3bf 8f6f 	isb	sy
 80060dc:	f3bf 8f4f 	dsb	sy
 80060e0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80060e2:	bf00      	nop
 80060e4:	e7fe      	b.n	80060e4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d002      	beq.n	80060f2 <xQueueGenericCreateStatic+0x52>
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d001      	beq.n	80060f6 <xQueueGenericCreateStatic+0x56>
 80060f2:	2301      	movs	r3, #1
 80060f4:	e000      	b.n	80060f8 <xQueueGenericCreateStatic+0x58>
 80060f6:	2300      	movs	r3, #0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d10a      	bne.n	8006112 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80060fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006100:	f383 8811 	msr	BASEPRI, r3
 8006104:	f3bf 8f6f 	isb	sy
 8006108:	f3bf 8f4f 	dsb	sy
 800610c:	623b      	str	r3, [r7, #32]
}
 800610e:	bf00      	nop
 8006110:	e7fe      	b.n	8006110 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d102      	bne.n	800611e <xQueueGenericCreateStatic+0x7e>
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d101      	bne.n	8006122 <xQueueGenericCreateStatic+0x82>
 800611e:	2301      	movs	r3, #1
 8006120:	e000      	b.n	8006124 <xQueueGenericCreateStatic+0x84>
 8006122:	2300      	movs	r3, #0
 8006124:	2b00      	cmp	r3, #0
 8006126:	d10a      	bne.n	800613e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800612c:	f383 8811 	msr	BASEPRI, r3
 8006130:	f3bf 8f6f 	isb	sy
 8006134:	f3bf 8f4f 	dsb	sy
 8006138:	61fb      	str	r3, [r7, #28]
}
 800613a:	bf00      	nop
 800613c:	e7fe      	b.n	800613c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800613e:	2348      	movs	r3, #72	; 0x48
 8006140:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	2b48      	cmp	r3, #72	; 0x48
 8006146:	d00a      	beq.n	800615e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614c:	f383 8811 	msr	BASEPRI, r3
 8006150:	f3bf 8f6f 	isb	sy
 8006154:	f3bf 8f4f 	dsb	sy
 8006158:	61bb      	str	r3, [r7, #24]
}
 800615a:	bf00      	nop
 800615c:	e7fe      	b.n	800615c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800615e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006166:	2b00      	cmp	r3, #0
 8006168:	d00d      	beq.n	8006186 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800616a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800616c:	2201      	movs	r2, #1
 800616e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006172:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006178:	9300      	str	r3, [sp, #0]
 800617a:	4613      	mov	r3, r2
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	68b9      	ldr	r1, [r7, #8]
 8006180:	68f8      	ldr	r0, [r7, #12]
 8006182:	f000 f83f 	bl	8006204 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006188:	4618      	mov	r0, r3
 800618a:	3730      	adds	r7, #48	; 0x30
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006190:	b580      	push	{r7, lr}
 8006192:	b08a      	sub	sp, #40	; 0x28
 8006194:	af02      	add	r7, sp, #8
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	4613      	mov	r3, r2
 800619c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d10a      	bne.n	80061ba <xQueueGenericCreate+0x2a>
	__asm volatile
 80061a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a8:	f383 8811 	msr	BASEPRI, r3
 80061ac:	f3bf 8f6f 	isb	sy
 80061b0:	f3bf 8f4f 	dsb	sy
 80061b4:	613b      	str	r3, [r7, #16]
}
 80061b6:	bf00      	nop
 80061b8:	e7fe      	b.n	80061b8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	68ba      	ldr	r2, [r7, #8]
 80061be:	fb02 f303 	mul.w	r3, r2, r3
 80061c2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	3348      	adds	r3, #72	; 0x48
 80061c8:	4618      	mov	r0, r3
 80061ca:	f001 fb65 	bl	8007898 <pvPortMalloc>
 80061ce:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80061d0:	69bb      	ldr	r3, [r7, #24]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d011      	beq.n	80061fa <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	3348      	adds	r3, #72	; 0x48
 80061de:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80061e8:	79fa      	ldrb	r2, [r7, #7]
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	9300      	str	r3, [sp, #0]
 80061ee:	4613      	mov	r3, r2
 80061f0:	697a      	ldr	r2, [r7, #20]
 80061f2:	68b9      	ldr	r1, [r7, #8]
 80061f4:	68f8      	ldr	r0, [r7, #12]
 80061f6:	f000 f805 	bl	8006204 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80061fa:	69bb      	ldr	r3, [r7, #24]
	}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3720      	adds	r7, #32
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	607a      	str	r2, [r7, #4]
 8006210:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d103      	bne.n	8006220 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	69ba      	ldr	r2, [r7, #24]
 800621c:	601a      	str	r2, [r3, #0]
 800621e:	e002      	b.n	8006226 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800622c:	69bb      	ldr	r3, [r7, #24]
 800622e:	68ba      	ldr	r2, [r7, #8]
 8006230:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006232:	2101      	movs	r1, #1
 8006234:	69b8      	ldr	r0, [r7, #24]
 8006236:	f7ff fecb 	bl	8005fd0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800623a:	bf00      	nop
 800623c:	3710      	adds	r7, #16
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}

08006242 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006242:	b580      	push	{r7, lr}
 8006244:	b082      	sub	sp, #8
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d00e      	beq.n	800626e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006262:	2300      	movs	r3, #0
 8006264:	2200      	movs	r2, #0
 8006266:	2100      	movs	r1, #0
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f000 f837 	bl	80062dc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800626e:	bf00      	nop
 8006270:	3708      	adds	r7, #8
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006276:	b580      	push	{r7, lr}
 8006278:	b086      	sub	sp, #24
 800627a:	af00      	add	r7, sp, #0
 800627c:	4603      	mov	r3, r0
 800627e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006280:	2301      	movs	r3, #1
 8006282:	617b      	str	r3, [r7, #20]
 8006284:	2300      	movs	r3, #0
 8006286:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006288:	79fb      	ldrb	r3, [r7, #7]
 800628a:	461a      	mov	r2, r3
 800628c:	6939      	ldr	r1, [r7, #16]
 800628e:	6978      	ldr	r0, [r7, #20]
 8006290:	f7ff ff7e 	bl	8006190 <xQueueGenericCreate>
 8006294:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006296:	68f8      	ldr	r0, [r7, #12]
 8006298:	f7ff ffd3 	bl	8006242 <prvInitialiseMutex>

		return xNewQueue;
 800629c:	68fb      	ldr	r3, [r7, #12]
	}
 800629e:	4618      	mov	r0, r3
 80062a0:	3718      	adds	r7, #24
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}

080062a6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80062a6:	b580      	push	{r7, lr}
 80062a8:	b088      	sub	sp, #32
 80062aa:	af02      	add	r7, sp, #8
 80062ac:	4603      	mov	r3, r0
 80062ae:	6039      	str	r1, [r7, #0]
 80062b0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80062b2:	2301      	movs	r3, #1
 80062b4:	617b      	str	r3, [r7, #20]
 80062b6:	2300      	movs	r3, #0
 80062b8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80062ba:	79fb      	ldrb	r3, [r7, #7]
 80062bc:	9300      	str	r3, [sp, #0]
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	2200      	movs	r2, #0
 80062c2:	6939      	ldr	r1, [r7, #16]
 80062c4:	6978      	ldr	r0, [r7, #20]
 80062c6:	f7ff feeb 	bl	80060a0 <xQueueGenericCreateStatic>
 80062ca:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80062cc:	68f8      	ldr	r0, [r7, #12]
 80062ce:	f7ff ffb8 	bl	8006242 <prvInitialiseMutex>

		return xNewQueue;
 80062d2:	68fb      	ldr	r3, [r7, #12]
	}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3718      	adds	r7, #24
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b08e      	sub	sp, #56	; 0x38
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	607a      	str	r2, [r7, #4]
 80062e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80062ea:	2300      	movs	r3, #0
 80062ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80062f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d10a      	bne.n	800630e <xQueueGenericSend+0x32>
	__asm volatile
 80062f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062fc:	f383 8811 	msr	BASEPRI, r3
 8006300:	f3bf 8f6f 	isb	sy
 8006304:	f3bf 8f4f 	dsb	sy
 8006308:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800630a:	bf00      	nop
 800630c:	e7fe      	b.n	800630c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d103      	bne.n	800631c <xQueueGenericSend+0x40>
 8006314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006318:	2b00      	cmp	r3, #0
 800631a:	d101      	bne.n	8006320 <xQueueGenericSend+0x44>
 800631c:	2301      	movs	r3, #1
 800631e:	e000      	b.n	8006322 <xQueueGenericSend+0x46>
 8006320:	2300      	movs	r3, #0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d10a      	bne.n	800633c <xQueueGenericSend+0x60>
	__asm volatile
 8006326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800632a:	f383 8811 	msr	BASEPRI, r3
 800632e:	f3bf 8f6f 	isb	sy
 8006332:	f3bf 8f4f 	dsb	sy
 8006336:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006338:	bf00      	nop
 800633a:	e7fe      	b.n	800633a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	2b02      	cmp	r3, #2
 8006340:	d103      	bne.n	800634a <xQueueGenericSend+0x6e>
 8006342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006346:	2b01      	cmp	r3, #1
 8006348:	d101      	bne.n	800634e <xQueueGenericSend+0x72>
 800634a:	2301      	movs	r3, #1
 800634c:	e000      	b.n	8006350 <xQueueGenericSend+0x74>
 800634e:	2300      	movs	r3, #0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d10a      	bne.n	800636a <xQueueGenericSend+0x8e>
	__asm volatile
 8006354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006358:	f383 8811 	msr	BASEPRI, r3
 800635c:	f3bf 8f6f 	isb	sy
 8006360:	f3bf 8f4f 	dsb	sy
 8006364:	623b      	str	r3, [r7, #32]
}
 8006366:	bf00      	nop
 8006368:	e7fe      	b.n	8006368 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800636a:	f000 ff79 	bl	8007260 <xTaskGetSchedulerState>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d102      	bne.n	800637a <xQueueGenericSend+0x9e>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d101      	bne.n	800637e <xQueueGenericSend+0xa2>
 800637a:	2301      	movs	r3, #1
 800637c:	e000      	b.n	8006380 <xQueueGenericSend+0xa4>
 800637e:	2300      	movs	r3, #0
 8006380:	2b00      	cmp	r3, #0
 8006382:	d10a      	bne.n	800639a <xQueueGenericSend+0xbe>
	__asm volatile
 8006384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006388:	f383 8811 	msr	BASEPRI, r3
 800638c:	f3bf 8f6f 	isb	sy
 8006390:	f3bf 8f4f 	dsb	sy
 8006394:	61fb      	str	r3, [r7, #28]
}
 8006396:	bf00      	nop
 8006398:	e7fe      	b.n	8006398 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800639a:	f001 f99b 	bl	80076d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800639e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d302      	bcc.n	80063b0 <xQueueGenericSend+0xd4>
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	d129      	bne.n	8006404 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80063b0:	683a      	ldr	r2, [r7, #0]
 80063b2:	68b9      	ldr	r1, [r7, #8]
 80063b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063b6:	f000 f88f 	bl	80064d8 <prvCopyDataToQueue>
 80063ba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d010      	beq.n	80063e6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c6:	3324      	adds	r3, #36	; 0x24
 80063c8:	4618      	mov	r0, r3
 80063ca:	f000 fd89 	bl	8006ee0 <xTaskRemoveFromEventList>
 80063ce:	4603      	mov	r3, r0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d013      	beq.n	80063fc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80063d4:	4b3f      	ldr	r3, [pc, #252]	; (80064d4 <xQueueGenericSend+0x1f8>)
 80063d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063da:	601a      	str	r2, [r3, #0]
 80063dc:	f3bf 8f4f 	dsb	sy
 80063e0:	f3bf 8f6f 	isb	sy
 80063e4:	e00a      	b.n	80063fc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80063e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d007      	beq.n	80063fc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80063ec:	4b39      	ldr	r3, [pc, #228]	; (80064d4 <xQueueGenericSend+0x1f8>)
 80063ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063f2:	601a      	str	r2, [r3, #0]
 80063f4:	f3bf 8f4f 	dsb	sy
 80063f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80063fc:	f001 f99a 	bl	8007734 <vPortExitCritical>
				return pdPASS;
 8006400:	2301      	movs	r3, #1
 8006402:	e063      	b.n	80064cc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d103      	bne.n	8006412 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800640a:	f001 f993 	bl	8007734 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800640e:	2300      	movs	r3, #0
 8006410:	e05c      	b.n	80064cc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006414:	2b00      	cmp	r3, #0
 8006416:	d106      	bne.n	8006426 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006418:	f107 0314 	add.w	r3, r7, #20
 800641c:	4618      	mov	r0, r3
 800641e:	f000 fdc1 	bl	8006fa4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006422:	2301      	movs	r3, #1
 8006424:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006426:	f001 f985 	bl	8007734 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800642a:	f000 fb71 	bl	8006b10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800642e:	f001 f951 	bl	80076d4 <vPortEnterCritical>
 8006432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006434:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006438:	b25b      	sxtb	r3, r3
 800643a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800643e:	d103      	bne.n	8006448 <xQueueGenericSend+0x16c>
 8006440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006442:	2200      	movs	r2, #0
 8006444:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800644e:	b25b      	sxtb	r3, r3
 8006450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006454:	d103      	bne.n	800645e <xQueueGenericSend+0x182>
 8006456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006458:	2200      	movs	r2, #0
 800645a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800645e:	f001 f969 	bl	8007734 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006462:	1d3a      	adds	r2, r7, #4
 8006464:	f107 0314 	add.w	r3, r7, #20
 8006468:	4611      	mov	r1, r2
 800646a:	4618      	mov	r0, r3
 800646c:	f000 fdb0 	bl	8006fd0 <xTaskCheckForTimeOut>
 8006470:	4603      	mov	r3, r0
 8006472:	2b00      	cmp	r3, #0
 8006474:	d124      	bne.n	80064c0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006476:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006478:	f000 f8ea 	bl	8006650 <prvIsQueueFull>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d018      	beq.n	80064b4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006484:	3310      	adds	r3, #16
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	4611      	mov	r1, r2
 800648a:	4618      	mov	r0, r3
 800648c:	f000 fd04 	bl	8006e98 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006490:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006492:	f000 f88b 	bl	80065ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006496:	f000 fb49 	bl	8006b2c <xTaskResumeAll>
 800649a:	4603      	mov	r3, r0
 800649c:	2b00      	cmp	r3, #0
 800649e:	f47f af7c 	bne.w	800639a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80064a2:	4b0c      	ldr	r3, [pc, #48]	; (80064d4 <xQueueGenericSend+0x1f8>)
 80064a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064a8:	601a      	str	r2, [r3, #0]
 80064aa:	f3bf 8f4f 	dsb	sy
 80064ae:	f3bf 8f6f 	isb	sy
 80064b2:	e772      	b.n	800639a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80064b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064b6:	f000 f879 	bl	80065ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80064ba:	f000 fb37 	bl	8006b2c <xTaskResumeAll>
 80064be:	e76c      	b.n	800639a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80064c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064c2:	f000 f873 	bl	80065ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80064c6:	f000 fb31 	bl	8006b2c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80064ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3738      	adds	r7, #56	; 0x38
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}
 80064d4:	e000ed04 	.word	0xe000ed04

080064d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b086      	sub	sp, #24
 80064dc:	af00      	add	r7, sp, #0
 80064de:	60f8      	str	r0, [r7, #12]
 80064e0:	60b9      	str	r1, [r7, #8]
 80064e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80064e4:	2300      	movs	r3, #0
 80064e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d10d      	bne.n	8006512 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d14d      	bne.n	800659a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	4618      	mov	r0, r3
 8006504:	f000 feca 	bl	800729c <xTaskPriorityDisinherit>
 8006508:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2200      	movs	r2, #0
 800650e:	609a      	str	r2, [r3, #8]
 8006510:	e043      	b.n	800659a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d119      	bne.n	800654c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6858      	ldr	r0, [r3, #4]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006520:	461a      	mov	r2, r3
 8006522:	68b9      	ldr	r1, [r7, #8]
 8006524:	f001 fbc8 	bl	8007cb8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	685a      	ldr	r2, [r3, #4]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006530:	441a      	add	r2, r3
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	685a      	ldr	r2, [r3, #4]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	429a      	cmp	r2, r3
 8006540:	d32b      	bcc.n	800659a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	605a      	str	r2, [r3, #4]
 800654a:	e026      	b.n	800659a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	68d8      	ldr	r0, [r3, #12]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006554:	461a      	mov	r2, r3
 8006556:	68b9      	ldr	r1, [r7, #8]
 8006558:	f001 fbae 	bl	8007cb8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	68da      	ldr	r2, [r3, #12]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006564:	425b      	negs	r3, r3
 8006566:	441a      	add	r2, r3
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	68da      	ldr	r2, [r3, #12]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	429a      	cmp	r2, r3
 8006576:	d207      	bcs.n	8006588 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	689a      	ldr	r2, [r3, #8]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006580:	425b      	negs	r3, r3
 8006582:	441a      	add	r2, r3
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2b02      	cmp	r3, #2
 800658c:	d105      	bne.n	800659a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d002      	beq.n	800659a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	3b01      	subs	r3, #1
 8006598:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	1c5a      	adds	r2, r3, #1
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80065a2:	697b      	ldr	r3, [r7, #20]
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3718      	adds	r7, #24
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b084      	sub	sp, #16
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80065b4:	f001 f88e 	bl	80076d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80065c0:	e011      	b.n	80065e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d012      	beq.n	80065f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	3324      	adds	r3, #36	; 0x24
 80065ce:	4618      	mov	r0, r3
 80065d0:	f000 fc86 	bl	8006ee0 <xTaskRemoveFromEventList>
 80065d4:	4603      	mov	r3, r0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d001      	beq.n	80065de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80065da:	f000 fd5b 	bl	8007094 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80065de:	7bfb      	ldrb	r3, [r7, #15]
 80065e0:	3b01      	subs	r3, #1
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80065e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	dce9      	bgt.n	80065c2 <prvUnlockQueue+0x16>
 80065ee:	e000      	b.n	80065f2 <prvUnlockQueue+0x46>
					break;
 80065f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	22ff      	movs	r2, #255	; 0xff
 80065f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80065fa:	f001 f89b 	bl	8007734 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80065fe:	f001 f869 	bl	80076d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006608:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800660a:	e011      	b.n	8006630 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	691b      	ldr	r3, [r3, #16]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d012      	beq.n	800663a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	3310      	adds	r3, #16
 8006618:	4618      	mov	r0, r3
 800661a:	f000 fc61 	bl	8006ee0 <xTaskRemoveFromEventList>
 800661e:	4603      	mov	r3, r0
 8006620:	2b00      	cmp	r3, #0
 8006622:	d001      	beq.n	8006628 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006624:	f000 fd36 	bl	8007094 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006628:	7bbb      	ldrb	r3, [r7, #14]
 800662a:	3b01      	subs	r3, #1
 800662c:	b2db      	uxtb	r3, r3
 800662e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006630:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006634:	2b00      	cmp	r3, #0
 8006636:	dce9      	bgt.n	800660c <prvUnlockQueue+0x60>
 8006638:	e000      	b.n	800663c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800663a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	22ff      	movs	r2, #255	; 0xff
 8006640:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006644:	f001 f876 	bl	8007734 <vPortExitCritical>
}
 8006648:	bf00      	nop
 800664a:	3710      	adds	r7, #16
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006658:	f001 f83c 	bl	80076d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006664:	429a      	cmp	r2, r3
 8006666:	d102      	bne.n	800666e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006668:	2301      	movs	r3, #1
 800666a:	60fb      	str	r3, [r7, #12]
 800666c:	e001      	b.n	8006672 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800666e:	2300      	movs	r3, #0
 8006670:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006672:	f001 f85f 	bl	8007734 <vPortExitCritical>

	return xReturn;
 8006676:	68fb      	ldr	r3, [r7, #12]
}
 8006678:	4618      	mov	r0, r3
 800667a:	3710      	adds	r7, #16
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006680:	b580      	push	{r7, lr}
 8006682:	b08e      	sub	sp, #56	; 0x38
 8006684:	af04      	add	r7, sp, #16
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	60b9      	str	r1, [r7, #8]
 800668a:	607a      	str	r2, [r7, #4]
 800668c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800668e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006690:	2b00      	cmp	r3, #0
 8006692:	d10a      	bne.n	80066aa <xTaskCreateStatic+0x2a>
	__asm volatile
 8006694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006698:	f383 8811 	msr	BASEPRI, r3
 800669c:	f3bf 8f6f 	isb	sy
 80066a0:	f3bf 8f4f 	dsb	sy
 80066a4:	623b      	str	r3, [r7, #32]
}
 80066a6:	bf00      	nop
 80066a8:	e7fe      	b.n	80066a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80066aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d10a      	bne.n	80066c6 <xTaskCreateStatic+0x46>
	__asm volatile
 80066b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b4:	f383 8811 	msr	BASEPRI, r3
 80066b8:	f3bf 8f6f 	isb	sy
 80066bc:	f3bf 8f4f 	dsb	sy
 80066c0:	61fb      	str	r3, [r7, #28]
}
 80066c2:	bf00      	nop
 80066c4:	e7fe      	b.n	80066c4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80066c6:	23b4      	movs	r3, #180	; 0xb4
 80066c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	2bb4      	cmp	r3, #180	; 0xb4
 80066ce:	d00a      	beq.n	80066e6 <xTaskCreateStatic+0x66>
	__asm volatile
 80066d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d4:	f383 8811 	msr	BASEPRI, r3
 80066d8:	f3bf 8f6f 	isb	sy
 80066dc:	f3bf 8f4f 	dsb	sy
 80066e0:	61bb      	str	r3, [r7, #24]
}
 80066e2:	bf00      	nop
 80066e4:	e7fe      	b.n	80066e4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80066e6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80066e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d01e      	beq.n	800672c <xTaskCreateStatic+0xac>
 80066ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d01b      	beq.n	800672c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80066f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80066f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066fc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80066fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006700:	2202      	movs	r2, #2
 8006702:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006706:	2300      	movs	r3, #0
 8006708:	9303      	str	r3, [sp, #12]
 800670a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670c:	9302      	str	r3, [sp, #8]
 800670e:	f107 0314 	add.w	r3, r7, #20
 8006712:	9301      	str	r3, [sp, #4]
 8006714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006716:	9300      	str	r3, [sp, #0]
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	68b9      	ldr	r1, [r7, #8]
 800671e:	68f8      	ldr	r0, [r7, #12]
 8006720:	f000 f850 	bl	80067c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006724:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006726:	f000 f8eb 	bl	8006900 <prvAddNewTaskToReadyList>
 800672a:	e001      	b.n	8006730 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800672c:	2300      	movs	r3, #0
 800672e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006730:	697b      	ldr	r3, [r7, #20]
	}
 8006732:	4618      	mov	r0, r3
 8006734:	3728      	adds	r7, #40	; 0x28
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}

0800673a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800673a:	b580      	push	{r7, lr}
 800673c:	b08c      	sub	sp, #48	; 0x30
 800673e:	af04      	add	r7, sp, #16
 8006740:	60f8      	str	r0, [r7, #12]
 8006742:	60b9      	str	r1, [r7, #8]
 8006744:	603b      	str	r3, [r7, #0]
 8006746:	4613      	mov	r3, r2
 8006748:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800674a:	88fb      	ldrh	r3, [r7, #6]
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	4618      	mov	r0, r3
 8006750:	f001 f8a2 	bl	8007898 <pvPortMalloc>
 8006754:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d00e      	beq.n	800677a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800675c:	20b4      	movs	r0, #180	; 0xb4
 800675e:	f001 f89b 	bl	8007898 <pvPortMalloc>
 8006762:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d003      	beq.n	8006772 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	697a      	ldr	r2, [r7, #20]
 800676e:	631a      	str	r2, [r3, #48]	; 0x30
 8006770:	e005      	b.n	800677e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006772:	6978      	ldr	r0, [r7, #20]
 8006774:	f001 f95c 	bl	8007a30 <vPortFree>
 8006778:	e001      	b.n	800677e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800677a:	2300      	movs	r3, #0
 800677c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800677e:	69fb      	ldr	r3, [r7, #28]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d017      	beq.n	80067b4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	2200      	movs	r2, #0
 8006788:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800678c:	88fa      	ldrh	r2, [r7, #6]
 800678e:	2300      	movs	r3, #0
 8006790:	9303      	str	r3, [sp, #12]
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	9302      	str	r3, [sp, #8]
 8006796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006798:	9301      	str	r3, [sp, #4]
 800679a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800679c:	9300      	str	r3, [sp, #0]
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	68b9      	ldr	r1, [r7, #8]
 80067a2:	68f8      	ldr	r0, [r7, #12]
 80067a4:	f000 f80e 	bl	80067c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80067a8:	69f8      	ldr	r0, [r7, #28]
 80067aa:	f000 f8a9 	bl	8006900 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80067ae:	2301      	movs	r3, #1
 80067b0:	61bb      	str	r3, [r7, #24]
 80067b2:	e002      	b.n	80067ba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80067b4:	f04f 33ff 	mov.w	r3, #4294967295
 80067b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80067ba:	69bb      	ldr	r3, [r7, #24]
	}
 80067bc:	4618      	mov	r0, r3
 80067be:	3720      	adds	r7, #32
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b088      	sub	sp, #32
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	607a      	str	r2, [r7, #4]
 80067d0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80067d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80067dc:	3b01      	subs	r3, #1
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	4413      	add	r3, r2
 80067e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80067e4:	69bb      	ldr	r3, [r7, #24]
 80067e6:	f023 0307 	bic.w	r3, r3, #7
 80067ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80067ec:	69bb      	ldr	r3, [r7, #24]
 80067ee:	f003 0307 	and.w	r3, r3, #7
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d00a      	beq.n	800680c <prvInitialiseNewTask+0x48>
	__asm volatile
 80067f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067fa:	f383 8811 	msr	BASEPRI, r3
 80067fe:	f3bf 8f6f 	isb	sy
 8006802:	f3bf 8f4f 	dsb	sy
 8006806:	617b      	str	r3, [r7, #20]
}
 8006808:	bf00      	nop
 800680a:	e7fe      	b.n	800680a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d01f      	beq.n	8006852 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006812:	2300      	movs	r3, #0
 8006814:	61fb      	str	r3, [r7, #28]
 8006816:	e012      	b.n	800683e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006818:	68ba      	ldr	r2, [r7, #8]
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	4413      	add	r3, r2
 800681e:	7819      	ldrb	r1, [r3, #0]
 8006820:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006822:	69fb      	ldr	r3, [r7, #28]
 8006824:	4413      	add	r3, r2
 8006826:	3334      	adds	r3, #52	; 0x34
 8006828:	460a      	mov	r2, r1
 800682a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800682c:	68ba      	ldr	r2, [r7, #8]
 800682e:	69fb      	ldr	r3, [r7, #28]
 8006830:	4413      	add	r3, r2
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d006      	beq.n	8006846 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006838:	69fb      	ldr	r3, [r7, #28]
 800683a:	3301      	adds	r3, #1
 800683c:	61fb      	str	r3, [r7, #28]
 800683e:	69fb      	ldr	r3, [r7, #28]
 8006840:	2b0f      	cmp	r3, #15
 8006842:	d9e9      	bls.n	8006818 <prvInitialiseNewTask+0x54>
 8006844:	e000      	b.n	8006848 <prvInitialiseNewTask+0x84>
			{
				break;
 8006846:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800684a:	2200      	movs	r2, #0
 800684c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006850:	e003      	b.n	800685a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006854:	2200      	movs	r2, #0
 8006856:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800685a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685c:	2b06      	cmp	r3, #6
 800685e:	d901      	bls.n	8006864 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006860:	2306      	movs	r3, #6
 8006862:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006866:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006868:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800686a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800686c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800686e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006872:	2200      	movs	r2, #0
 8006874:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006878:	3304      	adds	r3, #4
 800687a:	4618      	mov	r0, r3
 800687c:	f7ff fb13 	bl	8005ea6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006882:	3318      	adds	r3, #24
 8006884:	4618      	mov	r0, r3
 8006886:	f7ff fb0e 	bl	8005ea6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800688a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800688c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800688e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006892:	f1c3 0207 	rsb	r2, r3, #7
 8006896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006898:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800689a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800689c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800689e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80068a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a2:	2200      	movs	r2, #0
 80068a4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80068a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068aa:	2200      	movs	r2, #0
 80068ac:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80068b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b2:	334c      	adds	r3, #76	; 0x4c
 80068b4:	2260      	movs	r2, #96	; 0x60
 80068b6:	2100      	movs	r1, #0
 80068b8:	4618      	mov	r0, r3
 80068ba:	f001 fa0b 	bl	8007cd4 <memset>
 80068be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c0:	4a0c      	ldr	r2, [pc, #48]	; (80068f4 <prvInitialiseNewTask+0x130>)
 80068c2:	651a      	str	r2, [r3, #80]	; 0x50
 80068c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c6:	4a0c      	ldr	r2, [pc, #48]	; (80068f8 <prvInitialiseNewTask+0x134>)
 80068c8:	655a      	str	r2, [r3, #84]	; 0x54
 80068ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068cc:	4a0b      	ldr	r2, [pc, #44]	; (80068fc <prvInitialiseNewTask+0x138>)
 80068ce:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80068d0:	683a      	ldr	r2, [r7, #0]
 80068d2:	68f9      	ldr	r1, [r7, #12]
 80068d4:	69b8      	ldr	r0, [r7, #24]
 80068d6:	f000 fdcd 	bl	8007474 <pxPortInitialiseStack>
 80068da:	4602      	mov	r2, r0
 80068dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068de:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80068e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d002      	beq.n	80068ec <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80068e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068ea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068ec:	bf00      	nop
 80068ee:	3720      	adds	r7, #32
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	08007f48 	.word	0x08007f48
 80068f8:	08007f68 	.word	0x08007f68
 80068fc:	08007f28 	.word	0x08007f28

08006900 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b082      	sub	sp, #8
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006908:	f000 fee4 	bl	80076d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800690c:	4b2a      	ldr	r3, [pc, #168]	; (80069b8 <prvAddNewTaskToReadyList+0xb8>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	3301      	adds	r3, #1
 8006912:	4a29      	ldr	r2, [pc, #164]	; (80069b8 <prvAddNewTaskToReadyList+0xb8>)
 8006914:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006916:	4b29      	ldr	r3, [pc, #164]	; (80069bc <prvAddNewTaskToReadyList+0xbc>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d109      	bne.n	8006932 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800691e:	4a27      	ldr	r2, [pc, #156]	; (80069bc <prvAddNewTaskToReadyList+0xbc>)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006924:	4b24      	ldr	r3, [pc, #144]	; (80069b8 <prvAddNewTaskToReadyList+0xb8>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	2b01      	cmp	r3, #1
 800692a:	d110      	bne.n	800694e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800692c:	f000 fbd6 	bl	80070dc <prvInitialiseTaskLists>
 8006930:	e00d      	b.n	800694e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006932:	4b23      	ldr	r3, [pc, #140]	; (80069c0 <prvAddNewTaskToReadyList+0xc0>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d109      	bne.n	800694e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800693a:	4b20      	ldr	r3, [pc, #128]	; (80069bc <prvAddNewTaskToReadyList+0xbc>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006944:	429a      	cmp	r2, r3
 8006946:	d802      	bhi.n	800694e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006948:	4a1c      	ldr	r2, [pc, #112]	; (80069bc <prvAddNewTaskToReadyList+0xbc>)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800694e:	4b1d      	ldr	r3, [pc, #116]	; (80069c4 <prvAddNewTaskToReadyList+0xc4>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	3301      	adds	r3, #1
 8006954:	4a1b      	ldr	r2, [pc, #108]	; (80069c4 <prvAddNewTaskToReadyList+0xc4>)
 8006956:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800695c:	2201      	movs	r2, #1
 800695e:	409a      	lsls	r2, r3
 8006960:	4b19      	ldr	r3, [pc, #100]	; (80069c8 <prvAddNewTaskToReadyList+0xc8>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4313      	orrs	r3, r2
 8006966:	4a18      	ldr	r2, [pc, #96]	; (80069c8 <prvAddNewTaskToReadyList+0xc8>)
 8006968:	6013      	str	r3, [r2, #0]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800696e:	4613      	mov	r3, r2
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	4413      	add	r3, r2
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	4a15      	ldr	r2, [pc, #84]	; (80069cc <prvAddNewTaskToReadyList+0xcc>)
 8006978:	441a      	add	r2, r3
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	3304      	adds	r3, #4
 800697e:	4619      	mov	r1, r3
 8006980:	4610      	mov	r0, r2
 8006982:	f7ff fa9d 	bl	8005ec0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006986:	f000 fed5 	bl	8007734 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800698a:	4b0d      	ldr	r3, [pc, #52]	; (80069c0 <prvAddNewTaskToReadyList+0xc0>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d00e      	beq.n	80069b0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006992:	4b0a      	ldr	r3, [pc, #40]	; (80069bc <prvAddNewTaskToReadyList+0xbc>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800699c:	429a      	cmp	r2, r3
 800699e:	d207      	bcs.n	80069b0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80069a0:	4b0b      	ldr	r3, [pc, #44]	; (80069d0 <prvAddNewTaskToReadyList+0xd0>)
 80069a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069a6:	601a      	str	r2, [r3, #0]
 80069a8:	f3bf 8f4f 	dsb	sy
 80069ac:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80069b0:	bf00      	nop
 80069b2:	3708      	adds	r7, #8
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}
 80069b8:	20000668 	.word	0x20000668
 80069bc:	20000568 	.word	0x20000568
 80069c0:	20000674 	.word	0x20000674
 80069c4:	20000684 	.word	0x20000684
 80069c8:	20000670 	.word	0x20000670
 80069cc:	2000056c 	.word	0x2000056c
 80069d0:	e000ed04 	.word	0xe000ed04

080069d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80069dc:	2300      	movs	r3, #0
 80069de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d017      	beq.n	8006a16 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80069e6:	4b13      	ldr	r3, [pc, #76]	; (8006a34 <vTaskDelay+0x60>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d00a      	beq.n	8006a04 <vTaskDelay+0x30>
	__asm volatile
 80069ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f2:	f383 8811 	msr	BASEPRI, r3
 80069f6:	f3bf 8f6f 	isb	sy
 80069fa:	f3bf 8f4f 	dsb	sy
 80069fe:	60bb      	str	r3, [r7, #8]
}
 8006a00:	bf00      	nop
 8006a02:	e7fe      	b.n	8006a02 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006a04:	f000 f884 	bl	8006b10 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006a08:	2100      	movs	r1, #0
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 fccc 	bl	80073a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006a10:	f000 f88c 	bl	8006b2c <xTaskResumeAll>
 8006a14:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d107      	bne.n	8006a2c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006a1c:	4b06      	ldr	r3, [pc, #24]	; (8006a38 <vTaskDelay+0x64>)
 8006a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a22:	601a      	str	r2, [r3, #0]
 8006a24:	f3bf 8f4f 	dsb	sy
 8006a28:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006a2c:	bf00      	nop
 8006a2e:	3710      	adds	r7, #16
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}
 8006a34:	20000690 	.word	0x20000690
 8006a38:	e000ed04 	.word	0xe000ed04

08006a3c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b08a      	sub	sp, #40	; 0x28
 8006a40:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006a42:	2300      	movs	r3, #0
 8006a44:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006a46:	2300      	movs	r3, #0
 8006a48:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006a4a:	463a      	mov	r2, r7
 8006a4c:	1d39      	adds	r1, r7, #4
 8006a4e:	f107 0308 	add.w	r3, r7, #8
 8006a52:	4618      	mov	r0, r3
 8006a54:	f7f9 fd38 	bl	80004c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006a58:	6839      	ldr	r1, [r7, #0]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	68ba      	ldr	r2, [r7, #8]
 8006a5e:	9202      	str	r2, [sp, #8]
 8006a60:	9301      	str	r3, [sp, #4]
 8006a62:	2300      	movs	r3, #0
 8006a64:	9300      	str	r3, [sp, #0]
 8006a66:	2300      	movs	r3, #0
 8006a68:	460a      	mov	r2, r1
 8006a6a:	4921      	ldr	r1, [pc, #132]	; (8006af0 <vTaskStartScheduler+0xb4>)
 8006a6c:	4821      	ldr	r0, [pc, #132]	; (8006af4 <vTaskStartScheduler+0xb8>)
 8006a6e:	f7ff fe07 	bl	8006680 <xTaskCreateStatic>
 8006a72:	4603      	mov	r3, r0
 8006a74:	4a20      	ldr	r2, [pc, #128]	; (8006af8 <vTaskStartScheduler+0xbc>)
 8006a76:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006a78:	4b1f      	ldr	r3, [pc, #124]	; (8006af8 <vTaskStartScheduler+0xbc>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d002      	beq.n	8006a86 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006a80:	2301      	movs	r3, #1
 8006a82:	617b      	str	r3, [r7, #20]
 8006a84:	e001      	b.n	8006a8a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006a86:	2300      	movs	r3, #0
 8006a88:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d11b      	bne.n	8006ac8 <vTaskStartScheduler+0x8c>
	__asm volatile
 8006a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a94:	f383 8811 	msr	BASEPRI, r3
 8006a98:	f3bf 8f6f 	isb	sy
 8006a9c:	f3bf 8f4f 	dsb	sy
 8006aa0:	613b      	str	r3, [r7, #16]
}
 8006aa2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006aa4:	4b15      	ldr	r3, [pc, #84]	; (8006afc <vTaskStartScheduler+0xc0>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	334c      	adds	r3, #76	; 0x4c
 8006aaa:	4a15      	ldr	r2, [pc, #84]	; (8006b00 <vTaskStartScheduler+0xc4>)
 8006aac:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006aae:	4b15      	ldr	r3, [pc, #84]	; (8006b04 <vTaskStartScheduler+0xc8>)
 8006ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ab4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006ab6:	4b14      	ldr	r3, [pc, #80]	; (8006b08 <vTaskStartScheduler+0xcc>)
 8006ab8:	2201      	movs	r2, #1
 8006aba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006abc:	4b13      	ldr	r3, [pc, #76]	; (8006b0c <vTaskStartScheduler+0xd0>)
 8006abe:	2200      	movs	r2, #0
 8006ac0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006ac2:	f000 fd65 	bl	8007590 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006ac6:	e00e      	b.n	8006ae6 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ace:	d10a      	bne.n	8006ae6 <vTaskStartScheduler+0xaa>
	__asm volatile
 8006ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad4:	f383 8811 	msr	BASEPRI, r3
 8006ad8:	f3bf 8f6f 	isb	sy
 8006adc:	f3bf 8f4f 	dsb	sy
 8006ae0:	60fb      	str	r3, [r7, #12]
}
 8006ae2:	bf00      	nop
 8006ae4:	e7fe      	b.n	8006ae4 <vTaskStartScheduler+0xa8>
}
 8006ae6:	bf00      	nop
 8006ae8:	3718      	adds	r7, #24
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	08007f08 	.word	0x08007f08
 8006af4:	080070ad 	.word	0x080070ad
 8006af8:	2000068c 	.word	0x2000068c
 8006afc:	20000568 	.word	0x20000568
 8006b00:	20000010 	.word	0x20000010
 8006b04:	20000688 	.word	0x20000688
 8006b08:	20000674 	.word	0x20000674
 8006b0c:	2000066c 	.word	0x2000066c

08006b10 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006b10:	b480      	push	{r7}
 8006b12:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006b14:	4b04      	ldr	r3, [pc, #16]	; (8006b28 <vTaskSuspendAll+0x18>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	3301      	adds	r3, #1
 8006b1a:	4a03      	ldr	r2, [pc, #12]	; (8006b28 <vTaskSuspendAll+0x18>)
 8006b1c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006b1e:	bf00      	nop
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr
 8006b28:	20000690 	.word	0x20000690

08006b2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006b32:	2300      	movs	r3, #0
 8006b34:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006b36:	2300      	movs	r3, #0
 8006b38:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006b3a:	4b41      	ldr	r3, [pc, #260]	; (8006c40 <xTaskResumeAll+0x114>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d10a      	bne.n	8006b58 <xTaskResumeAll+0x2c>
	__asm volatile
 8006b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b46:	f383 8811 	msr	BASEPRI, r3
 8006b4a:	f3bf 8f6f 	isb	sy
 8006b4e:	f3bf 8f4f 	dsb	sy
 8006b52:	603b      	str	r3, [r7, #0]
}
 8006b54:	bf00      	nop
 8006b56:	e7fe      	b.n	8006b56 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006b58:	f000 fdbc 	bl	80076d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006b5c:	4b38      	ldr	r3, [pc, #224]	; (8006c40 <xTaskResumeAll+0x114>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	3b01      	subs	r3, #1
 8006b62:	4a37      	ldr	r2, [pc, #220]	; (8006c40 <xTaskResumeAll+0x114>)
 8006b64:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b66:	4b36      	ldr	r3, [pc, #216]	; (8006c40 <xTaskResumeAll+0x114>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d161      	bne.n	8006c32 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006b6e:	4b35      	ldr	r3, [pc, #212]	; (8006c44 <xTaskResumeAll+0x118>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d05d      	beq.n	8006c32 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b76:	e02e      	b.n	8006bd6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b78:	4b33      	ldr	r3, [pc, #204]	; (8006c48 <xTaskResumeAll+0x11c>)
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	3318      	adds	r3, #24
 8006b84:	4618      	mov	r0, r3
 8006b86:	f7ff f9f8 	bl	8005f7a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	3304      	adds	r3, #4
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f7ff f9f3 	bl	8005f7a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b98:	2201      	movs	r2, #1
 8006b9a:	409a      	lsls	r2, r3
 8006b9c:	4b2b      	ldr	r3, [pc, #172]	; (8006c4c <xTaskResumeAll+0x120>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	4a2a      	ldr	r2, [pc, #168]	; (8006c4c <xTaskResumeAll+0x120>)
 8006ba4:	6013      	str	r3, [r2, #0]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006baa:	4613      	mov	r3, r2
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	4413      	add	r3, r2
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	4a27      	ldr	r2, [pc, #156]	; (8006c50 <xTaskResumeAll+0x124>)
 8006bb4:	441a      	add	r2, r3
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	3304      	adds	r3, #4
 8006bba:	4619      	mov	r1, r3
 8006bbc:	4610      	mov	r0, r2
 8006bbe:	f7ff f97f 	bl	8005ec0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bc6:	4b23      	ldr	r3, [pc, #140]	; (8006c54 <xTaskResumeAll+0x128>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d302      	bcc.n	8006bd6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006bd0:	4b21      	ldr	r3, [pc, #132]	; (8006c58 <xTaskResumeAll+0x12c>)
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006bd6:	4b1c      	ldr	r3, [pc, #112]	; (8006c48 <xTaskResumeAll+0x11c>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d1cc      	bne.n	8006b78 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d001      	beq.n	8006be8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006be4:	f000 fb1c 	bl	8007220 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006be8:	4b1c      	ldr	r3, [pc, #112]	; (8006c5c <xTaskResumeAll+0x130>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d010      	beq.n	8006c16 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006bf4:	f000 f836 	bl	8006c64 <xTaskIncrementTick>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d002      	beq.n	8006c04 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006bfe:	4b16      	ldr	r3, [pc, #88]	; (8006c58 <xTaskResumeAll+0x12c>)
 8006c00:	2201      	movs	r2, #1
 8006c02:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	3b01      	subs	r3, #1
 8006c08:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d1f1      	bne.n	8006bf4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006c10:	4b12      	ldr	r3, [pc, #72]	; (8006c5c <xTaskResumeAll+0x130>)
 8006c12:	2200      	movs	r2, #0
 8006c14:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006c16:	4b10      	ldr	r3, [pc, #64]	; (8006c58 <xTaskResumeAll+0x12c>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d009      	beq.n	8006c32 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006c22:	4b0f      	ldr	r3, [pc, #60]	; (8006c60 <xTaskResumeAll+0x134>)
 8006c24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c28:	601a      	str	r2, [r3, #0]
 8006c2a:	f3bf 8f4f 	dsb	sy
 8006c2e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c32:	f000 fd7f 	bl	8007734 <vPortExitCritical>

	return xAlreadyYielded;
 8006c36:	68bb      	ldr	r3, [r7, #8]
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3710      	adds	r7, #16
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	20000690 	.word	0x20000690
 8006c44:	20000668 	.word	0x20000668
 8006c48:	20000628 	.word	0x20000628
 8006c4c:	20000670 	.word	0x20000670
 8006c50:	2000056c 	.word	0x2000056c
 8006c54:	20000568 	.word	0x20000568
 8006c58:	2000067c 	.word	0x2000067c
 8006c5c:	20000678 	.word	0x20000678
 8006c60:	e000ed04 	.word	0xe000ed04

08006c64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b086      	sub	sp, #24
 8006c68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c6e:	4b4e      	ldr	r3, [pc, #312]	; (8006da8 <xTaskIncrementTick+0x144>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	f040 808e 	bne.w	8006d94 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006c78:	4b4c      	ldr	r3, [pc, #304]	; (8006dac <xTaskIncrementTick+0x148>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006c80:	4a4a      	ldr	r2, [pc, #296]	; (8006dac <xTaskIncrementTick+0x148>)
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d120      	bne.n	8006cce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006c8c:	4b48      	ldr	r3, [pc, #288]	; (8006db0 <xTaskIncrementTick+0x14c>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00a      	beq.n	8006cac <xTaskIncrementTick+0x48>
	__asm volatile
 8006c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c9a:	f383 8811 	msr	BASEPRI, r3
 8006c9e:	f3bf 8f6f 	isb	sy
 8006ca2:	f3bf 8f4f 	dsb	sy
 8006ca6:	603b      	str	r3, [r7, #0]
}
 8006ca8:	bf00      	nop
 8006caa:	e7fe      	b.n	8006caa <xTaskIncrementTick+0x46>
 8006cac:	4b40      	ldr	r3, [pc, #256]	; (8006db0 <xTaskIncrementTick+0x14c>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	60fb      	str	r3, [r7, #12]
 8006cb2:	4b40      	ldr	r3, [pc, #256]	; (8006db4 <xTaskIncrementTick+0x150>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a3e      	ldr	r2, [pc, #248]	; (8006db0 <xTaskIncrementTick+0x14c>)
 8006cb8:	6013      	str	r3, [r2, #0]
 8006cba:	4a3e      	ldr	r2, [pc, #248]	; (8006db4 <xTaskIncrementTick+0x150>)
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	6013      	str	r3, [r2, #0]
 8006cc0:	4b3d      	ldr	r3, [pc, #244]	; (8006db8 <xTaskIncrementTick+0x154>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	3301      	adds	r3, #1
 8006cc6:	4a3c      	ldr	r2, [pc, #240]	; (8006db8 <xTaskIncrementTick+0x154>)
 8006cc8:	6013      	str	r3, [r2, #0]
 8006cca:	f000 faa9 	bl	8007220 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006cce:	4b3b      	ldr	r3, [pc, #236]	; (8006dbc <xTaskIncrementTick+0x158>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	693a      	ldr	r2, [r7, #16]
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d348      	bcc.n	8006d6a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006cd8:	4b35      	ldr	r3, [pc, #212]	; (8006db0 <xTaskIncrementTick+0x14c>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d104      	bne.n	8006cec <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ce2:	4b36      	ldr	r3, [pc, #216]	; (8006dbc <xTaskIncrementTick+0x158>)
 8006ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ce8:	601a      	str	r2, [r3, #0]
					break;
 8006cea:	e03e      	b.n	8006d6a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cec:	4b30      	ldr	r3, [pc, #192]	; (8006db0 <xTaskIncrementTick+0x14c>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	68db      	ldr	r3, [r3, #12]
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006cfc:	693a      	ldr	r2, [r7, #16]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d203      	bcs.n	8006d0c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006d04:	4a2d      	ldr	r2, [pc, #180]	; (8006dbc <xTaskIncrementTick+0x158>)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006d0a:	e02e      	b.n	8006d6a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	3304      	adds	r3, #4
 8006d10:	4618      	mov	r0, r3
 8006d12:	f7ff f932 	bl	8005f7a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d004      	beq.n	8006d28 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	3318      	adds	r3, #24
 8006d22:	4618      	mov	r0, r3
 8006d24:	f7ff f929 	bl	8005f7a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	409a      	lsls	r2, r3
 8006d30:	4b23      	ldr	r3, [pc, #140]	; (8006dc0 <xTaskIncrementTick+0x15c>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4313      	orrs	r3, r2
 8006d36:	4a22      	ldr	r2, [pc, #136]	; (8006dc0 <xTaskIncrementTick+0x15c>)
 8006d38:	6013      	str	r3, [r2, #0]
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d3e:	4613      	mov	r3, r2
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	4413      	add	r3, r2
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	4a1f      	ldr	r2, [pc, #124]	; (8006dc4 <xTaskIncrementTick+0x160>)
 8006d48:	441a      	add	r2, r3
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	3304      	adds	r3, #4
 8006d4e:	4619      	mov	r1, r3
 8006d50:	4610      	mov	r0, r2
 8006d52:	f7ff f8b5 	bl	8005ec0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d5a:	4b1b      	ldr	r3, [pc, #108]	; (8006dc8 <xTaskIncrementTick+0x164>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d3b9      	bcc.n	8006cd8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006d64:	2301      	movs	r3, #1
 8006d66:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d68:	e7b6      	b.n	8006cd8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006d6a:	4b17      	ldr	r3, [pc, #92]	; (8006dc8 <xTaskIncrementTick+0x164>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d70:	4914      	ldr	r1, [pc, #80]	; (8006dc4 <xTaskIncrementTick+0x160>)
 8006d72:	4613      	mov	r3, r2
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	4413      	add	r3, r2
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	440b      	add	r3, r1
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d901      	bls.n	8006d86 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006d82:	2301      	movs	r3, #1
 8006d84:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006d86:	4b11      	ldr	r3, [pc, #68]	; (8006dcc <xTaskIncrementTick+0x168>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d007      	beq.n	8006d9e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	617b      	str	r3, [r7, #20]
 8006d92:	e004      	b.n	8006d9e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006d94:	4b0e      	ldr	r3, [pc, #56]	; (8006dd0 <xTaskIncrementTick+0x16c>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	3301      	adds	r3, #1
 8006d9a:	4a0d      	ldr	r2, [pc, #52]	; (8006dd0 <xTaskIncrementTick+0x16c>)
 8006d9c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006d9e:	697b      	ldr	r3, [r7, #20]
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3718      	adds	r7, #24
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	20000690 	.word	0x20000690
 8006dac:	2000066c 	.word	0x2000066c
 8006db0:	20000620 	.word	0x20000620
 8006db4:	20000624 	.word	0x20000624
 8006db8:	20000680 	.word	0x20000680
 8006dbc:	20000688 	.word	0x20000688
 8006dc0:	20000670 	.word	0x20000670
 8006dc4:	2000056c 	.word	0x2000056c
 8006dc8:	20000568 	.word	0x20000568
 8006dcc:	2000067c 	.word	0x2000067c
 8006dd0:	20000678 	.word	0x20000678

08006dd4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b087      	sub	sp, #28
 8006dd8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006dda:	4b29      	ldr	r3, [pc, #164]	; (8006e80 <vTaskSwitchContext+0xac>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d003      	beq.n	8006dea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006de2:	4b28      	ldr	r3, [pc, #160]	; (8006e84 <vTaskSwitchContext+0xb0>)
 8006de4:	2201      	movs	r2, #1
 8006de6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006de8:	e044      	b.n	8006e74 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8006dea:	4b26      	ldr	r3, [pc, #152]	; (8006e84 <vTaskSwitchContext+0xb0>)
 8006dec:	2200      	movs	r2, #0
 8006dee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006df0:	4b25      	ldr	r3, [pc, #148]	; (8006e88 <vTaskSwitchContext+0xb4>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	fab3 f383 	clz	r3, r3
 8006dfc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006dfe:	7afb      	ldrb	r3, [r7, #11]
 8006e00:	f1c3 031f 	rsb	r3, r3, #31
 8006e04:	617b      	str	r3, [r7, #20]
 8006e06:	4921      	ldr	r1, [pc, #132]	; (8006e8c <vTaskSwitchContext+0xb8>)
 8006e08:	697a      	ldr	r2, [r7, #20]
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	4413      	add	r3, r2
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	440b      	add	r3, r1
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d10a      	bne.n	8006e30 <vTaskSwitchContext+0x5c>
	__asm volatile
 8006e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e1e:	f383 8811 	msr	BASEPRI, r3
 8006e22:	f3bf 8f6f 	isb	sy
 8006e26:	f3bf 8f4f 	dsb	sy
 8006e2a:	607b      	str	r3, [r7, #4]
}
 8006e2c:	bf00      	nop
 8006e2e:	e7fe      	b.n	8006e2e <vTaskSwitchContext+0x5a>
 8006e30:	697a      	ldr	r2, [r7, #20]
 8006e32:	4613      	mov	r3, r2
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	4413      	add	r3, r2
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	4a14      	ldr	r2, [pc, #80]	; (8006e8c <vTaskSwitchContext+0xb8>)
 8006e3c:	4413      	add	r3, r2
 8006e3e:	613b      	str	r3, [r7, #16]
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	685a      	ldr	r2, [r3, #4]
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	605a      	str	r2, [r3, #4]
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	685a      	ldr	r2, [r3, #4]
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	3308      	adds	r3, #8
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d104      	bne.n	8006e60 <vTaskSwitchContext+0x8c>
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	685a      	ldr	r2, [r3, #4]
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	605a      	str	r2, [r3, #4]
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	68db      	ldr	r3, [r3, #12]
 8006e66:	4a0a      	ldr	r2, [pc, #40]	; (8006e90 <vTaskSwitchContext+0xbc>)
 8006e68:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006e6a:	4b09      	ldr	r3, [pc, #36]	; (8006e90 <vTaskSwitchContext+0xbc>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	334c      	adds	r3, #76	; 0x4c
 8006e70:	4a08      	ldr	r2, [pc, #32]	; (8006e94 <vTaskSwitchContext+0xc0>)
 8006e72:	6013      	str	r3, [r2, #0]
}
 8006e74:	bf00      	nop
 8006e76:	371c      	adds	r7, #28
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr
 8006e80:	20000690 	.word	0x20000690
 8006e84:	2000067c 	.word	0x2000067c
 8006e88:	20000670 	.word	0x20000670
 8006e8c:	2000056c 	.word	0x2000056c
 8006e90:	20000568 	.word	0x20000568
 8006e94:	20000010 	.word	0x20000010

08006e98 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d10a      	bne.n	8006ebe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eac:	f383 8811 	msr	BASEPRI, r3
 8006eb0:	f3bf 8f6f 	isb	sy
 8006eb4:	f3bf 8f4f 	dsb	sy
 8006eb8:	60fb      	str	r3, [r7, #12]
}
 8006eba:	bf00      	nop
 8006ebc:	e7fe      	b.n	8006ebc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ebe:	4b07      	ldr	r3, [pc, #28]	; (8006edc <vTaskPlaceOnEventList+0x44>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	3318      	adds	r3, #24
 8006ec4:	4619      	mov	r1, r3
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f7ff f81e 	bl	8005f08 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006ecc:	2101      	movs	r1, #1
 8006ece:	6838      	ldr	r0, [r7, #0]
 8006ed0:	f000 fa6a 	bl	80073a8 <prvAddCurrentTaskToDelayedList>
}
 8006ed4:	bf00      	nop
 8006ed6:	3710      	adds	r7, #16
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}
 8006edc:	20000568 	.word	0x20000568

08006ee0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b086      	sub	sp, #24
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d10a      	bne.n	8006f0c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006efa:	f383 8811 	msr	BASEPRI, r3
 8006efe:	f3bf 8f6f 	isb	sy
 8006f02:	f3bf 8f4f 	dsb	sy
 8006f06:	60fb      	str	r3, [r7, #12]
}
 8006f08:	bf00      	nop
 8006f0a:	e7fe      	b.n	8006f0a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	3318      	adds	r3, #24
 8006f10:	4618      	mov	r0, r3
 8006f12:	f7ff f832 	bl	8005f7a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f16:	4b1d      	ldr	r3, [pc, #116]	; (8006f8c <xTaskRemoveFromEventList+0xac>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d11c      	bne.n	8006f58 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	3304      	adds	r3, #4
 8006f22:	4618      	mov	r0, r3
 8006f24:	f7ff f829 	bl	8005f7a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	409a      	lsls	r2, r3
 8006f30:	4b17      	ldr	r3, [pc, #92]	; (8006f90 <xTaskRemoveFromEventList+0xb0>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4313      	orrs	r3, r2
 8006f36:	4a16      	ldr	r2, [pc, #88]	; (8006f90 <xTaskRemoveFromEventList+0xb0>)
 8006f38:	6013      	str	r3, [r2, #0]
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f3e:	4613      	mov	r3, r2
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	4413      	add	r3, r2
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	4a13      	ldr	r2, [pc, #76]	; (8006f94 <xTaskRemoveFromEventList+0xb4>)
 8006f48:	441a      	add	r2, r3
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	3304      	adds	r3, #4
 8006f4e:	4619      	mov	r1, r3
 8006f50:	4610      	mov	r0, r2
 8006f52:	f7fe ffb5 	bl	8005ec0 <vListInsertEnd>
 8006f56:	e005      	b.n	8006f64 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	3318      	adds	r3, #24
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	480e      	ldr	r0, [pc, #56]	; (8006f98 <xTaskRemoveFromEventList+0xb8>)
 8006f60:	f7fe ffae 	bl	8005ec0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f68:	4b0c      	ldr	r3, [pc, #48]	; (8006f9c <xTaskRemoveFromEventList+0xbc>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d905      	bls.n	8006f7e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006f72:	2301      	movs	r3, #1
 8006f74:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006f76:	4b0a      	ldr	r3, [pc, #40]	; (8006fa0 <xTaskRemoveFromEventList+0xc0>)
 8006f78:	2201      	movs	r2, #1
 8006f7a:	601a      	str	r2, [r3, #0]
 8006f7c:	e001      	b.n	8006f82 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006f82:	697b      	ldr	r3, [r7, #20]
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3718      	adds	r7, #24
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}
 8006f8c:	20000690 	.word	0x20000690
 8006f90:	20000670 	.word	0x20000670
 8006f94:	2000056c 	.word	0x2000056c
 8006f98:	20000628 	.word	0x20000628
 8006f9c:	20000568 	.word	0x20000568
 8006fa0:	2000067c 	.word	0x2000067c

08006fa4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006fac:	4b06      	ldr	r3, [pc, #24]	; (8006fc8 <vTaskInternalSetTimeOutState+0x24>)
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006fb4:	4b05      	ldr	r3, [pc, #20]	; (8006fcc <vTaskInternalSetTimeOutState+0x28>)
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	605a      	str	r2, [r3, #4]
}
 8006fbc:	bf00      	nop
 8006fbe:	370c      	adds	r7, #12
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr
 8006fc8:	20000680 	.word	0x20000680
 8006fcc:	2000066c 	.word	0x2000066c

08006fd0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b088      	sub	sp, #32
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d10a      	bne.n	8006ff6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe4:	f383 8811 	msr	BASEPRI, r3
 8006fe8:	f3bf 8f6f 	isb	sy
 8006fec:	f3bf 8f4f 	dsb	sy
 8006ff0:	613b      	str	r3, [r7, #16]
}
 8006ff2:	bf00      	nop
 8006ff4:	e7fe      	b.n	8006ff4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d10a      	bne.n	8007012 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007000:	f383 8811 	msr	BASEPRI, r3
 8007004:	f3bf 8f6f 	isb	sy
 8007008:	f3bf 8f4f 	dsb	sy
 800700c:	60fb      	str	r3, [r7, #12]
}
 800700e:	bf00      	nop
 8007010:	e7fe      	b.n	8007010 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007012:	f000 fb5f 	bl	80076d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007016:	4b1d      	ldr	r3, [pc, #116]	; (800708c <xTaskCheckForTimeOut+0xbc>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	69ba      	ldr	r2, [r7, #24]
 8007022:	1ad3      	subs	r3, r2, r3
 8007024:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800702e:	d102      	bne.n	8007036 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007030:	2300      	movs	r3, #0
 8007032:	61fb      	str	r3, [r7, #28]
 8007034:	e023      	b.n	800707e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	4b15      	ldr	r3, [pc, #84]	; (8007090 <xTaskCheckForTimeOut+0xc0>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	429a      	cmp	r2, r3
 8007040:	d007      	beq.n	8007052 <xTaskCheckForTimeOut+0x82>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	69ba      	ldr	r2, [r7, #24]
 8007048:	429a      	cmp	r2, r3
 800704a:	d302      	bcc.n	8007052 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800704c:	2301      	movs	r3, #1
 800704e:	61fb      	str	r3, [r7, #28]
 8007050:	e015      	b.n	800707e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	697a      	ldr	r2, [r7, #20]
 8007058:	429a      	cmp	r2, r3
 800705a:	d20b      	bcs.n	8007074 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	1ad2      	subs	r2, r2, r3
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f7ff ff9b 	bl	8006fa4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800706e:	2300      	movs	r3, #0
 8007070:	61fb      	str	r3, [r7, #28]
 8007072:	e004      	b.n	800707e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	2200      	movs	r2, #0
 8007078:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800707a:	2301      	movs	r3, #1
 800707c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800707e:	f000 fb59 	bl	8007734 <vPortExitCritical>

	return xReturn;
 8007082:	69fb      	ldr	r3, [r7, #28]
}
 8007084:	4618      	mov	r0, r3
 8007086:	3720      	adds	r7, #32
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}
 800708c:	2000066c 	.word	0x2000066c
 8007090:	20000680 	.word	0x20000680

08007094 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007094:	b480      	push	{r7}
 8007096:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007098:	4b03      	ldr	r3, [pc, #12]	; (80070a8 <vTaskMissedYield+0x14>)
 800709a:	2201      	movs	r2, #1
 800709c:	601a      	str	r2, [r3, #0]
}
 800709e:	bf00      	nop
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr
 80070a8:	2000067c 	.word	0x2000067c

080070ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b082      	sub	sp, #8
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80070b4:	f000 f852 	bl	800715c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80070b8:	4b06      	ldr	r3, [pc, #24]	; (80070d4 <prvIdleTask+0x28>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d9f9      	bls.n	80070b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80070c0:	4b05      	ldr	r3, [pc, #20]	; (80070d8 <prvIdleTask+0x2c>)
 80070c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070c6:	601a      	str	r2, [r3, #0]
 80070c8:	f3bf 8f4f 	dsb	sy
 80070cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80070d0:	e7f0      	b.n	80070b4 <prvIdleTask+0x8>
 80070d2:	bf00      	nop
 80070d4:	2000056c 	.word	0x2000056c
 80070d8:	e000ed04 	.word	0xe000ed04

080070dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b082      	sub	sp, #8
 80070e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80070e2:	2300      	movs	r3, #0
 80070e4:	607b      	str	r3, [r7, #4]
 80070e6:	e00c      	b.n	8007102 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	4613      	mov	r3, r2
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	4413      	add	r3, r2
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	4a12      	ldr	r2, [pc, #72]	; (800713c <prvInitialiseTaskLists+0x60>)
 80070f4:	4413      	add	r3, r2
 80070f6:	4618      	mov	r0, r3
 80070f8:	f7fe feb5 	bl	8005e66 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	3301      	adds	r3, #1
 8007100:	607b      	str	r3, [r7, #4]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2b06      	cmp	r3, #6
 8007106:	d9ef      	bls.n	80070e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007108:	480d      	ldr	r0, [pc, #52]	; (8007140 <prvInitialiseTaskLists+0x64>)
 800710a:	f7fe feac 	bl	8005e66 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800710e:	480d      	ldr	r0, [pc, #52]	; (8007144 <prvInitialiseTaskLists+0x68>)
 8007110:	f7fe fea9 	bl	8005e66 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007114:	480c      	ldr	r0, [pc, #48]	; (8007148 <prvInitialiseTaskLists+0x6c>)
 8007116:	f7fe fea6 	bl	8005e66 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800711a:	480c      	ldr	r0, [pc, #48]	; (800714c <prvInitialiseTaskLists+0x70>)
 800711c:	f7fe fea3 	bl	8005e66 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007120:	480b      	ldr	r0, [pc, #44]	; (8007150 <prvInitialiseTaskLists+0x74>)
 8007122:	f7fe fea0 	bl	8005e66 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007126:	4b0b      	ldr	r3, [pc, #44]	; (8007154 <prvInitialiseTaskLists+0x78>)
 8007128:	4a05      	ldr	r2, [pc, #20]	; (8007140 <prvInitialiseTaskLists+0x64>)
 800712a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800712c:	4b0a      	ldr	r3, [pc, #40]	; (8007158 <prvInitialiseTaskLists+0x7c>)
 800712e:	4a05      	ldr	r2, [pc, #20]	; (8007144 <prvInitialiseTaskLists+0x68>)
 8007130:	601a      	str	r2, [r3, #0]
}
 8007132:	bf00      	nop
 8007134:	3708      	adds	r7, #8
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
 800713a:	bf00      	nop
 800713c:	2000056c 	.word	0x2000056c
 8007140:	200005f8 	.word	0x200005f8
 8007144:	2000060c 	.word	0x2000060c
 8007148:	20000628 	.word	0x20000628
 800714c:	2000063c 	.word	0x2000063c
 8007150:	20000654 	.word	0x20000654
 8007154:	20000620 	.word	0x20000620
 8007158:	20000624 	.word	0x20000624

0800715c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007162:	e019      	b.n	8007198 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007164:	f000 fab6 	bl	80076d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007168:	4b10      	ldr	r3, [pc, #64]	; (80071ac <prvCheckTasksWaitingTermination+0x50>)
 800716a:	68db      	ldr	r3, [r3, #12]
 800716c:	68db      	ldr	r3, [r3, #12]
 800716e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	3304      	adds	r3, #4
 8007174:	4618      	mov	r0, r3
 8007176:	f7fe ff00 	bl	8005f7a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800717a:	4b0d      	ldr	r3, [pc, #52]	; (80071b0 <prvCheckTasksWaitingTermination+0x54>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	3b01      	subs	r3, #1
 8007180:	4a0b      	ldr	r2, [pc, #44]	; (80071b0 <prvCheckTasksWaitingTermination+0x54>)
 8007182:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007184:	4b0b      	ldr	r3, [pc, #44]	; (80071b4 <prvCheckTasksWaitingTermination+0x58>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	3b01      	subs	r3, #1
 800718a:	4a0a      	ldr	r2, [pc, #40]	; (80071b4 <prvCheckTasksWaitingTermination+0x58>)
 800718c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800718e:	f000 fad1 	bl	8007734 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 f810 	bl	80071b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007198:	4b06      	ldr	r3, [pc, #24]	; (80071b4 <prvCheckTasksWaitingTermination+0x58>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d1e1      	bne.n	8007164 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80071a0:	bf00      	nop
 80071a2:	bf00      	nop
 80071a4:	3708      	adds	r7, #8
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
 80071aa:	bf00      	nop
 80071ac:	2000063c 	.word	0x2000063c
 80071b0:	20000668 	.word	0x20000668
 80071b4:	20000650 	.word	0x20000650

080071b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	334c      	adds	r3, #76	; 0x4c
 80071c4:	4618      	mov	r0, r3
 80071c6:	f000 fd9b 	bl	8007d00 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d108      	bne.n	80071e6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d8:	4618      	mov	r0, r3
 80071da:	f000 fc29 	bl	8007a30 <vPortFree>
				vPortFree( pxTCB );
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 fc26 	bl	8007a30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80071e4:	e018      	b.n	8007218 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d103      	bne.n	80071f8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 fc1d 	bl	8007a30 <vPortFree>
	}
 80071f6:	e00f      	b.n	8007218 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80071fe:	2b02      	cmp	r3, #2
 8007200:	d00a      	beq.n	8007218 <prvDeleteTCB+0x60>
	__asm volatile
 8007202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007206:	f383 8811 	msr	BASEPRI, r3
 800720a:	f3bf 8f6f 	isb	sy
 800720e:	f3bf 8f4f 	dsb	sy
 8007212:	60fb      	str	r3, [r7, #12]
}
 8007214:	bf00      	nop
 8007216:	e7fe      	b.n	8007216 <prvDeleteTCB+0x5e>
	}
 8007218:	bf00      	nop
 800721a:	3710      	adds	r7, #16
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007220:	b480      	push	{r7}
 8007222:	b083      	sub	sp, #12
 8007224:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007226:	4b0c      	ldr	r3, [pc, #48]	; (8007258 <prvResetNextTaskUnblockTime+0x38>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d104      	bne.n	800723a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007230:	4b0a      	ldr	r3, [pc, #40]	; (800725c <prvResetNextTaskUnblockTime+0x3c>)
 8007232:	f04f 32ff 	mov.w	r2, #4294967295
 8007236:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007238:	e008      	b.n	800724c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800723a:	4b07      	ldr	r3, [pc, #28]	; (8007258 <prvResetNextTaskUnblockTime+0x38>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	68db      	ldr	r3, [r3, #12]
 8007242:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	4a04      	ldr	r2, [pc, #16]	; (800725c <prvResetNextTaskUnblockTime+0x3c>)
 800724a:	6013      	str	r3, [r2, #0]
}
 800724c:	bf00      	nop
 800724e:	370c      	adds	r7, #12
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr
 8007258:	20000620 	.word	0x20000620
 800725c:	20000688 	.word	0x20000688

08007260 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007260:	b480      	push	{r7}
 8007262:	b083      	sub	sp, #12
 8007264:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007266:	4b0b      	ldr	r3, [pc, #44]	; (8007294 <xTaskGetSchedulerState+0x34>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d102      	bne.n	8007274 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800726e:	2301      	movs	r3, #1
 8007270:	607b      	str	r3, [r7, #4]
 8007272:	e008      	b.n	8007286 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007274:	4b08      	ldr	r3, [pc, #32]	; (8007298 <xTaskGetSchedulerState+0x38>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d102      	bne.n	8007282 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800727c:	2302      	movs	r3, #2
 800727e:	607b      	str	r3, [r7, #4]
 8007280:	e001      	b.n	8007286 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007282:	2300      	movs	r3, #0
 8007284:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007286:	687b      	ldr	r3, [r7, #4]
	}
 8007288:	4618      	mov	r0, r3
 800728a:	370c      	adds	r7, #12
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr
 8007294:	20000674 	.word	0x20000674
 8007298:	20000690 	.word	0x20000690

0800729c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800729c:	b580      	push	{r7, lr}
 800729e:	b086      	sub	sp, #24
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80072a8:	2300      	movs	r3, #0
 80072aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d06e      	beq.n	8007390 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80072b2:	4b3a      	ldr	r3, [pc, #232]	; (800739c <xTaskPriorityDisinherit+0x100>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	693a      	ldr	r2, [r7, #16]
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d00a      	beq.n	80072d2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80072bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c0:	f383 8811 	msr	BASEPRI, r3
 80072c4:	f3bf 8f6f 	isb	sy
 80072c8:	f3bf 8f4f 	dsb	sy
 80072cc:	60fb      	str	r3, [r7, #12]
}
 80072ce:	bf00      	nop
 80072d0:	e7fe      	b.n	80072d0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d10a      	bne.n	80072f0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80072da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072de:	f383 8811 	msr	BASEPRI, r3
 80072e2:	f3bf 8f6f 	isb	sy
 80072e6:	f3bf 8f4f 	dsb	sy
 80072ea:	60bb      	str	r3, [r7, #8]
}
 80072ec:	bf00      	nop
 80072ee:	e7fe      	b.n	80072ee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072f4:	1e5a      	subs	r2, r3, #1
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007302:	429a      	cmp	r2, r3
 8007304:	d044      	beq.n	8007390 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800730a:	2b00      	cmp	r3, #0
 800730c:	d140      	bne.n	8007390 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	3304      	adds	r3, #4
 8007312:	4618      	mov	r0, r3
 8007314:	f7fe fe31 	bl	8005f7a <uxListRemove>
 8007318:	4603      	mov	r3, r0
 800731a:	2b00      	cmp	r3, #0
 800731c:	d115      	bne.n	800734a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007322:	491f      	ldr	r1, [pc, #124]	; (80073a0 <xTaskPriorityDisinherit+0x104>)
 8007324:	4613      	mov	r3, r2
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	4413      	add	r3, r2
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	440b      	add	r3, r1
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d10a      	bne.n	800734a <xTaskPriorityDisinherit+0xae>
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007338:	2201      	movs	r2, #1
 800733a:	fa02 f303 	lsl.w	r3, r2, r3
 800733e:	43da      	mvns	r2, r3
 8007340:	4b18      	ldr	r3, [pc, #96]	; (80073a4 <xTaskPriorityDisinherit+0x108>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4013      	ands	r3, r2
 8007346:	4a17      	ldr	r2, [pc, #92]	; (80073a4 <xTaskPriorityDisinherit+0x108>)
 8007348:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007356:	f1c3 0207 	rsb	r2, r3, #7
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007362:	2201      	movs	r2, #1
 8007364:	409a      	lsls	r2, r3
 8007366:	4b0f      	ldr	r3, [pc, #60]	; (80073a4 <xTaskPriorityDisinherit+0x108>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4313      	orrs	r3, r2
 800736c:	4a0d      	ldr	r2, [pc, #52]	; (80073a4 <xTaskPriorityDisinherit+0x108>)
 800736e:	6013      	str	r3, [r2, #0]
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007374:	4613      	mov	r3, r2
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	4413      	add	r3, r2
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	4a08      	ldr	r2, [pc, #32]	; (80073a0 <xTaskPriorityDisinherit+0x104>)
 800737e:	441a      	add	r2, r3
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	3304      	adds	r3, #4
 8007384:	4619      	mov	r1, r3
 8007386:	4610      	mov	r0, r2
 8007388:	f7fe fd9a 	bl	8005ec0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800738c:	2301      	movs	r3, #1
 800738e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007390:	697b      	ldr	r3, [r7, #20]
	}
 8007392:	4618      	mov	r0, r3
 8007394:	3718      	adds	r7, #24
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	20000568 	.word	0x20000568
 80073a0:	2000056c 	.word	0x2000056c
 80073a4:	20000670 	.word	0x20000670

080073a8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b084      	sub	sp, #16
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80073b2:	4b29      	ldr	r3, [pc, #164]	; (8007458 <prvAddCurrentTaskToDelayedList+0xb0>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073b8:	4b28      	ldr	r3, [pc, #160]	; (800745c <prvAddCurrentTaskToDelayedList+0xb4>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	3304      	adds	r3, #4
 80073be:	4618      	mov	r0, r3
 80073c0:	f7fe fddb 	bl	8005f7a <uxListRemove>
 80073c4:	4603      	mov	r3, r0
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d10b      	bne.n	80073e2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80073ca:	4b24      	ldr	r3, [pc, #144]	; (800745c <prvAddCurrentTaskToDelayedList+0xb4>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d0:	2201      	movs	r2, #1
 80073d2:	fa02 f303 	lsl.w	r3, r2, r3
 80073d6:	43da      	mvns	r2, r3
 80073d8:	4b21      	ldr	r3, [pc, #132]	; (8007460 <prvAddCurrentTaskToDelayedList+0xb8>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4013      	ands	r3, r2
 80073de:	4a20      	ldr	r2, [pc, #128]	; (8007460 <prvAddCurrentTaskToDelayedList+0xb8>)
 80073e0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073e8:	d10a      	bne.n	8007400 <prvAddCurrentTaskToDelayedList+0x58>
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d007      	beq.n	8007400 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073f0:	4b1a      	ldr	r3, [pc, #104]	; (800745c <prvAddCurrentTaskToDelayedList+0xb4>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	3304      	adds	r3, #4
 80073f6:	4619      	mov	r1, r3
 80073f8:	481a      	ldr	r0, [pc, #104]	; (8007464 <prvAddCurrentTaskToDelayedList+0xbc>)
 80073fa:	f7fe fd61 	bl	8005ec0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80073fe:	e026      	b.n	800744e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007400:	68fa      	ldr	r2, [r7, #12]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	4413      	add	r3, r2
 8007406:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007408:	4b14      	ldr	r3, [pc, #80]	; (800745c <prvAddCurrentTaskToDelayedList+0xb4>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	68ba      	ldr	r2, [r7, #8]
 800740e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007410:	68ba      	ldr	r2, [r7, #8]
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	429a      	cmp	r2, r3
 8007416:	d209      	bcs.n	800742c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007418:	4b13      	ldr	r3, [pc, #76]	; (8007468 <prvAddCurrentTaskToDelayedList+0xc0>)
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	4b0f      	ldr	r3, [pc, #60]	; (800745c <prvAddCurrentTaskToDelayedList+0xb4>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	3304      	adds	r3, #4
 8007422:	4619      	mov	r1, r3
 8007424:	4610      	mov	r0, r2
 8007426:	f7fe fd6f 	bl	8005f08 <vListInsert>
}
 800742a:	e010      	b.n	800744e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800742c:	4b0f      	ldr	r3, [pc, #60]	; (800746c <prvAddCurrentTaskToDelayedList+0xc4>)
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	4b0a      	ldr	r3, [pc, #40]	; (800745c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	3304      	adds	r3, #4
 8007436:	4619      	mov	r1, r3
 8007438:	4610      	mov	r0, r2
 800743a:	f7fe fd65 	bl	8005f08 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800743e:	4b0c      	ldr	r3, [pc, #48]	; (8007470 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	68ba      	ldr	r2, [r7, #8]
 8007444:	429a      	cmp	r2, r3
 8007446:	d202      	bcs.n	800744e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007448:	4a09      	ldr	r2, [pc, #36]	; (8007470 <prvAddCurrentTaskToDelayedList+0xc8>)
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	6013      	str	r3, [r2, #0]
}
 800744e:	bf00      	nop
 8007450:	3710      	adds	r7, #16
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	2000066c 	.word	0x2000066c
 800745c:	20000568 	.word	0x20000568
 8007460:	20000670 	.word	0x20000670
 8007464:	20000654 	.word	0x20000654
 8007468:	20000624 	.word	0x20000624
 800746c:	20000620 	.word	0x20000620
 8007470:	20000688 	.word	0x20000688

08007474 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007474:	b480      	push	{r7}
 8007476:	b085      	sub	sp, #20
 8007478:	af00      	add	r7, sp, #0
 800747a:	60f8      	str	r0, [r7, #12]
 800747c:	60b9      	str	r1, [r7, #8]
 800747e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	3b04      	subs	r3, #4
 8007484:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800748c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	3b04      	subs	r3, #4
 8007492:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	f023 0201 	bic.w	r2, r3, #1
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	3b04      	subs	r3, #4
 80074a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80074a4:	4a0c      	ldr	r2, [pc, #48]	; (80074d8 <pxPortInitialiseStack+0x64>)
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	3b14      	subs	r3, #20
 80074ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80074b0:	687a      	ldr	r2, [r7, #4]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	3b04      	subs	r3, #4
 80074ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f06f 0202 	mvn.w	r2, #2
 80074c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	3b20      	subs	r3, #32
 80074c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80074ca:	68fb      	ldr	r3, [r7, #12]
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3714      	adds	r7, #20
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr
 80074d8:	080074dd 	.word	0x080074dd

080074dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80074dc:	b480      	push	{r7}
 80074de:	b085      	sub	sp, #20
 80074e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80074e2:	2300      	movs	r3, #0
 80074e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80074e6:	4b12      	ldr	r3, [pc, #72]	; (8007530 <prvTaskExitError+0x54>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ee:	d00a      	beq.n	8007506 <prvTaskExitError+0x2a>
	__asm volatile
 80074f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f4:	f383 8811 	msr	BASEPRI, r3
 80074f8:	f3bf 8f6f 	isb	sy
 80074fc:	f3bf 8f4f 	dsb	sy
 8007500:	60fb      	str	r3, [r7, #12]
}
 8007502:	bf00      	nop
 8007504:	e7fe      	b.n	8007504 <prvTaskExitError+0x28>
	__asm volatile
 8007506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800750a:	f383 8811 	msr	BASEPRI, r3
 800750e:	f3bf 8f6f 	isb	sy
 8007512:	f3bf 8f4f 	dsb	sy
 8007516:	60bb      	str	r3, [r7, #8]
}
 8007518:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800751a:	bf00      	nop
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d0fc      	beq.n	800751c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007522:	bf00      	nop
 8007524:	bf00      	nop
 8007526:	3714      	adds	r7, #20
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr
 8007530:	2000000c 	.word	0x2000000c
	...

08007540 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007540:	4b07      	ldr	r3, [pc, #28]	; (8007560 <pxCurrentTCBConst2>)
 8007542:	6819      	ldr	r1, [r3, #0]
 8007544:	6808      	ldr	r0, [r1, #0]
 8007546:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800754a:	f380 8809 	msr	PSP, r0
 800754e:	f3bf 8f6f 	isb	sy
 8007552:	f04f 0000 	mov.w	r0, #0
 8007556:	f380 8811 	msr	BASEPRI, r0
 800755a:	4770      	bx	lr
 800755c:	f3af 8000 	nop.w

08007560 <pxCurrentTCBConst2>:
 8007560:	20000568 	.word	0x20000568
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007564:	bf00      	nop
 8007566:	bf00      	nop

08007568 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007568:	4808      	ldr	r0, [pc, #32]	; (800758c <prvPortStartFirstTask+0x24>)
 800756a:	6800      	ldr	r0, [r0, #0]
 800756c:	6800      	ldr	r0, [r0, #0]
 800756e:	f380 8808 	msr	MSP, r0
 8007572:	f04f 0000 	mov.w	r0, #0
 8007576:	f380 8814 	msr	CONTROL, r0
 800757a:	b662      	cpsie	i
 800757c:	b661      	cpsie	f
 800757e:	f3bf 8f4f 	dsb	sy
 8007582:	f3bf 8f6f 	isb	sy
 8007586:	df00      	svc	0
 8007588:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800758a:	bf00      	nop
 800758c:	e000ed08 	.word	0xe000ed08

08007590 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b086      	sub	sp, #24
 8007594:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007596:	4b46      	ldr	r3, [pc, #280]	; (80076b0 <xPortStartScheduler+0x120>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a46      	ldr	r2, [pc, #280]	; (80076b4 <xPortStartScheduler+0x124>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d10a      	bne.n	80075b6 <xPortStartScheduler+0x26>
	__asm volatile
 80075a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a4:	f383 8811 	msr	BASEPRI, r3
 80075a8:	f3bf 8f6f 	isb	sy
 80075ac:	f3bf 8f4f 	dsb	sy
 80075b0:	613b      	str	r3, [r7, #16]
}
 80075b2:	bf00      	nop
 80075b4:	e7fe      	b.n	80075b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80075b6:	4b3e      	ldr	r3, [pc, #248]	; (80076b0 <xPortStartScheduler+0x120>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a3f      	ldr	r2, [pc, #252]	; (80076b8 <xPortStartScheduler+0x128>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d10a      	bne.n	80075d6 <xPortStartScheduler+0x46>
	__asm volatile
 80075c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c4:	f383 8811 	msr	BASEPRI, r3
 80075c8:	f3bf 8f6f 	isb	sy
 80075cc:	f3bf 8f4f 	dsb	sy
 80075d0:	60fb      	str	r3, [r7, #12]
}
 80075d2:	bf00      	nop
 80075d4:	e7fe      	b.n	80075d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80075d6:	4b39      	ldr	r3, [pc, #228]	; (80076bc <xPortStartScheduler+0x12c>)
 80075d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	22ff      	movs	r2, #255	; 0xff
 80075e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80075f0:	78fb      	ldrb	r3, [r7, #3]
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80075f8:	b2da      	uxtb	r2, r3
 80075fa:	4b31      	ldr	r3, [pc, #196]	; (80076c0 <xPortStartScheduler+0x130>)
 80075fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80075fe:	4b31      	ldr	r3, [pc, #196]	; (80076c4 <xPortStartScheduler+0x134>)
 8007600:	2207      	movs	r2, #7
 8007602:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007604:	e009      	b.n	800761a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007606:	4b2f      	ldr	r3, [pc, #188]	; (80076c4 <xPortStartScheduler+0x134>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	3b01      	subs	r3, #1
 800760c:	4a2d      	ldr	r2, [pc, #180]	; (80076c4 <xPortStartScheduler+0x134>)
 800760e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007610:	78fb      	ldrb	r3, [r7, #3]
 8007612:	b2db      	uxtb	r3, r3
 8007614:	005b      	lsls	r3, r3, #1
 8007616:	b2db      	uxtb	r3, r3
 8007618:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800761a:	78fb      	ldrb	r3, [r7, #3]
 800761c:	b2db      	uxtb	r3, r3
 800761e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007622:	2b80      	cmp	r3, #128	; 0x80
 8007624:	d0ef      	beq.n	8007606 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007626:	4b27      	ldr	r3, [pc, #156]	; (80076c4 <xPortStartScheduler+0x134>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f1c3 0307 	rsb	r3, r3, #7
 800762e:	2b04      	cmp	r3, #4
 8007630:	d00a      	beq.n	8007648 <xPortStartScheduler+0xb8>
	__asm volatile
 8007632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007636:	f383 8811 	msr	BASEPRI, r3
 800763a:	f3bf 8f6f 	isb	sy
 800763e:	f3bf 8f4f 	dsb	sy
 8007642:	60bb      	str	r3, [r7, #8]
}
 8007644:	bf00      	nop
 8007646:	e7fe      	b.n	8007646 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007648:	4b1e      	ldr	r3, [pc, #120]	; (80076c4 <xPortStartScheduler+0x134>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	021b      	lsls	r3, r3, #8
 800764e:	4a1d      	ldr	r2, [pc, #116]	; (80076c4 <xPortStartScheduler+0x134>)
 8007650:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007652:	4b1c      	ldr	r3, [pc, #112]	; (80076c4 <xPortStartScheduler+0x134>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800765a:	4a1a      	ldr	r2, [pc, #104]	; (80076c4 <xPortStartScheduler+0x134>)
 800765c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	b2da      	uxtb	r2, r3
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007666:	4b18      	ldr	r3, [pc, #96]	; (80076c8 <xPortStartScheduler+0x138>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a17      	ldr	r2, [pc, #92]	; (80076c8 <xPortStartScheduler+0x138>)
 800766c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007670:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007672:	4b15      	ldr	r3, [pc, #84]	; (80076c8 <xPortStartScheduler+0x138>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a14      	ldr	r2, [pc, #80]	; (80076c8 <xPortStartScheduler+0x138>)
 8007678:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800767c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800767e:	f000 f8dd 	bl	800783c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007682:	4b12      	ldr	r3, [pc, #72]	; (80076cc <xPortStartScheduler+0x13c>)
 8007684:	2200      	movs	r2, #0
 8007686:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007688:	f000 f8fc 	bl	8007884 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800768c:	4b10      	ldr	r3, [pc, #64]	; (80076d0 <xPortStartScheduler+0x140>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a0f      	ldr	r2, [pc, #60]	; (80076d0 <xPortStartScheduler+0x140>)
 8007692:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007696:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007698:	f7ff ff66 	bl	8007568 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800769c:	f7ff fb9a 	bl	8006dd4 <vTaskSwitchContext>
	prvTaskExitError();
 80076a0:	f7ff ff1c 	bl	80074dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80076a4:	2300      	movs	r3, #0
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3718      	adds	r7, #24
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
 80076ae:	bf00      	nop
 80076b0:	e000ed00 	.word	0xe000ed00
 80076b4:	410fc271 	.word	0x410fc271
 80076b8:	410fc270 	.word	0x410fc270
 80076bc:	e000e400 	.word	0xe000e400
 80076c0:	20000694 	.word	0x20000694
 80076c4:	20000698 	.word	0x20000698
 80076c8:	e000ed20 	.word	0xe000ed20
 80076cc:	2000000c 	.word	0x2000000c
 80076d0:	e000ef34 	.word	0xe000ef34

080076d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
	__asm volatile
 80076da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076de:	f383 8811 	msr	BASEPRI, r3
 80076e2:	f3bf 8f6f 	isb	sy
 80076e6:	f3bf 8f4f 	dsb	sy
 80076ea:	607b      	str	r3, [r7, #4]
}
 80076ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80076ee:	4b0f      	ldr	r3, [pc, #60]	; (800772c <vPortEnterCritical+0x58>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	3301      	adds	r3, #1
 80076f4:	4a0d      	ldr	r2, [pc, #52]	; (800772c <vPortEnterCritical+0x58>)
 80076f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80076f8:	4b0c      	ldr	r3, [pc, #48]	; (800772c <vPortEnterCritical+0x58>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d10f      	bne.n	8007720 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007700:	4b0b      	ldr	r3, [pc, #44]	; (8007730 <vPortEnterCritical+0x5c>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	b2db      	uxtb	r3, r3
 8007706:	2b00      	cmp	r3, #0
 8007708:	d00a      	beq.n	8007720 <vPortEnterCritical+0x4c>
	__asm volatile
 800770a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800770e:	f383 8811 	msr	BASEPRI, r3
 8007712:	f3bf 8f6f 	isb	sy
 8007716:	f3bf 8f4f 	dsb	sy
 800771a:	603b      	str	r3, [r7, #0]
}
 800771c:	bf00      	nop
 800771e:	e7fe      	b.n	800771e <vPortEnterCritical+0x4a>
	}
}
 8007720:	bf00      	nop
 8007722:	370c      	adds	r7, #12
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr
 800772c:	2000000c 	.word	0x2000000c
 8007730:	e000ed04 	.word	0xe000ed04

08007734 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800773a:	4b12      	ldr	r3, [pc, #72]	; (8007784 <vPortExitCritical+0x50>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d10a      	bne.n	8007758 <vPortExitCritical+0x24>
	__asm volatile
 8007742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007746:	f383 8811 	msr	BASEPRI, r3
 800774a:	f3bf 8f6f 	isb	sy
 800774e:	f3bf 8f4f 	dsb	sy
 8007752:	607b      	str	r3, [r7, #4]
}
 8007754:	bf00      	nop
 8007756:	e7fe      	b.n	8007756 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007758:	4b0a      	ldr	r3, [pc, #40]	; (8007784 <vPortExitCritical+0x50>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	3b01      	subs	r3, #1
 800775e:	4a09      	ldr	r2, [pc, #36]	; (8007784 <vPortExitCritical+0x50>)
 8007760:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007762:	4b08      	ldr	r3, [pc, #32]	; (8007784 <vPortExitCritical+0x50>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d105      	bne.n	8007776 <vPortExitCritical+0x42>
 800776a:	2300      	movs	r3, #0
 800776c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007774:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007776:	bf00      	nop
 8007778:	370c      	adds	r7, #12
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr
 8007782:	bf00      	nop
 8007784:	2000000c 	.word	0x2000000c
	...

08007790 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007790:	f3ef 8009 	mrs	r0, PSP
 8007794:	f3bf 8f6f 	isb	sy
 8007798:	4b15      	ldr	r3, [pc, #84]	; (80077f0 <pxCurrentTCBConst>)
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	f01e 0f10 	tst.w	lr, #16
 80077a0:	bf08      	it	eq
 80077a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80077a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077aa:	6010      	str	r0, [r2, #0]
 80077ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80077b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80077b4:	f380 8811 	msr	BASEPRI, r0
 80077b8:	f3bf 8f4f 	dsb	sy
 80077bc:	f3bf 8f6f 	isb	sy
 80077c0:	f7ff fb08 	bl	8006dd4 <vTaskSwitchContext>
 80077c4:	f04f 0000 	mov.w	r0, #0
 80077c8:	f380 8811 	msr	BASEPRI, r0
 80077cc:	bc09      	pop	{r0, r3}
 80077ce:	6819      	ldr	r1, [r3, #0]
 80077d0:	6808      	ldr	r0, [r1, #0]
 80077d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077d6:	f01e 0f10 	tst.w	lr, #16
 80077da:	bf08      	it	eq
 80077dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80077e0:	f380 8809 	msr	PSP, r0
 80077e4:	f3bf 8f6f 	isb	sy
 80077e8:	4770      	bx	lr
 80077ea:	bf00      	nop
 80077ec:	f3af 8000 	nop.w

080077f0 <pxCurrentTCBConst>:
 80077f0:	20000568 	.word	0x20000568
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80077f4:	bf00      	nop
 80077f6:	bf00      	nop

080077f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
	__asm volatile
 80077fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007802:	f383 8811 	msr	BASEPRI, r3
 8007806:	f3bf 8f6f 	isb	sy
 800780a:	f3bf 8f4f 	dsb	sy
 800780e:	607b      	str	r3, [r7, #4]
}
 8007810:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007812:	f7ff fa27 	bl	8006c64 <xTaskIncrementTick>
 8007816:	4603      	mov	r3, r0
 8007818:	2b00      	cmp	r3, #0
 800781a:	d003      	beq.n	8007824 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800781c:	4b06      	ldr	r3, [pc, #24]	; (8007838 <SysTick_Handler+0x40>)
 800781e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007822:	601a      	str	r2, [r3, #0]
 8007824:	2300      	movs	r3, #0
 8007826:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	f383 8811 	msr	BASEPRI, r3
}
 800782e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007830:	bf00      	nop
 8007832:	3708      	adds	r7, #8
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}
 8007838:	e000ed04 	.word	0xe000ed04

0800783c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800783c:	b480      	push	{r7}
 800783e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007840:	4b0b      	ldr	r3, [pc, #44]	; (8007870 <vPortSetupTimerInterrupt+0x34>)
 8007842:	2200      	movs	r2, #0
 8007844:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007846:	4b0b      	ldr	r3, [pc, #44]	; (8007874 <vPortSetupTimerInterrupt+0x38>)
 8007848:	2200      	movs	r2, #0
 800784a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800784c:	4b0a      	ldr	r3, [pc, #40]	; (8007878 <vPortSetupTimerInterrupt+0x3c>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a0a      	ldr	r2, [pc, #40]	; (800787c <vPortSetupTimerInterrupt+0x40>)
 8007852:	fba2 2303 	umull	r2, r3, r2, r3
 8007856:	099b      	lsrs	r3, r3, #6
 8007858:	4a09      	ldr	r2, [pc, #36]	; (8007880 <vPortSetupTimerInterrupt+0x44>)
 800785a:	3b01      	subs	r3, #1
 800785c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800785e:	4b04      	ldr	r3, [pc, #16]	; (8007870 <vPortSetupTimerInterrupt+0x34>)
 8007860:	2207      	movs	r2, #7
 8007862:	601a      	str	r2, [r3, #0]
}
 8007864:	bf00      	nop
 8007866:	46bd      	mov	sp, r7
 8007868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786c:	4770      	bx	lr
 800786e:	bf00      	nop
 8007870:	e000e010 	.word	0xe000e010
 8007874:	e000e018 	.word	0xe000e018
 8007878:	20000000 	.word	0x20000000
 800787c:	10624dd3 	.word	0x10624dd3
 8007880:	e000e014 	.word	0xe000e014

08007884 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007884:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007894 <vPortEnableVFP+0x10>
 8007888:	6801      	ldr	r1, [r0, #0]
 800788a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800788e:	6001      	str	r1, [r0, #0]
 8007890:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007892:	bf00      	nop
 8007894:	e000ed88 	.word	0xe000ed88

08007898 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b08a      	sub	sp, #40	; 0x28
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80078a0:	2300      	movs	r3, #0
 80078a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80078a4:	f7ff f934 	bl	8006b10 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80078a8:	4b5b      	ldr	r3, [pc, #364]	; (8007a18 <pvPortMalloc+0x180>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d101      	bne.n	80078b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80078b0:	f000 f920 	bl	8007af4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80078b4:	4b59      	ldr	r3, [pc, #356]	; (8007a1c <pvPortMalloc+0x184>)
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	4013      	ands	r3, r2
 80078bc:	2b00      	cmp	r3, #0
 80078be:	f040 8093 	bne.w	80079e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d01d      	beq.n	8007904 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80078c8:	2208      	movs	r2, #8
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	4413      	add	r3, r2
 80078ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f003 0307 	and.w	r3, r3, #7
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d014      	beq.n	8007904 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f023 0307 	bic.w	r3, r3, #7
 80078e0:	3308      	adds	r3, #8
 80078e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f003 0307 	and.w	r3, r3, #7
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d00a      	beq.n	8007904 <pvPortMalloc+0x6c>
	__asm volatile
 80078ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f2:	f383 8811 	msr	BASEPRI, r3
 80078f6:	f3bf 8f6f 	isb	sy
 80078fa:	f3bf 8f4f 	dsb	sy
 80078fe:	617b      	str	r3, [r7, #20]
}
 8007900:	bf00      	nop
 8007902:	e7fe      	b.n	8007902 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d06e      	beq.n	80079e8 <pvPortMalloc+0x150>
 800790a:	4b45      	ldr	r3, [pc, #276]	; (8007a20 <pvPortMalloc+0x188>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	429a      	cmp	r2, r3
 8007912:	d869      	bhi.n	80079e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007914:	4b43      	ldr	r3, [pc, #268]	; (8007a24 <pvPortMalloc+0x18c>)
 8007916:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007918:	4b42      	ldr	r3, [pc, #264]	; (8007a24 <pvPortMalloc+0x18c>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800791e:	e004      	b.n	800792a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007922:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800792a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	687a      	ldr	r2, [r7, #4]
 8007930:	429a      	cmp	r2, r3
 8007932:	d903      	bls.n	800793c <pvPortMalloc+0xa4>
 8007934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d1f1      	bne.n	8007920 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800793c:	4b36      	ldr	r3, [pc, #216]	; (8007a18 <pvPortMalloc+0x180>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007942:	429a      	cmp	r2, r3
 8007944:	d050      	beq.n	80079e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007946:	6a3b      	ldr	r3, [r7, #32]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	2208      	movs	r2, #8
 800794c:	4413      	add	r3, r2
 800794e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007952:	681a      	ldr	r2, [r3, #0]
 8007954:	6a3b      	ldr	r3, [r7, #32]
 8007956:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795a:	685a      	ldr	r2, [r3, #4]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	1ad2      	subs	r2, r2, r3
 8007960:	2308      	movs	r3, #8
 8007962:	005b      	lsls	r3, r3, #1
 8007964:	429a      	cmp	r2, r3
 8007966:	d91f      	bls.n	80079a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	4413      	add	r3, r2
 800796e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007970:	69bb      	ldr	r3, [r7, #24]
 8007972:	f003 0307 	and.w	r3, r3, #7
 8007976:	2b00      	cmp	r3, #0
 8007978:	d00a      	beq.n	8007990 <pvPortMalloc+0xf8>
	__asm volatile
 800797a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800797e:	f383 8811 	msr	BASEPRI, r3
 8007982:	f3bf 8f6f 	isb	sy
 8007986:	f3bf 8f4f 	dsb	sy
 800798a:	613b      	str	r3, [r7, #16]
}
 800798c:	bf00      	nop
 800798e:	e7fe      	b.n	800798e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007992:	685a      	ldr	r2, [r3, #4]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	1ad2      	subs	r2, r2, r3
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800799c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80079a2:	69b8      	ldr	r0, [r7, #24]
 80079a4:	f000 f908 	bl	8007bb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80079a8:	4b1d      	ldr	r3, [pc, #116]	; (8007a20 <pvPortMalloc+0x188>)
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	1ad3      	subs	r3, r2, r3
 80079b2:	4a1b      	ldr	r2, [pc, #108]	; (8007a20 <pvPortMalloc+0x188>)
 80079b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80079b6:	4b1a      	ldr	r3, [pc, #104]	; (8007a20 <pvPortMalloc+0x188>)
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	4b1b      	ldr	r3, [pc, #108]	; (8007a28 <pvPortMalloc+0x190>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	429a      	cmp	r2, r3
 80079c0:	d203      	bcs.n	80079ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80079c2:	4b17      	ldr	r3, [pc, #92]	; (8007a20 <pvPortMalloc+0x188>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a18      	ldr	r2, [pc, #96]	; (8007a28 <pvPortMalloc+0x190>)
 80079c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80079ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079cc:	685a      	ldr	r2, [r3, #4]
 80079ce:	4b13      	ldr	r3, [pc, #76]	; (8007a1c <pvPortMalloc+0x184>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	431a      	orrs	r2, r3
 80079d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80079d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079da:	2200      	movs	r2, #0
 80079dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80079de:	4b13      	ldr	r3, [pc, #76]	; (8007a2c <pvPortMalloc+0x194>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	3301      	adds	r3, #1
 80079e4:	4a11      	ldr	r2, [pc, #68]	; (8007a2c <pvPortMalloc+0x194>)
 80079e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80079e8:	f7ff f8a0 	bl	8006b2c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	f003 0307 	and.w	r3, r3, #7
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d00a      	beq.n	8007a0c <pvPortMalloc+0x174>
	__asm volatile
 80079f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079fa:	f383 8811 	msr	BASEPRI, r3
 80079fe:	f3bf 8f6f 	isb	sy
 8007a02:	f3bf 8f4f 	dsb	sy
 8007a06:	60fb      	str	r3, [r7, #12]
}
 8007a08:	bf00      	nop
 8007a0a:	e7fe      	b.n	8007a0a <pvPortMalloc+0x172>
	return pvReturn;
 8007a0c:	69fb      	ldr	r3, [r7, #28]
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3728      	adds	r7, #40	; 0x28
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	200042a4 	.word	0x200042a4
 8007a1c:	200042b8 	.word	0x200042b8
 8007a20:	200042a8 	.word	0x200042a8
 8007a24:	2000429c 	.word	0x2000429c
 8007a28:	200042ac 	.word	0x200042ac
 8007a2c:	200042b0 	.word	0x200042b0

08007a30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b086      	sub	sp, #24
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d04d      	beq.n	8007ade <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007a42:	2308      	movs	r3, #8
 8007a44:	425b      	negs	r3, r3
 8007a46:	697a      	ldr	r2, [r7, #20]
 8007a48:	4413      	add	r3, r2
 8007a4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	685a      	ldr	r2, [r3, #4]
 8007a54:	4b24      	ldr	r3, [pc, #144]	; (8007ae8 <vPortFree+0xb8>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4013      	ands	r3, r2
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d10a      	bne.n	8007a74 <vPortFree+0x44>
	__asm volatile
 8007a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a62:	f383 8811 	msr	BASEPRI, r3
 8007a66:	f3bf 8f6f 	isb	sy
 8007a6a:	f3bf 8f4f 	dsb	sy
 8007a6e:	60fb      	str	r3, [r7, #12]
}
 8007a70:	bf00      	nop
 8007a72:	e7fe      	b.n	8007a72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d00a      	beq.n	8007a92 <vPortFree+0x62>
	__asm volatile
 8007a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a80:	f383 8811 	msr	BASEPRI, r3
 8007a84:	f3bf 8f6f 	isb	sy
 8007a88:	f3bf 8f4f 	dsb	sy
 8007a8c:	60bb      	str	r3, [r7, #8]
}
 8007a8e:	bf00      	nop
 8007a90:	e7fe      	b.n	8007a90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	685a      	ldr	r2, [r3, #4]
 8007a96:	4b14      	ldr	r3, [pc, #80]	; (8007ae8 <vPortFree+0xb8>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4013      	ands	r3, r2
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d01e      	beq.n	8007ade <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d11a      	bne.n	8007ade <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	685a      	ldr	r2, [r3, #4]
 8007aac:	4b0e      	ldr	r3, [pc, #56]	; (8007ae8 <vPortFree+0xb8>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	43db      	mvns	r3, r3
 8007ab2:	401a      	ands	r2, r3
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007ab8:	f7ff f82a 	bl	8006b10 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	685a      	ldr	r2, [r3, #4]
 8007ac0:	4b0a      	ldr	r3, [pc, #40]	; (8007aec <vPortFree+0xbc>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4413      	add	r3, r2
 8007ac6:	4a09      	ldr	r2, [pc, #36]	; (8007aec <vPortFree+0xbc>)
 8007ac8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007aca:	6938      	ldr	r0, [r7, #16]
 8007acc:	f000 f874 	bl	8007bb8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007ad0:	4b07      	ldr	r3, [pc, #28]	; (8007af0 <vPortFree+0xc0>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	3301      	adds	r3, #1
 8007ad6:	4a06      	ldr	r2, [pc, #24]	; (8007af0 <vPortFree+0xc0>)
 8007ad8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007ada:	f7ff f827 	bl	8006b2c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007ade:	bf00      	nop
 8007ae0:	3718      	adds	r7, #24
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	200042b8 	.word	0x200042b8
 8007aec:	200042a8 	.word	0x200042a8
 8007af0:	200042b4 	.word	0x200042b4

08007af4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007af4:	b480      	push	{r7}
 8007af6:	b085      	sub	sp, #20
 8007af8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007afa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007afe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007b00:	4b27      	ldr	r3, [pc, #156]	; (8007ba0 <prvHeapInit+0xac>)
 8007b02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f003 0307 	and.w	r3, r3, #7
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d00c      	beq.n	8007b28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	3307      	adds	r3, #7
 8007b12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f023 0307 	bic.w	r3, r3, #7
 8007b1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007b1c:	68ba      	ldr	r2, [r7, #8]
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	1ad3      	subs	r3, r2, r3
 8007b22:	4a1f      	ldr	r2, [pc, #124]	; (8007ba0 <prvHeapInit+0xac>)
 8007b24:	4413      	add	r3, r2
 8007b26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007b2c:	4a1d      	ldr	r2, [pc, #116]	; (8007ba4 <prvHeapInit+0xb0>)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007b32:	4b1c      	ldr	r3, [pc, #112]	; (8007ba4 <prvHeapInit+0xb0>)
 8007b34:	2200      	movs	r2, #0
 8007b36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	68ba      	ldr	r2, [r7, #8]
 8007b3c:	4413      	add	r3, r2
 8007b3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007b40:	2208      	movs	r2, #8
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	1a9b      	subs	r3, r3, r2
 8007b46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f023 0307 	bic.w	r3, r3, #7
 8007b4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	4a15      	ldr	r2, [pc, #84]	; (8007ba8 <prvHeapInit+0xb4>)
 8007b54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007b56:	4b14      	ldr	r3, [pc, #80]	; (8007ba8 <prvHeapInit+0xb4>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007b5e:	4b12      	ldr	r3, [pc, #72]	; (8007ba8 <prvHeapInit+0xb4>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	2200      	movs	r2, #0
 8007b64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	68fa      	ldr	r2, [r7, #12]
 8007b6e:	1ad2      	subs	r2, r2, r3
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007b74:	4b0c      	ldr	r3, [pc, #48]	; (8007ba8 <prvHeapInit+0xb4>)
 8007b76:	681a      	ldr	r2, [r3, #0]
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	4a0a      	ldr	r2, [pc, #40]	; (8007bac <prvHeapInit+0xb8>)
 8007b82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	4a09      	ldr	r2, [pc, #36]	; (8007bb0 <prvHeapInit+0xbc>)
 8007b8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007b8c:	4b09      	ldr	r3, [pc, #36]	; (8007bb4 <prvHeapInit+0xc0>)
 8007b8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007b92:	601a      	str	r2, [r3, #0]
}
 8007b94:	bf00      	nop
 8007b96:	3714      	adds	r7, #20
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr
 8007ba0:	2000069c 	.word	0x2000069c
 8007ba4:	2000429c 	.word	0x2000429c
 8007ba8:	200042a4 	.word	0x200042a4
 8007bac:	200042ac 	.word	0x200042ac
 8007bb0:	200042a8 	.word	0x200042a8
 8007bb4:	200042b8 	.word	0x200042b8

08007bb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b085      	sub	sp, #20
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007bc0:	4b28      	ldr	r3, [pc, #160]	; (8007c64 <prvInsertBlockIntoFreeList+0xac>)
 8007bc2:	60fb      	str	r3, [r7, #12]
 8007bc4:	e002      	b.n	8007bcc <prvInsertBlockIntoFreeList+0x14>
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	60fb      	str	r3, [r7, #12]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d8f7      	bhi.n	8007bc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	68ba      	ldr	r2, [r7, #8]
 8007be0:	4413      	add	r3, r2
 8007be2:	687a      	ldr	r2, [r7, #4]
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d108      	bne.n	8007bfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	685a      	ldr	r2, [r3, #4]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	441a      	add	r2, r3
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	68ba      	ldr	r2, [r7, #8]
 8007c04:	441a      	add	r2, r3
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d118      	bne.n	8007c40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681a      	ldr	r2, [r3, #0]
 8007c12:	4b15      	ldr	r3, [pc, #84]	; (8007c68 <prvInsertBlockIntoFreeList+0xb0>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d00d      	beq.n	8007c36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	685a      	ldr	r2, [r3, #4]
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	441a      	add	r2, r3
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	601a      	str	r2, [r3, #0]
 8007c34:	e008      	b.n	8007c48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007c36:	4b0c      	ldr	r3, [pc, #48]	; (8007c68 <prvInsertBlockIntoFreeList+0xb0>)
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	601a      	str	r2, [r3, #0]
 8007c3e:	e003      	b.n	8007c48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007c48:	68fa      	ldr	r2, [r7, #12]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d002      	beq.n	8007c56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	687a      	ldr	r2, [r7, #4]
 8007c54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c56:	bf00      	nop
 8007c58:	3714      	adds	r7, #20
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr
 8007c62:	bf00      	nop
 8007c64:	2000429c 	.word	0x2000429c
 8007c68:	200042a4 	.word	0x200042a4

08007c6c <__libc_init_array>:
 8007c6c:	b570      	push	{r4, r5, r6, lr}
 8007c6e:	4d0d      	ldr	r5, [pc, #52]	; (8007ca4 <__libc_init_array+0x38>)
 8007c70:	4c0d      	ldr	r4, [pc, #52]	; (8007ca8 <__libc_init_array+0x3c>)
 8007c72:	1b64      	subs	r4, r4, r5
 8007c74:	10a4      	asrs	r4, r4, #2
 8007c76:	2600      	movs	r6, #0
 8007c78:	42a6      	cmp	r6, r4
 8007c7a:	d109      	bne.n	8007c90 <__libc_init_array+0x24>
 8007c7c:	4d0b      	ldr	r5, [pc, #44]	; (8007cac <__libc_init_array+0x40>)
 8007c7e:	4c0c      	ldr	r4, [pc, #48]	; (8007cb0 <__libc_init_array+0x44>)
 8007c80:	f000 f8f6 	bl	8007e70 <_init>
 8007c84:	1b64      	subs	r4, r4, r5
 8007c86:	10a4      	asrs	r4, r4, #2
 8007c88:	2600      	movs	r6, #0
 8007c8a:	42a6      	cmp	r6, r4
 8007c8c:	d105      	bne.n	8007c9a <__libc_init_array+0x2e>
 8007c8e:	bd70      	pop	{r4, r5, r6, pc}
 8007c90:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c94:	4798      	blx	r3
 8007c96:	3601      	adds	r6, #1
 8007c98:	e7ee      	b.n	8007c78 <__libc_init_array+0xc>
 8007c9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c9e:	4798      	blx	r3
 8007ca0:	3601      	adds	r6, #1
 8007ca2:	e7f2      	b.n	8007c8a <__libc_init_array+0x1e>
 8007ca4:	08007f90 	.word	0x08007f90
 8007ca8:	08007f90 	.word	0x08007f90
 8007cac:	08007f90 	.word	0x08007f90
 8007cb0:	08007f94 	.word	0x08007f94

08007cb4 <__retarget_lock_acquire_recursive>:
 8007cb4:	4770      	bx	lr

08007cb6 <__retarget_lock_release_recursive>:
 8007cb6:	4770      	bx	lr

08007cb8 <memcpy>:
 8007cb8:	440a      	add	r2, r1
 8007cba:	4291      	cmp	r1, r2
 8007cbc:	f100 33ff 	add.w	r3, r0, #4294967295
 8007cc0:	d100      	bne.n	8007cc4 <memcpy+0xc>
 8007cc2:	4770      	bx	lr
 8007cc4:	b510      	push	{r4, lr}
 8007cc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007cce:	4291      	cmp	r1, r2
 8007cd0:	d1f9      	bne.n	8007cc6 <memcpy+0xe>
 8007cd2:	bd10      	pop	{r4, pc}

08007cd4 <memset>:
 8007cd4:	4402      	add	r2, r0
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d100      	bne.n	8007cde <memset+0xa>
 8007cdc:	4770      	bx	lr
 8007cde:	f803 1b01 	strb.w	r1, [r3], #1
 8007ce2:	e7f9      	b.n	8007cd8 <memset+0x4>

08007ce4 <cleanup_glue>:
 8007ce4:	b538      	push	{r3, r4, r5, lr}
 8007ce6:	460c      	mov	r4, r1
 8007ce8:	6809      	ldr	r1, [r1, #0]
 8007cea:	4605      	mov	r5, r0
 8007cec:	b109      	cbz	r1, 8007cf2 <cleanup_glue+0xe>
 8007cee:	f7ff fff9 	bl	8007ce4 <cleanup_glue>
 8007cf2:	4621      	mov	r1, r4
 8007cf4:	4628      	mov	r0, r5
 8007cf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007cfa:	f000 b869 	b.w	8007dd0 <_free_r>
	...

08007d00 <_reclaim_reent>:
 8007d00:	4b2c      	ldr	r3, [pc, #176]	; (8007db4 <_reclaim_reent+0xb4>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4283      	cmp	r3, r0
 8007d06:	b570      	push	{r4, r5, r6, lr}
 8007d08:	4604      	mov	r4, r0
 8007d0a:	d051      	beq.n	8007db0 <_reclaim_reent+0xb0>
 8007d0c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007d0e:	b143      	cbz	r3, 8007d22 <_reclaim_reent+0x22>
 8007d10:	68db      	ldr	r3, [r3, #12]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d14a      	bne.n	8007dac <_reclaim_reent+0xac>
 8007d16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d18:	6819      	ldr	r1, [r3, #0]
 8007d1a:	b111      	cbz	r1, 8007d22 <_reclaim_reent+0x22>
 8007d1c:	4620      	mov	r0, r4
 8007d1e:	f000 f857 	bl	8007dd0 <_free_r>
 8007d22:	6961      	ldr	r1, [r4, #20]
 8007d24:	b111      	cbz	r1, 8007d2c <_reclaim_reent+0x2c>
 8007d26:	4620      	mov	r0, r4
 8007d28:	f000 f852 	bl	8007dd0 <_free_r>
 8007d2c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007d2e:	b111      	cbz	r1, 8007d36 <_reclaim_reent+0x36>
 8007d30:	4620      	mov	r0, r4
 8007d32:	f000 f84d 	bl	8007dd0 <_free_r>
 8007d36:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007d38:	b111      	cbz	r1, 8007d40 <_reclaim_reent+0x40>
 8007d3a:	4620      	mov	r0, r4
 8007d3c:	f000 f848 	bl	8007dd0 <_free_r>
 8007d40:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007d42:	b111      	cbz	r1, 8007d4a <_reclaim_reent+0x4a>
 8007d44:	4620      	mov	r0, r4
 8007d46:	f000 f843 	bl	8007dd0 <_free_r>
 8007d4a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007d4c:	b111      	cbz	r1, 8007d54 <_reclaim_reent+0x54>
 8007d4e:	4620      	mov	r0, r4
 8007d50:	f000 f83e 	bl	8007dd0 <_free_r>
 8007d54:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007d56:	b111      	cbz	r1, 8007d5e <_reclaim_reent+0x5e>
 8007d58:	4620      	mov	r0, r4
 8007d5a:	f000 f839 	bl	8007dd0 <_free_r>
 8007d5e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007d60:	b111      	cbz	r1, 8007d68 <_reclaim_reent+0x68>
 8007d62:	4620      	mov	r0, r4
 8007d64:	f000 f834 	bl	8007dd0 <_free_r>
 8007d68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d6a:	b111      	cbz	r1, 8007d72 <_reclaim_reent+0x72>
 8007d6c:	4620      	mov	r0, r4
 8007d6e:	f000 f82f 	bl	8007dd0 <_free_r>
 8007d72:	69a3      	ldr	r3, [r4, #24]
 8007d74:	b1e3      	cbz	r3, 8007db0 <_reclaim_reent+0xb0>
 8007d76:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007d78:	4620      	mov	r0, r4
 8007d7a:	4798      	blx	r3
 8007d7c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007d7e:	b1b9      	cbz	r1, 8007db0 <_reclaim_reent+0xb0>
 8007d80:	4620      	mov	r0, r4
 8007d82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007d86:	f7ff bfad 	b.w	8007ce4 <cleanup_glue>
 8007d8a:	5949      	ldr	r1, [r1, r5]
 8007d8c:	b941      	cbnz	r1, 8007da0 <_reclaim_reent+0xa0>
 8007d8e:	3504      	adds	r5, #4
 8007d90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d92:	2d80      	cmp	r5, #128	; 0x80
 8007d94:	68d9      	ldr	r1, [r3, #12]
 8007d96:	d1f8      	bne.n	8007d8a <_reclaim_reent+0x8a>
 8007d98:	4620      	mov	r0, r4
 8007d9a:	f000 f819 	bl	8007dd0 <_free_r>
 8007d9e:	e7ba      	b.n	8007d16 <_reclaim_reent+0x16>
 8007da0:	680e      	ldr	r6, [r1, #0]
 8007da2:	4620      	mov	r0, r4
 8007da4:	f000 f814 	bl	8007dd0 <_free_r>
 8007da8:	4631      	mov	r1, r6
 8007daa:	e7ef      	b.n	8007d8c <_reclaim_reent+0x8c>
 8007dac:	2500      	movs	r5, #0
 8007dae:	e7ef      	b.n	8007d90 <_reclaim_reent+0x90>
 8007db0:	bd70      	pop	{r4, r5, r6, pc}
 8007db2:	bf00      	nop
 8007db4:	20000010 	.word	0x20000010

08007db8 <__malloc_lock>:
 8007db8:	4801      	ldr	r0, [pc, #4]	; (8007dc0 <__malloc_lock+0x8>)
 8007dba:	f7ff bf7b 	b.w	8007cb4 <__retarget_lock_acquire_recursive>
 8007dbe:	bf00      	nop
 8007dc0:	20004410 	.word	0x20004410

08007dc4 <__malloc_unlock>:
 8007dc4:	4801      	ldr	r0, [pc, #4]	; (8007dcc <__malloc_unlock+0x8>)
 8007dc6:	f7ff bf76 	b.w	8007cb6 <__retarget_lock_release_recursive>
 8007dca:	bf00      	nop
 8007dcc:	20004410 	.word	0x20004410

08007dd0 <_free_r>:
 8007dd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007dd2:	2900      	cmp	r1, #0
 8007dd4:	d048      	beq.n	8007e68 <_free_r+0x98>
 8007dd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dda:	9001      	str	r0, [sp, #4]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	f1a1 0404 	sub.w	r4, r1, #4
 8007de2:	bfb8      	it	lt
 8007de4:	18e4      	addlt	r4, r4, r3
 8007de6:	f7ff ffe7 	bl	8007db8 <__malloc_lock>
 8007dea:	4a20      	ldr	r2, [pc, #128]	; (8007e6c <_free_r+0x9c>)
 8007dec:	9801      	ldr	r0, [sp, #4]
 8007dee:	6813      	ldr	r3, [r2, #0]
 8007df0:	4615      	mov	r5, r2
 8007df2:	b933      	cbnz	r3, 8007e02 <_free_r+0x32>
 8007df4:	6063      	str	r3, [r4, #4]
 8007df6:	6014      	str	r4, [r2, #0]
 8007df8:	b003      	add	sp, #12
 8007dfa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007dfe:	f7ff bfe1 	b.w	8007dc4 <__malloc_unlock>
 8007e02:	42a3      	cmp	r3, r4
 8007e04:	d90b      	bls.n	8007e1e <_free_r+0x4e>
 8007e06:	6821      	ldr	r1, [r4, #0]
 8007e08:	1862      	adds	r2, r4, r1
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	bf04      	itt	eq
 8007e0e:	681a      	ldreq	r2, [r3, #0]
 8007e10:	685b      	ldreq	r3, [r3, #4]
 8007e12:	6063      	str	r3, [r4, #4]
 8007e14:	bf04      	itt	eq
 8007e16:	1852      	addeq	r2, r2, r1
 8007e18:	6022      	streq	r2, [r4, #0]
 8007e1a:	602c      	str	r4, [r5, #0]
 8007e1c:	e7ec      	b.n	8007df8 <_free_r+0x28>
 8007e1e:	461a      	mov	r2, r3
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	b10b      	cbz	r3, 8007e28 <_free_r+0x58>
 8007e24:	42a3      	cmp	r3, r4
 8007e26:	d9fa      	bls.n	8007e1e <_free_r+0x4e>
 8007e28:	6811      	ldr	r1, [r2, #0]
 8007e2a:	1855      	adds	r5, r2, r1
 8007e2c:	42a5      	cmp	r5, r4
 8007e2e:	d10b      	bne.n	8007e48 <_free_r+0x78>
 8007e30:	6824      	ldr	r4, [r4, #0]
 8007e32:	4421      	add	r1, r4
 8007e34:	1854      	adds	r4, r2, r1
 8007e36:	42a3      	cmp	r3, r4
 8007e38:	6011      	str	r1, [r2, #0]
 8007e3a:	d1dd      	bne.n	8007df8 <_free_r+0x28>
 8007e3c:	681c      	ldr	r4, [r3, #0]
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	6053      	str	r3, [r2, #4]
 8007e42:	4421      	add	r1, r4
 8007e44:	6011      	str	r1, [r2, #0]
 8007e46:	e7d7      	b.n	8007df8 <_free_r+0x28>
 8007e48:	d902      	bls.n	8007e50 <_free_r+0x80>
 8007e4a:	230c      	movs	r3, #12
 8007e4c:	6003      	str	r3, [r0, #0]
 8007e4e:	e7d3      	b.n	8007df8 <_free_r+0x28>
 8007e50:	6825      	ldr	r5, [r4, #0]
 8007e52:	1961      	adds	r1, r4, r5
 8007e54:	428b      	cmp	r3, r1
 8007e56:	bf04      	itt	eq
 8007e58:	6819      	ldreq	r1, [r3, #0]
 8007e5a:	685b      	ldreq	r3, [r3, #4]
 8007e5c:	6063      	str	r3, [r4, #4]
 8007e5e:	bf04      	itt	eq
 8007e60:	1949      	addeq	r1, r1, r5
 8007e62:	6021      	streq	r1, [r4, #0]
 8007e64:	6054      	str	r4, [r2, #4]
 8007e66:	e7c7      	b.n	8007df8 <_free_r+0x28>
 8007e68:	b003      	add	sp, #12
 8007e6a:	bd30      	pop	{r4, r5, pc}
 8007e6c:	200042bc 	.word	0x200042bc

08007e70 <_init>:
 8007e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e72:	bf00      	nop
 8007e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e76:	bc08      	pop	{r3}
 8007e78:	469e      	mov	lr, r3
 8007e7a:	4770      	bx	lr

08007e7c <_fini>:
 8007e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e7e:	bf00      	nop
 8007e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e82:	bc08      	pop	{r3}
 8007e84:	469e      	mov	lr, r3
 8007e86:	4770      	bx	lr
