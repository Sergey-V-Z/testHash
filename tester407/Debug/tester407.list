
tester407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000016a8  08009288  08009288  00019288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a930  0800a930  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  0800a930  0800a930  0001a930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a938  0800a938  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a938  0800a938  0001a938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a93c  0800a93c  0001a93c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800a940  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020084  2**0
                  CONTENTS
 10 .bss          0000480c  20000084  20000084  00020084  2**2
                  ALLOC
 11 ._user_heap_stack 00006000  20004890  20004890  00020084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f275  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f04  00000000  00000000  0003f329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015e0  00000000  00000000  00043230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001478  00000000  00000000  00044810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026ee1  00000000  00000000  00045c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ac58  00000000  00000000  0006cb69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9918  00000000  00000000  000877c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001610d9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006020  00000000  00000000  0016112c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009270 	.word	0x08009270

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	08009270 	.word	0x08009270

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <_ZN9RV_BUTTONC1EP12GPIO_TypeDeftbb>:
#include "RV_BUTTON.h"

//создание экземпляра класса кнопки, порт, вывод, type (HIGH_PULL / LOW_PULL) и направление dir (NORM_OPEN / NORM_CLOSE)
RV_BUTTON::RV_BUTTON(GPIO_TypeDef *port, uint16_t pin, bool type, bool dir) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af00      	add	r7, sp, #0
 800056e:	60f8      	str	r0, [r7, #12]
 8000570:	60b9      	str	r1, [r7, #8]
 8000572:	4611      	mov	r1, r2
 8000574:	461a      	mov	r2, r3
 8000576:	460b      	mov	r3, r1
 8000578:	80fb      	strh	r3, [r7, #6]
 800057a:	4613      	mov	r3, r2
 800057c:	717b      	strb	r3, [r7, #5]
	_PORT = port;
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	68ba      	ldr	r2, [r7, #8]
 8000582:	605a      	str	r2, [r3, #4]
	_PIN = pin;
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	88fa      	ldrh	r2, [r7, #6]
 8000588:	811a      	strh	r2, [r3, #8]
	RV_BUTTON::init();
 800058a:	68f8      	ldr	r0, [r7, #12]
 800058c:	f000 f80d 	bl	80005aa <_ZN9RV_BUTTON4initEv>
	RV_BUTTON::setType(type);
 8000590:	797b      	ldrb	r3, [r7, #5]
 8000592:	4619      	mov	r1, r3
 8000594:	68f8      	ldr	r0, [r7, #12]
 8000596:	f000 f82e 	bl	80005f6 <_ZN9RV_BUTTON7setTypeEb>
	_inv_state = dir;
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	7e3a      	ldrb	r2, [r7, #24]
 800059e:	761a      	strb	r2, [r3, #24]
}
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	4618      	mov	r0, r3
 80005a4:	3710      	adds	r7, #16
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}

080005aa <_ZN9RV_BUTTON4initEv>:
//инициализация
void RV_BUTTON::init() {
 80005aa:	b580      	push	{r7, lr}
 80005ac:	b082      	sub	sp, #8
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	6078      	str	r0, [r7, #4]
	_mode = false;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	2200      	movs	r2, #0
 80005b6:	765a      	strb	r2, [r3, #25]
	btn_timer = 0;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2200      	movs	r2, #0
 80005bc:	615a      	str	r2, [r3, #20]
	btn_counter = 0;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	2200      	movs	r2, #0
 80005c2:	741a      	strb	r2, [r3, #16]
	last_counter = 0;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2200      	movs	r2, #0
 80005c8:	745a      	strb	r2, [r3, #17]
	_debounce = 120;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	2278      	movs	r2, #120	; 0x78
 80005ce:	815a      	strh	r2, [r3, #10]
	_timeout = 500;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005d6:	819a      	strh	r2, [r3, #12]
	_step_timeout = 400;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80005de:	81da      	strh	r2, [r3, #14]
	_inv_state = NORM_OPEN;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2200      	movs	r2, #0
 80005e4:	761a      	strb	r2, [r3, #24]
	RV_BUTTON::setType(HIGH_PULL);
 80005e6:	2100      	movs	r1, #0
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f000 f804 	bl	80005f6 <_ZN9RV_BUTTON7setTypeEb>
}
 80005ee:	bf00      	nop
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}

080005f6 <_ZN9RV_BUTTON7setTypeEb>:
//установка таймаута между инкрементами (по умолчанию 400 мс)
void RV_BUTTON::setStepTimeout(uint16_t step_timeout) {
	_step_timeout = step_timeout;
}
//установка типа кнопки (HIGH_PULL / LOW_PULL)
void RV_BUTTON::setType(bool type) {
 80005f6:	b480      	push	{r7}
 80005f8:	b083      	sub	sp, #12
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	6078      	str	r0, [r7, #4]
 80005fe:	460b      	mov	r3, r1
 8000600:	70fb      	strb	r3, [r7, #3]
	_type = type;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	78fa      	ldrb	r2, [r7, #3]
 8000606:	769a      	strb	r2, [r3, #26]
}
 8000608:	bf00      	nop
 800060a:	370c      	adds	r7, #12
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr

08000614 <_ZN9RV_BUTTON7isClickEv>:
	}
	else
		return false;
}
//возвращает true при клике. Сбрасывается после вызова
bool RV_BUTTON::isClick() {	
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
	if (flags.isOne_f) {
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	785b      	ldrb	r3, [r3, #1]
 8000620:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000624:	b2db      	uxtb	r3, r3
 8000626:	2b00      	cmp	r3, #0
 8000628:	d006      	beq.n	8000638 <_ZN9RV_BUTTON7isClickEv+0x24>
		flags.isOne_f = false;
 800062a:	687a      	ldr	r2, [r7, #4]
 800062c:	7853      	ldrb	r3, [r2, #1]
 800062e:	f36f 0341 	bfc	r3, #1, #1
 8000632:	7053      	strb	r3, [r2, #1]
		return true;
 8000634:	2301      	movs	r3, #1
 8000636:	e000      	b.n	800063a <_ZN9RV_BUTTON7isClickEv+0x26>
	}
	else
		return false;
 8000638:	2300      	movs	r3, #0
}
 800063a:	4618      	mov	r0, r3
 800063c:	370c      	adds	r7, #12
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr

08000646 <_ZN9RV_BUTTON4tickEv>:
	_mode = true;
	flags.btn_state = state ^ _inv_state;
	_mode = false;
}
//опрос кнопки
void RV_BUTTON::tick() {	
 8000646:	b580      	push	{r7, lr}
 8000648:	b082      	sub	sp, #8
 800064a:	af00      	add	r7, sp, #0
 800064c:	6078      	str	r0, [r7, #4]
	if (!_mode) flags.btn_state = !HAL_GPIO_ReadPin(_PORT, _PIN) ^ (_inv_state ^ _type);
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	7e5b      	ldrb	r3, [r3, #25]
 8000652:	f083 0301 	eor.w	r3, r3, #1
 8000656:	b2db      	uxtb	r3, r3
 8000658:	2b00      	cmp	r3, #0
 800065a:	d01e      	beq.n	800069a <_ZN9RV_BUTTON4tickEv+0x54>
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	685a      	ldr	r2, [r3, #4]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	891b      	ldrh	r3, [r3, #8]
 8000664:	4619      	mov	r1, r3
 8000666:	4610      	mov	r0, r2
 8000668:	f002 f8dc 	bl	8002824 <HAL_GPIO_ReadPin>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	bf0c      	ite	eq
 8000672:	2301      	moveq	r3, #1
 8000674:	2300      	movne	r3, #0
 8000676:	b2db      	uxtb	r3, r3
 8000678:	4619      	mov	r1, r3
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	7e1a      	ldrb	r2, [r3, #24]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	7e9b      	ldrb	r3, [r3, #26]
 8000682:	4053      	eors	r3, r2
 8000684:	b2db      	uxtb	r3, r3
 8000686:	4299      	cmp	r1, r3
 8000688:	bf14      	ite	ne
 800068a:	2301      	movne	r3, #1
 800068c:	2300      	moveq	r3, #0
 800068e:	b2d9      	uxtb	r1, r3
 8000690:	687a      	ldr	r2, [r7, #4]
 8000692:	7813      	ldrb	r3, [r2, #0]
 8000694:	f361 0300 	bfi	r3, r1, #0, #1
 8000698:	7013      	strb	r3, [r2, #0]
	
  if (flags.btn_state && !flags.btn_flag && (HAL_GetTick() - btn_timer >= _debounce)) {
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d015      	beq.n	80006d4 <_ZN9RV_BUTTON4tickEv+0x8e>
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	f083 0301 	eor.w	r3, r3, #1
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d00b      	beq.n	80006d4 <_ZN9RV_BUTTON4tickEv+0x8e>
 80006bc:	f001 fd58 	bl	8002170 <HAL_GetTick>
 80006c0:	4602      	mov	r2, r0
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	695b      	ldr	r3, [r3, #20]
 80006c6:	1ad3      	subs	r3, r2, r3
 80006c8:	687a      	ldr	r2, [r7, #4]
 80006ca:	8952      	ldrh	r2, [r2, #10]
 80006cc:	4293      	cmp	r3, r2
 80006ce:	d301      	bcc.n	80006d4 <_ZN9RV_BUTTON4tickEv+0x8e>
 80006d0:	2301      	movs	r3, #1
 80006d2:	e000      	b.n	80006d6 <_ZN9RV_BUTTON4tickEv+0x90>
 80006d4:	2300      	movs	r3, #0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d019      	beq.n	800070e <_ZN9RV_BUTTON4tickEv+0xc8>
    flags.btn_flag = true;
 80006da:	687a      	ldr	r2, [r7, #4]
 80006dc:	7813      	ldrb	r3, [r2, #0]
 80006de:	f043 0302 	orr.w	r3, r3, #2
 80006e2:	7013      	strb	r3, [r2, #0]
    btn_counter++;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	7c1b      	ldrb	r3, [r3, #16]
 80006e8:	3301      	adds	r3, #1
 80006ea:	b2da      	uxtb	r2, r3
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	741a      	strb	r2, [r3, #16]
    btn_timer = HAL_GetTick();
 80006f0:	f001 fd3e 	bl	8002170 <HAL_GetTick>
 80006f4:	4602      	mov	r2, r0
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	615a      	str	r2, [r3, #20]
    flags.isPress_f = true;
 80006fa:	687a      	ldr	r2, [r7, #4]
 80006fc:	7813      	ldrb	r3, [r2, #0]
 80006fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000702:	7013      	strb	r3, [r2, #0]
		flags.oneClick_f = true;
 8000704:	687a      	ldr	r2, [r7, #4]
 8000706:	7853      	ldrb	r3, [r2, #1]
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	7053      	strb	r3, [r2, #1]
  }
  if (!flags.btn_state && flags.btn_flag) {
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000716:	b2db      	uxtb	r3, r3
 8000718:	f083 0301 	eor.w	r3, r3, #1
 800071c:	b2db      	uxtb	r3, r3
 800071e:	2b00      	cmp	r3, #0
 8000720:	d030      	beq.n	8000784 <_ZN9RV_BUTTON4tickEv+0x13e>
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800072a:	b2db      	uxtb	r3, r3
 800072c:	2b00      	cmp	r3, #0
 800072e:	d029      	beq.n	8000784 <_ZN9RV_BUTTON4tickEv+0x13e>
    flags.btn_flag = false;
 8000730:	687a      	ldr	r2, [r7, #4]
 8000732:	7813      	ldrb	r3, [r2, #0]
 8000734:	f36f 0341 	bfc	r3, #1, #1
 8000738:	7013      	strb	r3, [r2, #0]
    flags.hold_flag = false;
 800073a:	687a      	ldr	r2, [r7, #4]
 800073c:	7813      	ldrb	r3, [r2, #0]
 800073e:	f36f 0382 	bfc	r3, #2, #1
 8000742:	7013      	strb	r3, [r2, #0]
    flags.isRelease_f = true;
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	7813      	ldrb	r3, [r2, #0]
 8000748:	f043 0320 	orr.w	r3, r3, #32
 800074c:	7013      	strb	r3, [r2, #0]
		btn_timer = HAL_GetTick();
 800074e:	f001 fd0f 	bl	8002170 <HAL_GetTick>
 8000752:	4602      	mov	r2, r0
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	615a      	str	r2, [r3, #20]
		flags.step_flag = false;
 8000758:	687a      	ldr	r2, [r7, #4]
 800075a:	7813      	ldrb	r3, [r2, #0]
 800075c:	f36f 13c7 	bfc	r3, #7, #1
 8000760:	7013      	strb	r3, [r2, #0]
		if (flags.oneClick_f) {
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	785b      	ldrb	r3, [r3, #1]
 8000766:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800076a:	b2db      	uxtb	r3, r3
 800076c:	2b00      	cmp	r3, #0
 800076e:	d009      	beq.n	8000784 <_ZN9RV_BUTTON4tickEv+0x13e>
			flags.oneClick_f = false;
 8000770:	687a      	ldr	r2, [r7, #4]
 8000772:	7853      	ldrb	r3, [r2, #1]
 8000774:	f36f 0300 	bfc	r3, #0, #1
 8000778:	7053      	strb	r3, [r2, #1]
			flags.isOne_f = true;
 800077a:	687a      	ldr	r2, [r7, #4]
 800077c:	7853      	ldrb	r3, [r2, #1]
 800077e:	f043 0302 	orr.w	r3, r3, #2
 8000782:	7053      	strb	r3, [r2, #1]
		}
  }
  if (flags.btn_flag && flags.btn_state && (HAL_GetTick() - btn_timer >= _timeout) && !flags.hold_flag) {
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800078c:	b2db      	uxtb	r3, r3
 800078e:	2b00      	cmp	r3, #0
 8000790:	d01c      	beq.n	80007cc <_ZN9RV_BUTTON4tickEv+0x186>
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800079a:	b2db      	uxtb	r3, r3
 800079c:	2b00      	cmp	r3, #0
 800079e:	d015      	beq.n	80007cc <_ZN9RV_BUTTON4tickEv+0x186>
 80007a0:	f001 fce6 	bl	8002170 <HAL_GetTick>
 80007a4:	4602      	mov	r2, r0
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	695b      	ldr	r3, [r3, #20]
 80007aa:	1ad3      	subs	r3, r2, r3
 80007ac:	687a      	ldr	r2, [r7, #4]
 80007ae:	8992      	ldrh	r2, [r2, #12]
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d30b      	bcc.n	80007cc <_ZN9RV_BUTTON4tickEv+0x186>
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	f083 0301 	eor.w	r3, r3, #1
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <_ZN9RV_BUTTON4tickEv+0x186>
 80007c8:	2301      	movs	r3, #1
 80007ca:	e000      	b.n	80007ce <_ZN9RV_BUTTON4tickEv+0x188>
 80007cc:	2300      	movs	r3, #0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d01b      	beq.n	800080a <_ZN9RV_BUTTON4tickEv+0x1c4>
    flags.hold_flag = true;
 80007d2:	687a      	ldr	r2, [r7, #4]
 80007d4:	7813      	ldrb	r3, [r2, #0]
 80007d6:	f043 0304 	orr.w	r3, r3, #4
 80007da:	7013      	strb	r3, [r2, #0]
    btn_counter = 0;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2200      	movs	r2, #0
 80007e0:	741a      	strb	r2, [r3, #16]
    flags.isHolded_f = true;
 80007e2:	687a      	ldr	r2, [r7, #4]
 80007e4:	7813      	ldrb	r3, [r2, #0]
 80007e6:	f043 0310 	orr.w	r3, r3, #16
 80007ea:	7013      	strb	r3, [r2, #0]
		flags.step_flag = true;
 80007ec:	687a      	ldr	r2, [r7, #4]
 80007ee:	7813      	ldrb	r3, [r2, #0]
 80007f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f4:	7013      	strb	r3, [r2, #0]
		flags.oneClick_f = false;
 80007f6:	687a      	ldr	r2, [r7, #4]
 80007f8:	7853      	ldrb	r3, [r2, #1]
 80007fa:	f36f 0300 	bfc	r3, #0, #1
 80007fe:	7053      	strb	r3, [r2, #1]
		btn_timer = HAL_GetTick();
 8000800:	f001 fcb6 	bl	8002170 <HAL_GetTick>
 8000804:	4602      	mov	r2, r0
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	615a      	str	r2, [r3, #20]
  }
  
  if ((HAL_GetTick() - btn_timer >= _timeout) && (btn_counter != 0)) {    
 800080a:	f001 fcb1 	bl	8002170 <HAL_GetTick>
 800080e:	4602      	mov	r2, r0
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	695b      	ldr	r3, [r3, #20]
 8000814:	1ad3      	subs	r3, r2, r3
 8000816:	687a      	ldr	r2, [r7, #4]
 8000818:	8992      	ldrh	r2, [r2, #12]
 800081a:	4293      	cmp	r3, r2
 800081c:	d305      	bcc.n	800082a <_ZN9RV_BUTTON4tickEv+0x1e4>
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	7c1b      	ldrb	r3, [r3, #16]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <_ZN9RV_BUTTON4tickEv+0x1e4>
 8000826:	2301      	movs	r3, #1
 8000828:	e000      	b.n	800082c <_ZN9RV_BUTTON4tickEv+0x1e6>
 800082a:	2300      	movs	r3, #0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d00b      	beq.n	8000848 <_ZN9RV_BUTTON4tickEv+0x202>
    last_counter = btn_counter;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	7c1a      	ldrb	r2, [r3, #16]
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	745a      	strb	r2, [r3, #17]
    btn_counter = 0;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2200      	movs	r2, #0
 800083c:	741a      	strb	r2, [r3, #16]
		flags.counter_flag = true;
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	7813      	ldrb	r3, [r2, #0]
 8000842:	f043 0308 	orr.w	r3, r3, #8
 8000846:	7013      	strb	r3, [r2, #0]
  }
}
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8000850:	b480      	push	{r7}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0
 8000856:	60f8      	str	r0, [r7, #12]
 8000858:	60b9      	str	r1, [r7, #8]
 800085a:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	4a07      	ldr	r2, [pc, #28]	; (800087c <vApplicationGetIdleTaskMemory+0x2c>)
 8000860:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	4a06      	ldr	r2, [pc, #24]	; (8000880 <vApplicationGetIdleTaskMemory+0x30>)
 8000866:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	2280      	movs	r2, #128	; 0x80
 800086c:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 800086e:	bf00      	nop
 8000870:	3714      	adds	r7, #20
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	200002dc 	.word	0x200002dc
 8000880:	20000390 	.word	0x20000390

08000884 <_Z16MX_FREERTOS_Initv>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000884:	b5b0      	push	{r4, r5, r7, lr}
 8000886:	b09c      	sub	sp, #112	; 0x70
 8000888:	af00      	add	r7, sp, #0
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of testTask */
  osThreadDef(testTask, TestTask, osPriorityNormal, 0, 256);
 800088a:	4b27      	ldr	r3, [pc, #156]	; (8000928 <_Z16MX_FREERTOS_Initv+0xa4>)
 800088c:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000890:	461d      	mov	r5, r3
 8000892:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000894:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000896:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800089a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  testTaskHandle = osThreadCreate(osThread(testTask), NULL);
 800089e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008a2:	2100      	movs	r1, #0
 80008a4:	4618      	mov	r0, r3
 80008a6:	f006 fdc2 	bl	800742e <osThreadCreate>
 80008aa:	4603      	mov	r3, r0
 80008ac:	4a1f      	ldr	r2, [pc, #124]	; (800092c <_Z16MX_FREERTOS_Initv+0xa8>)
 80008ae:	6013      	str	r3, [r2, #0]

  /* definition and creation of lcdTask */
  osThreadDef(lcdTask, LCDTask, osPriorityNormal, 0, 256);
 80008b0:	4b1f      	ldr	r3, [pc, #124]	; (8000930 <_Z16MX_FREERTOS_Initv+0xac>)
 80008b2:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80008b6:	461d      	mov	r5, r3
 80008b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  lcdTaskHandle = osThreadCreate(osThread(lcdTask), NULL);
 80008c4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f006 fdaf 	bl	800742e <osThreadCreate>
 80008d0:	4603      	mov	r3, r0
 80008d2:	4a18      	ldr	r2, [pc, #96]	; (8000934 <_Z16MX_FREERTOS_Initv+0xb0>)
 80008d4:	6013      	str	r3, [r2, #0]

  /* definition and creation of I2C_Task */
  osThreadDef(I2C_Task, i2c_Task, osPriorityNormal, 0, 256);
 80008d6:	4b18      	ldr	r3, [pc, #96]	; (8000938 <_Z16MX_FREERTOS_Initv+0xb4>)
 80008d8:	f107 041c 	add.w	r4, r7, #28
 80008dc:	461d      	mov	r5, r3
 80008de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  I2C_TaskHandle = osThreadCreate(osThread(I2C_Task), NULL);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	2100      	movs	r1, #0
 80008f0:	4618      	mov	r0, r3
 80008f2:	f006 fd9c 	bl	800742e <osThreadCreate>
 80008f6:	4603      	mov	r3, r0
 80008f8:	4a10      	ldr	r2, [pc, #64]	; (800093c <_Z16MX_FREERTOS_Initv+0xb8>)
 80008fa:	6013      	str	r3, [r2, #0]

  /* definition and creation of buttonTask */
  osThreadDef(buttonTask, ButtonTask, osPriorityNormal, 0, 128);
 80008fc:	4b10      	ldr	r3, [pc, #64]	; (8000940 <_Z16MX_FREERTOS_Initv+0xbc>)
 80008fe:	463c      	mov	r4, r7
 8000900:	461d      	mov	r5, r3
 8000902:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000904:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000906:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800090a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  buttonTaskHandle = osThreadCreate(osThread(buttonTask), NULL);
 800090e:	463b      	mov	r3, r7
 8000910:	2100      	movs	r1, #0
 8000912:	4618      	mov	r0, r3
 8000914:	f006 fd8b 	bl	800742e <osThreadCreate>
 8000918:	4603      	mov	r3, r0
 800091a:	4a0a      	ldr	r2, [pc, #40]	; (8000944 <_Z16MX_FREERTOS_Initv+0xc0>)
 800091c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800091e:	bf00      	nop
 8000920:	3770      	adds	r7, #112	; 0x70
 8000922:	46bd      	mov	sp, r7
 8000924:	bdb0      	pop	{r4, r5, r7, pc}
 8000926:	bf00      	nop
 8000928:	080092b4 	.word	0x080092b4
 800092c:	200002cc 	.word	0x200002cc
 8000930:	080092d0 	.word	0x080092d0
 8000934:	200002d0 	.word	0x200002d0
 8000938:	080092ec 	.word	0x080092ec
 800093c:	200002d4 	.word	0x200002d4
 8000940:	08009308 	.word	0x08009308
 8000944:	200002d8 	.word	0x200002d8

08000948 <_Z8TestTaskPKv>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_TestTask */
void TestTask(void const * argument)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b088      	sub	sp, #32
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TestTask */

	uint32_t timeOutUART = 50;
 8000950:	2332      	movs	r3, #50	; 0x32
 8000952:	61fb      	str	r3, [r7, #28]
	uint8_t snum[5];
	//команды uart
	uint8_t cmdASIC[7] = { 0x55, 0xAA, 0x52, 0x05, 0x00, 0x00, 0x0A };
 8000954:	4a52      	ldr	r2, [pc, #328]	; (8000aa0 <_Z8TestTaskPKv+0x158>)
 8000956:	f107 030c 	add.w	r3, r7, #12
 800095a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800095e:	6018      	str	r0, [r3, #0]
 8000960:	3304      	adds	r3, #4
 8000962:	8019      	strh	r1, [r3, #0]
 8000964:	3302      	adds	r3, #2
 8000966:	0c0a      	lsrs	r2, r1, #16
 8000968:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(RST_ASIC_GPIO_Port, RST_ASIC_Pin, GPIO_PIN_RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000970:	484c      	ldr	r0, [pc, #304]	; (8000aa4 <_Z8TestTaskPKv+0x15c>)
 8000972:	f001 ff6f 	bl	8002854 <HAL_GPIO_WritePin>


	/* Infinite loop */
	for (;;) {
		if (start && ready) {
 8000976:	4b4c      	ldr	r3, [pc, #304]	; (8000aa8 <_Z8TestTaskPKv+0x160>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	2b00      	cmp	r3, #0
 800097c:	f000 808c 	beq.w	8000a98 <_Z8TestTaskPKv+0x150>
 8000980:	4b4a      	ldr	r3, [pc, #296]	; (8000aac <_Z8TestTaskPKv+0x164>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	2b00      	cmp	r3, #0
 8000986:	f000 8087 	beq.w	8000a98 <_Z8TestTaskPKv+0x150>
			counter_bytes = 0;
 800098a:	4b49      	ldr	r3, [pc, #292]	; (8000ab0 <_Z8TestTaskPKv+0x168>)
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(RST_ASIC_GPIO_Port, RST_ASIC_Pin, GPIO_PIN_RESET);
 8000990:	2200      	movs	r2, #0
 8000992:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000996:	4843      	ldr	r0, [pc, #268]	; (8000aa4 <_Z8TestTaskPKv+0x15c>)
 8000998:	f001 ff5c 	bl	8002854 <HAL_GPIO_WritePin>
			osDelay(4);
 800099c:	2004      	movs	r0, #4
 800099e:	f006 fd92 	bl	80074c6 <osDelay>
			HAL_GPIO_WritePin(RST_ASIC_GPIO_Port, RST_ASIC_Pin, GPIO_PIN_SET);
 80009a2:	2201      	movs	r2, #1
 80009a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009a8:	483e      	ldr	r0, [pc, #248]	; (8000aa4 <_Z8TestTaskPKv+0x15c>)
 80009aa:	f001 ff53 	bl	8002854 <HAL_GPIO_WritePin>
			osDelay(1200);
 80009ae:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80009b2:	f006 fd88 	bl	80074c6 <osDelay>

			//цикл опроса
			while (start) {
 80009b6:	4b3c      	ldr	r3, [pc, #240]	; (8000aa8 <_Z8TestTaskPKv+0x160>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d06c      	beq.n	8000a98 <_Z8TestTaskPKv+0x150>

				//сброс асиков
				HAL_GPIO_WritePin(RST_ASIC_GPIO_Port, RST_ASIC_Pin, GPIO_PIN_RESET);
 80009be:	2200      	movs	r2, #0
 80009c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009c4:	4837      	ldr	r0, [pc, #220]	; (8000aa4 <_Z8TestTaskPKv+0x15c>)
 80009c6:	f001 ff45 	bl	8002854 <HAL_GPIO_WritePin>
				osDelay(500);
 80009ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009ce:	f006 fd7a 	bl	80074c6 <osDelay>
				HAL_GPIO_WritePin(RST_ASIC_GPIO_Port, RST_ASIC_Pin, GPIO_PIN_SET);
 80009d2:	2201      	movs	r2, #1
 80009d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009d8:	4832      	ldr	r0, [pc, #200]	; (8000aa4 <_Z8TestTaskPKv+0x15c>)
 80009da:	f001 ff3b 	bl	8002854 <HAL_GPIO_WritePin>
				osDelay(500);
 80009de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009e2:	f006 fd70 	bl	80074c6 <osDelay>

				status_uart = HAL_UART_Receive_IT(&huart6, readASIC, 1);
 80009e6:	2201      	movs	r2, #1
 80009e8:	4932      	ldr	r1, [pc, #200]	; (8000ab4 <_Z8TestTaskPKv+0x16c>)
 80009ea:	4833      	ldr	r0, [pc, #204]	; (8000ab8 <_Z8TestTaskPKv+0x170>)
 80009ec:	f005 fd75 	bl	80064da <HAL_UART_Receive_IT>
 80009f0:	4603      	mov	r3, r0
 80009f2:	461a      	mov	r2, r3
 80009f4:	4b31      	ldr	r3, [pc, #196]	; (8000abc <_Z8TestTaskPKv+0x174>)
 80009f6:	701a      	strb	r2, [r3, #0]
				status_uart = HAL_UART_Transmit(&huart1, cmdASIC, 7, 20);
 80009f8:	f107 010c 	add.w	r1, r7, #12
 80009fc:	2314      	movs	r3, #20
 80009fe:	2207      	movs	r2, #7
 8000a00:	482f      	ldr	r0, [pc, #188]	; (8000ac0 <_Z8TestTaskPKv+0x178>)
 8000a02:	f005 fcd8 	bl	80063b6 <HAL_UART_Transmit>
 8000a06:	4603      	mov	r3, r0
 8000a08:	461a      	mov	r2, r3
 8000a0a:	4b2c      	ldr	r3, [pc, #176]	; (8000abc <_Z8TestTaskPKv+0x174>)
 8000a0c:	701a      	strb	r2, [r3, #0]

				//запускаем таймер
				status_uartTIM = 1;
 8000a0e:	4b2d      	ldr	r3, [pc, #180]	; (8000ac4 <_Z8TestTaskPKv+0x17c>)
 8000a10:	2201      	movs	r2, #1
 8000a12:	701a      	strb	r2, [r3, #0]
				// ожидать таймаута по уарту
				while(uartTIM < timeOutUART){
 8000a14:	4b2c      	ldr	r3, [pc, #176]	; (8000ac8 <_Z8TestTaskPKv+0x180>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	69fa      	ldr	r2, [r7, #28]
 8000a1a:	429a      	cmp	r2, r3
 8000a1c:	d903      	bls.n	8000a26 <_Z8TestTaskPKv+0xde>
					osDelay(1);
 8000a1e:	2001      	movs	r0, #1
 8000a20:	f006 fd51 	bl	80074c6 <osDelay>
				while(uartTIM < timeOutUART){
 8000a24:	e7f6      	b.n	8000a14 <_Z8TestTaskPKv+0xcc>
				}
				uartTIM = 0;
 8000a26:	4b28      	ldr	r3, [pc, #160]	; (8000ac8 <_Z8TestTaskPKv+0x180>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
				status_uartTIM = 0;
 8000a2c:	4b25      	ldr	r3, [pc, #148]	; (8000ac4 <_Z8TestTaskPKv+0x17c>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	701a      	strb	r2, [r3, #0]

				// все данные пришли отключаем уарт
				HAL_UART_AbortReceive(&huart6);
 8000a32:	4821      	ldr	r0, [pc, #132]	; (8000ab8 <_Z8TestTaskPKv+0x170>)
 8000a34:	f005 fd81 	bl	800653a <HAL_UART_AbortReceive>

				//проверить пришедшие данные сравненией с шаблоном

				//посчитать количесво асиков

				pre_count_ASIC = counter_bytes / 9;
 8000a38:	4b1d      	ldr	r3, [pc, #116]	; (8000ab0 <_Z8TestTaskPKv+0x168>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a23      	ldr	r2, [pc, #140]	; (8000acc <_Z8TestTaskPKv+0x184>)
 8000a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a42:	085b      	lsrs	r3, r3, #1
 8000a44:	4a22      	ldr	r2, [pc, #136]	; (8000ad0 <_Z8TestTaskPKv+0x188>)
 8000a46:	6013      	str	r3, [r2, #0]
				if(!start){
 8000a48:	4b17      	ldr	r3, [pc, #92]	; (8000aa8 <_Z8TestTaskPKv+0x160>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d102      	bne.n	8000a56 <_Z8TestTaskPKv+0x10e>
					pre_count_ASIC = 0;
 8000a50:	4b1f      	ldr	r3, [pc, #124]	; (8000ad0 <_Z8TestTaskPKv+0x188>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
				}
				//itoa(pre_count_ASIC, (char*)snum, 10);
				sprintf((char*)snum, "%-2d", (int)pre_count_ASIC);
 8000a56:	4b1e      	ldr	r3, [pc, #120]	; (8000ad0 <_Z8TestTaskPKv+0x188>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	491c      	ldr	r1, [pc, #112]	; (8000ad4 <_Z8TestTaskPKv+0x18c>)
 8000a62:	4618      	mov	r0, r3
 8000a64:	f008 f86a 	bl	8008b3c <siprintf>

				//ssd1306_Fill(Black); //чистим экран
			    ssd1306_SetCursor(2, 28);
 8000a68:	211c      	movs	r1, #28
 8000a6a:	2002      	movs	r0, #2
 8000a6c:	f001 f858 	bl	8001b20 <ssd1306_SetCursor>
			    ssd1306_WriteString((char*)snum, Font_11x18, White);
 8000a70:	4a19      	ldr	r2, [pc, #100]	; (8000ad8 <_Z8TestTaskPKv+0x190>)
 8000a72:	f107 0014 	add.w	r0, r7, #20
 8000a76:	2301      	movs	r3, #1
 8000a78:	ca06      	ldmia	r2, {r1, r2}
 8000a7a:	f001 f82b 	bl	8001ad4 <ssd1306_WriteString>
			    //ssd1306_UpdateScreen();

				counter_bytes = 0;
 8000a7e:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <_Z8TestTaskPKv+0x168>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
				memset(readASIC, 0, sizeof readASIC);
 8000a84:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000a88:	2100      	movs	r1, #0
 8000a8a:	480a      	ldr	r0, [pc, #40]	; (8000ab4 <_Z8TestTaskPKv+0x16c>)
 8000a8c:	f007 ff7a 	bl	8008984 <memset>

				osDelay(200);
 8000a90:	20c8      	movs	r0, #200	; 0xc8
 8000a92:	f006 fd18 	bl	80074c6 <osDelay>
			while (start) {
 8000a96:	e78e      	b.n	80009b6 <_Z8TestTaskPKv+0x6e>

			}

	}
	osDelay(1);
 8000a98:	2001      	movs	r0, #1
 8000a9a:	f006 fd14 	bl	80074c6 <osDelay>
		if (start && ready) {
 8000a9e:	e76a      	b.n	8000976 <_Z8TestTaskPKv+0x2e>
 8000aa0:	0800932c 	.word	0x0800932c
 8000aa4:	40020000 	.word	0x40020000
 8000aa8:	200002c8 	.word	0x200002c8
 8000aac:	200002c9 	.word	0x200002c9
 8000ab0:	200000a8 	.word	0x200000a8
 8000ab4:	200000ac 	.word	0x200000ac
 8000ab8:	20004838 	.word	0x20004838
 8000abc:	200000a1 	.word	0x200000a1
 8000ac0:	200047f4 	.word	0x200047f4
 8000ac4:	20000594 	.word	0x20000594
 8000ac8:	20000590 	.word	0x20000590
 8000acc:	38e38e39 	.word	0x38e38e39
 8000ad0:	200000a4 	.word	0x200000a4
 8000ad4:	08009324 	.word	0x08009324
 8000ad8:	20000008 	.word	0x20000008

08000adc <_Z7LCDTaskPKv>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_LCDTask */
void LCDTask(void const * argument)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LCDTask */


	uint8_t blink = 0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	73fb      	strb	r3, [r7, #15]

	ssd1306_Init();
 8000ae8:	f000 fe62 	bl	80017b0 <ssd1306_Init>


	//ssd1306_TestAll();
    ssd1306_SetCursor(2, 0);
 8000aec:	2100      	movs	r1, #0
 8000aee:	2002      	movs	r0, #2
 8000af0:	f001 f816 	bl	8001b20 <ssd1306_SetCursor>
    ssd1306_WriteString((char*) "Tester hash v1", Font_7x10, White);
 8000af4:	4a16      	ldr	r2, [pc, #88]	; (8000b50 <_Z7LCDTaskPKv+0x74>)
 8000af6:	2301      	movs	r3, #1
 8000af8:	ca06      	ldmia	r2, {r1, r2}
 8000afa:	4816      	ldr	r0, [pc, #88]	; (8000b54 <_Z7LCDTaskPKv+0x78>)
 8000afc:	f000 ffea 	bl	8001ad4 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8000b00:	f000 fee4 	bl	80018cc <ssd1306_UpdateScreen>

/* Infinite loop */
for (;;) {


	if(counterRefresh >= 500){
 8000b04:	4b14      	ldr	r3, [pc, #80]	; (8000b58 <_Z7LCDTaskPKv+0x7c>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000b0c:	d319      	bcc.n	8000b42 <_Z7LCDTaskPKv+0x66>
		//ssd1306_SetCursor(100, 56);
		if (blink == 0) {
 8000b0e:	7bfb      	ldrb	r3, [r7, #15]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d10b      	bne.n	8000b2c <_Z7LCDTaskPKv+0x50>
			ssd1306_DrawCircle(100, 56, 4, White);
 8000b14:	2301      	movs	r3, #1
 8000b16:	2204      	movs	r2, #4
 8000b18:	2138      	movs	r1, #56	; 0x38
 8000b1a:	2064      	movs	r0, #100	; 0x64
 8000b1c:	f001 f818 	bl	8001b50 <ssd1306_DrawCircle>
			//ssd1306_UpdateScreen();
			blink = 1;
 8000b20:	2301      	movs	r3, #1
 8000b22:	73fb      	strb	r3, [r7, #15]
			counterRefresh = 0;
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <_Z7LCDTaskPKv+0x7c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	e00a      	b.n	8000b42 <_Z7LCDTaskPKv+0x66>
		}else {
			ssd1306_DrawCircle(100, 56, 4, Black);
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	2204      	movs	r2, #4
 8000b30:	2138      	movs	r1, #56	; 0x38
 8000b32:	2064      	movs	r0, #100	; 0x64
 8000b34:	f001 f80c 	bl	8001b50 <ssd1306_DrawCircle>
			//ssd1306_UpdateScreen();
			blink = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	73fb      	strb	r3, [r7, #15]
			counterRefresh = 0;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <_Z7LCDTaskPKv+0x7c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
		}

	}


	ssd1306_UpdateScreen();
 8000b42:	f000 fec3 	bl	80018cc <ssd1306_UpdateScreen>

	osDelay(84);
 8000b46:	2054      	movs	r0, #84	; 0x54
 8000b48:	f006 fcbd 	bl	80074c6 <osDelay>
	if(counterRefresh >= 500){
 8000b4c:	e7da      	b.n	8000b04 <_Z7LCDTaskPKv+0x28>
 8000b4e:	bf00      	nop
 8000b50:	20000000 	.word	0x20000000
 8000b54:	08009334 	.word	0x08009334
 8000b58:	20000598 	.word	0x20000598

08000b5c <_Z8i2c_TaskPKv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_i2c_Task */
void i2c_Task(void const * argument)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b09a      	sub	sp, #104	; 0x68
 8000b60:	af02      	add	r7, sp, #8
 8000b62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN i2c_Task */

	//команды i2c
	uint16_t addr = 0x20;
 8000b64:	2320      	movs	r3, #32
 8000b66:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	addr = addr<<1;
 8000b6a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8000b6e:	005b      	lsls	r3, r3, #1
 8000b70:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a


	uint8_t cmdStart_1[6] = { 0x55, 0xAA, 0x04, 0x07, 0x00, 0x0B };
 8000b74:	4aa5      	ldr	r2, [pc, #660]	; (8000e0c <_Z8i2c_TaskPKv+0x2b0>)
 8000b76:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b7e:	6018      	str	r0, [r3, #0]
 8000b80:	3304      	adds	r3, #4
 8000b82:	8019      	strh	r1, [r3, #0]
	uint8_t cmdRead_1[2] = { 0x00 };// 0x07 0x01
 8000b84:	2300      	movs	r3, #0
 8000b86:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	uint8_t cmdStart_2[6] = { 0x55, 0xAA, 0x04, 0x06, 0x00, 0x0A };
 8000b8a:	4aa1      	ldr	r2, [pc, #644]	; (8000e10 <_Z8i2c_TaskPKv+0x2b4>)
 8000b8c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000b90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b94:	6018      	str	r0, [r3, #0]
 8000b96:	3304      	adds	r3, #4
 8000b98:	8019      	strh	r1, [r3, #0]
	uint8_t cmdRead_2[2] = { 0x00 };// 0x06 0x01
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

	uint8_t cmdStart_3[9] = { 0x55, 0xAA, 0x07, 0x10, 0x19, 0x00, 0x00, 0x00, 0x30 };
 8000ba0:	4a9c      	ldr	r2, [pc, #624]	; (8000e14 <_Z8i2c_TaskPKv+0x2b8>)
 8000ba2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ba6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ba8:	c303      	stmia	r3!, {r0, r1}
 8000baa:	701a      	strb	r2, [r3, #0]
	uint8_t cmdRead_3[2] = { 0x00 };// 0x10 0x01
 8000bac:	2300      	movs	r3, #0
 8000bae:	86bb      	strh	r3, [r7, #52]	; 0x34

	uint8_t cmdStart_4[7] = { 0x55, 0xAA, 0x05, 0x15, 0x01, 0x00, 0x1B };
 8000bb0:	4a99      	ldr	r2, [pc, #612]	; (8000e18 <_Z8i2c_TaskPKv+0x2bc>)
 8000bb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bb6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bba:	6018      	str	r0, [r3, #0]
 8000bbc:	3304      	adds	r3, #4
 8000bbe:	8019      	strh	r1, [r3, #0]
 8000bc0:	3302      	adds	r3, #2
 8000bc2:	0c0a      	lsrs	r2, r1, #16
 8000bc4:	701a      	strb	r2, [r3, #0]
	uint8_t cmdRead_4[2] = { 0x00 };// 0x15 0x01
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	853b      	strh	r3, [r7, #40]	; 0x28

	uint8_t cmdStop[7] = { 0x55, 0xAA, 0x05, 0x15, 0x00, 0x00, 0x1A };
 8000bca:	4a94      	ldr	r2, [pc, #592]	; (8000e1c <_Z8i2c_TaskPKv+0x2c0>)
 8000bcc:	f107 0320 	add.w	r3, r7, #32
 8000bd0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bd4:	6018      	str	r0, [r3, #0]
 8000bd6:	3304      	adds	r3, #4
 8000bd8:	8019      	strh	r1, [r3, #0]
 8000bda:	3302      	adds	r3, #2
 8000bdc:	0c0a      	lsrs	r2, r1, #16
 8000bde:	701a      	strb	r2, [r3, #0]
	uint8_t cmdRead_stop[2] = { 0x00 };// 0x15 0x01
 8000be0:	2300      	movs	r3, #0
 8000be2:	83bb      	strh	r3, [r7, #28]

	uint8_t cmdRefresh[6] = { 0x55, 0xAA, 0x04, 0x16, 0x00, 0x1A };
 8000be4:	4a8e      	ldr	r2, [pc, #568]	; (8000e20 <_Z8i2c_TaskPKv+0x2c4>)
 8000be6:	f107 0314 	add.w	r3, r7, #20
 8000bea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bee:	6018      	str	r0, [r3, #0]
 8000bf0:	3304      	adds	r3, #4
 8000bf2:	8019      	strh	r1, [r3, #0]
	uint8_t cmdRead_Refresh[6] = { 0x00 };// 0x06 0x16 0x01 0x00 0x00 0x1D
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	823b      	strh	r3, [r7, #16]


	HAL_GPIO_WritePin(A0_GPIO_Port, A0_Pin, GPIO_PIN_RESET);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	2102      	movs	r1, #2
 8000c00:	4888      	ldr	r0, [pc, #544]	; (8000e24 <_Z8i2c_TaskPKv+0x2c8>)
 8000c02:	f001 fe27 	bl	8002854 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, GPIO_PIN_RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2101      	movs	r1, #1
 8000c0a:	4886      	ldr	r0, [pc, #536]	; (8000e24 <_Z8i2c_TaskPKv+0x2c8>)
 8000c0c:	f001 fe22 	bl	8002854 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, GPIO_PIN_RESET);
 8000c10:	2200      	movs	r2, #0
 8000c12:	2104      	movs	r1, #4
 8000c14:	4883      	ldr	r0, [pc, #524]	; (8000e24 <_Z8i2c_TaskPKv+0x2c8>)
 8000c16:	f001 fe1d 	bl	8002854 <HAL_GPIO_WritePin>


  /* Infinite loop */
  for(;;)
  {
	  plug = HAL_GPIO_ReadPin(PLUG_GPIO_Port, PLUG_Pin);
 8000c1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c1e:	4882      	ldr	r0, [pc, #520]	; (8000e28 <_Z8i2c_TaskPKv+0x2cc>)
 8000c20:	f001 fe00 	bl	8002824 <HAL_GPIO_ReadPin>
 8000c24:	4603      	mov	r3, r0
 8000c26:	461a      	mov	r2, r3
 8000c28:	4b80      	ldr	r3, [pc, #512]	; (8000e2c <_Z8i2c_TaskPKv+0x2d0>)
 8000c2a:	701a      	strb	r2, [r3, #0]

	  if (start && plug) {
 8000c2c:	4b80      	ldr	r3, [pc, #512]	; (8000e30 <_Z8i2c_TaskPKv+0x2d4>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	f000 8238 	beq.w	80010a6 <_Z8i2c_TaskPKv+0x54a>
 8000c36:	4b7d      	ldr	r3, [pc, #500]	; (8000e2c <_Z8i2c_TaskPKv+0x2d0>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	f000 8233 	beq.w	80010a6 <_Z8i2c_TaskPKv+0x54a>
					status_i2c = HAL_I2C_Master_Transmit(&hi2c1, addr, cmdStart_1, 6, 20);
 8000c40:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8000c44:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000c48:	2314      	movs	r3, #20
 8000c4a:	9300      	str	r3, [sp, #0]
 8000c4c:	2306      	movs	r3, #6
 8000c4e:	4879      	ldr	r0, [pc, #484]	; (8000e34 <_Z8i2c_TaskPKv+0x2d8>)
 8000c50:	f001 ff5e 	bl	8002b10 <HAL_I2C_Master_Transmit>
 8000c54:	4603      	mov	r3, r0
 8000c56:	461a      	mov	r2, r3
 8000c58:	4b77      	ldr	r3, [pc, #476]	; (8000e38 <_Z8i2c_TaskPKv+0x2dc>)
 8000c5a:	701a      	strb	r2, [r3, #0]
					osDelay(200);
 8000c5c:	20c8      	movs	r0, #200	; 0xc8
 8000c5e:	f006 fc32 	bl	80074c6 <osDelay>
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_1[0], 1, 20);
 8000c62:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000c66:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000c6a:	2314      	movs	r3, #20
 8000c6c:	9300      	str	r3, [sp, #0]
 8000c6e:	2301      	movs	r3, #1
 8000c70:	4870      	ldr	r0, [pc, #448]	; (8000e34 <_Z8i2c_TaskPKv+0x2d8>)
 8000c72:	f002 f84b 	bl	8002d0c <HAL_I2C_Master_Receive>
 8000c76:	4603      	mov	r3, r0
 8000c78:	461a      	mov	r2, r3
 8000c7a:	4b6f      	ldr	r3, [pc, #444]	; (8000e38 <_Z8i2c_TaskPKv+0x2dc>)
 8000c7c:	701a      	strb	r2, [r3, #0]
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_1[1], 1, 20);
 8000c7e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000c82:	1c5a      	adds	r2, r3, #1
 8000c84:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000c88:	2314      	movs	r3, #20
 8000c8a:	9300      	str	r3, [sp, #0]
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	4869      	ldr	r0, [pc, #420]	; (8000e34 <_Z8i2c_TaskPKv+0x2d8>)
 8000c90:	f002 f83c 	bl	8002d0c <HAL_I2C_Master_Receive>
 8000c94:	4603      	mov	r3, r0
 8000c96:	461a      	mov	r2, r3
 8000c98:	4b67      	ldr	r3, [pc, #412]	; (8000e38 <_Z8i2c_TaskPKv+0x2dc>)
 8000c9a:	701a      	strb	r2, [r3, #0]
					//проверить ответ
					if (cmdRead_1[0] != 0x07 && cmdRead_1[1] != 0x01) {
 8000c9c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000ca0:	2b07      	cmp	r3, #7
 8000ca2:	d017      	beq.n	8000cd4 <_Z8i2c_TaskPKv+0x178>
 8000ca4:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d013      	beq.n	8000cd4 <_Z8i2c_TaskPKv+0x178>
						start = 0;
 8000cac:	4b60      	ldr	r3, [pc, #384]	; (8000e30 <_Z8i2c_TaskPKv+0x2d4>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	701a      	strb	r2, [r3, #0]
						ready = 0;
 8000cb2:	4b62      	ldr	r3, [pc, #392]	; (8000e3c <_Z8i2c_TaskPKv+0x2e0>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	701a      	strb	r2, [r3, #0]
						ssd1306_Fill(Black); //чистим экран
 8000cb8:	2000      	movs	r0, #0
 8000cba:	f000 fde3 	bl	8001884 <ssd1306_Fill>
					    ssd1306_SetCursor(2, 0);
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	2002      	movs	r0, #2
 8000cc2:	f000 ff2d 	bl	8001b20 <ssd1306_SetCursor>
					    ssd1306_WriteString((char*) "error", Font_7x10, White);
 8000cc6:	4a5e      	ldr	r2, [pc, #376]	; (8000e40 <_Z8i2c_TaskPKv+0x2e4>)
 8000cc8:	2301      	movs	r3, #1
 8000cca:	ca06      	ldmia	r2, {r1, r2}
 8000ccc:	485d      	ldr	r0, [pc, #372]	; (8000e44 <_Z8i2c_TaskPKv+0x2e8>)
 8000cce:	f000 ff01 	bl	8001ad4 <ssd1306_WriteString>
					    //ssd1306_UpdateScreen();
						continue;
 8000cd2:	e1eb      	b.n	80010ac <_Z8i2c_TaskPKv+0x550>
					}
					osDelay(300);
 8000cd4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000cd8:	f006 fbf5 	bl	80074c6 <osDelay>

					status_i2c = HAL_I2C_Master_Transmit(&hi2c1, addr, cmdStart_2, 6, 20);
 8000cdc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000ce0:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000ce4:	2314      	movs	r3, #20
 8000ce6:	9300      	str	r3, [sp, #0]
 8000ce8:	2306      	movs	r3, #6
 8000cea:	4852      	ldr	r0, [pc, #328]	; (8000e34 <_Z8i2c_TaskPKv+0x2d8>)
 8000cec:	f001 ff10 	bl	8002b10 <HAL_I2C_Master_Transmit>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	4b50      	ldr	r3, [pc, #320]	; (8000e38 <_Z8i2c_TaskPKv+0x2dc>)
 8000cf6:	701a      	strb	r2, [r3, #0]
					osDelay(200);
 8000cf8:	20c8      	movs	r0, #200	; 0xc8
 8000cfa:	f006 fbe4 	bl	80074c6 <osDelay>
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_2[0], 1, 20);
 8000cfe:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000d02:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000d06:	2314      	movs	r3, #20
 8000d08:	9300      	str	r3, [sp, #0]
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	4849      	ldr	r0, [pc, #292]	; (8000e34 <_Z8i2c_TaskPKv+0x2d8>)
 8000d0e:	f001 fffd 	bl	8002d0c <HAL_I2C_Master_Receive>
 8000d12:	4603      	mov	r3, r0
 8000d14:	461a      	mov	r2, r3
 8000d16:	4b48      	ldr	r3, [pc, #288]	; (8000e38 <_Z8i2c_TaskPKv+0x2dc>)
 8000d18:	701a      	strb	r2, [r3, #0]
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_2[1], 1, 20);
 8000d1a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000d1e:	1c5a      	adds	r2, r3, #1
 8000d20:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000d24:	2314      	movs	r3, #20
 8000d26:	9300      	str	r3, [sp, #0]
 8000d28:	2301      	movs	r3, #1
 8000d2a:	4842      	ldr	r0, [pc, #264]	; (8000e34 <_Z8i2c_TaskPKv+0x2d8>)
 8000d2c:	f001 ffee 	bl	8002d0c <HAL_I2C_Master_Receive>
 8000d30:	4603      	mov	r3, r0
 8000d32:	461a      	mov	r2, r3
 8000d34:	4b40      	ldr	r3, [pc, #256]	; (8000e38 <_Z8i2c_TaskPKv+0x2dc>)
 8000d36:	701a      	strb	r2, [r3, #0]
					//проверить ответ
					if (cmdRead_2[0] != 0x06 && cmdRead_2[1] != 0x01) {
 8000d38:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000d3c:	2b06      	cmp	r3, #6
 8000d3e:	d017      	beq.n	8000d70 <_Z8i2c_TaskPKv+0x214>
 8000d40:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d013      	beq.n	8000d70 <_Z8i2c_TaskPKv+0x214>
						start = 0;
 8000d48:	4b39      	ldr	r3, [pc, #228]	; (8000e30 <_Z8i2c_TaskPKv+0x2d4>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	701a      	strb	r2, [r3, #0]
						ready = 0;
 8000d4e:	4b3b      	ldr	r3, [pc, #236]	; (8000e3c <_Z8i2c_TaskPKv+0x2e0>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	701a      	strb	r2, [r3, #0]
						ssd1306_Fill(Black); //чистим экран
 8000d54:	2000      	movs	r0, #0
 8000d56:	f000 fd95 	bl	8001884 <ssd1306_Fill>
					    ssd1306_SetCursor(2, 0);
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	2002      	movs	r0, #2
 8000d5e:	f000 fedf 	bl	8001b20 <ssd1306_SetCursor>
					    ssd1306_WriteString((char*) "error", Font_7x10, White);
 8000d62:	4a37      	ldr	r2, [pc, #220]	; (8000e40 <_Z8i2c_TaskPKv+0x2e4>)
 8000d64:	2301      	movs	r3, #1
 8000d66:	ca06      	ldmia	r2, {r1, r2}
 8000d68:	4836      	ldr	r0, [pc, #216]	; (8000e44 <_Z8i2c_TaskPKv+0x2e8>)
 8000d6a:	f000 feb3 	bl	8001ad4 <ssd1306_WriteString>
					    //ssd1306_UpdateScreen();
						continue;
 8000d6e:	e19d      	b.n	80010ac <_Z8i2c_TaskPKv+0x550>
					}
					osDelay(1000);
 8000d70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d74:	f006 fba7 	bl	80074c6 <osDelay>

					status_i2c = HAL_I2C_Master_Transmit(&hi2c1, addr, cmdStart_3, 9, 20);
 8000d78:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000d7c:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000d80:	2314      	movs	r3, #20
 8000d82:	9300      	str	r3, [sp, #0]
 8000d84:	2309      	movs	r3, #9
 8000d86:	482b      	ldr	r0, [pc, #172]	; (8000e34 <_Z8i2c_TaskPKv+0x2d8>)
 8000d88:	f001 fec2 	bl	8002b10 <HAL_I2C_Master_Transmit>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	461a      	mov	r2, r3
 8000d90:	4b29      	ldr	r3, [pc, #164]	; (8000e38 <_Z8i2c_TaskPKv+0x2dc>)
 8000d92:	701a      	strb	r2, [r3, #0]
					osDelay(100);
 8000d94:	2064      	movs	r0, #100	; 0x64
 8000d96:	f006 fb96 	bl	80074c6 <osDelay>
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_3[0], 1, 20);
 8000d9a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000d9e:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000da2:	2314      	movs	r3, #20
 8000da4:	9300      	str	r3, [sp, #0]
 8000da6:	2301      	movs	r3, #1
 8000da8:	4822      	ldr	r0, [pc, #136]	; (8000e34 <_Z8i2c_TaskPKv+0x2d8>)
 8000daa:	f001 ffaf 	bl	8002d0c <HAL_I2C_Master_Receive>
 8000dae:	4603      	mov	r3, r0
 8000db0:	461a      	mov	r2, r3
 8000db2:	4b21      	ldr	r3, [pc, #132]	; (8000e38 <_Z8i2c_TaskPKv+0x2dc>)
 8000db4:	701a      	strb	r2, [r3, #0]
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_3[1], 1, 20);
 8000db6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000dba:	1c5a      	adds	r2, r3, #1
 8000dbc:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000dc0:	2314      	movs	r3, #20
 8000dc2:	9300      	str	r3, [sp, #0]
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	481b      	ldr	r0, [pc, #108]	; (8000e34 <_Z8i2c_TaskPKv+0x2d8>)
 8000dc8:	f001 ffa0 	bl	8002d0c <HAL_I2C_Master_Receive>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	461a      	mov	r2, r3
 8000dd0:	4b19      	ldr	r3, [pc, #100]	; (8000e38 <_Z8i2c_TaskPKv+0x2dc>)
 8000dd2:	701a      	strb	r2, [r3, #0]
					//проверить ответ
					if (cmdRead_3[0] != 0x10 && cmdRead_3[1] != 0x01) {
 8000dd4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000dd8:	2b10      	cmp	r3, #16
 8000dda:	d035      	beq.n	8000e48 <_Z8i2c_TaskPKv+0x2ec>
 8000ddc:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d031      	beq.n	8000e48 <_Z8i2c_TaskPKv+0x2ec>
						start = 0;
 8000de4:	4b12      	ldr	r3, [pc, #72]	; (8000e30 <_Z8i2c_TaskPKv+0x2d4>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	701a      	strb	r2, [r3, #0]
						ready = 0;
 8000dea:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <_Z8i2c_TaskPKv+0x2e0>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	701a      	strb	r2, [r3, #0]
						ssd1306_Fill(Black); //чистим экран
 8000df0:	2000      	movs	r0, #0
 8000df2:	f000 fd47 	bl	8001884 <ssd1306_Fill>
					    ssd1306_SetCursor(2, 0);
 8000df6:	2100      	movs	r1, #0
 8000df8:	2002      	movs	r0, #2
 8000dfa:	f000 fe91 	bl	8001b20 <ssd1306_SetCursor>
					    ssd1306_WriteString((char*) "error", Font_7x10, White);
 8000dfe:	4a10      	ldr	r2, [pc, #64]	; (8000e40 <_Z8i2c_TaskPKv+0x2e4>)
 8000e00:	2301      	movs	r3, #1
 8000e02:	ca06      	ldmia	r2, {r1, r2}
 8000e04:	480f      	ldr	r0, [pc, #60]	; (8000e44 <_Z8i2c_TaskPKv+0x2e8>)
 8000e06:	f000 fe65 	bl	8001ad4 <ssd1306_WriteString>
					    //ssd1306_UpdateScreen();
						continue;
 8000e0a:	e14f      	b.n	80010ac <_Z8i2c_TaskPKv+0x550>
 8000e0c:	0800934c 	.word	0x0800934c
 8000e10:	08009354 	.word	0x08009354
 8000e14:	0800935c 	.word	0x0800935c
 8000e18:	08009368 	.word	0x08009368
 8000e1c:	08009370 	.word	0x08009370
 8000e20:	08009378 	.word	0x08009378
 8000e24:	40020c00 	.word	0x40020c00
 8000e28:	40020800 	.word	0x40020800
 8000e2c:	200002ca 	.word	0x200002ca
 8000e30:	200002c8 	.word	0x200002c8
 8000e34:	20004758 	.word	0x20004758
 8000e38:	200000a0 	.word	0x200000a0
 8000e3c:	200002c9 	.word	0x200002c9
 8000e40:	20000000 	.word	0x20000000
 8000e44:	08009344 	.word	0x08009344
					}
					osDelay(1000);
 8000e48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e4c:	f006 fb3b 	bl	80074c6 <osDelay>

					status_i2c = HAL_I2C_Master_Transmit(&hi2c1, addr, cmdStart_4, 7, 20);
 8000e50:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000e54:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000e58:	2314      	movs	r3, #20
 8000e5a:	9300      	str	r3, [sp, #0]
 8000e5c:	2307      	movs	r3, #7
 8000e5e:	4894      	ldr	r0, [pc, #592]	; (80010b0 <_Z8i2c_TaskPKv+0x554>)
 8000e60:	f001 fe56 	bl	8002b10 <HAL_I2C_Master_Transmit>
 8000e64:	4603      	mov	r3, r0
 8000e66:	461a      	mov	r2, r3
 8000e68:	4b92      	ldr	r3, [pc, #584]	; (80010b4 <_Z8i2c_TaskPKv+0x558>)
 8000e6a:	701a      	strb	r2, [r3, #0]
					osDelay(710);
 8000e6c:	f240 20c6 	movw	r0, #710	; 0x2c6
 8000e70:	f006 fb29 	bl	80074c6 <osDelay>
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_4[0], 1, 20);
 8000e74:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000e78:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000e7c:	2314      	movs	r3, #20
 8000e7e:	9300      	str	r3, [sp, #0]
 8000e80:	2301      	movs	r3, #1
 8000e82:	488b      	ldr	r0, [pc, #556]	; (80010b0 <_Z8i2c_TaskPKv+0x554>)
 8000e84:	f001 ff42 	bl	8002d0c <HAL_I2C_Master_Receive>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	4b89      	ldr	r3, [pc, #548]	; (80010b4 <_Z8i2c_TaskPKv+0x558>)
 8000e8e:	701a      	strb	r2, [r3, #0]
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_4[1], 1, 20);
 8000e90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e94:	1c5a      	adds	r2, r3, #1
 8000e96:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000e9a:	2314      	movs	r3, #20
 8000e9c:	9300      	str	r3, [sp, #0]
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	4883      	ldr	r0, [pc, #524]	; (80010b0 <_Z8i2c_TaskPKv+0x554>)
 8000ea2:	f001 ff33 	bl	8002d0c <HAL_I2C_Master_Receive>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	4b82      	ldr	r3, [pc, #520]	; (80010b4 <_Z8i2c_TaskPKv+0x558>)
 8000eac:	701a      	strb	r2, [r3, #0]
					//проверить ответ
					if (cmdRead_4[0] != 0x15 && cmdRead_4[1] != 0x01) {
 8000eae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000eb2:	2b15      	cmp	r3, #21
 8000eb4:	d017      	beq.n	8000ee6 <_Z8i2c_TaskPKv+0x38a>
 8000eb6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d013      	beq.n	8000ee6 <_Z8i2c_TaskPKv+0x38a>
						start = 0;
 8000ebe:	4b7e      	ldr	r3, [pc, #504]	; (80010b8 <_Z8i2c_TaskPKv+0x55c>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	701a      	strb	r2, [r3, #0]
						ready = 0;
 8000ec4:	4b7d      	ldr	r3, [pc, #500]	; (80010bc <_Z8i2c_TaskPKv+0x560>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	701a      	strb	r2, [r3, #0]
						ssd1306_Fill(Black); //чистим экран
 8000eca:	2000      	movs	r0, #0
 8000ecc:	f000 fcda 	bl	8001884 <ssd1306_Fill>
					    ssd1306_SetCursor(2, 0);
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	2002      	movs	r0, #2
 8000ed4:	f000 fe24 	bl	8001b20 <ssd1306_SetCursor>
					    ssd1306_WriteString((char*) "error", Font_7x10, White);
 8000ed8:	4a79      	ldr	r2, [pc, #484]	; (80010c0 <_Z8i2c_TaskPKv+0x564>)
 8000eda:	2301      	movs	r3, #1
 8000edc:	ca06      	ldmia	r2, {r1, r2}
 8000ede:	4879      	ldr	r0, [pc, #484]	; (80010c4 <_Z8i2c_TaskPKv+0x568>)
 8000ee0:	f000 fdf8 	bl	8001ad4 <ssd1306_WriteString>
					    //ssd1306_UpdateScreen();
						continue;
 8000ee4:	e0e2      	b.n	80010ac <_Z8i2c_TaskPKv+0x550>
					}


					osDelay(500);
 8000ee6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000eea:	f006 faec 	bl	80074c6 <osDelay>
					//выдать флаг готовности питания
					ready = 1;
 8000eee:	4b73      	ldr	r3, [pc, #460]	; (80010bc <_Z8i2c_TaskPKv+0x560>)
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	701a      	strb	r2, [r3, #0]

					osDelay(3000);
 8000ef4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000ef8:	f006 fae5 	bl	80074c6 <osDelay>
					//обновляем пик
					status_i2c = HAL_I2C_Master_Transmit(&hi2c1, addr, cmdRefresh, 6, 20);
 8000efc:	f107 0214 	add.w	r2, r7, #20
 8000f00:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000f04:	2314      	movs	r3, #20
 8000f06:	9300      	str	r3, [sp, #0]
 8000f08:	2306      	movs	r3, #6
 8000f0a:	4869      	ldr	r0, [pc, #420]	; (80010b0 <_Z8i2c_TaskPKv+0x554>)
 8000f0c:	f001 fe00 	bl	8002b10 <HAL_I2C_Master_Transmit>
 8000f10:	4603      	mov	r3, r0
 8000f12:	461a      	mov	r2, r3
 8000f14:	4b67      	ldr	r3, [pc, #412]	; (80010b4 <_Z8i2c_TaskPKv+0x558>)
 8000f16:	701a      	strb	r2, [r3, #0]
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, cmdRead_Refresh, 6, 20);
 8000f18:	f107 020c 	add.w	r2, r7, #12
 8000f1c:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000f20:	2314      	movs	r3, #20
 8000f22:	9300      	str	r3, [sp, #0]
 8000f24:	2306      	movs	r3, #6
 8000f26:	4862      	ldr	r0, [pc, #392]	; (80010b0 <_Z8i2c_TaskPKv+0x554>)
 8000f28:	f001 fef0 	bl	8002d0c <HAL_I2C_Master_Receive>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	461a      	mov	r2, r3
 8000f30:	4b60      	ldr	r3, [pc, #384]	; (80010b4 <_Z8i2c_TaskPKv+0x558>)
 8000f32:	701a      	strb	r2, [r3, #0]

					// запустить цикл обновления до остановки пользователем
					while(start){
 8000f34:	4b60      	ldr	r3, [pc, #384]	; (80010b8 <_Z8i2c_TaskPKv+0x55c>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	f000 8083 	beq.w	8001044 <_Z8i2c_TaskPKv+0x4e8>
							//обновляем пик
							status_i2c = HAL_I2C_Master_Transmit(&hi2c1, addr, cmdRefresh, 6, 20);
 8000f3e:	f107 0214 	add.w	r2, r7, #20
 8000f42:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000f46:	2314      	movs	r3, #20
 8000f48:	9300      	str	r3, [sp, #0]
 8000f4a:	2306      	movs	r3, #6
 8000f4c:	4858      	ldr	r0, [pc, #352]	; (80010b0 <_Z8i2c_TaskPKv+0x554>)
 8000f4e:	f001 fddf 	bl	8002b10 <HAL_I2C_Master_Transmit>
 8000f52:	4603      	mov	r3, r0
 8000f54:	461a      	mov	r2, r3
 8000f56:	4b57      	ldr	r3, [pc, #348]	; (80010b4 <_Z8i2c_TaskPKv+0x558>)
 8000f58:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 8000f5a:	200a      	movs	r0, #10
 8000f5c:	f006 fab3 	bl	80074c6 <osDelay>
							status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_Refresh[0], 1, 20);
 8000f60:	f107 020c 	add.w	r2, r7, #12
 8000f64:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000f68:	2314      	movs	r3, #20
 8000f6a:	9300      	str	r3, [sp, #0]
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	4850      	ldr	r0, [pc, #320]	; (80010b0 <_Z8i2c_TaskPKv+0x554>)
 8000f70:	f001 fecc 	bl	8002d0c <HAL_I2C_Master_Receive>
 8000f74:	4603      	mov	r3, r0
 8000f76:	461a      	mov	r2, r3
 8000f78:	4b4e      	ldr	r3, [pc, #312]	; (80010b4 <_Z8i2c_TaskPKv+0x558>)
 8000f7a:	701a      	strb	r2, [r3, #0]
							status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_Refresh[1], 1, 20);
 8000f7c:	f107 030c 	add.w	r3, r7, #12
 8000f80:	1c5a      	adds	r2, r3, #1
 8000f82:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000f86:	2314      	movs	r3, #20
 8000f88:	9300      	str	r3, [sp, #0]
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	4848      	ldr	r0, [pc, #288]	; (80010b0 <_Z8i2c_TaskPKv+0x554>)
 8000f8e:	f001 febd 	bl	8002d0c <HAL_I2C_Master_Receive>
 8000f92:	4603      	mov	r3, r0
 8000f94:	461a      	mov	r2, r3
 8000f96:	4b47      	ldr	r3, [pc, #284]	; (80010b4 <_Z8i2c_TaskPKv+0x558>)
 8000f98:	701a      	strb	r2, [r3, #0]
							status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_Refresh[2], 1, 20);
 8000f9a:	f107 030c 	add.w	r3, r7, #12
 8000f9e:	1c9a      	adds	r2, r3, #2
 8000fa0:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000fa4:	2314      	movs	r3, #20
 8000fa6:	9300      	str	r3, [sp, #0]
 8000fa8:	2301      	movs	r3, #1
 8000faa:	4841      	ldr	r0, [pc, #260]	; (80010b0 <_Z8i2c_TaskPKv+0x554>)
 8000fac:	f001 feae 	bl	8002d0c <HAL_I2C_Master_Receive>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	4b3f      	ldr	r3, [pc, #252]	; (80010b4 <_Z8i2c_TaskPKv+0x558>)
 8000fb6:	701a      	strb	r2, [r3, #0]
							status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_Refresh[3], 1, 20);
 8000fb8:	f107 030c 	add.w	r3, r7, #12
 8000fbc:	1cda      	adds	r2, r3, #3
 8000fbe:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000fc2:	2314      	movs	r3, #20
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	4839      	ldr	r0, [pc, #228]	; (80010b0 <_Z8i2c_TaskPKv+0x554>)
 8000fca:	f001 fe9f 	bl	8002d0c <HAL_I2C_Master_Receive>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	4b38      	ldr	r3, [pc, #224]	; (80010b4 <_Z8i2c_TaskPKv+0x558>)
 8000fd4:	701a      	strb	r2, [r3, #0]
							status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_Refresh[4], 1, 20);
 8000fd6:	f107 030c 	add.w	r3, r7, #12
 8000fda:	1d1a      	adds	r2, r3, #4
 8000fdc:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000fe0:	2314      	movs	r3, #20
 8000fe2:	9300      	str	r3, [sp, #0]
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	4832      	ldr	r0, [pc, #200]	; (80010b0 <_Z8i2c_TaskPKv+0x554>)
 8000fe8:	f001 fe90 	bl	8002d0c <HAL_I2C_Master_Receive>
 8000fec:	4603      	mov	r3, r0
 8000fee:	461a      	mov	r2, r3
 8000ff0:	4b30      	ldr	r3, [pc, #192]	; (80010b4 <_Z8i2c_TaskPKv+0x558>)
 8000ff2:	701a      	strb	r2, [r3, #0]
							status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_Refresh[5], 1, 20);
 8000ff4:	f107 030c 	add.w	r3, r7, #12
 8000ff8:	1d5a      	adds	r2, r3, #5
 8000ffa:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8000ffe:	2314      	movs	r3, #20
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2301      	movs	r3, #1
 8001004:	482a      	ldr	r0, [pc, #168]	; (80010b0 <_Z8i2c_TaskPKv+0x554>)
 8001006:	f001 fe81 	bl	8002d0c <HAL_I2C_Master_Receive>
 800100a:	4603      	mov	r3, r0
 800100c:	461a      	mov	r2, r3
 800100e:	4b29      	ldr	r3, [pc, #164]	; (80010b4 <_Z8i2c_TaskPKv+0x558>)
 8001010:	701a      	strb	r2, [r3, #0]

							//ожидаем 10 секунд и обновляем пик если за это время был останов то выходим из цикла
							for (int var = 0; var < 10000; ++var) {
 8001012:	2300      	movs	r3, #0
 8001014:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001016:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001018:	f242 720f 	movw	r2, #9999	; 0x270f
 800101c:	4293      	cmp	r3, r2
 800101e:	dc0b      	bgt.n	8001038 <_Z8i2c_TaskPKv+0x4dc>
								if(!start){
 8001020:	4b25      	ldr	r3, [pc, #148]	; (80010b8 <_Z8i2c_TaskPKv+0x55c>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d006      	beq.n	8001036 <_Z8i2c_TaskPKv+0x4da>
									break;
								}
								osDelay(1);
 8001028:	2001      	movs	r0, #1
 800102a:	f006 fa4c 	bl	80074c6 <osDelay>
							for (int var = 0; var < 10000; ++var) {
 800102e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001030:	3301      	adds	r3, #1
 8001032:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001034:	e7ef      	b.n	8001016 <_Z8i2c_TaskPKv+0x4ba>
									break;
 8001036:	bf00      	nop
							}

							if(!start){
 8001038:	4b1f      	ldr	r3, [pc, #124]	; (80010b8 <_Z8i2c_TaskPKv+0x55c>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d000      	beq.n	8001042 <_Z8i2c_TaskPKv+0x4e6>
					while(start){
 8001040:	e778      	b.n	8000f34 <_Z8i2c_TaskPKv+0x3d8>
									break;
 8001042:	bf00      	nop
							}

					}

					// выключение питания
					status_i2c = HAL_I2C_Master_Transmit(&hi2c1, addr, cmdStop, 7, 20);
 8001044:	f107 0220 	add.w	r2, r7, #32
 8001048:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 800104c:	2314      	movs	r3, #20
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	2307      	movs	r3, #7
 8001052:	4817      	ldr	r0, [pc, #92]	; (80010b0 <_Z8i2c_TaskPKv+0x554>)
 8001054:	f001 fd5c 	bl	8002b10 <HAL_I2C_Master_Transmit>
 8001058:	4603      	mov	r3, r0
 800105a:	461a      	mov	r2, r3
 800105c:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <_Z8i2c_TaskPKv+0x558>)
 800105e:	701a      	strb	r2, [r3, #0]
					osDelay(20);
 8001060:	2014      	movs	r0, #20
 8001062:	f006 fa30 	bl	80074c6 <osDelay>
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_stop[0], 1, 20);
 8001066:	f107 021c 	add.w	r2, r7, #28
 800106a:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 800106e:	2314      	movs	r3, #20
 8001070:	9300      	str	r3, [sp, #0]
 8001072:	2301      	movs	r3, #1
 8001074:	480e      	ldr	r0, [pc, #56]	; (80010b0 <_Z8i2c_TaskPKv+0x554>)
 8001076:	f001 fe49 	bl	8002d0c <HAL_I2C_Master_Receive>
 800107a:	4603      	mov	r3, r0
 800107c:	461a      	mov	r2, r3
 800107e:	4b0d      	ldr	r3, [pc, #52]	; (80010b4 <_Z8i2c_TaskPKv+0x558>)
 8001080:	701a      	strb	r2, [r3, #0]
					status_i2c = HAL_I2C_Master_Receive(&hi2c1, addr, &cmdRead_stop[1], 1, 20);
 8001082:	f107 031c 	add.w	r3, r7, #28
 8001086:	1c5a      	adds	r2, r3, #1
 8001088:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 800108c:	2314      	movs	r3, #20
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	2301      	movs	r3, #1
 8001092:	4807      	ldr	r0, [pc, #28]	; (80010b0 <_Z8i2c_TaskPKv+0x554>)
 8001094:	f001 fe3a 	bl	8002d0c <HAL_I2C_Master_Receive>
 8001098:	4603      	mov	r3, r0
 800109a:	461a      	mov	r2, r3
 800109c:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <_Z8i2c_TaskPKv+0x558>)
 800109e:	701a      	strb	r2, [r3, #0]
					//выдать флаг отключения питания
					ready = 0;
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <_Z8i2c_TaskPKv+0x560>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	701a      	strb	r2, [r3, #0]
	  }

	  osDelay(1);
 80010a6:	2001      	movs	r0, #1
 80010a8:	f006 fa0d 	bl	80074c6 <osDelay>
  }
 80010ac:	e5b5      	b.n	8000c1a <_Z8i2c_TaskPKv+0xbe>
 80010ae:	bf00      	nop
 80010b0:	20004758 	.word	0x20004758
 80010b4:	200000a0 	.word	0x200000a0
 80010b8:	200002c8 	.word	0x200002c8
 80010bc:	200002c9 	.word	0x200002c9
 80010c0:	20000000 	.word	0x20000000
 80010c4:	08009344 	.word	0x08009344

080010c8 <_Z10ButtonTaskPKv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ButtonTask */
void ButtonTask(void const * argument)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b09c      	sub	sp, #112	; 0x70
 80010cc:	af02      	add	r7, sp, #8
 80010ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ButtonTask */

	RV_BUTTON button1(B1_GPIO_Port, B1_Pin, HIGH_PULL, NORM_OPEN);
 80010d0:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80010d4:	2300      	movs	r3, #0
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	2300      	movs	r3, #0
 80010da:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010de:	4941      	ldr	r1, [pc, #260]	; (80011e4 <_Z10ButtonTaskPKv+0x11c>)
 80010e0:	f7ff fa42 	bl	8000568 <_ZN9RV_BUTTONC1EP12GPIO_TypeDeftbb>
	RV_BUTTON button2(B2_GPIO_Port, B2_Pin, HIGH_PULL, NORM_OPEN);
 80010e4:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80010e8:	2300      	movs	r3, #0
 80010ea:	9300      	str	r3, [sp, #0]
 80010ec:	2300      	movs	r3, #0
 80010ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010f2:	493d      	ldr	r1, [pc, #244]	; (80011e8 <_Z10ButtonTaskPKv+0x120>)
 80010f4:	f7ff fa38 	bl	8000568 <_ZN9RV_BUTTONC1EP12GPIO_TypeDeftbb>
	RV_BUTTON button3(B3_GPIO_Port, B3_Pin, HIGH_PULL, NORM_OPEN);
 80010f8:	f107 0014 	add.w	r0, r7, #20
 80010fc:	2300      	movs	r3, #0
 80010fe:	9300      	str	r3, [sp, #0]
 8001100:	2300      	movs	r3, #0
 8001102:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001106:	4938      	ldr	r1, [pc, #224]	; (80011e8 <_Z10ButtonTaskPKv+0x120>)
 8001108:	f7ff fa2e 	bl	8000568 <_ZN9RV_BUTTONC1EP12GPIO_TypeDeftbb>
	uint8_t snum[5];

	button1.isClick();
 800110c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff fa7f 	bl	8000614 <_ZN9RV_BUTTON7isClickEv>
	button2.isClick();
 8001116:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff fa7a 	bl	8000614 <_ZN9RV_BUTTON7isClickEv>
	button3.isClick();
 8001120:	f107 0314 	add.w	r3, r7, #20
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff fa75 	bl	8000614 <_ZN9RV_BUTTON7isClickEv>

  /* Infinite loop */
  for(;;)
  {
	button1.tick();
 800112a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff fa89 	bl	8000646 <_ZN9RV_BUTTON4tickEv>
	//button2.tick();
	//button3.tick();

	if (button1.isClick() ){
 8001134:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff fa6b 	bl	8000614 <_ZN9RV_BUTTON7isClickEv>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d04a      	beq.n	80011da <_Z10ButtonTaskPKv+0x112>
		if (start == 0 && plug == GPIO_PIN_SET) {
 8001144:	4b29      	ldr	r3, [pc, #164]	; (80011ec <_Z10ButtonTaskPKv+0x124>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d111      	bne.n	8001170 <_Z10ButtonTaskPKv+0xa8>
 800114c:	4b28      	ldr	r3, [pc, #160]	; (80011f0 <_Z10ButtonTaskPKv+0x128>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d10d      	bne.n	8001170 <_Z10ButtonTaskPKv+0xa8>
			start = 1;
 8001154:	4b25      	ldr	r3, [pc, #148]	; (80011ec <_Z10ButtonTaskPKv+0x124>)
 8001156:	2201      	movs	r2, #1
 8001158:	701a      	strb	r2, [r3, #0]
			//ssd1306_Fill(Black); //чистим экран
			ssd1306_SetCursor(2, 0);
 800115a:	2100      	movs	r1, #0
 800115c:	2002      	movs	r0, #2
 800115e:	f000 fcdf 	bl	8001b20 <ssd1306_SetCursor>
			ssd1306_WriteString((char*) "Test started   ", Font_7x10, White);
 8001162:	4a24      	ldr	r2, [pc, #144]	; (80011f4 <_Z10ButtonTaskPKv+0x12c>)
 8001164:	2301      	movs	r3, #1
 8001166:	ca06      	ldmia	r2, {r1, r2}
 8001168:	4823      	ldr	r0, [pc, #140]	; (80011f8 <_Z10ButtonTaskPKv+0x130>)
 800116a:	f000 fcb3 	bl	8001ad4 <ssd1306_WriteString>
 800116e:	e034      	b.n	80011da <_Z10ButtonTaskPKv+0x112>
			//ssd1306_UpdateScreen();

		}else if(start == 1 && plug == GPIO_PIN_SET){
 8001170:	4b1e      	ldr	r3, [pc, #120]	; (80011ec <_Z10ButtonTaskPKv+0x124>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d123      	bne.n	80011c0 <_Z10ButtonTaskPKv+0xf8>
 8001178:	4b1d      	ldr	r3, [pc, #116]	; (80011f0 <_Z10ButtonTaskPKv+0x128>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d11f      	bne.n	80011c0 <_Z10ButtonTaskPKv+0xf8>
			start = 0;
 8001180:	4b1a      	ldr	r3, [pc, #104]	; (80011ec <_Z10ButtonTaskPKv+0x124>)
 8001182:	2200      	movs	r2, #0
 8001184:	701a      	strb	r2, [r3, #0]
			//ssd1306_Fill(Black); //чистим экран
			ssd1306_SetCursor(2, 0);
 8001186:	2100      	movs	r1, #0
 8001188:	2002      	movs	r0, #2
 800118a:	f000 fcc9 	bl	8001b20 <ssd1306_SetCursor>
			ssd1306_WriteString((char*) "Test stoped     ", Font_7x10, White);
 800118e:	4a19      	ldr	r2, [pc, #100]	; (80011f4 <_Z10ButtonTaskPKv+0x12c>)
 8001190:	2301      	movs	r3, #1
 8001192:	ca06      	ldmia	r2, {r1, r2}
 8001194:	4819      	ldr	r0, [pc, #100]	; (80011fc <_Z10ButtonTaskPKv+0x134>)
 8001196:	f000 fc9d 	bl	8001ad4 <ssd1306_WriteString>

			sprintf((char*)snum, "%-2d", 0);
 800119a:	f107 030c 	add.w	r3, r7, #12
 800119e:	2200      	movs	r2, #0
 80011a0:	4917      	ldr	r1, [pc, #92]	; (8001200 <_Z10ButtonTaskPKv+0x138>)
 80011a2:	4618      	mov	r0, r3
 80011a4:	f007 fcca 	bl	8008b3c <siprintf>
		    ssd1306_SetCursor(2, 28);
 80011a8:	211c      	movs	r1, #28
 80011aa:	2002      	movs	r0, #2
 80011ac:	f000 fcb8 	bl	8001b20 <ssd1306_SetCursor>
		    ssd1306_WriteString((char*)snum, Font_11x18, White);
 80011b0:	4a14      	ldr	r2, [pc, #80]	; (8001204 <_Z10ButtonTaskPKv+0x13c>)
 80011b2:	f107 000c 	add.w	r0, r7, #12
 80011b6:	2301      	movs	r3, #1
 80011b8:	ca06      	ldmia	r2, {r1, r2}
 80011ba:	f000 fc8b 	bl	8001ad4 <ssd1306_WriteString>
 80011be:	e00c      	b.n	80011da <_Z10ButtonTaskPKv+0x112>

			//ssd1306_UpdateScreen();
		}else {
			start = 0;
 80011c0:	4b0a      	ldr	r3, [pc, #40]	; (80011ec <_Z10ButtonTaskPKv+0x124>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	701a      	strb	r2, [r3, #0]
			//ssd1306_Fill(Black); //чистим экран
			ssd1306_SetCursor(2, 0);
 80011c6:	2100      	movs	r1, #0
 80011c8:	2002      	movs	r0, #2
 80011ca:	f000 fca9 	bl	8001b20 <ssd1306_SetCursor>
			ssd1306_WriteString((char*) "No plug        ", Font_7x10, White);
 80011ce:	4a09      	ldr	r2, [pc, #36]	; (80011f4 <_Z10ButtonTaskPKv+0x12c>)
 80011d0:	2301      	movs	r3, #1
 80011d2:	ca06      	ldmia	r2, {r1, r2}
 80011d4:	480c      	ldr	r0, [pc, #48]	; (8001208 <_Z10ButtonTaskPKv+0x140>)
 80011d6:	f000 fc7d 	bl	8001ad4 <ssd1306_WriteString>
			//ssd1306_UpdateScreen();
		}

	}
    osDelay(1);
 80011da:	2001      	movs	r0, #1
 80011dc:	f006 f973 	bl	80074c6 <osDelay>
	button1.tick();
 80011e0:	e7a3      	b.n	800112a <_Z10ButtonTaskPKv+0x62>
 80011e2:	bf00      	nop
 80011e4:	40020000 	.word	0x40020000
 80011e8:	40020800 	.word	0x40020800
 80011ec:	200002c8 	.word	0x200002c8
 80011f0:	200002ca 	.word	0x200002ca
 80011f4:	20000000 	.word	0x20000000
 80011f8:	08009380 	.word	0x08009380
 80011fc:	08009390 	.word	0x08009390
 8001200:	08009324 	.word	0x08009324
 8001204:	20000008 	.word	0x20000008
 8001208:	080093a4 	.word	0x080093a4

0800120c <HAL_UART_RxCpltCallback>:
  /* USER CODE END ButtonTask */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]

	status_uart = HAL_UART_Receive_IT(&huart6, &readASIC[counter_bytes], 1);
 8001214:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <HAL_UART_RxCpltCallback+0x3c>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a0c      	ldr	r2, [pc, #48]	; (800124c <HAL_UART_RxCpltCallback+0x40>)
 800121a:	4413      	add	r3, r2
 800121c:	2201      	movs	r2, #1
 800121e:	4619      	mov	r1, r3
 8001220:	480b      	ldr	r0, [pc, #44]	; (8001250 <HAL_UART_RxCpltCallback+0x44>)
 8001222:	f005 f95a 	bl	80064da <HAL_UART_Receive_IT>
 8001226:	4603      	mov	r3, r0
 8001228:	461a      	mov	r2, r3
 800122a:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <HAL_UART_RxCpltCallback+0x48>)
 800122c:	701a      	strb	r2, [r3, #0]
	counter_bytes++;
 800122e:	4b06      	ldr	r3, [pc, #24]	; (8001248 <HAL_UART_RxCpltCallback+0x3c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	3301      	adds	r3, #1
 8001234:	4a04      	ldr	r2, [pc, #16]	; (8001248 <HAL_UART_RxCpltCallback+0x3c>)
 8001236:	6013      	str	r3, [r2, #0]
	uartTIM = 0; //сбрасываем таймер до тех пор пока не придут все данные
 8001238:	4b07      	ldr	r3, [pc, #28]	; (8001258 <HAL_UART_RxCpltCallback+0x4c>)
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	200000a8 	.word	0x200000a8
 800124c:	200000ac 	.word	0x200000ac
 8001250:	20004838 	.word	0x20004838
 8001254:	200000a1 	.word	0x200000a1
 8001258:	20000590 	.word	0x20000590

0800125c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08a      	sub	sp, #40	; 0x28
 8001260:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001262:	f107 0314 	add.w	r3, r7, #20
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]
 800126c:	609a      	str	r2, [r3, #8]
 800126e:	60da      	str	r2, [r3, #12]
 8001270:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	613b      	str	r3, [r7, #16]
 8001276:	4b4b      	ldr	r3, [pc, #300]	; (80013a4 <MX_GPIO_Init+0x148>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a4a      	ldr	r2, [pc, #296]	; (80013a4 <MX_GPIO_Init+0x148>)
 800127c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b48      	ldr	r3, [pc, #288]	; (80013a4 <MX_GPIO_Init+0x148>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800128a:	613b      	str	r3, [r7, #16]
 800128c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	4b44      	ldr	r3, [pc, #272]	; (80013a4 <MX_GPIO_Init+0x148>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a43      	ldr	r2, [pc, #268]	; (80013a4 <MX_GPIO_Init+0x148>)
 8001298:	f043 0304 	orr.w	r3, r3, #4
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b41      	ldr	r3, [pc, #260]	; (80013a4 <MX_GPIO_Init+0x148>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0304 	and.w	r3, r3, #4
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	60bb      	str	r3, [r7, #8]
 80012ae:	4b3d      	ldr	r3, [pc, #244]	; (80013a4 <MX_GPIO_Init+0x148>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	4a3c      	ldr	r2, [pc, #240]	; (80013a4 <MX_GPIO_Init+0x148>)
 80012b4:	f043 0301 	orr.w	r3, r3, #1
 80012b8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ba:	4b3a      	ldr	r3, [pc, #232]	; (80013a4 <MX_GPIO_Init+0x148>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	60bb      	str	r3, [r7, #8]
 80012c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	607b      	str	r3, [r7, #4]
 80012ca:	4b36      	ldr	r3, [pc, #216]	; (80013a4 <MX_GPIO_Init+0x148>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	4a35      	ldr	r2, [pc, #212]	; (80013a4 <MX_GPIO_Init+0x148>)
 80012d0:	f043 0308 	orr.w	r3, r3, #8
 80012d4:	6313      	str	r3, [r2, #48]	; 0x30
 80012d6:	4b33      	ldr	r3, [pc, #204]	; (80013a4 <MX_GPIO_Init+0x148>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	f003 0308 	and.w	r3, r3, #8
 80012de:	607b      	str	r3, [r7, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	603b      	str	r3, [r7, #0]
 80012e6:	4b2f      	ldr	r3, [pc, #188]	; (80013a4 <MX_GPIO_Init+0x148>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a2e      	ldr	r2, [pc, #184]	; (80013a4 <MX_GPIO_Init+0x148>)
 80012ec:	f043 0302 	orr.w	r3, r3, #2
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b2c      	ldr	r3, [pc, #176]	; (80013a4 <MX_GPIO_Init+0x148>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	603b      	str	r3, [r7, #0]
 80012fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_ASIC_GPIO_Port, RST_ASIC_Pin, GPIO_PIN_SET);
 80012fe:	2201      	movs	r2, #1
 8001300:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001304:	4828      	ldr	r0, [pc, #160]	; (80013a8 <MX_GPIO_Init+0x14c>)
 8001306:	f001 faa5 	bl	8002854 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, A1_Pin|A0_Pin|A2_Pin, GPIO_PIN_SET);
 800130a:	2201      	movs	r2, #1
 800130c:	2107      	movs	r1, #7
 800130e:	4827      	ldr	r0, [pc, #156]	; (80013ac <MX_GPIO_Init+0x150>)
 8001310:	f001 faa0 	bl	8002854 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RST_ASIC_Pin;
 8001314:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001318:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131a:	2301      	movs	r3, #1
 800131c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001322:	2300      	movs	r3, #0
 8001324:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RST_ASIC_GPIO_Port, &GPIO_InitStruct);
 8001326:	f107 0314 	add.w	r3, r7, #20
 800132a:	4619      	mov	r1, r3
 800132c:	481e      	ldr	r0, [pc, #120]	; (80013a8 <MX_GPIO_Init+0x14c>)
 800132e:	f001 f8dd 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001332:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001336:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001338:	2300      	movs	r3, #0
 800133a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800133c:	2301      	movs	r3, #1
 800133e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	4619      	mov	r1, r3
 8001346:	4818      	ldr	r0, [pc, #96]	; (80013a8 <MX_GPIO_Init+0x14c>)
 8001348:	f001 f8d0 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 800134c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001350:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001352:	2300      	movs	r3, #0
 8001354:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001356:	2301      	movs	r3, #1
 8001358:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800135a:	f107 0314 	add.w	r3, r7, #20
 800135e:	4619      	mov	r1, r3
 8001360:	4813      	ldr	r0, [pc, #76]	; (80013b0 <MX_GPIO_Init+0x154>)
 8001362:	f001 f8c3 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PLUG_Pin;
 8001366:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800136a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800136c:	2300      	movs	r3, #0
 800136e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	2300      	movs	r3, #0
 8001372:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PLUG_GPIO_Port, &GPIO_InitStruct);
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	4619      	mov	r1, r3
 800137a:	480d      	ldr	r0, [pc, #52]	; (80013b0 <MX_GPIO_Init+0x154>)
 800137c:	f001 f8b6 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = A1_Pin|A0_Pin|A2_Pin;
 8001380:	2307      	movs	r3, #7
 8001382:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001384:	2301      	movs	r3, #1
 8001386:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138c:	2300      	movs	r3, #0
 800138e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001390:	f107 0314 	add.w	r3, r7, #20
 8001394:	4619      	mov	r1, r3
 8001396:	4805      	ldr	r0, [pc, #20]	; (80013ac <MX_GPIO_Init+0x150>)
 8001398:	f001 f8a8 	bl	80024ec <HAL_GPIO_Init>

}
 800139c:	bf00      	nop
 800139e:	3728      	adds	r7, #40	; 0x28
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40023800 	.word	0x40023800
 80013a8:	40020000 	.word	0x40020000
 80013ac:	40020c00 	.word	0x40020c00
 80013b0:	40020800 	.word	0x40020800

080013b4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013b8:	4b13      	ldr	r3, [pc, #76]	; (8001408 <MX_I2C1_Init+0x54>)
 80013ba:	4a14      	ldr	r2, [pc, #80]	; (800140c <MX_I2C1_Init+0x58>)
 80013bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 35000;
 80013be:	4b12      	ldr	r3, [pc, #72]	; (8001408 <MX_I2C1_Init+0x54>)
 80013c0:	f648 02b8 	movw	r2, #35000	; 0x88b8
 80013c4:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013c6:	4b10      	ldr	r3, [pc, #64]	; (8001408 <MX_I2C1_Init+0x54>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013cc:	4b0e      	ldr	r3, [pc, #56]	; (8001408 <MX_I2C1_Init+0x54>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013d2:	4b0d      	ldr	r3, [pc, #52]	; (8001408 <MX_I2C1_Init+0x54>)
 80013d4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013da:	4b0b      	ldr	r3, [pc, #44]	; (8001408 <MX_I2C1_Init+0x54>)
 80013dc:	2200      	movs	r2, #0
 80013de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013e0:	4b09      	ldr	r3, [pc, #36]	; (8001408 <MX_I2C1_Init+0x54>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013e6:	4b08      	ldr	r3, [pc, #32]	; (8001408 <MX_I2C1_Init+0x54>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013ec:	4b06      	ldr	r3, [pc, #24]	; (8001408 <MX_I2C1_Init+0x54>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013f2:	4805      	ldr	r0, [pc, #20]	; (8001408 <MX_I2C1_Init+0x54>)
 80013f4:	f001 fa48 	bl	8002888 <HAL_I2C_Init>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 80013fe:	f000 f999 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20004758 	.word	0x20004758
 800140c:	40005400 	.word	0x40005400

08001410 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001414:	4b12      	ldr	r3, [pc, #72]	; (8001460 <MX_I2C3_Init+0x50>)
 8001416:	4a13      	ldr	r2, [pc, #76]	; (8001464 <MX_I2C3_Init+0x54>)
 8001418:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 800141a:	4b11      	ldr	r3, [pc, #68]	; (8001460 <MX_I2C3_Init+0x50>)
 800141c:	4a12      	ldr	r2, [pc, #72]	; (8001468 <MX_I2C3_Init+0x58>)
 800141e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001420:	4b0f      	ldr	r3, [pc, #60]	; (8001460 <MX_I2C3_Init+0x50>)
 8001422:	2200      	movs	r2, #0
 8001424:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001426:	4b0e      	ldr	r3, [pc, #56]	; (8001460 <MX_I2C3_Init+0x50>)
 8001428:	2200      	movs	r2, #0
 800142a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800142c:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <MX_I2C3_Init+0x50>)
 800142e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001432:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001434:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <MX_I2C3_Init+0x50>)
 8001436:	2200      	movs	r2, #0
 8001438:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800143a:	4b09      	ldr	r3, [pc, #36]	; (8001460 <MX_I2C3_Init+0x50>)
 800143c:	2200      	movs	r2, #0
 800143e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001440:	4b07      	ldr	r3, [pc, #28]	; (8001460 <MX_I2C3_Init+0x50>)
 8001442:	2200      	movs	r2, #0
 8001444:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001446:	4b06      	ldr	r3, [pc, #24]	; (8001460 <MX_I2C3_Init+0x50>)
 8001448:	2200      	movs	r2, #0
 800144a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800144c:	4804      	ldr	r0, [pc, #16]	; (8001460 <MX_I2C3_Init+0x50>)
 800144e:	f001 fa1b 	bl	8002888 <HAL_I2C_Init>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001458:	f000 f96c 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800145c:	bf00      	nop
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20004704 	.word	0x20004704
 8001464:	40005c00 	.word	0x40005c00
 8001468:	00061a80 	.word	0x00061a80

0800146c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08c      	sub	sp, #48	; 0x30
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001474:	f107 031c 	add.w	r3, r7, #28
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a4a      	ldr	r2, [pc, #296]	; (80015b4 <HAL_I2C_MspInit+0x148>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d12c      	bne.n	80014e8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	61bb      	str	r3, [r7, #24]
 8001492:	4b49      	ldr	r3, [pc, #292]	; (80015b8 <HAL_I2C_MspInit+0x14c>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	4a48      	ldr	r2, [pc, #288]	; (80015b8 <HAL_I2C_MspInit+0x14c>)
 8001498:	f043 0302 	orr.w	r3, r3, #2
 800149c:	6313      	str	r3, [r2, #48]	; 0x30
 800149e:	4b46      	ldr	r3, [pc, #280]	; (80015b8 <HAL_I2C_MspInit+0x14c>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	61bb      	str	r3, [r7, #24]
 80014a8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014aa:	23c0      	movs	r3, #192	; 0xc0
 80014ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014ae:	2312      	movs	r3, #18
 80014b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b6:	2303      	movs	r3, #3
 80014b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014ba:	2304      	movs	r3, #4
 80014bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014be:	f107 031c 	add.w	r3, r7, #28
 80014c2:	4619      	mov	r1, r3
 80014c4:	483d      	ldr	r0, [pc, #244]	; (80015bc <HAL_I2C_MspInit+0x150>)
 80014c6:	f001 f811 	bl	80024ec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	617b      	str	r3, [r7, #20]
 80014ce:	4b3a      	ldr	r3, [pc, #232]	; (80015b8 <HAL_I2C_MspInit+0x14c>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	4a39      	ldr	r2, [pc, #228]	; (80015b8 <HAL_I2C_MspInit+0x14c>)
 80014d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014d8:	6413      	str	r3, [r2, #64]	; 0x40
 80014da:	4b37      	ldr	r3, [pc, #220]	; (80015b8 <HAL_I2C_MspInit+0x14c>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014e2:	617b      	str	r3, [r7, #20]
 80014e4:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80014e6:	e060      	b.n	80015aa <HAL_I2C_MspInit+0x13e>
  else if(i2cHandle->Instance==I2C3)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a34      	ldr	r2, [pc, #208]	; (80015c0 <HAL_I2C_MspInit+0x154>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d15b      	bne.n	80015aa <HAL_I2C_MspInit+0x13e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	613b      	str	r3, [r7, #16]
 80014f6:	4b30      	ldr	r3, [pc, #192]	; (80015b8 <HAL_I2C_MspInit+0x14c>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	4a2f      	ldr	r2, [pc, #188]	; (80015b8 <HAL_I2C_MspInit+0x14c>)
 80014fc:	f043 0304 	orr.w	r3, r3, #4
 8001500:	6313      	str	r3, [r2, #48]	; 0x30
 8001502:	4b2d      	ldr	r3, [pc, #180]	; (80015b8 <HAL_I2C_MspInit+0x14c>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	f003 0304 	and.w	r3, r3, #4
 800150a:	613b      	str	r3, [r7, #16]
 800150c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	4b29      	ldr	r3, [pc, #164]	; (80015b8 <HAL_I2C_MspInit+0x14c>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	4a28      	ldr	r2, [pc, #160]	; (80015b8 <HAL_I2C_MspInit+0x14c>)
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	6313      	str	r3, [r2, #48]	; 0x30
 800151e:	4b26      	ldr	r3, [pc, #152]	; (80015b8 <HAL_I2C_MspInit+0x14c>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800152a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800152e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001530:	2312      	movs	r3, #18
 8001532:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001538:	2303      	movs	r3, #3
 800153a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800153c:	2304      	movs	r3, #4
 800153e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001540:	f107 031c 	add.w	r3, r7, #28
 8001544:	4619      	mov	r1, r3
 8001546:	481f      	ldr	r0, [pc, #124]	; (80015c4 <HAL_I2C_MspInit+0x158>)
 8001548:	f000 ffd0 	bl	80024ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800154c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001550:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001552:	2312      	movs	r3, #18
 8001554:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800155a:	2303      	movs	r3, #3
 800155c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800155e:	2304      	movs	r3, #4
 8001560:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001562:	f107 031c 	add.w	r3, r7, #28
 8001566:	4619      	mov	r1, r3
 8001568:	4817      	ldr	r0, [pc, #92]	; (80015c8 <HAL_I2C_MspInit+0x15c>)
 800156a:	f000 ffbf 	bl	80024ec <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <HAL_I2C_MspInit+0x14c>)
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001576:	4a10      	ldr	r2, [pc, #64]	; (80015b8 <HAL_I2C_MspInit+0x14c>)
 8001578:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800157c:	6413      	str	r3, [r2, #64]	; 0x40
 800157e:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <HAL_I2C_MspInit+0x14c>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 5, 0);
 800158a:	2200      	movs	r2, #0
 800158c:	2105      	movs	r1, #5
 800158e:	2048      	movs	r0, #72	; 0x48
 8001590:	f000 fed6 	bl	8002340 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8001594:	2048      	movs	r0, #72	; 0x48
 8001596:	f000 feef 	bl	8002378 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 5, 0);
 800159a:	2200      	movs	r2, #0
 800159c:	2105      	movs	r1, #5
 800159e:	2049      	movs	r0, #73	; 0x49
 80015a0:	f000 fece 	bl	8002340 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 80015a4:	2049      	movs	r0, #73	; 0x49
 80015a6:	f000 fee7 	bl	8002378 <HAL_NVIC_EnableIRQ>
}
 80015aa:	bf00      	nop
 80015ac:	3730      	adds	r7, #48	; 0x30
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40005400 	.word	0x40005400
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40020400 	.word	0x40020400
 80015c0:	40005c00 	.word	0x40005c00
 80015c4:	40020800 	.word	0x40020800
 80015c8:	40020000 	.word	0x40020000

080015cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015d0:	f000 fd98 	bl	8002104 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015d4:	f000 f810 	bl	80015f8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015d8:	f7ff fe40 	bl	800125c <MX_GPIO_Init>
  MX_I2C1_Init();
 80015dc:	f7ff feea 	bl	80013b4 <MX_I2C1_Init>
  MX_I2C3_Init();
 80015e0:	f7ff ff16 	bl	8001410 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 80015e4:	f000 fc82 	bl	8001eec <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80015e8:	f000 fcaa 	bl	8001f40 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80015ec:	f7ff f94a 	bl	8000884 <_Z16MX_FREERTOS_Initv>
  /* Start scheduler */
  osKernelStart();
 80015f0:	f005 ff16 	bl	8007420 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80015f4:	e7fe      	b.n	80015f4 <main+0x28>
	...

080015f8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b094      	sub	sp, #80	; 0x50
 80015fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015fe:	f107 0320 	add.w	r3, r7, #32
 8001602:	2230      	movs	r2, #48	; 0x30
 8001604:	2100      	movs	r1, #0
 8001606:	4618      	mov	r0, r3
 8001608:	f007 f9bc 	bl	8008984 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800160c:	f107 030c 	add.w	r3, r7, #12
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800161c:	2300      	movs	r3, #0
 800161e:	60bb      	str	r3, [r7, #8]
 8001620:	4b2d      	ldr	r3, [pc, #180]	; (80016d8 <_Z18SystemClock_Configv+0xe0>)
 8001622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001624:	4a2c      	ldr	r2, [pc, #176]	; (80016d8 <_Z18SystemClock_Configv+0xe0>)
 8001626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800162a:	6413      	str	r3, [r2, #64]	; 0x40
 800162c:	4b2a      	ldr	r3, [pc, #168]	; (80016d8 <_Z18SystemClock_Configv+0xe0>)
 800162e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001634:	60bb      	str	r3, [r7, #8]
 8001636:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001638:	2300      	movs	r3, #0
 800163a:	607b      	str	r3, [r7, #4]
 800163c:	4b27      	ldr	r3, [pc, #156]	; (80016dc <_Z18SystemClock_Configv+0xe4>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a26      	ldr	r2, [pc, #152]	; (80016dc <_Z18SystemClock_Configv+0xe4>)
 8001642:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001646:	6013      	str	r3, [r2, #0]
 8001648:	4b24      	ldr	r3, [pc, #144]	; (80016dc <_Z18SystemClock_Configv+0xe4>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001650:	607b      	str	r3, [r7, #4]
 8001652:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001654:	2301      	movs	r3, #1
 8001656:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001658:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800165e:	2302      	movs	r3, #2
 8001660:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001662:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001666:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001668:	2304      	movs	r3, #4
 800166a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800166c:	23a8      	movs	r3, #168	; 0xa8
 800166e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001670:	2302      	movs	r3, #2
 8001672:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001674:	2304      	movs	r3, #4
 8001676:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001678:	f107 0320 	add.w	r3, r7, #32
 800167c:	4618      	mov	r0, r3
 800167e:	f003 fef9 	bl	8005474 <HAL_RCC_OscConfig>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	bf14      	ite	ne
 8001688:	2301      	movne	r3, #1
 800168a:	2300      	moveq	r3, #0
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8001692:	f000 f84f 	bl	8001734 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001696:	230f      	movs	r3, #15
 8001698:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800169a:	2302      	movs	r3, #2
 800169c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800169e:	2300      	movs	r3, #0
 80016a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016a2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80016a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80016ae:	f107 030c 	add.w	r3, r7, #12
 80016b2:	2105      	movs	r1, #5
 80016b4:	4618      	mov	r0, r3
 80016b6:	f004 f955 	bl	8005964 <HAL_RCC_ClockConfig>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	bf14      	ite	ne
 80016c0:	2301      	movne	r3, #1
 80016c2:	2300      	moveq	r3, #0
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 80016ca:	f000 f833 	bl	8001734 <Error_Handler>
  }
}
 80016ce:	bf00      	nop
 80016d0:	3750      	adds	r7, #80	; 0x50
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40023800 	.word	0x40023800
 80016dc:	40007000 	.word	0x40007000

080016e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	  if (htim->Instance == TIM7) {
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a0d      	ldr	r2, [pc, #52]	; (8001724 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d10d      	bne.n	800170e <HAL_TIM_PeriodElapsedCallback+0x2e>
	    if (status_uartTIM) {
 80016f2:	4b0d      	ldr	r3, [pc, #52]	; (8001728 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d004      	beq.n	8001704 <HAL_TIM_PeriodElapsedCallback+0x24>
	    	uartTIM++;
 80016fa:	4b0c      	ldr	r3, [pc, #48]	; (800172c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	3301      	adds	r3, #1
 8001700:	4a0a      	ldr	r2, [pc, #40]	; (800172c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001702:	6013      	str	r3, [r2, #0]
		}
	    counterRefresh ++;
 8001704:	4b0a      	ldr	r3, [pc, #40]	; (8001730 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	3301      	adds	r3, #1
 800170a:	4a09      	ldr	r2, [pc, #36]	; (8001730 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800170c:	6013      	str	r3, [r2, #0]

	  }

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a04      	ldr	r2, [pc, #16]	; (8001724 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d101      	bne.n	800171c <HAL_TIM_PeriodElapsedCallback+0x3c>
    HAL_IncTick();
 8001718:	f000 fd16 	bl	8002148 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800171c:	bf00      	nop
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40001400 	.word	0x40001400
 8001728:	20000594 	.word	0x20000594
 800172c:	20000590 	.word	0x20000590
 8001730:	20000598 	.word	0x20000598

08001734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001738:	b672      	cpsid	i
}
 800173a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800173c:	e7fe      	b.n	800173c <Error_Handler+0x8>

0800173e <ssd1306_Reset>:
#include <string.h>  // For memcpy


#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001742:	bf00      	nop
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af04      	add	r7, sp, #16
 8001752:	4603      	mov	r3, r0
 8001754:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001756:	f04f 33ff 	mov.w	r3, #4294967295
 800175a:	9302      	str	r3, [sp, #8]
 800175c:	2301      	movs	r3, #1
 800175e:	9301      	str	r3, [sp, #4]
 8001760:	1dfb      	adds	r3, r7, #7
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	2301      	movs	r3, #1
 8001766:	2200      	movs	r2, #0
 8001768:	2178      	movs	r1, #120	; 0x78
 800176a:	4803      	ldr	r0, [pc, #12]	; (8001778 <ssd1306_WriteCommand+0x2c>)
 800176c:	f001 fcf4 	bl	8003158 <HAL_I2C_Mem_Write>
}
 8001770:	bf00      	nop
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20004704 	.word	0x20004704

0800177c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af04      	add	r7, sp, #16
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	b29b      	uxth	r3, r3
 800178a:	f04f 32ff 	mov.w	r2, #4294967295
 800178e:	9202      	str	r2, [sp, #8]
 8001790:	9301      	str	r3, [sp, #4]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	9300      	str	r3, [sp, #0]
 8001796:	2301      	movs	r3, #1
 8001798:	2240      	movs	r2, #64	; 0x40
 800179a:	2178      	movs	r1, #120	; 0x78
 800179c:	4803      	ldr	r0, [pc, #12]	; (80017ac <ssd1306_WriteData+0x30>)
 800179e:	f001 fcdb 	bl	8003158 <HAL_I2C_Mem_Write>
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20004704 	.word	0x20004704

080017b0 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80017b4:	f7ff ffc3 	bl	800173e <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80017b8:	2064      	movs	r0, #100	; 0x64
 80017ba:	f000 fce5 	bl	8002188 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80017be:	2000      	movs	r0, #0
 80017c0:	f000 fa60 	bl	8001c84 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80017c4:	2020      	movs	r0, #32
 80017c6:	f7ff ffc1 	bl	800174c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80017ca:	2000      	movs	r0, #0
 80017cc:	f7ff ffbe 	bl	800174c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80017d0:	20b0      	movs	r0, #176	; 0xb0
 80017d2:	f7ff ffbb 	bl	800174c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80017d6:	20c8      	movs	r0, #200	; 0xc8
 80017d8:	f7ff ffb8 	bl	800174c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80017dc:	2000      	movs	r0, #0
 80017de:	f7ff ffb5 	bl	800174c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80017e2:	2010      	movs	r0, #16
 80017e4:	f7ff ffb2 	bl	800174c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80017e8:	2040      	movs	r0, #64	; 0x40
 80017ea:	f7ff ffaf 	bl	800174c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80017ee:	20ff      	movs	r0, #255	; 0xff
 80017f0:	f000 fa35 	bl	8001c5e <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80017f4:	20a1      	movs	r0, #161	; 0xa1
 80017f6:	f7ff ffa9 	bl	800174c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80017fa:	20a6      	movs	r0, #166	; 0xa6
 80017fc:	f7ff ffa6 	bl	800174c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001800:	20a8      	movs	r0, #168	; 0xa8
 8001802:	f7ff ffa3 	bl	800174c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001806:	203f      	movs	r0, #63	; 0x3f
 8001808:	f7ff ffa0 	bl	800174c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800180c:	20a4      	movs	r0, #164	; 0xa4
 800180e:	f7ff ff9d 	bl	800174c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001812:	20d3      	movs	r0, #211	; 0xd3
 8001814:	f7ff ff9a 	bl	800174c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001818:	2000      	movs	r0, #0
 800181a:	f7ff ff97 	bl	800174c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800181e:	20d5      	movs	r0, #213	; 0xd5
 8001820:	f7ff ff94 	bl	800174c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001824:	20f0      	movs	r0, #240	; 0xf0
 8001826:	f7ff ff91 	bl	800174c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800182a:	20d9      	movs	r0, #217	; 0xd9
 800182c:	f7ff ff8e 	bl	800174c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001830:	2022      	movs	r0, #34	; 0x22
 8001832:	f7ff ff8b 	bl	800174c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001836:	20da      	movs	r0, #218	; 0xda
 8001838:	f7ff ff88 	bl	800174c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 800183c:	2012      	movs	r0, #18
 800183e:	f7ff ff85 	bl	800174c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001842:	20db      	movs	r0, #219	; 0xdb
 8001844:	f7ff ff82 	bl	800174c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001848:	2020      	movs	r0, #32
 800184a:	f7ff ff7f 	bl	800174c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800184e:	208d      	movs	r0, #141	; 0x8d
 8001850:	f7ff ff7c 	bl	800174c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001854:	2014      	movs	r0, #20
 8001856:	f7ff ff79 	bl	800174c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800185a:	2001      	movs	r0, #1
 800185c:	f000 fa12 	bl	8001c84 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001860:	2000      	movs	r0, #0
 8001862:	f000 f80f 	bl	8001884 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001866:	f000 f831 	bl	80018cc <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800186a:	4b05      	ldr	r3, [pc, #20]	; (8001880 <ssd1306_Init+0xd0>)
 800186c:	2200      	movs	r2, #0
 800186e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001870:	4b03      	ldr	r3, [pc, #12]	; (8001880 <ssd1306_Init+0xd0>)
 8001872:	2200      	movs	r2, #0
 8001874:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001876:	4b02      	ldr	r3, [pc, #8]	; (8001880 <ssd1306_Init+0xd0>)
 8001878:	2201      	movs	r2, #1
 800187a:	711a      	strb	r2, [r3, #4]
}
 800187c:	bf00      	nop
 800187e:	bd80      	pop	{r7, pc}
 8001880:	2000099c 	.word	0x2000099c

08001884 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800188e:	2300      	movs	r3, #0
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	e00d      	b.n	80018b0 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001894:	79fb      	ldrb	r3, [r7, #7]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d101      	bne.n	800189e <ssd1306_Fill+0x1a>
 800189a:	2100      	movs	r1, #0
 800189c:	e000      	b.n	80018a0 <ssd1306_Fill+0x1c>
 800189e:	21ff      	movs	r1, #255	; 0xff
 80018a0:	4a09      	ldr	r2, [pc, #36]	; (80018c8 <ssd1306_Fill+0x44>)
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	4413      	add	r3, r2
 80018a6:	460a      	mov	r2, r1
 80018a8:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	3301      	adds	r3, #1
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018b6:	d3ed      	bcc.n	8001894 <ssd1306_Fill+0x10>
    }
}
 80018b8:	bf00      	nop
 80018ba:	bf00      	nop
 80018bc:	3714      	adds	r7, #20
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	2000059c 	.word	0x2000059c

080018cc <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
	//osMutexWait(mutex_OLEDHandle, 0);
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80018d2:	2300      	movs	r3, #0
 80018d4:	71fb      	strb	r3, [r7, #7]
 80018d6:	e016      	b.n	8001906 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80018d8:	79fb      	ldrb	r3, [r7, #7]
 80018da:	3b50      	subs	r3, #80	; 0x50
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff ff34 	bl	800174c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 80018e4:	2000      	movs	r0, #0
 80018e6:	f7ff ff31 	bl	800174c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 80018ea:	2010      	movs	r0, #16
 80018ec:	f7ff ff2e 	bl	800174c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80018f0:	79fb      	ldrb	r3, [r7, #7]
 80018f2:	01db      	lsls	r3, r3, #7
 80018f4:	4a08      	ldr	r2, [pc, #32]	; (8001918 <ssd1306_UpdateScreen+0x4c>)
 80018f6:	4413      	add	r3, r2
 80018f8:	2180      	movs	r1, #128	; 0x80
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff ff3e 	bl	800177c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	3301      	adds	r3, #1
 8001904:	71fb      	strb	r3, [r7, #7]
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	2b07      	cmp	r3, #7
 800190a:	d9e5      	bls.n	80018d8 <ssd1306_UpdateScreen+0xc>
    }
    //osMutexRelease(mutex_OLEDHandle);
}
 800190c:	bf00      	nop
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	2000059c 	.word	0x2000059c

0800191c <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	71fb      	strb	r3, [r7, #7]
 8001926:	460b      	mov	r3, r1
 8001928:	71bb      	strb	r3, [r7, #6]
 800192a:	4613      	mov	r3, r2
 800192c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800192e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001932:	2b00      	cmp	r3, #0
 8001934:	db3d      	blt.n	80019b2 <ssd1306_DrawPixel+0x96>
 8001936:	79bb      	ldrb	r3, [r7, #6]
 8001938:	2b3f      	cmp	r3, #63	; 0x3f
 800193a:	d83a      	bhi.n	80019b2 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 800193c:	797b      	ldrb	r3, [r7, #5]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d11a      	bne.n	8001978 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001942:	79fa      	ldrb	r2, [r7, #7]
 8001944:	79bb      	ldrb	r3, [r7, #6]
 8001946:	08db      	lsrs	r3, r3, #3
 8001948:	b2d8      	uxtb	r0, r3
 800194a:	4603      	mov	r3, r0
 800194c:	01db      	lsls	r3, r3, #7
 800194e:	4413      	add	r3, r2
 8001950:	4a1b      	ldr	r2, [pc, #108]	; (80019c0 <ssd1306_DrawPixel+0xa4>)
 8001952:	5cd3      	ldrb	r3, [r2, r3]
 8001954:	b25a      	sxtb	r2, r3
 8001956:	79bb      	ldrb	r3, [r7, #6]
 8001958:	f003 0307 	and.w	r3, r3, #7
 800195c:	2101      	movs	r1, #1
 800195e:	fa01 f303 	lsl.w	r3, r1, r3
 8001962:	b25b      	sxtb	r3, r3
 8001964:	4313      	orrs	r3, r2
 8001966:	b259      	sxtb	r1, r3
 8001968:	79fa      	ldrb	r2, [r7, #7]
 800196a:	4603      	mov	r3, r0
 800196c:	01db      	lsls	r3, r3, #7
 800196e:	4413      	add	r3, r2
 8001970:	b2c9      	uxtb	r1, r1
 8001972:	4a13      	ldr	r2, [pc, #76]	; (80019c0 <ssd1306_DrawPixel+0xa4>)
 8001974:	54d1      	strb	r1, [r2, r3]
 8001976:	e01d      	b.n	80019b4 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001978:	79fa      	ldrb	r2, [r7, #7]
 800197a:	79bb      	ldrb	r3, [r7, #6]
 800197c:	08db      	lsrs	r3, r3, #3
 800197e:	b2d8      	uxtb	r0, r3
 8001980:	4603      	mov	r3, r0
 8001982:	01db      	lsls	r3, r3, #7
 8001984:	4413      	add	r3, r2
 8001986:	4a0e      	ldr	r2, [pc, #56]	; (80019c0 <ssd1306_DrawPixel+0xa4>)
 8001988:	5cd3      	ldrb	r3, [r2, r3]
 800198a:	b25a      	sxtb	r2, r3
 800198c:	79bb      	ldrb	r3, [r7, #6]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	2101      	movs	r1, #1
 8001994:	fa01 f303 	lsl.w	r3, r1, r3
 8001998:	b25b      	sxtb	r3, r3
 800199a:	43db      	mvns	r3, r3
 800199c:	b25b      	sxtb	r3, r3
 800199e:	4013      	ands	r3, r2
 80019a0:	b259      	sxtb	r1, r3
 80019a2:	79fa      	ldrb	r2, [r7, #7]
 80019a4:	4603      	mov	r3, r0
 80019a6:	01db      	lsls	r3, r3, #7
 80019a8:	4413      	add	r3, r2
 80019aa:	b2c9      	uxtb	r1, r1
 80019ac:	4a04      	ldr	r2, [pc, #16]	; (80019c0 <ssd1306_DrawPixel+0xa4>)
 80019ae:	54d1      	strb	r1, [r2, r3]
 80019b0:	e000      	b.n	80019b4 <ssd1306_DrawPixel+0x98>
        return;
 80019b2:	bf00      	nop
    }
}
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	2000059c 	.word	0x2000059c

080019c4 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80019c4:	b590      	push	{r4, r7, lr}
 80019c6:	b089      	sub	sp, #36	; 0x24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4604      	mov	r4, r0
 80019cc:	1d38      	adds	r0, r7, #4
 80019ce:	e880 0006 	stmia.w	r0, {r1, r2}
 80019d2:	461a      	mov	r2, r3
 80019d4:	4623      	mov	r3, r4
 80019d6:	73fb      	strb	r3, [r7, #15]
 80019d8:	4613      	mov	r3, r2
 80019da:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80019dc:	7bfb      	ldrb	r3, [r7, #15]
 80019de:	2b1f      	cmp	r3, #31
 80019e0:	d902      	bls.n	80019e8 <ssd1306_WriteChar+0x24>
 80019e2:	7bfb      	ldrb	r3, [r7, #15]
 80019e4:	2b7e      	cmp	r3, #126	; 0x7e
 80019e6:	d901      	bls.n	80019ec <ssd1306_WriteChar+0x28>
        return 0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	e06d      	b.n	8001ac8 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80019ec:	4b38      	ldr	r3, [pc, #224]	; (8001ad0 <ssd1306_WriteChar+0x10c>)
 80019ee:	881b      	ldrh	r3, [r3, #0]
 80019f0:	461a      	mov	r2, r3
 80019f2:	793b      	ldrb	r3, [r7, #4]
 80019f4:	4413      	add	r3, r2
 80019f6:	2b80      	cmp	r3, #128	; 0x80
 80019f8:	dc06      	bgt.n	8001a08 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80019fa:	4b35      	ldr	r3, [pc, #212]	; (8001ad0 <ssd1306_WriteChar+0x10c>)
 80019fc:	885b      	ldrh	r3, [r3, #2]
 80019fe:	461a      	mov	r2, r3
 8001a00:	797b      	ldrb	r3, [r7, #5]
 8001a02:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001a04:	2b40      	cmp	r3, #64	; 0x40
 8001a06:	dd01      	ble.n	8001a0c <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	e05d      	b.n	8001ac8 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	61fb      	str	r3, [r7, #28]
 8001a10:	e04c      	b.n	8001aac <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001a12:	68ba      	ldr	r2, [r7, #8]
 8001a14:	7bfb      	ldrb	r3, [r7, #15]
 8001a16:	3b20      	subs	r3, #32
 8001a18:	7979      	ldrb	r1, [r7, #5]
 8001a1a:	fb01 f303 	mul.w	r3, r1, r3
 8001a1e:	4619      	mov	r1, r3
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	440b      	add	r3, r1
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	4413      	add	r3, r2
 8001a28:	881b      	ldrh	r3, [r3, #0]
 8001a2a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	61bb      	str	r3, [r7, #24]
 8001a30:	e034      	b.n	8001a9c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001a32:	697a      	ldr	r2, [r7, #20]
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d012      	beq.n	8001a68 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001a42:	4b23      	ldr	r3, [pc, #140]	; (8001ad0 <ssd1306_WriteChar+0x10c>)
 8001a44:	881b      	ldrh	r3, [r3, #0]
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	4413      	add	r3, r2
 8001a4e:	b2d8      	uxtb	r0, r3
 8001a50:	4b1f      	ldr	r3, [pc, #124]	; (8001ad0 <ssd1306_WriteChar+0x10c>)
 8001a52:	885b      	ldrh	r3, [r3, #2]
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	4413      	add	r3, r2
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	7bba      	ldrb	r2, [r7, #14]
 8001a60:	4619      	mov	r1, r3
 8001a62:	f7ff ff5b 	bl	800191c <ssd1306_DrawPixel>
 8001a66:	e016      	b.n	8001a96 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001a68:	4b19      	ldr	r3, [pc, #100]	; (8001ad0 <ssd1306_WriteChar+0x10c>)
 8001a6a:	881b      	ldrh	r3, [r3, #0]
 8001a6c:	b2da      	uxtb	r2, r3
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	4413      	add	r3, r2
 8001a74:	b2d8      	uxtb	r0, r3
 8001a76:	4b16      	ldr	r3, [pc, #88]	; (8001ad0 <ssd1306_WriteChar+0x10c>)
 8001a78:	885b      	ldrh	r3, [r3, #2]
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	4413      	add	r3, r2
 8001a82:	b2d9      	uxtb	r1, r3
 8001a84:	7bbb      	ldrb	r3, [r7, #14]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	bf0c      	ite	eq
 8001a8a:	2301      	moveq	r3, #1
 8001a8c:	2300      	movne	r3, #0
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	461a      	mov	r2, r3
 8001a92:	f7ff ff43 	bl	800191c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	61bb      	str	r3, [r7, #24]
 8001a9c:	793b      	ldrb	r3, [r7, #4]
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d3c5      	bcc.n	8001a32 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	61fb      	str	r3, [r7, #28]
 8001aac:	797b      	ldrb	r3, [r7, #5]
 8001aae:	461a      	mov	r2, r3
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d3ad      	bcc.n	8001a12 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001ab6:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <ssd1306_WriteChar+0x10c>)
 8001ab8:	881a      	ldrh	r2, [r3, #0]
 8001aba:	793b      	ldrb	r3, [r7, #4]
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	4413      	add	r3, r2
 8001ac0:	b29a      	uxth	r2, r3
 8001ac2:	4b03      	ldr	r3, [pc, #12]	; (8001ad0 <ssd1306_WriteChar+0x10c>)
 8001ac4:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3724      	adds	r7, #36	; 0x24
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd90      	pop	{r4, r7, pc}
 8001ad0:	2000099c 	.word	0x2000099c

08001ad4 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	1d38      	adds	r0, r7, #4
 8001ade:	e880 0006 	stmia.w	r0, {r1, r2}
 8001ae2:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8001ae4:	e012      	b.n	8001b0c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	7818      	ldrb	r0, [r3, #0]
 8001aea:	78fb      	ldrb	r3, [r7, #3]
 8001aec:	1d3a      	adds	r2, r7, #4
 8001aee:	ca06      	ldmia	r2, {r1, r2}
 8001af0:	f7ff ff68 	bl	80019c4 <ssd1306_WriteChar>
 8001af4:	4603      	mov	r3, r0
 8001af6:	461a      	mov	r2, r3
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d002      	beq.n	8001b06 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	e008      	b.n	8001b18 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1e8      	bne.n	8001ae6 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	781b      	ldrb	r3, [r3, #0]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3710      	adds	r7, #16
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	460a      	mov	r2, r1
 8001b2a:	71fb      	strb	r3, [r7, #7]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001b30:	79fb      	ldrb	r3, [r7, #7]
 8001b32:	b29a      	uxth	r2, r3
 8001b34:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <ssd1306_SetCursor+0x2c>)
 8001b36:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001b38:	79bb      	ldrb	r3, [r7, #6]
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	4b03      	ldr	r3, [pc, #12]	; (8001b4c <ssd1306_SetCursor+0x2c>)
 8001b3e:	805a      	strh	r2, [r3, #2]
}
 8001b40:	bf00      	nop
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	2000099c 	.word	0x2000099c

08001b50 <ssd1306_DrawCircle>:
    }
    
    return;
}
//Draw circle by Bresenhem's algorithm
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 8001b50:	b590      	push	{r4, r7, lr}
 8001b52:	b087      	sub	sp, #28
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4604      	mov	r4, r0
 8001b58:	4608      	mov	r0, r1
 8001b5a:	4611      	mov	r1, r2
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	4623      	mov	r3, r4
 8001b60:	71fb      	strb	r3, [r7, #7]
 8001b62:	4603      	mov	r3, r0
 8001b64:	71bb      	strb	r3, [r7, #6]
 8001b66:	460b      	mov	r3, r1
 8001b68:	717b      	strb	r3, [r7, #5]
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	713b      	strb	r3, [r7, #4]
  int32_t x = -par_r;
 8001b6e:	797b      	ldrb	r3, [r7, #5]
 8001b70:	425b      	negs	r3, r3
 8001b72:	617b      	str	r3, [r7, #20]
  int32_t y = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	613b      	str	r3, [r7, #16]
  int32_t err = 2 - 2 * par_r;
 8001b78:	797b      	ldrb	r3, [r7, #5]
 8001b7a:	f1c3 0301 	rsb	r3, r3, #1
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	60fb      	str	r3, [r7, #12]
  int32_t e2;

  if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 8001b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	db65      	blt.n	8001c56 <ssd1306_DrawCircle+0x106>
 8001b8a:	79bb      	ldrb	r3, [r7, #6]
 8001b8c:	2b3f      	cmp	r3, #63	; 0x3f
 8001b8e:	d862      	bhi.n	8001c56 <ssd1306_DrawCircle+0x106>
    return;
  }

    do {
      ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	79fa      	ldrb	r2, [r7, #7]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	b2d8      	uxtb	r0, r3
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	b2da      	uxtb	r2, r3
 8001b9e:	79bb      	ldrb	r3, [r7, #6]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	793a      	ldrb	r2, [r7, #4]
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	f7ff feb8 	bl	800191c <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	b2da      	uxtb	r2, r3
 8001bb0:	79fb      	ldrb	r3, [r7, #7]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	b2d8      	uxtb	r0, r3
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	b2da      	uxtb	r2, r3
 8001bba:	79bb      	ldrb	r3, [r7, #6]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	793a      	ldrb	r2, [r7, #4]
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	f7ff feaa 	bl	800191c <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	b2da      	uxtb	r2, r3
 8001bcc:	79fb      	ldrb	r3, [r7, #7]
 8001bce:	4413      	add	r3, r2
 8001bd0:	b2d8      	uxtb	r0, r3
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	79ba      	ldrb	r2, [r7, #6]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	793a      	ldrb	r2, [r7, #4]
 8001bde:	4619      	mov	r1, r3
 8001be0:	f7ff fe9c 	bl	800191c <ssd1306_DrawPixel>
      ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	79fa      	ldrb	r2, [r7, #7]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	b2d8      	uxtb	r0, r3
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	79ba      	ldrb	r2, [r7, #6]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	793a      	ldrb	r2, [r7, #4]
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	f7ff fe8e 	bl	800191c <ssd1306_DrawPixel>
        e2 = err;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	60bb      	str	r3, [r7, #8]
        if (e2 <= y) {
 8001c04:	68ba      	ldr	r2, [r7, #8]
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	dc13      	bgt.n	8001c34 <ssd1306_DrawCircle+0xe4>
            y++;
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	3301      	adds	r3, #1
 8001c18:	68fa      	ldr	r2, [r7, #12]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	425b      	negs	r3, r3
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d105      	bne.n	8001c34 <ssd1306_DrawCircle+0xe4>
 8001c28:	68ba      	ldr	r2, [r7, #8]
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	dc01      	bgt.n	8001c34 <ssd1306_DrawCircle+0xe4>
              e2 = 0;
 8001c30:	2300      	movs	r3, #0
 8001c32:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          /*nothing to do*/
        }
        if(e2 > x) {
 8001c34:	68ba      	ldr	r2, [r7, #8]
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	dd08      	ble.n	8001c4e <ssd1306_DrawCircle+0xfe>
          x++;
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	617b      	str	r3, [r7, #20]
          err = err + (x * 2 + 1);
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	3301      	adds	r3, #1
 8001c48:	68fa      	ldr	r2, [r7, #12]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          /*nothing to do*/
        }
    } while(x <= 0);
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	dd9d      	ble.n	8001b90 <ssd1306_DrawCircle+0x40>

    return;
 8001c54:	e000      	b.n	8001c58 <ssd1306_DrawCircle+0x108>
    return;
 8001c56:	bf00      	nop
}
 8001c58:	371c      	adds	r7, #28
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd90      	pop	{r4, r7, pc}

08001c5e <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b084      	sub	sp, #16
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	4603      	mov	r3, r0
 8001c66:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001c68:	2381      	movs	r3, #129	; 0x81
 8001c6a:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001c6c:	7bfb      	ldrb	r3, [r7, #15]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff fd6c 	bl	800174c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001c74:	79fb      	ldrb	r3, [r7, #7]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff fd68 	bl	800174c <ssd1306_WriteCommand>
}
 8001c7c:	bf00      	nop
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001c8e:	79fb      	ldrb	r3, [r7, #7]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d005      	beq.n	8001ca0 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001c94:	23af      	movs	r3, #175	; 0xaf
 8001c96:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001c98:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <ssd1306_SetDisplayOn+0x38>)
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	715a      	strb	r2, [r3, #5]
 8001c9e:	e004      	b.n	8001caa <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001ca0:	23ae      	movs	r3, #174	; 0xae
 8001ca2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001ca4:	4b05      	ldr	r3, [pc, #20]	; (8001cbc <ssd1306_SetDisplayOn+0x38>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001caa:	7bfb      	ldrb	r3, [r7, #15]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff fd4d 	bl	800174c <ssd1306_WriteCommand>
}
 8001cb2:	bf00      	nop
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	2000099c 	.word	0x2000099c

08001cc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	607b      	str	r3, [r7, #4]
 8001cca:	4b12      	ldr	r3, [pc, #72]	; (8001d14 <HAL_MspInit+0x54>)
 8001ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cce:	4a11      	ldr	r2, [pc, #68]	; (8001d14 <HAL_MspInit+0x54>)
 8001cd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001cd6:	4b0f      	ldr	r3, [pc, #60]	; (8001d14 <HAL_MspInit+0x54>)
 8001cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cde:	607b      	str	r3, [r7, #4]
 8001ce0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	603b      	str	r3, [r7, #0]
 8001ce6:	4b0b      	ldr	r3, [pc, #44]	; (8001d14 <HAL_MspInit+0x54>)
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	4a0a      	ldr	r2, [pc, #40]	; (8001d14 <HAL_MspInit+0x54>)
 8001cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cf2:	4b08      	ldr	r3, [pc, #32]	; (8001d14 <HAL_MspInit+0x54>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cfa:	603b      	str	r3, [r7, #0]
 8001cfc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001cfe:	2200      	movs	r2, #0
 8001d00:	210f      	movs	r1, #15
 8001d02:	f06f 0001 	mvn.w	r0, #1
 8001d06:	f000 fb1b 	bl	8002340 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40023800 	.word	0x40023800

08001d18 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b08c      	sub	sp, #48	; 0x30
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001d20:	2300      	movs	r3, #0
 8001d22:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001d24:	2300      	movs	r3, #0
 8001d26:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8001d28:	2200      	movs	r2, #0
 8001d2a:	6879      	ldr	r1, [r7, #4]
 8001d2c:	2037      	movs	r0, #55	; 0x37
 8001d2e:	f000 fb07 	bl	8002340 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001d32:	2037      	movs	r0, #55	; 0x37
 8001d34:	f000 fb20 	bl	8002378 <HAL_NVIC_EnableIRQ>

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001d38:	2300      	movs	r3, #0
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	4b1f      	ldr	r3, [pc, #124]	; (8001dbc <HAL_InitTick+0xa4>)
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d40:	4a1e      	ldr	r2, [pc, #120]	; (8001dbc <HAL_InitTick+0xa4>)
 8001d42:	f043 0320 	orr.w	r3, r3, #32
 8001d46:	6413      	str	r3, [r2, #64]	; 0x40
 8001d48:	4b1c      	ldr	r3, [pc, #112]	; (8001dbc <HAL_InitTick+0xa4>)
 8001d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4c:	f003 0320 	and.w	r3, r3, #32
 8001d50:	60fb      	str	r3, [r7, #12]
 8001d52:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d54:	f107 0210 	add.w	r2, r7, #16
 8001d58:	f107 0314 	add.w	r3, r7, #20
 8001d5c:	4611      	mov	r1, r2
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f003 fffc 	bl	8005d5c <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001d64:	f003 ffd2 	bl	8005d0c <HAL_RCC_GetPCLK1Freq>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d70:	4a13      	ldr	r2, [pc, #76]	; (8001dc0 <HAL_InitTick+0xa8>)
 8001d72:	fba2 2303 	umull	r2, r3, r2, r3
 8001d76:	0c9b      	lsrs	r3, r3, #18
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001d7c:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <HAL_InitTick+0xac>)
 8001d7e:	4a12      	ldr	r2, [pc, #72]	; (8001dc8 <HAL_InitTick+0xb0>)
 8001d80:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001d82:	4b10      	ldr	r3, [pc, #64]	; (8001dc4 <HAL_InitTick+0xac>)
 8001d84:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d88:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001d8a:	4a0e      	ldr	r2, [pc, #56]	; (8001dc4 <HAL_InitTick+0xac>)
 8001d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d8e:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001d90:	4b0c      	ldr	r3, [pc, #48]	; (8001dc4 <HAL_InitTick+0xac>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d96:	4b0b      	ldr	r3, [pc, #44]	; (8001dc4 <HAL_InitTick+0xac>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8001d9c:	4809      	ldr	r0, [pc, #36]	; (8001dc4 <HAL_InitTick+0xac>)
 8001d9e:	f004 f80f 	bl	8005dc0 <HAL_TIM_Base_Init>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d104      	bne.n	8001db2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8001da8:	4806      	ldr	r0, [pc, #24]	; (8001dc4 <HAL_InitTick+0xac>)
 8001daa:	f004 f863 	bl	8005e74 <HAL_TIM_Base_Start_IT>
 8001dae:	4603      	mov	r3, r0
 8001db0:	e000      	b.n	8001db4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3730      	adds	r7, #48	; 0x30
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	431bde83 	.word	0x431bde83
 8001dc4:	200047ac 	.word	0x200047ac
 8001dc8:	40001400 	.word	0x40001400

08001dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dd0:	e7fe      	b.n	8001dd0 <NMI_Handler+0x4>

08001dd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dd6:	e7fe      	b.n	8001dd6 <HardFault_Handler+0x4>

08001dd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ddc:	e7fe      	b.n	8001ddc <MemManage_Handler+0x4>

08001dde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dde:	b480      	push	{r7}
 8001de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001de2:	e7fe      	b.n	8001de2 <BusFault_Handler+0x4>

08001de4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001de8:	e7fe      	b.n	8001de8 <UsageFault_Handler+0x4>

08001dea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dea:	b480      	push	{r7}
 8001dec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dee:	bf00      	nop
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001dfc:	4802      	ldr	r0, [pc, #8]	; (8001e08 <USART1_IRQHandler+0x10>)
 8001dfe:	f004 fc3f 	bl	8006680 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	200047f4 	.word	0x200047f4

08001e0c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001e10:	4802      	ldr	r0, [pc, #8]	; (8001e1c <TIM7_IRQHandler+0x10>)
 8001e12:	f004 f89f 	bl	8005f54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	200047ac 	.word	0x200047ac

08001e20 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001e24:	4802      	ldr	r0, [pc, #8]	; (8001e30 <USART6_IRQHandler+0x10>)
 8001e26:	f004 fc2b 	bl	8006680 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	20004838 	.word	0x20004838

08001e34 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8001e38:	4802      	ldr	r0, [pc, #8]	; (8001e44 <I2C3_EV_IRQHandler+0x10>)
 8001e3a:	f001 fa87 	bl	800334c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	20004704 	.word	0x20004704

08001e48 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8001e4c:	4802      	ldr	r0, [pc, #8]	; (8001e58 <I2C3_ER_IRQHandler+0x10>)
 8001e4e:	f001 fbee 	bl	800362e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8001e52:	bf00      	nop
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20004704 	.word	0x20004704

08001e5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e64:	4a14      	ldr	r2, [pc, #80]	; (8001eb8 <_sbrk+0x5c>)
 8001e66:	4b15      	ldr	r3, [pc, #84]	; (8001ebc <_sbrk+0x60>)
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e70:	4b13      	ldr	r3, [pc, #76]	; (8001ec0 <_sbrk+0x64>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d102      	bne.n	8001e7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e78:	4b11      	ldr	r3, [pc, #68]	; (8001ec0 <_sbrk+0x64>)
 8001e7a:	4a12      	ldr	r2, [pc, #72]	; (8001ec4 <_sbrk+0x68>)
 8001e7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e7e:	4b10      	ldr	r3, [pc, #64]	; (8001ec0 <_sbrk+0x64>)
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4413      	add	r3, r2
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d207      	bcs.n	8001e9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e8c:	f006 fd26 	bl	80088dc <__errno>
 8001e90:	4603      	mov	r3, r0
 8001e92:	220c      	movs	r2, #12
 8001e94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e96:	f04f 33ff 	mov.w	r3, #4294967295
 8001e9a:	e009      	b.n	8001eb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e9c:	4b08      	ldr	r3, [pc, #32]	; (8001ec0 <_sbrk+0x64>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ea2:	4b07      	ldr	r3, [pc, #28]	; (8001ec0 <_sbrk+0x64>)
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	4a05      	ldr	r2, [pc, #20]	; (8001ec0 <_sbrk+0x64>)
 8001eac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eae:	68fb      	ldr	r3, [r7, #12]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3718      	adds	r7, #24
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	20020000 	.word	0x20020000
 8001ebc:	00004000 	.word	0x00004000
 8001ec0:	200009a4 	.word	0x200009a4
 8001ec4:	20004890 	.word	0x20004890

08001ec8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ecc:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <SystemInit+0x20>)
 8001ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ed2:	4a05      	ldr	r2, [pc, #20]	; (8001ee8 <SystemInit+0x20>)
 8001ed4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ed8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001edc:	bf00      	nop
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	e000ed00 	.word	0xe000ed00

08001eec <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ef0:	4b11      	ldr	r3, [pc, #68]	; (8001f38 <MX_USART1_UART_Init+0x4c>)
 8001ef2:	4a12      	ldr	r2, [pc, #72]	; (8001f3c <MX_USART1_UART_Init+0x50>)
 8001ef4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ef6:	4b10      	ldr	r3, [pc, #64]	; (8001f38 <MX_USART1_UART_Init+0x4c>)
 8001ef8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001efc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001efe:	4b0e      	ldr	r3, [pc, #56]	; (8001f38 <MX_USART1_UART_Init+0x4c>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f04:	4b0c      	ldr	r3, [pc, #48]	; (8001f38 <MX_USART1_UART_Init+0x4c>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f0a:	4b0b      	ldr	r3, [pc, #44]	; (8001f38 <MX_USART1_UART_Init+0x4c>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f10:	4b09      	ldr	r3, [pc, #36]	; (8001f38 <MX_USART1_UART_Init+0x4c>)
 8001f12:	220c      	movs	r2, #12
 8001f14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f16:	4b08      	ldr	r3, [pc, #32]	; (8001f38 <MX_USART1_UART_Init+0x4c>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f1c:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <MX_USART1_UART_Init+0x4c>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f22:	4805      	ldr	r0, [pc, #20]	; (8001f38 <MX_USART1_UART_Init+0x4c>)
 8001f24:	f004 f9fa 	bl	800631c <HAL_UART_Init>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001f2e:	f7ff fc01 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f32:	bf00      	nop
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	200047f4 	.word	0x200047f4
 8001f3c:	40011000 	.word	0x40011000

08001f40 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001f44:	4b11      	ldr	r3, [pc, #68]	; (8001f8c <MX_USART6_UART_Init+0x4c>)
 8001f46:	4a12      	ldr	r2, [pc, #72]	; (8001f90 <MX_USART6_UART_Init+0x50>)
 8001f48:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001f4a:	4b10      	ldr	r3, [pc, #64]	; (8001f8c <MX_USART6_UART_Init+0x4c>)
 8001f4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f50:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001f52:	4b0e      	ldr	r3, [pc, #56]	; (8001f8c <MX_USART6_UART_Init+0x4c>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001f58:	4b0c      	ldr	r3, [pc, #48]	; (8001f8c <MX_USART6_UART_Init+0x4c>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001f5e:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <MX_USART6_UART_Init+0x4c>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001f64:	4b09      	ldr	r3, [pc, #36]	; (8001f8c <MX_USART6_UART_Init+0x4c>)
 8001f66:	220c      	movs	r2, #12
 8001f68:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f6a:	4b08      	ldr	r3, [pc, #32]	; (8001f8c <MX_USART6_UART_Init+0x4c>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f70:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <MX_USART6_UART_Init+0x4c>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001f76:	4805      	ldr	r0, [pc, #20]	; (8001f8c <MX_USART6_UART_Init+0x4c>)
 8001f78:	f004 f9d0 	bl	800631c <HAL_UART_Init>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001f82:	f7ff fbd7 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001f86:	bf00      	nop
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	20004838 	.word	0x20004838
 8001f90:	40011400 	.word	0x40011400

08001f94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b08c      	sub	sp, #48	; 0x30
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f9c:	f107 031c 	add.w	r3, r7, #28
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	605a      	str	r2, [r3, #4]
 8001fa6:	609a      	str	r2, [r3, #8]
 8001fa8:	60da      	str	r2, [r3, #12]
 8001faa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a3a      	ldr	r2, [pc, #232]	; (800209c <HAL_UART_MspInit+0x108>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d135      	bne.n	8002022 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61bb      	str	r3, [r7, #24]
 8001fba:	4b39      	ldr	r3, [pc, #228]	; (80020a0 <HAL_UART_MspInit+0x10c>)
 8001fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fbe:	4a38      	ldr	r2, [pc, #224]	; (80020a0 <HAL_UART_MspInit+0x10c>)
 8001fc0:	f043 0310 	orr.w	r3, r3, #16
 8001fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fc6:	4b36      	ldr	r3, [pc, #216]	; (80020a0 <HAL_UART_MspInit+0x10c>)
 8001fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fca:	f003 0310 	and.w	r3, r3, #16
 8001fce:	61bb      	str	r3, [r7, #24]
 8001fd0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	617b      	str	r3, [r7, #20]
 8001fd6:	4b32      	ldr	r3, [pc, #200]	; (80020a0 <HAL_UART_MspInit+0x10c>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fda:	4a31      	ldr	r2, [pc, #196]	; (80020a0 <HAL_UART_MspInit+0x10c>)
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe2:	4b2f      	ldr	r3, [pc, #188]	; (80020a0 <HAL_UART_MspInit+0x10c>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	617b      	str	r3, [r7, #20]
 8001fec:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001fee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001ff2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002000:	2307      	movs	r3, #7
 8002002:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002004:	f107 031c 	add.w	r3, r7, #28
 8002008:	4619      	mov	r1, r3
 800200a:	4826      	ldr	r0, [pc, #152]	; (80020a4 <HAL_UART_MspInit+0x110>)
 800200c:	f000 fa6e 	bl	80024ec <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002010:	2200      	movs	r2, #0
 8002012:	2105      	movs	r1, #5
 8002014:	2025      	movs	r0, #37	; 0x25
 8002016:	f000 f993 	bl	8002340 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800201a:	2025      	movs	r0, #37	; 0x25
 800201c:	f000 f9ac 	bl	8002378 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002020:	e038      	b.n	8002094 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART6)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a20      	ldr	r2, [pc, #128]	; (80020a8 <HAL_UART_MspInit+0x114>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d133      	bne.n	8002094 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART6_CLK_ENABLE();
 800202c:	2300      	movs	r3, #0
 800202e:	613b      	str	r3, [r7, #16]
 8002030:	4b1b      	ldr	r3, [pc, #108]	; (80020a0 <HAL_UART_MspInit+0x10c>)
 8002032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002034:	4a1a      	ldr	r2, [pc, #104]	; (80020a0 <HAL_UART_MspInit+0x10c>)
 8002036:	f043 0320 	orr.w	r3, r3, #32
 800203a:	6453      	str	r3, [r2, #68]	; 0x44
 800203c:	4b18      	ldr	r3, [pc, #96]	; (80020a0 <HAL_UART_MspInit+0x10c>)
 800203e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002040:	f003 0320 	and.w	r3, r3, #32
 8002044:	613b      	str	r3, [r7, #16]
 8002046:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002048:	2300      	movs	r3, #0
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	4b14      	ldr	r3, [pc, #80]	; (80020a0 <HAL_UART_MspInit+0x10c>)
 800204e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002050:	4a13      	ldr	r2, [pc, #76]	; (80020a0 <HAL_UART_MspInit+0x10c>)
 8002052:	f043 0304 	orr.w	r3, r3, #4
 8002056:	6313      	str	r3, [r2, #48]	; 0x30
 8002058:	4b11      	ldr	r3, [pc, #68]	; (80020a0 <HAL_UART_MspInit+0x10c>)
 800205a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205c:	f003 0304 	and.w	r3, r3, #4
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002064:	23c0      	movs	r3, #192	; 0xc0
 8002066:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002068:	2302      	movs	r3, #2
 800206a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206c:	2300      	movs	r3, #0
 800206e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002070:	2303      	movs	r3, #3
 8002072:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002074:	2308      	movs	r3, #8
 8002076:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002078:	f107 031c 	add.w	r3, r7, #28
 800207c:	4619      	mov	r1, r3
 800207e:	480b      	ldr	r0, [pc, #44]	; (80020ac <HAL_UART_MspInit+0x118>)
 8002080:	f000 fa34 	bl	80024ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8002084:	2200      	movs	r2, #0
 8002086:	2105      	movs	r1, #5
 8002088:	2047      	movs	r0, #71	; 0x47
 800208a:	f000 f959 	bl	8002340 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800208e:	2047      	movs	r0, #71	; 0x47
 8002090:	f000 f972 	bl	8002378 <HAL_NVIC_EnableIRQ>
}
 8002094:	bf00      	nop
 8002096:	3730      	adds	r7, #48	; 0x30
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40011000 	.word	0x40011000
 80020a0:	40023800 	.word	0x40023800
 80020a4:	40020000 	.word	0x40020000
 80020a8:	40011400 	.word	0x40011400
 80020ac:	40020800 	.word	0x40020800

080020b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80020b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020b4:	480d      	ldr	r0, [pc, #52]	; (80020ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020b6:	490e      	ldr	r1, [pc, #56]	; (80020f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020b8:	4a0e      	ldr	r2, [pc, #56]	; (80020f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020bc:	e002      	b.n	80020c4 <LoopCopyDataInit>

080020be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020c2:	3304      	adds	r3, #4

080020c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020c8:	d3f9      	bcc.n	80020be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ca:	4a0b      	ldr	r2, [pc, #44]	; (80020f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020cc:	4c0b      	ldr	r4, [pc, #44]	; (80020fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80020ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020d0:	e001      	b.n	80020d6 <LoopFillZerobss>

080020d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020d4:	3204      	adds	r2, #4

080020d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020d8:	d3fb      	bcc.n	80020d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80020da:	f7ff fef5 	bl	8001ec8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020de:	f006 fc03 	bl	80088e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020e2:	f7ff fa73 	bl	80015cc <main>
  bx  lr    
 80020e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80020e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020f0:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80020f4:	0800a940 	.word	0x0800a940
  ldr r2, =_sbss
 80020f8:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80020fc:	20004890 	.word	0x20004890

08002100 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002100:	e7fe      	b.n	8002100 <ADC_IRQHandler>
	...

08002104 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002108:	4b0e      	ldr	r3, [pc, #56]	; (8002144 <HAL_Init+0x40>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a0d      	ldr	r2, [pc, #52]	; (8002144 <HAL_Init+0x40>)
 800210e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002112:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002114:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <HAL_Init+0x40>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a0a      	ldr	r2, [pc, #40]	; (8002144 <HAL_Init+0x40>)
 800211a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800211e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002120:	4b08      	ldr	r3, [pc, #32]	; (8002144 <HAL_Init+0x40>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a07      	ldr	r2, [pc, #28]	; (8002144 <HAL_Init+0x40>)
 8002126:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800212a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800212c:	2003      	movs	r0, #3
 800212e:	f000 f8fc 	bl	800232a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002132:	200f      	movs	r0, #15
 8002134:	f7ff fdf0 	bl	8001d18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002138:	f7ff fdc2 	bl	8001cc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40023c00 	.word	0x40023c00

08002148 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800214c:	4b06      	ldr	r3, [pc, #24]	; (8002168 <HAL_IncTick+0x20>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	461a      	mov	r2, r3
 8002152:	4b06      	ldr	r3, [pc, #24]	; (800216c <HAL_IncTick+0x24>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4413      	add	r3, r2
 8002158:	4a04      	ldr	r2, [pc, #16]	; (800216c <HAL_IncTick+0x24>)
 800215a:	6013      	str	r3, [r2, #0]
}
 800215c:	bf00      	nop
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	20000018 	.word	0x20000018
 800216c:	2000487c 	.word	0x2000487c

08002170 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  return uwTick;
 8002174:	4b03      	ldr	r3, [pc, #12]	; (8002184 <HAL_GetTick+0x14>)
 8002176:	681b      	ldr	r3, [r3, #0]
}
 8002178:	4618      	mov	r0, r3
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	2000487c 	.word	0x2000487c

08002188 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002190:	f7ff ffee 	bl	8002170 <HAL_GetTick>
 8002194:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a0:	d005      	beq.n	80021ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021a2:	4b0a      	ldr	r3, [pc, #40]	; (80021cc <HAL_Delay+0x44>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	461a      	mov	r2, r3
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	4413      	add	r3, r2
 80021ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021ae:	bf00      	nop
 80021b0:	f7ff ffde 	bl	8002170 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d8f7      	bhi.n	80021b0 <HAL_Delay+0x28>
  {
  }
}
 80021c0:	bf00      	nop
 80021c2:	bf00      	nop
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	20000018 	.word	0x20000018

080021d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f003 0307 	and.w	r3, r3, #7
 80021de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021e0:	4b0c      	ldr	r3, [pc, #48]	; (8002214 <__NVIC_SetPriorityGrouping+0x44>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021e6:	68ba      	ldr	r2, [r7, #8]
 80021e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021ec:	4013      	ands	r3, r2
 80021ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002200:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002202:	4a04      	ldr	r2, [pc, #16]	; (8002214 <__NVIC_SetPriorityGrouping+0x44>)
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	60d3      	str	r3, [r2, #12]
}
 8002208:	bf00      	nop
 800220a:	3714      	adds	r7, #20
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	e000ed00 	.word	0xe000ed00

08002218 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800221c:	4b04      	ldr	r3, [pc, #16]	; (8002230 <__NVIC_GetPriorityGrouping+0x18>)
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	0a1b      	lsrs	r3, r3, #8
 8002222:	f003 0307 	and.w	r3, r3, #7
}
 8002226:	4618      	mov	r0, r3
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	e000ed00 	.word	0xe000ed00

08002234 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800223e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002242:	2b00      	cmp	r3, #0
 8002244:	db0b      	blt.n	800225e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002246:	79fb      	ldrb	r3, [r7, #7]
 8002248:	f003 021f 	and.w	r2, r3, #31
 800224c:	4907      	ldr	r1, [pc, #28]	; (800226c <__NVIC_EnableIRQ+0x38>)
 800224e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002252:	095b      	lsrs	r3, r3, #5
 8002254:	2001      	movs	r0, #1
 8002256:	fa00 f202 	lsl.w	r2, r0, r2
 800225a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800225e:	bf00      	nop
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	e000e100 	.word	0xe000e100

08002270 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	4603      	mov	r3, r0
 8002278:	6039      	str	r1, [r7, #0]
 800227a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800227c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002280:	2b00      	cmp	r3, #0
 8002282:	db0a      	blt.n	800229a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	b2da      	uxtb	r2, r3
 8002288:	490c      	ldr	r1, [pc, #48]	; (80022bc <__NVIC_SetPriority+0x4c>)
 800228a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228e:	0112      	lsls	r2, r2, #4
 8002290:	b2d2      	uxtb	r2, r2
 8002292:	440b      	add	r3, r1
 8002294:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002298:	e00a      	b.n	80022b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	b2da      	uxtb	r2, r3
 800229e:	4908      	ldr	r1, [pc, #32]	; (80022c0 <__NVIC_SetPriority+0x50>)
 80022a0:	79fb      	ldrb	r3, [r7, #7]
 80022a2:	f003 030f 	and.w	r3, r3, #15
 80022a6:	3b04      	subs	r3, #4
 80022a8:	0112      	lsls	r2, r2, #4
 80022aa:	b2d2      	uxtb	r2, r2
 80022ac:	440b      	add	r3, r1
 80022ae:	761a      	strb	r2, [r3, #24]
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr
 80022bc:	e000e100 	.word	0xe000e100
 80022c0:	e000ed00 	.word	0xe000ed00

080022c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b089      	sub	sp, #36	; 0x24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f003 0307 	and.w	r3, r3, #7
 80022d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	f1c3 0307 	rsb	r3, r3, #7
 80022de:	2b04      	cmp	r3, #4
 80022e0:	bf28      	it	cs
 80022e2:	2304      	movcs	r3, #4
 80022e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	3304      	adds	r3, #4
 80022ea:	2b06      	cmp	r3, #6
 80022ec:	d902      	bls.n	80022f4 <NVIC_EncodePriority+0x30>
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	3b03      	subs	r3, #3
 80022f2:	e000      	b.n	80022f6 <NVIC_EncodePriority+0x32>
 80022f4:	2300      	movs	r3, #0
 80022f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f8:	f04f 32ff 	mov.w	r2, #4294967295
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	43da      	mvns	r2, r3
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	401a      	ands	r2, r3
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800230c:	f04f 31ff 	mov.w	r1, #4294967295
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	fa01 f303 	lsl.w	r3, r1, r3
 8002316:	43d9      	mvns	r1, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800231c:	4313      	orrs	r3, r2
         );
}
 800231e:	4618      	mov	r0, r3
 8002320:	3724      	adds	r7, #36	; 0x24
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b082      	sub	sp, #8
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f7ff ff4c 	bl	80021d0 <__NVIC_SetPriorityGrouping>
}
 8002338:	bf00      	nop
 800233a:	3708      	adds	r7, #8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
 8002346:	4603      	mov	r3, r0
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	607a      	str	r2, [r7, #4]
 800234c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800234e:	2300      	movs	r3, #0
 8002350:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002352:	f7ff ff61 	bl	8002218 <__NVIC_GetPriorityGrouping>
 8002356:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	68b9      	ldr	r1, [r7, #8]
 800235c:	6978      	ldr	r0, [r7, #20]
 800235e:	f7ff ffb1 	bl	80022c4 <NVIC_EncodePriority>
 8002362:	4602      	mov	r2, r0
 8002364:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002368:	4611      	mov	r1, r2
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff ff80 	bl	8002270 <__NVIC_SetPriority>
}
 8002370:	bf00      	nop
 8002372:	3718      	adds	r7, #24
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	4603      	mov	r3, r0
 8002380:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002386:	4618      	mov	r0, r3
 8002388:	f7ff ff54 	bl	8002234 <__NVIC_EnableIRQ>
}
 800238c:	bf00      	nop
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80023a2:	f7ff fee5 	bl	8002170 <HAL_GetTick>
 80023a6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d008      	beq.n	80023c6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2280      	movs	r2, #128	; 0x80
 80023b8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e052      	b.n	800246c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 0216 	bic.w	r2, r2, #22
 80023d4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	695a      	ldr	r2, [r3, #20]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023e4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d103      	bne.n	80023f6 <HAL_DMA_Abort+0x62>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d007      	beq.n	8002406 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f022 0208 	bic.w	r2, r2, #8
 8002404:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f022 0201 	bic.w	r2, r2, #1
 8002414:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002416:	e013      	b.n	8002440 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002418:	f7ff feaa 	bl	8002170 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b05      	cmp	r3, #5
 8002424:	d90c      	bls.n	8002440 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2220      	movs	r2, #32
 800242a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2203      	movs	r2, #3
 8002430:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e015      	b.n	800246c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	2b00      	cmp	r3, #0
 800244c:	d1e4      	bne.n	8002418 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002452:	223f      	movs	r2, #63	; 0x3f
 8002454:	409a      	lsls	r2, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3710      	adds	r7, #16
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d004      	beq.n	8002492 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2280      	movs	r2, #128	; 0x80
 800248c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e00c      	b.n	80024ac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2205      	movs	r2, #5
 8002496:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f022 0201 	bic.w	r2, r2, #1
 80024a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024c6:	b2db      	uxtb	r3, r3
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b089      	sub	sp, #36	; 0x24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024fe:	2300      	movs	r3, #0
 8002500:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002502:	2300      	movs	r3, #0
 8002504:	61fb      	str	r3, [r7, #28]
 8002506:	e16b      	b.n	80027e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002508:	2201      	movs	r2, #1
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	4013      	ands	r3, r2
 800251a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800251c:	693a      	ldr	r2, [r7, #16]
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	429a      	cmp	r2, r3
 8002522:	f040 815a 	bne.w	80027da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f003 0303 	and.w	r3, r3, #3
 800252e:	2b01      	cmp	r3, #1
 8002530:	d005      	beq.n	800253e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800253a:	2b02      	cmp	r3, #2
 800253c:	d130      	bne.n	80025a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	2203      	movs	r2, #3
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	43db      	mvns	r3, r3
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	4013      	ands	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	68da      	ldr	r2, [r3, #12]
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	4313      	orrs	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002574:	2201      	movs	r2, #1
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	43db      	mvns	r3, r3
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	4013      	ands	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	091b      	lsrs	r3, r3, #4
 800258a:	f003 0201 	and.w	r2, r3, #1
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	4313      	orrs	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f003 0303 	and.w	r3, r3, #3
 80025a8:	2b03      	cmp	r3, #3
 80025aa:	d017      	beq.n	80025dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	2203      	movs	r2, #3
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	43db      	mvns	r3, r3
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	4013      	ands	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f003 0303 	and.w	r3, r3, #3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d123      	bne.n	8002630 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	08da      	lsrs	r2, r3, #3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	3208      	adds	r2, #8
 80025f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	f003 0307 	and.w	r3, r3, #7
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	220f      	movs	r2, #15
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	43db      	mvns	r3, r3
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4013      	ands	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	691a      	ldr	r2, [r3, #16]
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	f003 0307 	and.w	r3, r3, #7
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	4313      	orrs	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	08da      	lsrs	r2, r3, #3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	3208      	adds	r2, #8
 800262a:	69b9      	ldr	r1, [r7, #24]
 800262c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	2203      	movs	r2, #3
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	43db      	mvns	r3, r3
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	4013      	ands	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f003 0203 	and.w	r2, r3, #3
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4313      	orrs	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800266c:	2b00      	cmp	r3, #0
 800266e:	f000 80b4 	beq.w	80027da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002672:	2300      	movs	r3, #0
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	4b60      	ldr	r3, [pc, #384]	; (80027f8 <HAL_GPIO_Init+0x30c>)
 8002678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267a:	4a5f      	ldr	r2, [pc, #380]	; (80027f8 <HAL_GPIO_Init+0x30c>)
 800267c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002680:	6453      	str	r3, [r2, #68]	; 0x44
 8002682:	4b5d      	ldr	r3, [pc, #372]	; (80027f8 <HAL_GPIO_Init+0x30c>)
 8002684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002686:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800268e:	4a5b      	ldr	r2, [pc, #364]	; (80027fc <HAL_GPIO_Init+0x310>)
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	089b      	lsrs	r3, r3, #2
 8002694:	3302      	adds	r3, #2
 8002696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800269a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	f003 0303 	and.w	r3, r3, #3
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	220f      	movs	r2, #15
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	43db      	mvns	r3, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4013      	ands	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a52      	ldr	r2, [pc, #328]	; (8002800 <HAL_GPIO_Init+0x314>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d02b      	beq.n	8002712 <HAL_GPIO_Init+0x226>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a51      	ldr	r2, [pc, #324]	; (8002804 <HAL_GPIO_Init+0x318>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d025      	beq.n	800270e <HAL_GPIO_Init+0x222>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a50      	ldr	r2, [pc, #320]	; (8002808 <HAL_GPIO_Init+0x31c>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d01f      	beq.n	800270a <HAL_GPIO_Init+0x21e>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a4f      	ldr	r2, [pc, #316]	; (800280c <HAL_GPIO_Init+0x320>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d019      	beq.n	8002706 <HAL_GPIO_Init+0x21a>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a4e      	ldr	r2, [pc, #312]	; (8002810 <HAL_GPIO_Init+0x324>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d013      	beq.n	8002702 <HAL_GPIO_Init+0x216>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a4d      	ldr	r2, [pc, #308]	; (8002814 <HAL_GPIO_Init+0x328>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d00d      	beq.n	80026fe <HAL_GPIO_Init+0x212>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a4c      	ldr	r2, [pc, #304]	; (8002818 <HAL_GPIO_Init+0x32c>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d007      	beq.n	80026fa <HAL_GPIO_Init+0x20e>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a4b      	ldr	r2, [pc, #300]	; (800281c <HAL_GPIO_Init+0x330>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d101      	bne.n	80026f6 <HAL_GPIO_Init+0x20a>
 80026f2:	2307      	movs	r3, #7
 80026f4:	e00e      	b.n	8002714 <HAL_GPIO_Init+0x228>
 80026f6:	2308      	movs	r3, #8
 80026f8:	e00c      	b.n	8002714 <HAL_GPIO_Init+0x228>
 80026fa:	2306      	movs	r3, #6
 80026fc:	e00a      	b.n	8002714 <HAL_GPIO_Init+0x228>
 80026fe:	2305      	movs	r3, #5
 8002700:	e008      	b.n	8002714 <HAL_GPIO_Init+0x228>
 8002702:	2304      	movs	r3, #4
 8002704:	e006      	b.n	8002714 <HAL_GPIO_Init+0x228>
 8002706:	2303      	movs	r3, #3
 8002708:	e004      	b.n	8002714 <HAL_GPIO_Init+0x228>
 800270a:	2302      	movs	r3, #2
 800270c:	e002      	b.n	8002714 <HAL_GPIO_Init+0x228>
 800270e:	2301      	movs	r3, #1
 8002710:	e000      	b.n	8002714 <HAL_GPIO_Init+0x228>
 8002712:	2300      	movs	r3, #0
 8002714:	69fa      	ldr	r2, [r7, #28]
 8002716:	f002 0203 	and.w	r2, r2, #3
 800271a:	0092      	lsls	r2, r2, #2
 800271c:	4093      	lsls	r3, r2
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	4313      	orrs	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002724:	4935      	ldr	r1, [pc, #212]	; (80027fc <HAL_GPIO_Init+0x310>)
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	089b      	lsrs	r3, r3, #2
 800272a:	3302      	adds	r3, #2
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002732:	4b3b      	ldr	r3, [pc, #236]	; (8002820 <HAL_GPIO_Init+0x334>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	43db      	mvns	r3, r3
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	4013      	ands	r3, r2
 8002740:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d003      	beq.n	8002756 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	4313      	orrs	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002756:	4a32      	ldr	r2, [pc, #200]	; (8002820 <HAL_GPIO_Init+0x334>)
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800275c:	4b30      	ldr	r3, [pc, #192]	; (8002820 <HAL_GPIO_Init+0x334>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	43db      	mvns	r3, r3
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	4013      	ands	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d003      	beq.n	8002780 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	4313      	orrs	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002780:	4a27      	ldr	r2, [pc, #156]	; (8002820 <HAL_GPIO_Init+0x334>)
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002786:	4b26      	ldr	r3, [pc, #152]	; (8002820 <HAL_GPIO_Init+0x334>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	43db      	mvns	r3, r3
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	4013      	ands	r3, r2
 8002794:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027aa:	4a1d      	ldr	r2, [pc, #116]	; (8002820 <HAL_GPIO_Init+0x334>)
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027b0:	4b1b      	ldr	r3, [pc, #108]	; (8002820 <HAL_GPIO_Init+0x334>)
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	43db      	mvns	r3, r3
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	4013      	ands	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d003      	beq.n	80027d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027d4:	4a12      	ldr	r2, [pc, #72]	; (8002820 <HAL_GPIO_Init+0x334>)
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	3301      	adds	r3, #1
 80027de:	61fb      	str	r3, [r7, #28]
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	2b0f      	cmp	r3, #15
 80027e4:	f67f ae90 	bls.w	8002508 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027e8:	bf00      	nop
 80027ea:	bf00      	nop
 80027ec:	3724      	adds	r7, #36	; 0x24
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	40023800 	.word	0x40023800
 80027fc:	40013800 	.word	0x40013800
 8002800:	40020000 	.word	0x40020000
 8002804:	40020400 	.word	0x40020400
 8002808:	40020800 	.word	0x40020800
 800280c:	40020c00 	.word	0x40020c00
 8002810:	40021000 	.word	0x40021000
 8002814:	40021400 	.word	0x40021400
 8002818:	40021800 	.word	0x40021800
 800281c:	40021c00 	.word	0x40021c00
 8002820:	40013c00 	.word	0x40013c00

08002824 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	460b      	mov	r3, r1
 800282e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	691a      	ldr	r2, [r3, #16]
 8002834:	887b      	ldrh	r3, [r7, #2]
 8002836:	4013      	ands	r3, r2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d002      	beq.n	8002842 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800283c:	2301      	movs	r3, #1
 800283e:	73fb      	strb	r3, [r7, #15]
 8002840:	e001      	b.n	8002846 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002842:	2300      	movs	r3, #0
 8002844:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002846:	7bfb      	ldrb	r3, [r7, #15]
}
 8002848:	4618      	mov	r0, r3
 800284a:	3714      	adds	r7, #20
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	460b      	mov	r3, r1
 800285e:	807b      	strh	r3, [r7, #2]
 8002860:	4613      	mov	r3, r2
 8002862:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002864:	787b      	ldrb	r3, [r7, #1]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d003      	beq.n	8002872 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800286a:	887a      	ldrh	r2, [r7, #2]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002870:	e003      	b.n	800287a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002872:	887b      	ldrh	r3, [r7, #2]
 8002874:	041a      	lsls	r2, r3, #16
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	619a      	str	r2, [r3, #24]
}
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
	...

08002888 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e12b      	b.n	8002af2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d106      	bne.n	80028b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7fe fddc 	bl	800146c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2224      	movs	r2, #36	; 0x24
 80028b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 0201 	bic.w	r2, r2, #1
 80028ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80028ec:	f003 fa0e 	bl	8005d0c <HAL_RCC_GetPCLK1Freq>
 80028f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	4a81      	ldr	r2, [pc, #516]	; (8002afc <HAL_I2C_Init+0x274>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d807      	bhi.n	800290c <HAL_I2C_Init+0x84>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	4a80      	ldr	r2, [pc, #512]	; (8002b00 <HAL_I2C_Init+0x278>)
 8002900:	4293      	cmp	r3, r2
 8002902:	bf94      	ite	ls
 8002904:	2301      	movls	r3, #1
 8002906:	2300      	movhi	r3, #0
 8002908:	b2db      	uxtb	r3, r3
 800290a:	e006      	b.n	800291a <HAL_I2C_Init+0x92>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	4a7d      	ldr	r2, [pc, #500]	; (8002b04 <HAL_I2C_Init+0x27c>)
 8002910:	4293      	cmp	r3, r2
 8002912:	bf94      	ite	ls
 8002914:	2301      	movls	r3, #1
 8002916:	2300      	movhi	r3, #0
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e0e7      	b.n	8002af2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	4a78      	ldr	r2, [pc, #480]	; (8002b08 <HAL_I2C_Init+0x280>)
 8002926:	fba2 2303 	umull	r2, r3, r2, r3
 800292a:	0c9b      	lsrs	r3, r3, #18
 800292c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68ba      	ldr	r2, [r7, #8]
 800293e:	430a      	orrs	r2, r1
 8002940:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	6a1b      	ldr	r3, [r3, #32]
 8002948:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	4a6a      	ldr	r2, [pc, #424]	; (8002afc <HAL_I2C_Init+0x274>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d802      	bhi.n	800295c <HAL_I2C_Init+0xd4>
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	3301      	adds	r3, #1
 800295a:	e009      	b.n	8002970 <HAL_I2C_Init+0xe8>
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002962:	fb02 f303 	mul.w	r3, r2, r3
 8002966:	4a69      	ldr	r2, [pc, #420]	; (8002b0c <HAL_I2C_Init+0x284>)
 8002968:	fba2 2303 	umull	r2, r3, r2, r3
 800296c:	099b      	lsrs	r3, r3, #6
 800296e:	3301      	adds	r3, #1
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	6812      	ldr	r2, [r2, #0]
 8002974:	430b      	orrs	r3, r1
 8002976:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002982:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	495c      	ldr	r1, [pc, #368]	; (8002afc <HAL_I2C_Init+0x274>)
 800298c:	428b      	cmp	r3, r1
 800298e:	d819      	bhi.n	80029c4 <HAL_I2C_Init+0x13c>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	1e59      	subs	r1, r3, #1
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	fbb1 f3f3 	udiv	r3, r1, r3
 800299e:	1c59      	adds	r1, r3, #1
 80029a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80029a4:	400b      	ands	r3, r1
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00a      	beq.n	80029c0 <HAL_I2C_Init+0x138>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	1e59      	subs	r1, r3, #1
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80029b8:	3301      	adds	r3, #1
 80029ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029be:	e051      	b.n	8002a64 <HAL_I2C_Init+0x1dc>
 80029c0:	2304      	movs	r3, #4
 80029c2:	e04f      	b.n	8002a64 <HAL_I2C_Init+0x1dc>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d111      	bne.n	80029f0 <HAL_I2C_Init+0x168>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	1e58      	subs	r0, r3, #1
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6859      	ldr	r1, [r3, #4]
 80029d4:	460b      	mov	r3, r1
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	440b      	add	r3, r1
 80029da:	fbb0 f3f3 	udiv	r3, r0, r3
 80029de:	3301      	adds	r3, #1
 80029e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	bf0c      	ite	eq
 80029e8:	2301      	moveq	r3, #1
 80029ea:	2300      	movne	r3, #0
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	e012      	b.n	8002a16 <HAL_I2C_Init+0x18e>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	1e58      	subs	r0, r3, #1
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6859      	ldr	r1, [r3, #4]
 80029f8:	460b      	mov	r3, r1
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	440b      	add	r3, r1
 80029fe:	0099      	lsls	r1, r3, #2
 8002a00:	440b      	add	r3, r1
 8002a02:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a06:	3301      	adds	r3, #1
 8002a08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	bf0c      	ite	eq
 8002a10:	2301      	moveq	r3, #1
 8002a12:	2300      	movne	r3, #0
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <HAL_I2C_Init+0x196>
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e022      	b.n	8002a64 <HAL_I2C_Init+0x1dc>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d10e      	bne.n	8002a44 <HAL_I2C_Init+0x1bc>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	1e58      	subs	r0, r3, #1
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6859      	ldr	r1, [r3, #4]
 8002a2e:	460b      	mov	r3, r1
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	440b      	add	r3, r1
 8002a34:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a38:	3301      	adds	r3, #1
 8002a3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a42:	e00f      	b.n	8002a64 <HAL_I2C_Init+0x1dc>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	1e58      	subs	r0, r3, #1
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6859      	ldr	r1, [r3, #4]
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	440b      	add	r3, r1
 8002a52:	0099      	lsls	r1, r3, #2
 8002a54:	440b      	add	r3, r1
 8002a56:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a64:	6879      	ldr	r1, [r7, #4]
 8002a66:	6809      	ldr	r1, [r1, #0]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	69da      	ldr	r2, [r3, #28]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
 8002a7e:	431a      	orrs	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	430a      	orrs	r2, r1
 8002a86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	6911      	ldr	r1, [r2, #16]
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	68d2      	ldr	r2, [r2, #12]
 8002a9e:	4311      	orrs	r1, r2
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	6812      	ldr	r2, [r2, #0]
 8002aa4:	430b      	orrs	r3, r1
 8002aa6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	695a      	ldr	r2, [r3, #20]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	431a      	orrs	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f042 0201 	orr.w	r2, r2, #1
 8002ad2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2220      	movs	r2, #32
 8002ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	000186a0 	.word	0x000186a0
 8002b00:	001e847f 	.word	0x001e847f
 8002b04:	003d08ff 	.word	0x003d08ff
 8002b08:	431bde83 	.word	0x431bde83
 8002b0c:	10624dd3 	.word	0x10624dd3

08002b10 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b088      	sub	sp, #32
 8002b14:	af02      	add	r7, sp, #8
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	607a      	str	r2, [r7, #4]
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	817b      	strh	r3, [r7, #10]
 8002b20:	4613      	mov	r3, r2
 8002b22:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b24:	f7ff fb24 	bl	8002170 <HAL_GetTick>
 8002b28:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b20      	cmp	r3, #32
 8002b34:	f040 80e0 	bne.w	8002cf8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	9300      	str	r3, [sp, #0]
 8002b3c:	2319      	movs	r3, #25
 8002b3e:	2201      	movs	r2, #1
 8002b40:	4970      	ldr	r1, [pc, #448]	; (8002d04 <HAL_I2C_Master_Transmit+0x1f4>)
 8002b42:	68f8      	ldr	r0, [r7, #12]
 8002b44:	f002 fa6c 	bl	8005020 <I2C_WaitOnFlagUntilTimeout>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002b4e:	2302      	movs	r3, #2
 8002b50:	e0d3      	b.n	8002cfa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d101      	bne.n	8002b60 <HAL_I2C_Master_Transmit+0x50>
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	e0cc      	b.n	8002cfa <HAL_I2C_Master_Transmit+0x1ea>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d007      	beq.n	8002b86 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f042 0201 	orr.w	r2, r2, #1
 8002b84:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b94:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2221      	movs	r2, #33	; 0x21
 8002b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2210      	movs	r2, #16
 8002ba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	893a      	ldrh	r2, [r7, #8]
 8002bb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	4a50      	ldr	r2, [pc, #320]	; (8002d08 <HAL_I2C_Master_Transmit+0x1f8>)
 8002bc6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002bc8:	8979      	ldrh	r1, [r7, #10]
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	6a3a      	ldr	r2, [r7, #32]
 8002bce:	68f8      	ldr	r0, [r7, #12]
 8002bd0:	f001 ff98 	bl	8004b04 <I2C_MasterRequestWrite>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e08d      	b.n	8002cfa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bde:	2300      	movs	r3, #0
 8002be0:	613b      	str	r3, [r7, #16]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	695b      	ldr	r3, [r3, #20]
 8002be8:	613b      	str	r3, [r7, #16]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	613b      	str	r3, [r7, #16]
 8002bf2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002bf4:	e066      	b.n	8002cc4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bf6:	697a      	ldr	r2, [r7, #20]
 8002bf8:	6a39      	ldr	r1, [r7, #32]
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f002 fae6 	bl	80051cc <I2C_WaitOnTXEFlagUntilTimeout>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00d      	beq.n	8002c22 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	2b04      	cmp	r3, #4
 8002c0c:	d107      	bne.n	8002c1e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c1c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e06b      	b.n	8002cfa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c26:	781a      	ldrb	r2, [r3, #0]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c32:	1c5a      	adds	r2, r3, #1
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	695b      	ldr	r3, [r3, #20]
 8002c58:	f003 0304 	and.w	r3, r3, #4
 8002c5c:	2b04      	cmp	r3, #4
 8002c5e:	d11b      	bne.n	8002c98 <HAL_I2C_Master_Transmit+0x188>
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d017      	beq.n	8002c98 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6c:	781a      	ldrb	r2, [r3, #0]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c78:	1c5a      	adds	r2, r3, #1
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	3b01      	subs	r3, #1
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c90:	3b01      	subs	r3, #1
 8002c92:	b29a      	uxth	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c98:	697a      	ldr	r2, [r7, #20]
 8002c9a:	6a39      	ldr	r1, [r7, #32]
 8002c9c:	68f8      	ldr	r0, [r7, #12]
 8002c9e:	f002 fad6 	bl	800524e <I2C_WaitOnBTFFlagUntilTimeout>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00d      	beq.n	8002cc4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cac:	2b04      	cmp	r3, #4
 8002cae:	d107      	bne.n	8002cc0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cbe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e01a      	b.n	8002cfa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d194      	bne.n	8002bf6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2220      	movs	r2, #32
 8002ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	e000      	b.n	8002cfa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002cf8:	2302      	movs	r3, #2
  }
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3718      	adds	r7, #24
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	00100002 	.word	0x00100002
 8002d08:	ffff0000 	.word	0xffff0000

08002d0c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b08c      	sub	sp, #48	; 0x30
 8002d10:	af02      	add	r7, sp, #8
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	607a      	str	r2, [r7, #4]
 8002d16:	461a      	mov	r2, r3
 8002d18:	460b      	mov	r3, r1
 8002d1a:	817b      	strh	r3, [r7, #10]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d20:	f7ff fa26 	bl	8002170 <HAL_GetTick>
 8002d24:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b20      	cmp	r3, #32
 8002d30:	f040 820b 	bne.w	800314a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d36:	9300      	str	r3, [sp, #0]
 8002d38:	2319      	movs	r3, #25
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	497c      	ldr	r1, [pc, #496]	; (8002f30 <HAL_I2C_Master_Receive+0x224>)
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f002 f96e 	bl	8005020 <I2C_WaitOnFlagUntilTimeout>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	e1fe      	b.n	800314c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d101      	bne.n	8002d5c <HAL_I2C_Master_Receive+0x50>
 8002d58:	2302      	movs	r3, #2
 8002d5a:	e1f7      	b.n	800314c <HAL_I2C_Master_Receive+0x440>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d007      	beq.n	8002d82 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f042 0201 	orr.w	r2, r2, #1
 8002d80:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d90:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2222      	movs	r2, #34	; 0x22
 8002d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2210      	movs	r2, #16
 8002d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	893a      	ldrh	r2, [r7, #8]
 8002db2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	4a5c      	ldr	r2, [pc, #368]	; (8002f34 <HAL_I2C_Master_Receive+0x228>)
 8002dc2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002dc4:	8979      	ldrh	r1, [r7, #10]
 8002dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dca:	68f8      	ldr	r0, [r7, #12]
 8002dcc:	f001 ff1c 	bl	8004c08 <I2C_MasterRequestRead>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e1b8      	b.n	800314c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d113      	bne.n	8002e0a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002de2:	2300      	movs	r3, #0
 8002de4:	623b      	str	r3, [r7, #32]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	695b      	ldr	r3, [r3, #20]
 8002dec:	623b      	str	r3, [r7, #32]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	623b      	str	r3, [r7, #32]
 8002df6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	e18c      	b.n	8003124 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d11b      	bne.n	8002e4a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e20:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e22:	2300      	movs	r3, #0
 8002e24:	61fb      	str	r3, [r7, #28]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	695b      	ldr	r3, [r3, #20]
 8002e2c:	61fb      	str	r3, [r7, #28]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	61fb      	str	r3, [r7, #28]
 8002e36:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e46:	601a      	str	r2, [r3, #0]
 8002e48:	e16c      	b.n	8003124 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d11b      	bne.n	8002e8a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e60:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e72:	2300      	movs	r3, #0
 8002e74:	61bb      	str	r3, [r7, #24]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	61bb      	str	r3, [r7, #24]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	61bb      	str	r3, [r7, #24]
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	e14c      	b.n	8003124 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e98:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	617b      	str	r3, [r7, #20]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	695b      	ldr	r3, [r3, #20]
 8002ea4:	617b      	str	r3, [r7, #20]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	617b      	str	r3, [r7, #20]
 8002eae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002eb0:	e138      	b.n	8003124 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eb6:	2b03      	cmp	r3, #3
 8002eb8:	f200 80f1 	bhi.w	800309e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d123      	bne.n	8002f0c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ec6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f002 fa33 	bl	8005334 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d001      	beq.n	8002ed8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e139      	b.n	800314c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	691a      	ldr	r2, [r3, #16]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee2:	b2d2      	uxtb	r2, r2
 8002ee4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eea:	1c5a      	adds	r2, r3, #1
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	b29a      	uxth	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	3b01      	subs	r3, #1
 8002f04:	b29a      	uxth	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f0a:	e10b      	b.n	8003124 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d14e      	bne.n	8002fb2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f16:	9300      	str	r3, [sp, #0]
 8002f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	4906      	ldr	r1, [pc, #24]	; (8002f38 <HAL_I2C_Master_Receive+0x22c>)
 8002f1e:	68f8      	ldr	r0, [r7, #12]
 8002f20:	f002 f87e 	bl	8005020 <I2C_WaitOnFlagUntilTimeout>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d008      	beq.n	8002f3c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e10e      	b.n	800314c <HAL_I2C_Master_Receive+0x440>
 8002f2e:	bf00      	nop
 8002f30:	00100002 	.word	0x00100002
 8002f34:	ffff0000 	.word	0xffff0000
 8002f38:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	691a      	ldr	r2, [r3, #16]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f56:	b2d2      	uxtb	r2, r2
 8002f58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5e:	1c5a      	adds	r2, r3, #1
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	3b01      	subs	r3, #1
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	691a      	ldr	r2, [r3, #16]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f88:	b2d2      	uxtb	r2, r2
 8002f8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f90:	1c5a      	adds	r2, r3, #1
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	b29a      	uxth	r2, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002fb0:	e0b8      	b.n	8003124 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb4:	9300      	str	r3, [sp, #0]
 8002fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb8:	2200      	movs	r2, #0
 8002fba:	4966      	ldr	r1, [pc, #408]	; (8003154 <HAL_I2C_Master_Receive+0x448>)
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f002 f82f 	bl	8005020 <I2C_WaitOnFlagUntilTimeout>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d001      	beq.n	8002fcc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e0bf      	b.n	800314c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	691a      	ldr	r2, [r3, #16]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe6:	b2d2      	uxtb	r2, r2
 8002fe8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fee:	1c5a      	adds	r2, r3, #1
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003004:	b29b      	uxth	r3, r3
 8003006:	3b01      	subs	r3, #1
 8003008:	b29a      	uxth	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800300e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003010:	9300      	str	r3, [sp, #0]
 8003012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003014:	2200      	movs	r2, #0
 8003016:	494f      	ldr	r1, [pc, #316]	; (8003154 <HAL_I2C_Master_Receive+0x448>)
 8003018:	68f8      	ldr	r0, [r7, #12]
 800301a:	f002 f801 	bl	8005020 <I2C_WaitOnFlagUntilTimeout>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e091      	b.n	800314c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003036:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	691a      	ldr	r2, [r3, #16]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003042:	b2d2      	uxtb	r2, r2
 8003044:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304a:	1c5a      	adds	r2, r3, #1
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003054:	3b01      	subs	r3, #1
 8003056:	b29a      	uxth	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003060:	b29b      	uxth	r3, r3
 8003062:	3b01      	subs	r3, #1
 8003064:	b29a      	uxth	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	691a      	ldr	r2, [r3, #16]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003074:	b2d2      	uxtb	r2, r2
 8003076:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307c:	1c5a      	adds	r2, r3, #1
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003086:	3b01      	subs	r3, #1
 8003088:	b29a      	uxth	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003092:	b29b      	uxth	r3, r3
 8003094:	3b01      	subs	r3, #1
 8003096:	b29a      	uxth	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800309c:	e042      	b.n	8003124 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800309e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030a2:	68f8      	ldr	r0, [r7, #12]
 80030a4:	f002 f946 	bl	8005334 <I2C_WaitOnRXNEFlagUntilTimeout>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e04c      	b.n	800314c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	691a      	ldr	r2, [r3, #16]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030bc:	b2d2      	uxtb	r2, r2
 80030be:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c4:	1c5a      	adds	r2, r3, #1
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ce:	3b01      	subs	r3, #1
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030da:	b29b      	uxth	r3, r3
 80030dc:	3b01      	subs	r3, #1
 80030de:	b29a      	uxth	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	f003 0304 	and.w	r3, r3, #4
 80030ee:	2b04      	cmp	r3, #4
 80030f0:	d118      	bne.n	8003124 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	691a      	ldr	r2, [r3, #16]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fc:	b2d2      	uxtb	r2, r2
 80030fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	1c5a      	adds	r2, r3, #1
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800310e:	3b01      	subs	r3, #1
 8003110:	b29a      	uxth	r2, r3
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800311a:	b29b      	uxth	r3, r3
 800311c:	3b01      	subs	r3, #1
 800311e:	b29a      	uxth	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003128:	2b00      	cmp	r3, #0
 800312a:	f47f aec2 	bne.w	8002eb2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2220      	movs	r2, #32
 8003132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003146:	2300      	movs	r3, #0
 8003148:	e000      	b.n	800314c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800314a:	2302      	movs	r3, #2
  }
}
 800314c:	4618      	mov	r0, r3
 800314e:	3728      	adds	r7, #40	; 0x28
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	00010004 	.word	0x00010004

08003158 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b088      	sub	sp, #32
 800315c:	af02      	add	r7, sp, #8
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	4608      	mov	r0, r1
 8003162:	4611      	mov	r1, r2
 8003164:	461a      	mov	r2, r3
 8003166:	4603      	mov	r3, r0
 8003168:	817b      	strh	r3, [r7, #10]
 800316a:	460b      	mov	r3, r1
 800316c:	813b      	strh	r3, [r7, #8]
 800316e:	4613      	mov	r3, r2
 8003170:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003172:	f7fe fffd 	bl	8002170 <HAL_GetTick>
 8003176:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800317e:	b2db      	uxtb	r3, r3
 8003180:	2b20      	cmp	r3, #32
 8003182:	f040 80d9 	bne.w	8003338 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	9300      	str	r3, [sp, #0]
 800318a:	2319      	movs	r3, #25
 800318c:	2201      	movs	r2, #1
 800318e:	496d      	ldr	r1, [pc, #436]	; (8003344 <HAL_I2C_Mem_Write+0x1ec>)
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f001 ff45 	bl	8005020 <I2C_WaitOnFlagUntilTimeout>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d001      	beq.n	80031a0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800319c:	2302      	movs	r3, #2
 800319e:	e0cc      	b.n	800333a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d101      	bne.n	80031ae <HAL_I2C_Mem_Write+0x56>
 80031aa:	2302      	movs	r3, #2
 80031ac:	e0c5      	b.n	800333a <HAL_I2C_Mem_Write+0x1e2>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0301 	and.w	r3, r3, #1
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d007      	beq.n	80031d4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f042 0201 	orr.w	r2, r2, #1
 80031d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2221      	movs	r2, #33	; 0x21
 80031e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2240      	movs	r2, #64	; 0x40
 80031f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6a3a      	ldr	r2, [r7, #32]
 80031fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003204:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800320a:	b29a      	uxth	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	4a4d      	ldr	r2, [pc, #308]	; (8003348 <HAL_I2C_Mem_Write+0x1f0>)
 8003214:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003216:	88f8      	ldrh	r0, [r7, #6]
 8003218:	893a      	ldrh	r2, [r7, #8]
 800321a:	8979      	ldrh	r1, [r7, #10]
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	9301      	str	r3, [sp, #4]
 8003220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003222:	9300      	str	r3, [sp, #0]
 8003224:	4603      	mov	r3, r0
 8003226:	68f8      	ldr	r0, [r7, #12]
 8003228:	f001 fdbc 	bl	8004da4 <I2C_RequestMemoryWrite>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d052      	beq.n	80032d8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e081      	b.n	800333a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003236:	697a      	ldr	r2, [r7, #20]
 8003238:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f001 ffc6 	bl	80051cc <I2C_WaitOnTXEFlagUntilTimeout>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00d      	beq.n	8003262 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324a:	2b04      	cmp	r3, #4
 800324c:	d107      	bne.n	800325e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800325c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e06b      	b.n	800333a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003266:	781a      	ldrb	r2, [r3, #0]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003272:	1c5a      	adds	r2, r3, #1
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800327c:	3b01      	subs	r3, #1
 800327e:	b29a      	uxth	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003288:	b29b      	uxth	r3, r3
 800328a:	3b01      	subs	r3, #1
 800328c:	b29a      	uxth	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	695b      	ldr	r3, [r3, #20]
 8003298:	f003 0304 	and.w	r3, r3, #4
 800329c:	2b04      	cmp	r3, #4
 800329e:	d11b      	bne.n	80032d8 <HAL_I2C_Mem_Write+0x180>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d017      	beq.n	80032d8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ac:	781a      	ldrb	r2, [r3, #0]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b8:	1c5a      	adds	r2, r3, #1
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c2:	3b01      	subs	r3, #1
 80032c4:	b29a      	uxth	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	3b01      	subs	r3, #1
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1aa      	bne.n	8003236 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032e0:	697a      	ldr	r2, [r7, #20]
 80032e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f001 ffb2 	bl	800524e <I2C_WaitOnBTFFlagUntilTimeout>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00d      	beq.n	800330c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f4:	2b04      	cmp	r3, #4
 80032f6:	d107      	bne.n	8003308 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003306:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e016      	b.n	800333a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800331a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2220      	movs	r2, #32
 8003320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003334:	2300      	movs	r3, #0
 8003336:	e000      	b.n	800333a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003338:	2302      	movs	r3, #2
  }
}
 800333a:	4618      	mov	r0, r3
 800333c:	3718      	adds	r7, #24
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	00100002 	.word	0x00100002
 8003348:	ffff0000 	.word	0xffff0000

0800334c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b088      	sub	sp, #32
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003354:	2300      	movs	r3, #0
 8003356:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003364:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800336c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003374:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003376:	7bfb      	ldrb	r3, [r7, #15]
 8003378:	2b10      	cmp	r3, #16
 800337a:	d003      	beq.n	8003384 <HAL_I2C_EV_IRQHandler+0x38>
 800337c:	7bfb      	ldrb	r3, [r7, #15]
 800337e:	2b40      	cmp	r3, #64	; 0x40
 8003380:	f040 80c1 	bne.w	8003506 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10d      	bne.n	80033ba <HAL_I2C_EV_IRQHandler+0x6e>
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80033a4:	d003      	beq.n	80033ae <HAL_I2C_EV_IRQHandler+0x62>
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80033ac:	d101      	bne.n	80033b2 <HAL_I2C_EV_IRQHandler+0x66>
 80033ae:	2301      	movs	r3, #1
 80033b0:	e000      	b.n	80033b4 <HAL_I2C_EV_IRQHandler+0x68>
 80033b2:	2300      	movs	r3, #0
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	f000 8132 	beq.w	800361e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00c      	beq.n	80033de <HAL_I2C_EV_IRQHandler+0x92>
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	0a5b      	lsrs	r3, r3, #9
 80033c8:	f003 0301 	and.w	r3, r3, #1
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d006      	beq.n	80033de <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f002 f834 	bl	800543e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 fd79 	bl	8003ece <I2C_Master_SB>
 80033dc:	e092      	b.n	8003504 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	08db      	lsrs	r3, r3, #3
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d009      	beq.n	80033fe <HAL_I2C_EV_IRQHandler+0xb2>
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	0a5b      	lsrs	r3, r3, #9
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d003      	beq.n	80033fe <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 fdef 	bl	8003fda <I2C_Master_ADD10>
 80033fc:	e082      	b.n	8003504 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	085b      	lsrs	r3, r3, #1
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	2b00      	cmp	r3, #0
 8003408:	d009      	beq.n	800341e <HAL_I2C_EV_IRQHandler+0xd2>
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	0a5b      	lsrs	r3, r3, #9
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	2b00      	cmp	r3, #0
 8003414:	d003      	beq.n	800341e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 fe09 	bl	800402e <I2C_Master_ADDR>
 800341c:	e072      	b.n	8003504 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	089b      	lsrs	r3, r3, #2
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b00      	cmp	r3, #0
 8003428:	d03b      	beq.n	80034a2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003434:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003438:	f000 80f3 	beq.w	8003622 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	09db      	lsrs	r3, r3, #7
 8003440:	f003 0301 	and.w	r3, r3, #1
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00f      	beq.n	8003468 <HAL_I2C_EV_IRQHandler+0x11c>
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	0a9b      	lsrs	r3, r3, #10
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	2b00      	cmp	r3, #0
 8003452:	d009      	beq.n	8003468 <HAL_I2C_EV_IRQHandler+0x11c>
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	089b      	lsrs	r3, r3, #2
 8003458:	f003 0301 	and.w	r3, r3, #1
 800345c:	2b00      	cmp	r3, #0
 800345e:	d103      	bne.n	8003468 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 f9f3 	bl	800384c <I2C_MasterTransmit_TXE>
 8003466:	e04d      	b.n	8003504 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	089b      	lsrs	r3, r3, #2
 800346c:	f003 0301 	and.w	r3, r3, #1
 8003470:	2b00      	cmp	r3, #0
 8003472:	f000 80d6 	beq.w	8003622 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	0a5b      	lsrs	r3, r3, #9
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	f000 80cf 	beq.w	8003622 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003484:	7bbb      	ldrb	r3, [r7, #14]
 8003486:	2b21      	cmp	r3, #33	; 0x21
 8003488:	d103      	bne.n	8003492 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 fa7a 	bl	8003984 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003490:	e0c7      	b.n	8003622 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003492:	7bfb      	ldrb	r3, [r7, #15]
 8003494:	2b40      	cmp	r3, #64	; 0x40
 8003496:	f040 80c4 	bne.w	8003622 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 fae8 	bl	8003a70 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034a0:	e0bf      	b.n	8003622 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034b0:	f000 80b7 	beq.w	8003622 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	099b      	lsrs	r3, r3, #6
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00f      	beq.n	80034e0 <HAL_I2C_EV_IRQHandler+0x194>
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	0a9b      	lsrs	r3, r3, #10
 80034c4:	f003 0301 	and.w	r3, r3, #1
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d009      	beq.n	80034e0 <HAL_I2C_EV_IRQHandler+0x194>
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	089b      	lsrs	r3, r3, #2
 80034d0:	f003 0301 	and.w	r3, r3, #1
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d103      	bne.n	80034e0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f000 fb5d 	bl	8003b98 <I2C_MasterReceive_RXNE>
 80034de:	e011      	b.n	8003504 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	089b      	lsrs	r3, r3, #2
 80034e4:	f003 0301 	and.w	r3, r3, #1
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	f000 809a 	beq.w	8003622 <HAL_I2C_EV_IRQHandler+0x2d6>
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	0a5b      	lsrs	r3, r3, #9
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	f000 8093 	beq.w	8003622 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 fbfc 	bl	8003cfa <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003502:	e08e      	b.n	8003622 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003504:	e08d      	b.n	8003622 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	2b00      	cmp	r3, #0
 800350c:	d004      	beq.n	8003518 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	61fb      	str	r3, [r7, #28]
 8003516:	e007      	b.n	8003528 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	085b      	lsrs	r3, r3, #1
 800352c:	f003 0301 	and.w	r3, r3, #1
 8003530:	2b00      	cmp	r3, #0
 8003532:	d012      	beq.n	800355a <HAL_I2C_EV_IRQHandler+0x20e>
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	0a5b      	lsrs	r3, r3, #9
 8003538:	f003 0301 	and.w	r3, r3, #1
 800353c:	2b00      	cmp	r3, #0
 800353e:	d00c      	beq.n	800355a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003544:	2b00      	cmp	r3, #0
 8003546:	d003      	beq.n	8003550 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003550:	69b9      	ldr	r1, [r7, #24]
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 ffba 	bl	80044cc <I2C_Slave_ADDR>
 8003558:	e066      	b.n	8003628 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	091b      	lsrs	r3, r3, #4
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b00      	cmp	r3, #0
 8003564:	d009      	beq.n	800357a <HAL_I2C_EV_IRQHandler+0x22e>
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	0a5b      	lsrs	r3, r3, #9
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b00      	cmp	r3, #0
 8003570:	d003      	beq.n	800357a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 fff4 	bl	8004560 <I2C_Slave_STOPF>
 8003578:	e056      	b.n	8003628 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800357a:	7bbb      	ldrb	r3, [r7, #14]
 800357c:	2b21      	cmp	r3, #33	; 0x21
 800357e:	d002      	beq.n	8003586 <HAL_I2C_EV_IRQHandler+0x23a>
 8003580:	7bbb      	ldrb	r3, [r7, #14]
 8003582:	2b29      	cmp	r3, #41	; 0x29
 8003584:	d125      	bne.n	80035d2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	09db      	lsrs	r3, r3, #7
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00f      	beq.n	80035b2 <HAL_I2C_EV_IRQHandler+0x266>
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	0a9b      	lsrs	r3, r3, #10
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	d009      	beq.n	80035b2 <HAL_I2C_EV_IRQHandler+0x266>
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	089b      	lsrs	r3, r3, #2
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d103      	bne.n	80035b2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 fed0 	bl	8004350 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80035b0:	e039      	b.n	8003626 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	089b      	lsrs	r3, r3, #2
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d033      	beq.n	8003626 <HAL_I2C_EV_IRQHandler+0x2da>
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	0a5b      	lsrs	r3, r3, #9
 80035c2:	f003 0301 	and.w	r3, r3, #1
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d02d      	beq.n	8003626 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 fefd 	bl	80043ca <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80035d0:	e029      	b.n	8003626 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	099b      	lsrs	r3, r3, #6
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00f      	beq.n	80035fe <HAL_I2C_EV_IRQHandler+0x2b2>
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	0a9b      	lsrs	r3, r3, #10
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d009      	beq.n	80035fe <HAL_I2C_EV_IRQHandler+0x2b2>
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	089b      	lsrs	r3, r3, #2
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d103      	bne.n	80035fe <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 ff08 	bl	800440c <I2C_SlaveReceive_RXNE>
 80035fc:	e014      	b.n	8003628 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	089b      	lsrs	r3, r3, #2
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00e      	beq.n	8003628 <HAL_I2C_EV_IRQHandler+0x2dc>
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	0a5b      	lsrs	r3, r3, #9
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b00      	cmp	r3, #0
 8003614:	d008      	beq.n	8003628 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 ff36 	bl	8004488 <I2C_SlaveReceive_BTF>
 800361c:	e004      	b.n	8003628 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800361e:	bf00      	nop
 8003620:	e002      	b.n	8003628 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003622:	bf00      	nop
 8003624:	e000      	b.n	8003628 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003626:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003628:	3720      	adds	r7, #32
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800362e:	b580      	push	{r7, lr}
 8003630:	b08a      	sub	sp, #40	; 0x28
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	695b      	ldr	r3, [r3, #20]
 800363c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003646:	2300      	movs	r3, #0
 8003648:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003650:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003652:	6a3b      	ldr	r3, [r7, #32]
 8003654:	0a1b      	lsrs	r3, r3, #8
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00e      	beq.n	800367c <HAL_I2C_ER_IRQHandler+0x4e>
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	0a1b      	lsrs	r3, r3, #8
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b00      	cmp	r3, #0
 8003668:	d008      	beq.n	800367c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800366a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366c:	f043 0301 	orr.w	r3, r3, #1
 8003670:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800367a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800367c:	6a3b      	ldr	r3, [r7, #32]
 800367e:	0a5b      	lsrs	r3, r3, #9
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00e      	beq.n	80036a6 <HAL_I2C_ER_IRQHandler+0x78>
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	0a1b      	lsrs	r3, r3, #8
 800368c:	f003 0301 	and.w	r3, r3, #1
 8003690:	2b00      	cmp	r3, #0
 8003692:	d008      	beq.n	80036a6 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003696:	f043 0302 	orr.w	r3, r3, #2
 800369a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80036a4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80036a6:	6a3b      	ldr	r3, [r7, #32]
 80036a8:	0a9b      	lsrs	r3, r3, #10
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d03f      	beq.n	8003732 <HAL_I2C_ER_IRQHandler+0x104>
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	0a1b      	lsrs	r3, r3, #8
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d039      	beq.n	8003732 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80036be:	7efb      	ldrb	r3, [r7, #27]
 80036c0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80036d8:	7ebb      	ldrb	r3, [r7, #26]
 80036da:	2b20      	cmp	r3, #32
 80036dc:	d112      	bne.n	8003704 <HAL_I2C_ER_IRQHandler+0xd6>
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d10f      	bne.n	8003704 <HAL_I2C_ER_IRQHandler+0xd6>
 80036e4:	7cfb      	ldrb	r3, [r7, #19]
 80036e6:	2b21      	cmp	r3, #33	; 0x21
 80036e8:	d008      	beq.n	80036fc <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80036ea:	7cfb      	ldrb	r3, [r7, #19]
 80036ec:	2b29      	cmp	r3, #41	; 0x29
 80036ee:	d005      	beq.n	80036fc <HAL_I2C_ER_IRQHandler+0xce>
 80036f0:	7cfb      	ldrb	r3, [r7, #19]
 80036f2:	2b28      	cmp	r3, #40	; 0x28
 80036f4:	d106      	bne.n	8003704 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2b21      	cmp	r3, #33	; 0x21
 80036fa:	d103      	bne.n	8003704 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f001 f85f 	bl	80047c0 <I2C_Slave_AF>
 8003702:	e016      	b.n	8003732 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800370c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003710:	f043 0304 	orr.w	r3, r3, #4
 8003714:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003716:	7efb      	ldrb	r3, [r7, #27]
 8003718:	2b10      	cmp	r3, #16
 800371a:	d002      	beq.n	8003722 <HAL_I2C_ER_IRQHandler+0xf4>
 800371c:	7efb      	ldrb	r3, [r7, #27]
 800371e:	2b40      	cmp	r3, #64	; 0x40
 8003720:	d107      	bne.n	8003732 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003730:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003732:	6a3b      	ldr	r3, [r7, #32]
 8003734:	0adb      	lsrs	r3, r3, #11
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00e      	beq.n	800375c <HAL_I2C_ER_IRQHandler+0x12e>
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	0a1b      	lsrs	r3, r3, #8
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b00      	cmp	r3, #0
 8003748:	d008      	beq.n	800375c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800374a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374c:	f043 0308 	orr.w	r3, r3, #8
 8003750:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800375a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800375c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375e:	2b00      	cmp	r3, #0
 8003760:	d008      	beq.n	8003774 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003768:	431a      	orrs	r2, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f001 f896 	bl	80048a0 <I2C_ITError>
  }
}
 8003774:	bf00      	nop
 8003776:	3728      	adds	r7, #40	; 0x28
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80037c0:	bf00      	nop
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	460b      	mov	r3, r1
 80037d6:	70fb      	strb	r3, [r7, #3]
 80037d8:	4613      	mov	r3, r2
 80037da:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80037dc:	bf00      	nop
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003804:	bf00      	nop
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003818:	bf00      	nop
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800385a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003862:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003868:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800386e:	2b00      	cmp	r3, #0
 8003870:	d150      	bne.n	8003914 <I2C_MasterTransmit_TXE+0xc8>
 8003872:	7bfb      	ldrb	r3, [r7, #15]
 8003874:	2b21      	cmp	r3, #33	; 0x21
 8003876:	d14d      	bne.n	8003914 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	2b08      	cmp	r3, #8
 800387c:	d01d      	beq.n	80038ba <I2C_MasterTransmit_TXE+0x6e>
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	2b20      	cmp	r3, #32
 8003882:	d01a      	beq.n	80038ba <I2C_MasterTransmit_TXE+0x6e>
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800388a:	d016      	beq.n	80038ba <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	685a      	ldr	r2, [r3, #4]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800389a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2211      	movs	r2, #17
 80038a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2220      	movs	r2, #32
 80038ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f7ff ff62 	bl	800377c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80038b8:	e060      	b.n	800397c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	685a      	ldr	r2, [r3, #4]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80038c8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038d8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2220      	movs	r2, #32
 80038e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	2b40      	cmp	r3, #64	; 0x40
 80038f2:	d107      	bne.n	8003904 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f7ff ff7d 	bl	80037fc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003902:	e03b      	b.n	800397c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f7ff ff35 	bl	800377c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003912:	e033      	b.n	800397c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003914:	7bfb      	ldrb	r3, [r7, #15]
 8003916:	2b21      	cmp	r3, #33	; 0x21
 8003918:	d005      	beq.n	8003926 <I2C_MasterTransmit_TXE+0xda>
 800391a:	7bbb      	ldrb	r3, [r7, #14]
 800391c:	2b40      	cmp	r3, #64	; 0x40
 800391e:	d12d      	bne.n	800397c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003920:	7bfb      	ldrb	r3, [r7, #15]
 8003922:	2b22      	cmp	r3, #34	; 0x22
 8003924:	d12a      	bne.n	800397c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800392a:	b29b      	uxth	r3, r3
 800392c:	2b00      	cmp	r3, #0
 800392e:	d108      	bne.n	8003942 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	685a      	ldr	r2, [r3, #4]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800393e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003940:	e01c      	b.n	800397c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b40      	cmp	r3, #64	; 0x40
 800394c:	d103      	bne.n	8003956 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 f88e 	bl	8003a70 <I2C_MemoryTransmit_TXE_BTF>
}
 8003954:	e012      	b.n	800397c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395a:	781a      	ldrb	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003966:	1c5a      	adds	r2, r3, #1
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003970:	b29b      	uxth	r3, r3
 8003972:	3b01      	subs	r3, #1
 8003974:	b29a      	uxth	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800397a:	e7ff      	b.n	800397c <I2C_MasterTransmit_TXE+0x130>
 800397c:	bf00      	nop
 800397e:	3710      	adds	r7, #16
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003990:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b21      	cmp	r3, #33	; 0x21
 800399c:	d164      	bne.n	8003a68 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d012      	beq.n	80039ce <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ac:	781a      	ldrb	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b8:	1c5a      	adds	r2, r3, #1
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	3b01      	subs	r3, #1
 80039c6:	b29a      	uxth	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80039cc:	e04c      	b.n	8003a68 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2b08      	cmp	r3, #8
 80039d2:	d01d      	beq.n	8003a10 <I2C_MasterTransmit_BTF+0x8c>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2b20      	cmp	r3, #32
 80039d8:	d01a      	beq.n	8003a10 <I2C_MasterTransmit_BTF+0x8c>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80039e0:	d016      	beq.n	8003a10 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	685a      	ldr	r2, [r3, #4]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80039f0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2211      	movs	r2, #17
 80039f6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2220      	movs	r2, #32
 8003a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f7ff feb7 	bl	800377c <HAL_I2C_MasterTxCpltCallback>
}
 8003a0e:	e02b      	b.n	8003a68 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	685a      	ldr	r2, [r3, #4]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a1e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a2e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2220      	movs	r2, #32
 8003a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2b40      	cmp	r3, #64	; 0x40
 8003a48:	d107      	bne.n	8003a5a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f7ff fed2 	bl	80037fc <HAL_I2C_MemTxCpltCallback>
}
 8003a58:	e006      	b.n	8003a68 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f7ff fe8a 	bl	800377c <HAL_I2C_MasterTxCpltCallback>
}
 8003a68:	bf00      	nop
 8003a6a:	3710      	adds	r7, #16
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a7e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d11d      	bne.n	8003ac4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d10b      	bne.n	8003aa8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a94:	b2da      	uxtb	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aa0:	1c9a      	adds	r2, r3, #2
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003aa6:	e073      	b.n	8003b90 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	121b      	asrs	r3, r3, #8
 8003ab0:	b2da      	uxtb	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003abc:	1c5a      	adds	r2, r3, #1
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003ac2:	e065      	b.n	8003b90 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d10b      	bne.n	8003ae4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ad0:	b2da      	uxtb	r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003adc:	1c5a      	adds	r2, r3, #1
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003ae2:	e055      	b.n	8003b90 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d151      	bne.n	8003b90 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003aec:	7bfb      	ldrb	r3, [r7, #15]
 8003aee:	2b22      	cmp	r3, #34	; 0x22
 8003af0:	d10d      	bne.n	8003b0e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b00:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b06:	1c5a      	adds	r2, r3, #1
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003b0c:	e040      	b.n	8003b90 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d015      	beq.n	8003b44 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003b18:	7bfb      	ldrb	r3, [r7, #15]
 8003b1a:	2b21      	cmp	r3, #33	; 0x21
 8003b1c:	d112      	bne.n	8003b44 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b22:	781a      	ldrb	r2, [r3, #0]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2e:	1c5a      	adds	r2, r3, #1
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003b42:	e025      	b.n	8003b90 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d120      	bne.n	8003b90 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003b4e:	7bfb      	ldrb	r3, [r7, #15]
 8003b50:	2b21      	cmp	r3, #33	; 0x21
 8003b52:	d11d      	bne.n	8003b90 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	685a      	ldr	r2, [r3, #4]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b62:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b72:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2220      	movs	r2, #32
 8003b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f7ff fe36 	bl	80037fc <HAL_I2C_MemTxCpltCallback>
}
 8003b90:	bf00      	nop
 8003b92:	3710      	adds	r7, #16
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	2b22      	cmp	r3, #34	; 0x22
 8003baa:	f040 80a2 	bne.w	8003cf2 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2b03      	cmp	r3, #3
 8003bba:	d921      	bls.n	8003c00 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	691a      	ldr	r2, [r3, #16]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc6:	b2d2      	uxtb	r2, r2
 8003bc8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bce:	1c5a      	adds	r2, r3, #1
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	2b03      	cmp	r3, #3
 8003bea:	f040 8082 	bne.w	8003cf2 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	685a      	ldr	r2, [r3, #4]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bfc:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8003bfe:	e078      	b.n	8003cf2 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d074      	beq.n	8003cf2 <I2C_MasterReceive_RXNE+0x15a>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d002      	beq.n	8003c14 <I2C_MasterReceive_RXNE+0x7c>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d16e      	bne.n	8003cf2 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f001 fb5b 	bl	80052d0 <I2C_WaitOnSTOPRequestThroughIT>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d142      	bne.n	8003ca6 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c2e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	685a      	ldr	r2, [r3, #4]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c3e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	691a      	ldr	r2, [r3, #16]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4a:	b2d2      	uxtb	r2, r2
 8003c4c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c52:	1c5a      	adds	r2, r3, #1
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2220      	movs	r2, #32
 8003c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b40      	cmp	r3, #64	; 0x40
 8003c78:	d10a      	bne.n	8003c90 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f7ff fdc1 	bl	8003810 <HAL_I2C_MemRxCpltCallback>
}
 8003c8e:	e030      	b.n	8003cf2 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2212      	movs	r2, #18
 8003c9c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f7ff fd76 	bl	8003790 <HAL_I2C_MasterRxCpltCallback>
}
 8003ca4:	e025      	b.n	8003cf2 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	685a      	ldr	r2, [r3, #4]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003cb4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	691a      	ldr	r2, [r3, #16]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc0:	b2d2      	uxtb	r2, r2
 8003cc2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc8:	1c5a      	adds	r2, r3, #1
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	b29a      	uxth	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2220      	movs	r2, #32
 8003ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f7ff fd99 	bl	8003824 <HAL_I2C_ErrorCallback>
}
 8003cf2:	bf00      	nop
 8003cf4:	3710      	adds	r7, #16
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b084      	sub	sp, #16
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d06:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	2b04      	cmp	r3, #4
 8003d10:	d11b      	bne.n	8003d4a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	685a      	ldr	r2, [r3, #4]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d20:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	691a      	ldr	r2, [r3, #16]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2c:	b2d2      	uxtb	r2, r2
 8003d2e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d34:	1c5a      	adds	r2, r3, #1
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	3b01      	subs	r3, #1
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003d48:	e0bd      	b.n	8003ec6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	2b03      	cmp	r3, #3
 8003d52:	d129      	bne.n	8003da8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	685a      	ldr	r2, [r3, #4]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d62:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2b04      	cmp	r3, #4
 8003d68:	d00a      	beq.n	8003d80 <I2C_MasterReceive_BTF+0x86>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d007      	beq.n	8003d80 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d7e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	691a      	ldr	r2, [r3, #16]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8a:	b2d2      	uxtb	r2, r2
 8003d8c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d92:	1c5a      	adds	r2, r3, #1
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	b29a      	uxth	r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003da6:	e08e      	b.n	8003ec6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d176      	bne.n	8003ea0 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d002      	beq.n	8003dbe <I2C_MasterReceive_BTF+0xc4>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2b10      	cmp	r3, #16
 8003dbc:	d108      	bne.n	8003dd0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dcc:	601a      	str	r2, [r3, #0]
 8003dce:	e019      	b.n	8003e04 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2b04      	cmp	r3, #4
 8003dd4:	d002      	beq.n	8003ddc <I2C_MasterReceive_BTF+0xe2>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d108      	bne.n	8003dee <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003dea:	601a      	str	r2, [r3, #0]
 8003dec:	e00a      	b.n	8003e04 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2b10      	cmp	r3, #16
 8003df2:	d007      	beq.n	8003e04 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e02:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	691a      	ldr	r2, [r3, #16]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0e:	b2d2      	uxtb	r2, r2
 8003e10:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e16:	1c5a      	adds	r2, r3, #1
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	3b01      	subs	r3, #1
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	691a      	ldr	r2, [r3, #16]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e34:	b2d2      	uxtb	r2, r2
 8003e36:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3c:	1c5a      	adds	r2, r3, #1
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	685a      	ldr	r2, [r3, #4]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003e5e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2220      	movs	r2, #32
 8003e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	2b40      	cmp	r3, #64	; 0x40
 8003e72:	d10a      	bne.n	8003e8a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f7ff fcc4 	bl	8003810 <HAL_I2C_MemRxCpltCallback>
}
 8003e88:	e01d      	b.n	8003ec6 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2212      	movs	r2, #18
 8003e96:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f7ff fc79 	bl	8003790 <HAL_I2C_MasterRxCpltCallback>
}
 8003e9e:	e012      	b.n	8003ec6 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	691a      	ldr	r2, [r3, #16]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eaa:	b2d2      	uxtb	r2, r2
 8003eac:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb2:	1c5a      	adds	r2, r3, #1
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003ec6:	bf00      	nop
 8003ec8:	3710      	adds	r7, #16
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b083      	sub	sp, #12
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b40      	cmp	r3, #64	; 0x40
 8003ee0:	d117      	bne.n	8003f12 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d109      	bne.n	8003efe <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003efa:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003efc:	e067      	b.n	8003fce <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	f043 0301 	orr.w	r3, r3, #1
 8003f08:	b2da      	uxtb	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	611a      	str	r2, [r3, #16]
}
 8003f10:	e05d      	b.n	8003fce <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f1a:	d133      	bne.n	8003f84 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	2b21      	cmp	r3, #33	; 0x21
 8003f26:	d109      	bne.n	8003f3c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	461a      	mov	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f38:	611a      	str	r2, [r3, #16]
 8003f3a:	e008      	b.n	8003f4e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	f043 0301 	orr.w	r3, r3, #1
 8003f46:	b2da      	uxtb	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d004      	beq.n	8003f60 <I2C_Master_SB+0x92>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d108      	bne.n	8003f72 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d032      	beq.n	8003fce <I2C_Master_SB+0x100>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d02d      	beq.n	8003fce <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	685a      	ldr	r2, [r3, #4]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f80:	605a      	str	r2, [r3, #4]
}
 8003f82:	e024      	b.n	8003fce <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10e      	bne.n	8003faa <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	11db      	asrs	r3, r3, #7
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	f003 0306 	and.w	r3, r3, #6
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	f063 030f 	orn	r3, r3, #15
 8003fa0:	b2da      	uxtb	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	611a      	str	r2, [r3, #16]
}
 8003fa8:	e011      	b.n	8003fce <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d10d      	bne.n	8003fce <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	11db      	asrs	r3, r3, #7
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	f003 0306 	and.w	r3, r3, #6
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	f063 030e 	orn	r3, r3, #14
 8003fc6:	b2da      	uxtb	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	611a      	str	r2, [r3, #16]
}
 8003fce:	bf00      	nop
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr

08003fda <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003fda:	b480      	push	{r7}
 8003fdc:	b083      	sub	sp, #12
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fe6:	b2da      	uxtb	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d004      	beq.n	8004000 <I2C_Master_ADD10+0x26>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d108      	bne.n	8004012 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00c      	beq.n	8004022 <I2C_Master_ADD10+0x48>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800400c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800400e:	2b00      	cmp	r3, #0
 8004010:	d007      	beq.n	8004022 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	685a      	ldr	r2, [r3, #4]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004020:	605a      	str	r2, [r3, #4]
  }
}
 8004022:	bf00      	nop
 8004024:	370c      	adds	r7, #12
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr

0800402e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800402e:	b480      	push	{r7}
 8004030:	b091      	sub	sp, #68	; 0x44
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800403c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004044:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004052:	b2db      	uxtb	r3, r3
 8004054:	2b22      	cmp	r3, #34	; 0x22
 8004056:	f040 8169 	bne.w	800432c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10f      	bne.n	8004082 <I2C_Master_ADDR+0x54>
 8004062:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004066:	2b40      	cmp	r3, #64	; 0x40
 8004068:	d10b      	bne.n	8004082 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800406a:	2300      	movs	r3, #0
 800406c:	633b      	str	r3, [r7, #48]	; 0x30
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	695b      	ldr	r3, [r3, #20]
 8004074:	633b      	str	r3, [r7, #48]	; 0x30
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	633b      	str	r3, [r7, #48]	; 0x30
 800407e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004080:	e160      	b.n	8004344 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004086:	2b00      	cmp	r3, #0
 8004088:	d11d      	bne.n	80040c6 <I2C_Master_ADDR+0x98>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004092:	d118      	bne.n	80040c6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004094:	2300      	movs	r3, #0
 8004096:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040b8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040be:	1c5a      	adds	r2, r3, #1
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	651a      	str	r2, [r3, #80]	; 0x50
 80040c4:	e13e      	b.n	8004344 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d113      	bne.n	80040f8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040d0:	2300      	movs	r3, #0
 80040d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	62bb      	str	r3, [r7, #40]	; 0x28
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80040e4:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040f4:	601a      	str	r2, [r3, #0]
 80040f6:	e115      	b.n	8004324 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	2b01      	cmp	r3, #1
 8004100:	f040 808a 	bne.w	8004218 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004106:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800410a:	d137      	bne.n	800417c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800411a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004126:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800412a:	d113      	bne.n	8004154 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800413a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800413c:	2300      	movs	r3, #0
 800413e:	627b      	str	r3, [r7, #36]	; 0x24
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	627b      	str	r3, [r7, #36]	; 0x24
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	627b      	str	r3, [r7, #36]	; 0x24
 8004150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004152:	e0e7      	b.n	8004324 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004154:	2300      	movs	r3, #0
 8004156:	623b      	str	r3, [r7, #32]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	695b      	ldr	r3, [r3, #20]
 800415e:	623b      	str	r3, [r7, #32]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	623b      	str	r3, [r7, #32]
 8004168:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004178:	601a      	str	r2, [r3, #0]
 800417a:	e0d3      	b.n	8004324 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800417c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800417e:	2b08      	cmp	r3, #8
 8004180:	d02e      	beq.n	80041e0 <I2C_Master_ADDR+0x1b2>
 8004182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004184:	2b20      	cmp	r3, #32
 8004186:	d02b      	beq.n	80041e0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800418a:	2b12      	cmp	r3, #18
 800418c:	d102      	bne.n	8004194 <I2C_Master_ADDR+0x166>
 800418e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004190:	2b01      	cmp	r3, #1
 8004192:	d125      	bne.n	80041e0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004196:	2b04      	cmp	r3, #4
 8004198:	d00e      	beq.n	80041b8 <I2C_Master_ADDR+0x18a>
 800419a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800419c:	2b02      	cmp	r3, #2
 800419e:	d00b      	beq.n	80041b8 <I2C_Master_ADDR+0x18a>
 80041a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a2:	2b10      	cmp	r3, #16
 80041a4:	d008      	beq.n	80041b8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041b4:	601a      	str	r2, [r3, #0]
 80041b6:	e007      	b.n	80041c8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041c6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041c8:	2300      	movs	r3, #0
 80041ca:	61fb      	str	r3, [r7, #28]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	61fb      	str	r3, [r7, #28]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	61fb      	str	r3, [r7, #28]
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	e0a1      	b.n	8004324 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041ee:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041f0:	2300      	movs	r3, #0
 80041f2:	61bb      	str	r3, [r7, #24]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	61bb      	str	r3, [r7, #24]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	61bb      	str	r3, [r7, #24]
 8004204:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004214:	601a      	str	r2, [r3, #0]
 8004216:	e085      	b.n	8004324 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800421c:	b29b      	uxth	r3, r3
 800421e:	2b02      	cmp	r3, #2
 8004220:	d14d      	bne.n	80042be <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004224:	2b04      	cmp	r3, #4
 8004226:	d016      	beq.n	8004256 <I2C_Master_ADDR+0x228>
 8004228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800422a:	2b02      	cmp	r3, #2
 800422c:	d013      	beq.n	8004256 <I2C_Master_ADDR+0x228>
 800422e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004230:	2b10      	cmp	r3, #16
 8004232:	d010      	beq.n	8004256 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004242:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004252:	601a      	str	r2, [r3, #0]
 8004254:	e007      	b.n	8004266 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004264:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004270:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004274:	d117      	bne.n	80042a6 <I2C_Master_ADDR+0x278>
 8004276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004278:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800427c:	d00b      	beq.n	8004296 <I2C_Master_ADDR+0x268>
 800427e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004280:	2b01      	cmp	r3, #1
 8004282:	d008      	beq.n	8004296 <I2C_Master_ADDR+0x268>
 8004284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004286:	2b08      	cmp	r3, #8
 8004288:	d005      	beq.n	8004296 <I2C_Master_ADDR+0x268>
 800428a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800428c:	2b10      	cmp	r3, #16
 800428e:	d002      	beq.n	8004296 <I2C_Master_ADDR+0x268>
 8004290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004292:	2b20      	cmp	r3, #32
 8004294:	d107      	bne.n	80042a6 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	685a      	ldr	r2, [r3, #4]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80042a4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042a6:	2300      	movs	r3, #0
 80042a8:	617b      	str	r3, [r7, #20]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	695b      	ldr	r3, [r3, #20]
 80042b0:	617b      	str	r3, [r7, #20]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	617b      	str	r3, [r7, #20]
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	e032      	b.n	8004324 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042cc:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042dc:	d117      	bne.n	800430e <I2C_Master_ADDR+0x2e0>
 80042de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042e4:	d00b      	beq.n	80042fe <I2C_Master_ADDR+0x2d0>
 80042e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d008      	beq.n	80042fe <I2C_Master_ADDR+0x2d0>
 80042ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ee:	2b08      	cmp	r3, #8
 80042f0:	d005      	beq.n	80042fe <I2C_Master_ADDR+0x2d0>
 80042f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f4:	2b10      	cmp	r3, #16
 80042f6:	d002      	beq.n	80042fe <I2C_Master_ADDR+0x2d0>
 80042f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042fa:	2b20      	cmp	r3, #32
 80042fc:	d107      	bne.n	800430e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	685a      	ldr	r2, [r3, #4]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800430c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800430e:	2300      	movs	r3, #0
 8004310:	613b      	str	r3, [r7, #16]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	695b      	ldr	r3, [r3, #20]
 8004318:	613b      	str	r3, [r7, #16]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	613b      	str	r3, [r7, #16]
 8004322:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800432a:	e00b      	b.n	8004344 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800432c:	2300      	movs	r3, #0
 800432e:	60fb      	str	r3, [r7, #12]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	60fb      	str	r3, [r7, #12]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	60fb      	str	r3, [r7, #12]
 8004340:	68fb      	ldr	r3, [r7, #12]
}
 8004342:	e7ff      	b.n	8004344 <I2C_Master_ADDR+0x316>
 8004344:	bf00      	nop
 8004346:	3744      	adds	r7, #68	; 0x44
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800435e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004364:	b29b      	uxth	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d02b      	beq.n	80043c2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436e:	781a      	ldrb	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437a:	1c5a      	adds	r2, r3, #1
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004384:	b29b      	uxth	r3, r3
 8004386:	3b01      	subs	r3, #1
 8004388:	b29a      	uxth	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004392:	b29b      	uxth	r3, r3
 8004394:	2b00      	cmp	r3, #0
 8004396:	d114      	bne.n	80043c2 <I2C_SlaveTransmit_TXE+0x72>
 8004398:	7bfb      	ldrb	r3, [r7, #15]
 800439a:	2b29      	cmp	r3, #41	; 0x29
 800439c:	d111      	bne.n	80043c2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	685a      	ldr	r2, [r3, #4]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043ac:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2221      	movs	r2, #33	; 0x21
 80043b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2228      	movs	r2, #40	; 0x28
 80043b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f7ff f9f1 	bl	80037a4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80043c2:	bf00      	nop
 80043c4:	3710      	adds	r7, #16
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80043ca:	b480      	push	{r7}
 80043cc:	b083      	sub	sp, #12
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d011      	beq.n	8004400 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e0:	781a      	ldrb	r2, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ec:	1c5a      	adds	r2, r3, #1
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	3b01      	subs	r3, #1
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004400:	bf00      	nop
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800441a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004420:	b29b      	uxth	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d02c      	beq.n	8004480 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	691a      	ldr	r2, [r3, #16]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004430:	b2d2      	uxtb	r2, r2
 8004432:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004438:	1c5a      	adds	r2, r3, #1
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004442:	b29b      	uxth	r3, r3
 8004444:	3b01      	subs	r3, #1
 8004446:	b29a      	uxth	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004450:	b29b      	uxth	r3, r3
 8004452:	2b00      	cmp	r3, #0
 8004454:	d114      	bne.n	8004480 <I2C_SlaveReceive_RXNE+0x74>
 8004456:	7bfb      	ldrb	r3, [r7, #15]
 8004458:	2b2a      	cmp	r3, #42	; 0x2a
 800445a:	d111      	bne.n	8004480 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685a      	ldr	r2, [r3, #4]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800446a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2222      	movs	r2, #34	; 0x22
 8004470:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2228      	movs	r2, #40	; 0x28
 8004476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f7ff f99c 	bl	80037b8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004480:	bf00      	nop
 8004482:	3710      	adds	r7, #16
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004494:	b29b      	uxth	r3, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d012      	beq.n	80044c0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	691a      	ldr	r2, [r3, #16]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a4:	b2d2      	uxtb	r2, r2
 80044a6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ac:	1c5a      	adds	r2, r3, #1
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	3b01      	subs	r3, #1
 80044ba:	b29a      	uxth	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80044d6:	2300      	movs	r3, #0
 80044d8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80044e6:	2b28      	cmp	r3, #40	; 0x28
 80044e8:	d127      	bne.n	800453a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	685a      	ldr	r2, [r3, #4]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044f8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	089b      	lsrs	r3, r3, #2
 80044fe:	f003 0301 	and.w	r3, r3, #1
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004506:	2301      	movs	r3, #1
 8004508:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	09db      	lsrs	r3, r3, #7
 800450e:	f003 0301 	and.w	r3, r3, #1
 8004512:	2b00      	cmp	r3, #0
 8004514:	d103      	bne.n	800451e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	81bb      	strh	r3, [r7, #12]
 800451c:	e002      	b.n	8004524 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800452c:	89ba      	ldrh	r2, [r7, #12]
 800452e:	7bfb      	ldrb	r3, [r7, #15]
 8004530:	4619      	mov	r1, r3
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f7ff f94a 	bl	80037cc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004538:	e00e      	b.n	8004558 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800453a:	2300      	movs	r3, #0
 800453c:	60bb      	str	r3, [r7, #8]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	695b      	ldr	r3, [r3, #20]
 8004544:	60bb      	str	r3, [r7, #8]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	699b      	ldr	r3, [r3, #24]
 800454c:	60bb      	str	r3, [r7, #8]
 800454e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004558:	bf00      	nop
 800455a:	3710      	adds	r7, #16
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800456e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	685a      	ldr	r2, [r3, #4]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800457e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004580:	2300      	movs	r3, #0
 8004582:	60bb      	str	r3, [r7, #8]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	60bb      	str	r3, [r7, #8]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f042 0201 	orr.w	r2, r2, #1
 800459a:	601a      	str	r2, [r3, #0]
 800459c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045ac:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045bc:	d172      	bne.n	80046a4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80045be:	7bfb      	ldrb	r3, [r7, #15]
 80045c0:	2b22      	cmp	r3, #34	; 0x22
 80045c2:	d002      	beq.n	80045ca <I2C_Slave_STOPF+0x6a>
 80045c4:	7bfb      	ldrb	r3, [r7, #15]
 80045c6:	2b2a      	cmp	r3, #42	; 0x2a
 80045c8:	d135      	bne.n	8004636 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045dc:	b29b      	uxth	r3, r3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d005      	beq.n	80045ee <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e6:	f043 0204 	orr.w	r2, r3, #4
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	685a      	ldr	r2, [r3, #4]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045fc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004602:	4618      	mov	r0, r3
 8004604:	f7fd ff58 	bl	80024b8 <HAL_DMA_GetState>
 8004608:	4603      	mov	r3, r0
 800460a:	2b01      	cmp	r3, #1
 800460c:	d049      	beq.n	80046a2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004612:	4a69      	ldr	r2, [pc, #420]	; (80047b8 <I2C_Slave_STOPF+0x258>)
 8004614:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461a:	4618      	mov	r0, r3
 800461c:	f7fd ff2a 	bl	8002474 <HAL_DMA_Abort_IT>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d03d      	beq.n	80046a2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004630:	4610      	mov	r0, r2
 8004632:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004634:	e035      	b.n	80046a2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	b29a      	uxth	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004648:	b29b      	uxth	r3, r3
 800464a:	2b00      	cmp	r3, #0
 800464c:	d005      	beq.n	800465a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004652:	f043 0204 	orr.w	r2, r3, #4
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	685a      	ldr	r2, [r3, #4]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004668:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800466e:	4618      	mov	r0, r3
 8004670:	f7fd ff22 	bl	80024b8 <HAL_DMA_GetState>
 8004674:	4603      	mov	r3, r0
 8004676:	2b01      	cmp	r3, #1
 8004678:	d014      	beq.n	80046a4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800467e:	4a4e      	ldr	r2, [pc, #312]	; (80047b8 <I2C_Slave_STOPF+0x258>)
 8004680:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004686:	4618      	mov	r0, r3
 8004688:	f7fd fef4 	bl	8002474 <HAL_DMA_Abort_IT>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d008      	beq.n	80046a4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004696:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800469c:	4610      	mov	r0, r2
 800469e:	4798      	blx	r3
 80046a0:	e000      	b.n	80046a4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80046a2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d03e      	beq.n	800472c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	695b      	ldr	r3, [r3, #20]
 80046b4:	f003 0304 	and.w	r3, r3, #4
 80046b8:	2b04      	cmp	r3, #4
 80046ba:	d112      	bne.n	80046e2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	691a      	ldr	r2, [r3, #16]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c6:	b2d2      	uxtb	r2, r2
 80046c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ce:	1c5a      	adds	r2, r3, #1
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046d8:	b29b      	uxth	r3, r3
 80046da:	3b01      	subs	r3, #1
 80046dc:	b29a      	uxth	r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	695b      	ldr	r3, [r3, #20]
 80046e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ec:	2b40      	cmp	r3, #64	; 0x40
 80046ee:	d112      	bne.n	8004716 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	691a      	ldr	r2, [r3, #16]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fa:	b2d2      	uxtb	r2, r2
 80046fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004702:	1c5a      	adds	r2, r3, #1
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800470c:	b29b      	uxth	r3, r3
 800470e:	3b01      	subs	r3, #1
 8004710:	b29a      	uxth	r2, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800471a:	b29b      	uxth	r3, r3
 800471c:	2b00      	cmp	r3, #0
 800471e:	d005      	beq.n	800472c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004724:	f043 0204 	orr.w	r2, r3, #4
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004730:	2b00      	cmp	r3, #0
 8004732:	d003      	beq.n	800473c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f000 f8b3 	bl	80048a0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800473a:	e039      	b.n	80047b0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800473c:	7bfb      	ldrb	r3, [r7, #15]
 800473e:	2b2a      	cmp	r3, #42	; 0x2a
 8004740:	d109      	bne.n	8004756 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2228      	movs	r2, #40	; 0x28
 800474c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f7ff f831 	bl	80037b8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2b28      	cmp	r3, #40	; 0x28
 8004760:	d111      	bne.n	8004786 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a15      	ldr	r2, [pc, #84]	; (80047bc <I2C_Slave_STOPF+0x25c>)
 8004766:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2220      	movs	r2, #32
 8004772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f7ff f832 	bl	80037e8 <HAL_I2C_ListenCpltCallback>
}
 8004784:	e014      	b.n	80047b0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478a:	2b22      	cmp	r3, #34	; 0x22
 800478c:	d002      	beq.n	8004794 <I2C_Slave_STOPF+0x234>
 800478e:	7bfb      	ldrb	r3, [r7, #15]
 8004790:	2b22      	cmp	r3, #34	; 0x22
 8004792:	d10d      	bne.n	80047b0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2220      	movs	r2, #32
 800479e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f7ff f804 	bl	80037b8 <HAL_I2C_SlaveRxCpltCallback>
}
 80047b0:	bf00      	nop
 80047b2:	3710      	adds	r7, #16
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	08004ed1 	.word	0x08004ed1
 80047bc:	ffff0000 	.word	0xffff0000

080047c0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ce:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	2b08      	cmp	r3, #8
 80047da:	d002      	beq.n	80047e2 <I2C_Slave_AF+0x22>
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	2b20      	cmp	r3, #32
 80047e0:	d129      	bne.n	8004836 <I2C_Slave_AF+0x76>
 80047e2:	7bfb      	ldrb	r3, [r7, #15]
 80047e4:	2b28      	cmp	r3, #40	; 0x28
 80047e6:	d126      	bne.n	8004836 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a2c      	ldr	r2, [pc, #176]	; (800489c <I2C_Slave_AF+0xdc>)
 80047ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	685a      	ldr	r2, [r3, #4]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80047fc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004806:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004816:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2220      	movs	r2, #32
 8004822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f7fe ffda 	bl	80037e8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004834:	e02e      	b.n	8004894 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004836:	7bfb      	ldrb	r3, [r7, #15]
 8004838:	2b21      	cmp	r3, #33	; 0x21
 800483a:	d126      	bne.n	800488a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a17      	ldr	r2, [pc, #92]	; (800489c <I2C_Slave_AF+0xdc>)
 8004840:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2221      	movs	r2, #33	; 0x21
 8004846:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2220      	movs	r2, #32
 800484c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	685a      	ldr	r2, [r3, #4]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004866:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004870:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004880:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f7fe ff8e 	bl	80037a4 <HAL_I2C_SlaveTxCpltCallback>
}
 8004888:	e004      	b.n	8004894 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004892:	615a      	str	r2, [r3, #20]
}
 8004894:	bf00      	nop
 8004896:	3710      	adds	r7, #16
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}
 800489c:	ffff0000 	.word	0xffff0000

080048a0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ae:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048b6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80048b8:	7bbb      	ldrb	r3, [r7, #14]
 80048ba:	2b10      	cmp	r3, #16
 80048bc:	d002      	beq.n	80048c4 <I2C_ITError+0x24>
 80048be:	7bbb      	ldrb	r3, [r7, #14]
 80048c0:	2b40      	cmp	r3, #64	; 0x40
 80048c2:	d10a      	bne.n	80048da <I2C_ITError+0x3a>
 80048c4:	7bfb      	ldrb	r3, [r7, #15]
 80048c6:	2b22      	cmp	r3, #34	; 0x22
 80048c8:	d107      	bne.n	80048da <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048d8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80048da:	7bfb      	ldrb	r3, [r7, #15]
 80048dc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80048e0:	2b28      	cmp	r3, #40	; 0x28
 80048e2:	d107      	bne.n	80048f4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2228      	movs	r2, #40	; 0x28
 80048ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80048f2:	e015      	b.n	8004920 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004902:	d00a      	beq.n	800491a <I2C_ITError+0x7a>
 8004904:	7bfb      	ldrb	r3, [r7, #15]
 8004906:	2b60      	cmp	r3, #96	; 0x60
 8004908:	d007      	beq.n	800491a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2220      	movs	r2, #32
 800490e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800492a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800492e:	d162      	bne.n	80049f6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	685a      	ldr	r2, [r3, #4]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800493e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004944:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2b01      	cmp	r3, #1
 800494c:	d020      	beq.n	8004990 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004952:	4a6a      	ldr	r2, [pc, #424]	; (8004afc <I2C_ITError+0x25c>)
 8004954:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800495a:	4618      	mov	r0, r3
 800495c:	f7fd fd8a 	bl	8002474 <HAL_DMA_Abort_IT>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	f000 8089 	beq.w	8004a7a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f022 0201 	bic.w	r2, r2, #1
 8004976:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2220      	movs	r2, #32
 800497c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800498a:	4610      	mov	r0, r2
 800498c:	4798      	blx	r3
 800498e:	e074      	b.n	8004a7a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004994:	4a59      	ldr	r2, [pc, #356]	; (8004afc <I2C_ITError+0x25c>)
 8004996:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499c:	4618      	mov	r0, r3
 800499e:	f7fd fd69 	bl	8002474 <HAL_DMA_Abort_IT>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d068      	beq.n	8004a7a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b2:	2b40      	cmp	r3, #64	; 0x40
 80049b4:	d10b      	bne.n	80049ce <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	691a      	ldr	r2, [r3, #16]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c0:	b2d2      	uxtb	r2, r2
 80049c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c8:	1c5a      	adds	r2, r3, #1
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f022 0201 	bic.w	r2, r2, #1
 80049dc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2220      	movs	r2, #32
 80049e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80049f0:	4610      	mov	r0, r2
 80049f2:	4798      	blx	r3
 80049f4:	e041      	b.n	8004a7a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	2b60      	cmp	r3, #96	; 0x60
 8004a00:	d125      	bne.n	8004a4e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2220      	movs	r2, #32
 8004a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	695b      	ldr	r3, [r3, #20]
 8004a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a1a:	2b40      	cmp	r3, #64	; 0x40
 8004a1c:	d10b      	bne.n	8004a36 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	691a      	ldr	r2, [r3, #16]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a28:	b2d2      	uxtb	r2, r2
 8004a2a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a30:	1c5a      	adds	r2, r3, #1
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f022 0201 	bic.w	r2, r2, #1
 8004a44:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f7fe fef6 	bl	8003838 <HAL_I2C_AbortCpltCallback>
 8004a4c:	e015      	b.n	8004a7a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	695b      	ldr	r3, [r3, #20]
 8004a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a58:	2b40      	cmp	r3, #64	; 0x40
 8004a5a:	d10b      	bne.n	8004a74 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	691a      	ldr	r2, [r3, #16]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a66:	b2d2      	uxtb	r2, r2
 8004a68:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6e:	1c5a      	adds	r2, r3, #1
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f7fe fed5 	bl	8003824 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	f003 0301 	and.w	r3, r3, #1
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d10e      	bne.n	8004aa8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d109      	bne.n	8004aa8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d104      	bne.n	8004aa8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d007      	beq.n	8004ab8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	685a      	ldr	r2, [r3, #4]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ab6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004abe:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac4:	f003 0304 	and.w	r3, r3, #4
 8004ac8:	2b04      	cmp	r3, #4
 8004aca:	d113      	bne.n	8004af4 <I2C_ITError+0x254>
 8004acc:	7bfb      	ldrb	r3, [r7, #15]
 8004ace:	2b28      	cmp	r3, #40	; 0x28
 8004ad0:	d110      	bne.n	8004af4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a0a      	ldr	r2, [pc, #40]	; (8004b00 <I2C_ITError+0x260>)
 8004ad6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f7fe fe7a 	bl	80037e8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004af4:	bf00      	nop
 8004af6:	3710      	adds	r7, #16
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	08004ed1 	.word	0x08004ed1
 8004b00:	ffff0000 	.word	0xffff0000

08004b04 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b088      	sub	sp, #32
 8004b08:	af02      	add	r7, sp, #8
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	607a      	str	r2, [r7, #4]
 8004b0e:	603b      	str	r3, [r7, #0]
 8004b10:	460b      	mov	r3, r1
 8004b12:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b18:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	2b08      	cmp	r3, #8
 8004b1e:	d006      	beq.n	8004b2e <I2C_MasterRequestWrite+0x2a>
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d003      	beq.n	8004b2e <I2C_MasterRequestWrite+0x2a>
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b2c:	d108      	bne.n	8004b40 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b3c:	601a      	str	r2, [r3, #0]
 8004b3e:	e00b      	b.n	8004b58 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b44:	2b12      	cmp	r3, #18
 8004b46:	d107      	bne.n	8004b58 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b56:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	9300      	str	r3, [sp, #0]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b64:	68f8      	ldr	r0, [r7, #12]
 8004b66:	f000 fa5b 	bl	8005020 <I2C_WaitOnFlagUntilTimeout>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00d      	beq.n	8004b8c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b7e:	d103      	bne.n	8004b88 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b86:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	e035      	b.n	8004bf8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b94:	d108      	bne.n	8004ba8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b96:	897b      	ldrh	r3, [r7, #10]
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ba4:	611a      	str	r2, [r3, #16]
 8004ba6:	e01b      	b.n	8004be0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004ba8:	897b      	ldrh	r3, [r7, #10]
 8004baa:	11db      	asrs	r3, r3, #7
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	f003 0306 	and.w	r3, r3, #6
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	f063 030f 	orn	r3, r3, #15
 8004bb8:	b2da      	uxtb	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	490e      	ldr	r1, [pc, #56]	; (8004c00 <I2C_MasterRequestWrite+0xfc>)
 8004bc6:	68f8      	ldr	r0, [r7, #12]
 8004bc8:	f000 fa81 	bl	80050ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d001      	beq.n	8004bd6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e010      	b.n	8004bf8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004bd6:	897b      	ldrh	r3, [r7, #10]
 8004bd8:	b2da      	uxtb	r2, r3
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	4907      	ldr	r1, [pc, #28]	; (8004c04 <I2C_MasterRequestWrite+0x100>)
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f000 fa71 	bl	80050ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d001      	beq.n	8004bf6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e000      	b.n	8004bf8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3718      	adds	r7, #24
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	00010008 	.word	0x00010008
 8004c04:	00010002 	.word	0x00010002

08004c08 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b088      	sub	sp, #32
 8004c0c:	af02      	add	r7, sp, #8
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	607a      	str	r2, [r7, #4]
 8004c12:	603b      	str	r3, [r7, #0]
 8004c14:	460b      	mov	r3, r1
 8004c16:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c2c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	2b08      	cmp	r3, #8
 8004c32:	d006      	beq.n	8004c42 <I2C_MasterRequestRead+0x3a>
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d003      	beq.n	8004c42 <I2C_MasterRequestRead+0x3a>
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c40:	d108      	bne.n	8004c54 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c50:	601a      	str	r2, [r3, #0]
 8004c52:	e00b      	b.n	8004c6c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c58:	2b11      	cmp	r3, #17
 8004c5a:	d107      	bne.n	8004c6c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c6a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	9300      	str	r3, [sp, #0]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	f000 f9d1 	bl	8005020 <I2C_WaitOnFlagUntilTimeout>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d00d      	beq.n	8004ca0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c92:	d103      	bne.n	8004c9c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e079      	b.n	8004d94 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ca8:	d108      	bne.n	8004cbc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004caa:	897b      	ldrh	r3, [r7, #10]
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	f043 0301 	orr.w	r3, r3, #1
 8004cb2:	b2da      	uxtb	r2, r3
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	611a      	str	r2, [r3, #16]
 8004cba:	e05f      	b.n	8004d7c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004cbc:	897b      	ldrh	r3, [r7, #10]
 8004cbe:	11db      	asrs	r3, r3, #7
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	f003 0306 	and.w	r3, r3, #6
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	f063 030f 	orn	r3, r3, #15
 8004ccc:	b2da      	uxtb	r2, r3
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	4930      	ldr	r1, [pc, #192]	; (8004d9c <I2C_MasterRequestRead+0x194>)
 8004cda:	68f8      	ldr	r0, [r7, #12]
 8004cdc:	f000 f9f7 	bl	80050ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d001      	beq.n	8004cea <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e054      	b.n	8004d94 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004cea:	897b      	ldrh	r3, [r7, #10]
 8004cec:	b2da      	uxtb	r2, r3
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	4929      	ldr	r1, [pc, #164]	; (8004da0 <I2C_MasterRequestRead+0x198>)
 8004cfa:	68f8      	ldr	r0, [r7, #12]
 8004cfc:	f000 f9e7 	bl	80050ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d001      	beq.n	8004d0a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e044      	b.n	8004d94 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	613b      	str	r3, [r7, #16]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	695b      	ldr	r3, [r3, #20]
 8004d14:	613b      	str	r3, [r7, #16]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	613b      	str	r3, [r7, #16]
 8004d1e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d2e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	9300      	str	r3, [sp, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	f000 f96f 	bl	8005020 <I2C_WaitOnFlagUntilTimeout>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00d      	beq.n	8004d64 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d56:	d103      	bne.n	8004d60 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d5e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e017      	b.n	8004d94 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004d64:	897b      	ldrh	r3, [r7, #10]
 8004d66:	11db      	asrs	r3, r3, #7
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	f003 0306 	and.w	r3, r3, #6
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	f063 030e 	orn	r3, r3, #14
 8004d74:	b2da      	uxtb	r2, r3
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	4907      	ldr	r1, [pc, #28]	; (8004da0 <I2C_MasterRequestRead+0x198>)
 8004d82:	68f8      	ldr	r0, [r7, #12]
 8004d84:	f000 f9a3 	bl	80050ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d001      	beq.n	8004d92 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e000      	b.n	8004d94 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004d92:	2300      	movs	r3, #0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3718      	adds	r7, #24
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	00010008 	.word	0x00010008
 8004da0:	00010002 	.word	0x00010002

08004da4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b088      	sub	sp, #32
 8004da8:	af02      	add	r7, sp, #8
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	4608      	mov	r0, r1
 8004dae:	4611      	mov	r1, r2
 8004db0:	461a      	mov	r2, r3
 8004db2:	4603      	mov	r3, r0
 8004db4:	817b      	strh	r3, [r7, #10]
 8004db6:	460b      	mov	r3, r1
 8004db8:	813b      	strh	r3, [r7, #8]
 8004dba:	4613      	mov	r3, r2
 8004dbc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004dcc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd0:	9300      	str	r3, [sp, #0]
 8004dd2:	6a3b      	ldr	r3, [r7, #32]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	f000 f920 	bl	8005020 <I2C_WaitOnFlagUntilTimeout>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00d      	beq.n	8004e02 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004df0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004df4:	d103      	bne.n	8004dfe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004dfc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e05f      	b.n	8004ec2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e02:	897b      	ldrh	r3, [r7, #10]
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	461a      	mov	r2, r3
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004e10:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e14:	6a3a      	ldr	r2, [r7, #32]
 8004e16:	492d      	ldr	r1, [pc, #180]	; (8004ecc <I2C_RequestMemoryWrite+0x128>)
 8004e18:	68f8      	ldr	r0, [r7, #12]
 8004e1a:	f000 f958 	bl	80050ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d001      	beq.n	8004e28 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e04c      	b.n	8004ec2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e28:	2300      	movs	r3, #0
 8004e2a:	617b      	str	r3, [r7, #20]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	695b      	ldr	r3, [r3, #20]
 8004e32:	617b      	str	r3, [r7, #20]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	699b      	ldr	r3, [r3, #24]
 8004e3a:	617b      	str	r3, [r7, #20]
 8004e3c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e40:	6a39      	ldr	r1, [r7, #32]
 8004e42:	68f8      	ldr	r0, [r7, #12]
 8004e44:	f000 f9c2 	bl	80051cc <I2C_WaitOnTXEFlagUntilTimeout>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00d      	beq.n	8004e6a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e52:	2b04      	cmp	r3, #4
 8004e54:	d107      	bne.n	8004e66 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e64:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e02b      	b.n	8004ec2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e6a:	88fb      	ldrh	r3, [r7, #6]
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d105      	bne.n	8004e7c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e70:	893b      	ldrh	r3, [r7, #8]
 8004e72:	b2da      	uxtb	r2, r3
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	611a      	str	r2, [r3, #16]
 8004e7a:	e021      	b.n	8004ec0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004e7c:	893b      	ldrh	r3, [r7, #8]
 8004e7e:	0a1b      	lsrs	r3, r3, #8
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	b2da      	uxtb	r2, r3
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e8c:	6a39      	ldr	r1, [r7, #32]
 8004e8e:	68f8      	ldr	r0, [r7, #12]
 8004e90:	f000 f99c 	bl	80051cc <I2C_WaitOnTXEFlagUntilTimeout>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d00d      	beq.n	8004eb6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9e:	2b04      	cmp	r3, #4
 8004ea0:	d107      	bne.n	8004eb2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eb0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e005      	b.n	8004ec2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004eb6:	893b      	ldrh	r3, [r7, #8]
 8004eb8:	b2da      	uxtb	r2, r3
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3718      	adds	r7, #24
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	00010002 	.word	0x00010002

08004ed0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b086      	sub	sp, #24
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ee8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004eea:	4b4b      	ldr	r3, [pc, #300]	; (8005018 <I2C_DMAAbort+0x148>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	08db      	lsrs	r3, r3, #3
 8004ef0:	4a4a      	ldr	r2, [pc, #296]	; (800501c <I2C_DMAAbort+0x14c>)
 8004ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef6:	0a1a      	lsrs	r2, r3, #8
 8004ef8:	4613      	mov	r3, r2
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	4413      	add	r3, r2
 8004efe:	00da      	lsls	r2, r3, #3
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d106      	bne.n	8004f18 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0e:	f043 0220 	orr.w	r2, r3, #32
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004f16:	e00a      	b.n	8004f2e <I2C_DMAAbort+0x5e>
    }
    count--;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f2c:	d0ea      	beq.n	8004f04 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d003      	beq.n	8004f3e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d003      	beq.n	8004f4e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f5c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	2200      	movs	r2, #0
 8004f62:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d003      	beq.n	8004f74 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f70:	2200      	movs	r2, #0
 8004f72:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d003      	beq.n	8004f84 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f80:	2200      	movs	r2, #0
 8004f82:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f022 0201 	bic.w	r2, r2, #1
 8004f92:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	2b60      	cmp	r3, #96	; 0x60
 8004f9e:	d10e      	bne.n	8004fbe <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	2220      	movs	r2, #32
 8004fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004fb6:	6978      	ldr	r0, [r7, #20]
 8004fb8:	f7fe fc3e 	bl	8003838 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004fbc:	e027      	b.n	800500e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004fbe:	7cfb      	ldrb	r3, [r7, #19]
 8004fc0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004fc4:	2b28      	cmp	r3, #40	; 0x28
 8004fc6:	d117      	bne.n	8004ff8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f042 0201 	orr.w	r2, r2, #1
 8004fd6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004fe6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	2200      	movs	r2, #0
 8004fec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	2228      	movs	r2, #40	; 0x28
 8004ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004ff6:	e007      	b.n	8005008 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	2220      	movs	r2, #32
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005008:	6978      	ldr	r0, [r7, #20]
 800500a:	f7fe fc0b 	bl	8003824 <HAL_I2C_ErrorCallback>
}
 800500e:	bf00      	nop
 8005010:	3718      	adds	r7, #24
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	20000010 	.word	0x20000010
 800501c:	14f8b589 	.word	0x14f8b589

08005020 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	603b      	str	r3, [r7, #0]
 800502c:	4613      	mov	r3, r2
 800502e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005030:	e025      	b.n	800507e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005038:	d021      	beq.n	800507e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800503a:	f7fd f899 	bl	8002170 <HAL_GetTick>
 800503e:	4602      	mov	r2, r0
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	1ad3      	subs	r3, r2, r3
 8005044:	683a      	ldr	r2, [r7, #0]
 8005046:	429a      	cmp	r2, r3
 8005048:	d302      	bcc.n	8005050 <I2C_WaitOnFlagUntilTimeout+0x30>
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d116      	bne.n	800507e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2200      	movs	r2, #0
 8005054:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2220      	movs	r2, #32
 800505a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2200      	movs	r2, #0
 8005062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506a:	f043 0220 	orr.w	r2, r3, #32
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e023      	b.n	80050c6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	0c1b      	lsrs	r3, r3, #16
 8005082:	b2db      	uxtb	r3, r3
 8005084:	2b01      	cmp	r3, #1
 8005086:	d10d      	bne.n	80050a4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	695b      	ldr	r3, [r3, #20]
 800508e:	43da      	mvns	r2, r3
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	4013      	ands	r3, r2
 8005094:	b29b      	uxth	r3, r3
 8005096:	2b00      	cmp	r3, #0
 8005098:	bf0c      	ite	eq
 800509a:	2301      	moveq	r3, #1
 800509c:	2300      	movne	r3, #0
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	461a      	mov	r2, r3
 80050a2:	e00c      	b.n	80050be <I2C_WaitOnFlagUntilTimeout+0x9e>
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	43da      	mvns	r2, r3
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	4013      	ands	r3, r2
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	bf0c      	ite	eq
 80050b6:	2301      	moveq	r3, #1
 80050b8:	2300      	movne	r3, #0
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	461a      	mov	r2, r3
 80050be:	79fb      	ldrb	r3, [r7, #7]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d0b6      	beq.n	8005032 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3710      	adds	r7, #16
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}

080050ce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80050ce:	b580      	push	{r7, lr}
 80050d0:	b084      	sub	sp, #16
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	60f8      	str	r0, [r7, #12]
 80050d6:	60b9      	str	r1, [r7, #8]
 80050d8:	607a      	str	r2, [r7, #4]
 80050da:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80050dc:	e051      	b.n	8005182 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	695b      	ldr	r3, [r3, #20]
 80050e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050ec:	d123      	bne.n	8005136 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050fc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005106:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2200      	movs	r2, #0
 800510c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2220      	movs	r2, #32
 8005112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005122:	f043 0204 	orr.w	r2, r3, #4
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e046      	b.n	80051c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800513c:	d021      	beq.n	8005182 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800513e:	f7fd f817 	bl	8002170 <HAL_GetTick>
 8005142:	4602      	mov	r2, r0
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	1ad3      	subs	r3, r2, r3
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	429a      	cmp	r2, r3
 800514c:	d302      	bcc.n	8005154 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d116      	bne.n	8005182 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2200      	movs	r2, #0
 8005158:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2220      	movs	r2, #32
 800515e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2200      	movs	r2, #0
 8005166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516e:	f043 0220 	orr.w	r2, r3, #32
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e020      	b.n	80051c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	0c1b      	lsrs	r3, r3, #16
 8005186:	b2db      	uxtb	r3, r3
 8005188:	2b01      	cmp	r3, #1
 800518a:	d10c      	bne.n	80051a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	695b      	ldr	r3, [r3, #20]
 8005192:	43da      	mvns	r2, r3
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	4013      	ands	r3, r2
 8005198:	b29b      	uxth	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	bf14      	ite	ne
 800519e:	2301      	movne	r3, #1
 80051a0:	2300      	moveq	r3, #0
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	e00b      	b.n	80051be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	699b      	ldr	r3, [r3, #24]
 80051ac:	43da      	mvns	r2, r3
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	4013      	ands	r3, r2
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	bf14      	ite	ne
 80051b8:	2301      	movne	r3, #1
 80051ba:	2300      	moveq	r3, #0
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d18d      	bne.n	80050de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80051c2:	2300      	movs	r3, #0
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3710      	adds	r7, #16
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b084      	sub	sp, #16
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80051d8:	e02d      	b.n	8005236 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80051da:	68f8      	ldr	r0, [r7, #12]
 80051dc:	f000 f900 	bl	80053e0 <I2C_IsAcknowledgeFailed>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d001      	beq.n	80051ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e02d      	b.n	8005246 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f0:	d021      	beq.n	8005236 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051f2:	f7fc ffbd 	bl	8002170 <HAL_GetTick>
 80051f6:	4602      	mov	r2, r0
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	68ba      	ldr	r2, [r7, #8]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d302      	bcc.n	8005208 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d116      	bne.n	8005236 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2200      	movs	r2, #0
 800520c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2220      	movs	r2, #32
 8005212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005222:	f043 0220 	orr.w	r2, r3, #32
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e007      	b.n	8005246 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	695b      	ldr	r3, [r3, #20]
 800523c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005240:	2b80      	cmp	r3, #128	; 0x80
 8005242:	d1ca      	bne.n	80051da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3710      	adds	r7, #16
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800524e:	b580      	push	{r7, lr}
 8005250:	b084      	sub	sp, #16
 8005252:	af00      	add	r7, sp, #0
 8005254:	60f8      	str	r0, [r7, #12]
 8005256:	60b9      	str	r1, [r7, #8]
 8005258:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800525a:	e02d      	b.n	80052b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800525c:	68f8      	ldr	r0, [r7, #12]
 800525e:	f000 f8bf 	bl	80053e0 <I2C_IsAcknowledgeFailed>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d001      	beq.n	800526c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e02d      	b.n	80052c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005272:	d021      	beq.n	80052b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005274:	f7fc ff7c 	bl	8002170 <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	68ba      	ldr	r2, [r7, #8]
 8005280:	429a      	cmp	r2, r3
 8005282:	d302      	bcc.n	800528a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d116      	bne.n	80052b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2220      	movs	r2, #32
 8005294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a4:	f043 0220 	orr.w	r2, r3, #32
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e007      	b.n	80052c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	f003 0304 	and.w	r3, r3, #4
 80052c2:	2b04      	cmp	r3, #4
 80052c4:	d1ca      	bne.n	800525c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3710      	adds	r7, #16
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b085      	sub	sp, #20
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052d8:	2300      	movs	r3, #0
 80052da:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80052dc:	4b13      	ldr	r3, [pc, #76]	; (800532c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	08db      	lsrs	r3, r3, #3
 80052e2:	4a13      	ldr	r2, [pc, #76]	; (8005330 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80052e4:	fba2 2303 	umull	r2, r3, r2, r3
 80052e8:	0a1a      	lsrs	r2, r3, #8
 80052ea:	4613      	mov	r3, r2
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	4413      	add	r3, r2
 80052f0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	3b01      	subs	r3, #1
 80052f6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d107      	bne.n	800530e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005302:	f043 0220 	orr.w	r2, r3, #32
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e008      	b.n	8005320 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005318:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800531c:	d0e9      	beq.n	80052f2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800531e:	2300      	movs	r3, #0
}
 8005320:	4618      	mov	r0, r3
 8005322:	3714      	adds	r7, #20
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr
 800532c:	20000010 	.word	0x20000010
 8005330:	14f8b589 	.word	0x14f8b589

08005334 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005340:	e042      	b.n	80053c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	695b      	ldr	r3, [r3, #20]
 8005348:	f003 0310 	and.w	r3, r3, #16
 800534c:	2b10      	cmp	r3, #16
 800534e:	d119      	bne.n	8005384 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f06f 0210 	mvn.w	r2, #16
 8005358:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2220      	movs	r2, #32
 8005364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2200      	movs	r2, #0
 800537c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e029      	b.n	80053d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005384:	f7fc fef4 	bl	8002170 <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	68ba      	ldr	r2, [r7, #8]
 8005390:	429a      	cmp	r2, r3
 8005392:	d302      	bcc.n	800539a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d116      	bne.n	80053c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2200      	movs	r2, #0
 800539e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2220      	movs	r2, #32
 80053a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b4:	f043 0220 	orr.w	r2, r3, #32
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2200      	movs	r2, #0
 80053c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e007      	b.n	80053d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	695b      	ldr	r3, [r3, #20]
 80053ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053d2:	2b40      	cmp	r3, #64	; 0x40
 80053d4:	d1b5      	bne.n	8005342 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80053d6:	2300      	movs	r3, #0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3710      	adds	r7, #16
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	695b      	ldr	r3, [r3, #20]
 80053ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053f6:	d11b      	bne.n	8005430 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005400:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2220      	movs	r2, #32
 800540c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541c:	f043 0204 	orr.w	r2, r3, #4
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e000      	b.n	8005432 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	370c      	adds	r7, #12
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr

0800543e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800543e:	b480      	push	{r7}
 8005440:	b083      	sub	sp, #12
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800544a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800544e:	d103      	bne.n	8005458 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005456:	e007      	b.n	8005468 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800545c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005460:	d102      	bne.n	8005468 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2208      	movs	r2, #8
 8005466:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005468:	bf00      	nop
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b086      	sub	sp, #24
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d101      	bne.n	8005486 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e264      	b.n	8005950 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0301 	and.w	r3, r3, #1
 800548e:	2b00      	cmp	r3, #0
 8005490:	d075      	beq.n	800557e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005492:	4ba3      	ldr	r3, [pc, #652]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	f003 030c 	and.w	r3, r3, #12
 800549a:	2b04      	cmp	r3, #4
 800549c:	d00c      	beq.n	80054b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800549e:	4ba0      	ldr	r3, [pc, #640]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80054a6:	2b08      	cmp	r3, #8
 80054a8:	d112      	bne.n	80054d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054aa:	4b9d      	ldr	r3, [pc, #628]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054b6:	d10b      	bne.n	80054d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054b8:	4b99      	ldr	r3, [pc, #612]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d05b      	beq.n	800557c <HAL_RCC_OscConfig+0x108>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d157      	bne.n	800557c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e23f      	b.n	8005950 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054d8:	d106      	bne.n	80054e8 <HAL_RCC_OscConfig+0x74>
 80054da:	4b91      	ldr	r3, [pc, #580]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a90      	ldr	r2, [pc, #576]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 80054e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054e4:	6013      	str	r3, [r2, #0]
 80054e6:	e01d      	b.n	8005524 <HAL_RCC_OscConfig+0xb0>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054f0:	d10c      	bne.n	800550c <HAL_RCC_OscConfig+0x98>
 80054f2:	4b8b      	ldr	r3, [pc, #556]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a8a      	ldr	r2, [pc, #552]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 80054f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054fc:	6013      	str	r3, [r2, #0]
 80054fe:	4b88      	ldr	r3, [pc, #544]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a87      	ldr	r2, [pc, #540]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 8005504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005508:	6013      	str	r3, [r2, #0]
 800550a:	e00b      	b.n	8005524 <HAL_RCC_OscConfig+0xb0>
 800550c:	4b84      	ldr	r3, [pc, #528]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a83      	ldr	r2, [pc, #524]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 8005512:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005516:	6013      	str	r3, [r2, #0]
 8005518:	4b81      	ldr	r3, [pc, #516]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a80      	ldr	r2, [pc, #512]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 800551e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005522:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d013      	beq.n	8005554 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800552c:	f7fc fe20 	bl	8002170 <HAL_GetTick>
 8005530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005532:	e008      	b.n	8005546 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005534:	f7fc fe1c 	bl	8002170 <HAL_GetTick>
 8005538:	4602      	mov	r2, r0
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	2b64      	cmp	r3, #100	; 0x64
 8005540:	d901      	bls.n	8005546 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	e204      	b.n	8005950 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005546:	4b76      	ldr	r3, [pc, #472]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800554e:	2b00      	cmp	r3, #0
 8005550:	d0f0      	beq.n	8005534 <HAL_RCC_OscConfig+0xc0>
 8005552:	e014      	b.n	800557e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005554:	f7fc fe0c 	bl	8002170 <HAL_GetTick>
 8005558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800555a:	e008      	b.n	800556e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800555c:	f7fc fe08 	bl	8002170 <HAL_GetTick>
 8005560:	4602      	mov	r2, r0
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	2b64      	cmp	r3, #100	; 0x64
 8005568:	d901      	bls.n	800556e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	e1f0      	b.n	8005950 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800556e:	4b6c      	ldr	r3, [pc, #432]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1f0      	bne.n	800555c <HAL_RCC_OscConfig+0xe8>
 800557a:	e000      	b.n	800557e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800557c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0302 	and.w	r3, r3, #2
 8005586:	2b00      	cmp	r3, #0
 8005588:	d063      	beq.n	8005652 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800558a:	4b65      	ldr	r3, [pc, #404]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	f003 030c 	and.w	r3, r3, #12
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00b      	beq.n	80055ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005596:	4b62      	ldr	r3, [pc, #392]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800559e:	2b08      	cmp	r3, #8
 80055a0:	d11c      	bne.n	80055dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055a2:	4b5f      	ldr	r3, [pc, #380]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d116      	bne.n	80055dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055ae:	4b5c      	ldr	r3, [pc, #368]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0302 	and.w	r3, r3, #2
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d005      	beq.n	80055c6 <HAL_RCC_OscConfig+0x152>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d001      	beq.n	80055c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e1c4      	b.n	8005950 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055c6:	4b56      	ldr	r3, [pc, #344]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	00db      	lsls	r3, r3, #3
 80055d4:	4952      	ldr	r1, [pc, #328]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055da:	e03a      	b.n	8005652 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d020      	beq.n	8005626 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055e4:	4b4f      	ldr	r3, [pc, #316]	; (8005724 <HAL_RCC_OscConfig+0x2b0>)
 80055e6:	2201      	movs	r2, #1
 80055e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ea:	f7fc fdc1 	bl	8002170 <HAL_GetTick>
 80055ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055f0:	e008      	b.n	8005604 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055f2:	f7fc fdbd 	bl	8002170 <HAL_GetTick>
 80055f6:	4602      	mov	r2, r0
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d901      	bls.n	8005604 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005600:	2303      	movs	r3, #3
 8005602:	e1a5      	b.n	8005950 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005604:	4b46      	ldr	r3, [pc, #280]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 0302 	and.w	r3, r3, #2
 800560c:	2b00      	cmp	r3, #0
 800560e:	d0f0      	beq.n	80055f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005610:	4b43      	ldr	r3, [pc, #268]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	691b      	ldr	r3, [r3, #16]
 800561c:	00db      	lsls	r3, r3, #3
 800561e:	4940      	ldr	r1, [pc, #256]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 8005620:	4313      	orrs	r3, r2
 8005622:	600b      	str	r3, [r1, #0]
 8005624:	e015      	b.n	8005652 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005626:	4b3f      	ldr	r3, [pc, #252]	; (8005724 <HAL_RCC_OscConfig+0x2b0>)
 8005628:	2200      	movs	r2, #0
 800562a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800562c:	f7fc fda0 	bl	8002170 <HAL_GetTick>
 8005630:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005632:	e008      	b.n	8005646 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005634:	f7fc fd9c 	bl	8002170 <HAL_GetTick>
 8005638:	4602      	mov	r2, r0
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	2b02      	cmp	r3, #2
 8005640:	d901      	bls.n	8005646 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e184      	b.n	8005950 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005646:	4b36      	ldr	r3, [pc, #216]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0302 	and.w	r3, r3, #2
 800564e:	2b00      	cmp	r3, #0
 8005650:	d1f0      	bne.n	8005634 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0308 	and.w	r3, r3, #8
 800565a:	2b00      	cmp	r3, #0
 800565c:	d030      	beq.n	80056c0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	695b      	ldr	r3, [r3, #20]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d016      	beq.n	8005694 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005666:	4b30      	ldr	r3, [pc, #192]	; (8005728 <HAL_RCC_OscConfig+0x2b4>)
 8005668:	2201      	movs	r2, #1
 800566a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800566c:	f7fc fd80 	bl	8002170 <HAL_GetTick>
 8005670:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005672:	e008      	b.n	8005686 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005674:	f7fc fd7c 	bl	8002170 <HAL_GetTick>
 8005678:	4602      	mov	r2, r0
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	2b02      	cmp	r3, #2
 8005680:	d901      	bls.n	8005686 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e164      	b.n	8005950 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005686:	4b26      	ldr	r3, [pc, #152]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 8005688:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800568a:	f003 0302 	and.w	r3, r3, #2
 800568e:	2b00      	cmp	r3, #0
 8005690:	d0f0      	beq.n	8005674 <HAL_RCC_OscConfig+0x200>
 8005692:	e015      	b.n	80056c0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005694:	4b24      	ldr	r3, [pc, #144]	; (8005728 <HAL_RCC_OscConfig+0x2b4>)
 8005696:	2200      	movs	r2, #0
 8005698:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800569a:	f7fc fd69 	bl	8002170 <HAL_GetTick>
 800569e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056a0:	e008      	b.n	80056b4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056a2:	f7fc fd65 	bl	8002170 <HAL_GetTick>
 80056a6:	4602      	mov	r2, r0
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	d901      	bls.n	80056b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80056b0:	2303      	movs	r3, #3
 80056b2:	e14d      	b.n	8005950 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056b4:	4b1a      	ldr	r3, [pc, #104]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 80056b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056b8:	f003 0302 	and.w	r3, r3, #2
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d1f0      	bne.n	80056a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 0304 	and.w	r3, r3, #4
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	f000 80a0 	beq.w	800580e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056ce:	2300      	movs	r3, #0
 80056d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056d2:	4b13      	ldr	r3, [pc, #76]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 80056d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d10f      	bne.n	80056fe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056de:	2300      	movs	r3, #0
 80056e0:	60bb      	str	r3, [r7, #8]
 80056e2:	4b0f      	ldr	r3, [pc, #60]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 80056e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e6:	4a0e      	ldr	r2, [pc, #56]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 80056e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056ec:	6413      	str	r3, [r2, #64]	; 0x40
 80056ee:	4b0c      	ldr	r3, [pc, #48]	; (8005720 <HAL_RCC_OscConfig+0x2ac>)
 80056f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056f6:	60bb      	str	r3, [r7, #8]
 80056f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056fa:	2301      	movs	r3, #1
 80056fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056fe:	4b0b      	ldr	r3, [pc, #44]	; (800572c <HAL_RCC_OscConfig+0x2b8>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005706:	2b00      	cmp	r3, #0
 8005708:	d121      	bne.n	800574e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800570a:	4b08      	ldr	r3, [pc, #32]	; (800572c <HAL_RCC_OscConfig+0x2b8>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a07      	ldr	r2, [pc, #28]	; (800572c <HAL_RCC_OscConfig+0x2b8>)
 8005710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005714:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005716:	f7fc fd2b 	bl	8002170 <HAL_GetTick>
 800571a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800571c:	e011      	b.n	8005742 <HAL_RCC_OscConfig+0x2ce>
 800571e:	bf00      	nop
 8005720:	40023800 	.word	0x40023800
 8005724:	42470000 	.word	0x42470000
 8005728:	42470e80 	.word	0x42470e80
 800572c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005730:	f7fc fd1e 	bl	8002170 <HAL_GetTick>
 8005734:	4602      	mov	r2, r0
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	2b02      	cmp	r3, #2
 800573c:	d901      	bls.n	8005742 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e106      	b.n	8005950 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005742:	4b85      	ldr	r3, [pc, #532]	; (8005958 <HAL_RCC_OscConfig+0x4e4>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800574a:	2b00      	cmp	r3, #0
 800574c:	d0f0      	beq.n	8005730 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	2b01      	cmp	r3, #1
 8005754:	d106      	bne.n	8005764 <HAL_RCC_OscConfig+0x2f0>
 8005756:	4b81      	ldr	r3, [pc, #516]	; (800595c <HAL_RCC_OscConfig+0x4e8>)
 8005758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800575a:	4a80      	ldr	r2, [pc, #512]	; (800595c <HAL_RCC_OscConfig+0x4e8>)
 800575c:	f043 0301 	orr.w	r3, r3, #1
 8005760:	6713      	str	r3, [r2, #112]	; 0x70
 8005762:	e01c      	b.n	800579e <HAL_RCC_OscConfig+0x32a>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	2b05      	cmp	r3, #5
 800576a:	d10c      	bne.n	8005786 <HAL_RCC_OscConfig+0x312>
 800576c:	4b7b      	ldr	r3, [pc, #492]	; (800595c <HAL_RCC_OscConfig+0x4e8>)
 800576e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005770:	4a7a      	ldr	r2, [pc, #488]	; (800595c <HAL_RCC_OscConfig+0x4e8>)
 8005772:	f043 0304 	orr.w	r3, r3, #4
 8005776:	6713      	str	r3, [r2, #112]	; 0x70
 8005778:	4b78      	ldr	r3, [pc, #480]	; (800595c <HAL_RCC_OscConfig+0x4e8>)
 800577a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800577c:	4a77      	ldr	r2, [pc, #476]	; (800595c <HAL_RCC_OscConfig+0x4e8>)
 800577e:	f043 0301 	orr.w	r3, r3, #1
 8005782:	6713      	str	r3, [r2, #112]	; 0x70
 8005784:	e00b      	b.n	800579e <HAL_RCC_OscConfig+0x32a>
 8005786:	4b75      	ldr	r3, [pc, #468]	; (800595c <HAL_RCC_OscConfig+0x4e8>)
 8005788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800578a:	4a74      	ldr	r2, [pc, #464]	; (800595c <HAL_RCC_OscConfig+0x4e8>)
 800578c:	f023 0301 	bic.w	r3, r3, #1
 8005790:	6713      	str	r3, [r2, #112]	; 0x70
 8005792:	4b72      	ldr	r3, [pc, #456]	; (800595c <HAL_RCC_OscConfig+0x4e8>)
 8005794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005796:	4a71      	ldr	r2, [pc, #452]	; (800595c <HAL_RCC_OscConfig+0x4e8>)
 8005798:	f023 0304 	bic.w	r3, r3, #4
 800579c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d015      	beq.n	80057d2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057a6:	f7fc fce3 	bl	8002170 <HAL_GetTick>
 80057aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057ac:	e00a      	b.n	80057c4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057ae:	f7fc fcdf 	bl	8002170 <HAL_GetTick>
 80057b2:	4602      	mov	r2, r0
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80057bc:	4293      	cmp	r3, r2
 80057be:	d901      	bls.n	80057c4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e0c5      	b.n	8005950 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057c4:	4b65      	ldr	r3, [pc, #404]	; (800595c <HAL_RCC_OscConfig+0x4e8>)
 80057c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057c8:	f003 0302 	and.w	r3, r3, #2
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d0ee      	beq.n	80057ae <HAL_RCC_OscConfig+0x33a>
 80057d0:	e014      	b.n	80057fc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057d2:	f7fc fccd 	bl	8002170 <HAL_GetTick>
 80057d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057d8:	e00a      	b.n	80057f0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057da:	f7fc fcc9 	bl	8002170 <HAL_GetTick>
 80057de:	4602      	mov	r2, r0
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d901      	bls.n	80057f0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80057ec:	2303      	movs	r3, #3
 80057ee:	e0af      	b.n	8005950 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057f0:	4b5a      	ldr	r3, [pc, #360]	; (800595c <HAL_RCC_OscConfig+0x4e8>)
 80057f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f4:	f003 0302 	and.w	r3, r3, #2
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d1ee      	bne.n	80057da <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057fc:	7dfb      	ldrb	r3, [r7, #23]
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d105      	bne.n	800580e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005802:	4b56      	ldr	r3, [pc, #344]	; (800595c <HAL_RCC_OscConfig+0x4e8>)
 8005804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005806:	4a55      	ldr	r2, [pc, #340]	; (800595c <HAL_RCC_OscConfig+0x4e8>)
 8005808:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800580c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	699b      	ldr	r3, [r3, #24]
 8005812:	2b00      	cmp	r3, #0
 8005814:	f000 809b 	beq.w	800594e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005818:	4b50      	ldr	r3, [pc, #320]	; (800595c <HAL_RCC_OscConfig+0x4e8>)
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	f003 030c 	and.w	r3, r3, #12
 8005820:	2b08      	cmp	r3, #8
 8005822:	d05c      	beq.n	80058de <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	699b      	ldr	r3, [r3, #24]
 8005828:	2b02      	cmp	r3, #2
 800582a:	d141      	bne.n	80058b0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800582c:	4b4c      	ldr	r3, [pc, #304]	; (8005960 <HAL_RCC_OscConfig+0x4ec>)
 800582e:	2200      	movs	r2, #0
 8005830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005832:	f7fc fc9d 	bl	8002170 <HAL_GetTick>
 8005836:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005838:	e008      	b.n	800584c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800583a:	f7fc fc99 	bl	8002170 <HAL_GetTick>
 800583e:	4602      	mov	r2, r0
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	1ad3      	subs	r3, r2, r3
 8005844:	2b02      	cmp	r3, #2
 8005846:	d901      	bls.n	800584c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005848:	2303      	movs	r3, #3
 800584a:	e081      	b.n	8005950 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800584c:	4b43      	ldr	r3, [pc, #268]	; (800595c <HAL_RCC_OscConfig+0x4e8>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1f0      	bne.n	800583a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	69da      	ldr	r2, [r3, #28]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6a1b      	ldr	r3, [r3, #32]
 8005860:	431a      	orrs	r2, r3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005866:	019b      	lsls	r3, r3, #6
 8005868:	431a      	orrs	r2, r3
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800586e:	085b      	lsrs	r3, r3, #1
 8005870:	3b01      	subs	r3, #1
 8005872:	041b      	lsls	r3, r3, #16
 8005874:	431a      	orrs	r2, r3
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587a:	061b      	lsls	r3, r3, #24
 800587c:	4937      	ldr	r1, [pc, #220]	; (800595c <HAL_RCC_OscConfig+0x4e8>)
 800587e:	4313      	orrs	r3, r2
 8005880:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005882:	4b37      	ldr	r3, [pc, #220]	; (8005960 <HAL_RCC_OscConfig+0x4ec>)
 8005884:	2201      	movs	r2, #1
 8005886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005888:	f7fc fc72 	bl	8002170 <HAL_GetTick>
 800588c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800588e:	e008      	b.n	80058a2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005890:	f7fc fc6e 	bl	8002170 <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	2b02      	cmp	r3, #2
 800589c:	d901      	bls.n	80058a2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e056      	b.n	8005950 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058a2:	4b2e      	ldr	r3, [pc, #184]	; (800595c <HAL_RCC_OscConfig+0x4e8>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d0f0      	beq.n	8005890 <HAL_RCC_OscConfig+0x41c>
 80058ae:	e04e      	b.n	800594e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058b0:	4b2b      	ldr	r3, [pc, #172]	; (8005960 <HAL_RCC_OscConfig+0x4ec>)
 80058b2:	2200      	movs	r2, #0
 80058b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058b6:	f7fc fc5b 	bl	8002170 <HAL_GetTick>
 80058ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058bc:	e008      	b.n	80058d0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058be:	f7fc fc57 	bl	8002170 <HAL_GetTick>
 80058c2:	4602      	mov	r2, r0
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d901      	bls.n	80058d0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e03f      	b.n	8005950 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058d0:	4b22      	ldr	r3, [pc, #136]	; (800595c <HAL_RCC_OscConfig+0x4e8>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1f0      	bne.n	80058be <HAL_RCC_OscConfig+0x44a>
 80058dc:	e037      	b.n	800594e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	699b      	ldr	r3, [r3, #24]
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d101      	bne.n	80058ea <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e032      	b.n	8005950 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80058ea:	4b1c      	ldr	r3, [pc, #112]	; (800595c <HAL_RCC_OscConfig+0x4e8>)
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	699b      	ldr	r3, [r3, #24]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d028      	beq.n	800594a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005902:	429a      	cmp	r2, r3
 8005904:	d121      	bne.n	800594a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005910:	429a      	cmp	r2, r3
 8005912:	d11a      	bne.n	800594a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800591a:	4013      	ands	r3, r2
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005920:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005922:	4293      	cmp	r3, r2
 8005924:	d111      	bne.n	800594a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005930:	085b      	lsrs	r3, r3, #1
 8005932:	3b01      	subs	r3, #1
 8005934:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005936:	429a      	cmp	r2, r3
 8005938:	d107      	bne.n	800594a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005944:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005946:	429a      	cmp	r2, r3
 8005948:	d001      	beq.n	800594e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e000      	b.n	8005950 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	3718      	adds	r7, #24
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}
 8005958:	40007000 	.word	0x40007000
 800595c:	40023800 	.word	0x40023800
 8005960:	42470060 	.word	0x42470060

08005964 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d101      	bne.n	8005978 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e0cc      	b.n	8005b12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005978:	4b68      	ldr	r3, [pc, #416]	; (8005b1c <HAL_RCC_ClockConfig+0x1b8>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 0307 	and.w	r3, r3, #7
 8005980:	683a      	ldr	r2, [r7, #0]
 8005982:	429a      	cmp	r2, r3
 8005984:	d90c      	bls.n	80059a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005986:	4b65      	ldr	r3, [pc, #404]	; (8005b1c <HAL_RCC_ClockConfig+0x1b8>)
 8005988:	683a      	ldr	r2, [r7, #0]
 800598a:	b2d2      	uxtb	r2, r2
 800598c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800598e:	4b63      	ldr	r3, [pc, #396]	; (8005b1c <HAL_RCC_ClockConfig+0x1b8>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0307 	and.w	r3, r3, #7
 8005996:	683a      	ldr	r2, [r7, #0]
 8005998:	429a      	cmp	r2, r3
 800599a:	d001      	beq.n	80059a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e0b8      	b.n	8005b12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 0302 	and.w	r3, r3, #2
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d020      	beq.n	80059ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0304 	and.w	r3, r3, #4
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d005      	beq.n	80059c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80059b8:	4b59      	ldr	r3, [pc, #356]	; (8005b20 <HAL_RCC_ClockConfig+0x1bc>)
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	4a58      	ldr	r2, [pc, #352]	; (8005b20 <HAL_RCC_ClockConfig+0x1bc>)
 80059be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80059c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 0308 	and.w	r3, r3, #8
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d005      	beq.n	80059dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80059d0:	4b53      	ldr	r3, [pc, #332]	; (8005b20 <HAL_RCC_ClockConfig+0x1bc>)
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	4a52      	ldr	r2, [pc, #328]	; (8005b20 <HAL_RCC_ClockConfig+0x1bc>)
 80059d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80059da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059dc:	4b50      	ldr	r3, [pc, #320]	; (8005b20 <HAL_RCC_ClockConfig+0x1bc>)
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	494d      	ldr	r1, [pc, #308]	; (8005b20 <HAL_RCC_ClockConfig+0x1bc>)
 80059ea:	4313      	orrs	r3, r2
 80059ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 0301 	and.w	r3, r3, #1
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d044      	beq.n	8005a84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d107      	bne.n	8005a12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a02:	4b47      	ldr	r3, [pc, #284]	; (8005b20 <HAL_RCC_ClockConfig+0x1bc>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d119      	bne.n	8005a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e07f      	b.n	8005b12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	2b02      	cmp	r3, #2
 8005a18:	d003      	beq.n	8005a22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a1e:	2b03      	cmp	r3, #3
 8005a20:	d107      	bne.n	8005a32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a22:	4b3f      	ldr	r3, [pc, #252]	; (8005b20 <HAL_RCC_ClockConfig+0x1bc>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d109      	bne.n	8005a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e06f      	b.n	8005b12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a32:	4b3b      	ldr	r3, [pc, #236]	; (8005b20 <HAL_RCC_ClockConfig+0x1bc>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0302 	and.w	r3, r3, #2
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d101      	bne.n	8005a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e067      	b.n	8005b12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a42:	4b37      	ldr	r3, [pc, #220]	; (8005b20 <HAL_RCC_ClockConfig+0x1bc>)
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f023 0203 	bic.w	r2, r3, #3
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	4934      	ldr	r1, [pc, #208]	; (8005b20 <HAL_RCC_ClockConfig+0x1bc>)
 8005a50:	4313      	orrs	r3, r2
 8005a52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a54:	f7fc fb8c 	bl	8002170 <HAL_GetTick>
 8005a58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a5a:	e00a      	b.n	8005a72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a5c:	f7fc fb88 	bl	8002170 <HAL_GetTick>
 8005a60:	4602      	mov	r2, r0
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d901      	bls.n	8005a72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e04f      	b.n	8005b12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a72:	4b2b      	ldr	r3, [pc, #172]	; (8005b20 <HAL_RCC_ClockConfig+0x1bc>)
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	f003 020c 	and.w	r2, r3, #12
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d1eb      	bne.n	8005a5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a84:	4b25      	ldr	r3, [pc, #148]	; (8005b1c <HAL_RCC_ClockConfig+0x1b8>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0307 	and.w	r3, r3, #7
 8005a8c:	683a      	ldr	r2, [r7, #0]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d20c      	bcs.n	8005aac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a92:	4b22      	ldr	r3, [pc, #136]	; (8005b1c <HAL_RCC_ClockConfig+0x1b8>)
 8005a94:	683a      	ldr	r2, [r7, #0]
 8005a96:	b2d2      	uxtb	r2, r2
 8005a98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a9a:	4b20      	ldr	r3, [pc, #128]	; (8005b1c <HAL_RCC_ClockConfig+0x1b8>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 0307 	and.w	r3, r3, #7
 8005aa2:	683a      	ldr	r2, [r7, #0]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d001      	beq.n	8005aac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e032      	b.n	8005b12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 0304 	and.w	r3, r3, #4
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d008      	beq.n	8005aca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ab8:	4b19      	ldr	r3, [pc, #100]	; (8005b20 <HAL_RCC_ClockConfig+0x1bc>)
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	4916      	ldr	r1, [pc, #88]	; (8005b20 <HAL_RCC_ClockConfig+0x1bc>)
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 0308 	and.w	r3, r3, #8
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d009      	beq.n	8005aea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ad6:	4b12      	ldr	r3, [pc, #72]	; (8005b20 <HAL_RCC_ClockConfig+0x1bc>)
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	00db      	lsls	r3, r3, #3
 8005ae4:	490e      	ldr	r1, [pc, #56]	; (8005b20 <HAL_RCC_ClockConfig+0x1bc>)
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005aea:	f000 f821 	bl	8005b30 <HAL_RCC_GetSysClockFreq>
 8005aee:	4602      	mov	r2, r0
 8005af0:	4b0b      	ldr	r3, [pc, #44]	; (8005b20 <HAL_RCC_ClockConfig+0x1bc>)
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	091b      	lsrs	r3, r3, #4
 8005af6:	f003 030f 	and.w	r3, r3, #15
 8005afa:	490a      	ldr	r1, [pc, #40]	; (8005b24 <HAL_RCC_ClockConfig+0x1c0>)
 8005afc:	5ccb      	ldrb	r3, [r1, r3]
 8005afe:	fa22 f303 	lsr.w	r3, r2, r3
 8005b02:	4a09      	ldr	r2, [pc, #36]	; (8005b28 <HAL_RCC_ClockConfig+0x1c4>)
 8005b04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005b06:	4b09      	ldr	r3, [pc, #36]	; (8005b2c <HAL_RCC_ClockConfig+0x1c8>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f7fc f904 	bl	8001d18 <HAL_InitTick>

  return HAL_OK;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3710      	adds	r7, #16
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	40023c00 	.word	0x40023c00
 8005b20:	40023800 	.word	0x40023800
 8005b24:	0800a884 	.word	0x0800a884
 8005b28:	20000010 	.word	0x20000010
 8005b2c:	20000014 	.word	0x20000014

08005b30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b30:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005b34:	b084      	sub	sp, #16
 8005b36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	607b      	str	r3, [r7, #4]
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	60fb      	str	r3, [r7, #12]
 8005b40:	2300      	movs	r3, #0
 8005b42:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005b44:	2300      	movs	r3, #0
 8005b46:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b48:	4b67      	ldr	r3, [pc, #412]	; (8005ce8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	f003 030c 	and.w	r3, r3, #12
 8005b50:	2b08      	cmp	r3, #8
 8005b52:	d00d      	beq.n	8005b70 <HAL_RCC_GetSysClockFreq+0x40>
 8005b54:	2b08      	cmp	r3, #8
 8005b56:	f200 80bd 	bhi.w	8005cd4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d002      	beq.n	8005b64 <HAL_RCC_GetSysClockFreq+0x34>
 8005b5e:	2b04      	cmp	r3, #4
 8005b60:	d003      	beq.n	8005b6a <HAL_RCC_GetSysClockFreq+0x3a>
 8005b62:	e0b7      	b.n	8005cd4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b64:	4b61      	ldr	r3, [pc, #388]	; (8005cec <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005b66:	60bb      	str	r3, [r7, #8]
       break;
 8005b68:	e0b7      	b.n	8005cda <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b6a:	4b61      	ldr	r3, [pc, #388]	; (8005cf0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005b6c:	60bb      	str	r3, [r7, #8]
      break;
 8005b6e:	e0b4      	b.n	8005cda <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b70:	4b5d      	ldr	r3, [pc, #372]	; (8005ce8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b78:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b7a:	4b5b      	ldr	r3, [pc, #364]	; (8005ce8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d04d      	beq.n	8005c22 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b86:	4b58      	ldr	r3, [pc, #352]	; (8005ce8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	099b      	lsrs	r3, r3, #6
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	f04f 0300 	mov.w	r3, #0
 8005b92:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005b96:	f04f 0100 	mov.w	r1, #0
 8005b9a:	ea02 0800 	and.w	r8, r2, r0
 8005b9e:	ea03 0901 	and.w	r9, r3, r1
 8005ba2:	4640      	mov	r0, r8
 8005ba4:	4649      	mov	r1, r9
 8005ba6:	f04f 0200 	mov.w	r2, #0
 8005baa:	f04f 0300 	mov.w	r3, #0
 8005bae:	014b      	lsls	r3, r1, #5
 8005bb0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005bb4:	0142      	lsls	r2, r0, #5
 8005bb6:	4610      	mov	r0, r2
 8005bb8:	4619      	mov	r1, r3
 8005bba:	ebb0 0008 	subs.w	r0, r0, r8
 8005bbe:	eb61 0109 	sbc.w	r1, r1, r9
 8005bc2:	f04f 0200 	mov.w	r2, #0
 8005bc6:	f04f 0300 	mov.w	r3, #0
 8005bca:	018b      	lsls	r3, r1, #6
 8005bcc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005bd0:	0182      	lsls	r2, r0, #6
 8005bd2:	1a12      	subs	r2, r2, r0
 8005bd4:	eb63 0301 	sbc.w	r3, r3, r1
 8005bd8:	f04f 0000 	mov.w	r0, #0
 8005bdc:	f04f 0100 	mov.w	r1, #0
 8005be0:	00d9      	lsls	r1, r3, #3
 8005be2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005be6:	00d0      	lsls	r0, r2, #3
 8005be8:	4602      	mov	r2, r0
 8005bea:	460b      	mov	r3, r1
 8005bec:	eb12 0208 	adds.w	r2, r2, r8
 8005bf0:	eb43 0309 	adc.w	r3, r3, r9
 8005bf4:	f04f 0000 	mov.w	r0, #0
 8005bf8:	f04f 0100 	mov.w	r1, #0
 8005bfc:	0259      	lsls	r1, r3, #9
 8005bfe:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005c02:	0250      	lsls	r0, r2, #9
 8005c04:	4602      	mov	r2, r0
 8005c06:	460b      	mov	r3, r1
 8005c08:	4610      	mov	r0, r2
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	461a      	mov	r2, r3
 8005c10:	f04f 0300 	mov.w	r3, #0
 8005c14:	f7fa fb2c 	bl	8000270 <__aeabi_uldivmod>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	460b      	mov	r3, r1
 8005c1c:	4613      	mov	r3, r2
 8005c1e:	60fb      	str	r3, [r7, #12]
 8005c20:	e04a      	b.n	8005cb8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c22:	4b31      	ldr	r3, [pc, #196]	; (8005ce8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	099b      	lsrs	r3, r3, #6
 8005c28:	461a      	mov	r2, r3
 8005c2a:	f04f 0300 	mov.w	r3, #0
 8005c2e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005c32:	f04f 0100 	mov.w	r1, #0
 8005c36:	ea02 0400 	and.w	r4, r2, r0
 8005c3a:	ea03 0501 	and.w	r5, r3, r1
 8005c3e:	4620      	mov	r0, r4
 8005c40:	4629      	mov	r1, r5
 8005c42:	f04f 0200 	mov.w	r2, #0
 8005c46:	f04f 0300 	mov.w	r3, #0
 8005c4a:	014b      	lsls	r3, r1, #5
 8005c4c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005c50:	0142      	lsls	r2, r0, #5
 8005c52:	4610      	mov	r0, r2
 8005c54:	4619      	mov	r1, r3
 8005c56:	1b00      	subs	r0, r0, r4
 8005c58:	eb61 0105 	sbc.w	r1, r1, r5
 8005c5c:	f04f 0200 	mov.w	r2, #0
 8005c60:	f04f 0300 	mov.w	r3, #0
 8005c64:	018b      	lsls	r3, r1, #6
 8005c66:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005c6a:	0182      	lsls	r2, r0, #6
 8005c6c:	1a12      	subs	r2, r2, r0
 8005c6e:	eb63 0301 	sbc.w	r3, r3, r1
 8005c72:	f04f 0000 	mov.w	r0, #0
 8005c76:	f04f 0100 	mov.w	r1, #0
 8005c7a:	00d9      	lsls	r1, r3, #3
 8005c7c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005c80:	00d0      	lsls	r0, r2, #3
 8005c82:	4602      	mov	r2, r0
 8005c84:	460b      	mov	r3, r1
 8005c86:	1912      	adds	r2, r2, r4
 8005c88:	eb45 0303 	adc.w	r3, r5, r3
 8005c8c:	f04f 0000 	mov.w	r0, #0
 8005c90:	f04f 0100 	mov.w	r1, #0
 8005c94:	0299      	lsls	r1, r3, #10
 8005c96:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005c9a:	0290      	lsls	r0, r2, #10
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	460b      	mov	r3, r1
 8005ca0:	4610      	mov	r0, r2
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	f04f 0300 	mov.w	r3, #0
 8005cac:	f7fa fae0 	bl	8000270 <__aeabi_uldivmod>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	460b      	mov	r3, r1
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005cb8:	4b0b      	ldr	r3, [pc, #44]	; (8005ce8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	0c1b      	lsrs	r3, r3, #16
 8005cbe:	f003 0303 	and.w	r3, r3, #3
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	005b      	lsls	r3, r3, #1
 8005cc6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005cc8:	68fa      	ldr	r2, [r7, #12]
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cd0:	60bb      	str	r3, [r7, #8]
      break;
 8005cd2:	e002      	b.n	8005cda <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005cd4:	4b05      	ldr	r3, [pc, #20]	; (8005cec <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005cd6:	60bb      	str	r3, [r7, #8]
      break;
 8005cd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005cda:	68bb      	ldr	r3, [r7, #8]
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3710      	adds	r7, #16
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005ce6:	bf00      	nop
 8005ce8:	40023800 	.word	0x40023800
 8005cec:	00f42400 	.word	0x00f42400
 8005cf0:	007a1200 	.word	0x007a1200

08005cf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005cf8:	4b03      	ldr	r3, [pc, #12]	; (8005d08 <HAL_RCC_GetHCLKFreq+0x14>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	20000010 	.word	0x20000010

08005d0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005d10:	f7ff fff0 	bl	8005cf4 <HAL_RCC_GetHCLKFreq>
 8005d14:	4602      	mov	r2, r0
 8005d16:	4b05      	ldr	r3, [pc, #20]	; (8005d2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	0a9b      	lsrs	r3, r3, #10
 8005d1c:	f003 0307 	and.w	r3, r3, #7
 8005d20:	4903      	ldr	r1, [pc, #12]	; (8005d30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d22:	5ccb      	ldrb	r3, [r1, r3]
 8005d24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	40023800 	.word	0x40023800
 8005d30:	0800a894 	.word	0x0800a894

08005d34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005d38:	f7ff ffdc 	bl	8005cf4 <HAL_RCC_GetHCLKFreq>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	4b05      	ldr	r3, [pc, #20]	; (8005d54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	0b5b      	lsrs	r3, r3, #13
 8005d44:	f003 0307 	and.w	r3, r3, #7
 8005d48:	4903      	ldr	r1, [pc, #12]	; (8005d58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d4a:	5ccb      	ldrb	r3, [r1, r3]
 8005d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	bd80      	pop	{r7, pc}
 8005d54:	40023800 	.word	0x40023800
 8005d58:	0800a894 	.word	0x0800a894

08005d5c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	220f      	movs	r2, #15
 8005d6a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005d6c:	4b12      	ldr	r3, [pc, #72]	; (8005db8 <HAL_RCC_GetClockConfig+0x5c>)
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	f003 0203 	and.w	r2, r3, #3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005d78:	4b0f      	ldr	r3, [pc, #60]	; (8005db8 <HAL_RCC_GetClockConfig+0x5c>)
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005d84:	4b0c      	ldr	r3, [pc, #48]	; (8005db8 <HAL_RCC_GetClockConfig+0x5c>)
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005d90:	4b09      	ldr	r3, [pc, #36]	; (8005db8 <HAL_RCC_GetClockConfig+0x5c>)
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	08db      	lsrs	r3, r3, #3
 8005d96:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005d9e:	4b07      	ldr	r3, [pc, #28]	; (8005dbc <HAL_RCC_GetClockConfig+0x60>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 0207 	and.w	r2, r3, #7
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	601a      	str	r2, [r3, #0]
}
 8005daa:	bf00      	nop
 8005dac:	370c      	adds	r7, #12
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr
 8005db6:	bf00      	nop
 8005db8:	40023800 	.word	0x40023800
 8005dbc:	40023c00 	.word	0x40023c00

08005dc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b082      	sub	sp, #8
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d101      	bne.n	8005dd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e041      	b.n	8005e56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d106      	bne.n	8005dec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 f839 	bl	8005e5e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2202      	movs	r2, #2
 8005df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	3304      	adds	r3, #4
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	4610      	mov	r0, r2
 8005e00:	f000 f9d8 	bl	80061b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3708      	adds	r7, #8
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005e5e:	b480      	push	{r7}
 8005e60:	b083      	sub	sp, #12
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005e66:	bf00      	nop
 8005e68:	370c      	adds	r7, #12
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr
	...

08005e74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b085      	sub	sp, #20
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d001      	beq.n	8005e8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e04e      	b.n	8005f2a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2202      	movs	r2, #2
 8005e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68da      	ldr	r2, [r3, #12]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f042 0201 	orr.w	r2, r2, #1
 8005ea2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a23      	ldr	r2, [pc, #140]	; (8005f38 <HAL_TIM_Base_Start_IT+0xc4>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d022      	beq.n	8005ef4 <HAL_TIM_Base_Start_IT+0x80>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eb6:	d01d      	beq.n	8005ef4 <HAL_TIM_Base_Start_IT+0x80>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a1f      	ldr	r2, [pc, #124]	; (8005f3c <HAL_TIM_Base_Start_IT+0xc8>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d018      	beq.n	8005ef4 <HAL_TIM_Base_Start_IT+0x80>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a1e      	ldr	r2, [pc, #120]	; (8005f40 <HAL_TIM_Base_Start_IT+0xcc>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d013      	beq.n	8005ef4 <HAL_TIM_Base_Start_IT+0x80>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a1c      	ldr	r2, [pc, #112]	; (8005f44 <HAL_TIM_Base_Start_IT+0xd0>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d00e      	beq.n	8005ef4 <HAL_TIM_Base_Start_IT+0x80>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a1b      	ldr	r2, [pc, #108]	; (8005f48 <HAL_TIM_Base_Start_IT+0xd4>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d009      	beq.n	8005ef4 <HAL_TIM_Base_Start_IT+0x80>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a19      	ldr	r2, [pc, #100]	; (8005f4c <HAL_TIM_Base_Start_IT+0xd8>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d004      	beq.n	8005ef4 <HAL_TIM_Base_Start_IT+0x80>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a18      	ldr	r2, [pc, #96]	; (8005f50 <HAL_TIM_Base_Start_IT+0xdc>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d111      	bne.n	8005f18 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	f003 0307 	and.w	r3, r3, #7
 8005efe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2b06      	cmp	r3, #6
 8005f04:	d010      	beq.n	8005f28 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f042 0201 	orr.w	r2, r2, #1
 8005f14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f16:	e007      	b.n	8005f28 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f042 0201 	orr.w	r2, r2, #1
 8005f26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3714      	adds	r7, #20
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop
 8005f38:	40010000 	.word	0x40010000
 8005f3c:	40000400 	.word	0x40000400
 8005f40:	40000800 	.word	0x40000800
 8005f44:	40000c00 	.word	0x40000c00
 8005f48:	40010400 	.word	0x40010400
 8005f4c:	40014000 	.word	0x40014000
 8005f50:	40001800 	.word	0x40001800

08005f54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	f003 0302 	and.w	r3, r3, #2
 8005f66:	2b02      	cmp	r3, #2
 8005f68:	d122      	bne.n	8005fb0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	f003 0302 	and.w	r3, r3, #2
 8005f74:	2b02      	cmp	r3, #2
 8005f76:	d11b      	bne.n	8005fb0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f06f 0202 	mvn.w	r2, #2
 8005f80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2201      	movs	r2, #1
 8005f86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	699b      	ldr	r3, [r3, #24]
 8005f8e:	f003 0303 	and.w	r3, r3, #3
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d003      	beq.n	8005f9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 f8ee 	bl	8006178 <HAL_TIM_IC_CaptureCallback>
 8005f9c:	e005      	b.n	8005faa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 f8e0 	bl	8006164 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f000 f8f1 	bl	800618c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	f003 0304 	and.w	r3, r3, #4
 8005fba:	2b04      	cmp	r3, #4
 8005fbc:	d122      	bne.n	8006004 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	f003 0304 	and.w	r3, r3, #4
 8005fc8:	2b04      	cmp	r3, #4
 8005fca:	d11b      	bne.n	8006004 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f06f 0204 	mvn.w	r2, #4
 8005fd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2202      	movs	r2, #2
 8005fda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	699b      	ldr	r3, [r3, #24]
 8005fe2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d003      	beq.n	8005ff2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 f8c4 	bl	8006178 <HAL_TIM_IC_CaptureCallback>
 8005ff0:	e005      	b.n	8005ffe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 f8b6 	bl	8006164 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 f8c7 	bl	800618c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	f003 0308 	and.w	r3, r3, #8
 800600e:	2b08      	cmp	r3, #8
 8006010:	d122      	bne.n	8006058 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	f003 0308 	and.w	r3, r3, #8
 800601c:	2b08      	cmp	r3, #8
 800601e:	d11b      	bne.n	8006058 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f06f 0208 	mvn.w	r2, #8
 8006028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2204      	movs	r2, #4
 800602e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	69db      	ldr	r3, [r3, #28]
 8006036:	f003 0303 	and.w	r3, r3, #3
 800603a:	2b00      	cmp	r3, #0
 800603c:	d003      	beq.n	8006046 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 f89a 	bl	8006178 <HAL_TIM_IC_CaptureCallback>
 8006044:	e005      	b.n	8006052 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 f88c 	bl	8006164 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f000 f89d 	bl	800618c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	f003 0310 	and.w	r3, r3, #16
 8006062:	2b10      	cmp	r3, #16
 8006064:	d122      	bne.n	80060ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	f003 0310 	and.w	r3, r3, #16
 8006070:	2b10      	cmp	r3, #16
 8006072:	d11b      	bne.n	80060ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f06f 0210 	mvn.w	r2, #16
 800607c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2208      	movs	r2, #8
 8006082:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	69db      	ldr	r3, [r3, #28]
 800608a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800608e:	2b00      	cmp	r3, #0
 8006090:	d003      	beq.n	800609a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 f870 	bl	8006178 <HAL_TIM_IC_CaptureCallback>
 8006098:	e005      	b.n	80060a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 f862 	bl	8006164 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 f873 	bl	800618c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	f003 0301 	and.w	r3, r3, #1
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d10e      	bne.n	80060d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	f003 0301 	and.w	r3, r3, #1
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d107      	bne.n	80060d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f06f 0201 	mvn.w	r2, #1
 80060d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f7fb fb04 	bl	80016e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060e2:	2b80      	cmp	r3, #128	; 0x80
 80060e4:	d10e      	bne.n	8006104 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060f0:	2b80      	cmp	r3, #128	; 0x80
 80060f2:	d107      	bne.n	8006104 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80060fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 f902 	bl	8006308 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	691b      	ldr	r3, [r3, #16]
 800610a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800610e:	2b40      	cmp	r3, #64	; 0x40
 8006110:	d10e      	bne.n	8006130 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800611c:	2b40      	cmp	r3, #64	; 0x40
 800611e:	d107      	bne.n	8006130 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 f838 	bl	80061a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	f003 0320 	and.w	r3, r3, #32
 800613a:	2b20      	cmp	r3, #32
 800613c:	d10e      	bne.n	800615c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	f003 0320 	and.w	r3, r3, #32
 8006148:	2b20      	cmp	r3, #32
 800614a:	d107      	bne.n	800615c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f06f 0220 	mvn.w	r2, #32
 8006154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 f8cc 	bl	80062f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800615c:	bf00      	nop
 800615e:	3708      	adds	r7, #8
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}

08006164 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006164:	b480      	push	{r7}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800616c:	bf00      	nop
 800616e:	370c      	adds	r7, #12
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006180:	bf00      	nop
 8006182:	370c      	adds	r7, #12
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr

0800618c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006194:	bf00      	nop
 8006196:	370c      	adds	r7, #12
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061a8:	bf00      	nop
 80061aa:	370c      	adds	r7, #12
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b085      	sub	sp, #20
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	4a40      	ldr	r2, [pc, #256]	; (80062c8 <TIM_Base_SetConfig+0x114>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d013      	beq.n	80061f4 <TIM_Base_SetConfig+0x40>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061d2:	d00f      	beq.n	80061f4 <TIM_Base_SetConfig+0x40>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	4a3d      	ldr	r2, [pc, #244]	; (80062cc <TIM_Base_SetConfig+0x118>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d00b      	beq.n	80061f4 <TIM_Base_SetConfig+0x40>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	4a3c      	ldr	r2, [pc, #240]	; (80062d0 <TIM_Base_SetConfig+0x11c>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d007      	beq.n	80061f4 <TIM_Base_SetConfig+0x40>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4a3b      	ldr	r2, [pc, #236]	; (80062d4 <TIM_Base_SetConfig+0x120>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d003      	beq.n	80061f4 <TIM_Base_SetConfig+0x40>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	4a3a      	ldr	r2, [pc, #232]	; (80062d8 <TIM_Base_SetConfig+0x124>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d108      	bne.n	8006206 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	4313      	orrs	r3, r2
 8006204:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a2f      	ldr	r2, [pc, #188]	; (80062c8 <TIM_Base_SetConfig+0x114>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d02b      	beq.n	8006266 <TIM_Base_SetConfig+0xb2>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006214:	d027      	beq.n	8006266 <TIM_Base_SetConfig+0xb2>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a2c      	ldr	r2, [pc, #176]	; (80062cc <TIM_Base_SetConfig+0x118>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d023      	beq.n	8006266 <TIM_Base_SetConfig+0xb2>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4a2b      	ldr	r2, [pc, #172]	; (80062d0 <TIM_Base_SetConfig+0x11c>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d01f      	beq.n	8006266 <TIM_Base_SetConfig+0xb2>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a2a      	ldr	r2, [pc, #168]	; (80062d4 <TIM_Base_SetConfig+0x120>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d01b      	beq.n	8006266 <TIM_Base_SetConfig+0xb2>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a29      	ldr	r2, [pc, #164]	; (80062d8 <TIM_Base_SetConfig+0x124>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d017      	beq.n	8006266 <TIM_Base_SetConfig+0xb2>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4a28      	ldr	r2, [pc, #160]	; (80062dc <TIM_Base_SetConfig+0x128>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d013      	beq.n	8006266 <TIM_Base_SetConfig+0xb2>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a27      	ldr	r2, [pc, #156]	; (80062e0 <TIM_Base_SetConfig+0x12c>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d00f      	beq.n	8006266 <TIM_Base_SetConfig+0xb2>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4a26      	ldr	r2, [pc, #152]	; (80062e4 <TIM_Base_SetConfig+0x130>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d00b      	beq.n	8006266 <TIM_Base_SetConfig+0xb2>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4a25      	ldr	r2, [pc, #148]	; (80062e8 <TIM_Base_SetConfig+0x134>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d007      	beq.n	8006266 <TIM_Base_SetConfig+0xb2>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a24      	ldr	r2, [pc, #144]	; (80062ec <TIM_Base_SetConfig+0x138>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d003      	beq.n	8006266 <TIM_Base_SetConfig+0xb2>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4a23      	ldr	r2, [pc, #140]	; (80062f0 <TIM_Base_SetConfig+0x13c>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d108      	bne.n	8006278 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800626c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	68fa      	ldr	r2, [r7, #12]
 8006274:	4313      	orrs	r3, r2
 8006276:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	695b      	ldr	r3, [r3, #20]
 8006282:	4313      	orrs	r3, r2
 8006284:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	689a      	ldr	r2, [r3, #8]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a0a      	ldr	r2, [pc, #40]	; (80062c8 <TIM_Base_SetConfig+0x114>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d003      	beq.n	80062ac <TIM_Base_SetConfig+0xf8>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a0c      	ldr	r2, [pc, #48]	; (80062d8 <TIM_Base_SetConfig+0x124>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d103      	bne.n	80062b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	691a      	ldr	r2, [r3, #16]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	615a      	str	r2, [r3, #20]
}
 80062ba:	bf00      	nop
 80062bc:	3714      	adds	r7, #20
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr
 80062c6:	bf00      	nop
 80062c8:	40010000 	.word	0x40010000
 80062cc:	40000400 	.word	0x40000400
 80062d0:	40000800 	.word	0x40000800
 80062d4:	40000c00 	.word	0x40000c00
 80062d8:	40010400 	.word	0x40010400
 80062dc:	40014000 	.word	0x40014000
 80062e0:	40014400 	.word	0x40014400
 80062e4:	40014800 	.word	0x40014800
 80062e8:	40001800 	.word	0x40001800
 80062ec:	40001c00 	.word	0x40001c00
 80062f0:	40002000 	.word	0x40002000

080062f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062fc:	bf00      	nop
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006310:	bf00      	nop
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b082      	sub	sp, #8
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d101      	bne.n	800632e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e03f      	b.n	80063ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006334:	b2db      	uxtb	r3, r3
 8006336:	2b00      	cmp	r3, #0
 8006338:	d106      	bne.n	8006348 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f7fb fe26 	bl	8001f94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2224      	movs	r2, #36	; 0x24
 800634c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	68da      	ldr	r2, [r3, #12]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800635e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 fe7d 	bl	8007060 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	691a      	ldr	r2, [r3, #16]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006374:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	695a      	ldr	r2, [r3, #20]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006384:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	68da      	ldr	r2, [r3, #12]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006394:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2220      	movs	r2, #32
 80063a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2220      	movs	r2, #32
 80063a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3708      	adds	r7, #8
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}

080063b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063b6:	b580      	push	{r7, lr}
 80063b8:	b08a      	sub	sp, #40	; 0x28
 80063ba:	af02      	add	r7, sp, #8
 80063bc:	60f8      	str	r0, [r7, #12]
 80063be:	60b9      	str	r1, [r7, #8]
 80063c0:	603b      	str	r3, [r7, #0]
 80063c2:	4613      	mov	r3, r2
 80063c4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80063c6:	2300      	movs	r3, #0
 80063c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	2b20      	cmp	r3, #32
 80063d4:	d17c      	bne.n	80064d0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d002      	beq.n	80063e2 <HAL_UART_Transmit+0x2c>
 80063dc:	88fb      	ldrh	r3, [r7, #6]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d101      	bne.n	80063e6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	e075      	b.n	80064d2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d101      	bne.n	80063f4 <HAL_UART_Transmit+0x3e>
 80063f0:	2302      	movs	r3, #2
 80063f2:	e06e      	b.n	80064d2 <HAL_UART_Transmit+0x11c>
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2200      	movs	r2, #0
 8006400:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2221      	movs	r2, #33	; 0x21
 8006406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800640a:	f7fb feb1 	bl	8002170 <HAL_GetTick>
 800640e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	88fa      	ldrh	r2, [r7, #6]
 8006414:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	88fa      	ldrh	r2, [r7, #6]
 800641a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006424:	d108      	bne.n	8006438 <HAL_UART_Transmit+0x82>
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d104      	bne.n	8006438 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800642e:	2300      	movs	r3, #0
 8006430:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	61bb      	str	r3, [r7, #24]
 8006436:	e003      	b.n	8006440 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800643c:	2300      	movs	r3, #0
 800643e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2200      	movs	r2, #0
 8006444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006448:	e02a      	b.n	80064a0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	9300      	str	r3, [sp, #0]
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	2200      	movs	r2, #0
 8006452:	2180      	movs	r1, #128	; 0x80
 8006454:	68f8      	ldr	r0, [r7, #12]
 8006456:	f000 fbc1 	bl	8006bdc <UART_WaitOnFlagUntilTimeout>
 800645a:	4603      	mov	r3, r0
 800645c:	2b00      	cmp	r3, #0
 800645e:	d001      	beq.n	8006464 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006460:	2303      	movs	r3, #3
 8006462:	e036      	b.n	80064d2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d10b      	bne.n	8006482 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800646a:	69bb      	ldr	r3, [r7, #24]
 800646c:	881b      	ldrh	r3, [r3, #0]
 800646e:	461a      	mov	r2, r3
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006478:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	3302      	adds	r3, #2
 800647e:	61bb      	str	r3, [r7, #24]
 8006480:	e007      	b.n	8006492 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	781a      	ldrb	r2, [r3, #0]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800648c:	69fb      	ldr	r3, [r7, #28]
 800648e:	3301      	adds	r3, #1
 8006490:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006496:	b29b      	uxth	r3, r3
 8006498:	3b01      	subs	r3, #1
 800649a:	b29a      	uxth	r2, r3
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d1cf      	bne.n	800644a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	9300      	str	r3, [sp, #0]
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	2200      	movs	r2, #0
 80064b2:	2140      	movs	r1, #64	; 0x40
 80064b4:	68f8      	ldr	r0, [r7, #12]
 80064b6:	f000 fb91 	bl	8006bdc <UART_WaitOnFlagUntilTimeout>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d001      	beq.n	80064c4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80064c0:	2303      	movs	r3, #3
 80064c2:	e006      	b.n	80064d2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2220      	movs	r2, #32
 80064c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80064cc:	2300      	movs	r3, #0
 80064ce:	e000      	b.n	80064d2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80064d0:	2302      	movs	r3, #2
  }
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3720      	adds	r7, #32
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}

080064da <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064da:	b580      	push	{r7, lr}
 80064dc:	b084      	sub	sp, #16
 80064de:	af00      	add	r7, sp, #0
 80064e0:	60f8      	str	r0, [r7, #12]
 80064e2:	60b9      	str	r1, [r7, #8]
 80064e4:	4613      	mov	r3, r2
 80064e6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	2b20      	cmp	r3, #32
 80064f2:	d11d      	bne.n	8006530 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d002      	beq.n	8006500 <HAL_UART_Receive_IT+0x26>
 80064fa:	88fb      	ldrh	r3, [r7, #6]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d101      	bne.n	8006504 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	e016      	b.n	8006532 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800650a:	2b01      	cmp	r3, #1
 800650c:	d101      	bne.n	8006512 <HAL_UART_Receive_IT+0x38>
 800650e:	2302      	movs	r3, #2
 8006510:	e00f      	b.n	8006532 <HAL_UART_Receive_IT+0x58>
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2201      	movs	r2, #1
 8006516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2200      	movs	r2, #0
 800651e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006520:	88fb      	ldrh	r3, [r7, #6]
 8006522:	461a      	mov	r2, r3
 8006524:	68b9      	ldr	r1, [r7, #8]
 8006526:	68f8      	ldr	r0, [r7, #12]
 8006528:	f000 fbc6 	bl	8006cb8 <UART_Start_Receive_IT>
 800652c:	4603      	mov	r3, r0
 800652e:	e000      	b.n	8006532 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006530:	2302      	movs	r3, #2
  }
}
 8006532:	4618      	mov	r0, r3
 8006534:	3710      	adds	r7, #16
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}

0800653a <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800653a:	b580      	push	{r7, lr}
 800653c:	b09a      	sub	sp, #104	; 0x68
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	330c      	adds	r3, #12
 8006548:	64bb      	str	r3, [r7, #72]	; 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800654a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800654c:	e853 3f00 	ldrex	r3, [r3]
 8006550:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006552:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006554:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006558:	667b      	str	r3, [r7, #100]	; 0x64
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	330c      	adds	r3, #12
 8006560:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006562:	657a      	str	r2, [r7, #84]	; 0x54
 8006564:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006566:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006568:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800656a:	e841 2300 	strex	r3, r2, [r1]
 800656e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006570:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006572:	2b00      	cmp	r3, #0
 8006574:	d1e5      	bne.n	8006542 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	3314      	adds	r3, #20
 800657c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800657e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006580:	e853 3f00 	ldrex	r3, [r3]
 8006584:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006588:	f023 0301 	bic.w	r3, r3, #1
 800658c:	663b      	str	r3, [r7, #96]	; 0x60
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	3314      	adds	r3, #20
 8006594:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006596:	643a      	str	r2, [r7, #64]	; 0x40
 8006598:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800659a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800659c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800659e:	e841 2300 	strex	r3, r2, [r1]
 80065a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80065a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d1e5      	bne.n	8006576 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d119      	bne.n	80065e6 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	330c      	adds	r3, #12
 80065b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ba:	6a3b      	ldr	r3, [r7, #32]
 80065bc:	e853 3f00 	ldrex	r3, [r3]
 80065c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80065c2:	69fb      	ldr	r3, [r7, #28]
 80065c4:	f023 0310 	bic.w	r3, r3, #16
 80065c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	330c      	adds	r3, #12
 80065d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80065d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80065d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065da:	e841 2300 	strex	r3, r2, [r1]
 80065de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d1e5      	bne.n	80065b2 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	695b      	ldr	r3, [r3, #20]
 80065ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065f0:	2b40      	cmp	r3, #64	; 0x40
 80065f2:	d136      	bne.n	8006662 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	3314      	adds	r3, #20
 80065fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	e853 3f00 	ldrex	r3, [r3]
 8006602:	60bb      	str	r3, [r7, #8]
   return(result);
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800660a:	65bb      	str	r3, [r7, #88]	; 0x58
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	3314      	adds	r3, #20
 8006612:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006614:	61ba      	str	r2, [r7, #24]
 8006616:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006618:	6979      	ldr	r1, [r7, #20]
 800661a:	69ba      	ldr	r2, [r7, #24]
 800661c:	e841 2300 	strex	r3, r2, [r1]
 8006620:	613b      	str	r3, [r7, #16]
   return(result);
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d1e5      	bne.n	80065f4 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800662c:	2b00      	cmp	r3, #0
 800662e:	d018      	beq.n	8006662 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006634:	2200      	movs	r2, #0
 8006636:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800663c:	4618      	mov	r0, r3
 800663e:	f7fb fea9 	bl	8002394 <HAL_DMA_Abort>
 8006642:	4603      	mov	r3, r0
 8006644:	2b00      	cmp	r3, #0
 8006646:	d00c      	beq.n	8006662 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800664c:	4618      	mov	r0, r3
 800664e:	f7fb ff41 	bl	80024d4 <HAL_DMA_GetError>
 8006652:	4603      	mov	r3, r0
 8006654:	2b20      	cmp	r3, #32
 8006656:	d104      	bne.n	8006662 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2210      	movs	r2, #16
 800665c:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 800665e:	2303      	movs	r3, #3
 8006660:	e00a      	b.n	8006678 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2220      	movs	r2, #32
 800666c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8006676:	2300      	movs	r3, #0
}
 8006678:	4618      	mov	r0, r3
 800667a:	3768      	adds	r7, #104	; 0x68
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b0ba      	sub	sp, #232	; 0xe8
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	695b      	ldr	r3, [r3, #20]
 80066a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80066a6:	2300      	movs	r3, #0
 80066a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80066ac:	2300      	movs	r3, #0
 80066ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80066b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066b6:	f003 030f 	and.w	r3, r3, #15
 80066ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80066be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d10f      	bne.n	80066e6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80066c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066ca:	f003 0320 	and.w	r3, r3, #32
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d009      	beq.n	80066e6 <HAL_UART_IRQHandler+0x66>
 80066d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066d6:	f003 0320 	and.w	r3, r3, #32
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d003      	beq.n	80066e6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 fc03 	bl	8006eea <UART_Receive_IT>
      return;
 80066e4:	e256      	b.n	8006b94 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80066e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	f000 80de 	beq.w	80068ac <HAL_UART_IRQHandler+0x22c>
 80066f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066f4:	f003 0301 	and.w	r3, r3, #1
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d106      	bne.n	800670a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80066fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006700:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006704:	2b00      	cmp	r3, #0
 8006706:	f000 80d1 	beq.w	80068ac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800670a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800670e:	f003 0301 	and.w	r3, r3, #1
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00b      	beq.n	800672e <HAL_UART_IRQHandler+0xae>
 8006716:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800671a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800671e:	2b00      	cmp	r3, #0
 8006720:	d005      	beq.n	800672e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006726:	f043 0201 	orr.w	r2, r3, #1
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800672e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006732:	f003 0304 	and.w	r3, r3, #4
 8006736:	2b00      	cmp	r3, #0
 8006738:	d00b      	beq.n	8006752 <HAL_UART_IRQHandler+0xd2>
 800673a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800673e:	f003 0301 	and.w	r3, r3, #1
 8006742:	2b00      	cmp	r3, #0
 8006744:	d005      	beq.n	8006752 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800674a:	f043 0202 	orr.w	r2, r3, #2
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006756:	f003 0302 	and.w	r3, r3, #2
 800675a:	2b00      	cmp	r3, #0
 800675c:	d00b      	beq.n	8006776 <HAL_UART_IRQHandler+0xf6>
 800675e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006762:	f003 0301 	and.w	r3, r3, #1
 8006766:	2b00      	cmp	r3, #0
 8006768:	d005      	beq.n	8006776 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676e:	f043 0204 	orr.w	r2, r3, #4
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800677a:	f003 0308 	and.w	r3, r3, #8
 800677e:	2b00      	cmp	r3, #0
 8006780:	d011      	beq.n	80067a6 <HAL_UART_IRQHandler+0x126>
 8006782:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006786:	f003 0320 	and.w	r3, r3, #32
 800678a:	2b00      	cmp	r3, #0
 800678c:	d105      	bne.n	800679a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800678e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006792:	f003 0301 	and.w	r3, r3, #1
 8006796:	2b00      	cmp	r3, #0
 8006798:	d005      	beq.n	80067a6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800679e:	f043 0208 	orr.w	r2, r3, #8
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	f000 81ed 	beq.w	8006b8a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80067b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067b4:	f003 0320 	and.w	r3, r3, #32
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d008      	beq.n	80067ce <HAL_UART_IRQHandler+0x14e>
 80067bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067c0:	f003 0320 	and.w	r3, r3, #32
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d002      	beq.n	80067ce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 fb8e 	bl	8006eea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	695b      	ldr	r3, [r3, #20]
 80067d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067d8:	2b40      	cmp	r3, #64	; 0x40
 80067da:	bf0c      	ite	eq
 80067dc:	2301      	moveq	r3, #1
 80067de:	2300      	movne	r3, #0
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ea:	f003 0308 	and.w	r3, r3, #8
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d103      	bne.n	80067fa <HAL_UART_IRQHandler+0x17a>
 80067f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d04f      	beq.n	800689a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 fa96 	bl	8006d2c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	695b      	ldr	r3, [r3, #20]
 8006806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800680a:	2b40      	cmp	r3, #64	; 0x40
 800680c:	d141      	bne.n	8006892 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	3314      	adds	r3, #20
 8006814:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006818:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800681c:	e853 3f00 	ldrex	r3, [r3]
 8006820:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006824:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006828:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800682c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	3314      	adds	r3, #20
 8006836:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800683a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800683e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006842:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006846:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800684a:	e841 2300 	strex	r3, r2, [r1]
 800684e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006852:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d1d9      	bne.n	800680e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800685e:	2b00      	cmp	r3, #0
 8006860:	d013      	beq.n	800688a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006866:	4a7d      	ldr	r2, [pc, #500]	; (8006a5c <HAL_UART_IRQHandler+0x3dc>)
 8006868:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800686e:	4618      	mov	r0, r3
 8006870:	f7fb fe00 	bl	8002474 <HAL_DMA_Abort_IT>
 8006874:	4603      	mov	r3, r0
 8006876:	2b00      	cmp	r3, #0
 8006878:	d016      	beq.n	80068a8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800687e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006884:	4610      	mov	r0, r2
 8006886:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006888:	e00e      	b.n	80068a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 f990 	bl	8006bb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006890:	e00a      	b.n	80068a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 f98c 	bl	8006bb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006898:	e006      	b.n	80068a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 f988 	bl	8006bb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80068a6:	e170      	b.n	8006b8a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068a8:	bf00      	nop
    return;
 80068aa:	e16e      	b.n	8006b8a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	f040 814a 	bne.w	8006b4a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80068b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068ba:	f003 0310 	and.w	r3, r3, #16
 80068be:	2b00      	cmp	r3, #0
 80068c0:	f000 8143 	beq.w	8006b4a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80068c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068c8:	f003 0310 	and.w	r3, r3, #16
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	f000 813c 	beq.w	8006b4a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80068d2:	2300      	movs	r3, #0
 80068d4:	60bb      	str	r3, [r7, #8]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	60bb      	str	r3, [r7, #8]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	60bb      	str	r3, [r7, #8]
 80068e6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	695b      	ldr	r3, [r3, #20]
 80068ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068f2:	2b40      	cmp	r3, #64	; 0x40
 80068f4:	f040 80b4 	bne.w	8006a60 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006904:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006908:	2b00      	cmp	r3, #0
 800690a:	f000 8140 	beq.w	8006b8e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006912:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006916:	429a      	cmp	r2, r3
 8006918:	f080 8139 	bcs.w	8006b8e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006922:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006928:	69db      	ldr	r3, [r3, #28]
 800692a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800692e:	f000 8088 	beq.w	8006a42 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	330c      	adds	r3, #12
 8006938:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800693c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006940:	e853 3f00 	ldrex	r3, [r3]
 8006944:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006948:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800694c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006950:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	330c      	adds	r3, #12
 800695a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800695e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006962:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006966:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800696a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800696e:	e841 2300 	strex	r3, r2, [r1]
 8006972:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006976:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800697a:	2b00      	cmp	r3, #0
 800697c:	d1d9      	bne.n	8006932 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	3314      	adds	r3, #20
 8006984:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006986:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006988:	e853 3f00 	ldrex	r3, [r3]
 800698c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800698e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006990:	f023 0301 	bic.w	r3, r3, #1
 8006994:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	3314      	adds	r3, #20
 800699e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80069a2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80069a6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80069aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80069ae:	e841 2300 	strex	r3, r2, [r1]
 80069b2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80069b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d1e1      	bne.n	800697e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	3314      	adds	r3, #20
 80069c0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069c4:	e853 3f00 	ldrex	r3, [r3]
 80069c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80069ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	3314      	adds	r3, #20
 80069da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80069de:	66fa      	str	r2, [r7, #108]	; 0x6c
 80069e0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80069e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80069e6:	e841 2300 	strex	r3, r2, [r1]
 80069ea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80069ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d1e3      	bne.n	80069ba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2220      	movs	r2, #32
 80069f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	330c      	adds	r3, #12
 8006a06:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a0a:	e853 3f00 	ldrex	r3, [r3]
 8006a0e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006a10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a12:	f023 0310 	bic.w	r3, r3, #16
 8006a16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	330c      	adds	r3, #12
 8006a20:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006a24:	65ba      	str	r2, [r7, #88]	; 0x58
 8006a26:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a28:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006a2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a2c:	e841 2300 	strex	r3, r2, [r1]
 8006a30:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006a32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d1e3      	bne.n	8006a00 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f7fb fca9 	bl	8002394 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	1ad3      	subs	r3, r2, r3
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	4619      	mov	r1, r3
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 f8b6 	bl	8006bc4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006a58:	e099      	b.n	8006b8e <HAL_UART_IRQHandler+0x50e>
 8006a5a:	bf00      	nop
 8006a5c:	08006df3 	.word	0x08006df3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	1ad3      	subs	r3, r2, r3
 8006a6c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	f000 808b 	beq.w	8006b92 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006a7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	f000 8086 	beq.w	8006b92 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	330c      	adds	r3, #12
 8006a8c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a90:	e853 3f00 	ldrex	r3, [r3]
 8006a94:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a9c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	330c      	adds	r3, #12
 8006aa6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006aaa:	647a      	str	r2, [r7, #68]	; 0x44
 8006aac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ab0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ab2:	e841 2300 	strex	r3, r2, [r1]
 8006ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006ab8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1e3      	bne.n	8006a86 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	3314      	adds	r3, #20
 8006ac4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac8:	e853 3f00 	ldrex	r3, [r3]
 8006acc:	623b      	str	r3, [r7, #32]
   return(result);
 8006ace:	6a3b      	ldr	r3, [r7, #32]
 8006ad0:	f023 0301 	bic.w	r3, r3, #1
 8006ad4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	3314      	adds	r3, #20
 8006ade:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006ae2:	633a      	str	r2, [r7, #48]	; 0x30
 8006ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ae8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006aea:	e841 2300 	strex	r3, r2, [r1]
 8006aee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d1e3      	bne.n	8006abe <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2220      	movs	r2, #32
 8006afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	330c      	adds	r3, #12
 8006b0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	e853 3f00 	ldrex	r3, [r3]
 8006b12:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f023 0310 	bic.w	r3, r3, #16
 8006b1a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	330c      	adds	r3, #12
 8006b24:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006b28:	61fa      	str	r2, [r7, #28]
 8006b2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b2c:	69b9      	ldr	r1, [r7, #24]
 8006b2e:	69fa      	ldr	r2, [r7, #28]
 8006b30:	e841 2300 	strex	r3, r2, [r1]
 8006b34:	617b      	str	r3, [r7, #20]
   return(result);
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d1e3      	bne.n	8006b04 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006b3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b40:	4619      	mov	r1, r3
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 f83e 	bl	8006bc4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006b48:	e023      	b.n	8006b92 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d009      	beq.n	8006b6a <HAL_UART_IRQHandler+0x4ea>
 8006b56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d003      	beq.n	8006b6a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 f959 	bl	8006e1a <UART_Transmit_IT>
    return;
 8006b68:	e014      	b.n	8006b94 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d00e      	beq.n	8006b94 <HAL_UART_IRQHandler+0x514>
 8006b76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d008      	beq.n	8006b94 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 f999 	bl	8006eba <UART_EndTransmit_IT>
    return;
 8006b88:	e004      	b.n	8006b94 <HAL_UART_IRQHandler+0x514>
    return;
 8006b8a:	bf00      	nop
 8006b8c:	e002      	b.n	8006b94 <HAL_UART_IRQHandler+0x514>
      return;
 8006b8e:	bf00      	nop
 8006b90:	e000      	b.n	8006b94 <HAL_UART_IRQHandler+0x514>
      return;
 8006b92:	bf00      	nop
  }
}
 8006b94:	37e8      	adds	r7, #232	; 0xe8
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop

08006b9c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006ba4:	bf00      	nop
 8006ba6:	370c      	adds	r7, #12
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006bb8:	bf00      	nop
 8006bba:	370c      	adds	r7, #12
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr

08006bc4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	460b      	mov	r3, r1
 8006bce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006bd0:	bf00      	nop
 8006bd2:	370c      	adds	r7, #12
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr

08006bdc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b090      	sub	sp, #64	; 0x40
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	60f8      	str	r0, [r7, #12]
 8006be4:	60b9      	str	r1, [r7, #8]
 8006be6:	603b      	str	r3, [r7, #0]
 8006be8:	4613      	mov	r3, r2
 8006bea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bec:	e050      	b.n	8006c90 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bf4:	d04c      	beq.n	8006c90 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006bf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d007      	beq.n	8006c0c <UART_WaitOnFlagUntilTimeout+0x30>
 8006bfc:	f7fb fab8 	bl	8002170 <HAL_GetTick>
 8006c00:	4602      	mov	r2, r0
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	1ad3      	subs	r3, r2, r3
 8006c06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d241      	bcs.n	8006c90 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	330c      	adds	r3, #12
 8006c12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c16:	e853 3f00 	ldrex	r3, [r3]
 8006c1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006c22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	330c      	adds	r3, #12
 8006c2a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006c2c:	637a      	str	r2, [r7, #52]	; 0x34
 8006c2e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c34:	e841 2300 	strex	r3, r2, [r1]
 8006c38:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d1e5      	bne.n	8006c0c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	3314      	adds	r3, #20
 8006c46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	e853 3f00 	ldrex	r3, [r3]
 8006c4e:	613b      	str	r3, [r7, #16]
   return(result);
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	f023 0301 	bic.w	r3, r3, #1
 8006c56:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	3314      	adds	r3, #20
 8006c5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c60:	623a      	str	r2, [r7, #32]
 8006c62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c64:	69f9      	ldr	r1, [r7, #28]
 8006c66:	6a3a      	ldr	r2, [r7, #32]
 8006c68:	e841 2300 	strex	r3, r2, [r1]
 8006c6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c6e:	69bb      	ldr	r3, [r7, #24]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d1e5      	bne.n	8006c40 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2220      	movs	r2, #32
 8006c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2220      	movs	r2, #32
 8006c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2200      	movs	r2, #0
 8006c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006c8c:	2303      	movs	r3, #3
 8006c8e:	e00f      	b.n	8006cb0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	4013      	ands	r3, r2
 8006c9a:	68ba      	ldr	r2, [r7, #8]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	bf0c      	ite	eq
 8006ca0:	2301      	moveq	r3, #1
 8006ca2:	2300      	movne	r3, #0
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	79fb      	ldrb	r3, [r7, #7]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d09f      	beq.n	8006bee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006cae:	2300      	movs	r3, #0
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3740      	adds	r7, #64	; 0x40
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}

08006cb8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b085      	sub	sp, #20
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	60b9      	str	r1, [r7, #8]
 8006cc2:	4613      	mov	r3, r2
 8006cc4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	68ba      	ldr	r2, [r7, #8]
 8006cca:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	88fa      	ldrh	r2, [r7, #6]
 8006cd0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	88fa      	ldrh	r2, [r7, #6]
 8006cd6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2222      	movs	r2, #34	; 0x22
 8006ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	68da      	ldr	r2, [r3, #12]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006cfc:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	695a      	ldr	r2, [r3, #20]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f042 0201 	orr.w	r2, r2, #1
 8006d0c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	68da      	ldr	r2, [r3, #12]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f042 0220 	orr.w	r2, r2, #32
 8006d1c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006d1e:	2300      	movs	r3, #0
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3714      	adds	r7, #20
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr

08006d2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b095      	sub	sp, #84	; 0x54
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	330c      	adds	r3, #12
 8006d3a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d3e:	e853 3f00 	ldrex	r3, [r3]
 8006d42:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d46:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	330c      	adds	r3, #12
 8006d52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006d54:	643a      	str	r2, [r7, #64]	; 0x40
 8006d56:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d58:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006d5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d5c:	e841 2300 	strex	r3, r2, [r1]
 8006d60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d1e5      	bne.n	8006d34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	3314      	adds	r3, #20
 8006d6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d70:	6a3b      	ldr	r3, [r7, #32]
 8006d72:	e853 3f00 	ldrex	r3, [r3]
 8006d76:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d78:	69fb      	ldr	r3, [r7, #28]
 8006d7a:	f023 0301 	bic.w	r3, r3, #1
 8006d7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	3314      	adds	r3, #20
 8006d86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d88:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d90:	e841 2300 	strex	r3, r2, [r1]
 8006d94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d1e5      	bne.n	8006d68 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d119      	bne.n	8006dd8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	330c      	adds	r3, #12
 8006daa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	e853 3f00 	ldrex	r3, [r3]
 8006db2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	f023 0310 	bic.w	r3, r3, #16
 8006dba:	647b      	str	r3, [r7, #68]	; 0x44
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	330c      	adds	r3, #12
 8006dc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006dc4:	61ba      	str	r2, [r7, #24]
 8006dc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc8:	6979      	ldr	r1, [r7, #20]
 8006dca:	69ba      	ldr	r2, [r7, #24]
 8006dcc:	e841 2300 	strex	r3, r2, [r1]
 8006dd0:	613b      	str	r3, [r7, #16]
   return(result);
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d1e5      	bne.n	8006da4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2220      	movs	r2, #32
 8006ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006de6:	bf00      	nop
 8006de8:	3754      	adds	r7, #84	; 0x54
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr

08006df2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006df2:	b580      	push	{r7, lr}
 8006df4:	b084      	sub	sp, #16
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dfe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2200      	movs	r2, #0
 8006e04:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e0c:	68f8      	ldr	r0, [r7, #12]
 8006e0e:	f7ff fecf 	bl	8006bb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e12:	bf00      	nop
 8006e14:	3710      	adds	r7, #16
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}

08006e1a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006e1a:	b480      	push	{r7}
 8006e1c:	b085      	sub	sp, #20
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	2b21      	cmp	r3, #33	; 0x21
 8006e2c:	d13e      	bne.n	8006eac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e36:	d114      	bne.n	8006e62 <UART_Transmit_IT+0x48>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	691b      	ldr	r3, [r3, #16]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d110      	bne.n	8006e62 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6a1b      	ldr	r3, [r3, #32]
 8006e44:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	881b      	ldrh	r3, [r3, #0]
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e54:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6a1b      	ldr	r3, [r3, #32]
 8006e5a:	1c9a      	adds	r2, r3, #2
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	621a      	str	r2, [r3, #32]
 8006e60:	e008      	b.n	8006e74 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6a1b      	ldr	r3, [r3, #32]
 8006e66:	1c59      	adds	r1, r3, #1
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	6211      	str	r1, [r2, #32]
 8006e6c:	781a      	ldrb	r2, [r3, #0]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	3b01      	subs	r3, #1
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	4619      	mov	r1, r3
 8006e82:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d10f      	bne.n	8006ea8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	68da      	ldr	r2, [r3, #12]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e96:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	68da      	ldr	r2, [r3, #12]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ea6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	e000      	b.n	8006eae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006eac:	2302      	movs	r3, #2
  }
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3714      	adds	r7, #20
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr

08006eba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006eba:	b580      	push	{r7, lr}
 8006ebc:	b082      	sub	sp, #8
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	68da      	ldr	r2, [r3, #12]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ed0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2220      	movs	r2, #32
 8006ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f7ff fe5e 	bl	8006b9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006ee0:	2300      	movs	r3, #0
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3708      	adds	r7, #8
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}

08006eea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006eea:	b580      	push	{r7, lr}
 8006eec:	b08c      	sub	sp, #48	; 0x30
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	2b22      	cmp	r3, #34	; 0x22
 8006efc:	f040 80ab 	bne.w	8007056 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f08:	d117      	bne.n	8006f3a <UART_Receive_IT+0x50>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	691b      	ldr	r3, [r3, #16]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d113      	bne.n	8006f3a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006f12:	2300      	movs	r3, #0
 8006f14:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f1a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f28:	b29a      	uxth	r2, r3
 8006f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f2c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f32:	1c9a      	adds	r2, r3, #2
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	629a      	str	r2, [r3, #40]	; 0x28
 8006f38:	e026      	b.n	8006f88 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006f40:	2300      	movs	r3, #0
 8006f42:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f4c:	d007      	beq.n	8006f5e <UART_Receive_IT+0x74>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d10a      	bne.n	8006f6c <UART_Receive_IT+0x82>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	691b      	ldr	r3, [r3, #16]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d106      	bne.n	8006f6c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	b2da      	uxtb	r2, r3
 8006f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f68:	701a      	strb	r2, [r3, #0]
 8006f6a:	e008      	b.n	8006f7e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	b2db      	uxtb	r3, r3
 8006f74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f78:	b2da      	uxtb	r2, r3
 8006f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f7c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f82:	1c5a      	adds	r2, r3, #1
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	3b01      	subs	r3, #1
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	4619      	mov	r1, r3
 8006f96:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d15a      	bne.n	8007052 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	68da      	ldr	r2, [r3, #12]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f022 0220 	bic.w	r2, r2, #32
 8006faa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	68da      	ldr	r2, [r3, #12]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006fba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	695a      	ldr	r2, [r3, #20]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f022 0201 	bic.w	r2, r2, #1
 8006fca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2220      	movs	r2, #32
 8006fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d135      	bne.n	8007048 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	330c      	adds	r3, #12
 8006fe8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	e853 3f00 	ldrex	r3, [r3]
 8006ff0:	613b      	str	r3, [r7, #16]
   return(result);
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	f023 0310 	bic.w	r3, r3, #16
 8006ff8:	627b      	str	r3, [r7, #36]	; 0x24
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	330c      	adds	r3, #12
 8007000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007002:	623a      	str	r2, [r7, #32]
 8007004:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007006:	69f9      	ldr	r1, [r7, #28]
 8007008:	6a3a      	ldr	r2, [r7, #32]
 800700a:	e841 2300 	strex	r3, r2, [r1]
 800700e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007010:	69bb      	ldr	r3, [r7, #24]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d1e5      	bne.n	8006fe2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f003 0310 	and.w	r3, r3, #16
 8007020:	2b10      	cmp	r3, #16
 8007022:	d10a      	bne.n	800703a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007024:	2300      	movs	r3, #0
 8007026:	60fb      	str	r3, [r7, #12]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	60fb      	str	r3, [r7, #12]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	60fb      	str	r3, [r7, #12]
 8007038:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800703e:	4619      	mov	r1, r3
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f7ff fdbf 	bl	8006bc4 <HAL_UARTEx_RxEventCallback>
 8007046:	e002      	b.n	800704e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f7fa f8df 	bl	800120c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800704e:	2300      	movs	r3, #0
 8007050:	e002      	b.n	8007058 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007052:	2300      	movs	r3, #0
 8007054:	e000      	b.n	8007058 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007056:	2302      	movs	r3, #2
  }
}
 8007058:	4618      	mov	r0, r3
 800705a:	3730      	adds	r7, #48	; 0x30
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007064:	b09f      	sub	sp, #124	; 0x7c
 8007066:	af00      	add	r7, sp, #0
 8007068:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800706a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	691b      	ldr	r3, [r3, #16]
 8007070:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007074:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007076:	68d9      	ldr	r1, [r3, #12]
 8007078:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	ea40 0301 	orr.w	r3, r0, r1
 8007080:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007082:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007084:	689a      	ldr	r2, [r3, #8]
 8007086:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007088:	691b      	ldr	r3, [r3, #16]
 800708a:	431a      	orrs	r2, r3
 800708c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800708e:	695b      	ldr	r3, [r3, #20]
 8007090:	431a      	orrs	r2, r3
 8007092:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007094:	69db      	ldr	r3, [r3, #28]
 8007096:	4313      	orrs	r3, r2
 8007098:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800709a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	68db      	ldr	r3, [r3, #12]
 80070a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80070a4:	f021 010c 	bic.w	r1, r1, #12
 80070a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80070ae:	430b      	orrs	r3, r1
 80070b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80070b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	695b      	ldr	r3, [r3, #20]
 80070b8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80070bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070be:	6999      	ldr	r1, [r3, #24]
 80070c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	ea40 0301 	orr.w	r3, r0, r1
 80070c8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80070ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	4bc5      	ldr	r3, [pc, #788]	; (80073e4 <UART_SetConfig+0x384>)
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d004      	beq.n	80070de <UART_SetConfig+0x7e>
 80070d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	4bc3      	ldr	r3, [pc, #780]	; (80073e8 <UART_SetConfig+0x388>)
 80070da:	429a      	cmp	r2, r3
 80070dc:	d103      	bne.n	80070e6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80070de:	f7fe fe29 	bl	8005d34 <HAL_RCC_GetPCLK2Freq>
 80070e2:	6778      	str	r0, [r7, #116]	; 0x74
 80070e4:	e002      	b.n	80070ec <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80070e6:	f7fe fe11 	bl	8005d0c <HAL_RCC_GetPCLK1Freq>
 80070ea:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070ee:	69db      	ldr	r3, [r3, #28]
 80070f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070f4:	f040 80b6 	bne.w	8007264 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80070f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070fa:	461c      	mov	r4, r3
 80070fc:	f04f 0500 	mov.w	r5, #0
 8007100:	4622      	mov	r2, r4
 8007102:	462b      	mov	r3, r5
 8007104:	1891      	adds	r1, r2, r2
 8007106:	6439      	str	r1, [r7, #64]	; 0x40
 8007108:	415b      	adcs	r3, r3
 800710a:	647b      	str	r3, [r7, #68]	; 0x44
 800710c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007110:	1912      	adds	r2, r2, r4
 8007112:	eb45 0303 	adc.w	r3, r5, r3
 8007116:	f04f 0000 	mov.w	r0, #0
 800711a:	f04f 0100 	mov.w	r1, #0
 800711e:	00d9      	lsls	r1, r3, #3
 8007120:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007124:	00d0      	lsls	r0, r2, #3
 8007126:	4602      	mov	r2, r0
 8007128:	460b      	mov	r3, r1
 800712a:	1911      	adds	r1, r2, r4
 800712c:	6639      	str	r1, [r7, #96]	; 0x60
 800712e:	416b      	adcs	r3, r5
 8007130:	667b      	str	r3, [r7, #100]	; 0x64
 8007132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	461a      	mov	r2, r3
 8007138:	f04f 0300 	mov.w	r3, #0
 800713c:	1891      	adds	r1, r2, r2
 800713e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007140:	415b      	adcs	r3, r3
 8007142:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007144:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007148:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800714c:	f7f9 f890 	bl	8000270 <__aeabi_uldivmod>
 8007150:	4602      	mov	r2, r0
 8007152:	460b      	mov	r3, r1
 8007154:	4ba5      	ldr	r3, [pc, #660]	; (80073ec <UART_SetConfig+0x38c>)
 8007156:	fba3 2302 	umull	r2, r3, r3, r2
 800715a:	095b      	lsrs	r3, r3, #5
 800715c:	011e      	lsls	r6, r3, #4
 800715e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007160:	461c      	mov	r4, r3
 8007162:	f04f 0500 	mov.w	r5, #0
 8007166:	4622      	mov	r2, r4
 8007168:	462b      	mov	r3, r5
 800716a:	1891      	adds	r1, r2, r2
 800716c:	6339      	str	r1, [r7, #48]	; 0x30
 800716e:	415b      	adcs	r3, r3
 8007170:	637b      	str	r3, [r7, #52]	; 0x34
 8007172:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007176:	1912      	adds	r2, r2, r4
 8007178:	eb45 0303 	adc.w	r3, r5, r3
 800717c:	f04f 0000 	mov.w	r0, #0
 8007180:	f04f 0100 	mov.w	r1, #0
 8007184:	00d9      	lsls	r1, r3, #3
 8007186:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800718a:	00d0      	lsls	r0, r2, #3
 800718c:	4602      	mov	r2, r0
 800718e:	460b      	mov	r3, r1
 8007190:	1911      	adds	r1, r2, r4
 8007192:	65b9      	str	r1, [r7, #88]	; 0x58
 8007194:	416b      	adcs	r3, r5
 8007196:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007198:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	461a      	mov	r2, r3
 800719e:	f04f 0300 	mov.w	r3, #0
 80071a2:	1891      	adds	r1, r2, r2
 80071a4:	62b9      	str	r1, [r7, #40]	; 0x28
 80071a6:	415b      	adcs	r3, r3
 80071a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80071ae:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80071b2:	f7f9 f85d 	bl	8000270 <__aeabi_uldivmod>
 80071b6:	4602      	mov	r2, r0
 80071b8:	460b      	mov	r3, r1
 80071ba:	4b8c      	ldr	r3, [pc, #560]	; (80073ec <UART_SetConfig+0x38c>)
 80071bc:	fba3 1302 	umull	r1, r3, r3, r2
 80071c0:	095b      	lsrs	r3, r3, #5
 80071c2:	2164      	movs	r1, #100	; 0x64
 80071c4:	fb01 f303 	mul.w	r3, r1, r3
 80071c8:	1ad3      	subs	r3, r2, r3
 80071ca:	00db      	lsls	r3, r3, #3
 80071cc:	3332      	adds	r3, #50	; 0x32
 80071ce:	4a87      	ldr	r2, [pc, #540]	; (80073ec <UART_SetConfig+0x38c>)
 80071d0:	fba2 2303 	umull	r2, r3, r2, r3
 80071d4:	095b      	lsrs	r3, r3, #5
 80071d6:	005b      	lsls	r3, r3, #1
 80071d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80071dc:	441e      	add	r6, r3
 80071de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071e0:	4618      	mov	r0, r3
 80071e2:	f04f 0100 	mov.w	r1, #0
 80071e6:	4602      	mov	r2, r0
 80071e8:	460b      	mov	r3, r1
 80071ea:	1894      	adds	r4, r2, r2
 80071ec:	623c      	str	r4, [r7, #32]
 80071ee:	415b      	adcs	r3, r3
 80071f0:	627b      	str	r3, [r7, #36]	; 0x24
 80071f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80071f6:	1812      	adds	r2, r2, r0
 80071f8:	eb41 0303 	adc.w	r3, r1, r3
 80071fc:	f04f 0400 	mov.w	r4, #0
 8007200:	f04f 0500 	mov.w	r5, #0
 8007204:	00dd      	lsls	r5, r3, #3
 8007206:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800720a:	00d4      	lsls	r4, r2, #3
 800720c:	4622      	mov	r2, r4
 800720e:	462b      	mov	r3, r5
 8007210:	1814      	adds	r4, r2, r0
 8007212:	653c      	str	r4, [r7, #80]	; 0x50
 8007214:	414b      	adcs	r3, r1
 8007216:	657b      	str	r3, [r7, #84]	; 0x54
 8007218:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	461a      	mov	r2, r3
 800721e:	f04f 0300 	mov.w	r3, #0
 8007222:	1891      	adds	r1, r2, r2
 8007224:	61b9      	str	r1, [r7, #24]
 8007226:	415b      	adcs	r3, r3
 8007228:	61fb      	str	r3, [r7, #28]
 800722a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800722e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007232:	f7f9 f81d 	bl	8000270 <__aeabi_uldivmod>
 8007236:	4602      	mov	r2, r0
 8007238:	460b      	mov	r3, r1
 800723a:	4b6c      	ldr	r3, [pc, #432]	; (80073ec <UART_SetConfig+0x38c>)
 800723c:	fba3 1302 	umull	r1, r3, r3, r2
 8007240:	095b      	lsrs	r3, r3, #5
 8007242:	2164      	movs	r1, #100	; 0x64
 8007244:	fb01 f303 	mul.w	r3, r1, r3
 8007248:	1ad3      	subs	r3, r2, r3
 800724a:	00db      	lsls	r3, r3, #3
 800724c:	3332      	adds	r3, #50	; 0x32
 800724e:	4a67      	ldr	r2, [pc, #412]	; (80073ec <UART_SetConfig+0x38c>)
 8007250:	fba2 2303 	umull	r2, r3, r2, r3
 8007254:	095b      	lsrs	r3, r3, #5
 8007256:	f003 0207 	and.w	r2, r3, #7
 800725a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4432      	add	r2, r6
 8007260:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007262:	e0b9      	b.n	80073d8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007264:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007266:	461c      	mov	r4, r3
 8007268:	f04f 0500 	mov.w	r5, #0
 800726c:	4622      	mov	r2, r4
 800726e:	462b      	mov	r3, r5
 8007270:	1891      	adds	r1, r2, r2
 8007272:	6139      	str	r1, [r7, #16]
 8007274:	415b      	adcs	r3, r3
 8007276:	617b      	str	r3, [r7, #20]
 8007278:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800727c:	1912      	adds	r2, r2, r4
 800727e:	eb45 0303 	adc.w	r3, r5, r3
 8007282:	f04f 0000 	mov.w	r0, #0
 8007286:	f04f 0100 	mov.w	r1, #0
 800728a:	00d9      	lsls	r1, r3, #3
 800728c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007290:	00d0      	lsls	r0, r2, #3
 8007292:	4602      	mov	r2, r0
 8007294:	460b      	mov	r3, r1
 8007296:	eb12 0804 	adds.w	r8, r2, r4
 800729a:	eb43 0905 	adc.w	r9, r3, r5
 800729e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	4618      	mov	r0, r3
 80072a4:	f04f 0100 	mov.w	r1, #0
 80072a8:	f04f 0200 	mov.w	r2, #0
 80072ac:	f04f 0300 	mov.w	r3, #0
 80072b0:	008b      	lsls	r3, r1, #2
 80072b2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80072b6:	0082      	lsls	r2, r0, #2
 80072b8:	4640      	mov	r0, r8
 80072ba:	4649      	mov	r1, r9
 80072bc:	f7f8 ffd8 	bl	8000270 <__aeabi_uldivmod>
 80072c0:	4602      	mov	r2, r0
 80072c2:	460b      	mov	r3, r1
 80072c4:	4b49      	ldr	r3, [pc, #292]	; (80073ec <UART_SetConfig+0x38c>)
 80072c6:	fba3 2302 	umull	r2, r3, r3, r2
 80072ca:	095b      	lsrs	r3, r3, #5
 80072cc:	011e      	lsls	r6, r3, #4
 80072ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072d0:	4618      	mov	r0, r3
 80072d2:	f04f 0100 	mov.w	r1, #0
 80072d6:	4602      	mov	r2, r0
 80072d8:	460b      	mov	r3, r1
 80072da:	1894      	adds	r4, r2, r2
 80072dc:	60bc      	str	r4, [r7, #8]
 80072de:	415b      	adcs	r3, r3
 80072e0:	60fb      	str	r3, [r7, #12]
 80072e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80072e6:	1812      	adds	r2, r2, r0
 80072e8:	eb41 0303 	adc.w	r3, r1, r3
 80072ec:	f04f 0400 	mov.w	r4, #0
 80072f0:	f04f 0500 	mov.w	r5, #0
 80072f4:	00dd      	lsls	r5, r3, #3
 80072f6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80072fa:	00d4      	lsls	r4, r2, #3
 80072fc:	4622      	mov	r2, r4
 80072fe:	462b      	mov	r3, r5
 8007300:	1814      	adds	r4, r2, r0
 8007302:	64bc      	str	r4, [r7, #72]	; 0x48
 8007304:	414b      	adcs	r3, r1
 8007306:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007308:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	4618      	mov	r0, r3
 800730e:	f04f 0100 	mov.w	r1, #0
 8007312:	f04f 0200 	mov.w	r2, #0
 8007316:	f04f 0300 	mov.w	r3, #0
 800731a:	008b      	lsls	r3, r1, #2
 800731c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007320:	0082      	lsls	r2, r0, #2
 8007322:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007326:	f7f8 ffa3 	bl	8000270 <__aeabi_uldivmod>
 800732a:	4602      	mov	r2, r0
 800732c:	460b      	mov	r3, r1
 800732e:	4b2f      	ldr	r3, [pc, #188]	; (80073ec <UART_SetConfig+0x38c>)
 8007330:	fba3 1302 	umull	r1, r3, r3, r2
 8007334:	095b      	lsrs	r3, r3, #5
 8007336:	2164      	movs	r1, #100	; 0x64
 8007338:	fb01 f303 	mul.w	r3, r1, r3
 800733c:	1ad3      	subs	r3, r2, r3
 800733e:	011b      	lsls	r3, r3, #4
 8007340:	3332      	adds	r3, #50	; 0x32
 8007342:	4a2a      	ldr	r2, [pc, #168]	; (80073ec <UART_SetConfig+0x38c>)
 8007344:	fba2 2303 	umull	r2, r3, r2, r3
 8007348:	095b      	lsrs	r3, r3, #5
 800734a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800734e:	441e      	add	r6, r3
 8007350:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007352:	4618      	mov	r0, r3
 8007354:	f04f 0100 	mov.w	r1, #0
 8007358:	4602      	mov	r2, r0
 800735a:	460b      	mov	r3, r1
 800735c:	1894      	adds	r4, r2, r2
 800735e:	603c      	str	r4, [r7, #0]
 8007360:	415b      	adcs	r3, r3
 8007362:	607b      	str	r3, [r7, #4]
 8007364:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007368:	1812      	adds	r2, r2, r0
 800736a:	eb41 0303 	adc.w	r3, r1, r3
 800736e:	f04f 0400 	mov.w	r4, #0
 8007372:	f04f 0500 	mov.w	r5, #0
 8007376:	00dd      	lsls	r5, r3, #3
 8007378:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800737c:	00d4      	lsls	r4, r2, #3
 800737e:	4622      	mov	r2, r4
 8007380:	462b      	mov	r3, r5
 8007382:	eb12 0a00 	adds.w	sl, r2, r0
 8007386:	eb43 0b01 	adc.w	fp, r3, r1
 800738a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	4618      	mov	r0, r3
 8007390:	f04f 0100 	mov.w	r1, #0
 8007394:	f04f 0200 	mov.w	r2, #0
 8007398:	f04f 0300 	mov.w	r3, #0
 800739c:	008b      	lsls	r3, r1, #2
 800739e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80073a2:	0082      	lsls	r2, r0, #2
 80073a4:	4650      	mov	r0, sl
 80073a6:	4659      	mov	r1, fp
 80073a8:	f7f8 ff62 	bl	8000270 <__aeabi_uldivmod>
 80073ac:	4602      	mov	r2, r0
 80073ae:	460b      	mov	r3, r1
 80073b0:	4b0e      	ldr	r3, [pc, #56]	; (80073ec <UART_SetConfig+0x38c>)
 80073b2:	fba3 1302 	umull	r1, r3, r3, r2
 80073b6:	095b      	lsrs	r3, r3, #5
 80073b8:	2164      	movs	r1, #100	; 0x64
 80073ba:	fb01 f303 	mul.w	r3, r1, r3
 80073be:	1ad3      	subs	r3, r2, r3
 80073c0:	011b      	lsls	r3, r3, #4
 80073c2:	3332      	adds	r3, #50	; 0x32
 80073c4:	4a09      	ldr	r2, [pc, #36]	; (80073ec <UART_SetConfig+0x38c>)
 80073c6:	fba2 2303 	umull	r2, r3, r2, r3
 80073ca:	095b      	lsrs	r3, r3, #5
 80073cc:	f003 020f 	and.w	r2, r3, #15
 80073d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4432      	add	r2, r6
 80073d6:	609a      	str	r2, [r3, #8]
}
 80073d8:	bf00      	nop
 80073da:	377c      	adds	r7, #124	; 0x7c
 80073dc:	46bd      	mov	sp, r7
 80073de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073e2:	bf00      	nop
 80073e4:	40011000 	.word	0x40011000
 80073e8:	40011400 	.word	0x40011400
 80073ec:	51eb851f 	.word	0x51eb851f

080073f0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b085      	sub	sp, #20
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	4603      	mov	r3, r0
 80073f8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80073fa:	2300      	movs	r3, #0
 80073fc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80073fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007402:	2b84      	cmp	r3, #132	; 0x84
 8007404:	d005      	beq.n	8007412 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007406:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	4413      	add	r3, r2
 800740e:	3303      	adds	r3, #3
 8007410:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007412:	68fb      	ldr	r3, [r7, #12]
}
 8007414:	4618      	mov	r0, r3
 8007416:	3714      	adds	r7, #20
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007424:	f000 faf6 	bl	8007a14 <vTaskStartScheduler>
  
  return osOK;
 8007428:	2300      	movs	r3, #0
}
 800742a:	4618      	mov	r0, r3
 800742c:	bd80      	pop	{r7, pc}

0800742e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800742e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007430:	b089      	sub	sp, #36	; 0x24
 8007432:	af04      	add	r7, sp, #16
 8007434:	6078      	str	r0, [r7, #4]
 8007436:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	695b      	ldr	r3, [r3, #20]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d020      	beq.n	8007482 <osThreadCreate+0x54>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	699b      	ldr	r3, [r3, #24]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d01c      	beq.n	8007482 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	685c      	ldr	r4, [r3, #4]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681d      	ldr	r5, [r3, #0]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	691e      	ldr	r6, [r3, #16]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800745a:	4618      	mov	r0, r3
 800745c:	f7ff ffc8 	bl	80073f0 <makeFreeRtosPriority>
 8007460:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	695b      	ldr	r3, [r3, #20]
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800746a:	9202      	str	r2, [sp, #8]
 800746c:	9301      	str	r3, [sp, #4]
 800746e:	9100      	str	r1, [sp, #0]
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	4632      	mov	r2, r6
 8007474:	4629      	mov	r1, r5
 8007476:	4620      	mov	r0, r4
 8007478:	f000 f8ed 	bl	8007656 <xTaskCreateStatic>
 800747c:	4603      	mov	r3, r0
 800747e:	60fb      	str	r3, [r7, #12]
 8007480:	e01c      	b.n	80074bc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	685c      	ldr	r4, [r3, #4]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800748e:	b29e      	uxth	r6, r3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007496:	4618      	mov	r0, r3
 8007498:	f7ff ffaa 	bl	80073f0 <makeFreeRtosPriority>
 800749c:	4602      	mov	r2, r0
 800749e:	f107 030c 	add.w	r3, r7, #12
 80074a2:	9301      	str	r3, [sp, #4]
 80074a4:	9200      	str	r2, [sp, #0]
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	4632      	mov	r2, r6
 80074aa:	4629      	mov	r1, r5
 80074ac:	4620      	mov	r0, r4
 80074ae:	f000 f92f 	bl	8007710 <xTaskCreate>
 80074b2:	4603      	mov	r3, r0
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d001      	beq.n	80074bc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80074b8:	2300      	movs	r3, #0
 80074ba:	e000      	b.n	80074be <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80074bc:	68fb      	ldr	r3, [r7, #12]
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3714      	adds	r7, #20
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080074c6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80074c6:	b580      	push	{r7, lr}
 80074c8:	b084      	sub	sp, #16
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d001      	beq.n	80074dc <osDelay+0x16>
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	e000      	b.n	80074de <osDelay+0x18>
 80074dc:	2301      	movs	r3, #1
 80074de:	4618      	mov	r0, r3
 80074e0:	f000 fa64 	bl	80079ac <vTaskDelay>
  
  return osOK;
 80074e4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3710      	adds	r7, #16
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}

080074ee <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80074ee:	b480      	push	{r7}
 80074f0:	b083      	sub	sp, #12
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f103 0208 	add.w	r2, r3, #8
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f04f 32ff 	mov.w	r2, #4294967295
 8007506:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f103 0208 	add.w	r2, r3, #8
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f103 0208 	add.w	r2, r3, #8
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007522:	bf00      	nop
 8007524:	370c      	adds	r7, #12
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr

0800752e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800752e:	b480      	push	{r7}
 8007530:	b083      	sub	sp, #12
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800753c:	bf00      	nop
 800753e:	370c      	adds	r7, #12
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr

08007548 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007548:	b480      	push	{r7}
 800754a:	b085      	sub	sp, #20
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	68fa      	ldr	r2, [r7, #12]
 800755c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	689a      	ldr	r2, [r3, #8]
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	683a      	ldr	r2, [r7, #0]
 800756c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	683a      	ldr	r2, [r7, #0]
 8007572:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	1c5a      	adds	r2, r3, #1
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	601a      	str	r2, [r3, #0]
}
 8007584:	bf00      	nop
 8007586:	3714      	adds	r7, #20
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007590:	b480      	push	{r7}
 8007592:	b085      	sub	sp, #20
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075a6:	d103      	bne.n	80075b0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	691b      	ldr	r3, [r3, #16]
 80075ac:	60fb      	str	r3, [r7, #12]
 80075ae:	e00c      	b.n	80075ca <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	3308      	adds	r3, #8
 80075b4:	60fb      	str	r3, [r7, #12]
 80075b6:	e002      	b.n	80075be <vListInsert+0x2e>
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	60fb      	str	r3, [r7, #12]
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	68ba      	ldr	r2, [r7, #8]
 80075c6:	429a      	cmp	r2, r3
 80075c8:	d2f6      	bcs.n	80075b8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	685a      	ldr	r2, [r3, #4]
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	683a      	ldr	r2, [r7, #0]
 80075d8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	68fa      	ldr	r2, [r7, #12]
 80075de:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	683a      	ldr	r2, [r7, #0]
 80075e4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	687a      	ldr	r2, [r7, #4]
 80075ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	1c5a      	adds	r2, r3, #1
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	601a      	str	r2, [r3, #0]
}
 80075f6:	bf00      	nop
 80075f8:	3714      	adds	r7, #20
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr

08007602 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007602:	b480      	push	{r7}
 8007604:	b085      	sub	sp, #20
 8007606:	af00      	add	r7, sp, #0
 8007608:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	691b      	ldr	r3, [r3, #16]
 800760e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	6892      	ldr	r2, [r2, #8]
 8007618:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	6852      	ldr	r2, [r2, #4]
 8007622:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	429a      	cmp	r2, r3
 800762c:	d103      	bne.n	8007636 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	689a      	ldr	r2, [r3, #8]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2200      	movs	r2, #0
 800763a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	1e5a      	subs	r2, r3, #1
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
}
 800764a:	4618      	mov	r0, r3
 800764c:	3714      	adds	r7, #20
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr

08007656 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007656:	b580      	push	{r7, lr}
 8007658:	b08e      	sub	sp, #56	; 0x38
 800765a:	af04      	add	r7, sp, #16
 800765c:	60f8      	str	r0, [r7, #12]
 800765e:	60b9      	str	r1, [r7, #8]
 8007660:	607a      	str	r2, [r7, #4]
 8007662:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007666:	2b00      	cmp	r3, #0
 8007668:	d10a      	bne.n	8007680 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800766a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800766e:	f383 8811 	msr	BASEPRI, r3
 8007672:	f3bf 8f6f 	isb	sy
 8007676:	f3bf 8f4f 	dsb	sy
 800767a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800767c:	bf00      	nop
 800767e:	e7fe      	b.n	800767e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007682:	2b00      	cmp	r3, #0
 8007684:	d10a      	bne.n	800769c <xTaskCreateStatic+0x46>
	__asm volatile
 8007686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800768a:	f383 8811 	msr	BASEPRI, r3
 800768e:	f3bf 8f6f 	isb	sy
 8007692:	f3bf 8f4f 	dsb	sy
 8007696:	61fb      	str	r3, [r7, #28]
}
 8007698:	bf00      	nop
 800769a:	e7fe      	b.n	800769a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800769c:	23b4      	movs	r3, #180	; 0xb4
 800769e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	2bb4      	cmp	r3, #180	; 0xb4
 80076a4:	d00a      	beq.n	80076bc <xTaskCreateStatic+0x66>
	__asm volatile
 80076a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076aa:	f383 8811 	msr	BASEPRI, r3
 80076ae:	f3bf 8f6f 	isb	sy
 80076b2:	f3bf 8f4f 	dsb	sy
 80076b6:	61bb      	str	r3, [r7, #24]
}
 80076b8:	bf00      	nop
 80076ba:	e7fe      	b.n	80076ba <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80076bc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80076be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d01e      	beq.n	8007702 <xTaskCreateStatic+0xac>
 80076c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d01b      	beq.n	8007702 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80076ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076cc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80076ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80076d2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80076d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d6:	2202      	movs	r2, #2
 80076d8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80076dc:	2300      	movs	r3, #0
 80076de:	9303      	str	r3, [sp, #12]
 80076e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e2:	9302      	str	r3, [sp, #8]
 80076e4:	f107 0314 	add.w	r3, r7, #20
 80076e8:	9301      	str	r3, [sp, #4]
 80076ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ec:	9300      	str	r3, [sp, #0]
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	687a      	ldr	r2, [r7, #4]
 80076f2:	68b9      	ldr	r1, [r7, #8]
 80076f4:	68f8      	ldr	r0, [r7, #12]
 80076f6:	f000 f851 	bl	800779c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80076fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80076fc:	f000 f8ec 	bl	80078d8 <prvAddNewTaskToReadyList>
 8007700:	e001      	b.n	8007706 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007702:	2300      	movs	r3, #0
 8007704:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007706:	697b      	ldr	r3, [r7, #20]
	}
 8007708:	4618      	mov	r0, r3
 800770a:	3728      	adds	r7, #40	; 0x28
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007710:	b580      	push	{r7, lr}
 8007712:	b08c      	sub	sp, #48	; 0x30
 8007714:	af04      	add	r7, sp, #16
 8007716:	60f8      	str	r0, [r7, #12]
 8007718:	60b9      	str	r1, [r7, #8]
 800771a:	603b      	str	r3, [r7, #0]
 800771c:	4613      	mov	r3, r2
 800771e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007720:	88fb      	ldrh	r3, [r7, #6]
 8007722:	009b      	lsls	r3, r3, #2
 8007724:	4618      	mov	r0, r3
 8007726:	f000 feef 	bl	8008508 <pvPortMalloc>
 800772a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d00e      	beq.n	8007750 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007732:	20b4      	movs	r0, #180	; 0xb4
 8007734:	f000 fee8 	bl	8008508 <pvPortMalloc>
 8007738:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800773a:	69fb      	ldr	r3, [r7, #28]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d003      	beq.n	8007748 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	697a      	ldr	r2, [r7, #20]
 8007744:	631a      	str	r2, [r3, #48]	; 0x30
 8007746:	e005      	b.n	8007754 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007748:	6978      	ldr	r0, [r7, #20]
 800774a:	f000 ffa9 	bl	80086a0 <vPortFree>
 800774e:	e001      	b.n	8007754 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007750:	2300      	movs	r3, #0
 8007752:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007754:	69fb      	ldr	r3, [r7, #28]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d017      	beq.n	800778a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800775a:	69fb      	ldr	r3, [r7, #28]
 800775c:	2200      	movs	r2, #0
 800775e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007762:	88fa      	ldrh	r2, [r7, #6]
 8007764:	2300      	movs	r3, #0
 8007766:	9303      	str	r3, [sp, #12]
 8007768:	69fb      	ldr	r3, [r7, #28]
 800776a:	9302      	str	r3, [sp, #8]
 800776c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800776e:	9301      	str	r3, [sp, #4]
 8007770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007772:	9300      	str	r3, [sp, #0]
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	68b9      	ldr	r1, [r7, #8]
 8007778:	68f8      	ldr	r0, [r7, #12]
 800777a:	f000 f80f 	bl	800779c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800777e:	69f8      	ldr	r0, [r7, #28]
 8007780:	f000 f8aa 	bl	80078d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007784:	2301      	movs	r3, #1
 8007786:	61bb      	str	r3, [r7, #24]
 8007788:	e002      	b.n	8007790 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800778a:	f04f 33ff 	mov.w	r3, #4294967295
 800778e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007790:	69bb      	ldr	r3, [r7, #24]
	}
 8007792:	4618      	mov	r0, r3
 8007794:	3720      	adds	r7, #32
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
	...

0800779c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b088      	sub	sp, #32
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	60f8      	str	r0, [r7, #12]
 80077a4:	60b9      	str	r1, [r7, #8]
 80077a6:	607a      	str	r2, [r7, #4]
 80077a8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80077aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80077b4:	3b01      	subs	r3, #1
 80077b6:	009b      	lsls	r3, r3, #2
 80077b8:	4413      	add	r3, r2
 80077ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80077bc:	69bb      	ldr	r3, [r7, #24]
 80077be:	f023 0307 	bic.w	r3, r3, #7
 80077c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80077c4:	69bb      	ldr	r3, [r7, #24]
 80077c6:	f003 0307 	and.w	r3, r3, #7
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d00a      	beq.n	80077e4 <prvInitialiseNewTask+0x48>
	__asm volatile
 80077ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d2:	f383 8811 	msr	BASEPRI, r3
 80077d6:	f3bf 8f6f 	isb	sy
 80077da:	f3bf 8f4f 	dsb	sy
 80077de:	617b      	str	r3, [r7, #20]
}
 80077e0:	bf00      	nop
 80077e2:	e7fe      	b.n	80077e2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d01f      	beq.n	800782a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80077ea:	2300      	movs	r3, #0
 80077ec:	61fb      	str	r3, [r7, #28]
 80077ee:	e012      	b.n	8007816 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80077f0:	68ba      	ldr	r2, [r7, #8]
 80077f2:	69fb      	ldr	r3, [r7, #28]
 80077f4:	4413      	add	r3, r2
 80077f6:	7819      	ldrb	r1, [r3, #0]
 80077f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077fa:	69fb      	ldr	r3, [r7, #28]
 80077fc:	4413      	add	r3, r2
 80077fe:	3334      	adds	r3, #52	; 0x34
 8007800:	460a      	mov	r2, r1
 8007802:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007804:	68ba      	ldr	r2, [r7, #8]
 8007806:	69fb      	ldr	r3, [r7, #28]
 8007808:	4413      	add	r3, r2
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d006      	beq.n	800781e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007810:	69fb      	ldr	r3, [r7, #28]
 8007812:	3301      	adds	r3, #1
 8007814:	61fb      	str	r3, [r7, #28]
 8007816:	69fb      	ldr	r3, [r7, #28]
 8007818:	2b0f      	cmp	r3, #15
 800781a:	d9e9      	bls.n	80077f0 <prvInitialiseNewTask+0x54>
 800781c:	e000      	b.n	8007820 <prvInitialiseNewTask+0x84>
			{
				break;
 800781e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007822:	2200      	movs	r2, #0
 8007824:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007828:	e003      	b.n	8007832 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800782a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782c:	2200      	movs	r2, #0
 800782e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007834:	2b06      	cmp	r3, #6
 8007836:	d901      	bls.n	800783c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007838:	2306      	movs	r3, #6
 800783a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800783c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800783e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007840:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007844:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007846:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800784a:	2200      	movs	r2, #0
 800784c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800784e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007850:	3304      	adds	r3, #4
 8007852:	4618      	mov	r0, r3
 8007854:	f7ff fe6b 	bl	800752e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800785a:	3318      	adds	r3, #24
 800785c:	4618      	mov	r0, r3
 800785e:	f7ff fe66 	bl	800752e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007864:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007866:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800786a:	f1c3 0207 	rsb	r2, r3, #7
 800786e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007870:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007874:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007876:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800787a:	2200      	movs	r2, #0
 800787c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007882:	2200      	movs	r2, #0
 8007884:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800788a:	334c      	adds	r3, #76	; 0x4c
 800788c:	2260      	movs	r2, #96	; 0x60
 800788e:	2100      	movs	r1, #0
 8007890:	4618      	mov	r0, r3
 8007892:	f001 f877 	bl	8008984 <memset>
 8007896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007898:	4a0c      	ldr	r2, [pc, #48]	; (80078cc <prvInitialiseNewTask+0x130>)
 800789a:	651a      	str	r2, [r3, #80]	; 0x50
 800789c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800789e:	4a0c      	ldr	r2, [pc, #48]	; (80078d0 <prvInitialiseNewTask+0x134>)
 80078a0:	655a      	str	r2, [r3, #84]	; 0x54
 80078a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a4:	4a0b      	ldr	r2, [pc, #44]	; (80078d4 <prvInitialiseNewTask+0x138>)
 80078a6:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80078a8:	683a      	ldr	r2, [r7, #0]
 80078aa:	68f9      	ldr	r1, [r7, #12]
 80078ac:	69b8      	ldr	r0, [r7, #24]
 80078ae:	f000 fc1f 	bl	80080f0 <pxPortInitialiseStack>
 80078b2:	4602      	mov	r2, r0
 80078b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80078b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d002      	beq.n	80078c4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80078be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078c2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80078c4:	bf00      	nop
 80078c6:	3720      	adds	r7, #32
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}
 80078cc:	0800a8bc 	.word	0x0800a8bc
 80078d0:	0800a8dc 	.word	0x0800a8dc
 80078d4:	0800a89c 	.word	0x0800a89c

080078d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b082      	sub	sp, #8
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80078e0:	f000 fd30 	bl	8008344 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80078e4:	4b2a      	ldr	r3, [pc, #168]	; (8007990 <prvAddNewTaskToReadyList+0xb8>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	3301      	adds	r3, #1
 80078ea:	4a29      	ldr	r2, [pc, #164]	; (8007990 <prvAddNewTaskToReadyList+0xb8>)
 80078ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80078ee:	4b29      	ldr	r3, [pc, #164]	; (8007994 <prvAddNewTaskToReadyList+0xbc>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d109      	bne.n	800790a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80078f6:	4a27      	ldr	r2, [pc, #156]	; (8007994 <prvAddNewTaskToReadyList+0xbc>)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80078fc:	4b24      	ldr	r3, [pc, #144]	; (8007990 <prvAddNewTaskToReadyList+0xb8>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	2b01      	cmp	r3, #1
 8007902:	d110      	bne.n	8007926 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007904:	f000 facc 	bl	8007ea0 <prvInitialiseTaskLists>
 8007908:	e00d      	b.n	8007926 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800790a:	4b23      	ldr	r3, [pc, #140]	; (8007998 <prvAddNewTaskToReadyList+0xc0>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d109      	bne.n	8007926 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007912:	4b20      	ldr	r3, [pc, #128]	; (8007994 <prvAddNewTaskToReadyList+0xbc>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800791c:	429a      	cmp	r2, r3
 800791e:	d802      	bhi.n	8007926 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007920:	4a1c      	ldr	r2, [pc, #112]	; (8007994 <prvAddNewTaskToReadyList+0xbc>)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007926:	4b1d      	ldr	r3, [pc, #116]	; (800799c <prvAddNewTaskToReadyList+0xc4>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	3301      	adds	r3, #1
 800792c:	4a1b      	ldr	r2, [pc, #108]	; (800799c <prvAddNewTaskToReadyList+0xc4>)
 800792e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007934:	2201      	movs	r2, #1
 8007936:	409a      	lsls	r2, r3
 8007938:	4b19      	ldr	r3, [pc, #100]	; (80079a0 <prvAddNewTaskToReadyList+0xc8>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4313      	orrs	r3, r2
 800793e:	4a18      	ldr	r2, [pc, #96]	; (80079a0 <prvAddNewTaskToReadyList+0xc8>)
 8007940:	6013      	str	r3, [r2, #0]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007946:	4613      	mov	r3, r2
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	4413      	add	r3, r2
 800794c:	009b      	lsls	r3, r3, #2
 800794e:	4a15      	ldr	r2, [pc, #84]	; (80079a4 <prvAddNewTaskToReadyList+0xcc>)
 8007950:	441a      	add	r2, r3
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	3304      	adds	r3, #4
 8007956:	4619      	mov	r1, r3
 8007958:	4610      	mov	r0, r2
 800795a:	f7ff fdf5 	bl	8007548 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800795e:	f000 fd21 	bl	80083a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007962:	4b0d      	ldr	r3, [pc, #52]	; (8007998 <prvAddNewTaskToReadyList+0xc0>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d00e      	beq.n	8007988 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800796a:	4b0a      	ldr	r3, [pc, #40]	; (8007994 <prvAddNewTaskToReadyList+0xbc>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007974:	429a      	cmp	r2, r3
 8007976:	d207      	bcs.n	8007988 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007978:	4b0b      	ldr	r3, [pc, #44]	; (80079a8 <prvAddNewTaskToReadyList+0xd0>)
 800797a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800797e:	601a      	str	r2, [r3, #0]
 8007980:	f3bf 8f4f 	dsb	sy
 8007984:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007988:	bf00      	nop
 800798a:	3708      	adds	r7, #8
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}
 8007990:	20000aa8 	.word	0x20000aa8
 8007994:	200009a8 	.word	0x200009a8
 8007998:	20000ab4 	.word	0x20000ab4
 800799c:	20000ac4 	.word	0x20000ac4
 80079a0:	20000ab0 	.word	0x20000ab0
 80079a4:	200009ac 	.word	0x200009ac
 80079a8:	e000ed04 	.word	0xe000ed04

080079ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80079b4:	2300      	movs	r3, #0
 80079b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d017      	beq.n	80079ee <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80079be:	4b13      	ldr	r3, [pc, #76]	; (8007a0c <vTaskDelay+0x60>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d00a      	beq.n	80079dc <vTaskDelay+0x30>
	__asm volatile
 80079c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ca:	f383 8811 	msr	BASEPRI, r3
 80079ce:	f3bf 8f6f 	isb	sy
 80079d2:	f3bf 8f4f 	dsb	sy
 80079d6:	60bb      	str	r3, [r7, #8]
}
 80079d8:	bf00      	nop
 80079da:	e7fe      	b.n	80079da <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80079dc:	f000 f884 	bl	8007ae8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80079e0:	2100      	movs	r1, #0
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 fb1e 	bl	8008024 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80079e8:	f000 f88c 	bl	8007b04 <xTaskResumeAll>
 80079ec:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d107      	bne.n	8007a04 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80079f4:	4b06      	ldr	r3, [pc, #24]	; (8007a10 <vTaskDelay+0x64>)
 80079f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079fa:	601a      	str	r2, [r3, #0]
 80079fc:	f3bf 8f4f 	dsb	sy
 8007a00:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007a04:	bf00      	nop
 8007a06:	3710      	adds	r7, #16
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}
 8007a0c:	20000ad0 	.word	0x20000ad0
 8007a10:	e000ed04 	.word	0xe000ed04

08007a14 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b08a      	sub	sp, #40	; 0x28
 8007a18:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007a22:	463a      	mov	r2, r7
 8007a24:	1d39      	adds	r1, r7, #4
 8007a26:	f107 0308 	add.w	r3, r7, #8
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f7f8 ff10 	bl	8000850 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007a30:	6839      	ldr	r1, [r7, #0]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	68ba      	ldr	r2, [r7, #8]
 8007a36:	9202      	str	r2, [sp, #8]
 8007a38:	9301      	str	r3, [sp, #4]
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	9300      	str	r3, [sp, #0]
 8007a3e:	2300      	movs	r3, #0
 8007a40:	460a      	mov	r2, r1
 8007a42:	4921      	ldr	r1, [pc, #132]	; (8007ac8 <vTaskStartScheduler+0xb4>)
 8007a44:	4821      	ldr	r0, [pc, #132]	; (8007acc <vTaskStartScheduler+0xb8>)
 8007a46:	f7ff fe06 	bl	8007656 <xTaskCreateStatic>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	4a20      	ldr	r2, [pc, #128]	; (8007ad0 <vTaskStartScheduler+0xbc>)
 8007a4e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007a50:	4b1f      	ldr	r3, [pc, #124]	; (8007ad0 <vTaskStartScheduler+0xbc>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d002      	beq.n	8007a5e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	617b      	str	r3, [r7, #20]
 8007a5c:	e001      	b.n	8007a62 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d11b      	bne.n	8007aa0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8007a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a6c:	f383 8811 	msr	BASEPRI, r3
 8007a70:	f3bf 8f6f 	isb	sy
 8007a74:	f3bf 8f4f 	dsb	sy
 8007a78:	613b      	str	r3, [r7, #16]
}
 8007a7a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007a7c:	4b15      	ldr	r3, [pc, #84]	; (8007ad4 <vTaskStartScheduler+0xc0>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	334c      	adds	r3, #76	; 0x4c
 8007a82:	4a15      	ldr	r2, [pc, #84]	; (8007ad8 <vTaskStartScheduler+0xc4>)
 8007a84:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007a86:	4b15      	ldr	r3, [pc, #84]	; (8007adc <vTaskStartScheduler+0xc8>)
 8007a88:	f04f 32ff 	mov.w	r2, #4294967295
 8007a8c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007a8e:	4b14      	ldr	r3, [pc, #80]	; (8007ae0 <vTaskStartScheduler+0xcc>)
 8007a90:	2201      	movs	r2, #1
 8007a92:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007a94:	4b13      	ldr	r3, [pc, #76]	; (8007ae4 <vTaskStartScheduler+0xd0>)
 8007a96:	2200      	movs	r2, #0
 8007a98:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007a9a:	f000 fbb1 	bl	8008200 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007a9e:	e00e      	b.n	8007abe <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aa6:	d10a      	bne.n	8007abe <vTaskStartScheduler+0xaa>
	__asm volatile
 8007aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aac:	f383 8811 	msr	BASEPRI, r3
 8007ab0:	f3bf 8f6f 	isb	sy
 8007ab4:	f3bf 8f4f 	dsb	sy
 8007ab8:	60fb      	str	r3, [r7, #12]
}
 8007aba:	bf00      	nop
 8007abc:	e7fe      	b.n	8007abc <vTaskStartScheduler+0xa8>
}
 8007abe:	bf00      	nop
 8007ac0:	3718      	adds	r7, #24
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
 8007ac6:	bf00      	nop
 8007ac8:	080093b4 	.word	0x080093b4
 8007acc:	08007e71 	.word	0x08007e71
 8007ad0:	20000acc 	.word	0x20000acc
 8007ad4:	200009a8 	.word	0x200009a8
 8007ad8:	20000020 	.word	0x20000020
 8007adc:	20000ac8 	.word	0x20000ac8
 8007ae0:	20000ab4 	.word	0x20000ab4
 8007ae4:	20000aac 	.word	0x20000aac

08007ae8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007ae8:	b480      	push	{r7}
 8007aea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007aec:	4b04      	ldr	r3, [pc, #16]	; (8007b00 <vTaskSuspendAll+0x18>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	3301      	adds	r3, #1
 8007af2:	4a03      	ldr	r2, [pc, #12]	; (8007b00 <vTaskSuspendAll+0x18>)
 8007af4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007af6:	bf00      	nop
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr
 8007b00:	20000ad0 	.word	0x20000ad0

08007b04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b084      	sub	sp, #16
 8007b08:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007b12:	4b41      	ldr	r3, [pc, #260]	; (8007c18 <xTaskResumeAll+0x114>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d10a      	bne.n	8007b30 <xTaskResumeAll+0x2c>
	__asm volatile
 8007b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b1e:	f383 8811 	msr	BASEPRI, r3
 8007b22:	f3bf 8f6f 	isb	sy
 8007b26:	f3bf 8f4f 	dsb	sy
 8007b2a:	603b      	str	r3, [r7, #0]
}
 8007b2c:	bf00      	nop
 8007b2e:	e7fe      	b.n	8007b2e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007b30:	f000 fc08 	bl	8008344 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007b34:	4b38      	ldr	r3, [pc, #224]	; (8007c18 <xTaskResumeAll+0x114>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	3b01      	subs	r3, #1
 8007b3a:	4a37      	ldr	r2, [pc, #220]	; (8007c18 <xTaskResumeAll+0x114>)
 8007b3c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b3e:	4b36      	ldr	r3, [pc, #216]	; (8007c18 <xTaskResumeAll+0x114>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d161      	bne.n	8007c0a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007b46:	4b35      	ldr	r3, [pc, #212]	; (8007c1c <xTaskResumeAll+0x118>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d05d      	beq.n	8007c0a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b4e:	e02e      	b.n	8007bae <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b50:	4b33      	ldr	r3, [pc, #204]	; (8007c20 <xTaskResumeAll+0x11c>)
 8007b52:	68db      	ldr	r3, [r3, #12]
 8007b54:	68db      	ldr	r3, [r3, #12]
 8007b56:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	3318      	adds	r3, #24
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f7ff fd50 	bl	8007602 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	3304      	adds	r3, #4
 8007b66:	4618      	mov	r0, r3
 8007b68:	f7ff fd4b 	bl	8007602 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b70:	2201      	movs	r2, #1
 8007b72:	409a      	lsls	r2, r3
 8007b74:	4b2b      	ldr	r3, [pc, #172]	; (8007c24 <xTaskResumeAll+0x120>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	4a2a      	ldr	r2, [pc, #168]	; (8007c24 <xTaskResumeAll+0x120>)
 8007b7c:	6013      	str	r3, [r2, #0]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b82:	4613      	mov	r3, r2
 8007b84:	009b      	lsls	r3, r3, #2
 8007b86:	4413      	add	r3, r2
 8007b88:	009b      	lsls	r3, r3, #2
 8007b8a:	4a27      	ldr	r2, [pc, #156]	; (8007c28 <xTaskResumeAll+0x124>)
 8007b8c:	441a      	add	r2, r3
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	3304      	adds	r3, #4
 8007b92:	4619      	mov	r1, r3
 8007b94:	4610      	mov	r0, r2
 8007b96:	f7ff fcd7 	bl	8007548 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b9e:	4b23      	ldr	r3, [pc, #140]	; (8007c2c <xTaskResumeAll+0x128>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d302      	bcc.n	8007bae <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007ba8:	4b21      	ldr	r3, [pc, #132]	; (8007c30 <xTaskResumeAll+0x12c>)
 8007baa:	2201      	movs	r2, #1
 8007bac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007bae:	4b1c      	ldr	r3, [pc, #112]	; (8007c20 <xTaskResumeAll+0x11c>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d1cc      	bne.n	8007b50 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d001      	beq.n	8007bc0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007bbc:	f000 fa12 	bl	8007fe4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007bc0:	4b1c      	ldr	r3, [pc, #112]	; (8007c34 <xTaskResumeAll+0x130>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d010      	beq.n	8007bee <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007bcc:	f000 f836 	bl	8007c3c <xTaskIncrementTick>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d002      	beq.n	8007bdc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007bd6:	4b16      	ldr	r3, [pc, #88]	; (8007c30 <xTaskResumeAll+0x12c>)
 8007bd8:	2201      	movs	r2, #1
 8007bda:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	3b01      	subs	r3, #1
 8007be0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d1f1      	bne.n	8007bcc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007be8:	4b12      	ldr	r3, [pc, #72]	; (8007c34 <xTaskResumeAll+0x130>)
 8007bea:	2200      	movs	r2, #0
 8007bec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007bee:	4b10      	ldr	r3, [pc, #64]	; (8007c30 <xTaskResumeAll+0x12c>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d009      	beq.n	8007c0a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007bfa:	4b0f      	ldr	r3, [pc, #60]	; (8007c38 <xTaskResumeAll+0x134>)
 8007bfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c00:	601a      	str	r2, [r3, #0]
 8007c02:	f3bf 8f4f 	dsb	sy
 8007c06:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007c0a:	f000 fbcb 	bl	80083a4 <vPortExitCritical>

	return xAlreadyYielded;
 8007c0e:	68bb      	ldr	r3, [r7, #8]
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3710      	adds	r7, #16
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}
 8007c18:	20000ad0 	.word	0x20000ad0
 8007c1c:	20000aa8 	.word	0x20000aa8
 8007c20:	20000a68 	.word	0x20000a68
 8007c24:	20000ab0 	.word	0x20000ab0
 8007c28:	200009ac 	.word	0x200009ac
 8007c2c:	200009a8 	.word	0x200009a8
 8007c30:	20000abc 	.word	0x20000abc
 8007c34:	20000ab8 	.word	0x20000ab8
 8007c38:	e000ed04 	.word	0xe000ed04

08007c3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b086      	sub	sp, #24
 8007c40:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007c42:	2300      	movs	r3, #0
 8007c44:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c46:	4b4e      	ldr	r3, [pc, #312]	; (8007d80 <xTaskIncrementTick+0x144>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	f040 808e 	bne.w	8007d6c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007c50:	4b4c      	ldr	r3, [pc, #304]	; (8007d84 <xTaskIncrementTick+0x148>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	3301      	adds	r3, #1
 8007c56:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007c58:	4a4a      	ldr	r2, [pc, #296]	; (8007d84 <xTaskIncrementTick+0x148>)
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d120      	bne.n	8007ca6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007c64:	4b48      	ldr	r3, [pc, #288]	; (8007d88 <xTaskIncrementTick+0x14c>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d00a      	beq.n	8007c84 <xTaskIncrementTick+0x48>
	__asm volatile
 8007c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c72:	f383 8811 	msr	BASEPRI, r3
 8007c76:	f3bf 8f6f 	isb	sy
 8007c7a:	f3bf 8f4f 	dsb	sy
 8007c7e:	603b      	str	r3, [r7, #0]
}
 8007c80:	bf00      	nop
 8007c82:	e7fe      	b.n	8007c82 <xTaskIncrementTick+0x46>
 8007c84:	4b40      	ldr	r3, [pc, #256]	; (8007d88 <xTaskIncrementTick+0x14c>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	60fb      	str	r3, [r7, #12]
 8007c8a:	4b40      	ldr	r3, [pc, #256]	; (8007d8c <xTaskIncrementTick+0x150>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a3e      	ldr	r2, [pc, #248]	; (8007d88 <xTaskIncrementTick+0x14c>)
 8007c90:	6013      	str	r3, [r2, #0]
 8007c92:	4a3e      	ldr	r2, [pc, #248]	; (8007d8c <xTaskIncrementTick+0x150>)
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	6013      	str	r3, [r2, #0]
 8007c98:	4b3d      	ldr	r3, [pc, #244]	; (8007d90 <xTaskIncrementTick+0x154>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	3301      	adds	r3, #1
 8007c9e:	4a3c      	ldr	r2, [pc, #240]	; (8007d90 <xTaskIncrementTick+0x154>)
 8007ca0:	6013      	str	r3, [r2, #0]
 8007ca2:	f000 f99f 	bl	8007fe4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007ca6:	4b3b      	ldr	r3, [pc, #236]	; (8007d94 <xTaskIncrementTick+0x158>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	693a      	ldr	r2, [r7, #16]
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d348      	bcc.n	8007d42 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007cb0:	4b35      	ldr	r3, [pc, #212]	; (8007d88 <xTaskIncrementTick+0x14c>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d104      	bne.n	8007cc4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cba:	4b36      	ldr	r3, [pc, #216]	; (8007d94 <xTaskIncrementTick+0x158>)
 8007cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8007cc0:	601a      	str	r2, [r3, #0]
					break;
 8007cc2:	e03e      	b.n	8007d42 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cc4:	4b30      	ldr	r3, [pc, #192]	; (8007d88 <xTaskIncrementTick+0x14c>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	68db      	ldr	r3, [r3, #12]
 8007cca:	68db      	ldr	r3, [r3, #12]
 8007ccc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007cd4:	693a      	ldr	r2, [r7, #16]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d203      	bcs.n	8007ce4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007cdc:	4a2d      	ldr	r2, [pc, #180]	; (8007d94 <xTaskIncrementTick+0x158>)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007ce2:	e02e      	b.n	8007d42 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	3304      	adds	r3, #4
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f7ff fc8a 	bl	8007602 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d004      	beq.n	8007d00 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	3318      	adds	r3, #24
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f7ff fc81 	bl	8007602 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d04:	2201      	movs	r2, #1
 8007d06:	409a      	lsls	r2, r3
 8007d08:	4b23      	ldr	r3, [pc, #140]	; (8007d98 <xTaskIncrementTick+0x15c>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	4a22      	ldr	r2, [pc, #136]	; (8007d98 <xTaskIncrementTick+0x15c>)
 8007d10:	6013      	str	r3, [r2, #0]
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d16:	4613      	mov	r3, r2
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	4413      	add	r3, r2
 8007d1c:	009b      	lsls	r3, r3, #2
 8007d1e:	4a1f      	ldr	r2, [pc, #124]	; (8007d9c <xTaskIncrementTick+0x160>)
 8007d20:	441a      	add	r2, r3
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	3304      	adds	r3, #4
 8007d26:	4619      	mov	r1, r3
 8007d28:	4610      	mov	r0, r2
 8007d2a:	f7ff fc0d 	bl	8007548 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d32:	4b1b      	ldr	r3, [pc, #108]	; (8007da0 <xTaskIncrementTick+0x164>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d3b9      	bcc.n	8007cb0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d40:	e7b6      	b.n	8007cb0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007d42:	4b17      	ldr	r3, [pc, #92]	; (8007da0 <xTaskIncrementTick+0x164>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d48:	4914      	ldr	r1, [pc, #80]	; (8007d9c <xTaskIncrementTick+0x160>)
 8007d4a:	4613      	mov	r3, r2
 8007d4c:	009b      	lsls	r3, r3, #2
 8007d4e:	4413      	add	r3, r2
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	440b      	add	r3, r1
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d901      	bls.n	8007d5e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007d5e:	4b11      	ldr	r3, [pc, #68]	; (8007da4 <xTaskIncrementTick+0x168>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d007      	beq.n	8007d76 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007d66:	2301      	movs	r3, #1
 8007d68:	617b      	str	r3, [r7, #20]
 8007d6a:	e004      	b.n	8007d76 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007d6c:	4b0e      	ldr	r3, [pc, #56]	; (8007da8 <xTaskIncrementTick+0x16c>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	3301      	adds	r3, #1
 8007d72:	4a0d      	ldr	r2, [pc, #52]	; (8007da8 <xTaskIncrementTick+0x16c>)
 8007d74:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007d76:	697b      	ldr	r3, [r7, #20]
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3718      	adds	r7, #24
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}
 8007d80:	20000ad0 	.word	0x20000ad0
 8007d84:	20000aac 	.word	0x20000aac
 8007d88:	20000a60 	.word	0x20000a60
 8007d8c:	20000a64 	.word	0x20000a64
 8007d90:	20000ac0 	.word	0x20000ac0
 8007d94:	20000ac8 	.word	0x20000ac8
 8007d98:	20000ab0 	.word	0x20000ab0
 8007d9c:	200009ac 	.word	0x200009ac
 8007da0:	200009a8 	.word	0x200009a8
 8007da4:	20000abc 	.word	0x20000abc
 8007da8:	20000ab8 	.word	0x20000ab8

08007dac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007dac:	b480      	push	{r7}
 8007dae:	b087      	sub	sp, #28
 8007db0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007db2:	4b29      	ldr	r3, [pc, #164]	; (8007e58 <vTaskSwitchContext+0xac>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d003      	beq.n	8007dc2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007dba:	4b28      	ldr	r3, [pc, #160]	; (8007e5c <vTaskSwitchContext+0xb0>)
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007dc0:	e044      	b.n	8007e4c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8007dc2:	4b26      	ldr	r3, [pc, #152]	; (8007e5c <vTaskSwitchContext+0xb0>)
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dc8:	4b25      	ldr	r3, [pc, #148]	; (8007e60 <vTaskSwitchContext+0xb4>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	fab3 f383 	clz	r3, r3
 8007dd4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007dd6:	7afb      	ldrb	r3, [r7, #11]
 8007dd8:	f1c3 031f 	rsb	r3, r3, #31
 8007ddc:	617b      	str	r3, [r7, #20]
 8007dde:	4921      	ldr	r1, [pc, #132]	; (8007e64 <vTaskSwitchContext+0xb8>)
 8007de0:	697a      	ldr	r2, [r7, #20]
 8007de2:	4613      	mov	r3, r2
 8007de4:	009b      	lsls	r3, r3, #2
 8007de6:	4413      	add	r3, r2
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	440b      	add	r3, r1
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d10a      	bne.n	8007e08 <vTaskSwitchContext+0x5c>
	__asm volatile
 8007df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df6:	f383 8811 	msr	BASEPRI, r3
 8007dfa:	f3bf 8f6f 	isb	sy
 8007dfe:	f3bf 8f4f 	dsb	sy
 8007e02:	607b      	str	r3, [r7, #4]
}
 8007e04:	bf00      	nop
 8007e06:	e7fe      	b.n	8007e06 <vTaskSwitchContext+0x5a>
 8007e08:	697a      	ldr	r2, [r7, #20]
 8007e0a:	4613      	mov	r3, r2
 8007e0c:	009b      	lsls	r3, r3, #2
 8007e0e:	4413      	add	r3, r2
 8007e10:	009b      	lsls	r3, r3, #2
 8007e12:	4a14      	ldr	r2, [pc, #80]	; (8007e64 <vTaskSwitchContext+0xb8>)
 8007e14:	4413      	add	r3, r2
 8007e16:	613b      	str	r3, [r7, #16]
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	685a      	ldr	r2, [r3, #4]
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	605a      	str	r2, [r3, #4]
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	685a      	ldr	r2, [r3, #4]
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	3308      	adds	r3, #8
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d104      	bne.n	8007e38 <vTaskSwitchContext+0x8c>
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	685a      	ldr	r2, [r3, #4]
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	605a      	str	r2, [r3, #4]
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	68db      	ldr	r3, [r3, #12]
 8007e3e:	4a0a      	ldr	r2, [pc, #40]	; (8007e68 <vTaskSwitchContext+0xbc>)
 8007e40:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007e42:	4b09      	ldr	r3, [pc, #36]	; (8007e68 <vTaskSwitchContext+0xbc>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	334c      	adds	r3, #76	; 0x4c
 8007e48:	4a08      	ldr	r2, [pc, #32]	; (8007e6c <vTaskSwitchContext+0xc0>)
 8007e4a:	6013      	str	r3, [r2, #0]
}
 8007e4c:	bf00      	nop
 8007e4e:	371c      	adds	r7, #28
 8007e50:	46bd      	mov	sp, r7
 8007e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e56:	4770      	bx	lr
 8007e58:	20000ad0 	.word	0x20000ad0
 8007e5c:	20000abc 	.word	0x20000abc
 8007e60:	20000ab0 	.word	0x20000ab0
 8007e64:	200009ac 	.word	0x200009ac
 8007e68:	200009a8 	.word	0x200009a8
 8007e6c:	20000020 	.word	0x20000020

08007e70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b082      	sub	sp, #8
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007e78:	f000 f852 	bl	8007f20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007e7c:	4b06      	ldr	r3, [pc, #24]	; (8007e98 <prvIdleTask+0x28>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d9f9      	bls.n	8007e78 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007e84:	4b05      	ldr	r3, [pc, #20]	; (8007e9c <prvIdleTask+0x2c>)
 8007e86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e8a:	601a      	str	r2, [r3, #0]
 8007e8c:	f3bf 8f4f 	dsb	sy
 8007e90:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007e94:	e7f0      	b.n	8007e78 <prvIdleTask+0x8>
 8007e96:	bf00      	nop
 8007e98:	200009ac 	.word	0x200009ac
 8007e9c:	e000ed04 	.word	0xe000ed04

08007ea0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b082      	sub	sp, #8
 8007ea4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	607b      	str	r3, [r7, #4]
 8007eaa:	e00c      	b.n	8007ec6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007eac:	687a      	ldr	r2, [r7, #4]
 8007eae:	4613      	mov	r3, r2
 8007eb0:	009b      	lsls	r3, r3, #2
 8007eb2:	4413      	add	r3, r2
 8007eb4:	009b      	lsls	r3, r3, #2
 8007eb6:	4a12      	ldr	r2, [pc, #72]	; (8007f00 <prvInitialiseTaskLists+0x60>)
 8007eb8:	4413      	add	r3, r2
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f7ff fb17 	bl	80074ee <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	607b      	str	r3, [r7, #4]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2b06      	cmp	r3, #6
 8007eca:	d9ef      	bls.n	8007eac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007ecc:	480d      	ldr	r0, [pc, #52]	; (8007f04 <prvInitialiseTaskLists+0x64>)
 8007ece:	f7ff fb0e 	bl	80074ee <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007ed2:	480d      	ldr	r0, [pc, #52]	; (8007f08 <prvInitialiseTaskLists+0x68>)
 8007ed4:	f7ff fb0b 	bl	80074ee <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007ed8:	480c      	ldr	r0, [pc, #48]	; (8007f0c <prvInitialiseTaskLists+0x6c>)
 8007eda:	f7ff fb08 	bl	80074ee <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007ede:	480c      	ldr	r0, [pc, #48]	; (8007f10 <prvInitialiseTaskLists+0x70>)
 8007ee0:	f7ff fb05 	bl	80074ee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007ee4:	480b      	ldr	r0, [pc, #44]	; (8007f14 <prvInitialiseTaskLists+0x74>)
 8007ee6:	f7ff fb02 	bl	80074ee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007eea:	4b0b      	ldr	r3, [pc, #44]	; (8007f18 <prvInitialiseTaskLists+0x78>)
 8007eec:	4a05      	ldr	r2, [pc, #20]	; (8007f04 <prvInitialiseTaskLists+0x64>)
 8007eee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007ef0:	4b0a      	ldr	r3, [pc, #40]	; (8007f1c <prvInitialiseTaskLists+0x7c>)
 8007ef2:	4a05      	ldr	r2, [pc, #20]	; (8007f08 <prvInitialiseTaskLists+0x68>)
 8007ef4:	601a      	str	r2, [r3, #0]
}
 8007ef6:	bf00      	nop
 8007ef8:	3708      	adds	r7, #8
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
 8007efe:	bf00      	nop
 8007f00:	200009ac 	.word	0x200009ac
 8007f04:	20000a38 	.word	0x20000a38
 8007f08:	20000a4c 	.word	0x20000a4c
 8007f0c:	20000a68 	.word	0x20000a68
 8007f10:	20000a7c 	.word	0x20000a7c
 8007f14:	20000a94 	.word	0x20000a94
 8007f18:	20000a60 	.word	0x20000a60
 8007f1c:	20000a64 	.word	0x20000a64

08007f20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b082      	sub	sp, #8
 8007f24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f26:	e019      	b.n	8007f5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007f28:	f000 fa0c 	bl	8008344 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f2c:	4b10      	ldr	r3, [pc, #64]	; (8007f70 <prvCheckTasksWaitingTermination+0x50>)
 8007f2e:	68db      	ldr	r3, [r3, #12]
 8007f30:	68db      	ldr	r3, [r3, #12]
 8007f32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	3304      	adds	r3, #4
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f7ff fb62 	bl	8007602 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007f3e:	4b0d      	ldr	r3, [pc, #52]	; (8007f74 <prvCheckTasksWaitingTermination+0x54>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	3b01      	subs	r3, #1
 8007f44:	4a0b      	ldr	r2, [pc, #44]	; (8007f74 <prvCheckTasksWaitingTermination+0x54>)
 8007f46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007f48:	4b0b      	ldr	r3, [pc, #44]	; (8007f78 <prvCheckTasksWaitingTermination+0x58>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	3b01      	subs	r3, #1
 8007f4e:	4a0a      	ldr	r2, [pc, #40]	; (8007f78 <prvCheckTasksWaitingTermination+0x58>)
 8007f50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007f52:	f000 fa27 	bl	80083a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 f810 	bl	8007f7c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f5c:	4b06      	ldr	r3, [pc, #24]	; (8007f78 <prvCheckTasksWaitingTermination+0x58>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d1e1      	bne.n	8007f28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007f64:	bf00      	nop
 8007f66:	bf00      	nop
 8007f68:	3708      	adds	r7, #8
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	bf00      	nop
 8007f70:	20000a7c 	.word	0x20000a7c
 8007f74:	20000aa8 	.word	0x20000aa8
 8007f78:	20000a90 	.word	0x20000a90

08007f7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	334c      	adds	r3, #76	; 0x4c
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f000 fd6b 	bl	8008a64 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d108      	bne.n	8007faa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f000 fb7f 	bl	80086a0 <vPortFree>
				vPortFree( pxTCB );
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 fb7c 	bl	80086a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007fa8:	e018      	b.n	8007fdc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	d103      	bne.n	8007fbc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 fb73 	bl	80086a0 <vPortFree>
	}
 8007fba:	e00f      	b.n	8007fdc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007fc2:	2b02      	cmp	r3, #2
 8007fc4:	d00a      	beq.n	8007fdc <prvDeleteTCB+0x60>
	__asm volatile
 8007fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fca:	f383 8811 	msr	BASEPRI, r3
 8007fce:	f3bf 8f6f 	isb	sy
 8007fd2:	f3bf 8f4f 	dsb	sy
 8007fd6:	60fb      	str	r3, [r7, #12]
}
 8007fd8:	bf00      	nop
 8007fda:	e7fe      	b.n	8007fda <prvDeleteTCB+0x5e>
	}
 8007fdc:	bf00      	nop
 8007fde:	3710      	adds	r7, #16
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b083      	sub	sp, #12
 8007fe8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007fea:	4b0c      	ldr	r3, [pc, #48]	; (800801c <prvResetNextTaskUnblockTime+0x38>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d104      	bne.n	8007ffe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007ff4:	4b0a      	ldr	r3, [pc, #40]	; (8008020 <prvResetNextTaskUnblockTime+0x3c>)
 8007ff6:	f04f 32ff 	mov.w	r2, #4294967295
 8007ffa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007ffc:	e008      	b.n	8008010 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ffe:	4b07      	ldr	r3, [pc, #28]	; (800801c <prvResetNextTaskUnblockTime+0x38>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	68db      	ldr	r3, [r3, #12]
 8008004:	68db      	ldr	r3, [r3, #12]
 8008006:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	4a04      	ldr	r2, [pc, #16]	; (8008020 <prvResetNextTaskUnblockTime+0x3c>)
 800800e:	6013      	str	r3, [r2, #0]
}
 8008010:	bf00      	nop
 8008012:	370c      	adds	r7, #12
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr
 800801c:	20000a60 	.word	0x20000a60
 8008020:	20000ac8 	.word	0x20000ac8

08008024 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800802e:	4b29      	ldr	r3, [pc, #164]	; (80080d4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008034:	4b28      	ldr	r3, [pc, #160]	; (80080d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	3304      	adds	r3, #4
 800803a:	4618      	mov	r0, r3
 800803c:	f7ff fae1 	bl	8007602 <uxListRemove>
 8008040:	4603      	mov	r3, r0
 8008042:	2b00      	cmp	r3, #0
 8008044:	d10b      	bne.n	800805e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008046:	4b24      	ldr	r3, [pc, #144]	; (80080d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800804c:	2201      	movs	r2, #1
 800804e:	fa02 f303 	lsl.w	r3, r2, r3
 8008052:	43da      	mvns	r2, r3
 8008054:	4b21      	ldr	r3, [pc, #132]	; (80080dc <prvAddCurrentTaskToDelayedList+0xb8>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4013      	ands	r3, r2
 800805a:	4a20      	ldr	r2, [pc, #128]	; (80080dc <prvAddCurrentTaskToDelayedList+0xb8>)
 800805c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008064:	d10a      	bne.n	800807c <prvAddCurrentTaskToDelayedList+0x58>
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d007      	beq.n	800807c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800806c:	4b1a      	ldr	r3, [pc, #104]	; (80080d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	3304      	adds	r3, #4
 8008072:	4619      	mov	r1, r3
 8008074:	481a      	ldr	r0, [pc, #104]	; (80080e0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008076:	f7ff fa67 	bl	8007548 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800807a:	e026      	b.n	80080ca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800807c:	68fa      	ldr	r2, [r7, #12]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	4413      	add	r3, r2
 8008082:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008084:	4b14      	ldr	r3, [pc, #80]	; (80080d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	68ba      	ldr	r2, [r7, #8]
 800808a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800808c:	68ba      	ldr	r2, [r7, #8]
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	429a      	cmp	r2, r3
 8008092:	d209      	bcs.n	80080a8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008094:	4b13      	ldr	r3, [pc, #76]	; (80080e4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008096:	681a      	ldr	r2, [r3, #0]
 8008098:	4b0f      	ldr	r3, [pc, #60]	; (80080d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	3304      	adds	r3, #4
 800809e:	4619      	mov	r1, r3
 80080a0:	4610      	mov	r0, r2
 80080a2:	f7ff fa75 	bl	8007590 <vListInsert>
}
 80080a6:	e010      	b.n	80080ca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080a8:	4b0f      	ldr	r3, [pc, #60]	; (80080e8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	4b0a      	ldr	r3, [pc, #40]	; (80080d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	3304      	adds	r3, #4
 80080b2:	4619      	mov	r1, r3
 80080b4:	4610      	mov	r0, r2
 80080b6:	f7ff fa6b 	bl	8007590 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80080ba:	4b0c      	ldr	r3, [pc, #48]	; (80080ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	68ba      	ldr	r2, [r7, #8]
 80080c0:	429a      	cmp	r2, r3
 80080c2:	d202      	bcs.n	80080ca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80080c4:	4a09      	ldr	r2, [pc, #36]	; (80080ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	6013      	str	r3, [r2, #0]
}
 80080ca:	bf00      	nop
 80080cc:	3710      	adds	r7, #16
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	20000aac 	.word	0x20000aac
 80080d8:	200009a8 	.word	0x200009a8
 80080dc:	20000ab0 	.word	0x20000ab0
 80080e0:	20000a94 	.word	0x20000a94
 80080e4:	20000a64 	.word	0x20000a64
 80080e8:	20000a60 	.word	0x20000a60
 80080ec:	20000ac8 	.word	0x20000ac8

080080f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80080f0:	b480      	push	{r7}
 80080f2:	b085      	sub	sp, #20
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	60f8      	str	r0, [r7, #12]
 80080f8:	60b9      	str	r1, [r7, #8]
 80080fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	3b04      	subs	r3, #4
 8008100:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008108:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	3b04      	subs	r3, #4
 800810e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	f023 0201 	bic.w	r2, r3, #1
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	3b04      	subs	r3, #4
 800811e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008120:	4a0c      	ldr	r2, [pc, #48]	; (8008154 <pxPortInitialiseStack+0x64>)
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	3b14      	subs	r3, #20
 800812a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800812c:	687a      	ldr	r2, [r7, #4]
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	3b04      	subs	r3, #4
 8008136:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f06f 0202 	mvn.w	r2, #2
 800813e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	3b20      	subs	r3, #32
 8008144:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008146:	68fb      	ldr	r3, [r7, #12]
}
 8008148:	4618      	mov	r0, r3
 800814a:	3714      	adds	r7, #20
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr
 8008154:	08008159 	.word	0x08008159

08008158 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008158:	b480      	push	{r7}
 800815a:	b085      	sub	sp, #20
 800815c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800815e:	2300      	movs	r3, #0
 8008160:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008162:	4b12      	ldr	r3, [pc, #72]	; (80081ac <prvTaskExitError+0x54>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800816a:	d00a      	beq.n	8008182 <prvTaskExitError+0x2a>
	__asm volatile
 800816c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008170:	f383 8811 	msr	BASEPRI, r3
 8008174:	f3bf 8f6f 	isb	sy
 8008178:	f3bf 8f4f 	dsb	sy
 800817c:	60fb      	str	r3, [r7, #12]
}
 800817e:	bf00      	nop
 8008180:	e7fe      	b.n	8008180 <prvTaskExitError+0x28>
	__asm volatile
 8008182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008186:	f383 8811 	msr	BASEPRI, r3
 800818a:	f3bf 8f6f 	isb	sy
 800818e:	f3bf 8f4f 	dsb	sy
 8008192:	60bb      	str	r3, [r7, #8]
}
 8008194:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008196:	bf00      	nop
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d0fc      	beq.n	8008198 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800819e:	bf00      	nop
 80081a0:	bf00      	nop
 80081a2:	3714      	adds	r7, #20
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr
 80081ac:	2000001c 	.word	0x2000001c

080081b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80081b0:	4b07      	ldr	r3, [pc, #28]	; (80081d0 <pxCurrentTCBConst2>)
 80081b2:	6819      	ldr	r1, [r3, #0]
 80081b4:	6808      	ldr	r0, [r1, #0]
 80081b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ba:	f380 8809 	msr	PSP, r0
 80081be:	f3bf 8f6f 	isb	sy
 80081c2:	f04f 0000 	mov.w	r0, #0
 80081c6:	f380 8811 	msr	BASEPRI, r0
 80081ca:	4770      	bx	lr
 80081cc:	f3af 8000 	nop.w

080081d0 <pxCurrentTCBConst2>:
 80081d0:	200009a8 	.word	0x200009a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80081d4:	bf00      	nop
 80081d6:	bf00      	nop

080081d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80081d8:	4808      	ldr	r0, [pc, #32]	; (80081fc <prvPortStartFirstTask+0x24>)
 80081da:	6800      	ldr	r0, [r0, #0]
 80081dc:	6800      	ldr	r0, [r0, #0]
 80081de:	f380 8808 	msr	MSP, r0
 80081e2:	f04f 0000 	mov.w	r0, #0
 80081e6:	f380 8814 	msr	CONTROL, r0
 80081ea:	b662      	cpsie	i
 80081ec:	b661      	cpsie	f
 80081ee:	f3bf 8f4f 	dsb	sy
 80081f2:	f3bf 8f6f 	isb	sy
 80081f6:	df00      	svc	0
 80081f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80081fa:	bf00      	nop
 80081fc:	e000ed08 	.word	0xe000ed08

08008200 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b086      	sub	sp, #24
 8008204:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008206:	4b46      	ldr	r3, [pc, #280]	; (8008320 <xPortStartScheduler+0x120>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a46      	ldr	r2, [pc, #280]	; (8008324 <xPortStartScheduler+0x124>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d10a      	bne.n	8008226 <xPortStartScheduler+0x26>
	__asm volatile
 8008210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008214:	f383 8811 	msr	BASEPRI, r3
 8008218:	f3bf 8f6f 	isb	sy
 800821c:	f3bf 8f4f 	dsb	sy
 8008220:	613b      	str	r3, [r7, #16]
}
 8008222:	bf00      	nop
 8008224:	e7fe      	b.n	8008224 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008226:	4b3e      	ldr	r3, [pc, #248]	; (8008320 <xPortStartScheduler+0x120>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a3f      	ldr	r2, [pc, #252]	; (8008328 <xPortStartScheduler+0x128>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d10a      	bne.n	8008246 <xPortStartScheduler+0x46>
	__asm volatile
 8008230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008234:	f383 8811 	msr	BASEPRI, r3
 8008238:	f3bf 8f6f 	isb	sy
 800823c:	f3bf 8f4f 	dsb	sy
 8008240:	60fb      	str	r3, [r7, #12]
}
 8008242:	bf00      	nop
 8008244:	e7fe      	b.n	8008244 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008246:	4b39      	ldr	r3, [pc, #228]	; (800832c <xPortStartScheduler+0x12c>)
 8008248:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	b2db      	uxtb	r3, r3
 8008250:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	22ff      	movs	r2, #255	; 0xff
 8008256:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	781b      	ldrb	r3, [r3, #0]
 800825c:	b2db      	uxtb	r3, r3
 800825e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008260:	78fb      	ldrb	r3, [r7, #3]
 8008262:	b2db      	uxtb	r3, r3
 8008264:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008268:	b2da      	uxtb	r2, r3
 800826a:	4b31      	ldr	r3, [pc, #196]	; (8008330 <xPortStartScheduler+0x130>)
 800826c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800826e:	4b31      	ldr	r3, [pc, #196]	; (8008334 <xPortStartScheduler+0x134>)
 8008270:	2207      	movs	r2, #7
 8008272:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008274:	e009      	b.n	800828a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008276:	4b2f      	ldr	r3, [pc, #188]	; (8008334 <xPortStartScheduler+0x134>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	3b01      	subs	r3, #1
 800827c:	4a2d      	ldr	r2, [pc, #180]	; (8008334 <xPortStartScheduler+0x134>)
 800827e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008280:	78fb      	ldrb	r3, [r7, #3]
 8008282:	b2db      	uxtb	r3, r3
 8008284:	005b      	lsls	r3, r3, #1
 8008286:	b2db      	uxtb	r3, r3
 8008288:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800828a:	78fb      	ldrb	r3, [r7, #3]
 800828c:	b2db      	uxtb	r3, r3
 800828e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008292:	2b80      	cmp	r3, #128	; 0x80
 8008294:	d0ef      	beq.n	8008276 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008296:	4b27      	ldr	r3, [pc, #156]	; (8008334 <xPortStartScheduler+0x134>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f1c3 0307 	rsb	r3, r3, #7
 800829e:	2b04      	cmp	r3, #4
 80082a0:	d00a      	beq.n	80082b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80082a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a6:	f383 8811 	msr	BASEPRI, r3
 80082aa:	f3bf 8f6f 	isb	sy
 80082ae:	f3bf 8f4f 	dsb	sy
 80082b2:	60bb      	str	r3, [r7, #8]
}
 80082b4:	bf00      	nop
 80082b6:	e7fe      	b.n	80082b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80082b8:	4b1e      	ldr	r3, [pc, #120]	; (8008334 <xPortStartScheduler+0x134>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	021b      	lsls	r3, r3, #8
 80082be:	4a1d      	ldr	r2, [pc, #116]	; (8008334 <xPortStartScheduler+0x134>)
 80082c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80082c2:	4b1c      	ldr	r3, [pc, #112]	; (8008334 <xPortStartScheduler+0x134>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80082ca:	4a1a      	ldr	r2, [pc, #104]	; (8008334 <xPortStartScheduler+0x134>)
 80082cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	b2da      	uxtb	r2, r3
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80082d6:	4b18      	ldr	r3, [pc, #96]	; (8008338 <xPortStartScheduler+0x138>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a17      	ldr	r2, [pc, #92]	; (8008338 <xPortStartScheduler+0x138>)
 80082dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80082e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80082e2:	4b15      	ldr	r3, [pc, #84]	; (8008338 <xPortStartScheduler+0x138>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a14      	ldr	r2, [pc, #80]	; (8008338 <xPortStartScheduler+0x138>)
 80082e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80082ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80082ee:	f000 f8dd 	bl	80084ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80082f2:	4b12      	ldr	r3, [pc, #72]	; (800833c <xPortStartScheduler+0x13c>)
 80082f4:	2200      	movs	r2, #0
 80082f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80082f8:	f000 f8fc 	bl	80084f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80082fc:	4b10      	ldr	r3, [pc, #64]	; (8008340 <xPortStartScheduler+0x140>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a0f      	ldr	r2, [pc, #60]	; (8008340 <xPortStartScheduler+0x140>)
 8008302:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008306:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008308:	f7ff ff66 	bl	80081d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800830c:	f7ff fd4e 	bl	8007dac <vTaskSwitchContext>
	prvTaskExitError();
 8008310:	f7ff ff22 	bl	8008158 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008314:	2300      	movs	r3, #0
}
 8008316:	4618      	mov	r0, r3
 8008318:	3718      	adds	r7, #24
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
 800831e:	bf00      	nop
 8008320:	e000ed00 	.word	0xe000ed00
 8008324:	410fc271 	.word	0x410fc271
 8008328:	410fc270 	.word	0x410fc270
 800832c:	e000e400 	.word	0xe000e400
 8008330:	20000ad4 	.word	0x20000ad4
 8008334:	20000ad8 	.word	0x20000ad8
 8008338:	e000ed20 	.word	0xe000ed20
 800833c:	2000001c 	.word	0x2000001c
 8008340:	e000ef34 	.word	0xe000ef34

08008344 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008344:	b480      	push	{r7}
 8008346:	b083      	sub	sp, #12
 8008348:	af00      	add	r7, sp, #0
	__asm volatile
 800834a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800834e:	f383 8811 	msr	BASEPRI, r3
 8008352:	f3bf 8f6f 	isb	sy
 8008356:	f3bf 8f4f 	dsb	sy
 800835a:	607b      	str	r3, [r7, #4]
}
 800835c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800835e:	4b0f      	ldr	r3, [pc, #60]	; (800839c <vPortEnterCritical+0x58>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	3301      	adds	r3, #1
 8008364:	4a0d      	ldr	r2, [pc, #52]	; (800839c <vPortEnterCritical+0x58>)
 8008366:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008368:	4b0c      	ldr	r3, [pc, #48]	; (800839c <vPortEnterCritical+0x58>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	2b01      	cmp	r3, #1
 800836e:	d10f      	bne.n	8008390 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008370:	4b0b      	ldr	r3, [pc, #44]	; (80083a0 <vPortEnterCritical+0x5c>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	b2db      	uxtb	r3, r3
 8008376:	2b00      	cmp	r3, #0
 8008378:	d00a      	beq.n	8008390 <vPortEnterCritical+0x4c>
	__asm volatile
 800837a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800837e:	f383 8811 	msr	BASEPRI, r3
 8008382:	f3bf 8f6f 	isb	sy
 8008386:	f3bf 8f4f 	dsb	sy
 800838a:	603b      	str	r3, [r7, #0]
}
 800838c:	bf00      	nop
 800838e:	e7fe      	b.n	800838e <vPortEnterCritical+0x4a>
	}
}
 8008390:	bf00      	nop
 8008392:	370c      	adds	r7, #12
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr
 800839c:	2000001c 	.word	0x2000001c
 80083a0:	e000ed04 	.word	0xe000ed04

080083a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80083a4:	b480      	push	{r7}
 80083a6:	b083      	sub	sp, #12
 80083a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80083aa:	4b12      	ldr	r3, [pc, #72]	; (80083f4 <vPortExitCritical+0x50>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d10a      	bne.n	80083c8 <vPortExitCritical+0x24>
	__asm volatile
 80083b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b6:	f383 8811 	msr	BASEPRI, r3
 80083ba:	f3bf 8f6f 	isb	sy
 80083be:	f3bf 8f4f 	dsb	sy
 80083c2:	607b      	str	r3, [r7, #4]
}
 80083c4:	bf00      	nop
 80083c6:	e7fe      	b.n	80083c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80083c8:	4b0a      	ldr	r3, [pc, #40]	; (80083f4 <vPortExitCritical+0x50>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	3b01      	subs	r3, #1
 80083ce:	4a09      	ldr	r2, [pc, #36]	; (80083f4 <vPortExitCritical+0x50>)
 80083d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80083d2:	4b08      	ldr	r3, [pc, #32]	; (80083f4 <vPortExitCritical+0x50>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d105      	bne.n	80083e6 <vPortExitCritical+0x42>
 80083da:	2300      	movs	r3, #0
 80083dc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80083e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80083e6:	bf00      	nop
 80083e8:	370c      	adds	r7, #12
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr
 80083f2:	bf00      	nop
 80083f4:	2000001c 	.word	0x2000001c
	...

08008400 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008400:	f3ef 8009 	mrs	r0, PSP
 8008404:	f3bf 8f6f 	isb	sy
 8008408:	4b15      	ldr	r3, [pc, #84]	; (8008460 <pxCurrentTCBConst>)
 800840a:	681a      	ldr	r2, [r3, #0]
 800840c:	f01e 0f10 	tst.w	lr, #16
 8008410:	bf08      	it	eq
 8008412:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008416:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800841a:	6010      	str	r0, [r2, #0]
 800841c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008420:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008424:	f380 8811 	msr	BASEPRI, r0
 8008428:	f3bf 8f4f 	dsb	sy
 800842c:	f3bf 8f6f 	isb	sy
 8008430:	f7ff fcbc 	bl	8007dac <vTaskSwitchContext>
 8008434:	f04f 0000 	mov.w	r0, #0
 8008438:	f380 8811 	msr	BASEPRI, r0
 800843c:	bc09      	pop	{r0, r3}
 800843e:	6819      	ldr	r1, [r3, #0]
 8008440:	6808      	ldr	r0, [r1, #0]
 8008442:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008446:	f01e 0f10 	tst.w	lr, #16
 800844a:	bf08      	it	eq
 800844c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008450:	f380 8809 	msr	PSP, r0
 8008454:	f3bf 8f6f 	isb	sy
 8008458:	4770      	bx	lr
 800845a:	bf00      	nop
 800845c:	f3af 8000 	nop.w

08008460 <pxCurrentTCBConst>:
 8008460:	200009a8 	.word	0x200009a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008464:	bf00      	nop
 8008466:	bf00      	nop

08008468 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
	__asm volatile
 800846e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008472:	f383 8811 	msr	BASEPRI, r3
 8008476:	f3bf 8f6f 	isb	sy
 800847a:	f3bf 8f4f 	dsb	sy
 800847e:	607b      	str	r3, [r7, #4]
}
 8008480:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008482:	f7ff fbdb 	bl	8007c3c <xTaskIncrementTick>
 8008486:	4603      	mov	r3, r0
 8008488:	2b00      	cmp	r3, #0
 800848a:	d003      	beq.n	8008494 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800848c:	4b06      	ldr	r3, [pc, #24]	; (80084a8 <SysTick_Handler+0x40>)
 800848e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008492:	601a      	str	r2, [r3, #0]
 8008494:	2300      	movs	r3, #0
 8008496:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	f383 8811 	msr	BASEPRI, r3
}
 800849e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80084a0:	bf00      	nop
 80084a2:	3708      	adds	r7, #8
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}
 80084a8:	e000ed04 	.word	0xe000ed04

080084ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80084ac:	b480      	push	{r7}
 80084ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80084b0:	4b0b      	ldr	r3, [pc, #44]	; (80084e0 <vPortSetupTimerInterrupt+0x34>)
 80084b2:	2200      	movs	r2, #0
 80084b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80084b6:	4b0b      	ldr	r3, [pc, #44]	; (80084e4 <vPortSetupTimerInterrupt+0x38>)
 80084b8:	2200      	movs	r2, #0
 80084ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80084bc:	4b0a      	ldr	r3, [pc, #40]	; (80084e8 <vPortSetupTimerInterrupt+0x3c>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a0a      	ldr	r2, [pc, #40]	; (80084ec <vPortSetupTimerInterrupt+0x40>)
 80084c2:	fba2 2303 	umull	r2, r3, r2, r3
 80084c6:	099b      	lsrs	r3, r3, #6
 80084c8:	4a09      	ldr	r2, [pc, #36]	; (80084f0 <vPortSetupTimerInterrupt+0x44>)
 80084ca:	3b01      	subs	r3, #1
 80084cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80084ce:	4b04      	ldr	r3, [pc, #16]	; (80084e0 <vPortSetupTimerInterrupt+0x34>)
 80084d0:	2207      	movs	r2, #7
 80084d2:	601a      	str	r2, [r3, #0]
}
 80084d4:	bf00      	nop
 80084d6:	46bd      	mov	sp, r7
 80084d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084dc:	4770      	bx	lr
 80084de:	bf00      	nop
 80084e0:	e000e010 	.word	0xe000e010
 80084e4:	e000e018 	.word	0xe000e018
 80084e8:	20000010 	.word	0x20000010
 80084ec:	10624dd3 	.word	0x10624dd3
 80084f0:	e000e014 	.word	0xe000e014

080084f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80084f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008504 <vPortEnableVFP+0x10>
 80084f8:	6801      	ldr	r1, [r0, #0]
 80084fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80084fe:	6001      	str	r1, [r0, #0]
 8008500:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008502:	bf00      	nop
 8008504:	e000ed88 	.word	0xe000ed88

08008508 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b08a      	sub	sp, #40	; 0x28
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008510:	2300      	movs	r3, #0
 8008512:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008514:	f7ff fae8 	bl	8007ae8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008518:	4b5b      	ldr	r3, [pc, #364]	; (8008688 <pvPortMalloc+0x180>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d101      	bne.n	8008524 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008520:	f000 f920 	bl	8008764 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008524:	4b59      	ldr	r3, [pc, #356]	; (800868c <pvPortMalloc+0x184>)
 8008526:	681a      	ldr	r2, [r3, #0]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	4013      	ands	r3, r2
 800852c:	2b00      	cmp	r3, #0
 800852e:	f040 8093 	bne.w	8008658 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d01d      	beq.n	8008574 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008538:	2208      	movs	r2, #8
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	4413      	add	r3, r2
 800853e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f003 0307 	and.w	r3, r3, #7
 8008546:	2b00      	cmp	r3, #0
 8008548:	d014      	beq.n	8008574 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f023 0307 	bic.w	r3, r3, #7
 8008550:	3308      	adds	r3, #8
 8008552:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f003 0307 	and.w	r3, r3, #7
 800855a:	2b00      	cmp	r3, #0
 800855c:	d00a      	beq.n	8008574 <pvPortMalloc+0x6c>
	__asm volatile
 800855e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008562:	f383 8811 	msr	BASEPRI, r3
 8008566:	f3bf 8f6f 	isb	sy
 800856a:	f3bf 8f4f 	dsb	sy
 800856e:	617b      	str	r3, [r7, #20]
}
 8008570:	bf00      	nop
 8008572:	e7fe      	b.n	8008572 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d06e      	beq.n	8008658 <pvPortMalloc+0x150>
 800857a:	4b45      	ldr	r3, [pc, #276]	; (8008690 <pvPortMalloc+0x188>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	687a      	ldr	r2, [r7, #4]
 8008580:	429a      	cmp	r2, r3
 8008582:	d869      	bhi.n	8008658 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008584:	4b43      	ldr	r3, [pc, #268]	; (8008694 <pvPortMalloc+0x18c>)
 8008586:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008588:	4b42      	ldr	r3, [pc, #264]	; (8008694 <pvPortMalloc+0x18c>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800858e:	e004      	b.n	800859a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008592:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800859a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	429a      	cmp	r2, r3
 80085a2:	d903      	bls.n	80085ac <pvPortMalloc+0xa4>
 80085a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d1f1      	bne.n	8008590 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80085ac:	4b36      	ldr	r3, [pc, #216]	; (8008688 <pvPortMalloc+0x180>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d050      	beq.n	8008658 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80085b6:	6a3b      	ldr	r3, [r7, #32]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	2208      	movs	r2, #8
 80085bc:	4413      	add	r3, r2
 80085be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80085c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c2:	681a      	ldr	r2, [r3, #0]
 80085c4:	6a3b      	ldr	r3, [r7, #32]
 80085c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80085c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ca:	685a      	ldr	r2, [r3, #4]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	1ad2      	subs	r2, r2, r3
 80085d0:	2308      	movs	r3, #8
 80085d2:	005b      	lsls	r3, r3, #1
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d91f      	bls.n	8008618 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80085d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	4413      	add	r3, r2
 80085de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80085e0:	69bb      	ldr	r3, [r7, #24]
 80085e2:	f003 0307 	and.w	r3, r3, #7
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d00a      	beq.n	8008600 <pvPortMalloc+0xf8>
	__asm volatile
 80085ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ee:	f383 8811 	msr	BASEPRI, r3
 80085f2:	f3bf 8f6f 	isb	sy
 80085f6:	f3bf 8f4f 	dsb	sy
 80085fa:	613b      	str	r3, [r7, #16]
}
 80085fc:	bf00      	nop
 80085fe:	e7fe      	b.n	80085fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008602:	685a      	ldr	r2, [r3, #4]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	1ad2      	subs	r2, r2, r3
 8008608:	69bb      	ldr	r3, [r7, #24]
 800860a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800860c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008612:	69b8      	ldr	r0, [r7, #24]
 8008614:	f000 f908 	bl	8008828 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008618:	4b1d      	ldr	r3, [pc, #116]	; (8008690 <pvPortMalloc+0x188>)
 800861a:	681a      	ldr	r2, [r3, #0]
 800861c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	1ad3      	subs	r3, r2, r3
 8008622:	4a1b      	ldr	r2, [pc, #108]	; (8008690 <pvPortMalloc+0x188>)
 8008624:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008626:	4b1a      	ldr	r3, [pc, #104]	; (8008690 <pvPortMalloc+0x188>)
 8008628:	681a      	ldr	r2, [r3, #0]
 800862a:	4b1b      	ldr	r3, [pc, #108]	; (8008698 <pvPortMalloc+0x190>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	429a      	cmp	r2, r3
 8008630:	d203      	bcs.n	800863a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008632:	4b17      	ldr	r3, [pc, #92]	; (8008690 <pvPortMalloc+0x188>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4a18      	ldr	r2, [pc, #96]	; (8008698 <pvPortMalloc+0x190>)
 8008638:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800863a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863c:	685a      	ldr	r2, [r3, #4]
 800863e:	4b13      	ldr	r3, [pc, #76]	; (800868c <pvPortMalloc+0x184>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	431a      	orrs	r2, r3
 8008644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008646:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864a:	2200      	movs	r2, #0
 800864c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800864e:	4b13      	ldr	r3, [pc, #76]	; (800869c <pvPortMalloc+0x194>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	3301      	adds	r3, #1
 8008654:	4a11      	ldr	r2, [pc, #68]	; (800869c <pvPortMalloc+0x194>)
 8008656:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008658:	f7ff fa54 	bl	8007b04 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800865c:	69fb      	ldr	r3, [r7, #28]
 800865e:	f003 0307 	and.w	r3, r3, #7
 8008662:	2b00      	cmp	r3, #0
 8008664:	d00a      	beq.n	800867c <pvPortMalloc+0x174>
	__asm volatile
 8008666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800866a:	f383 8811 	msr	BASEPRI, r3
 800866e:	f3bf 8f6f 	isb	sy
 8008672:	f3bf 8f4f 	dsb	sy
 8008676:	60fb      	str	r3, [r7, #12]
}
 8008678:	bf00      	nop
 800867a:	e7fe      	b.n	800867a <pvPortMalloc+0x172>
	return pvReturn;
 800867c:	69fb      	ldr	r3, [r7, #28]
}
 800867e:	4618      	mov	r0, r3
 8008680:	3728      	adds	r7, #40	; 0x28
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}
 8008686:	bf00      	nop
 8008688:	200046e4 	.word	0x200046e4
 800868c:	200046f8 	.word	0x200046f8
 8008690:	200046e8 	.word	0x200046e8
 8008694:	200046dc 	.word	0x200046dc
 8008698:	200046ec 	.word	0x200046ec
 800869c:	200046f0 	.word	0x200046f0

080086a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b086      	sub	sp, #24
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d04d      	beq.n	800874e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80086b2:	2308      	movs	r3, #8
 80086b4:	425b      	negs	r3, r3
 80086b6:	697a      	ldr	r2, [r7, #20]
 80086b8:	4413      	add	r3, r2
 80086ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	685a      	ldr	r2, [r3, #4]
 80086c4:	4b24      	ldr	r3, [pc, #144]	; (8008758 <vPortFree+0xb8>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4013      	ands	r3, r2
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d10a      	bne.n	80086e4 <vPortFree+0x44>
	__asm volatile
 80086ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d2:	f383 8811 	msr	BASEPRI, r3
 80086d6:	f3bf 8f6f 	isb	sy
 80086da:	f3bf 8f4f 	dsb	sy
 80086de:	60fb      	str	r3, [r7, #12]
}
 80086e0:	bf00      	nop
 80086e2:	e7fe      	b.n	80086e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d00a      	beq.n	8008702 <vPortFree+0x62>
	__asm volatile
 80086ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f0:	f383 8811 	msr	BASEPRI, r3
 80086f4:	f3bf 8f6f 	isb	sy
 80086f8:	f3bf 8f4f 	dsb	sy
 80086fc:	60bb      	str	r3, [r7, #8]
}
 80086fe:	bf00      	nop
 8008700:	e7fe      	b.n	8008700 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008702:	693b      	ldr	r3, [r7, #16]
 8008704:	685a      	ldr	r2, [r3, #4]
 8008706:	4b14      	ldr	r3, [pc, #80]	; (8008758 <vPortFree+0xb8>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4013      	ands	r3, r2
 800870c:	2b00      	cmp	r3, #0
 800870e:	d01e      	beq.n	800874e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d11a      	bne.n	800874e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	685a      	ldr	r2, [r3, #4]
 800871c:	4b0e      	ldr	r3, [pc, #56]	; (8008758 <vPortFree+0xb8>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	43db      	mvns	r3, r3
 8008722:	401a      	ands	r2, r3
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008728:	f7ff f9de 	bl	8007ae8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	685a      	ldr	r2, [r3, #4]
 8008730:	4b0a      	ldr	r3, [pc, #40]	; (800875c <vPortFree+0xbc>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4413      	add	r3, r2
 8008736:	4a09      	ldr	r2, [pc, #36]	; (800875c <vPortFree+0xbc>)
 8008738:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800873a:	6938      	ldr	r0, [r7, #16]
 800873c:	f000 f874 	bl	8008828 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008740:	4b07      	ldr	r3, [pc, #28]	; (8008760 <vPortFree+0xc0>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	3301      	adds	r3, #1
 8008746:	4a06      	ldr	r2, [pc, #24]	; (8008760 <vPortFree+0xc0>)
 8008748:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800874a:	f7ff f9db 	bl	8007b04 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800874e:	bf00      	nop
 8008750:	3718      	adds	r7, #24
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
 8008756:	bf00      	nop
 8008758:	200046f8 	.word	0x200046f8
 800875c:	200046e8 	.word	0x200046e8
 8008760:	200046f4 	.word	0x200046f4

08008764 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008764:	b480      	push	{r7}
 8008766:	b085      	sub	sp, #20
 8008768:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800876a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800876e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008770:	4b27      	ldr	r3, [pc, #156]	; (8008810 <prvHeapInit+0xac>)
 8008772:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f003 0307 	and.w	r3, r3, #7
 800877a:	2b00      	cmp	r3, #0
 800877c:	d00c      	beq.n	8008798 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	3307      	adds	r3, #7
 8008782:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f023 0307 	bic.w	r3, r3, #7
 800878a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800878c:	68ba      	ldr	r2, [r7, #8]
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	1ad3      	subs	r3, r2, r3
 8008792:	4a1f      	ldr	r2, [pc, #124]	; (8008810 <prvHeapInit+0xac>)
 8008794:	4413      	add	r3, r2
 8008796:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800879c:	4a1d      	ldr	r2, [pc, #116]	; (8008814 <prvHeapInit+0xb0>)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80087a2:	4b1c      	ldr	r3, [pc, #112]	; (8008814 <prvHeapInit+0xb0>)
 80087a4:	2200      	movs	r2, #0
 80087a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	68ba      	ldr	r2, [r7, #8]
 80087ac:	4413      	add	r3, r2
 80087ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80087b0:	2208      	movs	r2, #8
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	1a9b      	subs	r3, r3, r2
 80087b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f023 0307 	bic.w	r3, r3, #7
 80087be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	4a15      	ldr	r2, [pc, #84]	; (8008818 <prvHeapInit+0xb4>)
 80087c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80087c6:	4b14      	ldr	r3, [pc, #80]	; (8008818 <prvHeapInit+0xb4>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	2200      	movs	r2, #0
 80087cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80087ce:	4b12      	ldr	r3, [pc, #72]	; (8008818 <prvHeapInit+0xb4>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	2200      	movs	r2, #0
 80087d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	68fa      	ldr	r2, [r7, #12]
 80087de:	1ad2      	subs	r2, r2, r3
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80087e4:	4b0c      	ldr	r3, [pc, #48]	; (8008818 <prvHeapInit+0xb4>)
 80087e6:	681a      	ldr	r2, [r3, #0]
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	4a0a      	ldr	r2, [pc, #40]	; (800881c <prvHeapInit+0xb8>)
 80087f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	685b      	ldr	r3, [r3, #4]
 80087f8:	4a09      	ldr	r2, [pc, #36]	; (8008820 <prvHeapInit+0xbc>)
 80087fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80087fc:	4b09      	ldr	r3, [pc, #36]	; (8008824 <prvHeapInit+0xc0>)
 80087fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008802:	601a      	str	r2, [r3, #0]
}
 8008804:	bf00      	nop
 8008806:	3714      	adds	r7, #20
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr
 8008810:	20000adc 	.word	0x20000adc
 8008814:	200046dc 	.word	0x200046dc
 8008818:	200046e4 	.word	0x200046e4
 800881c:	200046ec 	.word	0x200046ec
 8008820:	200046e8 	.word	0x200046e8
 8008824:	200046f8 	.word	0x200046f8

08008828 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008828:	b480      	push	{r7}
 800882a:	b085      	sub	sp, #20
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008830:	4b28      	ldr	r3, [pc, #160]	; (80088d4 <prvInsertBlockIntoFreeList+0xac>)
 8008832:	60fb      	str	r3, [r7, #12]
 8008834:	e002      	b.n	800883c <prvInsertBlockIntoFreeList+0x14>
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	60fb      	str	r3, [r7, #12]
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	687a      	ldr	r2, [r7, #4]
 8008842:	429a      	cmp	r2, r3
 8008844:	d8f7      	bhi.n	8008836 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	68ba      	ldr	r2, [r7, #8]
 8008850:	4413      	add	r3, r2
 8008852:	687a      	ldr	r2, [r7, #4]
 8008854:	429a      	cmp	r2, r3
 8008856:	d108      	bne.n	800886a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	685a      	ldr	r2, [r3, #4]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	441a      	add	r2, r3
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	685b      	ldr	r3, [r3, #4]
 8008872:	68ba      	ldr	r2, [r7, #8]
 8008874:	441a      	add	r2, r3
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	429a      	cmp	r2, r3
 800887c:	d118      	bne.n	80088b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681a      	ldr	r2, [r3, #0]
 8008882:	4b15      	ldr	r3, [pc, #84]	; (80088d8 <prvInsertBlockIntoFreeList+0xb0>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	429a      	cmp	r2, r3
 8008888:	d00d      	beq.n	80088a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	685a      	ldr	r2, [r3, #4]
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	441a      	add	r2, r3
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	681a      	ldr	r2, [r3, #0]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	601a      	str	r2, [r3, #0]
 80088a4:	e008      	b.n	80088b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80088a6:	4b0c      	ldr	r3, [pc, #48]	; (80088d8 <prvInsertBlockIntoFreeList+0xb0>)
 80088a8:	681a      	ldr	r2, [r3, #0]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	601a      	str	r2, [r3, #0]
 80088ae:	e003      	b.n	80088b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681a      	ldr	r2, [r3, #0]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80088b8:	68fa      	ldr	r2, [r7, #12]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	429a      	cmp	r2, r3
 80088be:	d002      	beq.n	80088c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	687a      	ldr	r2, [r7, #4]
 80088c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80088c6:	bf00      	nop
 80088c8:	3714      	adds	r7, #20
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr
 80088d2:	bf00      	nop
 80088d4:	200046dc 	.word	0x200046dc
 80088d8:	200046e4 	.word	0x200046e4

080088dc <__errno>:
 80088dc:	4b01      	ldr	r3, [pc, #4]	; (80088e4 <__errno+0x8>)
 80088de:	6818      	ldr	r0, [r3, #0]
 80088e0:	4770      	bx	lr
 80088e2:	bf00      	nop
 80088e4:	20000020 	.word	0x20000020

080088e8 <__libc_init_array>:
 80088e8:	b570      	push	{r4, r5, r6, lr}
 80088ea:	4d0d      	ldr	r5, [pc, #52]	; (8008920 <__libc_init_array+0x38>)
 80088ec:	4c0d      	ldr	r4, [pc, #52]	; (8008924 <__libc_init_array+0x3c>)
 80088ee:	1b64      	subs	r4, r4, r5
 80088f0:	10a4      	asrs	r4, r4, #2
 80088f2:	2600      	movs	r6, #0
 80088f4:	42a6      	cmp	r6, r4
 80088f6:	d109      	bne.n	800890c <__libc_init_array+0x24>
 80088f8:	4d0b      	ldr	r5, [pc, #44]	; (8008928 <__libc_init_array+0x40>)
 80088fa:	4c0c      	ldr	r4, [pc, #48]	; (800892c <__libc_init_array+0x44>)
 80088fc:	f000 fcb8 	bl	8009270 <_init>
 8008900:	1b64      	subs	r4, r4, r5
 8008902:	10a4      	asrs	r4, r4, #2
 8008904:	2600      	movs	r6, #0
 8008906:	42a6      	cmp	r6, r4
 8008908:	d105      	bne.n	8008916 <__libc_init_array+0x2e>
 800890a:	bd70      	pop	{r4, r5, r6, pc}
 800890c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008910:	4798      	blx	r3
 8008912:	3601      	adds	r6, #1
 8008914:	e7ee      	b.n	80088f4 <__libc_init_array+0xc>
 8008916:	f855 3b04 	ldr.w	r3, [r5], #4
 800891a:	4798      	blx	r3
 800891c:	3601      	adds	r6, #1
 800891e:	e7f2      	b.n	8008906 <__libc_init_array+0x1e>
 8008920:	0800a938 	.word	0x0800a938
 8008924:	0800a938 	.word	0x0800a938
 8008928:	0800a938 	.word	0x0800a938
 800892c:	0800a93c 	.word	0x0800a93c

08008930 <__retarget_lock_acquire_recursive>:
 8008930:	4770      	bx	lr

08008932 <__retarget_lock_release_recursive>:
 8008932:	4770      	bx	lr

08008934 <memcpy>:
 8008934:	440a      	add	r2, r1
 8008936:	4291      	cmp	r1, r2
 8008938:	f100 33ff 	add.w	r3, r0, #4294967295
 800893c:	d100      	bne.n	8008940 <memcpy+0xc>
 800893e:	4770      	bx	lr
 8008940:	b510      	push	{r4, lr}
 8008942:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008946:	f803 4f01 	strb.w	r4, [r3, #1]!
 800894a:	4291      	cmp	r1, r2
 800894c:	d1f9      	bne.n	8008942 <memcpy+0xe>
 800894e:	bd10      	pop	{r4, pc}

08008950 <memmove>:
 8008950:	4288      	cmp	r0, r1
 8008952:	b510      	push	{r4, lr}
 8008954:	eb01 0402 	add.w	r4, r1, r2
 8008958:	d902      	bls.n	8008960 <memmove+0x10>
 800895a:	4284      	cmp	r4, r0
 800895c:	4623      	mov	r3, r4
 800895e:	d807      	bhi.n	8008970 <memmove+0x20>
 8008960:	1e43      	subs	r3, r0, #1
 8008962:	42a1      	cmp	r1, r4
 8008964:	d008      	beq.n	8008978 <memmove+0x28>
 8008966:	f811 2b01 	ldrb.w	r2, [r1], #1
 800896a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800896e:	e7f8      	b.n	8008962 <memmove+0x12>
 8008970:	4402      	add	r2, r0
 8008972:	4601      	mov	r1, r0
 8008974:	428a      	cmp	r2, r1
 8008976:	d100      	bne.n	800897a <memmove+0x2a>
 8008978:	bd10      	pop	{r4, pc}
 800897a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800897e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008982:	e7f7      	b.n	8008974 <memmove+0x24>

08008984 <memset>:
 8008984:	4402      	add	r2, r0
 8008986:	4603      	mov	r3, r0
 8008988:	4293      	cmp	r3, r2
 800898a:	d100      	bne.n	800898e <memset+0xa>
 800898c:	4770      	bx	lr
 800898e:	f803 1b01 	strb.w	r1, [r3], #1
 8008992:	e7f9      	b.n	8008988 <memset+0x4>

08008994 <_malloc_r>:
 8008994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008996:	1ccd      	adds	r5, r1, #3
 8008998:	f025 0503 	bic.w	r5, r5, #3
 800899c:	3508      	adds	r5, #8
 800899e:	2d0c      	cmp	r5, #12
 80089a0:	bf38      	it	cc
 80089a2:	250c      	movcc	r5, #12
 80089a4:	2d00      	cmp	r5, #0
 80089a6:	4606      	mov	r6, r0
 80089a8:	db01      	blt.n	80089ae <_malloc_r+0x1a>
 80089aa:	42a9      	cmp	r1, r5
 80089ac:	d903      	bls.n	80089b6 <_malloc_r+0x22>
 80089ae:	230c      	movs	r3, #12
 80089b0:	6033      	str	r3, [r6, #0]
 80089b2:	2000      	movs	r0, #0
 80089b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089b6:	f000 f8e1 	bl	8008b7c <__malloc_lock>
 80089ba:	4921      	ldr	r1, [pc, #132]	; (8008a40 <_malloc_r+0xac>)
 80089bc:	680a      	ldr	r2, [r1, #0]
 80089be:	4614      	mov	r4, r2
 80089c0:	b99c      	cbnz	r4, 80089ea <_malloc_r+0x56>
 80089c2:	4f20      	ldr	r7, [pc, #128]	; (8008a44 <_malloc_r+0xb0>)
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	b923      	cbnz	r3, 80089d2 <_malloc_r+0x3e>
 80089c8:	4621      	mov	r1, r4
 80089ca:	4630      	mov	r0, r6
 80089cc:	f000 f8a6 	bl	8008b1c <_sbrk_r>
 80089d0:	6038      	str	r0, [r7, #0]
 80089d2:	4629      	mov	r1, r5
 80089d4:	4630      	mov	r0, r6
 80089d6:	f000 f8a1 	bl	8008b1c <_sbrk_r>
 80089da:	1c43      	adds	r3, r0, #1
 80089dc:	d123      	bne.n	8008a26 <_malloc_r+0x92>
 80089de:	230c      	movs	r3, #12
 80089e0:	6033      	str	r3, [r6, #0]
 80089e2:	4630      	mov	r0, r6
 80089e4:	f000 f8d0 	bl	8008b88 <__malloc_unlock>
 80089e8:	e7e3      	b.n	80089b2 <_malloc_r+0x1e>
 80089ea:	6823      	ldr	r3, [r4, #0]
 80089ec:	1b5b      	subs	r3, r3, r5
 80089ee:	d417      	bmi.n	8008a20 <_malloc_r+0x8c>
 80089f0:	2b0b      	cmp	r3, #11
 80089f2:	d903      	bls.n	80089fc <_malloc_r+0x68>
 80089f4:	6023      	str	r3, [r4, #0]
 80089f6:	441c      	add	r4, r3
 80089f8:	6025      	str	r5, [r4, #0]
 80089fa:	e004      	b.n	8008a06 <_malloc_r+0x72>
 80089fc:	6863      	ldr	r3, [r4, #4]
 80089fe:	42a2      	cmp	r2, r4
 8008a00:	bf0c      	ite	eq
 8008a02:	600b      	streq	r3, [r1, #0]
 8008a04:	6053      	strne	r3, [r2, #4]
 8008a06:	4630      	mov	r0, r6
 8008a08:	f000 f8be 	bl	8008b88 <__malloc_unlock>
 8008a0c:	f104 000b 	add.w	r0, r4, #11
 8008a10:	1d23      	adds	r3, r4, #4
 8008a12:	f020 0007 	bic.w	r0, r0, #7
 8008a16:	1ac2      	subs	r2, r0, r3
 8008a18:	d0cc      	beq.n	80089b4 <_malloc_r+0x20>
 8008a1a:	1a1b      	subs	r3, r3, r0
 8008a1c:	50a3      	str	r3, [r4, r2]
 8008a1e:	e7c9      	b.n	80089b4 <_malloc_r+0x20>
 8008a20:	4622      	mov	r2, r4
 8008a22:	6864      	ldr	r4, [r4, #4]
 8008a24:	e7cc      	b.n	80089c0 <_malloc_r+0x2c>
 8008a26:	1cc4      	adds	r4, r0, #3
 8008a28:	f024 0403 	bic.w	r4, r4, #3
 8008a2c:	42a0      	cmp	r0, r4
 8008a2e:	d0e3      	beq.n	80089f8 <_malloc_r+0x64>
 8008a30:	1a21      	subs	r1, r4, r0
 8008a32:	4630      	mov	r0, r6
 8008a34:	f000 f872 	bl	8008b1c <_sbrk_r>
 8008a38:	3001      	adds	r0, #1
 8008a3a:	d1dd      	bne.n	80089f8 <_malloc_r+0x64>
 8008a3c:	e7cf      	b.n	80089de <_malloc_r+0x4a>
 8008a3e:	bf00      	nop
 8008a40:	200046fc 	.word	0x200046fc
 8008a44:	20004700 	.word	0x20004700

08008a48 <cleanup_glue>:
 8008a48:	b538      	push	{r3, r4, r5, lr}
 8008a4a:	460c      	mov	r4, r1
 8008a4c:	6809      	ldr	r1, [r1, #0]
 8008a4e:	4605      	mov	r5, r0
 8008a50:	b109      	cbz	r1, 8008a56 <cleanup_glue+0xe>
 8008a52:	f7ff fff9 	bl	8008a48 <cleanup_glue>
 8008a56:	4621      	mov	r1, r4
 8008a58:	4628      	mov	r0, r5
 8008a5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a5e:	f000 b899 	b.w	8008b94 <_free_r>
	...

08008a64 <_reclaim_reent>:
 8008a64:	4b2c      	ldr	r3, [pc, #176]	; (8008b18 <_reclaim_reent+0xb4>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4283      	cmp	r3, r0
 8008a6a:	b570      	push	{r4, r5, r6, lr}
 8008a6c:	4604      	mov	r4, r0
 8008a6e:	d051      	beq.n	8008b14 <_reclaim_reent+0xb0>
 8008a70:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008a72:	b143      	cbz	r3, 8008a86 <_reclaim_reent+0x22>
 8008a74:	68db      	ldr	r3, [r3, #12]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d14a      	bne.n	8008b10 <_reclaim_reent+0xac>
 8008a7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a7c:	6819      	ldr	r1, [r3, #0]
 8008a7e:	b111      	cbz	r1, 8008a86 <_reclaim_reent+0x22>
 8008a80:	4620      	mov	r0, r4
 8008a82:	f000 f887 	bl	8008b94 <_free_r>
 8008a86:	6961      	ldr	r1, [r4, #20]
 8008a88:	b111      	cbz	r1, 8008a90 <_reclaim_reent+0x2c>
 8008a8a:	4620      	mov	r0, r4
 8008a8c:	f000 f882 	bl	8008b94 <_free_r>
 8008a90:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008a92:	b111      	cbz	r1, 8008a9a <_reclaim_reent+0x36>
 8008a94:	4620      	mov	r0, r4
 8008a96:	f000 f87d 	bl	8008b94 <_free_r>
 8008a9a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008a9c:	b111      	cbz	r1, 8008aa4 <_reclaim_reent+0x40>
 8008a9e:	4620      	mov	r0, r4
 8008aa0:	f000 f878 	bl	8008b94 <_free_r>
 8008aa4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008aa6:	b111      	cbz	r1, 8008aae <_reclaim_reent+0x4a>
 8008aa8:	4620      	mov	r0, r4
 8008aaa:	f000 f873 	bl	8008b94 <_free_r>
 8008aae:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008ab0:	b111      	cbz	r1, 8008ab8 <_reclaim_reent+0x54>
 8008ab2:	4620      	mov	r0, r4
 8008ab4:	f000 f86e 	bl	8008b94 <_free_r>
 8008ab8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008aba:	b111      	cbz	r1, 8008ac2 <_reclaim_reent+0x5e>
 8008abc:	4620      	mov	r0, r4
 8008abe:	f000 f869 	bl	8008b94 <_free_r>
 8008ac2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008ac4:	b111      	cbz	r1, 8008acc <_reclaim_reent+0x68>
 8008ac6:	4620      	mov	r0, r4
 8008ac8:	f000 f864 	bl	8008b94 <_free_r>
 8008acc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ace:	b111      	cbz	r1, 8008ad6 <_reclaim_reent+0x72>
 8008ad0:	4620      	mov	r0, r4
 8008ad2:	f000 f85f 	bl	8008b94 <_free_r>
 8008ad6:	69a3      	ldr	r3, [r4, #24]
 8008ad8:	b1e3      	cbz	r3, 8008b14 <_reclaim_reent+0xb0>
 8008ada:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008adc:	4620      	mov	r0, r4
 8008ade:	4798      	blx	r3
 8008ae0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008ae2:	b1b9      	cbz	r1, 8008b14 <_reclaim_reent+0xb0>
 8008ae4:	4620      	mov	r0, r4
 8008ae6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008aea:	f7ff bfad 	b.w	8008a48 <cleanup_glue>
 8008aee:	5949      	ldr	r1, [r1, r5]
 8008af0:	b941      	cbnz	r1, 8008b04 <_reclaim_reent+0xa0>
 8008af2:	3504      	adds	r5, #4
 8008af4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008af6:	2d80      	cmp	r5, #128	; 0x80
 8008af8:	68d9      	ldr	r1, [r3, #12]
 8008afa:	d1f8      	bne.n	8008aee <_reclaim_reent+0x8a>
 8008afc:	4620      	mov	r0, r4
 8008afe:	f000 f849 	bl	8008b94 <_free_r>
 8008b02:	e7ba      	b.n	8008a7a <_reclaim_reent+0x16>
 8008b04:	680e      	ldr	r6, [r1, #0]
 8008b06:	4620      	mov	r0, r4
 8008b08:	f000 f844 	bl	8008b94 <_free_r>
 8008b0c:	4631      	mov	r1, r6
 8008b0e:	e7ef      	b.n	8008af0 <_reclaim_reent+0x8c>
 8008b10:	2500      	movs	r5, #0
 8008b12:	e7ef      	b.n	8008af4 <_reclaim_reent+0x90>
 8008b14:	bd70      	pop	{r4, r5, r6, pc}
 8008b16:	bf00      	nop
 8008b18:	20000020 	.word	0x20000020

08008b1c <_sbrk_r>:
 8008b1c:	b538      	push	{r3, r4, r5, lr}
 8008b1e:	4d06      	ldr	r5, [pc, #24]	; (8008b38 <_sbrk_r+0x1c>)
 8008b20:	2300      	movs	r3, #0
 8008b22:	4604      	mov	r4, r0
 8008b24:	4608      	mov	r0, r1
 8008b26:	602b      	str	r3, [r5, #0]
 8008b28:	f7f9 f998 	bl	8001e5c <_sbrk>
 8008b2c:	1c43      	adds	r3, r0, #1
 8008b2e:	d102      	bne.n	8008b36 <_sbrk_r+0x1a>
 8008b30:	682b      	ldr	r3, [r5, #0]
 8008b32:	b103      	cbz	r3, 8008b36 <_sbrk_r+0x1a>
 8008b34:	6023      	str	r3, [r4, #0]
 8008b36:	bd38      	pop	{r3, r4, r5, pc}
 8008b38:	2000488c 	.word	0x2000488c

08008b3c <siprintf>:
 8008b3c:	b40e      	push	{r1, r2, r3}
 8008b3e:	b500      	push	{lr}
 8008b40:	b09c      	sub	sp, #112	; 0x70
 8008b42:	ab1d      	add	r3, sp, #116	; 0x74
 8008b44:	9002      	str	r0, [sp, #8]
 8008b46:	9006      	str	r0, [sp, #24]
 8008b48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008b4c:	4809      	ldr	r0, [pc, #36]	; (8008b74 <siprintf+0x38>)
 8008b4e:	9107      	str	r1, [sp, #28]
 8008b50:	9104      	str	r1, [sp, #16]
 8008b52:	4909      	ldr	r1, [pc, #36]	; (8008b78 <siprintf+0x3c>)
 8008b54:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b58:	9105      	str	r1, [sp, #20]
 8008b5a:	6800      	ldr	r0, [r0, #0]
 8008b5c:	9301      	str	r3, [sp, #4]
 8008b5e:	a902      	add	r1, sp, #8
 8008b60:	f000 f8c4 	bl	8008cec <_svfiprintf_r>
 8008b64:	9b02      	ldr	r3, [sp, #8]
 8008b66:	2200      	movs	r2, #0
 8008b68:	701a      	strb	r2, [r3, #0]
 8008b6a:	b01c      	add	sp, #112	; 0x70
 8008b6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b70:	b003      	add	sp, #12
 8008b72:	4770      	bx	lr
 8008b74:	20000020 	.word	0x20000020
 8008b78:	ffff0208 	.word	0xffff0208

08008b7c <__malloc_lock>:
 8008b7c:	4801      	ldr	r0, [pc, #4]	; (8008b84 <__malloc_lock+0x8>)
 8008b7e:	f7ff bed7 	b.w	8008930 <__retarget_lock_acquire_recursive>
 8008b82:	bf00      	nop
 8008b84:	20004884 	.word	0x20004884

08008b88 <__malloc_unlock>:
 8008b88:	4801      	ldr	r0, [pc, #4]	; (8008b90 <__malloc_unlock+0x8>)
 8008b8a:	f7ff bed2 	b.w	8008932 <__retarget_lock_release_recursive>
 8008b8e:	bf00      	nop
 8008b90:	20004884 	.word	0x20004884

08008b94 <_free_r>:
 8008b94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b96:	2900      	cmp	r1, #0
 8008b98:	d048      	beq.n	8008c2c <_free_r+0x98>
 8008b9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b9e:	9001      	str	r0, [sp, #4]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	f1a1 0404 	sub.w	r4, r1, #4
 8008ba6:	bfb8      	it	lt
 8008ba8:	18e4      	addlt	r4, r4, r3
 8008baa:	f7ff ffe7 	bl	8008b7c <__malloc_lock>
 8008bae:	4a20      	ldr	r2, [pc, #128]	; (8008c30 <_free_r+0x9c>)
 8008bb0:	9801      	ldr	r0, [sp, #4]
 8008bb2:	6813      	ldr	r3, [r2, #0]
 8008bb4:	4615      	mov	r5, r2
 8008bb6:	b933      	cbnz	r3, 8008bc6 <_free_r+0x32>
 8008bb8:	6063      	str	r3, [r4, #4]
 8008bba:	6014      	str	r4, [r2, #0]
 8008bbc:	b003      	add	sp, #12
 8008bbe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008bc2:	f7ff bfe1 	b.w	8008b88 <__malloc_unlock>
 8008bc6:	42a3      	cmp	r3, r4
 8008bc8:	d90b      	bls.n	8008be2 <_free_r+0x4e>
 8008bca:	6821      	ldr	r1, [r4, #0]
 8008bcc:	1862      	adds	r2, r4, r1
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	bf04      	itt	eq
 8008bd2:	681a      	ldreq	r2, [r3, #0]
 8008bd4:	685b      	ldreq	r3, [r3, #4]
 8008bd6:	6063      	str	r3, [r4, #4]
 8008bd8:	bf04      	itt	eq
 8008bda:	1852      	addeq	r2, r2, r1
 8008bdc:	6022      	streq	r2, [r4, #0]
 8008bde:	602c      	str	r4, [r5, #0]
 8008be0:	e7ec      	b.n	8008bbc <_free_r+0x28>
 8008be2:	461a      	mov	r2, r3
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	b10b      	cbz	r3, 8008bec <_free_r+0x58>
 8008be8:	42a3      	cmp	r3, r4
 8008bea:	d9fa      	bls.n	8008be2 <_free_r+0x4e>
 8008bec:	6811      	ldr	r1, [r2, #0]
 8008bee:	1855      	adds	r5, r2, r1
 8008bf0:	42a5      	cmp	r5, r4
 8008bf2:	d10b      	bne.n	8008c0c <_free_r+0x78>
 8008bf4:	6824      	ldr	r4, [r4, #0]
 8008bf6:	4421      	add	r1, r4
 8008bf8:	1854      	adds	r4, r2, r1
 8008bfa:	42a3      	cmp	r3, r4
 8008bfc:	6011      	str	r1, [r2, #0]
 8008bfe:	d1dd      	bne.n	8008bbc <_free_r+0x28>
 8008c00:	681c      	ldr	r4, [r3, #0]
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	6053      	str	r3, [r2, #4]
 8008c06:	4421      	add	r1, r4
 8008c08:	6011      	str	r1, [r2, #0]
 8008c0a:	e7d7      	b.n	8008bbc <_free_r+0x28>
 8008c0c:	d902      	bls.n	8008c14 <_free_r+0x80>
 8008c0e:	230c      	movs	r3, #12
 8008c10:	6003      	str	r3, [r0, #0]
 8008c12:	e7d3      	b.n	8008bbc <_free_r+0x28>
 8008c14:	6825      	ldr	r5, [r4, #0]
 8008c16:	1961      	adds	r1, r4, r5
 8008c18:	428b      	cmp	r3, r1
 8008c1a:	bf04      	itt	eq
 8008c1c:	6819      	ldreq	r1, [r3, #0]
 8008c1e:	685b      	ldreq	r3, [r3, #4]
 8008c20:	6063      	str	r3, [r4, #4]
 8008c22:	bf04      	itt	eq
 8008c24:	1949      	addeq	r1, r1, r5
 8008c26:	6021      	streq	r1, [r4, #0]
 8008c28:	6054      	str	r4, [r2, #4]
 8008c2a:	e7c7      	b.n	8008bbc <_free_r+0x28>
 8008c2c:	b003      	add	sp, #12
 8008c2e:	bd30      	pop	{r4, r5, pc}
 8008c30:	200046fc 	.word	0x200046fc

08008c34 <__ssputs_r>:
 8008c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c38:	688e      	ldr	r6, [r1, #8]
 8008c3a:	429e      	cmp	r6, r3
 8008c3c:	4682      	mov	sl, r0
 8008c3e:	460c      	mov	r4, r1
 8008c40:	4690      	mov	r8, r2
 8008c42:	461f      	mov	r7, r3
 8008c44:	d838      	bhi.n	8008cb8 <__ssputs_r+0x84>
 8008c46:	898a      	ldrh	r2, [r1, #12]
 8008c48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008c4c:	d032      	beq.n	8008cb4 <__ssputs_r+0x80>
 8008c4e:	6825      	ldr	r5, [r4, #0]
 8008c50:	6909      	ldr	r1, [r1, #16]
 8008c52:	eba5 0901 	sub.w	r9, r5, r1
 8008c56:	6965      	ldr	r5, [r4, #20]
 8008c58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c60:	3301      	adds	r3, #1
 8008c62:	444b      	add	r3, r9
 8008c64:	106d      	asrs	r5, r5, #1
 8008c66:	429d      	cmp	r5, r3
 8008c68:	bf38      	it	cc
 8008c6a:	461d      	movcc	r5, r3
 8008c6c:	0553      	lsls	r3, r2, #21
 8008c6e:	d531      	bpl.n	8008cd4 <__ssputs_r+0xa0>
 8008c70:	4629      	mov	r1, r5
 8008c72:	f7ff fe8f 	bl	8008994 <_malloc_r>
 8008c76:	4606      	mov	r6, r0
 8008c78:	b950      	cbnz	r0, 8008c90 <__ssputs_r+0x5c>
 8008c7a:	230c      	movs	r3, #12
 8008c7c:	f8ca 3000 	str.w	r3, [sl]
 8008c80:	89a3      	ldrh	r3, [r4, #12]
 8008c82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c86:	81a3      	strh	r3, [r4, #12]
 8008c88:	f04f 30ff 	mov.w	r0, #4294967295
 8008c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c90:	6921      	ldr	r1, [r4, #16]
 8008c92:	464a      	mov	r2, r9
 8008c94:	f7ff fe4e 	bl	8008934 <memcpy>
 8008c98:	89a3      	ldrh	r3, [r4, #12]
 8008c9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ca2:	81a3      	strh	r3, [r4, #12]
 8008ca4:	6126      	str	r6, [r4, #16]
 8008ca6:	6165      	str	r5, [r4, #20]
 8008ca8:	444e      	add	r6, r9
 8008caa:	eba5 0509 	sub.w	r5, r5, r9
 8008cae:	6026      	str	r6, [r4, #0]
 8008cb0:	60a5      	str	r5, [r4, #8]
 8008cb2:	463e      	mov	r6, r7
 8008cb4:	42be      	cmp	r6, r7
 8008cb6:	d900      	bls.n	8008cba <__ssputs_r+0x86>
 8008cb8:	463e      	mov	r6, r7
 8008cba:	4632      	mov	r2, r6
 8008cbc:	6820      	ldr	r0, [r4, #0]
 8008cbe:	4641      	mov	r1, r8
 8008cc0:	f7ff fe46 	bl	8008950 <memmove>
 8008cc4:	68a3      	ldr	r3, [r4, #8]
 8008cc6:	6822      	ldr	r2, [r4, #0]
 8008cc8:	1b9b      	subs	r3, r3, r6
 8008cca:	4432      	add	r2, r6
 8008ccc:	60a3      	str	r3, [r4, #8]
 8008cce:	6022      	str	r2, [r4, #0]
 8008cd0:	2000      	movs	r0, #0
 8008cd2:	e7db      	b.n	8008c8c <__ssputs_r+0x58>
 8008cd4:	462a      	mov	r2, r5
 8008cd6:	f000 fa9d 	bl	8009214 <_realloc_r>
 8008cda:	4606      	mov	r6, r0
 8008cdc:	2800      	cmp	r0, #0
 8008cde:	d1e1      	bne.n	8008ca4 <__ssputs_r+0x70>
 8008ce0:	6921      	ldr	r1, [r4, #16]
 8008ce2:	4650      	mov	r0, sl
 8008ce4:	f7ff ff56 	bl	8008b94 <_free_r>
 8008ce8:	e7c7      	b.n	8008c7a <__ssputs_r+0x46>
	...

08008cec <_svfiprintf_r>:
 8008cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cf0:	4698      	mov	r8, r3
 8008cf2:	898b      	ldrh	r3, [r1, #12]
 8008cf4:	061b      	lsls	r3, r3, #24
 8008cf6:	b09d      	sub	sp, #116	; 0x74
 8008cf8:	4607      	mov	r7, r0
 8008cfa:	460d      	mov	r5, r1
 8008cfc:	4614      	mov	r4, r2
 8008cfe:	d50e      	bpl.n	8008d1e <_svfiprintf_r+0x32>
 8008d00:	690b      	ldr	r3, [r1, #16]
 8008d02:	b963      	cbnz	r3, 8008d1e <_svfiprintf_r+0x32>
 8008d04:	2140      	movs	r1, #64	; 0x40
 8008d06:	f7ff fe45 	bl	8008994 <_malloc_r>
 8008d0a:	6028      	str	r0, [r5, #0]
 8008d0c:	6128      	str	r0, [r5, #16]
 8008d0e:	b920      	cbnz	r0, 8008d1a <_svfiprintf_r+0x2e>
 8008d10:	230c      	movs	r3, #12
 8008d12:	603b      	str	r3, [r7, #0]
 8008d14:	f04f 30ff 	mov.w	r0, #4294967295
 8008d18:	e0d1      	b.n	8008ebe <_svfiprintf_r+0x1d2>
 8008d1a:	2340      	movs	r3, #64	; 0x40
 8008d1c:	616b      	str	r3, [r5, #20]
 8008d1e:	2300      	movs	r3, #0
 8008d20:	9309      	str	r3, [sp, #36]	; 0x24
 8008d22:	2320      	movs	r3, #32
 8008d24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d28:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d2c:	2330      	movs	r3, #48	; 0x30
 8008d2e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008ed8 <_svfiprintf_r+0x1ec>
 8008d32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d36:	f04f 0901 	mov.w	r9, #1
 8008d3a:	4623      	mov	r3, r4
 8008d3c:	469a      	mov	sl, r3
 8008d3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d42:	b10a      	cbz	r2, 8008d48 <_svfiprintf_r+0x5c>
 8008d44:	2a25      	cmp	r2, #37	; 0x25
 8008d46:	d1f9      	bne.n	8008d3c <_svfiprintf_r+0x50>
 8008d48:	ebba 0b04 	subs.w	fp, sl, r4
 8008d4c:	d00b      	beq.n	8008d66 <_svfiprintf_r+0x7a>
 8008d4e:	465b      	mov	r3, fp
 8008d50:	4622      	mov	r2, r4
 8008d52:	4629      	mov	r1, r5
 8008d54:	4638      	mov	r0, r7
 8008d56:	f7ff ff6d 	bl	8008c34 <__ssputs_r>
 8008d5a:	3001      	adds	r0, #1
 8008d5c:	f000 80aa 	beq.w	8008eb4 <_svfiprintf_r+0x1c8>
 8008d60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d62:	445a      	add	r2, fp
 8008d64:	9209      	str	r2, [sp, #36]	; 0x24
 8008d66:	f89a 3000 	ldrb.w	r3, [sl]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	f000 80a2 	beq.w	8008eb4 <_svfiprintf_r+0x1c8>
 8008d70:	2300      	movs	r3, #0
 8008d72:	f04f 32ff 	mov.w	r2, #4294967295
 8008d76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d7a:	f10a 0a01 	add.w	sl, sl, #1
 8008d7e:	9304      	str	r3, [sp, #16]
 8008d80:	9307      	str	r3, [sp, #28]
 8008d82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d86:	931a      	str	r3, [sp, #104]	; 0x68
 8008d88:	4654      	mov	r4, sl
 8008d8a:	2205      	movs	r2, #5
 8008d8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d90:	4851      	ldr	r0, [pc, #324]	; (8008ed8 <_svfiprintf_r+0x1ec>)
 8008d92:	f7f7 fa1d 	bl	80001d0 <memchr>
 8008d96:	9a04      	ldr	r2, [sp, #16]
 8008d98:	b9d8      	cbnz	r0, 8008dd2 <_svfiprintf_r+0xe6>
 8008d9a:	06d0      	lsls	r0, r2, #27
 8008d9c:	bf44      	itt	mi
 8008d9e:	2320      	movmi	r3, #32
 8008da0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008da4:	0711      	lsls	r1, r2, #28
 8008da6:	bf44      	itt	mi
 8008da8:	232b      	movmi	r3, #43	; 0x2b
 8008daa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008dae:	f89a 3000 	ldrb.w	r3, [sl]
 8008db2:	2b2a      	cmp	r3, #42	; 0x2a
 8008db4:	d015      	beq.n	8008de2 <_svfiprintf_r+0xf6>
 8008db6:	9a07      	ldr	r2, [sp, #28]
 8008db8:	4654      	mov	r4, sl
 8008dba:	2000      	movs	r0, #0
 8008dbc:	f04f 0c0a 	mov.w	ip, #10
 8008dc0:	4621      	mov	r1, r4
 8008dc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008dc6:	3b30      	subs	r3, #48	; 0x30
 8008dc8:	2b09      	cmp	r3, #9
 8008dca:	d94e      	bls.n	8008e6a <_svfiprintf_r+0x17e>
 8008dcc:	b1b0      	cbz	r0, 8008dfc <_svfiprintf_r+0x110>
 8008dce:	9207      	str	r2, [sp, #28]
 8008dd0:	e014      	b.n	8008dfc <_svfiprintf_r+0x110>
 8008dd2:	eba0 0308 	sub.w	r3, r0, r8
 8008dd6:	fa09 f303 	lsl.w	r3, r9, r3
 8008dda:	4313      	orrs	r3, r2
 8008ddc:	9304      	str	r3, [sp, #16]
 8008dde:	46a2      	mov	sl, r4
 8008de0:	e7d2      	b.n	8008d88 <_svfiprintf_r+0x9c>
 8008de2:	9b03      	ldr	r3, [sp, #12]
 8008de4:	1d19      	adds	r1, r3, #4
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	9103      	str	r1, [sp, #12]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	bfbb      	ittet	lt
 8008dee:	425b      	neglt	r3, r3
 8008df0:	f042 0202 	orrlt.w	r2, r2, #2
 8008df4:	9307      	strge	r3, [sp, #28]
 8008df6:	9307      	strlt	r3, [sp, #28]
 8008df8:	bfb8      	it	lt
 8008dfa:	9204      	strlt	r2, [sp, #16]
 8008dfc:	7823      	ldrb	r3, [r4, #0]
 8008dfe:	2b2e      	cmp	r3, #46	; 0x2e
 8008e00:	d10c      	bne.n	8008e1c <_svfiprintf_r+0x130>
 8008e02:	7863      	ldrb	r3, [r4, #1]
 8008e04:	2b2a      	cmp	r3, #42	; 0x2a
 8008e06:	d135      	bne.n	8008e74 <_svfiprintf_r+0x188>
 8008e08:	9b03      	ldr	r3, [sp, #12]
 8008e0a:	1d1a      	adds	r2, r3, #4
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	9203      	str	r2, [sp, #12]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	bfb8      	it	lt
 8008e14:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e18:	3402      	adds	r4, #2
 8008e1a:	9305      	str	r3, [sp, #20]
 8008e1c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008ee8 <_svfiprintf_r+0x1fc>
 8008e20:	7821      	ldrb	r1, [r4, #0]
 8008e22:	2203      	movs	r2, #3
 8008e24:	4650      	mov	r0, sl
 8008e26:	f7f7 f9d3 	bl	80001d0 <memchr>
 8008e2a:	b140      	cbz	r0, 8008e3e <_svfiprintf_r+0x152>
 8008e2c:	2340      	movs	r3, #64	; 0x40
 8008e2e:	eba0 000a 	sub.w	r0, r0, sl
 8008e32:	fa03 f000 	lsl.w	r0, r3, r0
 8008e36:	9b04      	ldr	r3, [sp, #16]
 8008e38:	4303      	orrs	r3, r0
 8008e3a:	3401      	adds	r4, #1
 8008e3c:	9304      	str	r3, [sp, #16]
 8008e3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e42:	4826      	ldr	r0, [pc, #152]	; (8008edc <_svfiprintf_r+0x1f0>)
 8008e44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e48:	2206      	movs	r2, #6
 8008e4a:	f7f7 f9c1 	bl	80001d0 <memchr>
 8008e4e:	2800      	cmp	r0, #0
 8008e50:	d038      	beq.n	8008ec4 <_svfiprintf_r+0x1d8>
 8008e52:	4b23      	ldr	r3, [pc, #140]	; (8008ee0 <_svfiprintf_r+0x1f4>)
 8008e54:	bb1b      	cbnz	r3, 8008e9e <_svfiprintf_r+0x1b2>
 8008e56:	9b03      	ldr	r3, [sp, #12]
 8008e58:	3307      	adds	r3, #7
 8008e5a:	f023 0307 	bic.w	r3, r3, #7
 8008e5e:	3308      	adds	r3, #8
 8008e60:	9303      	str	r3, [sp, #12]
 8008e62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e64:	4433      	add	r3, r6
 8008e66:	9309      	str	r3, [sp, #36]	; 0x24
 8008e68:	e767      	b.n	8008d3a <_svfiprintf_r+0x4e>
 8008e6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e6e:	460c      	mov	r4, r1
 8008e70:	2001      	movs	r0, #1
 8008e72:	e7a5      	b.n	8008dc0 <_svfiprintf_r+0xd4>
 8008e74:	2300      	movs	r3, #0
 8008e76:	3401      	adds	r4, #1
 8008e78:	9305      	str	r3, [sp, #20]
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	f04f 0c0a 	mov.w	ip, #10
 8008e80:	4620      	mov	r0, r4
 8008e82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e86:	3a30      	subs	r2, #48	; 0x30
 8008e88:	2a09      	cmp	r2, #9
 8008e8a:	d903      	bls.n	8008e94 <_svfiprintf_r+0x1a8>
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d0c5      	beq.n	8008e1c <_svfiprintf_r+0x130>
 8008e90:	9105      	str	r1, [sp, #20]
 8008e92:	e7c3      	b.n	8008e1c <_svfiprintf_r+0x130>
 8008e94:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e98:	4604      	mov	r4, r0
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	e7f0      	b.n	8008e80 <_svfiprintf_r+0x194>
 8008e9e:	ab03      	add	r3, sp, #12
 8008ea0:	9300      	str	r3, [sp, #0]
 8008ea2:	462a      	mov	r2, r5
 8008ea4:	4b0f      	ldr	r3, [pc, #60]	; (8008ee4 <_svfiprintf_r+0x1f8>)
 8008ea6:	a904      	add	r1, sp, #16
 8008ea8:	4638      	mov	r0, r7
 8008eaa:	f3af 8000 	nop.w
 8008eae:	1c42      	adds	r2, r0, #1
 8008eb0:	4606      	mov	r6, r0
 8008eb2:	d1d6      	bne.n	8008e62 <_svfiprintf_r+0x176>
 8008eb4:	89ab      	ldrh	r3, [r5, #12]
 8008eb6:	065b      	lsls	r3, r3, #25
 8008eb8:	f53f af2c 	bmi.w	8008d14 <_svfiprintf_r+0x28>
 8008ebc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ebe:	b01d      	add	sp, #116	; 0x74
 8008ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ec4:	ab03      	add	r3, sp, #12
 8008ec6:	9300      	str	r3, [sp, #0]
 8008ec8:	462a      	mov	r2, r5
 8008eca:	4b06      	ldr	r3, [pc, #24]	; (8008ee4 <_svfiprintf_r+0x1f8>)
 8008ecc:	a904      	add	r1, sp, #16
 8008ece:	4638      	mov	r0, r7
 8008ed0:	f000 f87a 	bl	8008fc8 <_printf_i>
 8008ed4:	e7eb      	b.n	8008eae <_svfiprintf_r+0x1c2>
 8008ed6:	bf00      	nop
 8008ed8:	0800a8fc 	.word	0x0800a8fc
 8008edc:	0800a906 	.word	0x0800a906
 8008ee0:	00000000 	.word	0x00000000
 8008ee4:	08008c35 	.word	0x08008c35
 8008ee8:	0800a902 	.word	0x0800a902

08008eec <_printf_common>:
 8008eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ef0:	4616      	mov	r6, r2
 8008ef2:	4699      	mov	r9, r3
 8008ef4:	688a      	ldr	r2, [r1, #8]
 8008ef6:	690b      	ldr	r3, [r1, #16]
 8008ef8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008efc:	4293      	cmp	r3, r2
 8008efe:	bfb8      	it	lt
 8008f00:	4613      	movlt	r3, r2
 8008f02:	6033      	str	r3, [r6, #0]
 8008f04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008f08:	4607      	mov	r7, r0
 8008f0a:	460c      	mov	r4, r1
 8008f0c:	b10a      	cbz	r2, 8008f12 <_printf_common+0x26>
 8008f0e:	3301      	adds	r3, #1
 8008f10:	6033      	str	r3, [r6, #0]
 8008f12:	6823      	ldr	r3, [r4, #0]
 8008f14:	0699      	lsls	r1, r3, #26
 8008f16:	bf42      	ittt	mi
 8008f18:	6833      	ldrmi	r3, [r6, #0]
 8008f1a:	3302      	addmi	r3, #2
 8008f1c:	6033      	strmi	r3, [r6, #0]
 8008f1e:	6825      	ldr	r5, [r4, #0]
 8008f20:	f015 0506 	ands.w	r5, r5, #6
 8008f24:	d106      	bne.n	8008f34 <_printf_common+0x48>
 8008f26:	f104 0a19 	add.w	sl, r4, #25
 8008f2a:	68e3      	ldr	r3, [r4, #12]
 8008f2c:	6832      	ldr	r2, [r6, #0]
 8008f2e:	1a9b      	subs	r3, r3, r2
 8008f30:	42ab      	cmp	r3, r5
 8008f32:	dc26      	bgt.n	8008f82 <_printf_common+0x96>
 8008f34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008f38:	1e13      	subs	r3, r2, #0
 8008f3a:	6822      	ldr	r2, [r4, #0]
 8008f3c:	bf18      	it	ne
 8008f3e:	2301      	movne	r3, #1
 8008f40:	0692      	lsls	r2, r2, #26
 8008f42:	d42b      	bmi.n	8008f9c <_printf_common+0xb0>
 8008f44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008f48:	4649      	mov	r1, r9
 8008f4a:	4638      	mov	r0, r7
 8008f4c:	47c0      	blx	r8
 8008f4e:	3001      	adds	r0, #1
 8008f50:	d01e      	beq.n	8008f90 <_printf_common+0xa4>
 8008f52:	6823      	ldr	r3, [r4, #0]
 8008f54:	68e5      	ldr	r5, [r4, #12]
 8008f56:	6832      	ldr	r2, [r6, #0]
 8008f58:	f003 0306 	and.w	r3, r3, #6
 8008f5c:	2b04      	cmp	r3, #4
 8008f5e:	bf08      	it	eq
 8008f60:	1aad      	subeq	r5, r5, r2
 8008f62:	68a3      	ldr	r3, [r4, #8]
 8008f64:	6922      	ldr	r2, [r4, #16]
 8008f66:	bf0c      	ite	eq
 8008f68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f6c:	2500      	movne	r5, #0
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	bfc4      	itt	gt
 8008f72:	1a9b      	subgt	r3, r3, r2
 8008f74:	18ed      	addgt	r5, r5, r3
 8008f76:	2600      	movs	r6, #0
 8008f78:	341a      	adds	r4, #26
 8008f7a:	42b5      	cmp	r5, r6
 8008f7c:	d11a      	bne.n	8008fb4 <_printf_common+0xc8>
 8008f7e:	2000      	movs	r0, #0
 8008f80:	e008      	b.n	8008f94 <_printf_common+0xa8>
 8008f82:	2301      	movs	r3, #1
 8008f84:	4652      	mov	r2, sl
 8008f86:	4649      	mov	r1, r9
 8008f88:	4638      	mov	r0, r7
 8008f8a:	47c0      	blx	r8
 8008f8c:	3001      	adds	r0, #1
 8008f8e:	d103      	bne.n	8008f98 <_printf_common+0xac>
 8008f90:	f04f 30ff 	mov.w	r0, #4294967295
 8008f94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f98:	3501      	adds	r5, #1
 8008f9a:	e7c6      	b.n	8008f2a <_printf_common+0x3e>
 8008f9c:	18e1      	adds	r1, r4, r3
 8008f9e:	1c5a      	adds	r2, r3, #1
 8008fa0:	2030      	movs	r0, #48	; 0x30
 8008fa2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008fa6:	4422      	add	r2, r4
 8008fa8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008fac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008fb0:	3302      	adds	r3, #2
 8008fb2:	e7c7      	b.n	8008f44 <_printf_common+0x58>
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	4622      	mov	r2, r4
 8008fb8:	4649      	mov	r1, r9
 8008fba:	4638      	mov	r0, r7
 8008fbc:	47c0      	blx	r8
 8008fbe:	3001      	adds	r0, #1
 8008fc0:	d0e6      	beq.n	8008f90 <_printf_common+0xa4>
 8008fc2:	3601      	adds	r6, #1
 8008fc4:	e7d9      	b.n	8008f7a <_printf_common+0x8e>
	...

08008fc8 <_printf_i>:
 8008fc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008fcc:	460c      	mov	r4, r1
 8008fce:	4691      	mov	r9, r2
 8008fd0:	7e27      	ldrb	r7, [r4, #24]
 8008fd2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008fd4:	2f78      	cmp	r7, #120	; 0x78
 8008fd6:	4680      	mov	r8, r0
 8008fd8:	469a      	mov	sl, r3
 8008fda:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008fde:	d807      	bhi.n	8008ff0 <_printf_i+0x28>
 8008fe0:	2f62      	cmp	r7, #98	; 0x62
 8008fe2:	d80a      	bhi.n	8008ffa <_printf_i+0x32>
 8008fe4:	2f00      	cmp	r7, #0
 8008fe6:	f000 80d8 	beq.w	800919a <_printf_i+0x1d2>
 8008fea:	2f58      	cmp	r7, #88	; 0x58
 8008fec:	f000 80a3 	beq.w	8009136 <_printf_i+0x16e>
 8008ff0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008ff4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008ff8:	e03a      	b.n	8009070 <_printf_i+0xa8>
 8008ffa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008ffe:	2b15      	cmp	r3, #21
 8009000:	d8f6      	bhi.n	8008ff0 <_printf_i+0x28>
 8009002:	a001      	add	r0, pc, #4	; (adr r0, 8009008 <_printf_i+0x40>)
 8009004:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009008:	08009061 	.word	0x08009061
 800900c:	08009075 	.word	0x08009075
 8009010:	08008ff1 	.word	0x08008ff1
 8009014:	08008ff1 	.word	0x08008ff1
 8009018:	08008ff1 	.word	0x08008ff1
 800901c:	08008ff1 	.word	0x08008ff1
 8009020:	08009075 	.word	0x08009075
 8009024:	08008ff1 	.word	0x08008ff1
 8009028:	08008ff1 	.word	0x08008ff1
 800902c:	08008ff1 	.word	0x08008ff1
 8009030:	08008ff1 	.word	0x08008ff1
 8009034:	08009181 	.word	0x08009181
 8009038:	080090a5 	.word	0x080090a5
 800903c:	08009163 	.word	0x08009163
 8009040:	08008ff1 	.word	0x08008ff1
 8009044:	08008ff1 	.word	0x08008ff1
 8009048:	080091a3 	.word	0x080091a3
 800904c:	08008ff1 	.word	0x08008ff1
 8009050:	080090a5 	.word	0x080090a5
 8009054:	08008ff1 	.word	0x08008ff1
 8009058:	08008ff1 	.word	0x08008ff1
 800905c:	0800916b 	.word	0x0800916b
 8009060:	680b      	ldr	r3, [r1, #0]
 8009062:	1d1a      	adds	r2, r3, #4
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	600a      	str	r2, [r1, #0]
 8009068:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800906c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009070:	2301      	movs	r3, #1
 8009072:	e0a3      	b.n	80091bc <_printf_i+0x1f4>
 8009074:	6825      	ldr	r5, [r4, #0]
 8009076:	6808      	ldr	r0, [r1, #0]
 8009078:	062e      	lsls	r6, r5, #24
 800907a:	f100 0304 	add.w	r3, r0, #4
 800907e:	d50a      	bpl.n	8009096 <_printf_i+0xce>
 8009080:	6805      	ldr	r5, [r0, #0]
 8009082:	600b      	str	r3, [r1, #0]
 8009084:	2d00      	cmp	r5, #0
 8009086:	da03      	bge.n	8009090 <_printf_i+0xc8>
 8009088:	232d      	movs	r3, #45	; 0x2d
 800908a:	426d      	negs	r5, r5
 800908c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009090:	485e      	ldr	r0, [pc, #376]	; (800920c <_printf_i+0x244>)
 8009092:	230a      	movs	r3, #10
 8009094:	e019      	b.n	80090ca <_printf_i+0x102>
 8009096:	f015 0f40 	tst.w	r5, #64	; 0x40
 800909a:	6805      	ldr	r5, [r0, #0]
 800909c:	600b      	str	r3, [r1, #0]
 800909e:	bf18      	it	ne
 80090a0:	b22d      	sxthne	r5, r5
 80090a2:	e7ef      	b.n	8009084 <_printf_i+0xbc>
 80090a4:	680b      	ldr	r3, [r1, #0]
 80090a6:	6825      	ldr	r5, [r4, #0]
 80090a8:	1d18      	adds	r0, r3, #4
 80090aa:	6008      	str	r0, [r1, #0]
 80090ac:	0628      	lsls	r0, r5, #24
 80090ae:	d501      	bpl.n	80090b4 <_printf_i+0xec>
 80090b0:	681d      	ldr	r5, [r3, #0]
 80090b2:	e002      	b.n	80090ba <_printf_i+0xf2>
 80090b4:	0669      	lsls	r1, r5, #25
 80090b6:	d5fb      	bpl.n	80090b0 <_printf_i+0xe8>
 80090b8:	881d      	ldrh	r5, [r3, #0]
 80090ba:	4854      	ldr	r0, [pc, #336]	; (800920c <_printf_i+0x244>)
 80090bc:	2f6f      	cmp	r7, #111	; 0x6f
 80090be:	bf0c      	ite	eq
 80090c0:	2308      	moveq	r3, #8
 80090c2:	230a      	movne	r3, #10
 80090c4:	2100      	movs	r1, #0
 80090c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80090ca:	6866      	ldr	r6, [r4, #4]
 80090cc:	60a6      	str	r6, [r4, #8]
 80090ce:	2e00      	cmp	r6, #0
 80090d0:	bfa2      	ittt	ge
 80090d2:	6821      	ldrge	r1, [r4, #0]
 80090d4:	f021 0104 	bicge.w	r1, r1, #4
 80090d8:	6021      	strge	r1, [r4, #0]
 80090da:	b90d      	cbnz	r5, 80090e0 <_printf_i+0x118>
 80090dc:	2e00      	cmp	r6, #0
 80090de:	d04d      	beq.n	800917c <_printf_i+0x1b4>
 80090e0:	4616      	mov	r6, r2
 80090e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80090e6:	fb03 5711 	mls	r7, r3, r1, r5
 80090ea:	5dc7      	ldrb	r7, [r0, r7]
 80090ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80090f0:	462f      	mov	r7, r5
 80090f2:	42bb      	cmp	r3, r7
 80090f4:	460d      	mov	r5, r1
 80090f6:	d9f4      	bls.n	80090e2 <_printf_i+0x11a>
 80090f8:	2b08      	cmp	r3, #8
 80090fa:	d10b      	bne.n	8009114 <_printf_i+0x14c>
 80090fc:	6823      	ldr	r3, [r4, #0]
 80090fe:	07df      	lsls	r7, r3, #31
 8009100:	d508      	bpl.n	8009114 <_printf_i+0x14c>
 8009102:	6923      	ldr	r3, [r4, #16]
 8009104:	6861      	ldr	r1, [r4, #4]
 8009106:	4299      	cmp	r1, r3
 8009108:	bfde      	ittt	le
 800910a:	2330      	movle	r3, #48	; 0x30
 800910c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009110:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009114:	1b92      	subs	r2, r2, r6
 8009116:	6122      	str	r2, [r4, #16]
 8009118:	f8cd a000 	str.w	sl, [sp]
 800911c:	464b      	mov	r3, r9
 800911e:	aa03      	add	r2, sp, #12
 8009120:	4621      	mov	r1, r4
 8009122:	4640      	mov	r0, r8
 8009124:	f7ff fee2 	bl	8008eec <_printf_common>
 8009128:	3001      	adds	r0, #1
 800912a:	d14c      	bne.n	80091c6 <_printf_i+0x1fe>
 800912c:	f04f 30ff 	mov.w	r0, #4294967295
 8009130:	b004      	add	sp, #16
 8009132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009136:	4835      	ldr	r0, [pc, #212]	; (800920c <_printf_i+0x244>)
 8009138:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800913c:	6823      	ldr	r3, [r4, #0]
 800913e:	680e      	ldr	r6, [r1, #0]
 8009140:	061f      	lsls	r7, r3, #24
 8009142:	f856 5b04 	ldr.w	r5, [r6], #4
 8009146:	600e      	str	r6, [r1, #0]
 8009148:	d514      	bpl.n	8009174 <_printf_i+0x1ac>
 800914a:	07d9      	lsls	r1, r3, #31
 800914c:	bf44      	itt	mi
 800914e:	f043 0320 	orrmi.w	r3, r3, #32
 8009152:	6023      	strmi	r3, [r4, #0]
 8009154:	b91d      	cbnz	r5, 800915e <_printf_i+0x196>
 8009156:	6823      	ldr	r3, [r4, #0]
 8009158:	f023 0320 	bic.w	r3, r3, #32
 800915c:	6023      	str	r3, [r4, #0]
 800915e:	2310      	movs	r3, #16
 8009160:	e7b0      	b.n	80090c4 <_printf_i+0xfc>
 8009162:	6823      	ldr	r3, [r4, #0]
 8009164:	f043 0320 	orr.w	r3, r3, #32
 8009168:	6023      	str	r3, [r4, #0]
 800916a:	2378      	movs	r3, #120	; 0x78
 800916c:	4828      	ldr	r0, [pc, #160]	; (8009210 <_printf_i+0x248>)
 800916e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009172:	e7e3      	b.n	800913c <_printf_i+0x174>
 8009174:	065e      	lsls	r6, r3, #25
 8009176:	bf48      	it	mi
 8009178:	b2ad      	uxthmi	r5, r5
 800917a:	e7e6      	b.n	800914a <_printf_i+0x182>
 800917c:	4616      	mov	r6, r2
 800917e:	e7bb      	b.n	80090f8 <_printf_i+0x130>
 8009180:	680b      	ldr	r3, [r1, #0]
 8009182:	6826      	ldr	r6, [r4, #0]
 8009184:	6960      	ldr	r0, [r4, #20]
 8009186:	1d1d      	adds	r5, r3, #4
 8009188:	600d      	str	r5, [r1, #0]
 800918a:	0635      	lsls	r5, r6, #24
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	d501      	bpl.n	8009194 <_printf_i+0x1cc>
 8009190:	6018      	str	r0, [r3, #0]
 8009192:	e002      	b.n	800919a <_printf_i+0x1d2>
 8009194:	0671      	lsls	r1, r6, #25
 8009196:	d5fb      	bpl.n	8009190 <_printf_i+0x1c8>
 8009198:	8018      	strh	r0, [r3, #0]
 800919a:	2300      	movs	r3, #0
 800919c:	6123      	str	r3, [r4, #16]
 800919e:	4616      	mov	r6, r2
 80091a0:	e7ba      	b.n	8009118 <_printf_i+0x150>
 80091a2:	680b      	ldr	r3, [r1, #0]
 80091a4:	1d1a      	adds	r2, r3, #4
 80091a6:	600a      	str	r2, [r1, #0]
 80091a8:	681e      	ldr	r6, [r3, #0]
 80091aa:	6862      	ldr	r2, [r4, #4]
 80091ac:	2100      	movs	r1, #0
 80091ae:	4630      	mov	r0, r6
 80091b0:	f7f7 f80e 	bl	80001d0 <memchr>
 80091b4:	b108      	cbz	r0, 80091ba <_printf_i+0x1f2>
 80091b6:	1b80      	subs	r0, r0, r6
 80091b8:	6060      	str	r0, [r4, #4]
 80091ba:	6863      	ldr	r3, [r4, #4]
 80091bc:	6123      	str	r3, [r4, #16]
 80091be:	2300      	movs	r3, #0
 80091c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091c4:	e7a8      	b.n	8009118 <_printf_i+0x150>
 80091c6:	6923      	ldr	r3, [r4, #16]
 80091c8:	4632      	mov	r2, r6
 80091ca:	4649      	mov	r1, r9
 80091cc:	4640      	mov	r0, r8
 80091ce:	47d0      	blx	sl
 80091d0:	3001      	adds	r0, #1
 80091d2:	d0ab      	beq.n	800912c <_printf_i+0x164>
 80091d4:	6823      	ldr	r3, [r4, #0]
 80091d6:	079b      	lsls	r3, r3, #30
 80091d8:	d413      	bmi.n	8009202 <_printf_i+0x23a>
 80091da:	68e0      	ldr	r0, [r4, #12]
 80091dc:	9b03      	ldr	r3, [sp, #12]
 80091de:	4298      	cmp	r0, r3
 80091e0:	bfb8      	it	lt
 80091e2:	4618      	movlt	r0, r3
 80091e4:	e7a4      	b.n	8009130 <_printf_i+0x168>
 80091e6:	2301      	movs	r3, #1
 80091e8:	4632      	mov	r2, r6
 80091ea:	4649      	mov	r1, r9
 80091ec:	4640      	mov	r0, r8
 80091ee:	47d0      	blx	sl
 80091f0:	3001      	adds	r0, #1
 80091f2:	d09b      	beq.n	800912c <_printf_i+0x164>
 80091f4:	3501      	adds	r5, #1
 80091f6:	68e3      	ldr	r3, [r4, #12]
 80091f8:	9903      	ldr	r1, [sp, #12]
 80091fa:	1a5b      	subs	r3, r3, r1
 80091fc:	42ab      	cmp	r3, r5
 80091fe:	dcf2      	bgt.n	80091e6 <_printf_i+0x21e>
 8009200:	e7eb      	b.n	80091da <_printf_i+0x212>
 8009202:	2500      	movs	r5, #0
 8009204:	f104 0619 	add.w	r6, r4, #25
 8009208:	e7f5      	b.n	80091f6 <_printf_i+0x22e>
 800920a:	bf00      	nop
 800920c:	0800a90d 	.word	0x0800a90d
 8009210:	0800a91e 	.word	0x0800a91e

08009214 <_realloc_r>:
 8009214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009216:	4607      	mov	r7, r0
 8009218:	4614      	mov	r4, r2
 800921a:	460e      	mov	r6, r1
 800921c:	b921      	cbnz	r1, 8009228 <_realloc_r+0x14>
 800921e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009222:	4611      	mov	r1, r2
 8009224:	f7ff bbb6 	b.w	8008994 <_malloc_r>
 8009228:	b922      	cbnz	r2, 8009234 <_realloc_r+0x20>
 800922a:	f7ff fcb3 	bl	8008b94 <_free_r>
 800922e:	4625      	mov	r5, r4
 8009230:	4628      	mov	r0, r5
 8009232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009234:	f000 f814 	bl	8009260 <_malloc_usable_size_r>
 8009238:	42a0      	cmp	r0, r4
 800923a:	d20f      	bcs.n	800925c <_realloc_r+0x48>
 800923c:	4621      	mov	r1, r4
 800923e:	4638      	mov	r0, r7
 8009240:	f7ff fba8 	bl	8008994 <_malloc_r>
 8009244:	4605      	mov	r5, r0
 8009246:	2800      	cmp	r0, #0
 8009248:	d0f2      	beq.n	8009230 <_realloc_r+0x1c>
 800924a:	4631      	mov	r1, r6
 800924c:	4622      	mov	r2, r4
 800924e:	f7ff fb71 	bl	8008934 <memcpy>
 8009252:	4631      	mov	r1, r6
 8009254:	4638      	mov	r0, r7
 8009256:	f7ff fc9d 	bl	8008b94 <_free_r>
 800925a:	e7e9      	b.n	8009230 <_realloc_r+0x1c>
 800925c:	4635      	mov	r5, r6
 800925e:	e7e7      	b.n	8009230 <_realloc_r+0x1c>

08009260 <_malloc_usable_size_r>:
 8009260:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009264:	1f18      	subs	r0, r3, #4
 8009266:	2b00      	cmp	r3, #0
 8009268:	bfbc      	itt	lt
 800926a:	580b      	ldrlt	r3, [r1, r0]
 800926c:	18c0      	addlt	r0, r0, r3
 800926e:	4770      	bx	lr

08009270 <_init>:
 8009270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009272:	bf00      	nop
 8009274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009276:	bc08      	pop	{r3}
 8009278:	469e      	mov	lr, r3
 800927a:	4770      	bx	lr

0800927c <_fini>:
 800927c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800927e:	bf00      	nop
 8009280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009282:	bc08      	pop	{r3}
 8009284:	469e      	mov	lr, r3
 8009286:	4770      	bx	lr
